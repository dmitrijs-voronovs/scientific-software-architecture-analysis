quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"I left in the previous one for testing purposes. When we're confident the new one dominates, I will remove it. This is the first of several PRs to speed up densify (and scans and aggregates in general). The rough plan is:; - add CompiledPackEncoder so we aren't interpreting types in the prev_nonnull seqOp,; - make RegionValueAggregator.result staged so we don't use RegionValueBuilder to construct aggregator and scan results. I will do some more benchmarking at that point.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5414:31,test,testing,31,https://hail.is,https://github.com/hail-is/hail/pull/5414,2,"['benchmark', 'test']","['benchmarking', 'testing']"
Testability,"I left the changes to Query and Batch in separate commits for ease of review. I put these in the same PR because we don't really have standalone testing for JVM Jobs outside of Query-on-Batch so the FASTA use-case serves as a test here that cloudfuse is working properly for JVM Jobs. Would be great if Jackie you could review the batch commit and Tim could review the query commit. ## Hail Query; - Added support for the `FROM_FASTA_FILE` rpc and the service backend now passes sequence file information from RGs in every rpc; - Refactored the liftover handling in service_backend to not redundantly store liftover maps and just take them from the ReferenceGenome objects like I did for sequence files. This means that add/remove liftover/sequence functions on the Backend are just intended to sync up the backend with python, which is a no-op for the service backend.; - Don't localize the index file on fromFASTAFile/addSequence before creating the index object. `FastaSequenceIndex` just loads the whole file on construction so might as well stream it in from whatever storage it's in.; - FASTA caching is left alone because those files will be mounted and unmounted from the jvm container over the life of the job. JVM doesn't have to worry about disk usage because that's handled by Batch XFS quotas, so long as the service backend requests enough storage to fit the FASTA file. Batch will make sure that a given bucket (and therefore a given FASTA file) is mounted once per-user on a batch worker. ## Hail Batch; - Added support for read-only cloudfuse mounts for JVM jobs; - These mounts are shared between jobs on the same machine from the same user; - I did not change DockerJobs, but they could be very easily adapted to use this new mount-sharing code.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12736:145,test,testing,145,https://hail.is,https://github.com/hail-is/hail/pull/12736,2,['test'],"['test', 'testing']"
Testability,"I left the exception log statements in because it's not like these are driving up our logging costs, but let me know whether you want to keep them or not. Can make a Grafana alert after this goes in based on this metric.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12622:21,log,log,21,https://hail.is,https://github.com/hail-is/hail/pull/12622,2,['log'],"['log', 'logging']"
Testability,"I liked your diff idea, so I added a new file: batch/sql/estimated-current.txt. This is meant to be the SQL we'd use for initial.sql if we recreated the batch database. It should have collective migrations applied to it. So when we add a new migration, we should update the estimated current which will give informative documentation for the current change. I use ""estimated"" and ""txt"" because it isn't tested or validated in any way.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7916:403,test,tested,403,https://hail.is,https://github.com/hail-is/hail/pull/7916,1,['test'],['tested']
Testability,"I made `_prev_nonnull` private since it's pretty specific to this use case, but I can imagine we'll want to generalize it to something like `take` which aggregates the last `n` values instead of the first `n` values. Here is an example pipeline against `test-chr22.mt`:. ```; import hail as hl. mt = hl.read_matrix_table('test-chr22.mt'); mt = mt._filter_partitions(range(8)) # make small. # restrict to two samples; mt = mt.filter_cols((mt.s == 'V33335') | (mt.s == 'NWD157935')); mt = mt.annotate_rows(__n = hl.agg.count_where(hl.is_defined(mt.GT))); mt = mt.filter_rows(mt.__n > 0). print(; mt.count()). def show_mt(mt):; entry_fields = ['GT']; if 'END' in mt.entry:; entry_fields.append('END'); (mt.select_rows(); .select_entries(*entry_fields); ._localize_entries('__entries', '__cols'); .show()). show_mt(mt). mt = hl.experimental.densify(mt); show_mt(mt). mt.describe(); ```. which produces sparse and dense samples:. ```; +----------------+-------------------------------------+; | locus | __entries |; +----------------+-------------------------------------+; | locus<GRCh38> | array<struct{GT: call, END: int32}> |; +----------------+-------------------------------------+; | chr22:10510746 | [NA,(0/0,10510769)] |; | chr22:10510770 | [NA,(1/1,NA)] |; | chr22:10510771 | [NA,(0/0,10510891)] |; | chr22:10511207 | [NA,(0/0,10511390)] |; | chr22:10511272 | [(0/0,10511390),NA] |; | chr22:10511391 | [NA,(1/1,NA)] |; | chr22:10511392 | [(0/0,10511393),(0/0,10511477)] |; | chr22:10511397 | [(0/0,10511403),NA] |; | chr22:10511406 | [(0/0,10511418),NA] |; | chr22:10511420 | [(0/0,10511420),NA] |; +----------------+-------------------------------------+; showing top 10 rows. +----------------+-------------------------+; | locus | __entries |; +----------------+-------------------------+; | locus<GRCh38> | array<struct{GT: call}> |; +----------------+-------------------------+; | chr22:10510746 | [NA,(0/0)] |; | chr22:10510770 | [NA,(1/1)] |; | chr22:10510771 | [NA,(0/0)] |; | chr22:10511",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5281:254,test,test-,254,https://hail.is,https://github.com/hail-is/hail/pull/5281,2,['test'],['test-']
Testability,"I manually added a `hail_test_gcs_bucket` field to the k8s global config and use that value wherever we have our current test bucket hard coded. I also added the necessary terraform to make that in a new cluster, though I have not done a new terraform run in my project. Once this and a couple more refactoring PRs go in I'll be able to run ci tests in a separate cluster and validate that the terraform is working correctly. cc: @danking",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10807:121,test,test,121,https://hail.is,https://github.com/hail-is/hail/pull/10807,2,['test'],"['test', 'tests']"
Testability,I manually added a field to the global-config for the requester pays bucket used in batch tests. Adding it here to build.py's view of global fields so that CI can template #10866 in the future and actually test it.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10870:90,test,tests,90,https://hail.is,https://github.com/hail-is/hail/pull/10870,2,['test'],"['test', 'tests']"
Testability,I merged these branches and resolved one (false) conflict. - [dependabot/pip/docker/async-timeout-4.0.2](/hail-is/hail/tree/dependabot/pip/docker/async-timeout-4.0.2); - [dependabot/pip/docker/pylint-2.12.2](/hail-is/hail/tree/dependabot/pip/docker/pylint-2.12.2); - [dependabot/pip/docker/python-json-logger-2.0.2](/hail-is/hail/tree/dependabot/pip/docker/python-json-logger-2.0.2); - [dependabot/pip/hail/python/avro-gte-1.10-and-lt-1.12](/hail-is/hail/tree/dependabot/pip/hail/python/avro-gte-1.10-and-lt-1.12); - [dependabot/pip/hail/python/dev/nbsphinx-0.8.8](/hail-is/hail/tree/dependabot/pip/hail/python/dev/nbsphinx-0.8.8); - [dependabot/pip/hail/python/dev/pylint-2.12.2](/hail-is/hail/tree/dependabot/pip/hail/python/dev/pylint-2.12.2); - [dependabot/pip/hail/python/dev/sphinxcontrib-katex-0.8.6](/hail-is/hail/tree/dependabot/pip/hail/python/dev/sphinxcontrib-katex-0.8.6); - [dependabot/pip/hail/python/janus-gte-0.6-and-lt-1.1](/hail-is/hail/tree/dependabot/pip/hail/python/janus-gte-0.6-and-lt-1.1); - [dependabot/pip/hail/python/pre-commit-2.17.0](/hail-is/hail/tree/dependabot/pip/hail/python/pre-commit-2.17.0); - [dependabot/pip/hail/python/tabulate-0.8.9](/hail-is/hail/tree/dependabot/pip/hail/python/tabulate-0.8.9),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11481:302,log,logger-,302,https://hail.is,https://github.com/hail-is/hail/pull/11481,2,['log'],['logger-']
Testability,I missed a few places where CI tries to get the logs of a service.; All of these can fail if the pod has multiple containers. I added; `--all-containers` to ensure it never fails for multi-container Pods.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8542:48,log,logs,48,https://hail.is,https://github.com/hail-is/hail/pull/8542,1,['log'],['logs']
Testability,I missed the `pod_status` thing in the rebase. The container log is just a mistake on my part.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6708:61,log,log,61,https://hail.is,https://github.com/hail-is/hail/pull/6708,1,['log'],['log']
Testability,"I misunderstood what `//` and `/` meant. `//` is used for things like `//google.com/index.html` which resolves to `https://google.com/index.html` when served by `https` and `http://google.com/index.html` when served by `http`. `/` is the same but for local URLs. For example, `/index.html` resolves to `https://hail.is/index.html` on our website but `http://localhost:8080/index.html` if I'm testing locally.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4953:392,test,testing,392,https://hail.is,https://github.com/hail-is/hail/pull/4953,1,['test'],['testing']
Testability,"I mixed the required changes with some cosmetic changes to, e.g. docs and comments. I also added a missing </div> in references.md. AFAICT, there's no way to change the default branch yet, so I didn't change the PR test CI's test repo's branch yet. This change will change the references page on the site as soon as its merged, so we should be prepared to switch over when we merge it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9185:215,test,test,215,https://hail.is,https://github.com/hail-is/hail/pull/9185,2,['test'],['test']
Testability,I need to make sure this all works when ci is deploying in a test namespace.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7101:61,test,test,61,https://hail.is,https://github.com/hail-is/hail/pull/7101,1,['test'],['test']
Testability,I need to test this with dev deploy and make sure it actually works. But would appreciate feedback on the design before I start doing that.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8445:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/8445,1,['test'],['test']
Testability,"I need to write another scala test, but it's working as expected in; large test cases in benchmarks. ```; Name Ratio Time 1 Time 2; ---- ----- ------ ------; table_aggregate_downsample_worst_case 57.8% 57.617 33.278; table_aggregate_downsample_dense 30.0% 127.079 38.119; ----------------------; Geometric mean: 41.6%; Simple mean: 43.9%; Median: 43.9%; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7197:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/7197,3,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"I need to write the CI integration, but this is my proposed distributed buffer service. It's not resilient to failure at all. `python3 -m dbuf 8`. Will create an 8-process dbuf. You can start follower cores on another machine with `python3 -m dbuf 8 --leader http://LEADER:LEADER_PORT`. For a sense of the performance, the following has 10 co-routines each sending 10k messages of 40k bytes each using a buffer size of 5MB (so each co-routine holds about 5MB in memory before flushing):; ```; # python3 scale_test.py 10 5 40000 10000; create; write aggregate-throughput: 0.333 GiB/s; read aggregate-throughput: 0.213 GiB/s; ```; This is on my laptop over loopback with `python3 -m dbuf 4`. Note that we send 4 GB (10 * 10k * 40k bytes). Each core will buffer 512 MiB, so each server core will flush to disk twice (the scale test explicitly equally distributes the load, so each server core gets 1 GB). I've got a Scala client as well which I'll add in another PR. ---. Update: same as above benchmark but I had to reduce the maximum data sent in one HTTP request to 1MiB:. ```; write aggregate-throughput: 0.194 GiB/s; read aggregate-throughput: 0.135 GiB/s; ```. I can no longer run the test on my laptop due to all the changes I made to dbuf to make it run in k8s. I don't know how much of the reduced throughput is due to the HTTP window size. I'll increase all the NGINX max request sizes at some point and retest.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7523:824,test,test,824,https://hail.is,https://github.com/hail-is/hail/pull/7523,6,"['benchmark', 'test']","['benchmark', 'test']"
Testability,I needed this when running PR tests. It is also useful for dev deploys. I also fixed a minor bug in install-editable,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6805:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/6805,1,['test'],['tests']
Testability,"I never tested that PR that got merged (whoops!) and CI tests are insufficient; to catch this case (we should beef those up, asana task added). The issue was that I thought the method to issue an HTTP get request was `get`,; but it was `getitem`. This PR fixes that. This error occured during `update` and; thus prevented all forward progress of CI.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8402:8,test,tested,8,https://hail.is,https://github.com/hail-is/hail/pull/8402,2,['test'],"['tested', 'tests']"
Testability,"I noticed that jobs in test deployments were deadlocking because we weren't spinning up extra instances (compared to the production version of Batch). Although each job could fit on an open instance, its allocated share is still less than the core request for that job. This PR aims to increase the probability in which we ignore an exceed shares error the more we have these errors such that at a certain point the rate will be 100% and we'll be able to continue scheduling.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9464:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/9464,1,['test'],['test']
Testability,"I noticed that the `testIfWithDifferentRequiredness` and `testMakeArrayWithDifferentRequiredness` were failing after I added the assertion in `upcast` for #4585 . After discussing with @tpoterba , it seemed like it would be okay to allow a required type to be a subtype of an optional type. This PR also includes the assertion, which may cause other tests to fail, and so I have marked it as a WIP.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4747:20,test,testIfWithDifferentRequiredness,20,https://hail.is,https://github.com/hail-is/hail/pull/4747,5,"['assert', 'test']","['assertion', 'testIfWithDifferentRequiredness', 'testMakeArrayWithDifferentRequiredness', 'tests']"
Testability,"I noticed that the gnomAD mitochondria datasets were pointing at the `gs://gnomad-public-requester-pays` bucket. The Google Cloud Public Datasets version should be up to date now. Also updated the documented schema for chrM sites. Some information about those changes is available in the gnomAD change log: https://gnomad.broadinstitute.org/news/2021-08-rename-filter-in-mitochondria-dataset-and-minor-format-changes/. And finally, since these were the only two datasets that reference `gnomad-public-requester-pays`, removed `gnomad-public-requester-pays` from the list of annotation DB buckets used by `hailctl dataproc`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11282:302,log,log,302,https://hail.is,https://github.com/hail-is/hail/pull/11282,1,['log'],['log']
Testability,I noticed that this step blew up in the benchmarking PR and thought I'd provide a better error message.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12866:40,benchmark,benchmarking,40,https://hail.is,https://github.com/hail-is/hail/pull/12866,1,['benchmark'],['benchmarking']
Testability,I noticed this while xfail-ing a different test. It is possible this test now passes. We will see!,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12961:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/12961,2,['test'],['test']
Testability,"I picked the name since Cronus is the father of Zeus. Perhaps Saturn is more appropriate. Open to suggestions here. The UX flow:. 1. User loads up `https://hail.is/cronus` and sees a form with a button.; 2. Pressing the button starts a pod running Jupyter for the user that no one else has access to; 3. refreshing the page or going to `https://hail.is/cronus` again redirects to the Jupiter instance; 4. to get a fresh Jupyter instance, the user can clear their cookies. The components:. - a flask app (`cronus/cronus.py`) which launches pods and handles authentication (via cookies); - an nginx reverse proxy which uses `auth_request` to check the permissions with the flask app; - a pod running `Jupyter notebook` with hail `pip` installed. TODO:. - [x] add make targets to generate the `cronus-job` image (the jupyter notebook image); - [ ] maybe simplify the directives used in nginx? I kept throwing shit at it until it worked; - [ ] figure out how to teach flask url_for to use a root other than `/`. I don't know what HTTP proxy headers to set to inform it that it lives at a subdirectory of `hail.is`; - [ ] get rid of the button? creating a new pod needs to be a `POST` so that the web browser doesn't access twice or eagerly access it, etc. maybe I can use javascript on the root page to make the post request and redirect the page.; - [ ] testing? I could add some basic things, but the most time consuming and annoying thing was getting the reverse proxy settings right and testing that requires an nginx instance. @cseed I randomly assigned, should I be picking from you and Tim? What's the plan for review on these new things?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4576:1351,test,testing,1351,https://hail.is,https://github.com/hail-is/hail/pull/4576,2,['test'],['testing']
Testability,"I pulled out a flag to cache in java, but accidentally got rid of the thing it was actually doing. This should be fixed now; with a smaller test mt I'm seeing the number of allocated regions be consistent between combOps:. ```; ...; 2019-08-06 17:21:17 Hail: INFO: Region count for combOp; regions: 27; blocks: 28; free: 25; used: 2; 2019-08-06 17:21:17 Hail: INFO: Region count for combOp; regions: 27; blocks: 28; free: 25; used: 2; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6824:140,test,test,140,https://hail.is,https://github.com/hail-is/hail/pull/6824,1,['test'],['test']
Testability,"I pulled this out of my local whitening branch. It's being tested there, but I'm not sure the best way to write unit tests. Do we have any similar tests for STypes?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10614:59,test,tested,59,https://hail.is,https://github.com/hail-is/hail/pull/10614,3,['test'],"['tested', 'tests']"
Testability,"I ran into issues when broadcasting a very large struct of ndarrays for a huge linear regression, where the the total size was more than `MAX_INT` bytes. To solve this, I've changed `SerializableRegionValue` to use `ArrayOfByteArrayOutputStream` and `ArrayOfByteInputStream`, which create nested arrays of bytes instead of just one array, removing any maximum length issues. . PRing now for tests, also running benchmarks.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10766:391,test,tests,391,https://hail.is,https://github.com/hail-is/hail/pull/10766,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,I ran into missing type information while I was writing the tests in https://github.com/hail-is/hail/pull/13400,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13401:60,test,tests,60,https://hail.is,https://github.com/hail-is/hail/pull/13401,1,['test'],['tests']
Testability,I ran my migration test. Worked perfectly. I say this is ready to go.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7997:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/7997,1,['test'],['test']
Testability,"I realize this looks like a lot of code changes, but it's mostly copying and pasting two SQL procedures and changing one line in each. This adds 4 bits of metadata to requests that then can be queried as extra metadata:; - batch_id; - job_id; - batch_operation; - job_queue_time. Should be self-explanatory except job_queue time is the time in which the job is first set to ready to when it was scheduled on the worker (exact moment is when the job config is made to send to the worker). Example logging query. Note that the search on ""batch_id"" is not optimized so you definitely want to add some kind of time limit that's short on the window to search. I can add my Python script that scrapes these logs and makes a Plotly figure in a separate PR once this goes in. ```; (; resource.labels.container_name=""batch""; resource.labels.namespace_name=""{namespace}""; ) OR (; resource.labels.container_name=""batch-driver""; resource.labels.namespace_name=""{namespace}""; ) OR (; resource.type=""gce_instance""; logName:""worker.log""; labels.""compute.googleapis.com/resource_name"":""{namespace}""; ); jsonPayload.batch_id=""{batch_id}""; timestamp >= ""{start_timestamp}"" {end_timestamp}; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13219:496,log,logging,496,https://hail.is,https://github.com/hail-is/hail/pull/13219,4,['log'],"['log', 'logName', 'logging', 'logs']"
Testability,I received a 503 in one of my other PRs from one of these tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10947:58,test,tests,58,https://hail.is,https://github.com/hail-is/hail/pull/10947,1,['test'],['tests']
Testability,I removed PSubsetStructSuite because it is testing functionality that won't really be part of the SCode interface and will go away soon.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10047:43,test,testing,43,https://hail.is,https://github.com/hail-is/hail/pull/10047,1,['test'],['testing']
Testability,"I reordered the tests so we can be confident that the files aren't overwriting each other, and changed the second assertion to use the correct filepath. However, I'm confused how main and this PR can both pass…",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12315:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/12315,2,"['assert', 'test']","['assertion', 'tests']"
Testability,I saw a case where this loop was spinning generating $$$ logs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7637:57,log,logs,57,https://hail.is,https://github.com/hail-is/hail/pull/7637,1,['log'],['logs']
Testability,"I see this happening quite a bit. ```; =================================== FAILURES ===================================; ______________________________ Test.test_callback ______________________________. self = <test.test_batch.Test testMethod=test_callback>. def test_callback(self):; app = Flask('test-client'); ; d = {}; ; @app.route('/test', methods=['POST']); def test():; d['status'] = request.get_json(); return Response(status=200); ; server = ServerThread(app); try:; server.start(); ; j = self.batch.create_job(; 'alpine',; ['echo', 'test'],; attributes={'foo': 'bar'},; callback=server.url_for('/test')); j.wait(); ; > status = d['status']; E KeyError: 'status'; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5817:152,Test,Test,152,https://hail.is,https://github.com/hail-is/hail/issues/5817,9,"['Test', 'test']","['Test', 'test', 'test-client', 'testMethod']"
Testability,"I should still add a whole bunch of Python tests before this goes in, but everything seems to work so review appreciated.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3164:43,test,tests,43,https://hail.is,https://github.com/hail-is/hail/pull/3164,1,['test'],['tests']
Testability,I sometimes iterate quickly with `pytest -k testname` from the `hail/python` directory. I cannot do that if the test directory is hard coded.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12795:44,test,testname,44,https://hail.is,https://github.com/hail-is/hail/pull/12795,2,['test'],"['test', 'testname']"
Testability,"I split it up into 5 separate tests, and I took away one of the 3 data sizes we test on, so it's faster and more easily split now. Let me know if you think there's other things we can remove/change without losing information.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10415:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/10415,2,['test'],"['test', 'tests']"
Testability,"I staged `import_matrix_table` and achieved substantial performance improvements. A few changes were necessary:; - `FunctionBuilder` now accepts `Code[Unit]` to be added to the `init` method of the function object; - SRVB now has an `init` method that should be called in the `init` method of a function object if many methods will share the SRVB; - `CodeChar` now exists. The main change is in `ImportMatrix.scala` which is both staged and based on scanning the string rather than using `String.split`. The approach is essentially a simplified, staged version of `import_vcf`. I benchmarked the change with:; ```; In [2]: %%time ; ...: import hail as hl ; ...: m = hl.import_matrix_table('/tmp/foo.tsv.gz', ; ...: row_fields={'f0': hl.tstr}, ; ...: no_header=True, ; ...: sep=' ', ; ...: min_partitions=16) ; ...: m = m.key_rows_by(locus=hl.parse_locus(m.f0)) ; ...: m._force_count_rows() ; ```. `/tmp/foo.tsv.gz` is a gzipped (not blocked) 1GB of 1000 rows each containing one row column and 500k sample columns. The entries are the integers from 0 to 499,999. The first column is the first run (when the JIT is warmed) and the second column is the mean of two subsequent runs. All times in seconds. Everything is necessarily executed on one core. | version | cold | warm |; | --- | --- | --- |; | this PR | 48 | 39.35 |; | this PR with one monolithic method | 235 | 73 |; | master (5fe6737263b4) | 91s | 83.5 |. I was disappointed with the performance of the monolithic method, so I dug in with `-XX:+PrintCompilation` and found that the JIT was having trouble doing on-stack replacement of the entry parsing loop. There was a cryptic message about the stack not being empty during an OSR compilation. I take this result as evidence that, in the JVM, small, fine-grained methods are critical for reliable performance. The new code, after JIT warming, is reading at 250 MB/s (1GB / 40 seconds) which is a half to a third of the performance of `cat`. It's more than twice as fast as the old code. Asi",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6987:580,benchmark,benchmarked,580,https://hail.is,https://github.com/hail-is/hail/pull/6987,1,['benchmark'],['benchmarked']
Testability,I started to debug #13599 and found this feature of knowing which job spun off the test batch would have been helpful for debugging purposes.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13733:83,test,test,83,https://hail.is,https://github.com/hail-is/hail/pull/13733,1,['test'],['test']
Testability,"I still need to figure out where to move the pipeline tests to and whether to rename the BatchBackend to BatchServiceBackend. Making a PR now so I can see if there are any other bugs. Also, I didn't rename where the docs path is in the header navbar yet. This needs to be done when we release a new Hail release after this PR goes in. @johnc1231 @tpoterba",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8453:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/pull/8453,1,['test'],['tests']
Testability,I still need to test this works with dev deploy.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11118:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/11118,1,['test'],['test']
Testability,"I suspect some of the inconsistent behavior we're seeing could be due to memory corruption. So I put in another debugging allocator. What does this do? It makes sure all memory accesses in `Memory` are valid. Also, for each allocation, it puts a sentinel values before and after the allocation, and verifies they are undisturbed on free. How will this work normally? Obviously, this will slow things down. This checked `Memory` will be stored outside the main source, and can be copied over `Memory` to run with checked memory. Once this is passing, I will organize it that way. We should probably always run a version of the tests with memory checking enabled. Am I seeing failures? Yes, a handful. Unfortunately, the failures themselves don't seem context dependent, and when I run all the tests things fail, but when I run the isolated test, they pass. Getting this on the board while we debug it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8878:626,test,tests,626,https://hail.is,https://github.com/hail-is/hail/pull/8878,3,['test'],"['test', 'tests']"
Testability,I tested the config comes through correctly in my namespace.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10839:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/10839,1,['test'],['tested']
Testability,I tested this a bit manually. I'm pretty confident its right but I'm sure we'll hit some snag on the next deploy.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11916:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/11916,1,['test'],['tested']
Testability,"I tested this and it indeed has no conflicts if I include Daniel, Jackie, and I in the oauth2 callbacks list.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11322:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/11322,1,['test'],['tested']
Testability,I tested this by adding the check_aggregated_resources loop which didn't throw any errors. I tested the cost by looking at the UI and submitting one job that cost $0.0004 and then two of that same job in a batch and it cost $0.0008. The database looked like this:. mysql> select * FROM aggregated_batch_resources where batch_id > 46;; +----------+--------------------------+-------------+-------+; | batch_id | resource | usage | token |; +----------+--------------------------+-------------+-------+; | 47 | compute/n1-preemptible/1 | 25867000 | 11 |; | 47 | compute/n1-preemptible/1 | 0 | 115 |; | 47 | compute/n1-preemptible/1 | 0 | 132 |; | 47 | disk/local-ssd/1 | 9932928000 | 11 |; | 47 | disk/local-ssd/1 | 0 | 54 |; | 47 | disk/local-ssd/1 | 0 | 132 |; | 47 | disk/pd-ssd/1 | 529756160 | 11 |; | 47 | disk/pd-ssd/1 | 0 | 132 |; | 47 | disk/pd-ssd/1 | 0 | 186 |; | 47 | ip-fee/1024/1 | 26487808 | 11 |; | 47 | ip-fee/1024/1 | 0 | 132 |; | 47 | ip-fee/1024/1 | 0 | 188 |; | 47 | memory/n1-preemptible/1 | 99329280 | 11 |; | 47 | memory/n1-preemptible/1 | 0 | 26 |; | 47 | memory/n1-preemptible/1 | 0 | 132 |; | 47 | service-fee/1 | 25867000 | 11 |; | 47 | service-fee/1 | 0 | 110 |; | 47 | service-fee/1 | 0 | 132 |; | 48 | compute/n1-preemptible/1 | 0 | 31 |; | 48 | compute/n1-preemptible/1 | 0 | 76 |; | 48 | compute/n1-preemptible/1 | 27659000 | 94 |; | 48 | compute/n1-preemptible/1 | 26520000 | 122 |; | 48 | compute/n1-preemptible/1 | 0 | 156 |; | 48 | compute/n1-preemptible/1 | 0 | 168 |; | 48 | disk/local-ssd/1 | 10621056000 | 94 |; | 48 | disk/local-ssd/1 | 10183680000 | 122 |; | 48 | disk/local-ssd/1 | 0 | 125 |; | 48 | disk/local-ssd/1 | 0 | 154 |; | 48 | disk/local-ssd/1 | 0 | 156 |; | 48 | disk/local-ssd/1 | 0 | 168 |; | 48 | disk/pd-ssd/1 | 0 | 69 |; | 48 | disk/pd-ssd/1 | 566456320 | 94 |; | 48 | disk/pd-ssd/1 | 0 | 102 |; | 48 | disk/pd-ssd/1 | 543129600 | 122 |; | 48 | disk/pd-ssd/1 | 0 | 156 |; | 48 | disk/pd-ssd/1 | 0 | 168 |; | 48 | ip-fee/1024/1 | 0 | 57 |; | 48 ,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9346:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/9346,2,['test'],['tested']
Testability,I tested this in my namespace and everything seems to be working. I tried really hard to keep the order of the parameters the same everywhere to avoid putting values in the wrong places (i.e. 7200 for max_instances instead of for standing worker idle time).,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12575:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/12575,1,['test'],['tested']
Testability,I tested this in my namespace. We can customize the parameters -- this implementation is aggressive at making sure we're at maximum efficiency.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10495:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/10495,1,['test'],['tested']
Testability,I tested this on #3562 and `test_call_stats` passes now.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3598:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/3598,1,['test'],['tested']
Testability,I tested this on a cluster on a bit of code that @konradjk provided. not super sure if we can actually write a test for this for our test suite. Fixes #3446,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3482:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/3482,3,['test'],"['test', 'tested']"
Testability,I tested this with dev deploy,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7907:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/7907,1,['test'],['tested']
Testability,I tested this with dev deploy using both my broad developer account and my personal account to make sure regular users only saw their own billing information.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10656:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/10656,1,['test'],['tested']
Testability,I tested this works on a debugging branch.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4503:2,test,tested,2,https://hail.is,https://github.com/hail-is/hail/pull/4503,1,['test'],['tested']
Testability,I think I also fixed a couple bugs in the tests where we set `rv`; instead of `rv2`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2511:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/2511,1,['test'],['tests']
Testability,I think I got all of the fixes. I tested the UI with dev deploy.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8916:34,test,tested,34,https://hail.is,https://github.com/hail-is/hail/pull/8916,1,['test'],['tested']
Testability,"I think it's going to be too hard to test this PR in dgoldste. I think we should combine getting this PR to work with standing up the Azure production cluster. Until then, I need your help to finish this draft:. @danking -- Can you look over the oauth flow?; @daniel-goldstein -- Next week, can you help out with the necessary Terraform changes?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11147:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/11147,1,['test'],['test']
Testability,"I think old repos still work, which is why CI is mostly fine, but I was seeing errors when testing locally.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5798:91,test,testing,91,https://hail.is,https://github.com/hail-is/hail/pull/5798,1,['test'],['testing']
Testability,"I think tests of services are failing during deployment because wait-for Service (which probes /healthcheck) hits the old service, then the service goes down during (re)deployment. Here is an example test failure: first few tests pass then the rest fail due to connection timeout: https://ci2.hail.is/jobs/1413/log. This doesn't quite make sense, because batch and apiserver both have readiness checks, so the rollout should be have now downtime (although some of the tests could hit the old service which could fail if there were differences). I think this is a good chance but I'm not totally confident. Interested in your thoughts. Also, I can't seem the find the different between `wait deployment` and `rollout status`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6011:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/6011,5,"['log', 'test']","['log', 'test', 'tests']"
Testability,I think the `client_job` attribute is doing its intended job but we need to ignore uncontrollable attributes in this test in particular.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13741:117,test,test,117,https://hail.is,https://github.com/hail-is/hail/pull/13741,1,['test'],['test']
Testability,I think this PR is mostly there. We might want to make the docs more explicit. I didn't add any tests yet to assert everything is working. I was testing it by hand by not using a local SSD and making the disk size 25 GB so the reserved space is 0 GB. I watched the worker logs in stack driver to make sure it was working. I'd appreciate ideas for tests. Feel free to work on this while I'm away. I checked the disks in the google console to make sure I didn't have any garbage.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9598:96,test,tests,96,https://hail.is,https://github.com/hail-is/hail/pull/9598,5,"['assert', 'log', 'test']","['assert', 'logs', 'testing', 'tests']"
Testability,"I think this can go in instead of #8730. I ran dev deploy with master and then didn't delete the database and ran the tests with the new version. The billing UI page reported the correct values. I also ran the new version with the check functions in the background and got no errors. I can probably double check the UI batches cost are correct, but let's wait until we're happy with the code before I do anymore testing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8759:118,test,tests,118,https://hail.is,https://github.com/hail-is/hail/pull/8759,2,['test'],"['testing', 'tests']"
Testability,"I think this change will help the number of operations we're making substantially. My Scala skills are not great, so I don't know if this is written correctly. Basically, we were making a call to list the blobs recursively to test if the path was a directory which was streaming through the first 5000 records. I made the page size equal to 1 record as we don't care about all records. The next thing I did was to just get the blob properties rather than calling exists + get blob properties. So that will cut the number of HTTP calls by half for every blob. Lastly, listing items in a directory which is used for globbing was making a call to get the metadata for each file and then it was making the 3 API calls above to check whether it's a directory, whether it exists, and what the blob properties are. All of this information is in the original result from listing the blobs in the hierarchy so I just use that information directly.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13368:226,test,test,226,https://hail.is,https://github.com/hail-is/hail/pull/13368,1,['test'],['test']
Testability,"I think this cleans up the array sorting logic a little bit (at least, moves the sorting logic into an actual scala function instead of keeping it in bytecode-land). The new ordering functions are to prevent the boxing of arguments and return values that happen with asmfunctions.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3719:41,log,logic,41,https://hail.is,https://github.com/hail-is/hail/pull/3719,2,['log'],['logic']
Testability,I think this didn't get cleaned up when we deleted the benchmark service.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13393:55,benchmark,benchmark,55,https://hail.is,https://github.com/hail-is/hail/pull/13393,1,['benchmark'],['benchmark']
Testability,I think this improves on the experience of receiving a KeyError; when the default namespace has no tokens defined. Now the user; will recieve a NoTokenFileFound exception that indicates the; user should log in with `hailctl auth login`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7020:203,log,log,203,https://hail.is,https://github.com/hail-is/hail/pull/7020,2,['log'],"['log', 'login']"
Testability,I think this is all that needs to be added to get benchmark in the header. There's no caret after so we don't need to format that at all.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9256:50,benchmark,benchmark,50,https://hail.is,https://github.com/hail-is/hail/pull/9256,1,['benchmark'],['benchmark']
Testability,"I think this is probably a bug, since we write out the reference genome and seem to support it just fine in Scala. I want to be able to do e.g.:. ```; >>> import hail as hl; >>> rg = hl.ReferenceGenome(""foo"", ['a', 'b'], {'a': 4, 'b': 6}); >>> t = hl.utils.range_table(10); >>> t = t.annotate(locus=hl.locus_from_global_position(t.idx, reference_genome='foo')); >>> t.write('test.t'); ```. and then, in a separate instance of hail, do:. ```; >>> import hail as hl; >>> t = hl.read_table('test.t'); ```. Currently, I get the following error:; ```; Traceback (most recent call last):; File ""/anaconda3/lib/python3.6/site-packages/parsimonious/nodes.py"", line 217, in visit; return method(node, [self.visit(n) for n in node]); File ""/Users/wang/code/hail/hail/python/hail/expr/type_parsing.py"", line 80, in visit_locus; return hl.tlocus(gr); File ""<decorator-gen-56>"", line 2, in __init__; File ""/Users/wang/code/hail/hail/python/hail/typecheck/check.py"", line 584, in wrapper; args_, kwargs_ = check_all(__original_func, args, kwargs, checkers, is_method=is_method); File ""/Users/wang/code/hail/hail/python/hail/typecheck/check.py"", line 512, in check_all; args_.append(checker.check(arg, name, arg_name)); File ""/Users/wang/code/hail/hail/python/hail/typecheck/check.py"", line 56, in check; return tc.check(x, caller, param); File ""/Users/wang/code/hail/hail/python/hail/typecheck/check.py"", line 303, in check; return f(tc.check(x, caller, param)); File ""/Users/wang/code/hail/hail/python/hail/genetics/reference_genome.py"", line 10, in <lambda>; reference_genome_type = oneof(transformed((str, lambda x: hl.get_reference(x))), rg_type); File ""/Users/wang/code/hail/hail/python/hail/context.py"", line 362, in get_reference; return ReferenceGenome._references[name]; KeyError: 'foo'. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<decorator-gen-1214>"", line 2, in read_table; File ""/Users/wang/code/h",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6907:375,test,test,375,https://hail.is,https://github.com/hail-is/hail/issues/6907,2,['test'],['test']
Testability,I think this is the last one. The tests passed 30 times without a failure.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10044:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/pull/10044,1,['test'],['tests']
Testability,"I think this should resolve the issues we were seeing with OnlineBoundedGather2. Changes:; - cancelled tasks (those that raise CancelledError) are ignored (we don't propagate cancelled out of background tasks); - Make sure all exceptions are either reraised or logged; - The first exception is raised out of exit, not call; - call raises PoolShutdownError if the pool is shutdown; - _shutdown doesn't signal _done_event until all cancelled tasks are complete; - call clears _done_event (not strictly necessary because exit checks pending, but seems safer); - added copious docstrings",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10342:261,log,logged,261,https://hail.is,https://github.com/hail-is/hail/pull/10342,1,['log'],['logged']
Testability,"I think this was inadvertantly broken. The `Progress.disable` property needs to be set *before* you start the progress bar, otherwise it has no effect. Clients of all these progress bars should not touch their `Progress` instance, that is an implementation detail. I have changed rich_progress_bar.py to use `_progress` to clearly communicate this. Unrelatedly, it seems that `add_task` accepts varargs which become arbitrary additional metadata for the task. There is no `disable` keyword, that is just added as additional metadata. Instead, we must use the `visible` keyword to enable/disable the task. I verified this looks right now:. ```python3; In [1]: import hailtop.batch_client.aioclient as ac; ...: try:; ...: client = await ac.BatchClient.create('hail'); ...: b = client.create_batch(); ...: resources = {'machine_type': ""g2-standard-4"", 'storage': '100Gi'}; ...: j = b.create_job(; ...: '2.0.1-debian-11-r122',; ...: ['python', '-c', 'import torch; assert torch.cuda.is_available()'],; ...: resources=resources,; ...: ); ...: await b.submit(); ...: await b.wait(); ...: finally:; ...: await client.close(); https://batch.hail.is/batches/8038881 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 1/1 0:00:00 0:01:53; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13669:961,assert,assert,961,https://hail.is,https://github.com/hail-is/hail/pull/13669,1,['assert'],['assert']
Testability,"I think this will work, but I haven't tested it with dev deploy.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7917:38,test,tested,38,https://hail.is,https://github.com/hail-is/hail/pull/7917,1,['test'],['tested']
Testability,"I think we need to figure out how to get cblas on the broad cluster. ```; # use UGER; # ish -l os=RedHat7; # use Anaconda3; # use Java-1.8; # use OpenBLAS; # source activate hail; # ipython; In [1]: import hail as hl . In [2]: mt = hl.balding_nichols_model(3, 100, 100) ; Initializing Spark and Hail with default parameters...; using hail jar at /home/unix/dking/.conda/envs/hail/lib/python3.7/site-packages/hail/hail-all-spark.jar; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 2.2.3; SparkUI available at http://10.200.100.39:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.11-cf54f08305d1; LOGGING: writing to /home/unix/dking/hail-20190307-1908-0.2.11-cf54f08305d1.log; 2019-03-07 19:08:30 Hail: INFO: balding_nichols_model: generating genotypes for 3 populations, 100 samples, and 100 variants...; ^[[A; In [3]: t = hl.linear_regression_rows(x=mt.GT.n_alt_alleles(), y=mt.pop, covariates=[1]) ; [Stage 0:============================================> (6 + 1) / 8]2019-03-07 19:08:39 Hail: INFO: Coerced sorted dataset; 2019-03-07 19:08:40 Hail: INFO: linear_regression_rows: running on 100 samples for 1 response variable y,; with input variable x, and 1 additional covariate...; /broad/software/free/Linux/redhat_7_x86_64/pkgs/jdk1.8.0_181/bin/java: symbol lookup error: /tmp/jniloader1327638724610654731netlib-native_system-linux-x86_64.so: undefined symbol: cblas_dgemm; ERROR:root:Exception while sending command.; Traceback (most recent call last):; File ""/home/unix/dking/.conda/envs/hail/lib/python3.7/site-packages/py4j/java_gateway.py"", line 1159, in send_command; raise Py4JNetworkError(""Answer from Java side is empty""); py4j.protocol.Py4JNetworkError: Answer from Java side is empty. During handling of the above exception, another exception",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5559:530,log,log,530,https://hail.is,https://github.com/hail-is/hail/issues/5559,4,"['LOG', 'log']","['LOGGING', 'log', 'logging']"
Testability,"I tried benchmarking this change and didn't see much of a difference in timings in my contrived high throughput example. However, I do think this index is better because I believe MySQL does the order by first and then filters records. @danking Can you take a look at this and make sure the index is actually an improvement. The speed of the query is linearly related to the number of records in the limit. So I think if we need to get the query speed back to under 10ms then we revert back to pulling a smaller number of records rather than 1000. I think 300 is fine and gets us to 10ms. I just didn't want to pull 10 jobs and then none of them are schedulable but the 100th one is. We can revisit this if the scheduler becomes the bottleneck after your changes to the gateway.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12350:8,benchmark,benchmarking,8,https://hail.is,https://github.com/hail-is/hail/pull/12350,1,['benchmark'],['benchmarking']
Testability,"I tried testing the output with pandoc, but that failed to render well.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9162:8,test,testing,8,https://hail.is,https://github.com/hail-is/hail/pull/9162,1,['test'],['testing']
Testability,I tried this locally. Let's see if the tests pass.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9784:39,test,tests,39,https://hail.is,https://github.com/hail-is/hail/pull/9784,1,['test'],['tests']
Testability,"I tried to run LOFTEE in Hail for ~2 million variants. It ran for about 2 days and failed (log attached, seems to be killed for running too long?). Just wonder if anything could be done to improve the efficiency. Thanks!. [hail.log.txt](https://github.com/broadinstitute/hail/files/252702/hail.log.txt)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/373:91,log,log,91,https://hail.is,https://github.com/hail-is/hail/issues/373,3,['log'],['log']
Testability,"I updated all packages in conda, ran all python tests, and then updated/added the versions.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4352:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/4352,1,['test'],['tests']
Testability,"I updated terraform but. 1. GCP Terraform state is still local on my laptop. 2. GCP Terraform appears to not configure global-config. As such, I cannot thread the name of the bucket through to the tests the way we do with TEST_STORAGE_URI. For now, I've hardcoded the name (which is what we were doing previously). When we eventually get to testing recreation of GCP in a new project we'll have to address the global config then.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12964:197,test,tests,197,https://hail.is,https://github.com/hail-is/hail/pull/12964,2,['test'],"['testing', 'tests']"
Testability,"I use codec.py extensively for debugging the shuffler. Recently the Scala-side support for codec.py was deleted. This PR restores support and adds some simple tests. I need to thread the physical type back to the caller of compile, thus all the changes in CompileAndEvaluate and Backend. They should look better with whitespace changes hidden.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8197:159,test,tests,159,https://hail.is,https://github.com/hail-is/hail/pull/8197,1,['test'],['tests']
Testability,"I use text search for ""fail"" in the CI logs, and this always pops up.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7939:39,log,logs,39,https://hail.is,https://github.com/hail-is/hail/pull/7939,1,['log'],['logs']
Testability,I verified the test failed with the same [error as KC's](https://discuss.hail.is/t/repartition-on-read/2148/2) before my change.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10697:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/10697,1,['test'],['test']
Testability,"I verified this manually. The deploy account didn't exist when I started this PR, but it still had a role grant in the project's IAM policy. Now the account still does not exist *and* the role grant is gone. The `login` forces you to switch to your account since we're deleting the service account (as which you're probably authenticated).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8178:213,log,login,213,https://hail.is,https://github.com/hail-is/hail/pull/8178,1,['log'],['login']
Testability,"I want to cleanup some of the old database functions as they're no longer used (`close_batch`) and not tested / not used in production / hard to maintain (`recompute_incremental`). The `recompute_incremental` was there in the early days of Batch when we needed to recompute the user_inst_coll_resources table etc. for a single migration to improve cancelling. We have not used it since. I double checked `close_batch` isn't used in the Python code, but would appreciate it if you could also check as well.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13510:103,test,tested,103,https://hail.is,https://github.com/hail-is/hail/pull/13510,1,['test'],['tested']
Testability,I want to do testing with dev deploy. Putting this up so I can get feedback.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7910:13,test,testing,13,https://hail.is,https://github.com/hail-is/hail/pull/7910,1,['test'],['testing']
Testability,"I want to finish the Hail Tables cheat sheet. These are things that have come up when discussing this. . These are the things I need to make this cheat sheet:; - [x] `to_matrix_table` needs examples. @tpoterba #7404 ; - [x] `to_matrix_table_row_major` needs examples. @danking (https://github.com/hail-is/hail/pull/7375). These are the things we decided in cheat sheet discussions that we ought to have based on pandas. Feel free to argue we don't want these or something, I'm mostly transcribing the zulip discussion with random assignees: ; - [ ] `count_missing` aggregator. Want to know if there's missing data in a column. @iitalics ; - [ ] `count_present` aggregator. The opposite of `count_missing` (assigned both to same person since it should be basically same, if I'm wrong feel free to reassign). @iitalics ; - [ ] `drop_missing`. The pandas version of this is ""drop any rows in the table with missing values"". Not sure if our version should take a specific column or something. One idea is that with no arguments it will drop any row that has any missing field, but it could also take a list of columns to consider. @catoverdrive ; - [ ] `hl.Table.parallelize` is not a good name. Let's just let there be a constructor for tables that allows you to make tables from local data. If possible, it would also be nice if we could do some better type inference here so that users don't have to pass in a type string the way they do in the current example. @akotlar . These are bugs I ran into while testing the cheat sheet:; - [ ] Calling `show()` on an empty table (I accidentally filtered out all the columns when I messed up a regex) throws some internal java index out of bounds exception. @chrisvittal",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7358:1504,test,testing,1504,https://hail.is,https://github.com/hail-is/hail/issues/7358,1,['test'],['testing']
Testability,"I want to repeat the same expression for all the columns of a keytable. For example doing something like this:. ```; (fin_vds_split_anno; .make_keytable('gene=va.geneann.gene','gt = g.gt',[]); .aggregate_by_key('gene=gene','SUMID=*.gt.sum'); .export(root + 'test.tsv')); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1319:258,test,test,258,https://hail.is,https://github.com/hail-is/hail/issues/1319,1,['test'],['test']
Testability,"I want to track performance of logistic regression. Currently, on my laptop these two benchmarks clock in at 11 seconds for Breeze and 62 seconds for ndarrays. Now that I have a metric I'll try and optimize.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10492:31,log,logistic,31,https://hail.is,https://github.com/hail-is/hail/pull/10492,2,"['benchmark', 'log']","['benchmarks', 'logistic']"
Testability,I want to use them to answer this bioinformatics.SE question:. https://bioinformatics.stackexchange.com/questions/974/selecting-sites-from-vcf-which-have-an-alt-ad-10. ```; from hail import *; hc = HailContext(); (hc.import_vcf('test.vcf'); .filter_variants_expr('gs.exists(g => g.ad[1:].exists(d => d > 10))'); .count()); ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1981:229,test,test,229,https://hail.is,https://github.com/hail-is/hail/pull/1981,1,['test'],['test']
Testability,I want to use this for unsafe testing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2001:30,test,testing,30,https://hail.is,https://github.com/hail-is/hail/pull/2001,1,['test'],['testing']
Testability,I wanted a quick way to set global feature flags on the service backend. Also took the opportunity to move query tests into their own file.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9506:113,test,tests,113,https://hail.is,https://github.com/hail-is/hail/pull/9506,1,['test'],['tests']
Testability,"I wanted to add a tool that can compare more than two benchmark results and hacked this together today.; I decided to use a means of ""registering"" sub-programs with the main parser to eliminate manual arg parsing.; Make sure you clean and build before using this otherwise you may get collisions with stale package directories.; ```bash; $ hail-bench visualize --help; usage: hail-bench visualize [-h] [--metric {mean,median,stdev,max_memory}] [--head HEAD] [--abs] baseline runs [runs ...]. Visualize benchmark results. positional arguments:; baseline baseline benchmark results; runs benchmarks to compare against baseline. options:; -h, --help show this help message and exit; --metric {mean,median,stdev,max_memory}; --head HEAD number of most significant results to take; --abs plot absolute differences; ```; ![image](https://user-images.githubusercontent.com/8223952/231209244-97007be3-f0d7-4077-ab0e-3a551986a502.png)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12856:54,benchmark,benchmark,54,https://hail.is,https://github.com/hail-is/hail/pull/12856,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,I wanted to add some benchmarks to start tracking this. They take roughly 25 and 45 seconds respectively on my laptop currently,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9399:21,benchmark,benchmarks,21,https://hail.is,https://github.com/hail-is/hail/pull/9399,1,['benchmark'],['benchmarks']
Testability,I wanted to get feedback on the code I've written thus far before I start testing everything. I'm worried it might be too complicated / brittle to maintain. I also chose to blow away the entire existing environment rather than resetting the variables with new values. Not sure if that's what we want.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13279:74,test,testing,74,https://hail.is,https://github.com/hail-is/hail/pull/13279,1,['test'],['testing']
Testability,"I wanted to get this feature done quickly for Michael. But I do think we should think about having consistency in route names across services. Like when do we have `/delete` in the route name versus a 'DELETE' request or both?. Another question is whether to add the polling / waiting for the user to be created and if so, where should the polling go? I put it in the auth service for now rather than the CLI because I don't think we expose the state of the user in our API. I tested this as much as I could in my namespace. The most important thing is to make sure the decorators are correct and only developers can create / delete users. I want to add auth tests that make sure the routes are protected, but that's more work than I wanted to do in this PR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11249:477,test,tested,477,https://hail.is,https://github.com/hail-is/hail/pull/11249,2,['test'],"['tested', 'tests']"
Testability,"I was assigned:; ```; size(dict<T, U>): int32; size(set<T>): int32; isEmpty(dict<T, U>): bool; isEmpty(set<T>): bool; isEmpty(array<T>): bool; head(set<T>): T; head(array<T>): T; tail(set<T>): set<T>; tail(array<T>): array<T>; sum(set<tnum>): tnum; product(set<tnum>): tnum; map(set<T>,(T) => U): set<U>; exists(set<T>,(T) => bool): bool; forall(set<T>,(T) => bool): bool; filter(set<T>,(T) => bool): set<T>; length(array<T>): int32; sort(array<T>,bool): array<T>; sort(array<T>): array<str>; append(array<T>,T): array<T>; extend(array<T>,array<T>): array<T>; ```; I didn't do `head` or `tail`, because they weren't being used. I'm not sure how/where to test the new functions.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3554:654,test,test,654,https://hail.is,https://github.com/hail-is/hail/pull/3554,1,['test'],['test']
Testability,I wasn't sure if we should print at least one Docker config or not. I'm worried about the test for out_of_memory where that prints out a bunch of the letter 'a' in the script.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9184:90,test,test,90,https://hail.is,https://github.com/hail-is/hail/pull/9184,1,['test'],['test']
Testability,"I wasn't sure what this should look like. For now it does this, would be open to suggestions on how it should look. Currently the tests just test that it doesn't crash, if you're good with how this output looks I'll figure out how to test the output. Some examples:. Boring case with 0 dimensional ndarrays; ```; t = hl.utils.range_table(6); t = t.annotate(a = hl._nd.array(t.idx)); t.show(); +-------+---------------------------+; | idx | a |; +-------+---------------------------+; | int32 | ndarray<int32, 0> |; +-------+---------------------------+; | 0 | ndarray{shape=(), data=0} |; | 1 | ndarray{shape=(), data=1} |; | 2 | ndarray{shape=(), data=2} |; | 3 | ndarray{shape=(), data=3} |; | 4 | ndarray{shape=(), data=4} |; | 5 | ndarray{shape=(), data=5} |; +-------+---------------------------+; ```. Less boring case with 1d ndarrays of length `idx`. ```; t = hl.utils.range_table(6); t = t.annotate(a = hl._nd.arange(t.idx)); t.show(); +-------+------------------------------------------+; | idx | a |; +-------+------------------------------------------+; | int32 | ndarray<int32, 1> |; +-------+------------------------------------------+; | 0 | ndarray{shape=(0), data=[]} |; | 1 | ndarray{shape=(1), data=[0]} |; | 2 | ndarray{shape=(2), data=[0, 1]} |; | 3 | ndarray{shape=(3), data=[0, 1, 2]} |; | 4 | ndarray{shape=(4), data=[0, 1, 2, 3]} |; | 5 | ndarray{shape=(5), data=[0, 1, 2, 3, 4]} |; +-------+------------------------------------------+; ```. Now, 2 dimensional:. ```; t = hl.utils.range_table(6); t = t.annotate(a = hl._nd.arange(t.idx).reshape((3, 2))); t.show(); +-------+------------------------------------------------------+; | idx | a |; +-------+------------------------------------------------------+; | int32 | ndarray<int32, 2> |; +-------+------------------------------------------------------+; | 0 | ndarray{shape=(3, 2), data=[[0, 1], [2, 3], [4, 5]]} |; | 1 | ndarray{shape=(3, 2), data=[[0, 1], [2, 3], [4, 5]]} |; | 2 | ndarray{shape=(3, 2), data=[[0, 1], [2,",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7516:130,test,tests,130,https://hail.is,https://github.com/hail-is/hail/pull/7516,3,['test'],"['test', 'tests']"
Testability,"I will need deep copy for KeyedRegionValueAggregators. I only need deepCopy for aggregators with defined `initOp` methods (CallStats), but figured it would be better to add deepCopy to all aggregators so we have both types of copy. Feel free to push back on adding deep copy to all aggregators. I could change `Code.lookupMethod` to return an `Option[Invokeable[T, S]]` instead to test if `deepCopy` exists on the aggregator.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3822:381,test,test,381,https://hail.is,https://github.com/hail-is/hail/pull/3822,1,['test'],['test']
Testability,I will test this with a forthcoming PR which adds a TCP gateway.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9681:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/pull/9681,1,['test'],['test']
Testability,"I wrote a pretty basic TableEmit structure that can handle basic read/map/filter stuff. It's still not hooked up to anything, but I wrote a small test for it. Still just passing in the region from outside the generated code, but that'll be the next step. @tpoterba I've assigned this to you again since you had the last one, but I can reassign if you'd like.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4774:146,test,test,146,https://hail.is,https://github.com/hail-is/hail/pull/4774,1,['test'],['test']
Testability,"I wrote this test when moving groupColsBy to the IR, to make sure the AST path was still working, but it's not adding much value, so I think it may as well be deleted now, rather than later.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3772:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/3772,1,['test'],['test']
Testability,I'd like to be able to save the screen printout from ht.show() in a logger file for recordkeeping purposes.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4299:68,log,logger,68,https://hail.is,https://github.com/hail-is/hail/issues/4299,1,['log'],['logger']
Testability,"I'd like to move master to Spark 2 and Scala 2.11. These changes get us as close as possible. They include:. - remove SparkExport, use reflection to get path of partition when loading from parquet; - remove SparkManager; - upgrade to Kudu 1.1.0 (Spark 2 support). The distance between this and Spark 2 is very small, see https://github.com/hail-is/hail/commit/95a588cfa72391d4303bf6891fd017ec211989db. When the master moves to Spark 2, we can maintain a spark1 branch until the on-prem machines get upgraded. Ideally, the spark1 branch could get rebased automatically as part of the CI, although I'm not quite sure how we'd handle conflicts. Alternatively, we could maintain a spark2 -> spark1 diff in the repo that gets applied as part of testing. Fixes https://github.com/hail-is/hail/issues/1117",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1124:740,test,testing,740,https://hail.is,https://github.com/hail-is/hail/pull/1124,1,['test'],['testing']
Testability,"I'd like your initial feedback before I start testing this on Azure. A substantially earlier version seemed to work fine on GCP with dev deploy. The major conceptual change I made is a `resource` now contains a `prefix` and a `version`. The `resource_name` is just `{prefix}/{version}`. The prefixes for GCP are the same as they were before and don't vary by region. However, the new prefixes for Azure are region specific. The version is `1` for all current resources. . I added a `latest_resource_versions` table that has the prefix mapped to the latest version. This is used to generate the current resource names. There is a new CloudResourceManager that is in charge of managing the spot billing pricing cache and updating the prices in the cache and the database from the cloud provider's API. Since I couldn't easily rename resources to products everywhere in the database due to anonymous foreign key constraints, I had to rename the existing `CloudResourceManager` to `CloudDriverAPI`. Feel free to suggest a better name. The GCPResourceManager is a skeleton right now, but we'll have to flesh it out in the new year when GCP moves to spot billing with varying prices. For the `AzureResourceManager`, I use a new pricing client to grab the latest vm and disk prices. I support all possible disk prices, but for now, I limited the VM query to just get the machine types we support right now. In the future, we could get all VM prices, but the query is around 40 seconds for that compared to 2 seconds now. I was worried if we had such a slow query that blocked driver startup, that would be bad and this is fine for now. There are two classes I added: a `Resource` and a `Price`. The Price is only implemented for Azure and is used to store cost results from the pricing API. The resource has a couple of different mixin classes with an abstract method to generate the quantified resource depending on the type (ex: ComputeResourceMixin). Then there's `AzureDiskResource`, `AzureVMResource`, e",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11092:46,test,testing,46,https://hail.is,https://github.com/hail-is/hail/pull/11092,1,['test'],['testing']
Testability,"I'd love feedback, especially on:; * How/whether to test these things; * How to organize a growing collection of hash families, with different speed/power tradeoffs, and different key and hash word-lengths. (These will be used in inner-most loops, so performance matters, and I don't have a good sense of what Scala abstractions hurt performance.)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2288:52,test,test,52,https://hail.is,https://github.com/hail-is/hail/pull/2288,1,['test'],['test']
Testability,"I'll add more tests, and I'm still considering whether to rip out or integrate WriteBlocksRDD for IRM. But given how similar this is to the latter, I'm ready for feedback on the new code.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2559:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/2559,1,['test'],['tests']
Testability,"I'll add to the log of breaking changes. I've also updated the name from `position_morgan` to `cm_position`, as Plink 2.0 has settled on centimorgans: https://www.cog-genomics.org/plink/2.0/formats#bim. With this change, I can again import 1kg plink files.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3623:16,log,log,16,https://hail.is,https://github.com/hail-is/hail/pull/3623,1,['log'],['log']
Testability,"I'll admit I didn't test this since I'm currently debugging the deadlock PR, but this should quiet down the error logs that are being emitted whenever a test runs that intentionally throws an exception in Query.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11376:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/11376,3,"['log', 'test']","['logs', 'test']"
Testability,"I'm PRing this because it's done / short / adds a good test, but it may be possible to eliminate `TableDistinct` in the future in favor of just `TableAggregateByKey`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8776:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/pull/8776,1,['test'],['test']
Testability,I'm going to merge select/drop/annotate on the scala side in a separate PR. For now annotateEntriesExpr uses the IR path if possible for testing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3176:137,test,testing,137,https://hail.is,https://github.com/hail-is/hail/pull/3176,1,['test'],['testing']
Testability,"I'm happy to see if I can replace this with a more efficient observability solution, but according to the profiler these lines combined can take up to 8% of the driver's overall CPU time, which just seems like something we shouldn't do. The `get_instance` logging will be especially bad with big clusters because it builds up a whole histogram which then needs to get formatted and printed. I'm not sure how useful these log statements currently are. I never look at them but maybe others do. cc: @danking",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11357:256,log,logging,256,https://hail.is,https://github.com/hail-is/hail/pull/11357,2,['log'],"['log', 'logging']"
Testability,I'm having a lot of of trouble demonstrating that this is faster using the benchmark system. I can see a marked improvement in shuffle benchmarks using my laptop:; ```; $ hb compare /tmp/lz4-before.json /tmp/lz4-after.json; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; shuffle_order_by_10m_int 70.4% 47.193 33.245; ```. I also don't see any slowdown for the larger shuffles (which do get slower if we use one of the uncompressed codecs). Running benchmarks on batch have produced results where the median varies from 1% slower to 6% faster.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9292:75,benchmark,benchmark,75,https://hail.is,https://github.com/hail-is/hail/pull/9292,4,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark', 'benchmarks']"
Testability,"I'm keeping my LD extension branch separate until we add a proper sparse block matrix implementation, but I pulled out these functions on GridPartitioner since (i) they're some of the logic we'll need to make sparse block matrix useful and (ii) Meredith just built a step to compute variant windows in LDPrune, which can then be combined with this logic as part of her optimization strategy to not compute unneeded blocks.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3094:184,log,logic,184,https://hail.is,https://github.com/hail-is/hail/pull/3094,2,['log'],['logic']
Testability,I'm not quite sure why there was the deletion logic intertwined with timings. Can you make sure this change is okay or is there something I am missing here?,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11429:46,log,logic,46,https://hail.is,https://github.com/hail-is/hail/pull/11429,1,['log'],['logic']
Testability,"I'm not sure the right way to test these. I certainly get errors when I don't have the memoization rules within my new linear regression rows pipeline, but I don't know what triggers the rebuild rules and a complicated linear algebra pipeline doesn't seem like a good way to unit test these anyway.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8038:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/8038,2,['test'],['test']
Testability,"I'm not sure this is the only reason why we're getting worker log errors when a user deletes jobs, but this code is definitely wrong in the case a container hasn't been started. I'm conflicted on whether we should do nothing or write empty files though.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13727:62,log,log,62,https://hail.is,https://github.com/hail-is/hail/pull/13727,1,['log'],['log']
Testability,"I'm not sure where these should live, but I wanted to move them off my laptop and into a place where people can access them, and the repo seems as good of a place as any. There are svgs for a bunch of icons in both blue and white, as well as high-ish resolution images of both versions of the logo and 32x32 icon pngs. I haven't started integrating them into website stuff yet, but I figured that raw images should have a central-ish place to live anyways. All of the images in the PR are as below:; ![all](https://user-images.githubusercontent.com/19789871/91755326-ece1d180-eb98-11ea-83ce-eec6b13ab18f.png)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9382:293,log,logo,293,https://hail.is,https://github.com/hail-is/hail/pull/9382,1,['log'],['logo']
Testability,I'm not sure why the disk formatting failed. So I've added more logging to see if we can understand why this is happening.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11867:64,log,logging,64,https://hail.is,https://github.com/hail-is/hail/pull/11867,1,['log'],['logging']
Testability,I'm posting to test that some tests that depend on lapack libraries still pass in CI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7499:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/7499,2,['test'],"['test', 'tests']"
Testability,"I'm running the following script: . /psych/genetics_data/working/cseed/bin/hail read -i ${input_vds} \; annotatevariants tsv file:///medpop/esp2/mzekavat/Estonia/UPDATED_TOOLS/dbNSFPv3.2/dbNSFP3.2a.ALLChr.bgz \; -r va.dbNSFP \; -t 'SIFT_pred: String, PROVEAN_pred: String, Polyphen2_HDIV_pred: String, Polyphen2_HVAR_pred: String, LRT_pred: String, MutationTaster_pred: String, MutationAssessor_pred: String, FATHMM_pred: String, MetaSVM_pred: String, MetaLR_pred: String, CADD_phred: Double, `Eigen-raw`: Double, `Eigen-phred`: Double, `Eigen-raw_rankscore`: Double' \; -v ""#chr,pos(1-based),ref,alt"" \; -m ""."" \; annotatevariants expr -c 'va.of8 = (if (""D"" ~ va.dbNSFP.SIFT_pred) 1 else 0) + (if (""D"" ~ va.dbNSFP.PROVEAN_pred) 1 else 0) + (if (""D"" ~ va.dbNSFP.Polyphen2_HDIV_pred) 1 else 0) + (if (""D"" ~ va.dbNSFP.Polyphen2_HVAR_pred) 1 else 0) + (if (""D"" ~ va.dbNSFP.LRT_pred) 1 else 0) + (if (""H"" ~ va.dbNSFP.MutationAssessor_pred || ""M"" ~ va.dbNSFP.MutationAssessor_pred) 1 else 0) + (if (""D"" ~ va.dbNSFP.MutationTaster_pred) 1 else 0) + (if (""D"" ~ va.dbNSFP.FATHMM_pred) 1 else 0)' \; exportvariants -c 'v.contig,v.start,v.ref,v.alt,va.of8,va.dbNSFP.MetaSVM_pred,va.dbNSFP.MetaLR_pred,va.dbNSFP.CADD_phred,va.dbNSFP.`Eigen-raw`,va.dbNSFP.`Eigen-phred`,va.dbNSFP.`Eigen-raw_rankscore`' -o /user/mzekavat/MiGen/dbNSFP.MiGen.tsv. and I'm getting an error here: /medpop/esp2/mzekavat/MiGen/Annotation/hail.log; Would greatly appreciate thoughts on this as soon as possible!",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/317:1408,log,log,1408,https://hail.is,https://github.com/hail-is/hail/issues/317,1,['log'],['log']
Testability,"I'm seeing deploy failures where the tests start failing part way through because batch becomes unavailable, for example: https://ci2.hail.is/jobs/2886/log. However, this can't be the whole story, because batch has a readiness check and it isn't clear why it should go unavailable. Either way, this seems safer because it makes sure you pick up the intended version.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6093:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/6093,2,"['log', 'test']","['log', 'tests']"
Testability,"I'm seeing this in the driver logs:. ```; ERROR 2020-06-16 23:37:18,446 in event loop Traceback (most recent call last):; File ""/usr/local/lib/python3.7/dist-packages/batch/driver/instance_pool.py"", line 500, in event_loop; await self.handle_event(event); File ""/usr/local/lib/python3.7/dist-packages/batch/driver/instance_pool.py"", line 430, in handle_event; timestamp = event.timestamp.timestamp() * 1000; AttributeError: 'dict' object has no attribute 'timestamp'; ```. `event['timestamp']` is in RFC3339 Zulu format with nanosecond precision, for example: 2020-06-08T16:49:53.374657381Z, see: https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry. There is no native RFC3339 Python parser. RFC3339 is nearly identicaly to ISO 8601, except maybe some timezone differences which aren't relevant in Zulu format, see: https://en.wikipedia.org/wiki/ISO_8601. There isn't a native Python ISO 8601 parser. dateutil.parser.isoparse is a ISO 8601 parser (and is maybe also supports RFC3339? I can't quite tell.). Note, Python datetime only has microsecond accuracy, but that's fine because we only store millisecond accuracy. Time is the worst.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8975:30,log,logs,30,https://hail.is,https://github.com/hail-is/hail/pull/8975,3,"['Log', 'log']","['LogEntry', 'logging', 'logs']"
Testability,"I'm still not really sure how to test this properly since it's not in the IR function registry, but I checked that the tests in is.hail.methods.AggregatorSuite that rely on this are going through IR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3816:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/3816,2,['test'],"['test', 'tests']"
Testability,"I'm trying grm for the first time, and I ran:. hail-new read -i /user/satterst/DBS_v2.4/temp.vds \; filtervariants --keep -c /user/satterst/purcell5k_nodups.interval_list \; count \; grm -f rel -o /user/satterst/DBS_v2.4/temp_rel_grm.tsv. This is 6247 exomes and 5284 variants. . Log file is here: /humgen/atgu1/fs03/satterst/hail.grm.log. I tried this once and let it go for over 40 minutes, and it stayed stuck at Stage 4: (0 + 25) / 25. I accidentally overwrote that log, so I did it again just now, and I didn't let it go for as long, but I observed the same behavior. . When I look at the job's task status page, I see the error I copied in the issue title. The details say:; org.apache.spark.SparkException: Kryo serialization failed: Buffer overflow. Available: 6, required: 8; Serialization trace:; data$mcD$sp (breeze.linalg.DenseMatrix$mcD$sp). To avoid this, increase spark.kryoserializer.buffer.max value.; at org.apache.spark.serializer.KryoSerializerInstance.serialize(KryoSerializer.scala:263); at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:240); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:745). I'm curious if I'm doing something wrong or if grm is behaving badly.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/321:280,Log,Log,280,https://hail.is,https://github.com/hail-is/hail/issues/321,3,"['Log', 'log']","['Log', 'log']"
Testability,"I'm trying to address three separate error messages:. ```; /usr/local/lib/python3.7/dist-packages/aiomysql/cursors.py:458: Warning: This version of MySQL doesn't yet support 'sorting of non-scalar JSON values'; ```. Add more debug info to warning message with the query executed. ```; Traceback (most recent call last):; File ""/usr/local/lib/python3.7/dist-packages/hailtop/utils/utils.py"", line 775, in retry_long_running; return await f(*args, **kwargs); File ""/usr/local/lib/python3.7/dist-packages/hailtop/utils/utils.py"", line 812, in loop; await f(*args, **kwargs); File ""/usr/local/lib/python3.7/dist-packages/batch/driver/instance_collection.py"", line 181, in monitor_instances; await asyncio.gather(*[check(instance) for instance in instances]); File ""/usr/local/lib/python3.7/dist-packages/batch/driver/instance_collection.py"", line 179, in check; await self.check_on_instance(instance); File ""/usr/local/lib/python3.7/dist-packages/batch/driver/instance_collection.py"", line 157, in check_on_instance; assert last_start_timestamp is not None, f'lastStartTimestamp does not exist {spec}'; ```. Handle case where last_start_timestamp is None. ```; Failed to collect and upload profile: [Errno 32] Broken pipe; ```. This is from the google cloud profiler. I reduced the logging level from error to warning for messages from this module.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10702:1013,assert,assert,1013,https://hail.is,https://github.com/hail-is/hail/pull/10702,2,"['assert', 'log']","['assert', 'logging']"
Testability,"I'm trying to stop having us call `Region.loadBit` everywhere in `EBaseStruct.decode`. First step of that is not calling `setFieldMissing` and `setFieldPresent` everywhere. PRing for tests right now on first round of doing this, there are still some calls that need to be removed.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10994:183,test,tests,183,https://hail.is,https://github.com/hail-is/hail/pull/10994,1,['test'],['tests']
Testability,I'm using one hail environment or everything now and I need these to test hail. I also added twine which we'll need for deploying anything to PyPI including cloudtools.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5916:69,test,test,69,https://hail.is,https://github.com/hail-is/hail/pull/5916,1,['test'],['test']
Testability,"I've added a test which catches the bug (using row rather than sparse index of row to fill in missing genotype values with the mean), and fixed it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/345:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/345,1,['test'],['test']
Testability,"I've already deployed to the cluster to test. Unless master deploys, you can see it here: https://grafana.azure.hail.is/datasources/edit/kgzY5Io7k. I also fixed the grafana Makefile.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14106:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/14106,1,['test'],['test']
Testability,"I've been supporting Hana as much as I can, but she needs someone who can be more dedicated and responsive than me. She uses a k8s cluster. She has a SEQR frontend deployment. She also has a Hail deployment (statefulset maybe?). The Hail pod has an SSD mounted read-only. That SSD has all the SEQR data in Hail Table form. There are many tables with annotations (variant metadata, like ""probability this variant is damaging"" or ""likely causes this to happen to the protein""). There are also ""per-family"" tables which contain all the sequences within a single family. Many queries are directly against a particular family. Those tables are small and quick to read. There's also one giant table containing all the sequences from all the families. That table is large and expensive to read. A lot of our engineering work has been around making sure queries against that table are fast. Tim, at one point, had enough of her system locally that he could experiment with running queries on his laptop against his SSD. He hacked on the queries themselves and on Hail itself until the bandwidth was fast enough that the queries should complete fast enough on the full dataset. Fast enough varies but generally a couple tens of seconds is OK. The work here is to pair with Hana to diagnose performance issues and make changes until the queries are acceptably fast. The first thing I would do is update her to the latest Hail (with the array decoder improvement as well as the memory overhead stuff on which Daniel is working). Then, with Hana's help, test the timing of some queries. If the queries are still too slow, your options are:; 1. Check the log files and the IR. Are there unnecessary shuffles? Is the code really large? Can we do less work maybe?; 2. Have Hana help you replicate her setup locally. You just need a slice of the data and enough of SEQR to run a query. Now hook up a profiler. What's slow? Can we do something about that?. ### Version. 0.2.124. ### Relevant log output. _No response_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13882:1907,test,test,1907,https://hail.is,https://github.com/hail-is/hail/issues/13882,3,"['log', 'test']","['log', 'test']"
Testability,"I've not written a test for this because we use this pattern a lot, and we haven't been writing explicit test cases for all of our simplify rules, but let me know if you want one.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9011:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/9011,2,['test'],['test']
Testability,"IMARY of table `dgoldste-batch`.`aggregated_billing_project_user_resources_v3` trx id 2486477 lock_mode X locks rec but not gap; Record lock, heap no 228 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 80000034; asc 4;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 810000021b01cd; asc ;;; 6: len 8; hex 80000000001b09e0; asc ;;. Record lock, heap no 249 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 800000ad; asc ;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c050d; asc ;;; 6: len 8; hex 8000000000471350; asc G P;;. Record lock, heap no 266 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 8000008b; asc ;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c0bd1; asc ;;; 6: len 8; hex 80000000004c0108; asc L ;;. Record lock, heap no 273 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 8000000a; asc ;;; 3: len 4; hex 80000038; asc 8;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c17e1; asc ;;; 6: len 8; hex 8000000000370dc0; asc 7 ;;. Record lock, heap no 284 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 800000bd; asc ;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 010000008c204f; asc O;;; 6: len 8; hex 8000000000427f70; asc B p;;. Record lock, heap no 288 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: le",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14380:4906,test,test,4906,https://hail.is,https://github.com/hail-is/hail/issues/14380,1,['test'],['test']
Testability,IR test assertions,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3663:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/pull/3663,2,"['assert', 'test']","['assertions', 'test']"
Testability,IRSuite tests for ToDict and LowerBoundOrderedCollection,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4482:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/4482,1,['test'],['tests']
Testability,"Identities in test namespaces cannot share the same underlying cloud identity if we want to identify requests with cloud access tokens. This also means the `test` account does not need to have the union of roles of the other robot accounts, but pruning of the `test` account's roles is left until after this PR merges so we can properly assess which roles are still in use by the `test` account.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13202:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/13202,4,['test'],['test']
Testability,"If a container is deleted before it ever runs, the log files won't exist. Fixes #13906; Fixes #13907",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13911:51,log,log,51,https://hail.is,https://github.com/hail-is/hail/pull/13911,1,['log'],['log']
Testability,"If a pod is unreachable for any reason, we previously retried forever. However,; a pods are ephemeral; we cannot assume they will return. Instead, if we fail to; contact a pod, we remove it from the pods list and log the error. If the pod; really does exist, the monitor_pods loop will attempt to initialize it again.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9858:213,log,log,213,https://hail.is,https://github.com/hail-is/hail/pull/9858,1,['log'],['log']
Testability,"If batch job fails we should still increment the _task_idx.; Otherwise, we ignore the log for the failing task.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5470:86,log,log,86,https://hail.is,https://github.com/hail-is/hail/pull/5470,1,['log'],['log']
Testability,"If hail and numpy use two different lapack implementations, might not get the same sign on the singular vectors. This PR switches our vector comparison tests to check the absolute values of the matrices, plus make sure they multiply back together properly.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9727:152,test,tests,152,https://hail.is,https://github.com/hail-is/hail/pull/9727,1,['test'],['tests']
Testability,If query has to pull its image fresh each job takes ~2 minutes. I also fixed some; whitespace issues in the tests and a little bug in `retry_response_returning_functions`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9574:108,test,tests,108,https://hail.is,https://github.com/hail-is/hail/pull/9574,1,['test'],['tests']
Testability,"If these tests are being run, I can't find them. Also, rename incorrectly named gear => config in hailtop tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9396:9,test,tests,9,https://hail.is,https://github.com/hail-is/hail/pull/9396,2,['test'],['tests']
Testability,"If we find out the write is complete during a status check, we would assert the buffer is empty before advancing the the offset to the end. This exit point now matches the exit point when we complete after a normal chunk write. Also assert _closed in _wait_closed. _write_chunk can only complete when we've closed and therefore know the final size, so make sure _closed so we don't accidentally get into an infinite loop waiting for _done.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10034:69,assert,assert,69,https://hail.is,https://github.com/hail-is/hail/pull/10034,2,['assert'],['assert']
Testability,"If you sort the GitHub PRs by `is:pr is:open sort:updated-desc`, you'll see that some PRs which have merge conflicts are continuously tested by CI. Really old PRs that are stuck in this state reach a GitHub quota for status updates to a PR for a given SHA. It seems to me that we shouldn't retest any PR that is `source_sha_failed`, and I think this should resolve that particular issue, but am not sure if this is necessarily the best place to insert this logic.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10654:134,test,tested,134,https://hail.is,https://github.com/hail-is/hail/pull/10654,2,"['log', 'test']","['logic', 'tested']"
Testability,Implement a set of logging improvements,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4421:19,log,logging,19,https://hail.is,https://github.com/hail-is/hail/pull/4421,1,['log'],['logging']
Testability,"Implement the combiner in a ServiceBackend compatible way. query is not set up for ergonomic asynchronous programming in any way,; shape, or form. As such, this is very rough. However, blocking round; trips have been eliminated. Care has been taken to maximize amount of; work done in each job while still allowing reasonable save points. That; is, we run every gVCF combine first in one bounded_gather2 call. Then,; for every level of vds merging (that is, `floor(log(n_samples, branch_factor)) == 0, 1, 2, 3...`),; we run every combine at that level, until we have fewer than; branch_factor files to merge, and then we merge them all at once.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12382:465,log,log,465,https://hail.is,https://github.com/hail-is/hail/pull/12382,1,['log'],['log']
Testability,"Implemented image untagging for image cleanup steps (like is done in GCR) for Azure. Since old layers still should be used for caching, this just removes the tag used for an image in a test build. We can then do something like [here](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-auto-purge#run-in-an-on-demand-task) where you can purge untagged layers that are older than some number of weeks where we believe they're no longer relevant to the layer cache. I also switched out the `registry-push-credentials` that CI uses to build images from the ACR admin login to CI's service principal and eliminated the admin login from the ACR terraform resource. I dev deployed CI and manually verified after a deploy that a tag that was cleaned up no longer showed up in acr",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11100:185,test,test,185,https://hail.is,https://github.com/hail-is/hail/pull/11100,3,"['log', 'test']","['login', 'test']"
Testability,"Implemented the transmission disequilibrium test (TDT) in hail. TDT tests for variants that are inherited more or less than what would be expected by chance (i.e., 50%).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/753:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/pull/753,2,['test'],"['test', 'tests']"
Testability,"Implements Katex. Changes to goto.js (and its position on the page) has to do with Firefox's apparently broken history.scrollRestoration = 'manual' handling on page refresh (in that it still automatically restores scroll position). Tested in Chrome, Firefox (latest), Safari 13.0.1, Microsoft Edge (Mac Beta 78.0.276.20). Edge should mostly behave like Chrome, runs now on Chromium.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7427:232,Test,Tested,232,https://hail.is,https://github.com/hail-is/hail/pull/7427,1,['Test'],['Tested']
Testability,Implements a DistributedBackend and uses it to run the subset of the TableIRSuite tests that can be lowered to execute on a backend.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6304:82,test,tests,82,https://hail.is,https://github.com/hail-is/hail/pull/6304,1,['test'],['tests']
Testability,"Implements a StagedIndexWriter with a very similar structure to the unstaged version. To test this, I threaded this through `IndexWriter.build` so that it now compiles a function that implements the CompiledIndexWriter interface:; ```; trait CompiledIndexWriter {; def init(path: String): Unit; def apply(x: Long, offset: Long, annotation: Long): Unit; def close(): Unit; }; ```; with a wrapper class that mimics the interface of the old IndexWriter. Eventually, we'll need this to lower TableWrite. (Kind of non-randomly assigning @chrisvittal, as I'd like feedback on whether the new-style imperative codegen looks right.)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8737:89,test,test,89,https://hail.is,https://github.com/hail-is/hail/pull/8737,1,['test'],['test']
Testability,Improve Python testing times,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5669:15,test,testing,15,https://hail.is,https://github.com/hail-is/hail/pull/5669,1,['test'],['testing']
Testability,Improve assert error message,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1878:8,assert,assert,8,https://hail.is,https://github.com/hail-is/hail/pull/1878,1,['assert'],['assert']
Testability,Improve deploy logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6042:15,log,logic,15,https://hail.is,https://github.com/hail-is/hail/pull/6042,1,['log'],['logic']
Testability,Improve robustness of export_plink and export_gen tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4528:50,test,tests,50,https://hail.is,https://github.com/hail-is/hail/pull/4528,1,['test'],['tests']
Testability,"Improved logreg code, added Firth",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1375:9,log,logreg,9,https://hail.is,https://github.com/hail-is/hail/pull/1375,1,['log'],['logreg']
Testability,Improvements before Scale Tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6491:26,Test,Tests,26,https://hail.is,https://github.com/hail-is/hail/issues/6491,1,['Test'],['Tests']
Testability,Improves performance of GVCF import significantly:; ```; Benchmark Name Ratio Time 1 Time 2; -------------- ----- ------ ------; import_gvcf_force_count 81.2% 68.737 55.833; import_and_transform_gvcf 79.9% 75.692 60.464; ----------------------; Harmonic mean: 80.5%; Geometric mean: 80.6%; Arithmetic mean: 80.6%; Median: 80.6%; ```. Stacked on #8382,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8383:57,Benchmark,Benchmark,57,https://hail.is,https://github.com/hail-is/hail/pull/8383,1,['Benchmark'],['Benchmark']
Testability,"In Python, we check that the row.dtype and entry.dtype are the same for all MTs. In scala we assert that the RVDTypes are the same. This means that both requiredness and entry array location can cause problems.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4761:93,assert,assert,93,https://hail.is,https://github.com/hail-is/hail/issues/4761,1,['assert'],['assert']
Testability,"In `SparkBackend`, TableIRs get lowered into SparkStages and value IRs get lowered into SparkPipelines. `SparkStage` represents the necessary computation on a partition of a table, as well as the partitioning information. This can either directly represent a TableIR, in which case the partition IR (`body`) is an array of all the rows of that given partition, or whatever the downstream ValueIR needs---e.g. for `TableCount`, the length of that array; for `TableWrite`, the filename that the partition was written out to, etc. `SparkPipeline` represents a local value that can use the results from the referenced stages. One assumption that I've made in this PR is that none of the bindings across all `SparkStage.globals` will have the same name, and none of them will be named ""context"". (I think this is a fairly reasonably assumption, since we'll just use genUID() to generate unique IDs for all of them and then use unique symbols once #5080 goes in.). In this PR, I've lowered:; - TableCount; - TableCollect; - TableGetGlobals; - TableRange; - TableMapGlobals; - TableMapRows. in order to write some tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5127:1107,test,tests,1107,https://hail.is,https://github.com/hail-is/hail/pull/5127,1,['test'],['tests']
Testability,"In a new environment,; ```; cd hail; make install; make pytest; ```; fails with; ```; ...; ERROR: usage: setup.py [options] [file_or_dir] [file_or_dir] [...]; setup.py: error: unrecognized arguments: --instafail --self-contained-html --html=../build/reports/pytest.html; inifile: None; rootdir: /path/to/hail/hail/python; ```. because the pytest plugins in hail/python/dev-requirements.txt are not installed. This documents the need to install them before running tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7942:464,test,tests,464,https://hail.is,https://github.com/hail-is/hail/pull/7942,1,['test'],['tests']
Testability,"In a previous PR we added exception logging when tasks on a `BackgroundTaskManager` fail. I'm not seeing any of those messages in the worker logs, suggesting that for some reason the Tasks to free a network namespace when a job is finished are not getting created in the first place. I don't see how in the code we could somehow *not* free the network namespace, but I'm hoping that some of these diagnostics shed some light. Also open to suggestions for where else might be a good spot to add more logging.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13509:36,log,logging,36,https://hail.is,https://github.com/hail-is/hail/pull/13509,3,['log'],"['logging', 'logs']"
Testability,"In a89d64a, I modified `build.yaml` to release the wheel we had already built and tested. Unbeknownst to me was that we rebuild the wheel with a different version of `hail/python/hailtop/hailctl/deploy.yaml` and releasing the version used for testing borked `hailctl dataproc` commands. To fix this, we'll rebuild the wheel but use the `jar` we've already built and tested. This is safe to do as far as I know because we don't bundle any information into the jar that depends on the make flag `DEPLOY_REMOTE`. Fixes: #14452",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14453:82,test,tested,82,https://hail.is,https://github.com/hail-is/hail/pull/14453,3,['test'],"['tested', 'testing']"
Testability,"In aiohttp, a task is cancelled when the requesting user drops the connection. This; is not an exception condition and should not be logged as such.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10929:133,log,logged,133,https://hail.is,https://github.com/hail-is/hail/pull/10929,2,['log'],['logged']
Testability,"In https://github.com/hail-is/hail/pull/9113, I forced the auth driver to use; the modern, TLS-required, SQL config format. I incorrectly forgot to specify the; TLS file paths. Luckily, when I tried to create a user account for Patrick; Cummings, instead of creating a broken secret, the auth driver; error'ed. Moreover, the clean up code was broken. As a result, Patrick's account; was stuck in `creating`. This PR fixes both the clean up code issue (I set `self.namespace` in; `K8sSecretResource`) and specifies the TLS file paths (see driver.py near; line 217). In addition, this PR attempts to avoid future problems with the sql; configuration by codifying the required components as a NamedTuple, `SQLConfig`. I also; co-located all the parsing and transformation logic between JSON, dicts, and CNF; in the `SQLConfig` class. I traced back all the users of `create_secret_data_from_config` to ensure they; all now use SQLConfig. I added lots of type annotations, but those won't do; anything right now because we don't have mypy enabled for hailtop.auth. ---. There's a separate issue of us not getting notified that Patrick's account was; not being created due to an error. The relevant logs are linked below. I'm glad; we're starting work on better monitoring. Hopefully error logs like these will; trigger emails to services team. https://console.cloud.google.com/logs/query;query=resource.type%3D%22k8s_container%22%0Aresource.labels.namespace_name%3D%22default%22%0Aresource.labels.container_name%3D%22auth-driver%22;timeRange=2020-08-11T15:44:00.000Z%2F2020-08-11T23:55:00.000Z?project=hail-vdc&query=%0A. Moreover, the infinite retry of his account created tens of google service; accounts that were not cleaned up. I do not yet understand why the google; service account clean up code failed. The clean up code bug that I *do* fix in; this PR addresses the GSA secret and the tokens secret.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9259:769,log,logic,769,https://hail.is,https://github.com/hail-is/hail/pull/9259,4,['log'],"['logic', 'logs']"
Testability,"In main, we assumed that if `self._batch is not None` then there is a Batch that needs cancelling, but that is no longer true. Now, we must track whether we have called `submit` or not. I made a few other minor cleanups of `ServiceBackend` while I was in there. There is no longer any need to have a `None` batch b/c there is no distinction between a builder and a batch now. Example error:; ```; INFO hailtop.aiocloud.aiogoogle.credentials:credentials.py:92 using credentials file /test-gsa-key/key.json: GoogleServiceAccountCredentials for testns-test-418@hail-vdc.iam.gserviceaccount.com; _________ ERROR at teardown of Tests.test_loop_with_struct_of_strings __________. init_hail = None; request = <SubRequest 'set_query_name' for <TestCaseFunction test_loop_with_struct_of_strings>>. @pytest.fixture(autouse=True); def set_query_name(init_hail, request):; backend = current_backend(); if isinstance(backend, ServiceBackend):; backend.batch_attributes = dict(name=request.node.name); yield; backend.batch_attributes = dict(); references = list(backend._references.keys()); for rg in references:; backend.remove_reference(rg); backend.initialize_references(); if backend._batch:; report: Dict[str, CollectReport] = request.node.stash[test_results_key]; if any(r.failed for r in report.values()):; > log.info(f'cancelling failed test batch {backend._batch.id}'). test/hail/conftest.py:81: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/local/lib/python3.9/dist-packages/hailtop/batch_client/aioclient.py:347: in id; self._raise_if_not_created(); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <hailtop.batch_client.aioclient.Batch object at 0x7ffae6f11bb0>. def _raise_if_not_created(self):; if not self.is_created:; > raise BatchNotCreatedError; E hailtop.batch_client.aioclient.BatchNotCreatedError. ```. https://batch.hail.is/batches/7950601/jobs/156",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13564:483,test,test-gsa-key,483,https://hail.is,https://github.com/hail-is/hail/pull/13564,7,"['Test', 'log', 'test']","['TestCaseFunction', 'Tests', 'log', 'test', 'test-gsa-key', 'testns-test-']"
Testability,"In noticed this was missing when I tried to run the benchmarks, which use pipeline.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7018:52,benchmark,benchmarks,52,https://hail.is,https://github.com/hail-is/hail/pull/7018,1,['benchmark'],['benchmarks']
Testability,"In order to track partition bounds and distinctness, we report the first and last seen keys when writing (matrix) tables. Previously we were copying the last seen key into the partition region. This is incorrect as the partition region has a lifetime of the entire partition and cannot be cleared, leaking memory. Fix this by giving the last seen key its own region that can be cleared before a new last seen key is saved. Tested manually.; See the following zulip thread for initial report.; https://hail.zulipchat.com/#narrow/stream/123011-Hail-Query-Dev/topic/memory.20usage.20by.20range.20-.3E.20write/near/316404073",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12574:423,Test,Tested,423,https://hail.is,https://github.com/hail-is/hail/pull/12574,1,['Test'],['Tested']
Testability,"In response to #7299. It would be nice to get to a more automated way of doing this, but for now we should just update this assuming it passes all tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7301:147,test,tests,147,https://hail.is,https://github.com/hail-is/hail/pull/7301,1,['test'],['tests']
Testability,"In this PR:. - I add `BlockMatrix.from_ndarray`. The implementation isn't great, it just basically just evals the ndarray and adds NDArray support to `ValueToBlockMatrix`. A better version wouldn't cross the Python / Java boundary at all, but I want something that works on all backends, so for now this will have to suffice. Any solution will at least need to communicate the shape of the ndarray back to python, since it's tracked in the block matrix type. ; - With this new method, I can now get many tests in `test_linalg.py` to run on the local / service backends. Most BM lowering was apparently untested before, so some bug fixes were necessary, including:; - Support requiredness analysis on BlockMatrix, even though the answer is always required. ; - Use `CompileAndEvaluate` rather than `Interpret` to evaluate the child node in `ValueToBlockMatrix`. ; - Casting between Int32 and Int64 in various places in lowering. Almost always the culprit was a bad interaction between ndarray shapes (which are Int64) and `StreamRange` argument (which is an Int32). This is sort of a pervasive ndarray problem that will need to be systematically addressed at some point. I don't anticipate anyone making a BlockMatrix with blocks big enough to blow 32 bits though. ; - Lots of fixes to the `BlockMatrixBroadcast` rule for getting diagonal of a BlockMatrix, as it was clearly never run. It had `MakeStream(StreamIR)` which was not allowed, it didn't update the context appropriately, and it used the wrong axis to determine if something was a row vector.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10447:504,test,tests,504,https://hail.is,https://github.com/hail-is/hail/pull/10447,1,['test'],['tests']
Testability,Include NGINX logs in pod logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4428:14,log,logs,14,https://hail.is,https://github.com/hail-is/hail/pull/4428,2,['log'],['logs']
Testability,"Include the call-stack of the compiler when we emit assertions into generated code. This is useful for showing us the trace of the code that emitted a `.get` on `IEmitCode`, for example. To do this, add a `hailBuildConfiguration` enum {`release`|`debug`} into `build-info.properties`, parsed as `HAIL_BUILD_CONFIGURATION`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14372:52,assert,assertions,52,https://hail.is,https://github.com/hail-is/hail/pull/14372,1,['assert'],['assertions']
Testability,"Includes the logistic case of the SKAT algorithm. Changes include updates to the SKAT, SKATSuite, and SKATmodel Scala files including updating python tests and other documentation. . Another significant change in the code is that the tests in SKATSuite have been re-written to ensure less code is duplicated while also added in permutation and noise tests for the skat algorithm which are not apart of the CI testing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2153:13,log,logistic,13,https://hail.is,https://github.com/hail-is/hail/pull/2153,5,"['log', 'test']","['logistic', 'testing', 'tests']"
Testability,"Includes:; - Type system in python that mirrors scala; - Annotation conversion system, and full support for all annotation objects in python; - query_variants and query_samples functions on VDS that return python objects; - implemented Variant, Genotype, etc as first class python objects and fully documented them; - tests for the above",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1297:318,test,tests,318,https://hail.is,https://github.com/hail-is/hail/pull/1297,1,['test'],['tests']
Testability,"Increase memory and cpu for test_hail_services_java to match java query tests. This contains tests of the shuffler IR, which runs the hail compiler, so it seems it should have the same resource limits as the other java query tests. #9401 is getting an out of memory error in `testShuffleIR`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9423:72,test,tests,72,https://hail.is,https://github.com/hail-is/hail/pull/9423,4,['test'],"['testShuffleIR', 'tests']"
Testability,Increase testing parallelism,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3620:9,test,testing,9,https://hail.is,https://github.com/hail-is/hail/pull/3620,1,['test'],['testing']
Testability,IndexSuite.testEmptyKeys FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIteratorWorksWithGeneralEndpoints(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIteratorWorksWithGeneralEndpoints FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIterateFromUntil(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIterateFromUntil FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testLowerBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testLowerBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testQueryByKey(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testQueryByKey FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testRangeIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testRangeIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testUpperBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testUpperBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be) FAILED; java.lan,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:1922,test,test,1922,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['test']
Testability,"Indexing a table by a non-unique matrixtable field was broken (only joined with one row per distinct value). For example, in the test I added, `m4.filter_cols(hl.is_defined(m4.idx)).count_cols()` previously returned 1, now returns 9.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3716:129,test,test,129,https://hail.is,https://github.com/hail-is/hail/pull/3716,1,['test'],['test']
Testability,"Information below. It isn't totally clear what to do here. I think the k8s refresh loop should probably restart pods (mark_unscheduled) that have been scheduled but aren't running after a timeout (few mins). ```; $ kubectl -n batch-pods describe pods batch-3-job-41-39d17b; Name: batch-3-job-41-39d17b; Namespace: batch-pods; Priority: 500000; PriorityClassName: user; Node: gke-vdc-preemptible-pool-9c7148b2-1f89/10.128.0.101; Start Time: Fri, 12 Jul 2019 13:17:15 -0400; Labels: app=batch-job; batch_id=3; hail.is/batch-instance=cd50b95a89914efb897965a5e982a29d; job_id=41; task=main; user=ci; uuid=f53f127847864f1cbf7d4bdc911a6646; Annotations: <none>; Status: Pending; IP: ; Containers:; main:; Container ID: ; Image: gcr.io/hail-vdc/ci-intermediate:oyyg6y2um4kx; Image ID: ; Port: <none>; Host Port: <none>; Command:; bash; -c; set -e; gcloud -q auth activate-service-account --key-file=/test-gsa-key/privateKeyData; gsutil -m cp -r /test/resources/* gs://hail-test-1c9nm/sj0nb47zqys1/pipeline/input/; State: Waiting; Reason: ContainerCreating; Ready: False; Restart Count: 0; Requests:; cpu: 100m; memory: 500M; Environment:; POD_IP: (v1:status.podIP); POD_NAME: batch-3-job-41-39d17b (v1:metadata.name); Mounts:; /gsa-key from gsa-key (rw); /test-gsa-key from test-gsa-key (rw); /var/run/secrets/kubernetes.io/serviceaccount from default-token-8h99c (ro); Conditions:; Type Status; Initialized True ; Ready False ; ContainersReady False ; PodScheduled True ; Volumes:; test-gsa-key:; Type: Secret (a volume populated by a Secret); SecretName: test-gsa-key; Optional: false; gsa-key:; Type: Secret (a volume populated by a Secret); SecretName: ci-gsa-key; Optional: false; default-token-8h99c:; Type: Secret (a volume populated by a Secret); SecretName: default-token-8h99c; Optional: false; QoS Class: Burstable; Node-Selectors: <none>; Tolerations: node.kubernetes.io/not-ready:NoExecute for 300s; node.kubernetes.io/unreachable:NoExecute for 300s; preemptible=true; Events:; Type Reason Age F",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6625:893,test,test-gsa-key,893,https://hail.is,https://github.com/hail-is/hail/issues/6625,3,['test'],"['test', 'test-', 'test-gsa-key']"
Testability,"Initial version of python interface. Still need to:. - document python interface (working with @jigold about the best way to do that); - add tests run through gradle. The interface mostly wraps commands. The main difference is that python has first class VDS objects, so the environment isn't necessary. Therefore, I had to restructure commands that take VDS names as arguments. It can be run like this:. ```; $ gradle shadowJar; $ PYTHONPATH=/path/to/hail/python SPARK_CLASSPATH=/path/to/hail/build/libs/hail-all-spark.jar pyspark; ```. Here's a simple example:. ```; >>> from pyhail import *; >>> hc = HailContext(sc) # create Hail context; >>> vds = hc.import_vcf('/Users/cseed/sample.vcf', n_partitions = 8); >>> vds.count(); {u'nSample': 100, u'nVariants': 346L, u'nGenotypes': 34600L}; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1061:141,test,tests,141,https://hail.is,https://github.com/hail-is/hail/pull/1061,1,['test'],['tests']
Testability,Instead of building variant map (which is actually broken because variants are not necessarily unique!); Move MT.variants to test code. This eliminates another use of MT.rdd.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2712:125,test,test,125,https://hail.is,https://github.com/hail-is/hail/pull/2712,1,['test'],['test']
Testability,"Instead of using `gsutil` we use hailtop.aiotools.copy from the new `HAILGENETICS_HAIL_IMAGE`. Previously, deploying the pip-versioned image was a manual asynchronous step that mostly happened in response to user requests. 1. Actually build and test hailgenetics/hail and hailgenetics/genetics on every build.; 2. On deploy, push the newly built hailgenetics/hail and hailgenetics/genetics images to both docker hub and gcr.io/hail-vdc/; 3. Provide the built-for-this-PR hailgenetics/hail as an env var to the tests.; 4. By default use the hailgenetics/hail image for the currently published pip version for FS operations. Allow overriding by environment variable.; 5. Remove now unnecessary publish-public-images.sh.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11091:245,test,test,245,https://hail.is,https://github.com/hail-is/hail/pull/11091,2,['test'],"['test', 'tests']"
Testability,"Instead of using a fixed weighting, query the GCP /regions endpoint which includes the quota limit and usage. Use this to weight zones for new instance requests. Added a ComputeClient.list endpoint that should work with any GCE list endpoint that is paged. I'm working on improving this logic further by tracking how often instance create requests fail and then weighting zones by `capacity * p(create instance will succeed)`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9316:287,log,logic,287,https://hail.is,https://github.com/hail-is/hail/pull/9316,1,['log'],['logic']
Testability,Instead print summary. I am tired of scrolling past the 5k-field table output in the CI test logs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7799:88,test,test,88,https://hail.is,https://github.com/hail-is/hail/pull/7799,2,"['log', 'test']","['logs', 'test']"
Testability,"Intention is two-fold:. - get ready to move the k8s cluster from broad-ctsa to hail-vdc; - automate as much of our infrastructure build out as possible. Ultimately, changing GCP or k8s infrastructure should involve pushing to something like vdc/. We should regularly test rebuild from scratch. Outline of changes:. - added a new project directory, vdc/; - parameterize projects by GCP project for GCR, set from gcloud project config; - parameterize site by domain name and IP address; - GCP resources are deployed using the Google Deployment Manager; - added a MySQL 5.6 instance (to be used by upload, others); - ugprades gke to latest version. Doesn't handle CI yet. I think we need a setting for CI where it runs the tests and tracks its internal state but doesn't do anything on Github.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4545:267,test,test,267,https://hail.is,https://github.com/hail-is/hail/pull/4545,2,['test'],"['test', 'tests']"
Testability,"Introduce FASTAReaderConfig to act as a kind of factory for FASTAReader,; while all FASTAReaders themselves are confined to ThreadLocals (except; in tests). Furthermore, add a lock around the fasta file map to prevent more than; one fasta from being copied per jvm. The can be lock contention on the; map, but if there is large amounts of waiting for said lock, then it; usually means that a fasta is downloading and we definitely should be; waiting.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9435:149,test,tests,149,https://hail.is,https://github.com/hail-is/hail/pull/9435,1,['test'],['tests']
Testability,"Investigate whether possible to invert menu inclusion, such that each project injects its own menu alongside a common menu section (e.g login).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7276:136,log,login,136,https://hail.is,https://github.com/hail-is/hail/issues/7276,1,['log'],['login']
Testability,Invoker.invokeMethod(Invoker.java:696); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:767); 	at org.testng.TestRunner.run(TestRunner.java:617); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305); 	at org.testng.SuiteRunner.run(SuiteRunner.java:254); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149); 	at org.testng.TestNG.run(TestNG.java:1057); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: java.lang.ArrayIndexOutOfBoundsException: 3; 	at scala.collection.mutable.WrappedArray$ofRef.apply(WrappedArray.scala:127); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.getKey$1(OrderingSuite.scala:345); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:347); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33$$anonfun$apply$19.apply(OrderingSuite.scala:318); 	at is.hail.utils.package$.using(package.scala:613); 	at is.hail.annotations.Region$.scoped(Region.scala:13); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33.apply(OrderingSuite.scala:318); 	at is.hail.expr.ir.OrderingSuite$$anonfun$33.apply(OrderingSuite.scala:314); 	at is.hail.check.GenProp1$$anonfun$apply$1$$anonfun$1.apply$mcZ$sp(Prop.scala:28); 	at is.hail.check.GenProp1$$anonfun$apply$1$$anonfun$1.apply(Prop.scala:28); 	at is.hail.check.GenProp,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:1995,test,testng,1995,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testng']
Testability,Is there a better way to communicate the Query logging bug and its fix?,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12853:47,log,logging,47,https://hail.is,https://github.com/hail-is/hail/pull/12853,1,['log'],['logging']
Testability,Is there a way for me to test this further? My experiments show that clone+merge is ~20 seconds but download from GCS is ~3s. This should seed up the feedback substantially for anyone working on an image that transitively depends on other images.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7534:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/7534,1,['test'],['test']
Testability,"Issue came up on doctest branch. Reproducible example:; ```; assoc_vds = hc.import_vcf('src/test/resources/sample.vcf'); .split_multi(); .variant_qc(); .annotate_samples_expr('sa.culprit = gs.filter(g => v == Variant(""20"", 13753124, ""A"", ""C"")).map(g => g.gt).collect()[0]'); .annotate_samples_expr('sa.pheno = rnorm(1,1) * sa.culprit'); .annotate_samples_expr('sa.cov1 = rnorm(0,1)'); .annotate_samples_expr('sa.cov2 = rnorm(0,1)'); .linreg('sa.pheno', ['sa.cov1', 'sa.cov2']).annotate_variants_expr('va.useInKinship = va.qc.AF > 0.05'). kinship_vds = assoc_vds.filter_variants_expr('va.useInKinship'); lmm_vds = assoc_vds.lmmreg(kinship_vds, 'sa.pheno', ['sa.cov1', 'sa.cov2']). lmm_vds.globals; ```. Error message:; ```; Failed example:; lmm_vds.globals; Exception raised:; Traceback (most recent call last):; File ""//anaconda/lib/python2.7/doctest.py"", line 1315, in __run; compileflags, 1) in test.globs; File ""<doctest default[1]>"", line 1, in <module>; lmm_vds.globals; File ""/Users/jigold/hail/python/hail/dataset.py"", line 1958, in globals; self._globals = self.global_schema._convert_to_py(self._jvds.globalAnnotation()); File ""/Users/jigold/hail/python/hail/type.py"", line 423, in _convert_to_py; d[f.name] = f.typ._convert_to_py(annotation.get(i)); File ""/Users/jigold/hail/python/hail/type.py"", line 423, in _convert_to_py; d[f.name] = f.typ._convert_to_py(annotation.get(i)); File ""/Users/jigold/hail/python/hail/type.py"", line 243, in _convert_to_py; lst = env.jutils.iterableToArrayList(annotation); File ""/Users/jigold/spark-2.0.2-bin-hadoop2.7/python/lib/py4j-0.10.3-src.zip/py4j/java_gateway.py"", line 1133, in __call__; answer, self.gateway_client, self.target_id, self.name); File ""/Users/jigold/spark-2.0.2-bin-hadoop2.7/python/pyspark/sql/utils.py"", line 63, in deco; return f(*a, **kw); File ""/Users/jigold/spark-2.0.2-bin-hadoop2.7/python/lib/py4j-0.10.3-src.zip/py4j/protocol.py"", line 323, in get_return_value; format(target_id, ""."", name, value)); Py4JError: An error occurr",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1368:92,test,test,92,https://hail.is,https://github.com/hail-is/hail/issues/1368,2,['test'],['test']
Testability,"It also fixes numeric promotion of TInt to TLong, which threw an; assertion error before.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/748:66,assert,assertion,66,https://hail.is,https://github.com/hail-is/hail/pull/748,2,['assert'],['assertion']
Testability,"It definitely looks like ""ZONE_RESOURCE_POOL_EXHAUSTED"" is the cause of these GPU test failures. In this case it looks like it took ~4 minutes to successfully get a VM (after two exhaustion errors) & schedule the job. By then, our uniform 6 minute timeout per test left us with just two minutes. It looks like the job actually did succeed in the worker (seems to have taken ~2 minutes, seems long, does testing for CUDA do some kind of initialization work?). Looks like backing that off to 10 minutes might be just enough to eventually get us a GPU. Might be worth pulling that into its own build.yaml test job so that it does not block the queue of other tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13739:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/13739,5,['test'],"['test', 'testing', 'tests']"
Testability,It doesn't make sense to be able to delete or cancel an individual job since they must be part of a batch now. I also deleted `list_jobs` since a job must be a part of a batch. I left in `job.wait()` because I felt the tests in `test_dag` were important and shouldn't be deleted and the wait functionality is needed for there not to be race conditions.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6023:219,test,tests,219,https://hail.is,https://github.com/hail-is/hail/pull/6023,1,['test'],['tests']
Testability,"It got removed temporarily moving to the new CI because the existing code couldn't handle the tests being in a jar. However, if the data providers do fail, the test will be skipped, which actually translated to a non-zero (2) exit code from testng. So in fact this case will fail in the tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6079:94,test,tests,94,https://hail.is,https://github.com/hail-is/hail/issues/6079,4,['test'],"['test', 'testng', 'tests']"
Testability,"It is able to execute a trivial pipeline without the JVM on the client. The countdown down to a fully functional Hail Query service begins now. I will start running the Python tests against the service to benchmark our progress. The main blockers are:; - Table lowering @tpoterba @patrick-schultz @catoverdrive ; - The shuffle service @tpoterba @danking ; - Reading, writing and threading the (per-user, for the query service) filesystem through execution. I'll be working on this.; - A Batch backend for distributed execution. I will do this once there is enough functionality to execute something big/interesting. It's happening!",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8468:176,test,tests,176,https://hail.is,https://github.com/hail-is/hail/pull/8468,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,It is currently possible to write a blocked index where the virtual file; offset is exactly ((REAL_FILE_OFFSET << 16) | BLOCK_SIZE). This is a bug; and leads to assertion errors when trying to seek to the appropriate row; because `off == end` for that index.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6633:161,assert,assertion,161,https://hail.is,https://github.com/hail-is/hail/pull/6633,1,['assert'],['assertion']
Testability,"It is possible for socket connect to fail if the shuffle service is down (e.g. https://ci.hail.is/batches/91027/jobs/105).; This change ensure we retry forever, periodically logging that we are retrying",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9378:174,log,logging,174,https://hail.is,https://github.com/hail-is/hail/pull/9378,1,['log'],['logging']
Testability,"It looks like batch test was an infinite loop for: https://github.com/hail-is/hail/pull/4536. So I bumped off the pod running the test (this was maybe bad behavior on my part, but I was also curious how ci/batch would respond):. ```; $ kubectl delete pod job-17-lz6m5; ```. I thought CI would re-run the test, but it got merged!. Output did get uploaded, here it is: https://storage.googleapis.com/hail-ci-0-1/ci/ee92f64477f68737987fd8f21411b0348a3d3420/e4ae86ea520fbc5d98b84811b2cdb83640163910/index.html. In particular the job log consists of:. ```; failed to get container status {"""" """"}: rpc error: code = OutOfRange desc = EOF; ```. I had a `logs -f` running when I did this, so here is the log up to the failure:. [job-17-lz6m5.log](https://github.com/hail-is/hail/files/2474367/job-17-lz6m5.log)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4541:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/issues/4541,8,"['log', 'test']","['log', 'logs', 'test']"
Testability,"It needs some more cleanup, I plan to make another review pass myself. I can definitely split it into multiple pieces if necessary. Will post latest benchmark numbers in a moment.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2154:149,benchmark,benchmark,149,https://hail.is,https://github.com/hail-is/hail/pull/2154,1,['benchmark'],['benchmark']
Testability,It seems that referencing a global function serializes a module named `test` which; does not exist on the worker.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10317:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/10317,1,['test'],['test']
Testability,"It seems that sessions sometimes become inaccessible to auth. Using some; logging, I realized that `/login` will set some session parameters that do not; reappear in `/oauth2callback`. While trying to debug this, I deleted my cookie; and everything started working again. Luckily, my phone was still borked. The; fix is to use `new_session` which I discovered with a big red warning in; aiohttp-session's docs: [Always use new_session() instead of get_session() in; your login views to guard against Session Fixation; attacks!](https://aiohttp-session.readthedocs.io/en/stable/reference.html#aiohttp_session.new_session). If nothing else, we are now safe from session fixation attacks. I do not; understand why this is necessary for correctness.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8052:74,log,logging,74,https://hail.is,https://github.com/hail-is/hail/pull/8052,3,['log'],"['logging', 'login']"
Testability,"It seems this is probably a bit slower than the current code on GCP (but there is variation so I'm not completely sure, and it still seems fast). It does give a functional S3 fileystem, tho. I will post timings below. Timings were done with my `test-copy` timing framework. - Add size_hint to create_part, used by the S3 backend and passed by copy. - Add a weighted semaphore (that can acquire n instead of just 1) and use it to limit the data in flight. It isn't completely clear how to do this. I could do, say, use a semaphore with value 10 * PART_SIZE and acquire the size of the object (which will be up to PART_SIZE). That might be a good idea, but instead I used 10 * BUFFER_SIZE and acquire the minimum of the BUFFER_SIZE and object size. This specifically limits the total intermediate buffer size. 10 was a mostly random choice, so you might try benchmarking to see if it makes a difference. - I made the copy part size destination filesystem specific. This is because the S3 multi-part upload API calls the partition contents be loaded into memory and 128MiB is too much for parallel uploads. The S3 default is 8MiB. - I create a new async writeable paired with a syncronous byte collector. It is used for the S3 multi-part upload call, which requires an the body to be a bytes/bytearray. - I tried to use readinto/write instead of read/write in SourceCopier.{_copy_file, _copy_part}, but in S3, the get_object API call returns a StreamingBody:. https://botocore.amazonaws.com/v1/documentation/api/latest/reference/response.html. that doesn't support readinto(). - In SourceCopier._copy_part, it might be worth benchmarking reading the entire part into memory and then writing it out like we're forced to do on the AWS backend. To do this, we'd be forced to turn PART_SIZE down to ~8MiB.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10752:245,test,test-copy,245,https://hail.is,https://github.com/hail-is/hail/pull/10752,3,"['benchmark', 'test']","['benchmarking', 'test-copy']"
Testability,"It was wrong for the `elemRef` values in the emit code `NDArrayMap` and `NDArrayMap2` to use `mb` as opposed to `elemMB`. They were being emitted in a different method builder than they were being used in. In order to fix this, I had to fix `NDArrayEmitter` to take an `EmitMethodBuilder[C]` instead of `EmitMethodBuilder[_]`, so I did that. I also had to pass the arguments along from the `mb` method builder to the `innerMethod` method builder in the `NDArrayEmitter` emit method. Factored out `mb.getParamsList()` to make that easier. I also added a new test that is remedied by this change.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8496:557,test,test,557,https://hail.is,https://github.com/hail-is/hail/pull/8496,1,['test'],['test']
Testability,"It will be way better for us to be able to ensure Tim's outstanding PRs continue to be tested. Also, welcome to the rotation @ehigham.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13204:87,test,tested,87,https://hail.is,https://github.com/hail-is/hail/pull/13204,1,['test'],['tested']
Testability,It's just a string so `json.loads` fails on it. Not sure why I did that anyway. This has been broken on CI for a bit now. CI still manages fine because it checks everything on an interval but the callback helps it respond immediately to when batches finish for a PR test or deploy.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12631:266,test,test,266,https://hail.is,https://github.com/hail-is/hail/pull/12631,1,['test'],['test']
Testability,"It's obvious that I'm the only one using SBT 😉 . I removed this spark helper thing that data bricks has abandoned. It's not hard to specify the right spark dependencies manually. In fact, we do that in `build.gradle` already. I don't know what the deal with hadoopClient, but it didn't seem necessary for my tests to pass. We don't use SBT for deployment, so I'm not worried. I'm not sure how all the http4s and json4s stuff got pulled in. They're not present in grade, so I removed them. I also bumped the SBT version for no particular reason. 🤷‍♀ . It works.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8357:308,test,tests,308,https://hail.is,https://github.com/hail-is/hail/pull/8357,1,['test'],['tests']
Testability,It's only used for a few tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6628:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/6628,1,['test'],['tests']
Testability,"It's only used in tests, and is not something we wish to maintain as part of the ptype interface.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10575:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/10575,1,['test'],['tests']
Testability,Its definition is literally first so I do not think we need this test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10082:65,test,test,65,https://hail.is,https://github.com/hail-is/hail/pull/10082,1,['test'],['test']
Testability,"It’s a random test, and it seems the current tolerance still allows rare sporadic failures.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14053:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/14053,1,['test'],['test']
Testability,"JObject(List((start,JObject(List())), (end,JObject(List())), (includeStart,JBool(true)), (includeEnd,JBool(true)))))),null,Map())))))), Let(__iruid_376,ToArray(StreamMap(ToStream(Ref(__iruid_369,array<struct{filePath: str, partitionCounts: int64}>),false),__iruid_377,GetField(Ref(__iruid_377,struct{filePath: str, partitionCounts: int64}),partitionCounts))),Begin(ArrayBuffer(WriteMetadata(Ref(__iruid_376,array<int64>),TableSpecWriter(gs://danking/workshop-test/1kg.mt/rows,Table{global:Struct{},key:[locus,alleles],row:Struct{locus:Locus(GRCh37),alleles:Array[String],rsid:String,qual:Float64,filters:Set[String],info:Struct{AC:Array[Int32],AF:Array[Float64],AN:Int32,BaseQRankSum:Float64,ClippingRankSum:Float64,DP:Int32,DS:Boolean,FS:Float64,HaplotypeScore:Float64,InbreedingCoeff:Float64,MLEAC:Array[Int32],MLEAF:Array[Float64],MQ:Float64,MQ0:Int32,MQRankSum:Float64,QD:Float64,ReadPosRankSum:Float64,set:String}}},rows,../globals/rows,../references,false)), WriteMetadata(Ref(__iruid_376,array<int64>),TableSpecWriter(gs://danking/workshop-test/1kg.mt/entries,Table{global:Struct{},key:[],row:Struct{`the entries! [877f12a8827e18f61222c6c8c5fb04a8]`:Array[Struct{GT:Call,AD:Array[Int32],DP:Int32,GQ:Int32,PL:Array[Int32]}]}},rows,../globals/rows,../references,false)), WriteMetadata(MakeStruct(ArrayBuffer((cols,GetField(Ref(__iruid_368,struct{filePath: str, partitionCounts: int64}),partitionCounts)), (rows,Ref(__iruid_376,array<int64>)))),MatrixSpecWriter(gs://danking/workshop-test/1kg.mt,Matrix{global:Struct{},col_key:[s],col:Struct{s:String},row_key:[[locus,alleles]],row:Struct{locus:Locus(GRCh37),alleles:Array[String],rsid:String,qual:Float64,filters:Set[String],info:Struct{AC:Array[Int32],AF:Array[Float64],AN:Int32,BaseQRankSum:Float64,ClippingRankSum:Float64,DP:Int32,DS:Boolean,FS:Float64,HaplotypeScore:Float64,InbreedingCoeff:Float64,MLEAC:Array[Int32],MLEAF:Array[Float64],MQ:Float64,MQ0:Int32,MQRankSum:Float64,QD:Float64,ReadPosRankSum:Float64,set:String}},entry:Struct{GT:",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856:17570,test,test,17570,https://hail.is,https://github.com/hail-is/hail/issues/9856,1,['test'],['test']
Testability,"JUnit tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/8630a7e8fe12985d71c00212f9362fd38fb0cb9e""><code>8630a7e</code></a> Ensure ITestContext available for JUnit4 tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/7070b020def0089d0d9dc695a5762ad16e974ce6""><code>7070b02</code></a> Streamline dependsOnMethods for configurations</li>; <li><a href=""https://github.com/cbeust/testng/commit/d7e0bb1cbcd7933d34d704678e75cbaf42704505""><code>d7e0bb1</code></a> Deprecate support for running Spock Tests</li>; <li><a href=""https://github.com/cbeust/testng/commit/ca7a3a293008389096be75fea4936af8e5f79650""><code>ca7a3a2</code></a> Ensure All tests run all the time</li>; <li>Additional commits viewable in <a href=""https://github.com/cbeust/testng/compare/testng-6.8.21...7.7.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.testng:testng&package-manager=gradle&previous-version=6.8.21&new-version=7.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR i",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:16711,test,testng,16711,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,['test'],['testng']
Testability,Java UP-TO-DATE; :compileTestScala UP-TO-DATE; :processTestResources UP-TO-DATE; :testClasses UP-TO-DATE; :testCppCodegen; Running test: Test method testReadWrite(is.hail.annotations.AnnotationsSuite). Gradle suite > Gradle test > is.hail.annotations.AnnotationsSuite.testReadWrite FAILED; org.apache.spark.SparkException at AnnotationsSuite.scala:76; Caused by: java.lang.AssertionError; Running test: Test method testEmptyKeys(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testEmptyKeys FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIntervalIteratorWorksWithGeneralEndpoints(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIntervalIteratorWorksWithGeneralEndpoints FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testIterateFromUntil(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIterateFromUntil FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testLowerBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testLowerBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testQueryByKey(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testQueryByKey FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testRangeIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testRangeIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testUpperBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testUpperBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:1408,Assert,AssertionError,1408,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['Assert'],['AssertionError']
Testability,Job 40 seems to have disappeared? It was given the name `job-40-62pkp` by batch and then never mentioned again. [batch.log](https://github.com/hail-is/hail/files/2498262/batch.log); [hail-ci.log](https://github.com/hail-is/hail/files/2498263/hail-ci.log); [pods.txt](https://github.com/hail-is/hail/files/2498264/pods.txt),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4591:119,log,log,119,https://hail.is,https://github.com/hail-is/hail/issues/4591,4,['log'],['log']
Testability,Job Regions Testing for CI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12263:12,Test,Testing,12,https://hail.is,https://github.com/hail-is/hail/pull/12263,1,['Test'],['Testing']
Testability,"Jobs with large logs (>2GiB-ish) can break workers because the current worker code attempts to load the whole log as `bytes` before uploading it to blob storage. This loading into `bytes` also plagues the batch front end when loading logs from blob storage to present to the user.; ; This updates the worker and front end to always stream through logs, never load them into memory. Additionally, in order to make page loads in the UI reasonable, we limit the length of the log that is shown in the UI, with some advice to download the file if it's too large to render on the page. Fixes #13329",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14076:16,log,logs,16,https://hail.is,https://github.com/hail-is/hail/pull/14076,5,['log'],"['log', 'logs']"
Testability,Johnc batch logging Experiment,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6525:12,log,logging,12,https://hail.is,https://github.com/hail-is/hail/pull/6525,1,['log'],['logging']
Testability,"Joins were not being tested and fail with source mismatch if joins are present in both key and agg expressions. This fix is analogous to that on Table.group_by.aggregate in #3730, processing all joins at once, and not reprocessing later. I don't address here a deeper bug that throws a source error when processing more than one entry-indexed. I've made an issue #3763",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3762:21,test,tested,21,https://hail.is,https://github.com/hail-is/hail/pull/3762,1,['test'],['tested']
Testability,"Jupyter notebook by default uses random tokens to secure itself against public attackers. Let's just use that token and expose jupyter publicly. cloudtools can open the port:; ```; gcloud compute instances add-tags CLUSTER_NAME-m \; --zone [ZONE] \; --tags cloudtools-CLUSTER_NAME-jupyter; gcloud compute firewall-rules create CLUSTER_NAME-expose-jupyter \; --action allow \; --direction ingress \; --rules tcp:8123 \; --priority 1 \; --target-tags cloudtools-CLUSTER_NAME-jupyter; ```. Then cloudtools can ssh there and read the token from the jupyter logs, then it can direct the user to the instance's public IP (look at `gcloud compute instances describe CLUSTER_NAME-m`) with the appropriate token.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5236:553,log,logs,553,https://hail.is,https://github.com/hail-is/hail/issues/5236,1,['log'],['logs']
Testability,Just because an RDD is OrderedPartitioner partitioned doesn't mean it; is an OrderedRDD (might not be sorted within partitions). Users who; want this behavior should call OrderedRDD.apply to assert it is an; OrderedRDD.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1864:191,assert,assert,191,https://hail.is,https://github.com/hail-is/hail/pull/1864,1,['assert'],['assert']
Testability,Just cleaning up some old tests to use assertEvalsTo instead of manually constructing the functions.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6006:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/6006,2,"['assert', 'test']","['assertEvalsTo', 'tests']"
Testability,"Just some cleanup, all in test files.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13503:26,test,test,26,https://hail.is,https://github.com/hail-is/hail/pull/13503,1,['test'],['test']
Testability,"Konrad hit:; ``` File ""<decorator-gen-816>"", line 2, in import_matrix_table; File ""/tmp/933dc754-b6e8-446f-986d-f4900becb0bd/hail-devel-ef2f48e719c3.zip/hail/utils/java.py"", line 208, in handle_py4j; hail.utils.java.FatalError: AssertionError: assertion failed: WrappedArray(): Struct{f0:String,f1:Int32}. Java stack trace:; java.lang.AssertionError: assertion failed: WrappedArray(): Struct{f0:String,f1:Int32}; at scala.Predef$.assert(Predef.scala:170); at is.hail.expr.types.MatrixType.<init>(MatrixType.scala:45); at is.hail.expr.types.MatrixType$.fromParts(MatrixType.scala:23); at is.hail.io.LoadMatrix$.apply(LoadMatrix.scala:343); at is.hail.HailContext$$anonfun$importMatrices$1.apply(HailContext.scala:555); at is.hail.HailContext$$anonfun$importMatrices$1.apply(HailContext.scala:555); at is.hail.HailContext.forceBGZip(HailContext.scala:498); at is.hail.HailContext.importMatrices(HailContext.scala:554); at is.hail.HailContext.importMatrix(HailContext.scala:540); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:280); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:214); at java.lang.Thread.run(Thread.java:748); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3017:228,Assert,AssertionError,228,https://hail.is,https://github.com/hail-is/hail/issues/3017,5,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,Konrad requested that we use a higher default. Above this some of the test case p-values do not converge,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12702:70,test,test,70,https://hail.is,https://github.com/hail-is/hail/pull/12702,1,['test'],['test']
Testability,Kubernetes apiserver logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6536:21,log,logs,21,https://hail.is,https://github.com/hail-is/hail/pull/6536,1,['log'],['logs']
Testability,Later versions of IDEA can't run tests with our current testng and scalatest versions. Update to latest and fix fallout.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14277:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/14277,2,['test'],"['testng', 'tests']"
Testability,Let me know if you think this is good and whether I need to test the UI with dev deploy.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13262:60,test,test,60,https://hail.is,https://github.com/hail-is/hail/pull/13262,1,['test'],['test']
Testability,Let me know when this is good and I'll test the deploy script manually by commenting out everything not related to the GAR cleanup.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13703:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/13703,1,['test'],['test']
Testability,"Let's build it from scratch, but better, faster, ... Philosophy: Minimal magic, minimal reliance on outside work, don't use it unless we understand it. Goal: <16ms interactions, including <16ms page transitions. Should feel identical to a desktop app in terms of performance, but maintain state like a website (i.e `get` variables). TODO:; - [ ] Profile/logout should be responsive: no user icon / dropdown until narrow view; - [x] Default to redirect rather than popup; - [x] Clicking on login should clear state if auth failed; - [ ] Write test for token verification on backend; - [ ] Add profile page; - [ ] Finish auth/redirect notebook logic in gateway; - [ ] Add notebook state endpoints in gateway; - [ ] Add notebook state view in frontend; - [ ] Break this up into ~10 commits, targeting <= 200 LOC each (with first commit being checking in package-lock.json); - [ ] Deal with cross-origin tracking issues in Safari. This may require using the ""custom domains"" feature of auth0, paid. Workaround could be to poll/websocket request to api server to refresh tokens. . To run:; ```sh; cd packages/web-client; docker build . -t blah; docker run --env-file=env-example -p 3000:3000 blah npm run start; ```; then navigate to `http://localhost:3000`. \# lines: Most come from the package.json.lock files. These maintain versioning information.; * [It is recommended to check in .lock files]( https://stackoverflow.com/questions/44206782/do-i-commit-the-package-lock-json-file-created-by-npm-5); * They're huge, sorry.; # Documentation; ### JS; https://javascript.info. We use the subset termed [ES2018](https://flaviocopes.com/es2018/). Compatibility across all browsers is ensured by [transpilation using BabelJS, to some lower JS target](https://babeljs.io/docs/en/). Polyfills should not be used, except when impossible to support a browser (this is configurable). I mostly don't care about anything that isn't an evergreen browser, so I think we should support: Edge, Safari, Chrome, Firefox. A",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5162:354,log,logout,354,https://hail.is,https://github.com/hail-is/hail/pull/5162,4,"['log', 'test']","['logic', 'login', 'logout', 'test']"
Testability,Liftover logreg and lmmreg,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2783:9,log,logreg,9,https://hail.is,https://github.com/hail-is/hail/pull/2783,1,['log'],['logreg']
Testability,"Loader; E ImportError: cannot import name 'Markup' from 'jinja2' (/home/circleci/conda/envs/lib/python3.7/site-packages/jinja2/__init__.py); [error] java.lang.IllegalArgumentException: requirement failed: Python tests in Hail environment failed; [error] 	at scala.Predef$.require(Predef.scala:281); [error] 	at $1fb87e3247134917ca70$.$anonfun$pythonSettings$14(build.sbt:288); [error] 	at $1fb87e3247134917ca70$.$anonfun$pythonSettings$14$adapted(build.sbt:278); [error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49); [error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62); [error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:67); [error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:280); [error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:19); [error] 	at sbt.Execute.work(Execute.scala:289); [error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:280); [error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178); [error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:37); [error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); [error] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); [error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); [error] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); [error] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); [error] 	at java.lang.Thread.run(Thread.java:748); [error] (hail / hailtest) java.lang.IllegalArgumentException: requirement failed: Python tests in Hail environment failed; ```. To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: ; https://discuss.hail.is/. Please include the full Hail version and as much detail as possible. -----------------------------------------------------------------------------",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11705:2336,test,tests,2336,https://hail.is,https://github.com/hail-is/hail/issues/11705,1,['test'],['tests']
Testability,"LocalMatrix follows NumPy's broadcast rules (restricted to two-dimensional ndarrays), and I've tried to mirror the Numpy interface for all functions where it's reasonable to do so. I still need time to add a bunch of Python tests of the interface, but I'd be glad for feedback/review in the meantime. In a subsequent PR, I'll expose the rest of BlockMatrix's binary ops in Python with the similar syntax and rules. These changes will provide the matrix functionality needed for a clean mixed models pipeline (modulo a few Scala black boxes that I can return to once I have something working) and will hopefully be generally useful for adding/porting more methods in Python. Current longer-term plan is to expose RowMatrix as well, and consider how to best unify the interfaces. And one day LocalMatrix will actually be a NumPy array...",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3064:224,test,tests,224,https://hail.is,https://github.com/hail-is/hail/pull/3064,1,['test'],['tests']
Testability,Log unsorted,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4207:0,Log,Log,0,https://hail.is,https://github.com/hail-is/hail/pull/4207,1,['Log'],['Log']
Testability,Logging improvements: log context calling Optimize and IR size,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5428:0,Log,Logging,0,https://hail.is,https://github.com/hail-is/hail/pull/5428,2,"['Log', 'log']","['Logging', 'log']"
Testability,Logging system,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/170:0,Log,Logging,0,https://hail.is,https://github.com/hail-is/hail/issues/170,1,['Log'],['Logging']
Testability,"Logic is: in case when data representation of a collection of fields doesn't change, and one simply needs a subset of those values, it makes no sense to copy all of those values to a different Region, instead cast. ```scala; val rvdLP = LocalLDPrune.pruneLocal(standardizedRDD, r2Threshold, windowSize, Some(maxQueueSize)). val fieldIndicesToAdd = Array(""locus"", ""alleles"", ""mean"", ""centered_length_rec""); .map(field => bpvType.fieldIdx(field)); val sitesOnly = rvdLP.mapPartitions(; tableType.canonicalRVDType; )({ it =>; val region = Region(); val rvb = new RegionValueBuilder(region); val newRV = RegionValue(region). it.map { rv =>; region.clear(); rvb.set(region); rvb.start(tableType.canonicalPType); rvb.startStruct(); // this should be a selected fields PStruct; rvb.addFields(bpvType, rv, fieldIndicesToAdd); rvb.endStruct(); newRV.setOffset(rvb.end()); newRV; }; }); ```. With something that looked more like this. ```scala; val rvdLP = LocalLDPrune.pruneLocal(standardizedRDD, r2Threshold, windowSize, Some(maxQueueSize)). val newRvdView = rvdLP.getViewFromSelectedFields(PSelectedFields(Array(""locus"", ""alleles"", ""mean"", ""centered_length_rec"".map(field => bpvType.fieldIdx(field))); ```. presumably the implementation would not only not copy, but also not re-partition the data; cc @tpoterba",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6601:0,Log,Logic,0,https://hail.is,https://github.com/hail-is/hail/issues/6601,1,['Log'],['Logic']
Testability,Login does not allow you to choose which user to log in as,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14634:0,Log,Login,0,https://hail.is,https://github.com/hail-is/hail/issues/14634,2,"['Log', 'log']","['Login', 'log']"
Testability,Logistic skat,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2153:0,Log,Logistic,0,https://hail.is,https://github.com/hail-is/hail/pull/2153,1,['Log'],['Logistic']
Testability,Logout is unauthorized except from auth.hail.is pages,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14635:0,Log,Logout,0,https://hail.is,https://github.com/hail-is/hail/issues/14635,1,['Log'],['Logout']
Testability,"Looking at the logs, I think these two new states are because we added the log analytics agent based on when the PR merged and the absence of these errors before December 10th. ```; Unknown azure statuses [{'code': 'ProvisioningState/updating', 'level': 'Info', 'displayStatus': 'Updating'}, {'code': 'PowerState/running', 'level': 'Info', 'displayStatus': 'VM running'}] for instance batch-worker-default-standard-166xu; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11160:15,log,logs,15,https://hail.is,https://github.com/hail-is/hail/pull/11160,2,['log'],"['log', 'logs']"
Testability,Looking for some feedback and advice on what tests to build.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3285:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/3285,1,['test'],['tests']
Testability,"Looks like this:; ```; (py37) dking@wmb16-359 # ./install-gcs-connector.sh . To set the active account, run:; $ gcloud config set account `ACCOUNT`. created key [bd10c2da666d327144166cc71ba13075dbd7ea26] of type [json] as [/Users/dking/.hail/gcs-keys/gcs-connector-key.json] for [842871226259-compute@developer.gserviceaccount.com]; mkdir: /Users/dking/anaconda2/envs/py37/lib/python3.7/site-packages/pyspark/conf: File exists; success; ```; I tested it by running `python -c 'import hail as hl; hl.read_table(""gs://danking/gnomad-test.mt"").describe()'`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4500:444,test,tested,444,https://hail.is,https://github.com/hail-is/hail/pull/4500,2,['test'],"['test', 'tested']"
Testability,Loop.onStop(DAGScheduler.scala:1732); at org.apache.spark.util.EventLoop.stop(EventLoop.scala:83); at org.apache.spark.scheduler.DAGScheduler.stop(DAGScheduler.scala:1651); at org.apache.spark.SparkContext$$anonfun$stop$8.apply$mcV$sp(SparkContext.scala:1921); at org.apache.spark.util.Utils$.tryLogNonFatalError(Utils.scala:1317); at org.apache.spark.SparkContext.stop(SparkContext.scala:1920); at org.apache.spark.SparkContext$$anonfun$2.apply$mcV$sp(SparkContext.scala:581); at org.apache.spark.util.SparkShutdownHook.run(ShutdownHookManager.scala:216); at org.apache.spark.util.SparkShutdownHookManager$$anonfun$runAll$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(ShutdownHookManager.scala:188); at org.apache.spark.util.SparkShutdownHookManager$$anonfun$runAll$1$$anonfun$apply$mcV$sp$1.apply(ShutdownHookManager.scala:188); at org.apache.spark.util.SparkShutdownHookManager$$anonfun$runAll$1$$anonfun$apply$mcV$sp$1.apply(ShutdownHookManager.scala:188); at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1954); at org.apache.spark.util.SparkShutdownHookManager$$anonfun$runAll$1.apply$mcV$sp(ShutdownHookManager.scala:188); at org.apache.spark.util.SparkShutdownHookManager$$anonfun$runAll$1.apply(ShutdownHookManager.scala:188); at org.apache.spark.util.SparkShutdownHookManager$$anonfun$runAll$1.apply(ShutdownHookManager.scala:188); at scala.util.Try$.apply(Try.scala:192); at org.apache.spark.util.SparkShutdownHookManager.runAll(ShutdownHookManager.scala:188); at org.apache.spark.util.SparkShutdownHookManager$$anon$2.run(ShutdownHookManager.scala:178); at org.apache.hadoop.util.ShutdownHookManager$1.run(ShutdownHookManager.java:54); at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:630); at org.apache.spark.SparkContext.runJob(SparkContext.scala:2022); at org.apache.spark.SparkContext.runJob(SparkContext.scala:2043); at org.apache.spark.SparkContext.runJob(SparkContext.scala:2062); at org.apache.spark.SparkContext.runJob(SparkContext.scala:2087); at ,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4755:4685,log,logUncaughtExceptions,4685,https://hail.is,https://github.com/hail-is/hail/issues/4755,1,['log'],['logUncaughtExceptions']
Testability,"MER_HANDLES_FRACTION):; # Remove delayed calls that were cancelled if their number; # is too high; new_scheduled = []; for handle in self._scheduled:; if handle._cancelled:; handle._scheduled = False; else:; new_scheduled.append(handle); ; heapq.heapify(new_scheduled); self._scheduled = new_scheduled; self._timer_cancelled_count = 0; else:; # Remove delayed calls that were cancelled from head of queue.; while self._scheduled and self._scheduled[0]._cancelled:; self._timer_cancelled_count -= 1; handle = heapq.heappop(self._scheduled); handle._scheduled = False; ; timeout = None; if self._ready or self._stopping:; timeout = 0; elif self._scheduled:; # Compute the desired timeout.; when = self._scheduled[0]._when; timeout = min(max(0, when - self.time()), MAXIMUM_SELECT_TIMEOUT); ; if self._debug and timeout != 0:; t0 = self.time(); event_list = self._selector.select(timeout); dt = self.time() - t0; if dt >= 1.0:; level = logging.INFO; else:; level = logging.DEBUG; nevent = len(event_list); if timeout is None:; logger.log(level, 'poll took %.3f ms: %s events',; dt * 1e3, nevent); elif nevent:; logger.log(level,; 'poll %.3f ms took %.3f ms: %s events',; timeout * 1e3, dt * 1e3, nevent); elif dt >= 1.0:; logger.log(level,; 'poll %.3f ms took %.3f ms: timeout',; timeout * 1e3, dt * 1e3); else:; event_list = self._selector.select(timeout); self._process_events(event_list); ; # Handle 'later' callbacks that are ready.; end_time = self.time() + self._clock_resolution; while self._scheduled:; handle = self._scheduled[0]; if handle._when >= end_time:; break; handle = heapq.heappop(self._scheduled); handle._scheduled = False; self._ready.append(handle); ; # This is the only place where callbacks are actually *called*.; # All other places just add them to ready.; # Note: We run all currently scheduled callbacks, but not any; # callbacks scheduled by callbacks run this time around --; # they will be run the next time (after another I/O poll).; # Use an idiom that is thread-safe wi",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10705:2869,log,logger,2869,https://hail.is,https://github.com/hail-is/hail/pull/10705,1,['log'],['logger']
Testability,"Mac didn't show these, missed it. I need to create a better testing system for UI. . overflow: scroll can force the browser to show scrollbars even when they are not necessary.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7992:60,test,testing,60,https://hail.is,https://github.com/hail-is/hail/pull/7992,1,['test'],['testing']
Testability,Made a new PR so I can test on CI without reauthorizing repeatedly. I'll assign Patrick again once I've finished addressing all his previous comments,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7823:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/7823,1,['test'],['test']
Testability,Made logreg completely generic.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2334:5,log,logreg,5,https://hail.is,https://github.com/hail-is/hail/pull/2334,1,['log'],['logreg']
Testability,Made relevant field and function names pythonic and consistent along the way. I've ported the TDT python implementation and test quite literally. The implementation should use sum on arrays but isn't yet properly exposed in api2. I'm confused why -1 is used as a ploidy but will leave further improvements for later.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2768:124,test,test,124,https://hail.is,https://github.com/hail-is/hail/pull/2768,1,['test'],['test']
Testability,"Made some logging improvements to the combiner in the process of; understanding the various components. Benchmarks, docs, perf.; improvements are next. Simple example of merging three GVCFs:. ```; 2020-03-27 15:17:58 Hail: INFO: GVCF combiner plan:; Branch factor: 2; Batch size: 2; Combining 3 input files in 2 phases with 2 total jobs.; Phase 1: 1 job corresponding to 2 intermediate output files.; Phase 2: 1 job corresponding to 1 final output file. 2020-03-27 15:17:58 Hail: INFO: Starting phase 1/2, merging 3 input GVCFs in 1 job.; 2020-03-27 15:17:58 Hail: INFO: Starting job 1/1 to create 2 merged files, corresponding to ~50.0% of total I/O.; 2020-03-27 15:21:20 Hail: INFO: Finished job 1/1, 50.0% of total I/O finished.; 2020-03-27 15:21:20 Hail: INFO: Finished phase 1/2.; 2020-03-27 15:21:20 Hail: INFO: Starting phase 2/2, merging 2 intermediate sparse matrix tables in 1 job.; 2020-03-27 15:21:27 Hail: INFO: Starting job 1/1 to create 1 merged file, corresponding to ~50.0% of total I/O.; 2020-03-27 15:24:47 Hail: INFO: wrote matrix table with 47031230 rows and 3 columns in 33 partitions to combiner_out.mt; 2020-03-27 15:24:47 Hail: INFO: Finished job 1/1, 100.0% of total I/O finished.; 2020-03-27 15:24:47 Hail: INFO: Finished phase 2/2.; 2020-03-27 15:24:47 Hail: INFO: Finished!; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8378:10,log,logging,10,https://hail.is,https://github.com/hail-is/hail/pull/8378,2,"['Benchmark', 'log']","['Benchmarks', 'logging']"
Testability,"Made the following changes:. - Disabled dataproc tests; - Moved dataproc tests to Makefile, to be run before manual deploys; - Add back VEP cluster test script; - Removed cloudtools config files; - Removed the latest-build functionality; - Added VEP scripts to hailctl/dataproc/resources; - Changed init_notebook to pip install hail wheels, picking up; dependencies automatically; - add out-of-date check (once per day) to hailctl startup",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6250:49,test,tests,49,https://hail.is,https://github.com/hail-is/hail/pull/6250,3,['test'],"['test', 'tests']"
Testability,"Main change: add `var mark: Int` to `BaseIR`.; On profiling the benchmark `matrix_multi_write_nothing`, I noticed a significant amount of time was spent ; - iterating through zipped arrays in requiredness ; - Adding and removing elements from `HashSet`s.; In fact, half the time spent in requiredness was removing ir nodes from the `HashSet` set used as the queue! With this change, requiredness runs like a stabbed rat!. Explanation of `mark`:; This field acts as a flag that analyses can set. For example:; - `HasSharing` can use the field to see if it has visited a node before.; - `Requiredness` uses this field to tell if a node is currently enqueued. The `nextFlag` method in `IrMetadata` allows for analyses to get a fresh value they can set the `mark` field. ; This removes the need to traverse the IR after analyses to re-zero every `mark` field.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13991:64,benchmark,benchmark,64,https://hail.is,https://github.com/hail-is/hail/pull/13991,1,['benchmark'],['benchmark']
Testability,"Major Changes:; - never delete CI jobs, only cancel them; - Mergeable (success) and Failure build states include the job that triggered the build state; - if a PR's build state has a job, link to that job. Minor Changes:; - fix location of dk-test instance; - test that proxy processes are still alive (if proxy creation fails, the process usually exits); - provide `HAIL_CI_GCS_PATH` for developers to set an alternative deploy bucket and path-within-bucket (now that `gs://hail-ci-0-1` is protected)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5054:243,test,test,243,https://hail.is,https://github.com/hail-is/hail/pull/5054,2,['test'],['test']
Testability,Make gradle command to make hail docs without running tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1472:54,test,tests,54,https://hail.is,https://github.com/hail-is/hail/issues/1472,1,['test'],['tests']
Testability,Make it easier to get to the change log from Hail's PyPI project page.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10459:36,log,log,36,https://hail.is,https://github.com/hail-is/hail/pull/10459,1,['log'],['log']
Testability,Make it easy to test just scala or just python code,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1385:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/issues/1385,1,['test'],['test']
Testability,"Makes it easy to see failing tests, stack traces, and timings.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4752:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/4752,1,['test'],['tests']
Testability,"Makes some further progress on simplifying the `PruneDeadFields` pass, with the primary goal of decoupling it from the details of the binding structure. The primary change is to `memoizeValueIR`. Before, it passed in only the requested type of the node, and returned and environment containing all free variables and their requested types. Any bound variables would then need to be removed, and the environments of all children then merged. This low-level manipulation of environments made it closely tied to the binding structure, essentially redundantly encoding everything in `Binds.scala`. Now we pass an environment down into the children, which maps variables to a mutable state tracking the requested type. Each `Ref` node unions the requested type at the reference with the state in the environment. This lets us use the general environment infrastructure. I didn't do an assertion directly comparing the old and new implementations, as I've done with some other pass rewrites. But `PruneDeadFields` has pretty good test coverage.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14509:880,assert,assertion,880,https://hail.is,https://github.com/hail-is/hail/pull/14509,2,"['assert', 'test']","['assertion', 'test']"
Testability,Making one change with all of the SQL packages needed so I can speed up testing of other branches.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5616:72,test,testing,72,https://hail.is,https://github.com/hail-is/hail/pull/5616,1,['test'],['testing']
Testability,"Many of our tests look like:. ```scala; // ExprSuite.scala; assert(eval[Int](""a[0]"").contains(1)); assert(eval[Int](""a[1]"").contains(2)); assert(eval[Int](""a[2]"").isEmpty); assert(eval[Int](""a[3]"").contains(6)); assert(eval[Int](""a[-1]"").contains(8)); assert(eval[Int](""a[-2]"").contains(-1)); ```. Test failures from these expressions simply state that the result was not as expected. If these tests were instead written as below,. ```scala; assert(eval[Int](""a[0]"") == Some(1)); assert(eval[Int](""a[1]"") == Some(2)); assert(eval[Int](""a[2]"") == None); assert(eval[Int](""a[3]"") == Some(6)); assert(eval[Int](""a[-1]"") == Some(8)); assert(eval[Int](""a[-2]"") == Some(-1)); ```; then test failures would print both the expected value and the actual value:; ```; org.scalatest.exceptions.TestFailedException: Some(7) did not equal Some(1); ```. Furthermore, there are a tools in the [scalatest library](http://www.scalatest.org/at_a_glance/FlatSpec) which enable richer specifications. Suppose that Hail included a `randInt : (Int, Int) => Int` function, we might like to verify that this is true:. ```scala; eval[Int](""randInt(0, 10) * 2 + 1"") should (be > 0 and be (even)); ```. When this expression fails, the messages look like:. ```; org.scalatest.exceptions.TestFailedException: 7 was greater than 0, but 7 was odd; ```. These natural language matchers are a bit finicky. I'm not sure if I like them, but I do like having nice error messages.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1286:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/issues/1286,18,"['Test', 'assert', 'test']","['Test', 'TestFailedException', 'assert', 'test', 'tests']"
Testability,"Master fails with `read -i sample.vcf write -o sample.vds` in schema reflection in the Parquet writer:. ```; running: import -i /Users/cseed/sample.vcf; running: write -o /Users/cseed/sample.vds; Exception in thread ""main"" java.lang.AssertionError: assertion failed: Unsound substitution from List(type T) to List(); at scala.reflect.internal.Types$SubstMap.<init>(Types.scala:4644); at scala.reflect.internal.Types$SubstTypeMap.<init>(Types.scala:4761); at scala.reflect.internal.Types$Type.subst(Types.scala:796); at scala.reflect.internal.Types$TypeApiImpl.substituteTypes(Types.scala:321); at scala.reflect.internal.Types$TypeApiImpl.substituteTypes(Types.scala:298); ```. and so on. I'm guessing this has to do with the doubly-nested Maps. The following fixes the problem (but of course throws out all the annotations):. ```; diff --git a/src/main/scala/org/broadinstitute/hail/variant/VariantSampleMatrix.scala b/src/main/scala/org/broadinstitute/hail/variant/VariantSampleMatrix.scala; index 2c95bd0..c480c86 100644; --- a/src/main/scala/org/broadinstitute/hail/variant/VariantSampleMatrix.scala; +++ b/src/main/scala/org/broadinstitute/hail/variant/VariantSampleMatrix.scala; @@ -30,7 +30,7 @@ object VariantSampleMatrix {; // val df = sqlContext.read.parquet(dirname + ""/rdd.parquet""); val df = sqlContext.parquetFile(dirname + ""/rdd.parquet""); new VariantSampleMatrix[Genotype](metadata, df.rdd.map(r =>; - (r.getVariant(0), r.getVariantAnnotations(1), r.getGenotypeStream(2)))); + (r.getVariant(0), Annotations.emptyOfData(), r.getGenotypeStream(1)))); }; }. @@ -326,7 +326,7 @@ class RichVDS(vds: VariantDataset) {. // rdd.toDF().write.parquet(dirname + ""/rdd.parquet""); vds.rdd; - .map { case (v, va, gs) => (v, va, gs.toGenotypeStream(v, compress)) }; + .map[(Variant, GenotypeStream)] { case (v, va, gs) => (v, gs.toGenotypeStream(v, compress)) }; .toDF(); .saveAsParquetFile(dirname + ""/rdd.parquet""); }; ```. You should probably serialize the Annotations in some way in the map before",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/116:233,Assert,AssertionError,233,https://hail.is,https://github.com/hail-is/hail/issues/116,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,MatrixEntriesTable didn't define `uid_field_name` in `_handle_randomness`. Downstream operations failed to fetch the field and inserted a NA into `RNGSplit`. Assert that TableIRs define `uid_field_name` when provided to `handle_randomness`. Fixes: #14303,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14371:158,Assert,Assert,158,https://hail.is,https://github.com/hail-is/hail/pull/14371,1,['Assert'],['Assert']
Testability,"Maximal independent set has had a bug/misfeature since https://github.com/hail-is/hail/pull/2975. That PR added an `hl.int64(...)` coercion around the tie_breaker function. This allowed users to pass tie_breakers that returned floating point numbers, but it *changed the meaning*. The sign of values with magnitude greater than or equal to one was preserved. All values in (-1, 1) were converted to 0, thus treating them as indistinguishable for the purposes of the MIS. This PR fixes this long standing bug and adds a simple test for that case. Supporting arbitrary numeric types is actually quite simple! The conversion from any Hail numeric type to float64 is sign-preserving (AFAIK), which is the only property we need to preserve the user's intended ordering. This change also introduces two mild, obvious performance improvements:; - Use one region for the entire MIS calculation, clearing for each invocation of tie_breaker (MIS is single-threaded); - Read the tie_breaker value using simple Region and type methods rather than allocating a new SafeRow each time the tie_breaker is invoked.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7729:526,test,test,526,https://hail.is,https://github.com/hail-is/hail/pull/7729,1,['test'],['test']
Testability,Maybe Redirect to Hail CI PR test pods,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4417:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/4417,1,['test'],['test']
Testability,Maybe redirect test-ci to k8s pods,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4427:15,test,test-ci,15,https://hail.is,https://github.com/hail-is/hail/pull/4427,1,['test'],['test-ci']
Testability,Memoize parseToAST to Improve Test Speed,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3450:30,Test,Test,30,https://hail.is,https://github.com/hail-is/hail/pull/3450,1,['Test'],['Test']
Testability,Memory is a major source of logs which we never look at.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11976:28,log,logs,28,https://hail.is,https://github.com/hail-is/hail/pull/11976,1,['log'],['logs']
Testability,Meredith needs the former and I need the latter. I'll add Python tests of all block matrix functionality in subsequent broadcasting PR.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3086:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/3086,1,['test'],['tests']
Testability,Missed this when updating MatrixRead. Main goal; here is not to dump out JSON partition intervals; a bunch of times in the log files.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10560:123,log,log,123,https://hail.is,https://github.com/hail-is/hail/pull/10560,1,['log'],['log']
Testability,More details at #8058. - Include the user's IP in the site logs.; - Fix out of date Makefile. I recognize there's duplication of log format. Abstracting over that doesn't seem *that* valuable and requires putting the shared configuration into a file in the root of hail and then arranging for the shared config file to be in the docker context. It's all kind of annoying and seems low value.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8059:59,log,logs,59,https://hail.is,https://github.com/hail-is/hail/pull/8059,2,['log'],"['log', 'logs']"
Testability,More index btree array position tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3807:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/3807,1,['test'],['tests']
Testability,More informative assertion in MatrixNativeReader,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4749:17,assert,assertion,17,https://hail.is,https://github.com/hail-is/hail/pull/4749,1,['assert'],['assertion']
Testability,More logging messages.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9504:5,log,logging,5,https://hail.is,https://github.com/hail-is/hail/pull/9504,1,['log'],['logging']
Testability,More parallelism for service backend tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11860:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/11860,1,['test'],['tests']
Testability,More tests => lower mean => more even distribution of time across jobs => lower mean test job time,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11449:5,test,tests,5,https://hail.is,https://github.com/hail-is/hail/pull/11449,2,['test'],"['test', 'tests']"
Testability,More thorough Blanczos Tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9513:23,Test,Tests,23,https://hail.is,https://github.com/hail-is/hail/pull/9513,1,['Test'],['Tests']
Testability,"Most of the functionality was already available in EmitFunctionBuilder, but Compile() didn't make it available. This PR creates a `PrintWriter` during assertEvalsTo if you set the `jvm_bytecode_dump` flag to a file path you want the bytecode to be written to. Example:; ```scala; HailContext.setFlag(""jvm_bytecode_dump"", ""arr_filter_bytecode.java""); assertEvalsTo(ArrayFilter(a, ""x"",; ApplyComparisonOp(LT(TInt32()), Ref(""x"", TInt32()), I32(6))), FastIndexedSeq(3)); HailContext.setFlag(""jvm_bytecode_dump"", null); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7199:151,assert,assertEvalsTo,151,https://hail.is,https://github.com/hail-is/hail/pull/7199,2,['assert'],['assertEvalsTo']
Testability,"Mostly code reorg. Also:. moved rewriters to ir objects; call Optimize before intepreting; removed Filter{Rows, Cols} rules (non-IR), those should get folded back into the MT methods like other AST-based rules; re-enabled Fitler{Rows, Cols}IR fusion rules since logical and/or is back",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3330:262,log,logical,262,https://hail.is,https://github.com/hail-is/hail/pull/3330,1,['log'],['logical']
Testability,"Mostly random bugs that didn't get flexed until trying to run CI jobs and batch tests within jobs.; - The IP addresses used for jobs immediately got out of sync with GCP and I needed to add an `internal.hail` entry to the worker and job's `/etc/hosts` so that default batch could submit to dev batch.; - GCP's metadata server and DNS nameserver are both 169.254.169.254. Azure has a separate IP address for the latter, so I added this configuration to the CloudWorkerAPI. Something that's not addressed here is that I needed to comment out the resource requirements for build image jobs to make them run on standards. The common 2 vCPU / 10 Gi storage / 7.5 Gi Mem lands on standards in GCP but highcpu on azure, which doesn't have disks implemented yet. I'm not sure what the correct step forward on that front is. Otherwise, dev deploying batch should be possible! I ran into multiple issues where my user's sql config was messed up because it was created from a buggy branch. I tried to fix these for the other dev namespaces (dan's which was made later was fine) but there may be some bits I missed. I got as far as running `test_batch_0` and the tests start (!) but fail quickly because of a blob permission issue on the dev driver.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11071:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/11071,2,['test'],['tests']
Testability,"Mostly small, straightforward stuff. /auth must only return 2xx, 401 or 403, or nginx returns 500. Redirect auth failures connecting to instance to /error, too. Changed ""Create/Open Notebook"" to ""Launch/Open Jupyter"" and associated language throughout. I'll run through the whole test playbook again after these go in. Note to self, some improvements to consider:; - Validate image, memory, cpu values in workshop-admin. Right now, if you enter invalid values, you get a 500 on launch Jupyter with invalid pod spec.; - Could change notebook.hail.is/notebook URL to notebook.hail.is/jupyter now.; - A background loop to kill any notebook workers associated to inactive workshops. Then if you just inactivate the workshop at the end, everything gets cleaned up.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7162:280,test,test,280,https://hail.is,https://github.com/hail-is/hail/pull/7162,1,['test'],['test']
Testability,"Motivation for this change: I want to keep the global configuration information in one place, and that's going to be the K8s default/global-config secret. In particular, I want to get rid of config.mk and just pull the relevant information from K8s. The secret currently like this:. ```; $ k get -o json secret global-config | jq '.data | map_values(@base64d)'; {; ""default_namespace"": ""..."",; ""docker_root_image"": ""..."",; ""domain"": ""..."",; ""gcp_project"": ""..."",; ""gcp_region"": ""..."",; ""gcp_zone"": ""..."",; ""gsuite_organization"": ""..."",; ""internal_ip"": ""..."",; ""ip"": ""..."",; ""kubernetes_server_url"": ""...""; }; ```. default_namespace will always be the name of the namespace the secret is in. This adds gsuite_organization which will be used by auth to restrict logins to a fixed GSuite organization, e.g. broadinstitute.org. I have created this secret on our production K8s cluster. The Terraform script will also create it. With this change, CI creates global-config in test and dev ""default"" namespaces based on the one from where CI is operating. The only field that currently needs to be updated is default_namespace. The plan is to pull from global-config in deployments instead of threading these global configuration(s) through CI. I made this change in the CI tests. FYI @lgruen. I'm going to break up the infra-1 work into a few separate PRs to keep it all clear and manageable.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9777:760,log,logins,760,https://hail.is,https://github.com/hail-is/hail/pull/9777,3,"['log', 'test']","['logins', 'test', 'tests']"
Testability,"Move FilterSuite to Python, delete the part that tests VariantQC",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3607:49,test,tests,49,https://hail.is,https://github.com/hail-is/hail/pull/3607,1,['test'],['tests']
Testability,"Move full time test suite into python, audit coverage",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7806:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/issues/7806,1,['test'],['test']
Testability,Move functions only used in tests to RichVariantSampleMatrix defined; in src/test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2543:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/2543,2,['test'],"['test', 'tests']"
Testability,Move linear and logistic regression tests to Python,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3377:16,log,logistic,16,https://hail.is,https://github.com/hail-is/hail/pull/3377,2,"['log', 'test']","['logistic', 'tests']"
Testability,Move some global references inside AST paths to clean up logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3553:57,log,logs,57,https://hail.is,https://github.com/hail-is/hail/pull/3553,1,['log'],['logs']
Testability,Moved ImportPlink tests to Python,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3411:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/3411,1,['test'],['tests']
Testability,"Moved sample and variant QC methods from VDS to their own objects, and call the object apply methods from elsewhere (tests and python). If we're happy with this model (following the hail2 api) I'll change everything else. Long chains of `vds.f().g().h()` will need to get broken up as. ```; var vdss = ...; vds = f(vds); vds = g(vds); vds = h(vds); ```. to avoid unnecessary nesting (and clarity).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2590:117,test,tests,117,https://hail.is,https://github.com/hail-is/hail/pull/2590,1,['test'],['tests']
Testability,Moved the relevant Scala tests into python.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7776:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/7776,1,['test'],['tests']
Testability,Multi-phenotype logistic regression,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5072:16,log,logistic,16,https://hail.is,https://github.com/hail-is/hail/pull/5072,1,['log'],['logistic']
Testability,My frustration boiled over and I went to go fix this. This change will cause everyone to become logged out because they will lack the right cookie. That seems fine.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12380:96,log,logged,96,https://hail.is,https://github.com/hail-is/hail/pull/12380,1,['log'],['logged']
Testability,"My motivation here is that in Terra we aren't going to be using hail authentication tokens, rather an authentication from gcloud or az. So I want our batch client to be able to use a `CloudCredentials` just as easily as it uses the hail auth token that we store on the user's machine. So I introduce HailCredentials which subclasses CloudCredentials but the behavior is the same. It also lets us re-use some of the retry logic that we have baked into `aiocloud.common.Session`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12642:421,log,logic,421,https://hail.is,https://github.com/hail-is/hail/pull/12642,1,['log'],['logic']
Testability,My query service PR will replace these tests with a complete test suite anyway. No one relies on; query being correct. Let us stop interrupting PRs with flaky tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10114:39,test,tests,39,https://hail.is,https://github.com/hail-is/hail/pull/10114,3,['test'],"['test', 'tests']"
Testability,"N: float64, POSITIVE_TRAIN_SITE: bool, VQSLOD: float64, ClippingRankSum: float64, BaseQRankSum: float64, MLEAF: array<float64>, MLEAC: array<int32>, MQ: float64, QD: float64, END: int32, DB: bool, HaplotypeScore: float64, MQRankSum: float64, CCC: int32, NCC: int32, DS: bool}, `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`: array<struct{GT: call, AD: array<int32>, DP: int32, GQ: int32, PL: array<int32>}>}),the entries! [877f12a8827e18f61222c6c8c5fb04a8]),Ref(i,int32)),DP),I32(20)). Java stack trace:; java.lang.AssertionError: assertion failed: mismatch:; array<int32>; array<int32>; ApplyComparisonOp(GT(int32,int32),GetField(ArrayRef(GetField(Ref(va,struct{locus: locus<GRCh37>, alleles: array<str>, rsid: str, qual: float64, filters: set<str>, info: struct{NEGATIVE_TRAIN_SITE: bool, HWP: float64, AC: array<int32>, culprit: str, MQ0: int32, ReadPosRankSum: float64, AN: int32, InbreedingCoeff: float64, AF: array<float64>, GQ_STDDEV: float64, FS: float64, DP: int32, GQ_MEAN: float64, POSITIVE_TRAIN_SITE: bool, VQSLOD: float64, ClippingRankSum: float64, BaseQRankSum: float64, MLEAF: array<float64>, MLEAC: array<int32>, MQ: float64, QD: float64, END: int32, DB: bool, HaplotypeScore: float64, MQRankSum: float64, CCC: int32, NCC: int32, DS: bool}, `the entries! [877f12a8827e18f61222c6c8c5fb04a8]`: array<struct{GT: call, AD: array<int32>, DP: int32, GQ: int32, PL: array<int32>}>}),the entries! [877f12a8827e18f61222c6c8c5fb04a8]),Ref(i,int32)),DP),I32(20)); 	at scala.Predef$.assert(Predef.scala:170); 	at is.hail.expr.ir.Infer$.apply(Infer.scala:10); 	at is.hail.expr.ir.InferIR$class.typ(IR.scala:58); 	at is.hail.expr.ir.If.typ(IR.scala:77); 	at is.hail.expr.ir.Infer$$anonfun$apply$5.apply(Infer.scala:63); 	at is.hail.expr.ir.Infer$$anonfun$apply$5.apply(Infer.scala:59); 	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:124); 	at scala.collection.immutable.List.foldLeft(List.scala:84); 	at is.hail.expr.ir.Infer$.apply(Infer.scala:59); 	at is.hail.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4134:1928,Assert,AssertionError,1928,https://hail.is,https://github.com/hail-is/hail/issues/4134,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"NB, this is a stacked PR. To see just these changes see [this commit](https://github.com/hail-is/hail/pull/12883/commits/ae51e0a9af12e4c89a44e7ce3235f3f665ff4830). ---. [VPC Flow Logs](https://cloud.google.com/vpc/docs/flow-logs):. > VPC Flow Logs records a sample of network flows sent from and received by VM instances, including; > instances used as Google Kubernetes Engine nodes. These logs can be used for network monitoring,; > forensics, real-time security analysis, and expense optimization. I found the collection process the most elucidating part of the documentation. My summary of that; process follows:. 1. Packets are sampled on the network interface of a VM. Google claims an average sampling rate of; 1/30. This rate reduces if the VM is under load. This rate is immutable to us. 2. Within an ""aggregation interval"", packets are aggregated into ""records"" which are keyed (my term); by source & destination. There are currently six choices for aggregation interval: 5s, 30s, 1m,; 5m, 10m, and 15m. 3. Records are sampled. The sampling rate is a user configured floating point number (precision; unclear) between 0 and 1. 4. Metadata is optionally added to the records. The metadata captures information about the source; and destination VM such as project id, VM name, zone, region, GKE pod, GKE service, and geographic; information of external parties. The user may elect to receive all metadata, no metadata, or a; specific set of metadata fields. 5. The records are written to Google Cloud Logging. The pricing of VPC Flow Logs is described at the [network pricing page](https://cloud.google.com/vpc/network-pricing#network-telemetry). Notice that, if logs are only sent to Cloud Logging (not to BigQuery, Pub/Sub, or Cloud Storage):. > If you store your logs in Cloud Logging, logs generation charges are waived, and only Logging charges apply. I believe in this phrase ""logs generation charges"" refers to *VPC Flow logs* generation charges. The Google Cloud Logging [pricing page]",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12883:179,Log,Logs,179,https://hail.is,https://github.com/hail-is/hail/pull/12883,4,"['Log', 'log']","['Logs', 'logs']"
Testability,"Name; | where Namespace == ""pr-13135-default-u5tt5011yt5w"" and PodName startswith ""batch-driver""; | distinct ContainerID, PodName, Namespace; | join (; ContainerLog; | where TimeGenerated > startTimestamp; ) on ContainerID; | project TimeGenerated, message=parse_json(LogEntry).message, LogEntry=parse_json(LogEntry); | where message contains ""hail-az://""; | order by TimeGenerated desc; ```. That revealed the batch logs path:. ```; EXAMPLE BATCH_JOB_LOGS_PATH hail-az://haildevtest/test/batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1/1/abc123/main/log; ```. In the [failing PR test job logs](https://ci.azure.hail.is/batches/3956877/jobs/152), I found the batch id:. ```; [2023-06-09 12:43:34] test/hail/methods/test_impex.py::BGENTests::test_import_bgen_row_fields; -------------------------------- live log call ---------------------------------; INFO batch_client.aioclient:aioclient.py:753 created batch 1148. INFO batch_client.aioclient:aioclient.py:770 updated batch 1148. FAILED; ```. I listed the job logs:. ```; (base) dking@wm28c-761 hail % az storage blob list --account-name haildevtest --container test --prefix batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/ -o table; Name Blob Type Blob Tier Length Content Type Last Modified Snapshot; ----------------------------------------------------------------------------- ----------- ----------- -------- ------------------------ ------------------------- ----------; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/1/i4CoSh/main/log BlockBlob Hot 11724 application/octet-stream 2023-06-09T12:43:36+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/1/i4CoSh/main/resource_usage BlockBlob Hot 64 application/octet-stream 2023-06-09T12:43:36+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/1/i4CoSh/status.json BlockBlob Hot 1240 application/octet-stream 2023-06-09T12:43:36+00:00; batch/logs/we5a79QlczzdluUx8kT2Vh/batch/1148/2/31Owgv/main/log BlockBlob Hot 16626 application/octet-stream 2023-06-09T12:44:22+00:00; batch/logs/we5a79QlczzdluUx8k",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13160:1615,log,logs,1615,https://hail.is,https://github.com/hail-is/hail/pull/13160,1,['log'],['logs']
Testability,Necessary for the big aggregate benchmark to pass (albeit more slowly) in benchmarks.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10746:32,benchmark,benchmark,32,https://hail.is,https://github.com/hail-is/hail/pull/10746,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Need this to be able to test batch2 with non-production databases. Unfortunately, I have no way of testing whether this works with a test database until it merges...",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7283:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/7283,3,['test'],"['test', 'testing']"
Testability,Need to update build.gradle and test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4578:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/issues/4578,1,['test'],['test']
Testability,Needed so #5866 will pass tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5897:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/5897,1,['test'],['tests']
Testability,Needed to debug Laurent's pipeline. And we should be logging everything anyway -- this is the only way we get to see the post-extract-aggregators executed IR,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5749:53,log,logging,53,https://hail.is,https://github.com/hail-is/hail/pull/5749,1,['log'],['logging']
Testability,Nested another section layer under `Implementation` so now there is `Environment / Tooling` and `Testing / Debugging` with space in both to outline shared steps and then compiler & services-specific steps,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9970:97,Test,Testing,97,https://hail.is,https://github.com/hail-is/hail/pull/9970,1,['Test'],['Testing']
Testability,Nested array element aggregations weren't working. This fixes it and adds a test for nested ArrayAggs. Caught by test failures from #6698.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6743:76,test,test,76,https://hail.is,https://github.com/hail-is/hail/pull/6743,2,['test'],['test']
Testability,New IR node that makes an array of zeros. Good for initializing large things. Mostly I want this so I can do some memory leak tests that don't take multiple minutes.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8168:126,test,tests,126,https://hail.is,https://github.com/hail-is/hail/pull/8168,1,['test'],['tests']
Testability,Next PR will split service backend tests for better legibility so fixtures need to be in one place.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14313:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/14313,1,['test'],['tests']
Testability,No. Dirty. Indicies. After. Tests. Or. Builds.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4462:28,Test,Tests,28,https://hail.is,https://github.com/hail-is/hail/pull/4462,1,['Test'],['Tests']
Testability,Non-pseudo-autosomal variants (i.e. the part of the X which does not match the Y) are very unlikely to appear but can trigger significantly different behavior from pseudo-autosomal variants. Our tests should trigger this behavior more often.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/871:195,test,tests,195,https://hail.is,https://github.com/hail-is/hail/issues/871,1,['test'],['tests']
Testability,Not a correctness bug because we raise an assertion error in the partition function.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13550:42,assert,assertion,42,https://hail.is,https://github.com/hail-is/hail/pull/13550,1,['assert'],['assertion']
Testability,"Not helpful for debugging, we still get logs on errors",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11977:40,log,logs,40,https://hail.is,https://github.com/hail-is/hail/pull/11977,1,['log'],['logs']
Testability,Not including a test since Patrick has an open PR that obviates this kind of error completely.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11181:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/11181,1,['test'],['test']
Testability,"Not sure who to assign this to since it spans everything. I targeted the slowest test jobs. Currently CI's PR page timings are wrong. If you scroll down to ""Build History"" and click on a batch, that page has the right timings. (The CI PR page timings will be fixed by #6746",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6863:81,test,test,81,https://hail.is,https://github.com/hail-is/hail/pull/6863,1,['test'],['test']
Testability,"Not used/tested anywhere, but it was broken.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4331:9,test,tested,9,https://hail.is,https://github.com/hail-is/hail/pull/4331,1,['test'],['tested']
Testability,Notebook2 login,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5437:10,log,login,10,https://hail.is,https://github.com/hail-is/hail/pull/5437,1,['log'],['login']
Testability,"Notebook2 was _literally_ unusable (no favicon). Instead of copying and pasting the favicon link 5 times, I also extracted out the shared elements into a template, and extended it in all other views. How this works:; `layout.html`: contains all shared elements, and marks places where children can insert content (`{% block title %}{% endblock %}`, `{% block head %}{% endblock %}`, `{% block content %}{% endblock %}`). Every other file extends this. The 2 templates that weren't updated (admin-login.html, and workers.html) are placeholders from notebook1 that haven't been updated for notebook 2 yet; they should work, but don't use notebook2 styles, and therefore don't have shared elements to wrap in layout.html. This all works. cc @cseed, @jigold, @danking, @konradjk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5827:496,log,login,496,https://hail.is,https://github.com/hail-is/hail/pull/5827,1,['log'],['login']
Testability,Noticed dirty working tree after running tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4397:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/4397,1,['test'],['tests']
Testability,Now raises an error instead of asserting. resolves #4770 by clarifying problem with old syntax introduced by [breaking change](https://discuss.hail.is/t/breaking-change-redesign-of-aggregator-interface/701),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5110:31,assert,asserting,31,https://hail.is,https://github.com/hail-is/hail/pull/5110,1,['assert'],['asserting']
Testability,"Now that createDatabase is gone, rename createDatabase2Step => createDatabase2, and accept createDatabase in build.yaml for creating database. In follow up PRs, I will:; - rename createDatabase2 => createDatabase in build.yaml,; - don't support createDatabase2, completing the change. I can't do this in one change because this PR is tested/deployed by the _previous_ CI, not the one in this PR, so it has to be done in stages. Such is the microservices life.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7887:334,test,tested,334,https://hail.is,https://github.com/hail-is/hail/pull/7887,1,['test'],['tested']
Testability,"Now that test databases are hosted on their own servers instead of the single cloud-hosted MySQL, we can ramp up the parallelism both in our tests and in the number of PRs that we run at once. I recall that even before we had this DB bottleneck we still restricted the number of PRs running at once for cost reasons, but if that's not the case we could remove that restriction entirely.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12974:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/12974,2,['test'],"['test', 'tests']"
Testability,"Now the command:; ```; pca_vds.logreg('wald', 'sa.isCase', ['sa.scores.PC1, sa.scores.PC2']).count(); ```; gives the right error; ```; FatalError Traceback (most recent call last); <ipython-input-28-2fb5c41b2314> in <module>(); ----> 1 pca_vds.logreg('wald', 'sa.isCase', ['sa.scores.PC1, sa.scores.PC2']).count(). <decorator-gen-218> in logreg(self, test, y, covariates, root). /Users/jbloom/hail/python/hail/java.pyc in handle_py4j(func, *args, **kwargs); 105 except Py4JJavaError as e:; 106 msg = env.jutils.getMinimalMessage(e.java_exception); --> 107 raise FatalError(msg); 108 except Py4JError as e:; 109 env.jutils.log().error('hail: caught python exception: ' + str(e)). FatalError: `|' expected but `,' found; <input>:1:sa.scores.PC1, sa.scores.PC2; ^; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1502:31,log,logreg,31,https://hail.is,https://github.com/hail-is/hail/pull/1502,5,"['log', 'test']","['log', 'logreg', 'test']"
Testability,"Now the lmmreg python test is deterministic. And I found another bug in lmmreg by implementing the same test in LinearMixedRegressionSuite, which I then fixed, namely, kinshipVds should have been filtKinshipVds. Upon rebasing, that test failed again due to interaction of IntIterator and lazyFilterWith, which I've also fixed. I've added a regression test to LinearMixedRegressionSuite, paralleling the Python test, that catches both bugs.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1550:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/1550,5,['test'],['test']
Testability,"Now the lmmreg test is deterministic. And I found a bug in lmmreg by implementing the same test in LinearMixedRegressionSuite, which I then fixed. Namely: `kinshipVds` should have been `filtKinshipVds`. I've left this in as a regression test.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1548:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/1548,3,['test'],['test']
Testability,Now you should be able to do:; ```; make -C query test NAMESPACE=default PYTEST_ARGS='-k test_foo'; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11621:50,test,test,50,https://hail.is,https://github.com/hail-is/hail/pull/11621,1,['test'],['test']
Testability,"OK, I gave you maximum spicy. I don't think it's so bad, but let me know if you want me to cut it up. Some remarks:; - This PR successfully tests (and it passes!) and then cleans up this branch: https://github.com/hail-is/hail/pull/5842. See `build.yaml`. It's a thing of beauty (I think).; - That branch has everything but Scala tests and dataproc/cloudtools tests. The latter are easy, the former are a little messy since I want to test against a test jar, and I've decided to switch to maven for that.; - No support for publish or deploy yet.; - There are synchronous calls it `git` in various places which can make the UI sluggish. I'll fix those in another PR.; - Work remains to validate build.yaml and the deploy step yaml.; - I currently run jinja2 if the file (Dockerfile or deployment yaml) ends in `.in`, but I think I'm going to make it unconditional. `.in` just seem error prone.; - In CreateDatabaseStep, I put secret credentials in the pod configuration. That's not ideal, but I don't think it is a serious problem, because nobody who isn't privileged can read the pods, and I can fix it in a later PR (the create database step should generate the passwords, not ci2).; - I disabled the fixme pylint message (on # FIXME comments), since are fixmes are longer lived than a single change sometimes.; - I'm slightly confused about runImage (which generates a batch job) and deploy of a pod spec (which runs kubectl apply as a batch job). Right now, runImage always runs in batch-pods, and a deploy job runs in whatever namespace you specify. Fixes https://github.com/hail-is/hail/issues/5903",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5891:140,test,tests,140,https://hail.is,https://github.com/hail-is/hail/pull/5891,5,['test'],"['test', 'tests']"
Testability,"OK, so. This continues to be a mammoth PR despite a day's worth of pruning. I think it would be good to start getting some eyes on it. Over all, I feel a bit weird about it. The intention is for this to be a functional but not scalable or reliable shuffler. It will allow Hail Query to exist, albeit in a limited way (keys cannot exceed shuffler memory). However, in parallel to getting this PR merged, I'm designing the real shuffler: a horizontally scalable sorting system. So. We have to live with this code for a few months, so let's make sure we feel good about it, but also know that this is all going away in a few months. 🤷‍♀ . # High Level Overview; - implement the shuffler as a single machine, multi-threaded service which buffers keys until the write phase of a shuffle is done, then sorts the keys, then serves them to clients.; - implement non-spark shuffling as: write records to `dbuf` and write pairs of (data key, dbuf key) to shuffler, then read back re-partitioned keys and fetch records from dbuf.; - I use SBT because the Akka examples use it, it's not obvious how to do this SBT assembly merging thing in Gradle; - I'm really not using Akka properly. There's all this DataSource stuff that I don't understand. I'll probably have to get this right to get good performance, but it doesn't seem critical now and the Akka docs are incredibly hard to understand.; - I turn the optimizer off in the tests because it often optimizes away shuffles into local sorts. There are some FIXMEs throughout the code that I would appreciate thoughts on.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8205:1416,test,tests,1416,https://hail.is,https://github.com/hail-is/hail/pull/8205,1,['test'],['tests']
Testability,"On Ubuntu 20.10, with Python 3.8.6 and hail 0.2.64 installed from pip, I get: ​I get `TypeError: an integer is required (got type bytes)` immediately upon importing hail. A full transcript is below. (pyve is an alias to create a python virtual env and activate it). ---. ```; snafu$ pyve; + python3.8 -m venv venv/3.8; + source venv/3.8/bin/activate; + pip install -U setuptools pip; Collecting setuptools; Using cached setuptools-54.1.2-py3-none-any.whl (785 kB); Collecting pip; Using cached pip-21.0.1-py3-none-any.whl (1.5 MB); Installing collected packages: setuptools, pip; Attempting uninstall: setuptools; Found existing installation: setuptools 44.0.0; Uninstalling setuptools-44.0.0:; Successfully uninstalled setuptools-44.0.0; Attempting uninstall: pip; Found existing installation: pip 20.1.1; Uninstalling pip-20.1.1:; Successfully uninstalled pip-20.1.1; Successfully installed pip-21.0.1 setuptools-54.1.2; (3.8) ✔ ~/sandbox/hail [master|𝚫8?2]; snafu$ pip install hail ipython; Collecting hail; Using cached hail-0.2.64-py3-none-any.whl (97.5 MB); Collecting ipython; Using cached ipython-7.21.0-py3-none-any.whl (784 kB); Collecting pandas<1.1.5,>=1.1.0; Using cached pandas-1.1.4-cp38-cp38-manylinux1_x86_64.whl (9.3 MB); Collecting python-json-logger==0.1.11; Using cached python_json_logger-0.1.11-py2.py3-none-any.whl; Collecting gcsfs==0.7.2; Using cached gcsfs-0.7.2-py2.py3-none-any.whl (22 kB); Collecting requests==2.22.0; Using cached requests-2.22.0-py2.py3-none-any.whl (57 kB); Collecting tabulate==0.8.3; Using cached tabulate-0.8.3-py3-none-any.whl; Collecting nest-asyncio; Using cached nest_asyncio-1.5.1-py3-none-any.whl (5.0 kB); Collecting parsimonious<0.9; Using cached parsimonious-0.8.1-py3-none-any.whl; Collecting pyspark<2.4.2,>=2.4; Using cached pyspark-2.4.1-py2.py3-none-any.whl; Collecting tqdm==4.42.1; Using cached tqdm-4.42.1-py2.py3-none-any.whl (59 kB); Collecting bokeh<2.0,>1.3; Using cached bokeh-1.4.0-py3-none-any.whl; Collecting Deprecated<1.3",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10197:933,sandbox,sandbox,933,https://hail.is,https://github.com/hail-is/hail/issues/10197,1,['sandbox'],['sandbox']
Testability,"On a test of 1-2 partitions with 5000 samples, this takes the second stage of a densify from 2 minutes down to 1.4 minutes (only loading GT).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6967:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/6967,1,['test'],['test']
Testability,"On certain occasions, the file inside the FASTA reader can be closed. It; is not yet understood why. Tests indicate that simply reopening the file; seems to resolve the issue when we run the appropriate exception. This also removes the need for SerializableReferenceSequenceFile, and so; deletes it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9436:101,Test,Tests,101,https://hail.is,https://github.com/hail-is/hail/pull/9436,1,['Test'],['Tests']
Testability,"One more time, with feeling! (was: #10072). - [x] (@tpoterba) a1f3b2a5c9 add fails_service_backend; - [ ] (@tpoterba, @cseed) dc0bee7ce1 [hail] introduce and use mktemp and mktempd; - [ ] (@tpoterba) 4b663be367 [hail] make is.hail.expr.ir.functions threadsafe; - [ ] (@tpoterba) d3c1f0987c [hail] fix use of row requiredness in lowerDistributedSort; - [ ] (@catoverdrive) aab6ba98be [query-service] handle void-typed IRs in query-service; - [ ] (@catoverdrive) a1619cff36 [query-service] make user cache thread-safe; - [ ] (@tpoterba) c315fcb0b1 [query-service] bugfix: preserve globals through a shuffle; - [ ] (@catoverdrive) 912c21f709 [shuffler] log ShuffleCodecSpec anytime it is created; - [x] (@daniel-goldstein) c2495837e7 [scala-lsm] bugfix: least key may equal greatest key; - [x] (@daniel-goldstein) 5fb3db703e [services] discovered new transient error; - [x] (@daniel-goldstein) 9cd0999938 [shuffler] more assertions in ShuffleClient; - [x] (@daniel-goldstein) a71a3c9b8c [shuffler] bugfix: shuffler needs a HailContext to decode loci; - [x] (@daniel-goldstein) 41b06aeaa8 [query-service] move hail.jar earlier in Dockerfile; - [x] (@daniel-goldstein) 8df4029698 [query-service] permit pod scaling and remove cpu limit; - [ ] (@catoverdrive) 0354e1f557 [query-service] simplify socket handling; - [x] (@jigold) 6690a4decc [batch] teach JVMJob where to find the hail configuration files; - [x] (@daniel-goldstein) ae2e3d2996 [query-service] switch to services team approved logging; - [ ] (@tpoterba) b18f86e647 [query-service] query workers need a hail context; - [ ] (@daniel-goldstein, @catoverdrive) 6d5d0b68af [query-service] use a UNIX Domain Socket for Py-Scala communication; - [ ] (@daniel-goldstein, @catoverdrive) 0d42df8b08 [query-service] run tests against query service; - [x] (@jigold) f9d361e686 [query-service] aiohttp.ClientSession must be created in async code; - [ ] (@cseed) c35f2e10e3 [query-service][hail][build.yaml] address miscellaneous comments from cotton; - [x]",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10100:650,log,log,650,https://hail.is,https://github.com/hail-is/hail/pull/10100,2,"['assert', 'log']","['assertions', 'log']"
Testability,"Only changes are as we discussed: rename/add notebook2 labels where appropriate. Tested in cluster, appears to work although the deployment is stuck in Desired == 1, so I may have missed one of the notebook labels, or maybe `make deploy` not enough (I find the makefile a bit confusing still). Describe shows `ReplicaFailure True FailedCreate`, will figure out tomorrow. cc @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5412:81,Test,Tested,81,https://hail.is,https://github.com/hail-is/hail/pull/5412,1,['Test'],['Tested']
Testability,Only test if changed,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4404:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/4404,1,['test'],['test']
Testability,"Open question: we're using ~20GiB on /prometheus for 15d. We request 150GiB (and get closer to 146GiB). Should we increase the storage to give ourselves more slack? Assuming linear scaling, 90d would use 120GiB (26GiB of slack). https://hail.zulipchat.com/#narrow/stream/300487-Hail-Batch-Dev/topic/Grafana.20retention.20period; ```; /prometheus $ df -h; Filesystem Size Used Available Use% Mounted on; overlay 94.3G 28.9G 65.3G 31% /; tmpfs 64.0M 0 64.0M 0% /dev; tmpfs 3.6G 0 3.6G 0% /sys/fs/cgroup; /dev/sdf 146.6G 18.9G 127.6G 13% /prometheus; /dev/sda1 94.3G 28.9G 65.3G 31% /etc/prometheus; /dev/sda1 94.3G 28.9G 65.3G 31% /etc/hosts; /dev/sda1 94.3G 28.9G 65.3G 31% /dev/termination-log; /dev/sda1 94.3G 28.9G 65.3G 31% /etc/hostname; /dev/sda1 94.3G 28.9G 65.3G 31% /etc/resolv.conf; shm 64.0M 4.0K 64.0M 0% /dev/shm; tmpfs 5.5G 12.0K 5.5G 0% /var/run/secrets/kubernetes.io/serviceaccount; tmpfs 3.6G 0 3.6G 0% /proc/acpi; tmpfs 64.0M 0 64.0M 0% /proc/kcore; tmpfs 64.0M 0 64.0M 0% /proc/keys; tmpfs 64.0M 0 64.0M 0% /proc/timer_list; tmpfs 3.6G 0 3.6G 0% /proc/scsi; tmpfs 3.6G 0 3.6G 0% /sys/firmware; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14194:690,log,log,690,https://hail.is,https://github.com/hail-is/hail/pull/14194,1,['log'],['log']
Testability,"Opening this PR and then closing it immediately. For reference when we decide to come back to this code. My testing script is here:. ```python3; #! /usr/bin/python. import hail as hl. #vcf = 'gs://my-bucket/vep/test_variant.vcf'; vcf = 'gs://my-bucket/vep/inputs/loftee_variant_grch37.vcf'; #vcf = 'gs://my-bucket/vep/inputs/loftee_variant_grch38.vcf'. hl.init(). #mt = hl.import_vcf(vcf, reference_genome='GRCh38'); mt = hl.import_vcf(vcf, reference_genome='GRCh37'); mt = hl.vep(mt, requester_pays_project='my-project', tolerate_parse_error=True); #mt.write('gs://my-bucket/vep/test-output-grch38.mt', overwrite=True); mt.write('gs://my-bucket/vep/test-output-grch37.mt', overwrite=True); ht = mt.rows(); print(ht.vep.collect()); print(mt.globals); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10454:108,test,testing,108,https://hail.is,https://github.com/hail-is/hail/pull/10454,3,['test'],"['test-output-', 'testing']"
Testability,"Operations for all interaction with blobs. This change ensures that QoB only uses Class A Operations when necessary. Inspired by @jigold 's file system improvement campaign, I pursued the avoidance of ""list"" operations. I anticipate this reduces flakiness in Azure (which is tracked in #13351) and cost in Azure. I enforced aiotools.fs terminology on hail.fs and Scala:. 1. `FileStatus`. Metadata about a blob or file. It does not know if a directory exists at this path. 2. `FileListEntry`. Metadata from a list operation. It knows if a directory exists at this path. Variable names were updated to reflect this distinction:. 1. `fileStatus` / `fileStatuses`. 2. `fle`/ `fles` / `fileListEntry` / `fileListEntries`, respectively. `listStatus` renamed to `listDirectory` for clarity. In both Azure and Google, `fileStatus` does not use a list operation. `fileListEntry` can be used when we must know if a directory exists. I just rewrote this from first principles because:; 1. In neither Google nor Azure did it check if the path was a directory and a file.; 2. In Google, if the directory entry wasn't in the first page, it would fail (NB: there are fifteen non-control characters in ASCII before `/`, if the page size is 15 or fewer, we'd miss the first entry with a `/` at the end).; 3. In Azure, we issued both a get and a list. There are now unit tests for this method. ---. 1. `copyMerge` and `concatenateFiles` previously used `O(N_FILES)` list operations, they now use `O(N_FILES)` get operations.; 2. Writers that used `exists` to check for a _SUCCESS file now use a get operation.; 3. Index readers, import BGEN, and import plink all now check file size with a get operation. That said, overall, the bulk of our Class A Operations are probably writes. fix test failures. passes tests. fixes. fix tests to not use fileStatus for folders. only file vs directory status matters. fix azure. azure dislikes %. finally get azure right. nix empty line. fix merge cruft. azure bug. lots of changes",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13883:1408,test,tests,1408,https://hail.is,https://github.com/hail-is/hail/pull/13883,4,['test'],"['test', 'tests']"
Testability,OrderedJoinDistinctRDD2 fails if the right side has no partitions (assertion failure in BinarySearch),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2876:67,assert,assertion,67,https://hail.is,https://github.com/hail-is/hail/issues/2876,1,['assert'],['assertion']
Testability,OrderedRVD assertion error,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3998:11,assert,assertion,11,https://hail.is,https://github.com/hail-is/hail/issues/3998,1,['assert'],['assertion']
Testability,OrderingSuite.testBinarySearchOnDict fails sporadically,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5630:14,test,testBinarySearchOnDict,14,https://hail.is,https://github.com/hail-is/hail/issues/5630,1,['test'],['testBinarySearchOnDict']
Testability,Organizational changes to benchmark,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4928:26,benchmark,benchmark,26,https://hail.is,https://github.com/hail-is/hail/pull/4928,1,['benchmark'],['benchmark']
Testability,"Our CI service should really be logging a JSON format the way batch does. Easy to change, need to use configure logging in Gear.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6701:32,log,logging,32,https://hail.is,https://github.com/hail-is/hail/issues/6701,2,['log'],['logging']
Testability,"Our secret cache fails on ~1 in 10000 jobs. I observed this while running some; large scale tests which will soon become standard PR tests. In anticipation of this,; I fixed the k8s_cache. In particular, note how *everyone* who wins the lock tries to; remove it from the dictionary; however, only *one* task can do that successfully. The new code avoids locks entirely. It is a bit longer because I eagerly remove; out of date keys when I see them and use a future to notify all waiter simultaneouly. I also updated memory to use this cache for user credentials.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11040:92,test,tests,92,https://hail.is,https://github.com/hail-is/hail/pull/11040,2,['test'],['tests']
Testability,"Our team is currently trying to run kinship analysis with [king()](https://hail.is/docs/0.2/methods/relatedness.html#hail.methods.king) on just under 110k samples. We have run this successfully in the past on 10k samples using a google cloud cluster with the following configuration. ```; hailctl dataproc start cluster --vep GRCh38 \; 	--requester-pays-allow-annotation-db \; 	--packages gnomad --requester-pays-allow-buckets gnomad-public-requester-pays \; 	--master-machine-type=n1-highmem-8 --worker-machine-type=n1-highmem-8 \; 	--num-workers=300	--num-secondary-workers=0 \; 	--worker-boot-disk-size=1000 \; 	--properties=dataproc:dataproc.logging.stackdriver.enable=true,dataproc:dataproc.monitoring.stackdriver.enable=true; ```; We are currently receiving a spark error when using this cluster for our larger dataset. ```; [Stage 10:=====> (69 + 656) / 729]; raise err; File ""/opt/conda/default/lib/python3.8/site-packages/hail/backend/py4j_backend.py"", line 98, in execute; result_tuple = self._jbackend.executeEncode(jir, stream_codec, timed); File ""/usr/lib/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py"", line 1304, in __call__; File ""/opt/conda/default/lib/python3.8/site-packages/hail/backend/py4j_backend.py"", line 31, in deco; raise fatal_error_from_java_error_triplet(deepest, full, error_id) from None; hail.utils.java.FatalError: SparkException: Job aborted due to stage failure: Task 582 in stage 10.0 failed 20 times, most recent failure: Lost task 582.19 in stage 10.0 (TID 461381) (cluster-w-144.c.project-.internal executor 3568): ExecutorLostFailure (executor 3568 exited caused by one of the running tasks) Reason: Executor heartbeat timed out after 128936 ms; Driver stacktrace:. Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 582 in stage 10.0 failed 20 times, most recent failure: Lost task 582.19 in stage 10.0 (TID 461381) (cluster-w-144.c.gbsc-project.internal executor 3568): ExecutorLostFailure (executor 3568 e",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12290:646,log,logging,646,https://hail.is,https://github.com/hail-is/hail/issues/12290,1,['log'],['logging']
Testability,Our users will interact with a KeyTable so the tests should too.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2264:47,test,tests,47,https://hail.is,https://github.com/hail-is/hail/pull/2264,1,['test'],['tests']
Testability,"PDATE; ON DUPLICATE KEY UPDATE `usage` = aggregated_billing_project_user_resources_v3.`usage` + msec_diff_rollup * quantity. *** (1) HOLDS THE LOCK(S):; RECORD LOCKS space id 351 page no 4 n bits 248 index PRIMARY of table `dgoldste-batch`.`instances_free_cores_mcpu` trx id 2486515 lock_mode X locks rec but not gap; Record lock, heap no 176 PHYSICAL RECORD: n_fields 4; compact format; info bits 0; 0: len 30; hex 62617463682d776f726b65722d64676f6c647374652d7374616e64617264; asc batch-worker-dgoldste-standard; (total 36 bytes);; 1: len 6; hex 00000025f0ee; asc % ;;; 2: len 7; hex 01000000a90a9b; asc ;;; 3: len 4; hex 80000fa0; asc ;;. *** (1) WAITING FOR THIS LOCK TO BE GRANTED:; RECORD LOCKS space id 376 page no 8 n bits 408 index PRIMARY of table `dgoldste-batch`.`aggregated_billing_project_user_resources_v3` trx id 2486515 lock_mode X locks rec but not gap waiting; Record lock, heap no 228 PHYSICAL RECORD: n_fields 7; compact format; info bits 0; 0: len 4; hex 74657374; asc test;;; 1: len 8; hex 64676f6c64737465; asc dgoldste;;; 2: len 4; hex 80000009; asc ;;; 3: len 4; hex 80000034; asc 4;;; 4: len 6; hex 00000025f0cd; asc % ;;; 5: len 7; hex 810000021b01cd; asc ;;; 6: len 8; hex 80000000001b09e0; asc ;;. *** (2) TRANSACTION:; TRANSACTION 2486477, ACTIVE 0 sec starting index read; mysql tables in use 27, locked 27; LOCK WAIT 47 lock struct(s), heap size 8312, 215 row lock(s), undo log entries 211; MySQL thread id 682, OS thread handle 140330866251520, query id 4746389 10.32.3.39 dgoldste-batch-user executing; INSERT INTO aggregated_job_group_resources_v3 (batch_id, job_group_id, resource_id, token, `usage`); SELECT attempt_resources.batch_id,; job_group_self_and_ancestors.ancestor_id,; attempt_resources.deduped_resource_id,; NAME_CONST('rand_token',189),; NAME_CONST('msec_diff_rollup',1671) * quantity; FROM attempt_resources; LEFT JOIN jobs ON attempt_resources.batch_id = jobs.batch_id AND attempt_resources.job_id = jobs.job_id; LEFT JOIN job_group_self_and_ancest",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14380:2470,test,test,2470,https://hail.is,https://github.com/hail-is/hail/issues/14380,1,['test'],['test']
Testability,"PL:Array[Int32]}]}},rows,../globals/rows,../references,false)), WriteMetadata(MakeStruct(ArrayBuffer((cols,GetField(Ref(__iruid_368,struct{filePath: str, partitionCounts: int64}),partitionCounts)), (rows,Ref(__iruid_376,array<int64>)))),MatrixSpecWriter(gs://danking/workshop-test/1kg.mt,Matrix{global:Struct{},col_key:[s],col:Struct{s:String},row_key:[[locus,alleles]],row:Struct{locus:Locus(GRCh37),alleles:Array[String],rsid:String,qual:Float64,filters:Set[String],info:Struct{AC:Array[Int32],AF:Array[Float64],AN:Int32,BaseQRankSum:Float64,ClippingRankSum:Float64,DP:Int32,DS:Boolean,FS:Float64,HaplotypeScore:Float64,InbreedingCoeff:Float64,MLEAC:Array[Int32],MLEAF:Array[Float64],MQ:Float64,MQ0:Int32,MQRankSum:Float64,QD:Float64,ReadPosRankSum:Float64,set:String}},entry:Struct{GT:Call,AD:Array[Int32],DP:Int32,GQ:Int32,PL:Array[Int32]}},rows/rows,globals/rows,cols/rows,entries/rows,references,true))))))))),RelationalWriter(gs://danking/workshop-test/1kg.mt/entries,false,None)),RelationalWriter(gs://danking/workshop-test/1kg.mt/rows,false,None)),RelationalWriter(gs://danking/workshop-test/1kg.mt/cols,false,None)),RelationalWriter(gs://danking/workshop-test/1kg.mt/globals,false,None)),RelationalWriter(gs://danking/workshop-test/1kg.mt,true,Some((references,Set(GRCh37)))))); 	at scala.collection.MapLike$class.default(MapLike.scala:228); 	at scala.collection.AbstractMap.default(Map.scala:59); 	at scala.collection.mutable.HashMap.apply(HashMap.scala:65); 	at is.hail.expr.ir.Memo.lookup(RefEquality.scala:38); 	at is.hail.expr.ir.Memo.lookup(RefEquality.scala:37); 	at is.hail.expr.ir.Memo.apply(RefEquality.scala:40); 	at is.hail.expr.ir.Requiredness.lookup(Requiredness.scala:41); 	at is.hail.expr.ir.Requiredness$$anonfun$analyzeIR$16.apply(Requiredness.scala:616); 	at is.hail.expr.ir.Requiredness$$anonfun$analyzeIR$16.apply(Requiredness.scala:615); 	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59); 	at scala.collection.mutable.ArrayBuffer.forea",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9856:18762,test,test,18762,https://hail.is,https://github.com/hail-is/hail/issues/9856,1,['test'],['test']
Testability,"PRing for test suite, but it's mostly working. . Todo:. - [x] Optimization for already sorted tables; - [x] ~~Handle sort by descending~~ (deferred to subsequent PR); - [x] Handle tables with no partitions",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11050:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/11050,1,['test'],['test']
Testability,"PRing to test, hopefully will fix Akhil's bug. . Akhil's stack trace top:. ```; Java stack trace:; java.lang.RuntimeException: invoke __m684btree_insert: arg 2: type mismatch:; got +PBoolean; expected PBoolean; 	at is.hail.expr.ir.EmitCodeBuilder$$anonfun$1.apply(EmitCodeBuilder.scala:132); 	at is.hail.expr.ir.EmitCodeBuilder$$anonfun$1.apply(EmitCodeBuilder.scala:114); 	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241); 	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241); 	at scala.collection.immutable.Range.foreach(Range.scala:160); 	at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241); 	at scala.collection.AbstractTraversable.flatMap(Traversable.scala:104); 	at is.hail.expr.ir.EmitCodeBuilder._invoke(EmitCodeBuilder.scala:114); 	at is.hail.expr.ir.EmitCodeBuilder.invokeCode(EmitCodeBuilder.scala:164); 	at is.hail.expr.ir.agg.AppendOnlyBTree.is$hail$expr$ir$agg$AppendOnlyBTree$$insert(AppendOnlyBTree.scala:231); 	at is.hail.expr.ir.agg.AppendOnlyBTree$$anonfun$getF$1$$anonfun$is$hail$expr$ir$agg$AppendOnlyBTree$$anonfun$$insertOrGetAt$1$1.apply$mcV$sp(AppendOnlyBTree.scala:245); 	at is.hail.asm4s.CodeBuilderLike$class.ifx(CodeBuilder.scala:83); 	at is.hail.expr.ir.EmitCodeBuilder.ifx(EmitCodeBuilder.scala:37); 	at is.hail.expr.ir.agg.AppendOnlyBTree$$anonfun$getF$1.is$hail$expr$ir$agg$AppendOnlyBTree$$anonfun$$insertOrGetAt$1(AppendOnlyBTree.scala:244); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10133:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/10133,1,['test'],['test']
Testability,"P_Ti_count_Hom=hl.agg.count_where(; (hl.is_transition(mt.alleles[0], mt.alleles[1])) & (mt.GT.is_hom_var()); ),; SNP_Tv_count_Hom=hl.agg.count_where(; (hl.is_transversion(mt.alleles[0], mt.alleles[1])) & (mt.GT.is_hom_var()); ), ; ### Indel counts; INDEL_Ins_count_Het=hl.agg.count_where(; (hl.is_insertion(mt.alleles[0], mt.alleles[1])) & (mt.GT.is_het_ref()); ),; INDEL_Del_count_Het=hl.agg.count_where(; (hl.is_deletion(mt.alleles[0], mt.alleles[1])) & (mt.GT.is_het_ref()); ),; INDEL_Ins_count_Hom=hl.agg.count_where(; (hl.is_insertion(mt.alleles[0], mt.alleles[1])) & (mt.GT.is_hom_var()); ),; INDEL_Del_count_Hom=hl.agg.count_where(; (hl.is_deletion(mt.alleles[0], mt.alleles[1])) & (mt.GT.is_hom_var()); ),; )) for interval_name in interval_names}. mt2 = mt.annotate_cols(**annotate_dict); return mt2; ```; ```; interval_table_dict = dict(; zip(interval_names, [hl.is_defined(interval_table[filtered_mt.locus]) for interval_table in interval_tables]); ); ```. ### Version. 0.2.126. ### Relevant log output. ```shell; ---------------------------------------------------------------------------; RemoteDisconnected Traceback (most recent call last); File /opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:703, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw); 702 # Make the request on the httplib connection object.; --> 703 httplib_response = self._make_request(; 704 conn,; 705 method,; 706 url,; 707 timeout=timeout_obj,; 708 body=body,; 709 headers=headers,; 710 chunked=chunked,; 711 ); 713 # If we're going to release the connection in ``finally:``, then; 714 # the response doesn't need to know about the connection. Otherwise; 715 # it will also try to release it and we'll have a double-release; 716 # mess. File /opt/conda/lib/python3.10/site-packages/urllib3/connectionpool.py:449, in HTTPConnectionPool._make_request(self, conn, method, url, ti",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13960:3587,log,log,3587,https://hail.is,https://github.com/hail-is/hail/issues/13960,1,['log'],['log']
Testability,"Pandas missingness is crazy. `pd.isna` tells you if something is ""missing"", which means either `NaN`, or a special `NA` sentinel value. For floats they use `NaN`, and specifically for the pandas special `Int64DType` and `Int32DType` and nothing else they use this `NA` value. They don't have an easy way to distinguish between `NA` and `NaN`, so I first check if something `isna`, then check if it's a `float` to differentiate between the cases. . They also don't have a way to test if something is a `Int32DType` for some reason. So I use `is_int64_dtype`, and if that fails I fall back to `is_integer_dtype`, which is true for both `Int64DType` and `Int32DType`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11401:478,test,test,478,https://hail.is,https://github.com/hail-is/hail/pull/11401,1,['test'],['test']
Testability,Part 1 of chipping away at config.mk. This puts the two make targets for building the vm image in GCP into a single script. It loads variables that used to come from config.mk from kubernetes. Added a convenience function to offer a confirmation prompt before running the script. Here's an example:. ```; (hailenv) dgoldste@wmce3-cb7 hail % $HAIL/batch/gcp-create-worker-image.sh; Building image with properties:; Version: 12; Project: hail-vdc; Zone: us-central1-a; Are you sure? [y/N] n; (hailenv) dgoldste@wmce3-cb7 hail %; ```. Tested by running with a high image version number (3010 to be precise),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11327:532,Test,Tested,532,https://hail.is,https://github.com/hail-is/hail/pull/11327,1,['Test'],['Tested']
Testability,"Patrick -- can you give this a careful look over? Once we're happy with it, I'll redo the benchmarking as a last sanity check.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12629:90,benchmark,benchmarking,90,https://hail.is,https://github.com/hail-is/hail/pull/12629,1,['benchmark'],['benchmarking']
Testability,"Permits the big aggregate benchmarks to run...slowly:. ```; 2019-10-05 10:58:08,110: INFO: [1/2] Running table_big_aggregate_compilation...; 2019-10-05 10:58:24,685: INFO: burn in: 16.57s; 2019-10-05 10:58:28,664: INFO: run 1: 3.98s; 2019-10-05 10:58:32,558: INFO: run 2: 3.89s; 2019-10-05 10:58:36,332: INFO: run 3: 3.77s; 2019-10-05 10:58:36,335: INFO: [2/2] Running table_big_aggregate_compile_and_execute...; 2019-10-05 10:58:42,972: INFO: burn in: 6.64s; 2019-10-05 10:58:48,677: INFO: run 1: 5.71s; 2019-10-05 10:58:54,358: INFO: run 2: 5.68s; 2019-10-05 10:59:00,091: INFO: run 3: 5.73s; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7201:26,benchmark,benchmarks,26,https://hail.is,https://github.com/hail-is/hail/pull/7201,1,['benchmark'],['benchmarks']
Testability,"Pick a backwards compatibility test table, `1.5.0/6.ht` is the simplest one. ```; In [2]: ht = hl.read_table('hail/src/test/resources/backward_compatability/1.5.0/table/6.ht/'. In [3]: ht.aggregate(hl.agg.collect(ht.nd)); Out[3]:; [array([[0, 1, 2, 3, 4],; [5, 6, 7, 8, 9]], dtype=int32),; array([[0, 1, 2, 3, 4],; [5, 6, 7, 8, 9]], dtype=int32),; array([[0, 1, 2, 3, 4],; [5, 6, 7, 8, 9]], dtype=int32),; array([[0, 1, 2, 3, 4],; [5, 6, 7, 8, 9]], dtype=int32),; array([[0, 1, 2, 3, 4],; [5, 6, 7, 8, 9]], dtype=int32)]. In [4]: ht.select('nd').show(); +-------+----------------------------------------------------------------+; | idx | nd |; +-------+----------------------------------------------------------------+; | int32 | ndarray<int32, 2> |; +-------+----------------------------------------------------------------+; | 0 | ndarray{shape=(2, 5), data=[[0, 5, 1, 6, 2], [7, 3, 8, 4, 9]]} |; | 1 | ndarray{shape=(2, 5), data=[[0, 5, 1, 6, 2], [7, 3, 8, 4, 9]]} |; | 2 | ndarray{shape=(2, 5), data=[[0, 5, 1, 6, 2], [7, 3, 8, 4, 9]]} |; | 3 | ndarray{shape=(2, 5), data=[[0, 5, 1, 6, 2], [7, 3, 8, 4, 9]]} |; | 4 | ndarray{shape=(2, 5), data=[[0, 5, 1, 6, 2], [7, 3, 8, 4, 9]]} |; +-------+----------------------------------------------------------------+; ```. The first result looks more correct to mine eyes.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9640:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/issues/9640,2,['test'],['test']
Testability,"Picking up where #13776 left off. CHANGELOG: improved speed of reading hail format datasets from disk. This PR speeds up decoding arrays in two main ways:; * instead of calling `arrayType.isElementDefined(array, i)` on every single array element, which expands to; ```scala; val b = aoff + lengthHeaderBytes + (i >> 3); !((Memory.loadByte(b) & (1 << (i & 7).toInt)) != 0); ```; process elements in groups of 64, and load the corresponding long of missing bits once; * once we have a whole long of missing bits, we can be smarter than branching on each bit. After flipping to get `presentBits`, we use the following psuedocode to extract the positions of the set bits, with time proportional to the number of set bits:; ```; while (presentBits != 0) {; val idx = java.lang.Long.numberOfTrailingZeroes(presentBits); // do something with idx; presentBits = presentBits & (presentBits - 1) // unsets the rightmost set bit; }; ```. To avoid needing to handle the last block of 64 elements differently, this PR changes the layout of `PCanonicalArray` to ensure the missing bits are always padded out to a multiple of 64 bits. They were already padded to a multiple of 32, and I don't expect this change to have much of an effect. But if needed, blocking by 32 elements instead had very similar performance in my benchmarks. I also experimented with unrolling loops. In the non-missing case, this is easy. In the missing case, I tried using `if (presentBits.bitCount >= 8)` to guard an unrolled inner loop. In both cases, unrolling was if anything slower. Dan observed benefit from unrolling, but that was combined with the first optimization above (not loading a bit from memory every element), which I beleive was the real source of improvement.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13787:1306,benchmark,benchmarks,1306,https://hail.is,https://github.com/hail-is/hail/pull/13787,1,['benchmark'],['benchmarks']
Testability,Please check the change log and git history to determine if removing persist from VEP.scala was intentional. Please respond to discuss forum upon completion. . https://discuss.hail.is/t/parallel-hail-tasks/865/16?u=danking. Dice says John.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8147:24,log,log,24,https://hail.is,https://github.com/hail-is/hail/issues/8147,1,['log'],['log']
Testability,"Pool$.scoped(RegionPool.scala:17); 	at is.hail.backend.ExecuteContext$.scoped(ExecuteContext.scala:59); 	at is.hail.backend.spark.SparkBackend.withExecuteContext(SparkBackend.scala:339); 	at is.hail.backend.spark.SparkBackend.$anonfun$executeEncode$1(SparkBackend.scala:483); 	at is.hail.utils.ExecutionTimer$.time(ExecutionTimer.scala:52); 	at is.hail.backend.spark.SparkBackend.executeEncode(SparkBackend.scala:482); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:282); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:238); 	at java.lang.Thread.run(Thread.java:750). Hail version: 0.2.107-2387bb00ceee; Error summary: SparkException: Job aborted due to stage failure: Task 0 in stage 1.0 failed 4 times, most recent failure: Lost task 0.4 in stage 1.0 (TID 10) (all-of-us-1774-w-0.c.terra-vpc-sc-23dfb1a3.internal executor 7): ExecutorLostFailure (executor 7 exited caused by one of the running tasks) Reason: Container from a bad node: container_e01_1690206305672_0001_01_000007 on host: all-of-us-1774-w-0.c.terra-vpc-sc-23dfb1a3.internal. Exit status: 137. Diagnostics: [2023-07-24 13:52:49.515]Container killed on request. Exit code is 137; [2023-07-24 13:52:49.517]Container exited with a non-zero exit code 137. ; [2023-07-24 13:52:49.518]Killed by external signal; .; Driver stacktrace:; ```; [hail-20230724-1347-0.2.107-2387bb00ceee.log](https://github.com/hail-is/hail/files/12146671/hail-20230724-1347-0.2.107-2387bb00ceee.log)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13287:12931,log,log,12931,https://hail.is,https://github.com/hail-is/hail/issues/13287,2,['log'],['log']
Testability,"Port `logreg` and `lmmreg` to api2. The tests in api1 weren't doing anything that the doctests don't already do, so I haven't added any more python tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2783:6,log,logreg,6,https://hail.is,https://github.com/hail-is/hail/pull/2783,3,"['log', 'test']","['logreg', 'tests']"
Testability,"Ported support (from t2d branch) for filtering variants with symbolic alleles, and added a test.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/235:91,test,test,91,https://hail.is,https://github.com/hail-is/hail/pull/235,1,['test'],['test']
Testability,Ported trio_matrix test to 0.2,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3147:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/3147,1,['test'],['test']
Testability,"Pretty rough, not yet hooked into anything, but I wrote a test. This doesn't deal with the question of region management at the jvm/c++ interface, but it lays out a basic wrapper for passing iterators through c++.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4729:58,test,test,58,https://hail.is,https://github.com/hail-is/hail/pull/4729,1,['test'],['test']
Testability,Pretty() should not print the json representation of Literals to the log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4907:69,log,log,69,https://hail.is,https://github.com/hail-is/hail/issues/4907,1,['log'],['log']
Testability,Prevent read if test isn't run,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1817:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/1817,1,['test'],['test']
Testability,"Previously `Emit(?:Stream)?$` would emit let bindings recursively, regardless of if that binding was used.; If a stream is not used, `Emit(?:Stream)?$` would define its missing labels, making emission recursive.; This can lead to stack overflows for large numbers of let-bindings (and does so for the benchmark benchmark `matrix-multi-write-nothing`). By not emitting unused streams, we can make let-binding emission iterative.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14163:301,benchmark,benchmark,301,https://hail.is,https://github.com/hail-is/hail/pull/14163,2,['benchmark'],['benchmark']
Testability,"Previously we get a stack trace without the http response body. I tested this; locally on a branch that does not exist:. # hailctl dev deploy --branch danking/hail:shuffler-deploymefdsafdsa --steps test_shuffler; HTTP Response code was 400; error finding {""repo"": {""owner"": ""danking"", ""name"": ""hail""}, ""name"": ""shuffler-deploymefdsafdsa""} at GitHub",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8846:66,test,tested,66,https://hail.is,https://github.com/hail-is/hail/pull/8846,1,['test'],['tested']
Testability,"Previously, MatrixMapRows was calling into an IR-generated function for each element. Now we aggregate the entire row from within Python. On a 6-aggregator benchmark on a shard of gnomAD, this improved things about 50% (1m59 => 1m02). Some notable changes:; - I added a Begin for sequencing void-type IR,; - I added ArrayFor for looping over arrays (@danking); - I added a SeqOp that represents calling the RegionValueAggregator in seqOp in the IR after extracting aggregators, it holds the index of the aggregator to call seqsOp on, since there might be multiple,; - added Void literal (which I didn't end up using, but I left it in for now),; - TAggreable symbol table is no longer used in compiling the extracted aggregators. The arguments need to specified explicitly and otherwise it is just another function (but takes an extra special argument, the array of RVAggregators),. This suggests some additional improvements/simplifications to the aggregator interface that I will write up on the dev forum.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3422:156,benchmark,benchmark,156,https://hail.is,https://github.com/hail-is/hail/pull/3422,1,['benchmark'],['benchmark']
Testability,"Previously, accidentally passing an empty string to the list of missing values throws an inscrutable assertion error. This checks in python.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11078:101,assert,assertion,101,https://hail.is,https://github.com/hail-is/hail/pull/11078,1,['assert'],['assertion']
Testability,"Previously, the BlockMatrix IR had nodes for reading and writing that only covered the BlockMatrix part file format. Implemented readers and writers for both native and binary file formats (compatible with numpy) refactored read/write nodes, and implemented `tofile` and `fromfile` BlockMatrix methods in terms of the IR. Also hardcoded the front end default block size so now tests running IO/basic algebra should be able to run on the service.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5392:377,test,tests,377,https://hail.is,https://github.com/hail-is/hail/pull/5392,1,['test'],['tests']
Testability,"Previously, we always made the stream into an array, then copied the array into the ndarray. Now we just insert the stream directly into the ndarray. This saves memory (~7% on the linear regression rows benchmark), and had no noticeable effect on speed in my experiments.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10554:203,benchmark,benchmark,203,https://hail.is,https://github.com/hail-is/hail/pull/10554,1,['benchmark'],['benchmark']
Testability,Print external URL in batch submission log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11658:39,log,log,39,https://hail.is,https://github.com/hail-is/hail/pull/11658,1,['log'],['log']
Testability,"Prior to Kubernetes 1.24, when a `ServiceAccount` called `sa-foo` is created, a corresponding `Secret` containing a token for the service account is created call `sa-foo-token-xxxx`. The `ServiceAccount` resource contains the name of the corresponding secret, and to use the service account in Batch the batch-driver discovers the secret name from the service account resource. In [Kubernetes >=1.24](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.24.md#urgent-upgrade-notes), creating a `ServiceAccount` no longer automatically creates a corresponding token secret. Our cluster auto-upgraded and PRs are failing because batch cannot find the secret field in the service account resource for SAs in test namespaces. From here on out, we need to make those token secrets ourselves. I explicitly added a token secret for the service accounts that need it and changed the batch-driver to handle both old and new service accounts. I tested this in my own project since I already had an instance of Hail Batch / CI up and running. It was running on 1.23 so did not encounter this issue, but I:; 1. Upgraded the cluster to 1.24; 2. Dev deployed and received the same error that we're now seeing in [PRs](https://ci.hail.is/batches/7103889/jobs/14); 3. Manually redeployed batch and CI (from this branch); 4. Dev deployed successfully",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12745:727,test,test,727,https://hail.is,https://github.com/hail-is/hail/pull/12745,2,['test'],"['test', 'tested']"
Testability,Prometheus was using quite a lot of resources in the test namespaces so this should fix that.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11903:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/11903,1,['test'],['test']
Testability,"Proxy from gateway to router. Logic for proxying web sockets came from here: https://stackoverflow.com/a/15198581/431282. The Let's Encrypt stuff here isn't used anymore, not since we put letsencrypt in its own subproject. I tested this by hand and then live on the cluster (!) and it's working fine.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5873:30,Log,Logic,30,https://hail.is,https://github.com/hail-is/hail/pull/5873,2,"['Log', 'test']","['Logic', 'tested']"
Testability,Put an example of downloading logs from google cloud in `Hail on the Cloud`,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8005:30,log,logs,30,https://hail.is,https://github.com/hail-is/hail/issues/8005,1,['log'],['logs']
Testability,Put test logs in /tmp/hail.log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4107:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/4107,3,"['log', 'test']","['log', 'logs', 'test']"
Testability,Pytest sometimes uses a background thread to collect tests. That interacts badly; with asyncio. We avoid this by explicitly managing the event loop.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11933:53,test,tests,53,https://hail.is,https://github.com/hail-is/hail/pull/11933,1,['test'],['tests']
Testability,"Python 3.8 [added a validate parameter](https://docs.python.org/3/library/logging.html#logging.Formatter) to the stdlib Formatter which is on by default and doesn't like our format strings, which I guess python 3.7 is just too lenient about? Anyway I updated the format string to match the docs' recommendation.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11839:74,log,logging,74,https://hail.is,https://github.com/hail-is/hail/pull/11839,2,['log'],['logging']
Testability,"Python CLI tools like `hailctl` suffer from slow startup times, which infuriate me. This is in part because the first thing that happens is python has to recursively load all imported packages, since imports are traditionally done at the top-level. Very conveniently, setting the `PYTHONPROFILEIMPORTTIME` environment variable will cause python to emit a profile to stderr, which you can visualize with tools like [tuna](https://github.com/nschloe/tuna). So running. ```; PYTHONPROFILEIMPORTTIME=1 hailctl dev config show 2> profile.log; tuna profile.log; ```. gave me this. <img width=""1576"" alt=""Screen Shot 2022-01-28 at 2 58 28 PM"" src=""https://user-images.githubusercontent.com/24440116/151614364-d57a4478-1516-4397-ac72-4f2b9c6c081b.png"">. showing that importing `aiohttp` is responsible for half the time it takes me to run `hailctl dev config show`, which is literally just printing a local file!! There's no reason this shouldn't be instantaneous, but reducing it to ~300ms, which this change did, is fine enough for me for now. Generally people don't care about import time because most applications are long-lived and what does a few seconds matter, so `pylint` by default wants us to put imports at the top level. I would say this is a valid exception.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11293:533,log,log,533,https://hail.is,https://github.com/hail-is/hail/pull/11293,2,['log'],['log']
Testability,"Python integration tests often fail waiting to allocate highmem instances for worker jobs.; Since we control both APIs, it seems reasonable to move the testing burdon for vm allocation onto batch and use contract testing on the query driver side. These contract tests cover:; - uploading the the ServiceBackendRPConfig to remote storage in python; - reading that config and forwarding the relevant sections to the batch service in scala. Admittedly these are fairly busy tests and make bare a lot of lower-level implementation details. While I believe these tests are good to have, they perhaps don't warrant the time investment to properly refactor for cleaner mocking. Should details of the main implementation change, these will likely break. I've made tweaks to the python unittest annotations for backend test filtering. The old system skipped tests after all required fixtures had been acquired. Using `@pytest.mark.{feature}` allows us to exclude tests before fixtures are setup as well as add additional setup/teardown code.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14512:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/14512,10,"['mock', 'test']","['mocking', 'test', 'testing', 'tests']"
Testability,Python test fix,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2538:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/pull/2538,1,['test'],['test']
Testability,"QOL fix. Allow the cmd pre elemet to be resized by drag aand drop by the user. This keeps the elment compact by default, but lets the user not read the cmd though a letter box. . Tested by editing the style in the browser.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12743:179,Test,Tested,179,https://hail.is,https://github.com/hail-is/hail/pull/12743,1,['Test'],['Tested']
Testability,"Quality of life improvement, wrapper around saving an ndarray and loading through numpy. Most changes are in the tests which previously could only extract elements from ndarrays to assert the transformation worked.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6020:113,test,tests,113,https://hail.is,https://github.com/hail-is/hail/pull/6020,2,"['assert', 'test']","['assert', 'tests']"
Testability,"RES ===================================; _______________ ServiceTests.test_python_job_incorrect_signature _______________. self = <test.hailtop.batch.test_batch.ServiceTests testMethod=test_python_job_incorrect_signature>. def setUp(self):; # https://stackoverflow.com/questions/42332030/pytest-monkeypatch-setattr-inside-of-test-class-method; self.monkeypatch = MonkeyPatch(); ; self.backend = ServiceBackend(); ; remote_tmpdir = get_remote_tmpdir('hailtop_test_batch_service_tests'); if not remote_tmpdir.endswith('/'):; remote_tmpdir += '/'; self.remote_tmpdir = remote_tmpdir + str(uuid.uuid4()) + '/'; ; if remote_tmpdir.startswith('gs://'):; match = re.fullmatch('gs://(?P<bucket_name>[^/]+).*', remote_tmpdir); assert match; self.bucket = match.groupdict()['bucket_name']; else:; assert remote_tmpdir.startswith('hail-az://'); if remote_tmpdir.startswith('hail-az://'):; match = re.fullmatch('hail-az://(?P<storage_account>[^/]+)/(?P<container_name>[^/]+).*', remote_tmpdir); assert match; storage_account, container_name = match.groups(); else:; assert remote_tmpdir.startswith('https://'); match = re.fullmatch('https://(?P<storage_account>[^/]+).blob.core.windows.net/(?P<container_name>[^/]+).*', remote_tmpdir); assert match; storage_account, container_name = match.groups(); self.bucket = f'{storage_account}/{container_name}'; ; self.cloud_input_dir = f'{self.remote_tmpdir}batch-tests/resources'; ; token = uuid.uuid4(); self.cloud_output_path = f'/batch-tests/{token}'; self.cloud_output_dir = f'{self.remote_tmpdir}{self.cloud_output_path}'; ; self.router_fs = RouterAsyncFS(); ; > if not self.sync_exists(f'{self.remote_tmpdir}batch-tests/resources/hello.txt'):. ../test/hailtop/batch/test_batch.py:533: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; ../test/hailtop/batch/test_batch.py:544: in sync_exists; return async_to_blocking(self.router_fs.exists(url)); utils/utils.py:160: in async_to_blocking; return loop.run_until_complete(task); /us",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13997:1049,assert,assert,1049,https://hail.is,https://github.com/hail-is/hail/issues/13997,1,['assert'],['assert']
Testability,RR: https://github.com/hail-is/hail/issues/13261. Grouping asserts of distributed `BlockMatrix` queries via `BatchAssert` lead to repeated timeout failures during tests that used the batch-service backend.; This change removes all `BatchAssert`s from `test_linalg.py`. It uses `pytest.mark.parameterize` to gain parallelism in test execution from the test driver.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13348:59,assert,asserts,59,https://hail.is,https://github.com/hail-is/hail/pull/13348,4,"['assert', 'test']","['asserts', 'test', 'tests']"
Testability,RVD physical key bug: assertion error if physical key field is not part of requested type,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4874:22,assert,assertion,22,https://hail.is,https://github.com/hail-is/hail/issues/4874,1,['assert'],['assertion']
Testability,RVD.scala:736); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(OrderedRVD.scala:730); at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(OrderedRVD.scala:736); at is.hail.rvd.OrderedRVD$$anonfun$apply$6$$anon$5.next(OrderedRVD.scala:730); at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); at scala.collection.Iterator$class.foreach(Iterator.scala:893); at scala.collection.AbstractIterator.foreach(Iterator.scala:1336); at scala.collection.TraversableOnce$class.foldLeft(TraversableOnce.scala:157); at scala.collection.AbstractIterator.foldLeft(Iterator.scala:1336); at scala.collection.TraversableOnce$class.aggregate(TraversableOnce.scala:214); at scala.collection.AbstractIterator.aggregate(Iterator.scala:1336); at org.apache.spark.rdd.RDD$$anonfun$aggregate$1$$anonfun$22.apply(RDD.scala:1113); at org.apache.spark.rdd.RDD$$anonfun$aggregate$1$$anonfun$22.apply(RDD.scala:1113); at org.apache.spark.SparkContext$$anonfun$33.apply(SparkContext.scala:2118); at org.apache.spark.SparkContext$$anonfun$33.apply(SparkContext.scala:2118); at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87); at org.apache.spark.scheduler.Task.run(Task.scala:108); at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:335); at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); at java.lang.Thread.run(Thread.java:748). Hail version: devel-6bb4670; Error summary: AssertionError: assertion failed; ERROR: (gcloud.dataproc.jobs.submit.pyspark) Job [b09ec92a-49f4-4d16-ad6d-efc5a5805e92] entered state [ERROR] while waiting for [DONE].; Submitting to cluster 'robert1'...; gcloud command:; gcloud dataproc jobs submit pyspark hail2/05_variant_qc.py \; --cluster=robert1 \; --files= \; --properties= \; -- \; onep; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3063:21968,Assert,AssertionError,21968,https://hail.is,https://github.com/hail-is/hail/issues/3063,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"Rahul reported this failing on the following gnomad pipeline:. ```; import hail as hl; from gnomad.utils.vep import process_consequences; from gnomad.resources.grch37 import gnomad. gnomad_v2_exomes = gnomad.public_release(""exomes""); ht_exomes = gnomad_v2_exomes.ht(); ht_exomes_proc = process_consequences(ht_exomes); ht_exomes_proc._force_count(); ```. No test case included, but this kind of error will be impossible soon; (when requiredness exists on EmitType, not SType/PType).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10286:358,test,test,358,https://hail.is,https://github.com/hail-is/hail/pull/10286,1,['test'],['test']
Testability,"Ran:; ```; >>> eval_expr(functions.binom_test(5, 10, 0.5, 'less')); ```; expected:; ```; 0.6230468749999999; ```; got:. ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-62-da000343a1bc> in <module>(); ----> 1 eval_expr(functions.binom_test(5, 10, 0.5, 'less')). <decorator-gen-523> in binom_test(x, n, p, alternative). /Users/konradk/Dropbox/src/python/hail/typecheck/check.pyc in _typecheck(f, *args, **kwargs); 468 def _typecheck(f, *args, **kwargs):; 469 args_, kwargs_ = check_all(f, args, kwargs, checkers, is_method=False); --> 470 return f(*args_, **kwargs_); 471; 472 return decorator(_typecheck). /Users/konradk/Dropbox/src/python/hail/expr/functions.pyc in binom_test(x, n, p, alternative); 1144 p-value.; 1145 """"""; -> 1146 return _func(""binomTest"", TFloat64(), x, n, p, alternative); 1147; 1148 @typecheck(x=expr_numeric, df=expr_numeric). /Users/konradk/Dropbox/src/python/hail/expr/functions.pyc in _func(name, ret_type, *args); 6; 7 def _func(name, ret_type, *args):; ----> 8 indices, aggregations, joins, refs = unify_all(*args); 9 return construct_expr(ApplyMethod(name, *(a._ast for a in args)), ret_type, indices, aggregations, joins, refs); 10. /Users/konradk/Dropbox/src/python/hail/expr/expression.pyc in unify_all(*exprs); 225 assert len(exprs) > 0; 226 try:; --> 227 new_indices = Indices.unify(*[e._indices for e in exprs]); 228 except ExpressionException:; 229 # source mismatch. AttributeError: 'str' object has no attribute '_indices'; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2880:1347,assert,assert,1347,https://hail.is,https://github.com/hail-is/hail/issues/2880,1,['assert'],['assert']
Testability,Random test of altAlleles indexing in SplitMulti,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1160:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/issues/1160,1,['test'],['test']
Testability,"Rather than give you a million minor comments, I just made the changes I wanted to suggest. The code is looking really great. I will have at one more round of comments on the VCF code (ugh) and the annotation internals, both of which I'm still looking at. All tests pass. Feel free to fight back on any of these. Here's a rough summary of the changes:. Moved RichRow to utils.; Use named args for booleans (nullable in StructField, mostly).; Renamed signatures signature in various places.; Use convience functions consistently throughout.; Annotation clients shouldn't ever see Rows: various changes, toRow -> toAnnotation, Annotation(...) -> Row.fromSeq(Array(...)), etc.; Removed TAbstractStruct/TVdsStruct.; toRow goes on class, not object.; Don't store out Variant in GenotypeStream (duplicate).; Put back RichRow.toVariant, .toGenotypeStream for consistency with other Row client code.; Put schema on AltAllele, too.; Signature argument first in insert for consistency between Signature and VSM operations and between convience and main functions.; Formatting: always; } else; never; }; else; Some gratuitous renaming. Some not so gratuitous renaming.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/218:260,test,tests,260,https://hail.is,https://github.com/hail-is/hail/pull/218,1,['test'],['tests']
Testability,"Re-implement export vcf in generated code. There is a fair amount of 'duplicated' code here between table export; and vcf export, however, I belive this to be fine. We can always; refactor VCFPartitionWriter to be a subclass of SimplePartitionWriter,; but that would require a little special casing as VCF export needs; access to the column values and SimplePartitionWriter assumes such; a thing is not necessary. As far as VCF export itself, we simply duplicate the logic present in; ExportVCF but with generated code.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11450:467,log,logic,467,https://hail.is,https://github.com/hail-is/hail/pull/11450,1,['log'],['logic']
Testability,"Read now takes --skip-genotypes to mirror importvcf.; filter{samples, variants} now take --all option.; Also, quiet plink output in tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/300:132,test,tests,132,https://hail.is,https://github.com/hail-is/hail/pull/300,1,['test'],['tests']
Testability,"Reading function/contexts from GCS on query workers can contribute a significant portion of the runtime for small jobs. For a simple query like `hl.utils.range_table(10).collect()`, the jobs in the batch can range in time from 5-9 seconds depending on GCS latency. This builds on #9484 to add write-through capability to `memory` and a `ServiceCacheableFS` in Scala. The cacheable FS reads/writes through `memory` and falls back to GCS, so in the good path the ServiceBackend writes the compiled function and contexts to `memory`, workers read inputs and write outputs exclusively from/to memory, from which the ServiceBackend reads the results. From small benchmarks in dev, this cuts down read times on the workers by ~30-40% compared to the worst case GCS latencies and roughly matches the current implementation in the best case. Writing the outputs is comparable to writing through an already warmed up GCS connection.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10315:657,benchmark,benchmarks,657,https://hail.is,https://github.com/hail-is/hail/pull/10315,1,['benchmark'],['benchmarks']
Testability,"Ready for review. The regex is working, though not sure where to place it in our code base. To properly match against nonNumeric() with no variables, there must be no groups (logically!)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/261:175,log,logically,175,https://hail.is,https://github.com/hail-is/hail/pull/261,1,['log'],['logically']
Testability,"Recent log demonstrating the failure: https://cloudlogging.app.goo.gl/ayiTFRnkLdrSzY2j7. In retrospect this seems kind of obvious. Consider `JVMEntryway`. The first `log` statement occurs on line 98 (the line after we set the filename). I think, in my head, the Appender would be created when we initialized the Logger on line 17. That's apparently incorrect. The Appender is lazily created when some internal buffer fills and the logger flushes that buffer. That internal buffer is most likely to fill on the `log.error` lines because they dump a (large) stack trace to the log. That's why we always see the error there. The fix is simple: we track the currently desired output filename and, if we happen to create an appender *after* someone has called `changeFileInAllAppenders`, we initialize that new appender with the filename. This change ensures that, except for a short period during start up, there is always a valid filename. That short period is just the time between the JVM starting, allocating a `JVMEntryway`, calling `main` and getting to line 97. During that time, we carefully use `System.err.println` (not a logger) if something goes wrong.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13664:7,log,log,7,https://hail.is,https://github.com/hail-is/hail/pull/13664,7,"['Log', 'log']","['Logger', 'log', 'logger']"
Testability,"Records in the job_group_inst_coll_cancellable_resources table are dead once a; job group completes. We already compact records when a job group is cancelled. ; We are yet to do this for finished job groups. See the linked issue for a more ; detailed motivation. This change adds two background tasks:; 1. finds uncompacted groups of records for finished job groups and; compacts them by summing across the token field.; 2. finds compacted records for finished job groups and deletes them if; all associated resources are 0. The results of both tasks converge to a fixed point where the only remaining; records are for those jobs groups that are unfinished, cancelled or have; resources outstanding. I've taken care to optimise the underlying SQL queries as best as I can. Both; make heavy use of lateral joins to avoid explodes - the natural implementation; of both are prohibitively expensive. I've tested these tasks in a dev deploy where I created a number of batches and; observed that records from this table have indeed been compacted and destroyed; on completion. It's not immediately obvious to me how to automate testing for ; these. AFAICT, we lack any automated integration testing for these background ; tasks. Resolves: #14623",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14645:901,test,tested,901,https://hail.is,https://github.com/hail-is/hail/pull/14645,3,['test'],"['tested', 'testing']"
Testability,Reenable disabled tests now that Python3 is in,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2948:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/2948,1,['test'],['tests']
Testability,Refactor annotateVariantsTable. Annotate global table. Added extra key table method. checkpoint. Checkpoint. checkpoint before tests. Some of the docs. Passing tests. Fixed tutorial. Fix tutorial styling. Finish rebase. Fix rebase errors. Fix tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1687:127,test,tests,127,https://hail.is,https://github.com/hail-is/hail/pull/1687,6,['test'],['tests']
Testability,"Refactored VariantRecord to RecordDecoder, made genotype decoding; lazy. This allows us to get out fastKeys and the genotypes with the; same abstraction. Refactored multiple BGEN file handling to BgenLoader, where it should be. Added assertions that we silently relied on.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/693:234,assert,assertions,234,https://hail.is,https://github.com/hail-is/hail/pull/693,1,['assert'],['assertions']
Testability,Refactored table reader coercion and caching mechanism. ### What changed?. - Removed `shouldCacheQueryInfo` method from `Backend` class; - Introduced `CoercerCache` in `ExecuteContext`; - Refactored `LoweredTableReader.makeCoercer` to return a function instead of a class; - Removed local caching in `GenericTableValue` and `LoweredTableReader`; - Added `NoCaching` utility . ### Why make this change?. This change aims to optimize table reader coercion by:; - Centralizing caching logic in `ExecuteContext`; - Allowing more flexible caching strategies across different backend implementations,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14696:482,log,logic,482,https://hail.is,https://github.com/hail-is/hail/pull/14696,1,['log'],['logic']
Testability,"Region.scala:18); at is.hail.expr.ir.ExecuteContext$.scoped(ExecuteContext.scala:9); at is.hail.backend.Backend.execute(Backend.scala:56); at is.hail.backend.Backend.executeJSON(Backend.scala:62); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:282); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:238); at java.lang.Thread.run(Thread.java:748); ```. When running this code:. ```; import hail as hl. # cf. https://github.com/Nealelab/ukb_common/blob/master/saige/extract_vcf_from_mt.py; def gt_to_gp(mt, gt_location: str = 'GT', gp_location: str = 'GP'):; return mt.annotate_entries(; **{; gp_location:; hl.map(lambda i: hl.cond(mt[gt_location] == i, 1.0, 0.0), hl.range(0, hl.triangle(hl.len(mt.alleles)))); }). chrom = 1; mt = hl.read_matrix_table(f'gs://ukbb-hail/ukb31063.dosage.pGT.gwas_samples.chr{chrom}.mt'). # write bgen as well; mt = gt_to_gp(mt); hl.export_bgen(mt, filename); ```. Turns out he did not handle missingness correctly, needed something more like this:. ```; def gt_to_gp(mt, location: str = 'GP'):; return mt.annotate_entries(**{location: hl.or_missing(; hl.is_defined(mt.GT),; hl.map(lambda i: hl.cond(mt.GT.unphased_diploid_gt_index() == i, 1.0, 0.0),; hl.range(0, hl.triangle(hl.len(mt.alleles)))))}); ```. We should at least make a change so that the user doesn't get an assertionError in this scenario, and should maybe also consider providing some sort of `gt_to_gp` function in Hail since Konrad also uses this thing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8161:4234,assert,assertionError,4234,https://hail.is,https://github.com/hail-is/hail/issues/8161,1,['assert'],['assertionError']
Testability,Related: https://github.com/hail-is/hail/pull/12963; Remember to add your service account to the new respository policy bindings: ; ```; $ gcloud artifacts repositories add-iam-policy-binding 'hail-benchmarks' \; --member='serviceAccount:YOUR_SERVICE_ACCOUNT' \; --role='roles/artifactregistry.repoAdmin' \; --location='us' \; --project='broad-ctsa'; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13039:198,benchmark,benchmarks,198,https://hail.is,https://github.com/hail-is/hail/pull/13039,1,['benchmark'],['benchmarks']
Testability,Relax VEP assertions,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2156:10,assert,assertions,10,https://hail.is,https://github.com/hail-is/hail/pull/2156,1,['assert'],['assertions']
Testability,Relax VEP assertions [0.1],MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2157:10,assert,assertions,10,https://hail.is,https://github.com/hail-is/hail/pull/2157,1,['assert'],['assertions']
Testability,"Release 0.2.60. Updated hail query change log. Didn't see any user changes for hail batch, let me know if I'm wrong @jigold",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9703:42,log,log,42,https://hail.is,https://github.com/hail-is/hail/pull/9703,1,['log'],['log']
Testability,Release Change log 0.2.28,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7594:15,log,log,15,https://hail.is,https://github.com/hail-is/hail/pull/7594,1,['log'],['log']
Testability,Remove 0.1 regression tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2046:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/2046,1,['test'],['tests']
Testability,"Remove AST hierarchy, FunctionRegistry, AST parser, dependencies (tests) and any other dead code I could find. > 4 additions and 6,710 deletions. Aw, yiss. Full disclosure: this deletes some tests (SKAT, PCRelate, etc.) that currently have no corresponding tests in Python. My plan is to do a ""test audit"" and assign out tests to make sure we have a complete set of tests for the current functionality (including stuff that was deleted here and things that are simply missing tests, e.g. the MatrixIR parser, some IR nodes, etc.)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3990:66,test,tests,66,https://hail.is,https://github.com/hail-is/hail/pull/3990,7,['test'],"['test', 'tests']"
Testability,Remove annotations limiting most ndarray tests to spark backend,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8974:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/8974,1,['test'],['tests']
Testability,"Remove conda from ci. Mirrors the changes in batch. I already tested deployment works by hand deploying a bogus version. It didn't have any watched targets though, so I didn't test everything. The pod starts successfully in python 3.6 (ci previously used python 3.7, see changes in shell_helper.py).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5800:62,test,tested,62,https://hail.is,https://github.com/hail-is/hail/pull/5800,2,['test'],"['test', 'tested']"
Testability,Remove dependence on tag dk-test and zone us-central1-a,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4994:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/4994,2,['test'],['test']
Testability,"Remove some (now) unnecessary local variable initializations. newEmit{Local, Field}: don't store missingness variable for required types. Split up zip cases assert same length and extend na. Otherwise, the same length code ended up assigning a missing element to a required field.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8317:157,assert,assert,157,https://hail.is,https://github.com/hail-is/hail/pull/8317,1,['assert'],['assert']
Testability,Remove the dependency of testCppCodegen from test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4637:25,test,testCppCodegen,25,https://hail.is,https://github.com/hail-is/hail/pull/4637,2,['test'],"['test', 'testCppCodegen']"
Testability,"Remove the setup of Jupyter/JupyterLab from hailctl to enable use of Dataproc's [Component Gateway](https://cloud.google.com/dataproc/docs/concepts/accessing/dataproc-gateways) feature, which eliminates the need to use an ssh tunnel to reach the various web UIs on the Dataproc cluster. To test this pull request:; 1. run `hailctl dataproc start` as usual, but add parameters `--enable-component-gateway --optional-components JUPYTER --dry-run` to generate the `gcloud dataproc clusters create` command that will setup JupyterLab and eliminate the need for an ssh tunnel. For example:; ```; hailctl dataproc start my-cluster-name \; --region us-central1 \; --enable-component-gateway \; --optional-components JUPYTER \; --bucket name-of-my-staging-gcs-bucket-where-notebook-files-will-live \; --temp-bucket name-of-my-gcs-bucket-with-a-lifecycle-rule-to-autodelete-cruft-after-two-weeks \; --max-idle 60m \; --dry-run; ```; 2. In the generated `gcloud dataproc clusters create` command, replace the value of `--initialization-actions` with the path of the GCS location to the script in this pull request. Also replace the value of `--temp-bucket`, since hailctl appears to stomp on the user specified value. Then run the command to create your cluster with component gateway enabled.; 3. To obtain the URL to JupyterLab, run `gcloud dataproc clusters describe my-cluster-name --region=us-central1 --format=""yaml(config.endpointConfig.httpPorts)""`; 4. Run Hail notebooks to test the setup of JupyterLab provided by Dataproc!",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12788:290,test,test,290,https://hail.is,https://github.com/hail-is/hail/pull/12788,2,['test'],['test']
Testability,Removed broken test and unused joinDistinct.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/664:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/664,1,['test'],['test']
Testability,Removed combined burden tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2332:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/pull/2332,2,['test'],['tests']
Testability,Removed sys_platform!='win32'. Broke installation on Amazon Linux 2 install. Is there different logic to put here?,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12136:96,log,logic,96,https://hail.is,https://github.com/hail-is/hail/pull/12136,1,['log'],['logic']
Testability,"Removes this error from the logs:. ```; Traceback (most recent call last):; --; File ""/usr/local/lib/python3.7/dist-packages/batch/resource_usage.py"", line 220, in periodically_measure; await self.measure(); File ""/usr/local/lib/python3.7/dist-packages/batch/resource_usage.py"", line 187, in measure; memory_usage_bytes = self.memory_usage_bytes(); File ""/usr/local/lib/python3.7/dist-packages/batch/resource_usage.py"", line 126, in memory_usage_bytes; return int(f.read().rstrip()); OSError: [Errno 19] No such device; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12752:28,log,logs,28,https://hail.is,https://github.com/hail-is/hail/pull/12752,1,['log'],['logs']
Testability,"Removing Sink: Fix the logging, wait for yourself to finish before attempting cleanup",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6851:23,log,logging,23,https://hail.is,https://github.com/hail-is/hail/pull/6851,1,['log'],['logging']
Testability,Reorder partitions based on ParquetInputSplit path. Tests pass on GCP.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/793:52,Test,Tests,52,https://hail.is,https://github.com/hail-is/hail/pull/793,1,['Test'],['Tests']
Testability,Reorganize Python tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3887:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/3887,1,['test'],['tests']
Testability,Reorganize Python tests into a separate directory,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3070:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/3070,1,['test'],['tests']
Testability,Reorganize tests by splitting them out into appropriate modules.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2578:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/2578,1,['test'],['tests']
Testability,"Repartitioning can be prohibitively expensive when old partitions are recomputed multiple times to compute new partitions. Introduce a selector to estimate how much repartitioning costs relative to writing the table and re-reading partitions from the index based upon average number times old partitions are computed. Through benchmarking, a scaling factor of ~1/60 was a happy compromise. See attached image for top 20 benchmarks. ![image](https://user-images.githubusercontent.com/8223952/231211571-579ee585-f81d-42a0-97f7-dfb579eeb9ae.png)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12821:326,benchmark,benchmarking,326,https://hail.is,https://github.com/hail-is/hail/pull/12821,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,Replace TestRDDBuilder with VDS gen,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/466:8,Test,TestRDDBuilder,8,https://hail.is,https://github.com/hail-is/hail/issues/466,1,['Test'],['TestRDDBuilder']
Testability,Replaced all the hl.nulls in tests with hl.missing,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10004:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/10004,1,['test'],['tests']
Testability,"Replaced by generic AggArrayPerElement. Test; ----. ```python; @benchmark; def table_aggregate_array_sum():; N = 10_000_000; M = 100; ht = hl.utils.range_table(N); ht.aggregate(hl.agg.array_sum(hl.range(0, M))); ```. Timings; -------. Master:. ```; Mean, Median: 7.71s, 7.74s; ```. Branch:. ```; Mean, Median: 4.99s, 4.99s; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6473:40,Test,Test,40,https://hail.is,https://github.com/hail-is/hail/pull/6473,2,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability,"Replaces #8533. I add two build steps: `test_dataproc` and `deploy`. Both of the new steps are; scoped for `dev` and `deploy`. However, we intend to only run these steps when; the pip version changes (i.e. when we ""release""). These steps only perform work; when hail-is/hail lacks a tag for the pip version described in; `hail/Makefile`. Otherwise, they `exit 0` with an informative note. The `test_dataproc` step, unfortunately, builds hail. The hailctl artifacts are; placed in `gs://hail-common/hailctl/dataproc/ci_test_dataproc/...`. Otherwise; test_dataproc operates identically to `make test-dataproc`. The `deploy` step uses `wheel-container.tar` rather than building; Hail (again). I migrated the `deploy` and `test-dataproc` code out of the; `Makefile` and into bash scripts. I did not migrate the artifact upload out of the; `Makefile`. The `dev` scope is only intended for debugging production issues or; prospectively testing dataproc on a suspicious change set. ---. The PR test results are uninformative as to the correctness of this change; because these steps are not scoped `test`. I tested [test_dataproc in a dev; deploy](https://ci.hail.is/batches/32357). I have not tested `deploy.sh`. I take; responsibility for executing the next deploy. ---. If CI deploy is broken but CI can still run dev-deploys, then a developer may; deploy hail with `hailctl`:. ```; hailctl dev deploy hail-is/hail:master --steps deploy; ```. One may also deploy from a laptop. You need curl >=7.55.0 (that version; implemented reading headers from a file). Create $HOME/.pypirc and put this; there:. ```; [pypi]; username: hailteam; password: GET_THIS_FROM_THE_USUAL_PLACE; ```. get a github access token with repo; privileges (https://github.com/settings/tokens), create; $HOME/.github-oauth-header, and put this there:. ```; Authorization: token YOUR_ACCESS_TOKEN_HERE; ```. Now, deploy from your laptop:. ```; make deploy GITHUB_OAUTH_HEADER_FILE=$HOME/.github-oauth-header DEPLOY_REMOTE=THE_REMOTE_FO",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8550:593,test,test-dataproc,593,https://hail.is,https://github.com/hail-is/hail/pull/8550,3,['test'],"['test-dataproc', 'testing']"
Testability,"Replacing #9578 . _linear_regression_rows_nd now supports chained linear regression correctly. Also added support for pass through arguments. This should now support everything that regular linear regression supports, but all written in Python. This allows a few more tests to run on local backend. I'd be particularly interested in whether you think there's a way to write this that would generate more efficient IR. It seems hacky to have to map over the range of rows and index into it, but I didn't see a better way.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9634:268,test,tests,268,https://hail.is,https://github.com/hail-is/hail/pull/9634,1,['test'],['tests']
Testability,"Replicable bug:. ```; hail -b 0 importvcf src/test/resources/multipleChromosomes.vcf -n 10 exportvcf -o /tmp/out.vcf.bgz importvcf /tmp/out.vcf.bgz -n 10 count --genotypes. hail: count: caught exception: Job aborted due to stage failure: Task 4 in stage 0.0 failed 1 times, most recent failure: Lost task 4.0 in stage 0.0 (TID 4, localhost): htsjdk.samtools.SAMFormatException: Invalid GZIP header; at htsjdk.samtools.util.BlockGunzipper.unzipBlock(BlockGunzipper.java:72); at htsjdk.samtools.util.BlockCompressedInputStream.inflateBlock(BlockCompressedInputStream.java:410); at htsjdk.samtools.util.BlockCompressedInputStream.readBlock(BlockCompressedInputStream.java:392); at htsjdk.samtools.util.BlockCompressedInputStream.available(BlockCompressedInputStream.java:127); at org.seqdoop.hadoop_bam.util.BGZFSplitCompressionInputStream.readWithinBlock(BGZFSplitCompressionInputStream.java:81); at org.seqdoop.hadoop_bam.util.BGZFSplitCompressionInputStream.read(BGZFSplitCompressionInputStream.java:48); at java.io.InputStream.read(InputStream.java:101); at org.apache.hadoop.mapreduce.lib.input.CompressedSplitLineReader.fillBuffer(CompressedSplitLineReader.java:130); at org.apache.hadoop.util.LineReader.readDefaultLine(LineReader.java:216); at org.apache.hadoop.util.LineReader.readLine(LineReader.java:174); at org.apache.hadoop.mapreduce.lib.input.CompressedSplitLineReader.readLine(CompressedSplitLineReader.java:159); at org.apache.hadoop.mapred.LineRecordReader.<init>(LineRecordReader.java:134); at org.apache.hadoop.mapred.TextInputFormat.getRecordReader(TextInputFormat.java:67); at org.apache.spark.rdd.HadoopRDD$$anon$1.<init>(HadoopRDD.scala:239); at org.apache.spark.rdd.HadoopRDD.compute(HadoopRDD.scala:216); at org.apache.spark.rdd.HadoopRDD.compute(HadoopRDD.scala:101); at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:297); at org.apache.spark.rdd.RDD.iterator(RDD.scala:264); at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); at org.apac",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/566:46,test,test,46,https://hail.is,https://github.com/hail-is/hail/issues/566,1,['test'],['test']
Testability,"Replicable with the following:. ```; ds = hc.read('gs://future-variant-calling/future-pipeline/future.vds'); ds.filter_rows(ds.v.num_alleles() == 2).count_rows(); ```. ```; Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 66 in stage 2.0 failed 20 times, most recent failure: Lost task 66.19 in stage 2.0 (TID 2061, tim-debug-sw-h2hs.c.broad-ctsa.internal): java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.annotations.Region.loadInt(Region.scala:36); 	at is.hail.expr.types.TBinary$.loadLength(TBinary.scala:62); 	at is.hail.annotations.UnsafeRow$.readBinary(UnsafeRow.scala:128); 	at is.hail.annotations.UnsafeRow$.readString(UnsafeRow.scala:139); 	at is.hail.annotations.UnsafeRow$.readAltAllele(UnsafeRow.scala:152); 	at is.hail.annotations.UnsafeRow$.readArrayAltAllele(UnsafeRow.scala:164); 	at is.hail.annotations.UnsafeRow$.read(UnsafeRow.scala:210); 	at is.hail.annotations.UnsafeRow.get(UnsafeRow.scala:257); 	at is.hail.expr.FilterVariants$$anonfun$10.apply(Relational.scala:428); 	at is.hail.expr.FilterVariants$$anonfun$10.apply(Relational.scala:425); 	at scala.collection.Iterator$$anon$13.hasNext(Iterator.scala:463); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$9$$anon$5.hasNext(OrderedRVD.scala:694); 	at scala.collection.Iterator$$anon$11.hasNext(Iterator.scala:408); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$9$$anon$5.hasNext(OrderedRVD.scala:694); 	at scala.collection.Iterator$class.foreach(Iterator.scala:893); 	at is.hail.rvd.OrderedRVD$$anonfun$apply$9$$anon$5.foreach(OrderedRVD.scala:691); 	at is.hail.methods.SampleQC$$anonfun$results$1.apply(SampleQC.scala:170); 	at is.hail.methods.SampleQC$$anonfun$results$1.apply(SampleQC.scala:166); 	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$23.apply(RDD.scala:785); 	at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$23.apply(RDD.scala:785); 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2803:410,Assert,AssertionError,410,https://hail.is,https://github.com/hail-is/hail/issues/2803,3,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,Require / assert statements should have messages,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/366:10,assert,assert,10,https://hail.is,https://github.com/hail-is/hail/issues/366,1,['assert'],['assert']
Testability,"Resolves #6957 . Basically none of the NDArray stuff currently supports missingess, so this is the beginning of adding that support. The IR nodes that rely on the `NDArrayEmitter` are more complicated, but here's two easy ones to start. This fixes MakeNDArray and NDArrayShape's handling of missingness, with a test for each. It also adds some test for NDArrayRef with missingess, which was already handled but not tested.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7319:311,test,test,311,https://hail.is,https://github.com/hail-is/hail/pull/7319,3,['test'],"['test', 'tested']"
Testability,Resolves broadinstitute/hail#535 by choosing uniformly(?) a partition of the given size. The partition algorithm is [defined in Gen](https://github.com/danking/hail/blob/4dcde7e15c0cb9de402e0a2307f7f8e8a56054bd/src/main/scala/org/broadinstitute/hail/check/Gen.scala#L23-L34). It takes `size` balls and randomly places each one in a bin. The algorithm @jbloom22 described to me last night would draw O(partition) random numbers. This approximately halved the run-time of `grade test` on my machine.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/536:477,test,test,477,https://hail.is,https://github.com/hail-is/hail/pull/536,1,['test'],['test']
Testability,"Resolves https://github.com/hail-is/hail/pull/2471 by reimplementing in Python. Required changes to bind to permit binding multiple args; this required flipping the order of the function and the binding. You shouldn't need to do much correctness checking in the implementation, because the files used to test basically catch every edge case.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3264:304,test,test,304,https://hail.is,https://github.com/hail-is/hail/pull/3264,1,['test'],['test']
Testability,"Resource groups are permitted to use dashes, underscores, uppercase letters,; and probably other characters not permitted in storage account names. This; PR cahanges `bootstrap.sh` to:. 1. Ignore invalid characters in the resouce group. 2. Ensure (via randomness) that the generated name is unique. 3. Do not try to create a new storage account if `backend-config.tfvars` exists. I lightly tested this. Here is an example of how it sanitizes a resource group name:. ```; RESOURCE_GROUP=bu__ild-batch-worker-i32mage; possibly_invalid_storage_account_name=""$(cat /dev/urandom | LC_ALL=C tr -dc 0-9 | head -c 4)${RESOURCE_GROUP}""; STORAGE_ACCOUNT_NAME=$(LC_ALL=C tr -dc a-z0-9 <<< ""${possibly_invalid_storage_account_name}"" | head -c 24); echo $STORAGE_ACCOUNT_NAME; 7241buildbatchworkeri32m; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11313:390,test,tested,390,https://hail.is,https://github.com/hail-is/hail/pull/11313,1,['test'],['tested']
Testability,"Revert ""[QoB] disable import_plink using tests""",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12063:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/12063,1,['test'],['tests']
Testability,"Revert ""[batch] Add infrastructure for not running batch tests in production""",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9588:57,test,tests,57,https://hail.is,https://github.com/hail-is/hail/pull/9588,1,['test'],['tests']
Testability,"Revert ""[batch] Stream job logs in the batch front-end""",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13392:27,log,logs,27,https://hail.is,https://github.com/hail-is/hail/pull/13392,1,['log'],['logs']
Testability,"Revert ""[batch] replace GCS with GoogleStorageAsyncFS in LogStore""",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10743:57,Log,LogStore,57,https://hail.is,https://github.com/hail-is/hail/pull/10743,1,['Log'],['LogStore']
Testability,"Revert ""[testing] Enable un-decorated tests in OrderingSuite""",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6733:9,test,testing,9,https://hail.is,https://github.com/hail-is/hail/pull/6733,2,['test'],"['testing', 'tests']"
Testability,Revert parallel testing,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1456:16,test,testing,16,https://hail.is,https://github.com/hail-is/hail/pull/1456,1,['test'],['testing']
Testability,Reverts hail-is/hail#12098. We can't retry calls to `aiohttp.StreamReader.read` as it will immediately [re-raise the previous exception](https://github.com/aio-libs/aiohttp/blob/e260753daf023c6b6162991317a7f4b06a8cd4f7/aiohttp/streams.py#L345). We need a coarser method of reusable-retry logic in the filesystem that uses a new `StreamReader` from the last known point of success.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12176:288,log,logic,288,https://hail.is,https://github.com/hail-is/hail/pull/12176,1,['log'],['logic']
Testability,"Reverts hail-is/hail#14461. We're hitting [github rate limits](https://console.cloud.google.com/logs/query;query=resource.type%3D%22k8s_container%22%0Aresource.labels.namespace_name%3D%22default%22%0Aresource.labels.container_name%3D%22ci%22%0A--%20severity%3DERROR%20OR%20WARNING;pinnedLogId=2024-04-18T15:42:12.920462831Z%2Fvdlhscspn377olu0;cursorTimestamp=2024-04-18T15:42:14.785330871Z;duration=P1D?project=hail-vdc) which is preventing actions like dev deploys. The limit is apparently [5,000 requests/hour](https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api?apiVersion=2022-11-28#primary-rate-limit-for-authenticated-users). This feels excessive to me, and I feel like we most be using the API poorly, but I want to just revert this before investigating further so CI doesn't get stuck.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14476:96,log,logs,96,https://hail.is,https://github.com/hail-is/hail/pull/14476,1,['log'],['logs']
Testability,Reworked logging to route log output through Python stderr,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2063:9,log,logging,9,https://hail.is,https://github.com/hail-is/hail/pull/2063,2,['log'],"['log', 'logging']"
Testability,"Rewrite invocations of `hl.cond()` to `hl.if_else()`, `hl.null()` to `hl.missing()`, and `hl.zip_with_index()` to `hl.enumerate()`. Very minor, but a few of these appear in our test logs (and probably yours as well), which makes for noise when you're tracking down other problems in the logs:. ```; hail/methods/misc.py:437: DeprecationWarning: Call to deprecated function (or staticmethod) cond. (Replaced by hl.if_else) -- Deprecated since version 0.2.59.; hail/vds/methods.py:79: DeprecationWarning: Call to deprecated function (or staticmethod) zip_with_index. (Replaced by hl.enumerate) -- Deprecated since version 0.2.56.; hail/vds/methods.py:75: DeprecationWarning: Call to deprecated function (or staticmethod) null. (Replaced by hl.missing) -- Deprecated since version 0.2.62.; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13349:177,test,test,177,https://hail.is,https://github.com/hail-is/hail/pull/13349,3,"['log', 'test']","['logs', 'test']"
Testability,"Right now benchmarks only work if your project is set to `hail-vdc`. We should either check project in the Makefile and fail, or just always submit to `hail-vdc` project.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8366:10,benchmark,benchmarks,10,https://hail.is,https://github.com/hail-is/hail/issues/8366,1,['benchmark'],['benchmarks']
Testability,"Right now in master, the batch database gets cleared each time batch is deployed. Before we can remove this, we need to write all job task logs to GCS and insert the URI into the database. Otherwise, batch will try and read the logs for a previous job and not find them on the node.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5845:139,log,logs,139,https://hail.is,https://github.com/hail-is/hail/issues/5845,2,['log'],['logs']
Testability,"Right now it's not entirely clear what to do to ensure that a build works on the dataflow cluster, as well as to generate a set of benchmarks that capture a set of performance statistics well.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/156:131,benchmark,benchmarks,131,https://hail.is,https://github.com/hail-is/hail/issues/156,1,['benchmark'],['benchmarks']
Testability,"RowStore.scala using Scala-generated C++. If environment ""HAIL_ENABLE_CPP_CODEGEN"" is defined, it uses the C++ decoder, otherwise; the bytecode CompiledPackDecoder. build.gradle sets the environment so that ""test"" and ""testPython"" will use the C++ decoder. The C++ decoder holds a JNI jobject referring to the InputBuffer, but uses it only for ; readToEndOfBlock. The basic-type decoding (normal or packed) is implemented in PackDecoder.h, with the different encodings as template specializations with no run-time overhead.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4326:208,test,test,208,https://hail.is,https://github.com/hail-is/hail/pull/4326,2,['test'],"['test', 'testPython']"
Testability,"Rs into one and made major changes, so this needs a fresh look. Some high level direction:. - RegionValueAggregator is an interface that doesn't take `Any` as the seqOp argument. All of them have methods that can be called directly with the right input type. I emit code to call such methods. - TransformedRegionValueAggregator is just a little shim class that lets me override the seqOp of another aggregator with an AsmFunction4 (the result of compiling). - ZippedRegionValueAggregator just puts a bunch of RegionValueAggregators together (just foreach on the child aggregators) and puts all their results into an RV Struct. This RV Struct is referenced in the non-aggregating IR code (I've been calling the fragment that remains after aggs are removed ""stage0"" and calling aggregation ""stage1""). Passing all the aggregations directly as arguments to stage0 seems hard/impossible because the number of aggregations isn't known at scala-compile-time, but we stitch together the aggregations and the stage0 compiled IR in scala. - I added 4 IRs: AggIn (this is `gs`), AggMap, AggFilter, AggFlatMap, AggSum. I don't quite know how to add more aggregators. I think I will create new IRs for each one. Or maybe I can get a better interface. Comments welcome. - `compileAgg2` is a CPS-style compiler that lays out straight-line code that corresponds to aggregation. - The interface to generated aggregations isn't very nice right now. The user passes in a struct that contains the element and the scope values. When running an aggregator, the element is extracted first and then passed around (without the rest of the scope). References to the scope become `GetField` IRs that find the appropriate field in the argument. Using this is a bit hacky because we should mutate the fields of the scope struct as we loop over `gs` (e.g. `sa`). However, this is essentially what we do now (EvalContext is basically the scope struct), so I'm not so bothered by it. My tests are kind of hard to follow as a result.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2555:2002,test,tests,2002,https://hail.is,https://github.com/hail-is/hail/pull/2555,1,['test'],['tests']
Testability,"Ruff linting the tests is not too hard, so I did it. I also looked at pyright/pylint, but the Hail package has way too many errors to make that feasible on a Friday night.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14159:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/14159,1,['test'],['tests']
Testability,Run Python PC-Relate tests against static precomputed file,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5966:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/5966,1,['test'],['tests']
Testability,Run hail Java tests with checked memory allocator,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9376:14,test,tests,14,https://hail.is,https://github.com/hail-is/hail/pull/9376,1,['test'],['tests']
Testability,Run local and cluster tests in parallel,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4448:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/4448,1,['test'],['tests']
Testability,Run tests on Cray & Dataflow during deploy,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/743:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/issues/743,1,['test'],['tests']
Testability,"Running a benchmark on densify now, will let y'all know how it looks.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6989:10,benchmark,benchmark,10,https://hail.is,https://github.com/hail-is/hail/pull/6989,1,['benchmark'],['benchmark']
Testability,"Running a function like:; ```; def annotate_tx_expression_data(ht, tx_ht, location):; key = ht.key if isinstance(ht, hl.Table) else ht.row_key; return hl.find(lambda csq: (csq.ensg == location.gene_id) &; (csq.csq == location.most_severe_consequence),; tx_ht[key].tx_annotation); mt = mt.annotate_rows(expressed=annotate_tx_expression_data(mt, tx_ht, mt.lof_csqs).mean_expression > 0.1); mt.describe(); mt.group_rows_by(*list(annotation_expr.keys())).aggregate_rows(; classic_caf=hl.agg.sum(mt.freq[0].AF),; max_af=hl.agg.max(mt.freq[0].AF),; classic_caf_array=hl.agg.array_sum(mt.freq.map(lambda x: x.AF)); ).aggregate_entries(; num_homs=hl.agg.count_where(mt.GT.is_hom_var()),; num_hets=hl.agg.count_where(mt.GT.is_het()),; defined_sites=hl.agg.count_where(hl.is_defined(mt.GT)); ).result(); ```; errors out with `Error summary: AssertionError: assertion failed: ensg not in struct{mean_expression: float64}`. the describe shows that it's doing the right thing (`expressed` is a `bool`), but i'm guessing that since ensg is not strictly referred to except in a lambda, that it's getting pruned out?. Full log posted on zulip",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4754:831,Assert,AssertionError,831,https://hail.is,https://github.com/hail-is/hail/issues/4754,3,"['Assert', 'assert', 'log']","['AssertionError', 'assertion', 'log']"
Testability,Running the tests on a clean checkout should keep the tree clean,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4079:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/4079,1,['test'],['tests']
Testability,"S and; self._timer_cancelled_count / sched_count >; _MIN_CANCELLED_TIMER_HANDLES_FRACTION):; # Remove delayed calls that were cancelled if their number; # is too high; new_scheduled = []; for handle in self._scheduled:; if handle._cancelled:; handle._scheduled = False; else:; new_scheduled.append(handle); ; heapq.heapify(new_scheduled); self._scheduled = new_scheduled; self._timer_cancelled_count = 0; else:; # Remove delayed calls that were cancelled from head of queue.; while self._scheduled and self._scheduled[0]._cancelled:; self._timer_cancelled_count -= 1; handle = heapq.heappop(self._scheduled); handle._scheduled = False; ; timeout = None; if self._ready or self._stopping:; timeout = 0; elif self._scheduled:; # Compute the desired timeout.; when = self._scheduled[0]._when; timeout = min(max(0, when - self.time()), MAXIMUM_SELECT_TIMEOUT); ; if self._debug and timeout != 0:; t0 = self.time(); event_list = self._selector.select(timeout); dt = self.time() - t0; if dt >= 1.0:; level = logging.INFO; else:; level = logging.DEBUG; nevent = len(event_list); if timeout is None:; logger.log(level, 'poll took %.3f ms: %s events',; dt * 1e3, nevent); elif nevent:; logger.log(level,; 'poll %.3f ms took %.3f ms: %s events',; timeout * 1e3, dt * 1e3, nevent); elif dt >= 1.0:; logger.log(level,; 'poll %.3f ms took %.3f ms: timeout',; timeout * 1e3, dt * 1e3); else:; event_list = self._selector.select(timeout); self._process_events(event_list); ; # Handle 'later' callbacks that are ready.; end_time = self.time() + self._clock_resolution; while self._scheduled:; handle = self._scheduled[0]; if handle._when >= end_time:; break; handle = heapq.heappop(self._scheduled); handle._scheduled = False; self._ready.append(handle); ; # This is the only place where callbacks are actually *called*.; # All other places just add them to ready.; # Note: We run all currently scheduled callbacks, but not any; # callbacks scheduled by callbacks run this time around --; # they will be run the next",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10705:2778,log,logging,2778,https://hail.is,https://github.com/hail-is/hail/pull/10705,1,['log'],['logging']
Testability,"SE (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12330"">#12330</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/8650f5c2eedc26f11b6f5c35cf0c0d752aaf51fb""><code>8650f5c</code></a> stubgen: fix non default keyword-only argument positioning (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12303"">#12303</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/226661f62f365102f5fd913b39b32ed3f12e208b""><code>226661f</code></a> Exhaustiveness checking for match statements (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12267"">#12267</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/fce1b548be74f7c65f8e3645f2a2b46aeff0c5a8""><code>fce1b54</code></a> CI: Do not run mypy_primer on stubtest/stubgen PRs (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12295"">#12295</a>)</li>; <li><a href=""https://github.com/python/mypy/commit/c7a81620bef7585cca6905861bb7ef34ec12da2f""><code>c7a8162</code></a> stubtest: ignore more dunder positional-only errors (<a href=""https://github-redirect.dependabot.com/python/mypy/issues/12294"">#12294</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/python/mypy/compare/v0.780...v0.941"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=mypy&package-manager=pip&previous-version=0.780&new-version=0.941)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@depe",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11573:2149,stub,stubtest,2149,https://hail.is,https://github.com/hail-is/hail/pull/11573,3,['stub'],['stubtest']
Testability,"SED; Running test: Test method testNativeGlobal(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeGlobal PASSED; Running test: Test method testNativePtr(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativePtr PASSED; Running test: Test method testNativeUpcall(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeUpcall PASSED; Running test: Test method testObjectArray(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testObjectArray PASSED; Running test: Test method testShuffleAndJoinDoesntMemoryLeak(is.hail.expr.ir.TableIRSuite). Gradle suite > Gradle test > is.hail.expr.ir.TableIRSuite.testShuffleAndJoinDoesntMemoryLeak PASSED; Running test: Test method testBufferWriteReadDoubles(is.hail.annotations.UnsafeSuite). Gradle suite > Gradle test > is.hail.annotations.UnsafeSuite.testBufferWriteReadDoubles PASSED; Running test: Test method testCodec(is.hail.annotations.UnsafeSuite); #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007fe4a85738ec, pid=23790, tid=0x00007fe48cdfa700; #; # JRE version: OpenJDK Runtime Environment (8.0_181-b13) (build 1.8.0_181-8u181-b13-0ubuntu0.18.04.1-b13); # Java VM: OpenJDK 64-Bit Server VM (25.181-b13 mixed mode linux-amd64 compressed oops); # Problematic frame:; # J 9008 C1 is.hail.annotations.UnsafeRow$.readBinary(Lis/hail/annotations/Region;J)[B (39 bytes) @ 0x00007fe4a85738ec [0x00007fe4a8573600+0x2ec]; #; # Core dump written. Default location: /home/BROAD.MIT.EDU/cvittal/src/hail/hail/core or core.23790 (max size 9223372036854775 kB). To ensure a full core dump, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /home/BROAD.MIT.EDU/cvittal/src/hail/hail/hs_err_p",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:9492,test,test,9492,https://hail.is,https://github.com/hail-is/hail/issues/4718,1,['test'],['test']
Testability,"SHOT]; at is.hail.io.BlockingInputBuffer.ensure(InputBuffers.scala:384) ~[gs:__hail-query-ger0g_jars_f00f916faf783b89cc2fc00bfc3e39df5485d8b0.jar.jar:0.0.1-SNAPSHOT]; at is.hail.io.BlockingInputBuffer.readByte(InputBuffers.scala:402) ~[gs:__hail-query-ger0g_jars_f00f916faf783b89cc2fc00bfc3e39df5485d8b0.jar.jar:0.0.1-SNAPSHOT]; ....; ```. A simplified version of the script:. ```python3; import hail as hl; import gnomad.utils.sparse_mt. tmp_dir = 'gs://bucket/'; vds_file = 'gs://neale-bge/bge-wave-1.vds'; out = 'gs://bucket/foo.vcf.bgz'. hl.init(default_reference = 'GRCh38',; tmp_dir = tmp_dir). vds = hl.vds.read_vds(vds_file); mt = hl.vds.to_dense_mt(vds); t = gnomad.utils.sparse_mt.default_compute_info(mt); t = t.annotate(info=t.info.drop('AS_SB_TABLE')); t = t.annotate(info = t.info.drop(; 'AS_QUALapprox', 'AS_VarDP', 'AS_SOR', 'AC_raw', 'AC', 'AS_SB'; )); t = t.drop('AS_lowqual'). hl.methods.export_vcf(dataset = t, output = out, tabix = True); ```. [batch-7751958-2713-main.log](https://github.com/hail-is/hail/files/12314207/batch-7751958-2713-main.log). ### Version. 0.2.120. ### Relevant log output. ```shell; Traceback (most recent call last):; File ""/Users/rye/Projects/VQSR/formatting-VQSR-vcf.py"", line 102, in <module>; main(args); File ""/Users/rye/Projects/VQSR/formatting-VQSR-vcf.py"", line 66, in main; hl.methods.export_vcf(dataset = t, output = args.out, tabix = False); File ""<decorator-gen-1440>"", line 2, in export_vcf; File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/typecheck/check.py"", line 584, in wrapper; return __original_func(*args_, **kwargs_); File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/methods/impex.py"", line 592, in export_vcf; Env.backend().execute(ir.MatrixWrite(dataset._mir, writer)); File ""/Users/rye/opt/anaconda3/lib/python3.9/site-packages/hail/backend/service_backend.py"", line 535, in execute; return self._cancel_on_ctrl_c(self._async_execute(ir, timed=timed, **kwargs)); File ""/Users/rye/opt/anaconda3/lib/",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13409:1714,log,log,1714,https://hail.is,https://github.com/hail-is/hail/issues/13409,1,['log'],['log']
Testability,"SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/Users/dking/miniconda3/lib/python3.10/site-packages/pyspark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 3.3.3; SparkUI available at http://192.168.1.142:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.125-c4e2880b3279; LOGGING: writing to /Users/dking/projects/hail/hail/hail-20231026-0957-0.2.125-c4e2880b3279.log; --------------------------------------------------------------------------- / 1]; FatalError Traceback (most recent call last); Cell In[1], line 2; 1 import hail as hl; ----> 2 hl.import_vcf('gs://danking/chr*.vcf').count(). File ~/miniconda3/lib/python3.10/site-packages/hail/matrixtable.py:2631, in MatrixTable.count(self); 2618 """"""Count the number of rows and columns in the matrix.; 2619 ; 2620 Examples; (...); 2628 Number of rows, number of cols.; 2629 """"""; 2630 count_ir = ir.MatrixCount(self._mir); -> 2631 return Env.backend().execute(count_ir). File ~/miniconda3/lib/python3.10/site-packages/hail/backend/backend.py:180, in Backend.execute(self, ir, timed); 178 result, timings = self._rpc(ActionTag.EXECUTE, payload); 179 except FatalError as e:; --> 180 raise e.maybe_user_error(ir) from None; 181 if ir.typ == tvoid:; 182 value = None. File ~/miniconda3/lib/python3.10/site-packages/hail/backend/backend.py:178, in Backend.execute(self, ir, timed); 176 payload = ExecutePayload(self._render_ir(ir), '{""name"":""StreamBufferSpec""}', timed); 177 try:; --> 178 result, timings = s",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13915:2582,log,log,2582,https://hail.is,https://github.com/hail-is/hail/issues/13915,1,['log'],['log']
Testability,"SQL migrations are not permitted to be modified. Unfortunately, our tests; previously did not verify this at all. Indeed, a PR merged which modified a SQL; file. This PR caused main to fail a deploy. This change verifies that no SQL migration is mutated in the source SHA relative; to the target SHA. One can also use it locally by running `make; check-services` from the root. Unfortunately, it does not work properly when run; on the main branch because there is no obvious point of comparison. I considered comparing against the previous commit, but that might cause; failures if we have to manually fix something in batch. As such, I prefer a; non-deploy only test.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9544:68,test,tests,68,https://hail.is,https://github.com/hail-is/hail/pull/9544,2,['test'],"['test', 'tests']"
Testability,SVD tests should be robust to sign ambiguity,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9727:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/9727,1,['test'],['tests']
Testability,"Same issue where I didn't specify the storage to be 1Gi, so it got more memory than intended. I changed all the explicit resource requests to be 1Gi. ```; 2020-07-28T18:18:12 INFO batch_client.aioclient aioclient.py:497:submit created batch 71161; 2020-07-28T18:18:12 INFO batch_client.aioclient aioclient.py:533:submit closed batch 71161; FAILED; ___________________________ Test.test_out_of_memory ____________________________. self = <test.test_batch.Test testMethod=test_out_of_memory>. def test_out_of_memory(self):; builder = self.client.create_batch(); resources = {'cpu': '0.1', 'memory': '10M'}; j = builder.create_job('python:3.6-slim-stretch',; ['python', '-c', 'x = ""a"" * 1000**3'],; resources=resources); builder.submit(); status = j.wait(); > assert j._get_out_of_memory(status, 'main'); E AssertionError: assert False; E + where False = <function Job._get_out_of_memory at 0x7f2781b87050>({'batch_id': 71161, 'cost': '$0.0000', 'duration': 5847, 'exit_code': 0, ...}, 'main'); E + where <function Job._get_out_of_memory at 0x7f2781b87050> = <hailtop.batch_client.client.Job object at 0x7f277d7a71d0>._get_out_of_memory. ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9168:376,Test,Test,376,https://hail.is,https://github.com/hail-is/hail/pull/9168,7,"['Assert', 'Test', 'assert', 'test']","['AssertionError', 'Test', 'assert', 'test', 'testMethod']"
Testability,Sample output:; ```; $ hailctl dev benchmark compare /tmp/foo.json /tmp/foo2.json; table_annotate_many_nested_no_dependence +1.063 1.396 1.313; table_aggregate_array_sum +1.059 5.648 5.330; table_big_aggregate_compile_and_execute -1.026 12.644 12.976; table_range_force_count +1.010 6.966 6.898; -------------; Total: +1.025; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6588:35,benchmark,benchmark,35,https://hail.is,https://github.com/hail-is/hail/pull/6588,1,['benchmark'],['benchmark']
Testability,Save it to a variable and pass it to standard input using a heredoc; instead of a gnarly command line argument. This still outputs the; config to the logs/job output since the variable assignment expression; will be printed with `set -x`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9533:150,log,logs,150,https://hail.is,https://github.com/hail-is/hail/pull/9533,1,['log'],['logs']
Testability,Save the screen printout from ht.show() to a logger file,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4299:45,log,logger,45,https://hail.is,https://github.com/hail-is/hail/issues/4299,1,['log'],['logger']
Testability,Saw this in https://ci.azure.hail.is/batches/38760/jobs/99. I think the log of a container is actually never None any more. It can; be empty if bash has started but the echo command has not yet run.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11552:72,log,log,72,https://hail.is,https://github.com/hail-is/hail/pull/11552,1,['log'],['log']
Testability,"Scala calls functions that match on the type to avoid boxing. This is; slightly better than allocating, but so much worse than plain array; operations. Benchmarks forthcoming.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9884:152,Benchmark,Benchmarks,152,https://hail.is,https://github.com/hail-is/hail/pull/9884,1,['Benchmark'],['Benchmarks']
Testability,Scale Tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6492:6,Test,Tests,6,https://hail.is,https://github.com/hail-is/hail/issues/6492,1,['Test'],['Tests']
Testability,"Scenario: we mark a ready job cancelled, and it doesn't change the free core counts. It may cause another job to cancellable or runnable (if it was always_run). This is another timing issue that was causing the batch tests to take longer than necessary.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7998:217,test,tests,217,https://hail.is,https://github.com/hail-is/hail/pull/7998,1,['test'],['tests']
Testability,"Script:; ```python3; #!/usr/bin/env python3; import hail as hl; hl.init(log='/dev/null'); mt = hl.import_vcf('src/test/resources/sample.vcf'); mt.filter_rows(mt.locus < hl.Locus('1', 1)).show(); ```. Output:; ```; 2019-06-24 19:12:05 WARN Utils:66 - Your hostname, wp086-661 resolves to a loopback address: 127.0.1.1; using 10.1.8.50 instead (on interface wlp2s0); 2019-06-24 19:12:05 WARN Utils:66 - Set SPARK_LOCAL_IP if you need to bind to another address; 2019-06-24 19:12:06 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Running on Apache Spark version 2.4.0; SparkUI available at http://wp086-661.broadinstitute.org:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.16-e95038bbed35; LOGGING: writing to /dev/null; Traceback (most recent call last):; File ""/tmp/x"", line 4, in <module>; mt.filter_rows(mt.locus < hl.Locus('1', 1)).show(); File ""</home/BROAD.MIT.EDU/cvittal/.cache/hail-env/lib/python3.6/site-packages/decorator.py:decorator-gen-1000>"", line 2, in show; File ""/home/BROAD.MIT.EDU/cvittal/src/hail-alt/hail/python/hail/typecheck/check.py"", line 585, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/BROAD.MIT.EDU/cvittal/src/hail-alt/hail/python/hail/matrixtable.py"", line 2569, in show; actual_n_cols = self.count_cols(); File ""</home/BROAD.MIT.EDU/cvittal/.cache/hail-env/lib/python3.6/site-packages/decorator.py:decorator-gen-994>"", line 2, in count_cols; File ""/home/BROAD.MIT.EDU/cvittal/src/hail-alt/hail/python/hail/typecheck/check.py"", line 585, in wrapper; return __original_func(*args_, **kwargs_); File ""/home/BROAD.MIT.EDU/cvittal/src/hail-alt/hail/python/hail/matrixtable.py"", line 2404, in count_cols; return Env.backend().execute(ir); File ""/home/BROAD.MIT.EDU/cvittal/src/hail-alt/hail/py",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6458:72,log,log,72,https://hail.is,https://github.com/hail-is/hail/issues/6458,5,"['LOG', 'log', 'test']","['LOGGING', 'log', 'logging', 'test']"
Testability,See #10820. I adopted Emma's PR and made a few minor fixes to docs and test issues.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11647:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/11647,1,['test'],['test']
Testability,"See #6370 . > Could you open an issue, to explore changing this to a header-specified token, or randomizing the name field.; > ; > https://security.stackexchange.com/questions/211352/does-owasp-recommend-to-include-a-csrf-token-in-a-header-or-to-use-it-as-a-param; > ; > Need to take care with logging in this case.; > https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md; > ; > To further enhance the security of this proposed design, consider randomizing the CSRF token parameter name and/or value for each request. Implementing this approach results in the generation of per-request tokens as opposed to per-session tokens.; > doing both seems identical to implementing 2 CSRF tokens",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6417:294,log,logging,294,https://hail.is,https://github.com/hail-is/hail/issues/6417,1,['log'],['logging']
Testability,See attached log. Error not clear:. `[Stage 0:==========> (596 + 168) / 2836]hail: write: caught exception: Job aborted.`. [hail.log.txt](https://github.com/broadinstitute/hail/files/269500/hail.log.txt),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/391:13,log,log,13,https://hail.is,https://github.com/hail-is/hail/issues/391,3,['log'],['log']
Testability,See details here: https://testng.org/doc/documentation-main.html#testng-exit-codes,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11114:26,test,testng,26,https://hail.is,https://github.com/hail-is/hail/pull/11114,2,['test'],"['testng', 'testng-exit-codes']"
Testability,See discussion here: http://rolf-engelhard.de/2011/10/fail-instead-of-skip-a-test-when-testngs-dataprovider-throws-an-exception/,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3951:77,test,test-when-testngs-dataprovider-throws-an-exception,77,https://hail.is,https://github.com/hail-is/hail/issues/3951,1,['test'],['test-when-testngs-dataprovider-throws-an-exception']
Testability,"See each message below. ---. [[query/vds] Fix local_to_global with missing fill](https://github.com/hail-is/hail/pull/13325/commits/7d84189ca1a1b9460f4e0c96821cd43b8b0068fa) ; ; There was a logic error in constructFromIndicesUnsafe, if a missing; value was pushed, pushing a present value with the same index would not; clear the missing bit. ---. [[batch/test] Wait for job to be running in list_jobs_v2 test](https://github.com/hail-is/hail/pull/13325/commits/724da249255c06ea4ed1816704e4de51bd8f9b89). ---. [[qob] halve the number of active tests](https://github.com/hail-is/hail/pull/13325/commits/c2638702325526b29bebd416fceeedea52d42245). ---. [[batch] Turn off oms_agent in test and dev](https://github.com/hail-is/hail/pull/13325/commits/bbd65e4f66d41ef69c130091b0506087975c4851). ---",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13325:190,log,logic,190,https://hail.is,https://github.com/hail-is/hail/pull/13325,5,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"See for example, this PR test https://storage.googleapis.com/hail-ci-0-1/ci/28153fd91e1ab73e64144620ade2d1ca271f4d5a/8074a6697bbeb0dc0c4d71b27d8313ff83d2398e/job.log . I believe this is causing https://github.com/hail-is/hail/issues/5519. If you look carefully at that log, you'll see that read_timeout in `connectionpool.py` is 5. It is set by:. ```; read_timeout = timeout_obj.read_timeout; ```. timeout_obj, *should* be created by requests with the same timeout value for read and connect which I am confident (see api.py) is set to 60. Somebody somewhere in this (honestly very confusing) pile of calls is erasing our setting. I am worried there's something that modifies the timeout to have `total = True` which means it subtracts the time spent connecting from the read timeout.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5566:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/issues/5566,3,"['log', 'test']","['log', 'test']"
Testability,"See here:; https://hail.zulipchat.com/#narrow/stream/123010-Hail-0.2E2.20support/topic/Error.20when.20writing.20HailTable.2E. ```; logger.info('Read MatrixTable.'); mt = hl.read_matrix_table('path'). logger.info('Calculate median x in each group2.'); mt = mt.group_cols_by('group1', 'group2').aggregate(x = hl.median(hl.agg.collect(mt.x))). logger.info('Calculate mean x in group1.'); mt = mt.group_cols_by('group1').aggregate(x_stats = hl.agg.stats(mt.x)). logger.info('Calculate relative x.'); mt = mt.annotate_entries(x = mt.x_stats.mean); mt = mt.annotate_rows(row_sum = hl.agg.sum(mt.x)); mt = mt.select_entries(rx = mt.x/mt.row_sum). #----; logger.info('Export as HailTable.'); ht = mt.entries(); ht = ht.drop('row_sum', 'gene_id'). ht.export('path'); ```. Can write the MatrixTable before entries, but not the HailTable after",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6295:131,log,logger,131,https://hail.is,https://github.com/hail-is/hail/issues/6295,5,['log'],['logger']
Testability,"See https://github.com/erdewit/nest_asyncio/issues/11. Original error was this:. ```; _________________ ServiceTests.test_single_task_resource_group _________________. self = <test.hailtop.batch.test_batch.ServiceTests testMethod=test_single_task_resource_group>. def test_single_task_resource_group(self):; b = self.batch(); j = b.new_job(); j.declare_resource_group(output={'foo': '{root}.foo'}); j.command(f'echo ""hello"" > {j.output.foo}'); > res = b.run(). ../test/hailtop/batch/test_batch.py:484: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; batch/batch.py:565: in run; run_result = self._backend._run(self, dry_run, verbose, delete_scratch_on_exit, **backend_kwargs) # pylint: disable=assignment-from-no-return; batch/backend.py:475: in _run; self._async_run(batch, dry_run, verbose, delete_scratch_on_exit, wait, open, disable_progress_bar, callback, token, **backend_kwargs)); utils/utils.py:127: in async_to_blocking; return asyncio.get_event_loop().run_until_complete(coro); /usr/local/lib/python3.7/dist-packages/nest_asyncio.py:63: in run_until_complete; return self._run_until_complete_orig(future); /usr/lib/python3.7/asyncio/base_events.py:574: in run_until_complete; self.run_forever(); /usr/lib/python3.7/asyncio/base_events.py:541: in run_forever; self._run_once(); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <_UnixSelectorEventLoop running=False closed=False debug=False>. def _run_once(self):; """"""Run one full iteration of the event loop.; ; This calls all currently ready callbacks, polls for I/O,; schedules the resulting callbacks, and finally schedules; 'call_later' callbacks.; """"""; ; sched_count = len(self._scheduled); if (sched_count > _MIN_SCHEDULED_TIMER_HANDLES and; self._timer_cancelled_count / sched_count >; _MIN_CANCELLED_TIMER_HANDLES_FRACTION):; # Remove delayed calls that were cancelled if their number; # is too high; new_scheduled = []; for handle in self._scheduled:; if ha",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10705:176,test,test,176,https://hail.is,https://github.com/hail-is/hail/pull/10705,3,['test'],"['test', 'testMethod']"
Testability,See https://github.com/hail-is/hail/issues/13361 for details. Something goes wrong when cleaning up after this test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13363:111,test,test,111,https://hail.is,https://github.com/hail-is/hail/pull/13363,1,['test'],['test']
Testability,Seeing if I can get any batch logging going in Prometheus without personal batch working.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6525:30,log,logging,30,https://hail.is,https://github.com/hail-is/hail/pull/6525,1,['log'],['logging']
Testability,"Seeing if this passes tests. If so, it's a bit simpler",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8105:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/8105,1,['test'],['tests']
Testability,"Seems to have been introduced sometime between `0.2-29fbaeaf265e` (works) and `0.2-60a06028e9db` (see error below). The code is pretty involved, so whoever gets assigned, if you need it, let me know and I can send.; ```; hail.utils.java.FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; 	at scala.Predef$.assert(Predef.scala:156); 	at is.hail.expr.ir.MatrixNativeReader.apply(MatrixIR.scala:242); 	at is.hail.expr.ir.MatrixRead.execute(MatrixIR.scala:426); 	at is.hail.expr.ir.CastMatrixToTable.execute(TableIR.scala:1167); 	at is.hail.expr.ir.TableMapGlobals.execute(TableIR.scala:656); 	at is.hail.expr.ir.TableMapRows.execute(TableIR.scala:514); 	at is.hail.expr.ir.TableMapGlobals.execute(TableIR.scala:656); 	at is.hail.expr.ir.TableMapGlobals.execute(TableIR.scala:656); 	at is.hail.expr.ir.TableMapRows.execute(TableIR.scala:514); 	at is.hail.expr.ir.TableMapGlobals.execute(TableIR.scala:656); 	at is.hail.expr.ir.TableMapRows.execute(TableIR.scala:514); 	at is.hail.expr.ir.CastTableToMatrix.execute(MatrixIR.scala:2283); 	at is.hail.expr.ir.MatrixAnnotateColsTable.execute(MatrixIR.scala:1725); 	at is.hail.expr.ir.CastMatrixToTable.execute(TableIR.scala:1167); 	at is.hail.expr.ir.TableMapGlobals.execute(TableIR.scala:656); 	at is.hail.expr.ir.TableMapRows.execute(TableIR.scala:514); 	at is.hail.expr.ir.CastTableToMatrix.execute(MatrixIR.scala:2283); 	at is.hail.expr.ir.MatrixMapCols.execute(MatrixIR.scala:1413); 	at is.hail.expr.ir.CastMatrixToTable.execute(TableIR.scala:1167); 	at is.hail.expr.ir.TableMapGlobals.execute(TableIR.scala:656); 	at is.hail.expr.ir.TableMapGlobals.execute(TableIR.scala:656); 	at is.hail.expr.ir.TableMapRows.execute(TableIR.scala:514); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4746:249,Assert,AssertionError,249,https://hail.is,https://github.com/hail-is/hail/issues/4746,5,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,Separate hail.log and hail.spark.log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/377:14,log,log,14,https://hail.is,https://github.com/hail-is/hail/issues/377,2,['log'],['log']
Testability,Service tests have high latency to the JVM. Let's not separately call `hl.eval` so many times when we don't need to.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10448:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/10448,1,['test'],['tests']
Testability,"Set and Dict used an inconsistent definition in the JVM backend, and what's more, it is different from the Scala code. This fixes that, and in particular, it is technically a breaking change. There are two orderings on types, the default coming from <, <=, etc. and a total ordering coming from `compare`. The default can compare ""strangely"", e.g. for Doubles every comparison with nan returns false. This code changes Set and Dict to use the total ordering on types for comparison of elements and keys. The representation of Set and Dict in Java are now SortedSet and SortedMap, which are implemented as TreeSet and TreeMap, which is always parameterized to take the total ordering. Note, I left the tests disabled because there's another comparison bug related to intervals I'm sorting out with @patrick-schultz.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6100:701,test,tests,701,https://hail.is,https://github.com/hail-is/hail/pull/6100,1,['test'],['tests']
Testability,Set master to local[2] in python tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1094:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/1094,1,['test'],['tests']
Testability,"Setup failure is distinguished from creation failure because we at least have a pod status. Jobs now have three ways to finish:. - creation failure; never scheduled due to PVC failure or image pull back off; - setup failure; setup container failed, we probably won't get the logs; - normal termination; keep alive container survived, we'll get the logs.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6961:275,log,logs,275,https://hail.is,https://github.com/hail-is/hail/pull/6961,2,['log'],['logs']
Testability,Should be analogous to the logistic regression change,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5164:27,log,logistic,27,https://hail.is,https://github.com/hail-is/hail/pull/5164,1,['log'],['logistic']
Testability,"Should be simple, run this library on logs before serving them:. https://github.com/ralphbean/ansi2html",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7400:38,log,logs,38,https://hail.is,https://github.com/hail-is/hail/issues/7400,1,['log'],['logs']
Testability,Should be useful for benchmarking and other circumstances where; HailContexts are being started and stopped more often.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8256:21,benchmark,benchmarking,21,https://hail.is,https://github.com/hail-is/hail/pull/8256,1,['benchmark'],['benchmarking']
Testability,Shutdown batch after testing,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4532:21,test,testing,21,https://hail.is,https://github.com/hail-is/hail/pull/4532,1,['test'],['testing']
Testability,"SigningRequest API conditions were updated:; <ul>; <li>a <code>status</code> field was added; this field defaults to <code>True</code>, and may only be set to <code>True</code> for <code>Approved</code>, <code>Denied</code>, and <code>Failed</code> conditions</li>; <li>a <code>lastTransitionTime</code> field was added</li>; <li>a <code>Failed</code> condition type was added to allow signers to indicate permanent failure; this condition can be added via the <code>certificatesigningrequests/status</code> subresource.</li>; <li><code>Approved</code> and <code>Denied</code> conditions are mutually exclusive</li>; <li><code>Approved</code>, <code>Denied</code>, and <code>Failed</code> conditions can no longer be removed from a CSR (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/90191"">kubernetes/kubernetes#90191</a>, <a href=""https://github.com/liggitt""><code>@​liggitt</code></a>) [SIG API Machinery, Apps, Auth, CLI and Node]</li>; </ul>; </li>; <li>Cluster admins can now turn off /logs endpoint in kubelet by setting enableSystemLogHandler to false in their kubelet configuration file. enableSystemLogHandler can be set to true only when enableDebuggingHandlers is also set to true. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/87273"">kubernetes/kubernetes#87273</a>, <a href=""https://github.com/SaranBalaji90""><code>@​SaranBalaji90</code></a>) [SIG Node]</li>; <li>Custom Endpoints are now mirrored to EndpointSlices by a new EndpointSliceMirroring controller. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/91637"">kubernetes/kubernetes#91637</a>, <a href=""https://github.com/robscott""><code>@​robscott</code></a>) [SIG API Machinery, Apps, Auth, Cloud Provider, Instrumentation, Network and Testing]</li>; <li>CustomResourceDefinitions added support for marking versions as deprecated by setting <code>spec.versions[*].deprecated</code> to <code>true</code>, and for optionally overriding the defaul",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11462:5082,log,logs,5082,https://hail.is,https://github.com/hail-is/hail/pull/11462,1,['log'],['logs']
Testability,Simplify read logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2358:14,log,logic,14,https://hail.is,https://github.com/hail-is/hail/pull/2358,1,['log'],['logic']
Testability,Simplify the read logic by no longer reading multiple files at once. This functionality is preserved in the newly-added union function.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2358:18,log,logic,18,https://hail.is,https://github.com/hail-is/hail/pull/2358,1,['log'],['logic']
Testability,"Since #5913, `__getattr__` for ArrayStructExpressions and SetStructExpressions calls `__getitem__` so that collection expressions behave more like tables. However, this means that when the requested attribute is not a field of the collection's elements, `__getattr__` throws a KeyError when it [should throw an AttributeError](https://docs.python.org/3/reference/datamodel.html#object.__getattr__). This breaks `hasattr`, since it [checks whether `getattr` raises an AttributeError](https://docs.python.org/3/library/functions.html#hasattr). ; ```python; hasattr(hl.struct(foo=""bar""), ""someattribute""); # False. hasattr(hl.literal([hl.struct(foo=""bar"")]), ""someattribute""); # KeyError: StructExpression instance has no field 'someattribute'; # Hint: use 'describe()' to show the names of all data fields.; ```. This changes `__getattr__` to catch the KeyError thrown by `__getitem__` and throw an AttributeError instead. ---. I found this because the broken `hasattr` prevents Array/SetStructExpressions from being used in pytest parametrized test cases (parametrize calls `hasattr(val, ""__name__"")`).; ```python; @pytest.mark.parametrize(; ""i,o"", [; (hl.literal([hl.utils.Struct(foo=1)]),; [hl.utils.Struct(foo=1)]),; ],; ); def test_parametrize(i, o):; assert hl.eval(i) == o. # KeyError: StructExpression instance has no field '__name__'; # Hint: use 'describe()' to show the names of all data fields.; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7948:1043,test,test,1043,https://hail.is,https://github.com/hail-is/hail/pull/7948,2,"['assert', 'test']","['assert', 'test']"
Testability,"Since Amanda is out, fixed test failure, replacing: https://github.com/hail-is/hail/pull/3817. @catoverdrive wrote it and I already reviewed it. Last commit is my fix, mostly unrelated to this change.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3832:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/3832,1,['test'],['test']
Testability,"Since recently adding metadata server support for batch jobs in GCP, `gcloud` should now ""Just Work"" using the CI service account in CI jobs without explicitly configuring it with a key file, so we no longer need this line. I tested that this succeeds with a dev deploy.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14308:226,test,tested,226,https://hail.is,https://github.com/hail-is/hail/pull/14308,1,['test'],['tested']
Testability,Sk test 3,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9190:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/pull/9190,1,['test'],['test']
Testability,"Sleeping used to work when we had a small number of PRs and other jobs. Now, test-CI deploy jobs need to wait a long time to start running. We should have always been polling for CI to be finished deploying, I was just lazy. Fixed now. Also should free up @jigold 's PR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5230:77,test,test-CI,77,https://hail.is,https://github.com/hail-is/hail/pull/5230,1,['test'],['test-CI']
Testability,"Small amount of preliminary work #6673. I made a PR trying to address this issue already, but ended up reverting it because it broke CI and we don't test that well. To minimize frustration, I'm making some initial changes here first. . Namely:. - Steps have an equality and hash method based solely on their name (I'm going to want to build a hash map of steps when coming up with dependencies for the cleanup jobs. ; - Cleanup now takes a list of parents, instead of just the sink job (useful for when there are more parents than just the sink job).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6782:149,test,test,149,https://hail.is,https://github.com/hail-is/hail/pull/6782,1,['test'],['test']
Testability,Small update to logreg.md,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/848:16,log,logreg,16,https://hail.is,https://github.com/hail-is/hail/pull/848,1,['log'],['logreg']
Testability,"So I did:. hail-new-vep importvcf /user/satterst/DILI/DILI_controls.vcf.bgz repartition -n 100 splitmulti vep --config /psych/genetics_data/working/cseed/vep.properties write -o /user/satterst/DILI/DILI_split_vep.vds . It almost immediately advanced to the write, then it sat there having tasks fail for two hours, then it said:; [Stage 1:> (0 + 35) / 100]; hail: write: caught exception: org.apache.spark.SparkException: Job aborted. log here: /humgen/atgu1/fs03/satterst/hail.jobaborted.log",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/302:435,log,log,435,https://hail.is,https://github.com/hail-is/hail/issues/302,2,['log'],['log']
Testability,"So I thought we had a bug in `r_expected_het_freq` because it's documented as the ratio of observed to expected heterozygote frequency, the ratio of observed to expected heterozygote count, and the heterozygosity ratio (which I assumed must have meant the same as the first two):; https://hail.is/docs/devel/aggregators.html#hail.expr.aggregators.hardy_weinberg; https://hail.is/docs/devel/methods/genetics.html#hail.methods.variant_qc; https://hail.is/docs/devel/functions/stats.html#hail.expr.functions.hardy_weinberg_p. Also, the null dist for the HWE test is on the number of hets, so it seemed natural to report some notion of deviation between observed and expected count (or equivalently, frequency), e.g. ratio of 2.0 means there are twice as many hets as expected under HWE. So while the name `r_expected_het_freq` didn't seem ideal, I read it as ratio of observed to expected het count/freq, so changed the name to `r_obs_exp_het` and the code and tests to match the documentation. I feel pretty dense that it only now just occurred to me that it was probably supposed to mean what was in the code, that is, the expected frequency of heterozygous samples under HWE, and its the documentation that was wrong. I propose to change it back, fix the docs, and name it `het_freq_hwe`, that is, the expected frequency of het under HWE, to go with `p_value_hwe`. Does that sound reasonable? The rest of the PR is ready for review.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3825:555,test,test,555,https://hail.is,https://github.com/hail-is/hail/pull/3825,2,['test'],"['test', 'tests']"
Testability,"So I'm of two minds here, and I don't quite know which to choose. Imagine we make an internal (service to service) request. It fails with a transient error like a timeout. What do we do?. Option 1. Retry. Option 2. Return a transient error 503 service unavailable to our client, and let them to decide what to do. I've implemented both options here: request_{retry, raise}_transient_errors. Which should I use in, for example, the auth decorators which hit the auth/userinfo endpoint?. I've chosen option 1 after bouncing back and forth a few times. I feel like retrying will give a better experience in the common case (a real transient error) and both will recover eventually in the case of a real outage. It appears that browsers don't retry 503 even with Retry-After header set. I'd want it to retry immediately or after a very short delay (1s). In the end, this is what convinced me we should retry. Currently CI uses option 1 when calling batch because it is hardcoded into the batch client. The signature of these functions match aiohttp.ClientSession.request. @danking I'm compelled by your concern that we have a potentially infinite loop of failures nobody will be notified about. I will follow up with another PR to add some logging to the request_retry function. Finally, I'm not quite sure why we're getting so many transient errors. I suspect some of it is gaps in k8s service handoffs, but I'm not sure.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7284:1236,log,logging,1236,https://hail.is,https://github.com/hail-is/hail/pull/7284,1,['log'],['logging']
Testability,"So this evening I noticed that one of my vds files (written four days ago) makes Hail crash when I try to read it. When I do:; hail read -i /user/satterst/DBS_v3/DBS_v3_split_vep.vds. I get the following error message: ; hail: read: caught exception: java.lang.IllegalArgumentException: requirement failed; and then a big stack trace, captured here:. /mnt/lustre/satterst/hail.crash.log. I'd be interested to know what's up. One line in the log says:; 2016-08-27 20:16:41 WARN AbstractLifeCycle:204 - FAILED SelectChannelConnector@0.0.0.0:54054: java.net.BindException: Address already in use; but I don't know what this means or if it's relevant.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/700:383,log,log,383,https://hail.is,https://github.com/hail-is/hail/issues/700,2,['log'],['log']
Testability,"So this works (`cuts` is an array of 50 entries, so this is 2500 `counters`):; ```; joint_sfs = ht.aggregate(hl.struct(; joint_freq_bin_counters=[[hl.agg.counter((ht.freq_bins[i], ht.freq_bins[j], ht.consequence)); for i, _ in enumerate(cuts)] for j, _ in enumerate(cuts)])); ```; but this:; ```; counters = ht.aggregate(hl.struct(; enrichment_counters=[hl.agg.array_agg(lambda x: hl.agg.counter(x), ht.enrichments[i]); for i, _ in enumerate(cuts)],; enrichment_pseudo_counters=[hl.agg.array_agg(lambda x: hl.agg.counter(x), ht.enrichments_pseudo[i]); for i, _ in enumerate(cuts)])); ```; immediately results in OOMs. Each of `enrichments[i]` is also 50 elements, so this should be the same amount of work (well double since I have 2). But a few tasks finish but they generally struggle and eventually die with:; ```; [Stage 3:> (4 + 13) / 9997]OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00007f94d8700000, 5428477952, 0) failed; error='Cannot allocate memory' (errno=12); #; # There is insufficient memory for the Java Runtime Environment to continue.; # Native memory allocation (mmap) failed to map 5428477952 bytes for committing reserved memory.; # An error report file with more information is saved as:; # /tmp/04eb6abfd9594f99ad2fac1a8e4cd0d1/hs_err_pid25110.log; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6074:1283,log,log,1283,https://hail.is,https://github.com/hail-is/hail/issues/6074,1,['log'],['log']
Testability,"So, uh, just tell me if this is too big for one PR. This is all the changes necessary to actually use the regions produces in the ContextRDD. Calls to `Region`'s constructors should only be in tests or by the RVDContext. Sorry @jbloom22 the die came up Jon today. NB: Region is still on-heap, there's no free'ing yet. . cc: @cseed @catoverdrive",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3301:193,test,tests,193,https://hail.is,https://github.com/hail-is/hail/pull/3301,1,['test'],['tests']
Testability,Some additional asserts and quality of life messages that I found necessary for confidently rotating keys.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11020:16,assert,asserts,16,https://hail.is,https://github.com/hail-is/hail/pull/11020,1,['assert'],['asserts']
Testability,"Some delimited text processors use quotes to escape quotes so that the string `a""b` is rendered as `a""""b`. Moreover an individual entry of the delimited text is itself wrapped in double quotes, so, for example, a delimited text file representing one row containing the strings: `hello`, `a""b`, `goodbye` would contain the following bytes:; ```; ""hello"",""a""""b"",""goodbye""; ```. ---. Attempting to import and show the attached TSV file with `hl.import_table(""test.txt"", quote='""').show()` throws an exception:; ```; is.hail.utils.HailException: terminating quote character '""' not at end of field; 	at is.hail.utils.ErrorHandling$class.fatal(ErrorHandling.scala:9); 	at is.hail.utils.package$.fatal(package.scala:28); 	at is.hail.expr.ir.TextTableReader$.splitLine(TextTableReader.scala:107); 	at is.hail.expr.ir.TextTableReader$$anonfun$28$$anonfun$apply$7$$anonfun$apply$8.apply(TextTableReader.scala:379); 	at is.hail.expr.ir.TextTableReader$$anonfun$28$$anonfun$apply$7$$anonfun$apply$8.apply(TextTableReader.scala:378); 	at is.hail.utils.WithContext.map(Context.scala:33); 	at is.hail.expr.ir.TextTableReader$$anonfun$28$$anonfun$apply$7.apply(TextTableReader.scala:378); 	at is.hail.expr.ir.TextTableReader$$anonfun$28$$anonfun$apply$7.apply(TextTableReader.scala:408); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$12.next(Iterator.scala:444); 	at is.hail.utils.package$.getIteratorSizeWithMaxN(package.scala:385); 	at is.hail.sparkextras.ContextRDD$$anonfun$14.apply(ContextRDD.scala:559); 	at is.hail.sparkextras.ContextRDD$$anonfun$14.apply(ContextRDD.scala:559); 	at is.hail.sparkextras.ContextRDD$$anonfun$runJob$1.apply(ContextRDD.scala:589); 	at is.hail.sparkextras.ContextRDD$$anonfun$runJob$1.apply(ContextRDD.scala:587); 	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2069); 	at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2069); 	at org.apache.spark.scheduler.ResultTask.r",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5796:456,test,test,456,https://hail.is,https://github.com/hail-is/hail/issues/5796,1,['test'],['test']
Testability,Some logging and an alloc improvement to Region,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3777:5,log,logging,5,https://hail.is,https://github.com/hail-is/hail/pull/3777,1,['log'],['logging']
Testability,Somehow a logger object was getting imported (maybe from bokeh?); and overwriting `log`. `import *` is very bad style when we we're not sure what we're doing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6233:10,log,logger,10,https://hail.is,https://github.com/hail-is/hail/pull/6233,2,['log'],"['log', 'logger']"
Testability,Somehow the Query on Batch PR (#11194) deleted the argument to this test that made it only run a few tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11398:68,test,test,68,https://hail.is,https://github.com/hail-is/hail/pull/11398,2,['test'],"['test', 'tests']"
Testability,Somewhat stubby -- the docs are barely there.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2903:9,stub,stubby,9,https://hail.is,https://github.com/hail-is/hail/pull/2903,1,['stub'],['stubby']
Testability,Somewhat stubby. Dependent on #2578,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2580:9,stub,stubby,9,https://hail.is,https://github.com/hail-is/hail/pull/2580,1,['stub'],['stubby']
Testability,"Sorry about that! Thought it was tested, it was not!",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5113:33,test,tested,33,https://hail.is,https://github.com/hail-is/hail/pull/5113,1,['test'],['tested']
Testability,"Sorry in advance for the spicy meatball and rebase pain. the entries! [hash] is now gone!. Added Symbol hierarchy in Scala and Python. Symbols have 3 types: user-level identifiers, generated symbols and ""internal"" symbols like :row and :entries. Generated and internal symbols are printed with a leading colon (with no backtick quotes). Internal symbols are never visible to the user. On the Scala side, symbols are all `Sym` but there is implicit conversions from String to Sym so client code can just write strings. On the Python side, symbols are `str` or `Symbol`. I didn't change Python gen_uid to produce Generated symbols yet. I will do that in a second PR. Generally, we pass strings through the py-j boundary and parse on either side. I turned off color on testPython because it leaves the logs full of unreadable escape codes. There is one user-visible change: the JSON exporter now escapes strings in structs so we will have ```{""`$foo`"": 5}``` instead of `{""$foo"": 5}`. This is necessary to disambiguate complex names and internal symbols.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5080:766,test,testPython,766,https://hail.is,https://github.com/hail-is/hail/pull/5080,2,"['log', 'test']","['logs', 'testPython']"
Testability,"Sorry missed this in the initial PR. `os.environ` is global to the whole python session so setting it directly could inadvertently affect the environment for unrelated tests. There seems to be safe ways to do this using `monkeypatch` and whatever `CliRunner` is doing, but I decided just not to set it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13457:168,test,tests,168,https://hail.is,https://github.com/hail-is/hail/pull/13457,1,['test'],['tests']
Testability,"Sorry, this is the same PR as #9241. I had to rebase on master to dev deploy efficiently. I added a test to the existing PR and fixed why my tables weren't being created with dev deploy. I also reduced the query size in the test scope by only querying 2 days. It only changed it from 10 MB scanned instead of 20+ MB scanned, but I figured that was better than nothing. The last commit from 35cf654 are the new changes. FYI: @danking",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9360:100,test,test,100,https://hail.is,https://github.com/hail-is/hail/pull/9360,2,['test'],['test']
Testability,"Spark 3.1 still relies on Breeze 1.0, which is very broken: https://github.com/scalanlp/breeze/issues/772. We can never allow use of Breeze 1.0. . To fix, I have hard coded the insistence that we use Breeze 1.1, relocated it into our hail jar. In the process, I also made it so that we don't support building with Scala 2.11 anymore, but that doesn't preclude us from still building with Spark 2.4.8 for now. . Our old ""fix"" in the build.gradle that said to change Spark 1.0 to 1.1 was actually making things more confusing. It was making it so that when we pulled down Spark and Breeze from Maven ourselves we'd switch out Breeze 1.0 for Breeze 1.1. However, it had no effect on what happened in dataproc, when breeze and Spark are provided on the classpath and we just use what's available. . I also added a dataproc test to catch this behavior.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11555:819,test,test,819,https://hail.is,https://github.com/hail-is/hail/pull/11555,1,['test'],['test']
Testability,"Spark 3.3.0 uses log4j2. Note the ""2"". I suspect log4j2, although it simulates the log4j1 interface, does not correctly support the log4j1 reconfiguration methods. As a result, we began losing QoB job logs. This PR embraces log4j2. The JVMEntryway is now a proper gradle project with two files: JVMEntryway.java and QoBAppender.scala. The former now more extensively logs exceptions into the job logs where they can be seen by users. `QoBAppender` and `QoBOutputStreamManager` work together to ensure QoB job logs go to a different file for each job. In log4j2 there is a log manager and there are loggers, appenders, and appender managers. The log manager appears to be a singleton manager of the log system. Within a log manager there is a directed acyclic graph of loggers. A logger accepts new log messages from user code. It adds some information (like the source class) to the message. If it has an attached appenders, it sends the message to the appenders. It then sends the message up the DAG to its parent logger. There is one root logger which is the ancestor of all other loggers. In this PR, the root logger has exactly one appender: `QoBAppender`. In Hail Query on Batch, we should always have exactly one appender, the QoBAppender, and it should be attached to the root logger. Multiple appenders can share an appender manager. Appender managers allow multiple appenders to share an output file, for example. I think we probably did not need to use a manager in this case.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12940:201,log,logs,201,https://hail.is,https://github.com/hail-is/hail/pull/12940,17,['log'],"['log', 'logger', 'loggers', 'logs']"
Testability,"Spark 3.3.0 uses log4j2. Note the ""2"". If you use the log4j1 programmatic reconfiguration system, you will break log4j2 for you and everyone else. The only way to recover from such a breakage is to use the log4j2 programmatic reconfiguration system. Changes in this PR:. 1. Include JVM output in error logs when the JVM crashes. This should help debugging of JVM crashing in production until the JVM logs are shown on a per-worker page. 2. JVMEntryway is now a real gradle project. I need to compile against log4j, and I didn't want to do that by hand with `javac`. Ignore gradlew, gradlew.bat, and gradle/wrapper, they're programmatically generated by gradle. 3. Add logging to JVMEntryway. JVMEntryway now logs its arguments into the QoB job log. I also log exceptions from the main thread or the cancel thread into the job log. We also flush the logs after the main thread completes, the cancel thread completes, and when the try-catch exits. This should ensure that regardless of what goes wrong (even if both threads fail to start) we at least see the arguments that the JVMEntryway received. 4. Use log4j2 programmatic reconfiguration after every job. This restores log4j2 to well enough working order that, *if you do not try to reconfigure it using log4j1 programmatic configuration*, logs will work. All old versions of Hail use log4j1 programmatic configuration. As a result, **all old versions of Hail will still have no logs**. However, new versions of Hail will log correctly even if an old version of Hail used the JVM before it. 5. `QoBAppender`. This is how we always should have done logging. A custom appender which we can flush and then redirect to a new file at our whim. I followed the log4j2 best practices for creating a new appender. All these annotations, factory methods, and managers are The Right Way, for better or worse. If we ever ban old versions of Hail from the cluster, then we can also eliminate the log4j2 reconfiguration. New versions of Hail work fine without an",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12941:302,log,logs,302,https://hail.is,https://github.com/hail-is/hail/pull/12941,8,['log'],"['log', 'logging', 'logs']"
Testability,"Spark depends on a very old verison of SLF4J. We cannot upgrade. This removes this message:; ```; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; ```. Which, IMO, really should be a stop-the-world error.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14054:177,log,logger,177,https://hail.is,https://github.com/hail-is/hail/pull/14054,1,['log'],['logger']
Testability,"Spark depends on a very old verison of SLF4J. We cannot upgrade. We added this dependency ages ago to fix some undocumented issue with logging and SLF4J. It seems reasonable to me that we should just accept whatever version of SLF4J that Spark provides. This removes this message:; ```; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; SLF4J: Ignoring binding found at [jar:file:/usr/lib/spark/jars/log4j-slf4j-impl-2.17.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]; SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.; ```. Which, IMO, really should be a stop-the-world error.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14055:135,log,logging,135,https://hail.is,https://github.com/hail-is/hail/pull/14055,2,['log'],"['logger', 'logging']"
Testability,Spark worker port (on spark-worker) 9000; Spark driver port (on apiserver) 9001; Block manager port (on apiserver and spark-worker) 9002. The apiserver was hanging trying to connect to the master (and therefore notebook2 notebooks trying to connect to it) without this. Tested hand deploy and it fixed it.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5736:270,Test,Tested,270,https://hail.is,https://github.com/hail-is/hail/pull/5736,1,['Test'],['Tested']
Testability,Specify which benchmark to run by nodeid instead of by expression,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14591:14,benchmark,benchmark,14,https://hail.is,https://github.com/hail-is/hail/pull/14591,1,['benchmark'],['benchmark']
Testability,Specify which execution strategies should pass for assertEvalsTo,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5588:51,assert,assertEvalsTo,51,https://hail.is,https://github.com/hail-is/hail/pull/5588,1,['assert'],['assertEvalsTo']
Testability,Speed Up Tests by caching VDS for sample1 and sample2 VCFs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1722:9,Test,Tests,9,https://hail.is,https://github.com/hail-is/hail/issues/1722,1,['Test'],['Tests']
Testability,Speed up AggregatorSuite.testSum,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3484:25,test,testSum,25,https://hail.is,https://github.com/hail-is/hail/pull/3484,1,['test'],['testSum']
Testability,Speed up AnnotateGlobalSuite.test. Also move it to aggregator suite,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3485:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/3485,1,['test'],['test']
Testability,Speed up gradle test by 3s,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2267:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/2267,1,['test'],['test']
Testability,Speed up ndarray tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6359:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/6359,1,['test'],['tests']
Testability,"Sphinx 1.8 broke compatibility (https://github.com/sphinx-doc/sphinx/issues/5460) with a number of themes including `sphinx_rtd_theme`. Sphinx 1.8.3 restores compatibility (https://github.com/sphinx-doc/sphinx/pull/5590) with said themes. Moreover, sphinx_rtd_theme 0.4.2 (https://github.com/rtfd/sphinx_rtd_theme/pull/672) fixed itself to be compatible with Sphinx 1.8. I tested this locally and search works for me. I also updated our `pandas` dependency because our `setup.py` declares compatibility with only `0.23.x`. Because I edited the environment files, I rebuilt the pr builder image.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5059:373,test,tested,373,https://hail.is,https://github.com/hail-is/hail/pull/5059,1,['test'],['tested']
Testability,"Spicy meatball for you, @tpoterba. I hope I didn't step on your feet too much. read{_table} and write now read and write rows, stolen and tweaked up from tpoterba/unsafe-rowstore-2. (Nice work!) Parquet is gone. Not having to scan all the partitions feels so nice, and I'm just working on tiny examples on my laptop. Added RegionValueBuilder which is useful for ... building region-based values (values allocated in a MemoryBuffer). `import_vcf` uses it to produces `RegionValues`/`UnsafeRow`. I left in `UnsafeRowBuilder`, but it is not being used (except by the tests). We should port over the region => region optimization, and remove it. I feel like this could be used to write our own non-consing Parquet importer easily (that supports nested fields!) Also, our own VCF parser is now trivial to drop in, esp. for genotypes. Added UnsafeIndexedSeqAnnotation and pulling native complex types out of unsafe rows. Cleaned up read/writing VDS/KT metadata files. Got rid of `RowGenotype`, wrote `buildGenotypeExtractor` to be much better. I handled the serialization issue a slightly different way. See `BroadcastTypeTree`. Including your Kryo optimizations from unsafe-rowstore-2 would be good, too. It is still not as fast as 0.1, but generic and getting closer. This change has a lot of upside. Making things mutable now is trivial (just remove to `region.copy()` in `LoadVCF`, `ReadRowsRDD`, etc.) Tests spend a lot of time in methods that should eventually go away (e.g. `UnsafeRow.read`). The main problem is that the rowstore with naive encodings is about 4x larger (compressed) than the corresponding 0.1 VDS (profile225, 2.0GB => 7.8GB) and a huge amount of time is spent in LZ4 compression. I have a plan for this.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2074:564,test,tests,564,https://hail.is,https://github.com/hail-is/hail/pull/2074,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"Spicy meatball. This will be hard to review, and I realize that. I've included quite comprehensive tests to help make that easier.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6942:99,test,tests,99,https://hail.is,https://github.com/hail-is/hail/pull/6942,1,['test'],['tests']
Testability,"Spinning up a VM takes around two minutes. Downloading fresh container images; takes additional time, maybe a whole minute. The cost of timing out is high: an otherwise passing PR test run may fail; demanding a bump and delaying merging of said PR by fifteen to twenty minutes. The cost of waiting two more minutes is that a resource deadlock may last; two extra minutes. We address deadlocks by scaling up and limiting concurrent; PR tests to four.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6878:180,test,test,180,https://hail.is,https://github.com/hail-is/hail/pull/6878,2,['test'],"['test', 'tests']"
Testability,SplitMulti left align assertion,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3040:22,assert,assertion,22,https://hail.is,https://github.com/hail-is/hail/issues/3040,1,['assert'],['assertion']
Testability,Stack trace from @lfrancioli ([full trace](https://nealelab.slack.com/files/laurent/F3P268282/error.txt)). ```; Caused by: java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at org.broadinstitute.hail.utils.richUtils.RichIterable$$anon$4$$anon$10.next(RichIterable.scala:71); at org.broadinstitute.hail.methods.Aggregators$$anonfun$buildVariantAggregations$1.apply(Aggregators.scala:54); at org.broadinstitute.hail.methods.Aggregators$$anonfun$buildVariantAggregations$1.apply(Aggregators.scala:45); at org.broadinstitute.hail.driver.AnnotateVariantsExpr$$anonfun$4$$anonfun$apply$1.apply(AnnotateVariantsExpr.scala:51); ⋮; ```. The iterator returned by the genotype stream has an additional constraint (over the `Iterator[T]` interface) that `hasNext` must be called before every call to `next`. The failing assertion verifies that.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1227:133,Assert,AssertionError,133,https://hail.is,https://github.com/hail-is/hail/issues/1227,4,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,"Stacked on #11057. I tested the query string and made sure the list commands worked. However, I did not test the actual delete with xargs. This was copied almost verbatim from the gcp delete instances step. I'm pretty sure by not adding the `-x` flag at the top of the script, the password won't be printed to the command line output in the logs, but I'm not 100% sure. Also, for this to work, the test-gsa-key needs to be able to delete VM and network resources. Do we have this in GCP as well? I guess we must in order for Batch to be able to remove its instances.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11058:21,test,tested,21,https://hail.is,https://github.com/hail-is/hail/pull/11058,4,"['log', 'test']","['logs', 'test', 'test-gsa-key', 'tested']"
Testability,"Stacked on #11905 . Before this change, we had one long running test which verified all; the old files still parsed properly. In the service backend in particular,; one test split job was substantially longer than the rest. This is bad; for PR merge time. This change has one significant downside, ""collecting"" the tests in pytest; requires evaluating two glob patterns which takes several seconds against; GCS. It is relatively fast against the local filesystem.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11906:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/11906,3,['test'],"['test', 'tests']"
Testability,"Stacked on #11997. This PR enables real-time billing. It should be relatively straightforward. It uses the MySQL v8 instant add of a column. Therefore, we need to switch the Azure infrastructure to use V8.0 before this PR merges. I'm not sure how long this update will lock the attempts table, but hopefully it's not too long. I can test it out on my test database next week. This is an online migration. The key thing to double check is I got the trigger updates to use the new `rollup_time` correctly and am not missing any updates to the attempts where the rollup time needs to be updated as well.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11998:333,test,test,333,https://hail.is,https://github.com/hail-is/hail/pull/11998,2,['test'],['test']
Testability,"Stacked on #12755, this shouldn't have an impact on production, but is just meant to replace `default` in test CI databases with the actual name of the namespace that the CI is in. Should mimic [the prior migration](https://github.com/hail-is/hail/blob/main/ci/sql/active-namespaces.sql) just parametrized by namespace.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12756:106,test,test,106,https://hail.is,https://github.com/hail-is/hail/pull/12756,1,['test'],['test']
Testability,Stacked on #12757. This is just the migration for attempt_resources. Will add new PRs for the other billing tables when you're happy with this PR. I haven't tested this migration on a clone yet.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12813:157,test,tested,157,https://hail.is,https://github.com/hail-is/hail/pull/12813,1,['test'],['tested']
Testability,Stacked on #14016. This PR needs to have the client/server protocol for creating job groups for the four types of creation/update events hashed out and implemented. Basic tests are there. We still need tests for billing and cancellation to make sure the aggregation and cancellation operations work properly.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14018:171,test,tests,171,https://hail.is,https://github.com/hail-is/hail/pull/14018,2,['test'],['tests']
Testability,"Stacked on #2466 . 1. Not sure when region value builders should be cleared. I put them in this PR. If they are needed, then a `clear()` needs to be added to `VariantSampleMatrix.join`. 2. `coalesce` is giving me a different number of partitions for OrderedRDD2 compared to OrderedRDD for the test of identical variants. I think it's because the function `calculateKeyRanges` is different between the two. 3. I know I should incorporate the RegionValueVariant and clean up my BitPackedVectorView, but I wanted to have something that's stable so Genotype can be ripped out.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2467:293,test,test,293,https://hail.is,https://github.com/hail-is/hail/pull/2467,1,['test'],['test']
Testability,"Stacked on #5103 . Fixes #5100 . This PR changes the Python select and key_by operators to generate; the IR we'd expect them to be generating (e.g. `ht.select('x')` emits; a `SelectFields` instead of a `MakeStruct`). In the process, I found and fixed a bug in group expressions for ; `GroupedMatrixTable`. This is tested for both tables and matrix tables; in the new tests in `test_table` and `test_matrix_table`. Some timings:. >>> mt = hl.read_matrix_table('/Users/tpoterba/data/profile.mt'); >>> %timeit mt.select_entries('GT')._force_count_rows(); ; master: . 1.64 s ± 106 ms per loop; ; PR: . 967 ms ± 61.1 ms per loop",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5107:314,test,tested,314,https://hail.is,https://github.com/hail-is/hail/pull/5107,2,['test'],"['tested', 'tests']"
Testability,"Stacked on #7959 . Utterly fails tests. At first glance, not sure this is possible without having InferPType called from within def pType on null.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8012:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/8012,1,['test'],['tests']
Testability,"Stacked on #9220. The region parameter to emit ostensibly means ""construct the value in this region"". But in many places `StagedRegionValueBuilder`s are constructed with the default region, which is the argument to the method being emitted into. This PR fixes all the uses in the emitter to build values in the right region. Most of the remaining users of the constructor with the default region are in tests, so I thought it safest to remove those constructors, and require explicitly passing the region to build into. Otherwise it's too easy to create memory leaks.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9181:403,test,tests,403,https://hail.is,https://github.com/hail-is/hail/pull/9181,1,['test'],['tests']
Testability,"Stacked on #9346 . Changes:; - infrastructure needed for kill switch; - UI page; - Default value for the limit is None. Testing:; - In the database migration, there's two updates that populate the initial state of the aggregated_billing_resources_table. I tested this by hand using a database that hadn't been migrated previously, but this might be good to double check.; - I ran the `check_resource_aggregation` loop while running `test_batch` and made sure there were no errors.; - I tested the UI page editing the limits with negative values and gibberish by hand to make sure those failed. I also refreshed the page to make sure the values were in the database and the update worked. So here's a PR where I convinced myself it was correct a couple of days ago, but the longer this sits, the less confident I'm going to be that there's not a mistake somewhere, especially if there are a lot of changes that need to be made to the code.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9354:120,Test,Testing,120,https://hail.is,https://github.com/hail-is/hail/pull/9354,3,"['Test', 'test']","['Testing', 'tested']"
Testability,Stacked on #9354. I'm happy with the tests here.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9355:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/9355,1,['test'],['tests']
Testability,Stacked on https://github.com/hail-is/hail/pull/14313. It is currently too hard to see what parts of python jobs are well tested or not.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14314:122,test,tested,122,https://hail.is,https://github.com/hail-is/hail/pull/14314,1,['test'],['tested']
Testability,Stacked on https://github.com/hail-is/hail/pull/14316. These are tests for the bug fixed by https://github.com/hail-is/hail/issues/14130.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14318:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/14318,1,['test'],['tests']
Testability,"Stacked on https://github.com/hail-is/hail/pull/5354. This is a very naive implementation of approximate quantiles that @patrick-schultz and I wrote last Friday. The diff will only contain ApproximateQuantiles.cpp and ApproximateQuantiles_test.cpp and a one-line change to the Makefile when https://github.com/hail-is/hail/pull/5331 is merged (which simplifies the addition of new test files to `Makefile`). I'm not sure what testing means in this context because it is an approximate algorithm. We added a test that calculates the ranks for a bunch of elements and prints them. This at least verifies we do not segfault on a simple example. Some subset of the interested parties: @jbloom22 @cseed @catoverdrive @patrick-schultz. Next steps:; - translate to Scala and hook into an actual aggregator; - hook into some future C++ aggregator infrastructure. ---; # The Algorithm Idea. The idea is to keep a logarithmic amount of data but still be able to reproduce an approximation of the original rank (how many elements are less than the given element). We start with a buffer of size `2^N`. ```; +-------------+; | |; +-------------+; ```. We insert elements from the stream until the buffer is full:. ```; +-------------+; | 1 2 ... 2^N |; +-------------+; ```. Then we 1) sort the buffer, 2) allocate another buffer of equal size, and 3); copy half the elements, randomly choosing to start from the zeroth or oneth; element. In the figure below we started with the zeroth element. We now consider; the first buffer empty. Note that the second buffer is only half-full. ```; +-------------------------------+; 2 | 1 3 ... 2^N - 1 |; +-------------------------------+; 1 | |; +-------------------------------+; ```. We now fill the first buffer again and repeat the process, now filling the; second buffer entirely and emptying the first buffer again. Because the second; buffer is now full, we run this compaction process on it, producing a third; buffer which is one half full. The probability of an",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5332:381,test,test,381,https://hail.is,https://github.com/hail-is/hail/pull/5332,4,"['log', 'test']","['logarithmic', 'test', 'testing']"
Testability,"Stacked on: https://github.com/hail-is/hail/pull/5382. When that goes in, this will almost all be deletions. I removed Scala Table and all Scala tests that depended on it. Most deleted tests have analogous in Python, although not all. This will definitely reduce test coverage, esp. things like LDPrune, IBD and PCRelate that haven't been lifted Python yet. They're not changing and on the short list to get lifted, so maybe this is OK, although I'm open to pushback.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5383:145,test,tests,145,https://hail.is,https://github.com/hail-is/hail/pull/5383,3,['test'],"['test', 'tests']"
Testability,"Stacked on: https://github.com/hail-is/hail/pull/5384. Right now just running one test, since the Python tests are quite long (~10m). When they get parallelized (ongoing batch changes), we enable the full tests. The full tests are currently passing when run as:. HAIL_TEST_SERVICE_BACKEND_URL=http://localhost:5000 gw testPython",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5386:82,test,test,82,https://hail.is,https://github.com/hail-is/hail/pull/5386,5,['test'],"['test', 'testPython', 'tests']"
Testability,"Stacked on: https://github.com/hail-is/hail/pull/5414. UnsafeSuite.testCodec verifies this aggressively. I also turned the up the test count massively in hand testing and everything looks good. This should give a modest speed boost to writes, shuffles, anything that uses the encoder generally. Next up is staging the result from RegionValueAggregators.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5417:67,test,testCodec,67,https://hail.is,https://github.com/hail-is/hail/pull/5417,3,['test'],"['test', 'testCodec', 'testing']"
Testability,"Stacked on: https://github.com/hail-is/hail/pull/5507. Drops one broadcast from my test dataset from 1.4MB => 300KB (5x). I think that corresponds to the parallelize for writeSplitSpecs, which is now constant (won't scale according to the number of inputs). The RDD actually doing the writing, the OriginUnionRDD, still scales linearly. I think that's inevitable unless we do the LightweightContextRVDDistributedArray thing I mentioned on Zulip since we necessarily allocate at least one RDD per input. It might still be possible to push the constants down. The point of this change is to avoid capturing the OriginUnionRDD partitions inside the map step. I did this essentially by turning OriginUnionRDD into a union with ""mapPartitionsWithOriginIndex"". I think it might be wroth trying to re-run it after this goes in. Between this one and the last one, there are some pretty big memory/broadcast savings here.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5509:83,test,test,83,https://hail.is,https://github.com/hail-is/hail/pull/5509,1,['test'],['test']
Testability,"Stacked on: https://github.com/hail-is/hail/pull/7440. Changes:; - start the instance with a 1-time use activation token in the metadata; - on activation, clear the activation token, send the worker the normal token and batch-gsa-key; - upgrade the worker image to -6 which has the latest cloud-sdk (v269). As far as I can tell, the metadata server is still available from within the worker container after the upgrade, so I'm not 100% sure why this change was necessary. However, it will make things easier to lock down later. I think the picture we want is:; - store the worker and batch logs in different buckets,; - the worker instance service account only has instance.delete* and object.insert on the worker log bucket,; - the service account used by the worker only has object.insert on the batch logs bucket,; - we block access to the metdata srever from within the docker containers.Leaving this for reference:. https://stackoverflow.com/questions/32512597/block-docker-access-to-specific-ip. This isn't 100% trivial because the metadata server is also the DNS server. We could try blocking everything except udp/53. I think ideally, we'd put the docker containers on a different network that could only route to the outside and use a public DNS server like 8.8.8.8. *An instance doesn't need extra permissions to shut itself down, so we could just do `shutdown -h now` on the worker and have the batch driver actually delete the instance. I think once this goes in we can try scale up tests again.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7447:590,log,logs,590,https://hail.is,https://github.com/hail-is/hail/pull/7447,4,"['log', 'test']","['log', 'logs', 'tests']"
Testability,"Stacks on #5430. Once #5430 is in, the changes here will be limited to: 1) notebook.py: login/logout routes, the provision of authorized users, auth0 lib, 2) index.html 3) header.html: update lines 12 and 13 to read user from session. Provides basic login page. Below are a few images of it in action. Looks like app.hail.is. Handles authorized and workshop-only login. Handles login only; future PR will extend to checking, refreshing the session. cc @cseed . screenshots (notebook create button not yet PR'd , auth0 page not yet styled). <img width=""1141"" alt=""screen shot 2019-02-25 at 11 17 37 pm"" src=""https://user-images.githubusercontent.com/5543229/53387218-d62f3e80-3953-11e9-8653-e4c6b0e8294a.png"">; <img width=""1139"" alt=""screen shot 2019-02-25 at 11 18 00 pm"" src=""https://user-images.githubusercontent.com/5543229/53387219-d62f3e80-3953-11e9-8595-d7f1ea58a243.png"">; <img width=""1139"" alt=""screen shot 2019-02-25 at 11 18 18 pm"" src=""https://user-images.githubusercontent.com/5543229/53387220-d62f3e80-3953-11e9-9fba-e4a93b0374ee.png"">; <img width=""1141"" alt=""screen shot 2019-02-25 at 11 18 33 pm"" src=""https://user-images.githubusercontent.com/5543229/53387221-d62f3e80-3953-11e9-9527-7c4589846a29.png"">",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5437:88,log,login,88,https://hail.is,https://github.com/hail-is/hail/pull/5437,5,['log'],"['login', 'logout']"
Testability,"Stacks on #5437. When #5437 is merged, only change will be the addition of a `requires_auth` decorator - which redirects users to the login page when unauthorized, keeping a reference to the referring url - the protection of all routes other than login/logout, and 4 lines to the `/auth0-callback` route to read/clear the referrer session cookie. Admin pages are currently protected in the same way, but I can drop protection from whatever routes you wish. cc @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5448:134,log,login,134,https://hail.is,https://github.com/hail-is/hail/pull/5448,3,['log'],"['login', 'logout']"
Testability,"Stacks on #5448. Just moves `/` to `/notebook` (` index.html` to `notebook.html`), and adds a home page with the bouncy Hail that people liked. Spoke with Cotton, he wanted it. Only other change is adding cursor:pointer on `input[type=""submit""]` so that the ""Start a Hail Notebook"" button shows a hand. . edit2: Added 2 more commits, +7 -6 lines total, to fix login redirect link, and remove the /user link (which didn't work), to make this completely working as of this PR.; 430a01902c7994d64c4b2986f1b174fb3f32bbb9; 6a4c842c6a8e7a23a83cb7f624974a61e6f85962. cc @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5452:360,log,login,360,https://hail.is,https://github.com/hail-is/hail/pull/5452,1,['log'],['login']
Testability,StagedBTree (append-only) implementation + test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6771:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/6771,1,['test'],['test']
Testability,StagedExtractedAggregators had a lot of duplicated code from ExtractAggregators. This just parameterizes the internal functions so that we don't have two identical copies of the aggregator logic.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6161:189,log,logic,189,https://hail.is,https://github.com/hail-is/hail/pull/6161,1,['log'],['logic']
Testability,"Start of an IR node for joining two streams. ## Logic; Works off the ""producer"" pattern, where a stream is an object that you can; 1. Initialize, so the head of the stream is ready to be consumed.; 2. Step, so updates the current head to the next element in the stream. A join then takes two streams and its Step steps the left stream, the right stream, or both streams until a ""valid"" state is reached. E.g. In an outer join every step is a new valid state while an inner join must loop until the match condition is met. The node must also take some combining binary functions so as not to produce runtime tuples. Optional ""left"" and ""right"" functions determine at compilation time whether an unmatched pair of values should still produce a value (e.g. in a left join you always act, just either on just the left head or both). ## State of the code base; - Added `produce` abstract method to `ArrayEmitter`. Tests will fail until that is implemented on all the array nodes.; - Inserted a small hack to the `ir.ToArray` emit case that uses the producer route; - Added a test case for `ArrayJoin` (this one passes! :)); - Have not yet incorporated missingness into producer logic and have not implemented `consume` for ArrayJoin`.; - `Binds` needs to be updated to add the appropriate bindings for the children. Right now it just adds them all.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6516:48,Log,Logic,48,https://hail.is,https://github.com/hail-is/hail/pull/6516,4,"['Log', 'Test', 'log', 'test']","['Logic', 'Tests', 'logic', 'test']"
Testability,Still need tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8650:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/8650,1,['test'],['tests']
Testability,Still need to change the cluster tests before this goes in.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10319:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/10319,1,['test'],['tests']
Testability,"Still need to complete genotype filtering based on option types, but all indication are that it'll work based on included FilterGenotype tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/113:137,test,tests,137,https://hail.is,https://github.com/hail-is/hail/pull/113,1,['test'],['tests']
Testability,"Still need to fix the doc tests. Just getting it up on the board. builds on: https://github.com/hail-is/hail/pull/2824. removed hail2; moved hail2 => hail; moved api2 => hail; scala + python tests passing, docs still need some work",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2829:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/2829,2,['test'],['tests']
Testability,Stop iterating logistic/poisson fit once NaN appears,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5050:15,log,logistic,15,https://hail.is,https://github.com/hail-is/hail/pull/5050,1,['log'],['logistic']
Testability,Stopping and re-initing is cheap and easy with QoB (compared to spark) and is a cleaner way to reset service backend state. Also note that we pass in the test name as `app_name` in init so batches are guaranteed to be created with the name of the test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13747:154,test,test,154,https://hail.is,https://github.com/hail-is/hail/pull/13747,2,['test'],['test']
Testability,"Struct fields are not mutable, so the log argument of hl.plot.histogram would never work. Also have to handle the case where there are 0s",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11268:38,log,log,38,https://hail.is,https://github.com/hail-is/hail/pull/11268,1,['log'],['log']
Testability,Style of <ls> elements in collapsed state are not correct. Hail logo should be centered.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1006:64,log,logo,64,https://hail.is,https://github.com/hail-is/hail/issues/1006,1,['log'],['logo']
Testability,Suite.scala:42; Running test: Test method testIterateFromUntil(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testIterateFromUntil FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testLowerBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testLowerBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testQueryByKey(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testQueryByKey FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testRangeIterator(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testRangeIterator FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testUpperBound(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.testUpperBound FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[0]([Ljava.lang.String;@49613eb0) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[1]([Ljava.lang.String;@326709be) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[2]([Ljava.lang.String;@7c5e570e) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[3]([Ljava.lang.String;@3c90c5dc)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[3]([Ljava.la,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:2413,test,test,2413,https://hail.is,https://github.com/hail-is/hail/issues/4718,2,"['Test', 'test']","['Test', 'test']"
Testability,"Summary of Changes; - Preserve MT structure for entry fields; - Harmonize MT and T `show` interface in a backwards compatible way; - Simplify `Expression.show` code slightly; - A comprehensive, colocated set of `show` tests",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6089:218,test,tests,218,https://hail.is,https://github.com/hail-is/hail/pull/6089,1,['test'],['tests']
Testability,"Summary of changes:; - Add S3AsyncFS which is implemented in terms of the AWS Python client library, boto3. boto3 is sync (there is an in-progress async version but I decided not to use it to start). The operations are nearly identical to GCS, except S3 supports explicit API requests for multi-part uploads (unlike GCS, where we implement it in terms of compose).; - The only tricky bit is `create`, which needs an async stream writer, but a synchronous stream reader that is passed to boto3.; - I split up test_aiogoogle.py. The GCS specific tests stay there, and AsyncFS tests move to test_fs.py.; - Add S3 to the AsyncFS and copy tests. I created an S3 bucket (hail-test-dy5rg) and test user credentials (added to K8s as test-aws-key). I'm still trying to figure out how to give the rest of the services team admin access to the AWS project, I might have to go through BITS.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10498:544,test,tests,544,https://hail.is,https://github.com/hail-is/hail/pull/10498,6,['test'],"['test', 'test-', 'test-aws-key', 'tests']"
Testability,"Summary of changes:; - At the end of schedule, log total time and number of jobs scheduled.; - Only log database timing if total query took >20ms.; - Make sure context_manager is cleaned up in gear.Transaction.; - Limit workers to max 250 requests/s incoming to batch driver. I used an nginx limit to do this, but it is per pod, so I turned off autoscaling and increased CPU to roughly what I saw when 100K cores was hammering against a dead driver.; - Increase the worker exponential backoff from 30s to 2m. The main thing I was trying to address was the driver getting overloaded when trying to restart with a large standing cluster. It isn't totally clear why the cluster failed in the first place. I made a few other changes to mitigate the issue before adding the nginx limit, so I'm not 100% sure which combination of changes fixed the problem:. - I put a 60s timeout on the scheduler loop. This probably isn't necessary, although the scheduler does get bogged down if many of the instances it tries to schedule on are not responding. - I put a 10s timeout on mark_job_complete. - I put a maximum of 150 active mark_job_complete requests being processed, and returned service unavailable when the max was hit. I don't think this problem is completely solved. I think we want to keep the driver in the ~80% CPU load regime where everything is being processed quickly. I think we want to back off workers if, for example, mark_job_complete is taking more than 95%ile in the not overloaded case. I'm not sure who should do this, although it could be the batch-driver if internal-gateway is doing front-line throttling. Exiting in the overload case should be very cheap. We might want to prioritize mark_job_complete over the scheduler in that case, too. @danking I'd love to get some metrics for the scheduling loop: schedules/s, jobs/s, and time once this goes in. Should I switch to logging json to make that easier?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8149:47,log,log,47,https://hail.is,https://github.com/hail-is/hail/pull/8149,3,['log'],"['log', 'logging']"
Testability,"Summary of changes:; - add a / index page to the workshop service with some chipper content. FYI @tpoterba, feel free to change if you don't like.; - make csrf token session-based; - add common render_template function to web_common that handles csrf and jinja2 rendering. This is necessary because the header has a logout button (potentially) so every page needs make sure the csrf is set.; - added a toplevel make check target; - fixed a forwarding bug: Host: $updated_host needs to get set when proxying to the notebook itself or you get cross-origin errors in the notebook. Things I have left to do:; - make the notebook non-clickable when it isn't ready; - write up a UI testing playbook; - link to notebook/workshop-admin somewhere",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7145:316,log,logout,316,https://hail.is,https://github.com/hail-is/hail/pull/7145,2,"['log', 'test']","['logout', 'testing']"
Testability,"Summary of changes:; - more FS de-Hadoopification; - make the FS core minimal, and implement as much of the interface in terms of that core; - add GoogleStorageFS file system; - add general FSSuite and two implementations: Hadoop and gs://; - google storage tests don't run by default because you need a bucket and key. I set those in the test_hail_java build step.; - There is more stuff to clean up, the Seekable stuff specifically. I'd like to get to the point where only HadoopFS imports hadoop. I don't think we're that far off.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8414:258,test,tests,258,https://hail.is,https://github.com/hail-is/hail/pull/8414,1,['test'],['tests']
Testability,"Summary of changes:; - removed TStreamable; - All IR inputs must be TStream or TArray, statically; - renamed Array* nodes to be Stream* (e.g. ArrayMap to StreamMap, etc.); - ToArray, ToDict and ToSet take TStream only; - LowerArrayToStream is gone. This effectively happens in the front end. Most of the code is peppering ToArray and ToStream in the right places. I think this is a nice improvement in two ways:. I makes the IR more transparent by making ToArray, a potentially expensive operation, completely explicit. (Uses of ToArray should probably be audited.). Second, I think it cleans up the flow in Emit/Stream. Now, streams are always compiled by EmitStream, and non-stream values that correspond to EmitTriplets in the code are compiled by Emit only. Finally, I fixed a bug in array sorter that would throw an assert on sets with NaNs (compare false to themselves). I'm a little surprised this isn't failing any tests in master.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8171:821,assert,assert,821,https://hail.is,https://github.com/hail-is/hail/pull/8171,2,"['assert', 'test']","['assert', 'tests']"
Testability,"Summary of changes:; - rip out method wrapping from Emit level; - Emit now uses locals everywhere instead of fields; - improved SimplifyControl; - Changed CodeRegion to call Memory directly, instead of calling Region methods. This saves a bytecode on native memory accesses.; - add lir.SplitMethod to break up methods. For large methods, this breaks the body of each basic block into one (or more) external functions and spills locals to fields. Splitting is controlled by SplitMethod.TargetMethodSize, currently set to 2000. PR'ing for testing. I have a few more improvements and then I will performance test. Here are the method sizes after splitting for the large `MakeStruct` example:. ```; is/hail/codegen/generated/C8; <init> 4; apply 235; apply 19; setPartitionIndex 11; addPartitionRegion 5; __wrapped16 30; __wrapped17 2003; __wrapped18 2008; __wrapped19 2006; __wrapped20 2008; __wrapped21 2006; __wrapped22 2008; __wrapped23 2006; __wrapped24 2008; __wrapped25 2006; ... you get the picture, remaining 100 methods elided ...; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8333:537,test,testing,537,https://hail.is,https://github.com/hail-is/hail/pull/8333,2,['test'],"['test', 'testing']"
Testability,"Summary of changes:; - rip out method wrapping logic in ir.Emit; - add lir.{Blocks, Locals} for enumerating and indexing blocks and locals; - add SplitLargeBlocks to break up large blocks (the minimum unit of splitting in SplitMethod is the block); - add PST to compute our non-standard variant of the program structure tree (see the comment in PST); - add SplitMethod to split large methods based on the PST",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8963:47,log,logic,47,https://hail.is,https://github.com/hail-is/hail/pull/8963,1,['log'],['logic']
Testability,"Summary:; - remove debug statement (?) in PartitionIteratorLongReader; - LowerTableIR needs to truncate the partitioner when truncating the keys. Otherwise, the partitioner will refer to rows that can be modified elsewhere.; - Added a missing ToStream in TableExplode lowering. Unfortunately, the local backend tests are now segfaulting. How's the debugging allocator fix coming @tpoterba @johnc1231?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8957:311,test,tests,311,https://hail.is,https://github.com/hail-is/hail/pull/8957,1,['test'],['tests']
Testability,"Summary:; The correct default scala version for Spark 3.3.0 is 2.12.15; The main change is in `hail/build.gradle` the remaining is just for consistency. References:; https://github.com/apache/spark/blob/v3.3.0/pom.xml#L3527 (show scala version pinned by Spark); https://github.com/hail-is/hail/blob/0.2.115/hail/build.gradle#L45-L50. This mismatch causing an issue in our environment when opening spark-shell because hail-all-spark.jar is bundled with scala-reflect that has missing classes. The ideal solution is to remove scala language packages as part of the shadow jar because these already come with the Spark distribution, but proposing to have them in-sync as a workaround for now. ```; $ spark-shell; SLF4J: No SLF4J providers were found.; SLF4J: Defaulting to no-operation (NOP) logger implementation; SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.; SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.; ...; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; Exception in thread ""main"" java.lang.NoSuchMethodError: 'scala.reflect.internal.settings.MutableSettings scala.reflect.internal.settings.MutableSettings$.SettingsOps(scala.reflect.internal.settings.MutableSettings)'; at scala.tools.nsc.interpreter.ILoop.$anonfun$chooseReader$1(ILoop.scala:914); at scala.tools.nsc.interpreter.ILoop.mkReader$1(ILoop.scala:920); at scala.tools.nsc.interpreter.ILoop.$anonfun$chooseReader$4(ILoop.scala:926); at scala.tools.nsc.interpreter.ILoop.$anonfun$chooseReader$3(ILoop.scala:926); at scala.tools.nsc.interpreter.ILoop.chooseReader(ILoop.scala:926); at org.apache.spark.repl.SparkILoop.$anonfun$process$1(SparkILoop.scala:138); ...; ```. The error is caused by the change in between 2.12.13 and 2.12.15 in the scala-reflect package that has an additional implicit class:; https://github.com/scala/scala/blob/v2.12.13/src/reflect/scala/reflect/int",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12951:789,log,logger,789,https://hail.is,https://github.com/hail-is/hail/pull/12951,1,['log'],['logger']
Testability,Summary; - the deleted job log test was failing for me @jigold was there an issue with this one?; - give batch 2 seconds to clean up before kill -9; - decrease max `wait` time so we get faster notification when a test is finished; - dumb and inefficient pool: always keep five PVCs around ready to go. I see about a 10 second improvement on total test time from this change.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5852:27,log,log,27,https://hail.is,https://github.com/hail-is/hail/pull/5852,4,"['log', 'test']","['log', 'test']"
Testability,"Summary;; I tried running hail with spark-submit and a .py script with a short pipeline to compare speed. Offending line:; ```; kt = vds_results.make_table('v = v', 'pval = va.pval').export(""output/test.txt""); ```; gives; ```; File ""<decorator-gen-93>"", line 2, in export; File ""/home/ludvig/Programs/hail/python/hail/java.py"", line 121, in handle_py4j; 'Error summary: %s' % (deepest, full, Env.hc().version, deepest)); hail.java.FatalError: SparkException: Job aborted due to stage failure: Task 0.0 in stage 5.0 (TID 1591) had a not serializable result: is.hail.io.bgen.BgenRecordV11$$anon$1; ```; ```; Serialization stack:; 	- object not serializable (class: is.hail.io.bgen.BgenRecordV11$$anon$1, value: BgenRecordV11(0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=0.99798583984375,0.00201416015625,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0,. goes on for a while. field (class: scala.Tuple2, name: _2, type: class java.lang.Object); 	- object (class scala.Tuple2, ([rs149841286:10000179:AAAAAAAC:A,---],BgenRecordV11(0/0:.:.:.:GP=1.0,0.0,0.0, 0/0:.:.:.:GP=1.0,0.0,0.0,. keeps on going like above until remaining stack trace:. at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1454); 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1442); 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1441); 	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59); 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBu",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2527:198,test,test,198,https://hail.is,https://github.com/hail-is/hail/issues/2527,1,['test'],['test']
Testability,"Summing a block-sparse matrix may result in a block-dense vector, in which case maybeBlocks should be None (otherwise the `bis.length < maxNBlocks` assert fails...when rebuilding BlockMatrix in Python/C++ I may change the invariants). Also extended test cases to serve as regression test.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4888:148,assert,assert,148,https://hail.is,https://github.com/hail-is/hail/pull/4888,3,"['assert', 'test']","['assert', 'test']"
Testability,"Support Zstdandard compression for hail input and output block buffers. Zstd is notable for having both very fast compression speed and adequate decompression speed, such that we expect to be network limited for decompression. Further tests may show that Zstd is more performant than LZ4, leading to a proper switch from one format to the other.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12981:235,test,tests,235,https://hail.is,https://github.com/hail-is/hail/pull/12981,1,['test'],['tests']
Testability,Support and test the full range of arithmetic in Hail2 exprs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2776:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/2776,1,['test'],['test']
Testability,"Suppose there are 10,000 tasks competing for the semaphore. If any one of them rasises an exception while the `WithoutSempahore` context manager is active, then the probability that the `WithoutSemaphore.__aexit__` wins the semaphore is 1/10,000 aka unlikely. In practice, this means we need to process through most of the tasks to get the first exception. If, for a real world example, there is a permission issue, you will wait many minutes for all 10,000 tasks to fail, all with the same exception, and then you will finally receive the first exception plus a *litany* of log messages about other tasks which were not properly cleaned up (due to the implementation of `bounded_gather2_raise_exceptions`).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14349:575,log,log,575,https://hail.is,https://github.com/hail-is/hail/pull/14349,1,['log'],['log']
Testability,"T 21 lock struct(s), heap size 1136, 12 row lock(s), undo log entries 5; MySQL thread id 962402, OS thread handle 139741222766336, query id 6809292838 10.32.5.50 jigold updating; UPDATE instances_free_cores_mcpu; SET free_cores_mcpu = free_cores_mcpu + cur_cores_mcpu; WHERE instances_free_cores_mcpu.name = in_instance_name; *** (1) WAITING FOR THIS LOCK TO BE GRANTED:; RECORD LOCKS space id 1578686 page no 3 n bits 72 index PRIMARY of table `jigold`.`instances_free_cores_mcpu` trx id 1215034153 lock_mode X locks rec but not gap waiting; Record lock, heap no 3 PHYSICAL RECORD: n_fields 4; compact format; info bits 0; 0: len 30; hex 62617463682d776f726b65722d6a69676f6c642d7374616e646172642d62; asc batch-worker-jigold-standard-b; (total 34 bytes);; 1: len 6; hex 0000486bf32c; asc Hk ,;;; 2: len 7; hex 600001287513cb; asc ` (u ;;; 3: len 4; hex 80002de6; asc - ;;. *** (2) TRANSACTION:; TRANSACTION 1215034156, ACTIVE 0 sec inserting; mysql tables in use 6, locked 6; 22 lock struct(s), heap size 1136, 13 row lock(s), undo log entries 7; MySQL thread id 962349, OS thread handle 139741180090112, query id 6809294284 10.32.5.50 jigold update; INSERT INTO batch_inst_coll_cancellable_resources (batch_id, inst_coll, token, n_running_cancellable_jobs, running_cancellable_cores_mcpu); VALUES (OLD.batch_id, OLD.inst_coll, rand_token, -1, -OLD.cores_mcpu); ON DUPLICATE KEY UPDATE; n_running_cancellable_jobs = n_running_cancellable_jobs - 1,; running_cancellable_cores_mcpu = running_cancellable_cores_mcpu - OLD.cores_mcpu; *** (2) HOLDS THE LOCK(S):; RECORD LOCKS space id 1578686 page no 3 n bits 72 index PRIMARY of table `jigold`.`instances_free_cores_mcpu` trx id 1215034156 lock_mode X locks rec but not gap; Record lock, heap no 3 PHYSICAL RECORD: n_fields 4; compact format; info bits 0; 0: len 30; hex 62617463682d776f726b65722d6a69676f6c642d7374616e646172642d62; asc batch-worker-jigold-standard-b; (total 34 bytes);; 1: len 6; hex 0000486bf32c; asc Hk ,;;; 2: len 7; hex 60000128751",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11959:1990,log,log,1990,https://hail.is,https://github.com/hail-is/hail/pull/11959,1,['log'],['log']
Testability,TEST,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2025:0,TEST,TEST,0,https://hail.is,https://github.com/hail-is/hail/pull/2025,2,['TEST'],['TEST']
Testability,TESTING ONLY,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10822:0,TEST,TESTING,0,https://hail.is,https://github.com/hail-is/hail/pull/10822,1,['TEST'],['TESTING']
Testability,"THON-CRYPTOGRAPHY-5813745) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **551/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 5.3 | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5813746](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5813746) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit ; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | **471/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 3.7 | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5813750](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5813750) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI4MmVlNzU5Ny0wZmFhLTQ1NmUtOTA3Ny0zOTM4ODRjNzJmNGMiLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjgyZWU3NTk3LTBmYWEtNDU2ZS05MDc3LTM5Mzg4NGM3MmY0YyJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/5ecb4152-94d0-44ff-86c6-21e542bb123d?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13370:2226,test,tested,2226,https://hail.is,https://github.com/hail-is/hail/pull/13370,1,['test'],['tested']
Testability,"THON-CRYPTOGRAPHY-5813745) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **551/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 5.3 | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5813746](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5813746) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit ; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | **471/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 3.7 | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5813750](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5813750) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiI5Nzc0NDQwMi1iNzEyLTQ5NjMtYWQ0Zi01YjFhZWZmOTcwZDciLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6Ijk3NzQ0NDAyLWI3MTItNDk2My1hZDRmLTViMWFlZmY5NzBkNyJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/701495b8-b53d-48af-82fe-1a6c57aa56cb?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13365:2025,test,tested,2025,https://hail.is,https://github.com/hail-is/hail/pull/13365,1,['test'],['tested']
Testability,"THON-CRYPTOGRAPHY-5813745) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit ; ![medium severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/m.png ""medium severity"") | **551/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 5.3 | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5813746](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5813746) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit ; ![low severity](https://res.cloudinary.com/snyk/image/upload/w_20,h_20/v1561977819/icon/l.png ""low severity"") | **471/1000** <br/> **Why?** Recently disclosed, Has a fix available, CVSS 3.7 | Denial of Service (DoS) <br/>[SNYK-PYTHON-CRYPTOGRAPHY-5813750](https://snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-5813750) | `cryptography:` <br> `41.0.2 -> 41.0.3` <br> | No | No Known Exploit . (*) Note that the real score may have changed since the PR was raised. Some vulnerabilities couldn't be fully fixed and so Snyk will still find them when the project is tested again. This may be because the vulnerability existed within more than one direct dependency, but not all of the affected dependencies could be upgraded. Check the changes in this PR to ensure they won't cause issues with your project. ------------. **Note:** *You are seeing this because you or someone else with access to this repository has authorized Snyk to open fix PRs.*. For more information: <img src=""https://api.segment.io/v1/pixel/track?data=eyJ3cml0ZUtleSI6InJyWmxZcEdHY2RyTHZsb0lYd0dUcVg4WkFRTnNCOUEwIiwiYW5vbnltb3VzSWQiOiIxOGJjNGZiYS05ZTMwLTRmNWItYTE4Yy0wOGNmNDVmZDExMTciLCJldmVudCI6IlBSIHZpZXdlZCIsInByb3BlcnRpZXMiOnsicHJJZCI6IjE4YmM0ZmJhLTllMzAtNGY1Yi1hMThjLTA4Y2Y0NWZkMTExNyJ9fQ=="" width=""0"" height=""0""/>; 🧐 [View latest project report](https://app.snyk.io/org/danking/project/c1c98f6a-57c6-4ecc-a329-3b744cab74bd?utm_source&#x3D;github&amp;utm_medium&#x3D;referral&amp;page&#x3D;fix-pr). 🛠 [Adjust project settings](https://app.snyk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13366:2234,test,tested,2234,https://hail.is,https://github.com/hail-is/hail/pull/13366,1,['test'],['tested']
Testability,"TODO. Goal is all non-stretch items done by late tomorrow night/early Friday morning. Friday - Sunday testing, Cotton takes a closer look on Monday. - [x] No SQL; store user / svc / token labels (all things that need to be validated before redirect); - [x] Websockets; - [x] Service, pod definitions, makefile updates => notebook-v2 service name; - [x] Deploy notebook service, Deploy web service ( say web service name, mapping to web.hail.is ); - [x] Direct modification of gateway: check site service for breaks after each change to prevent user ; - [x] Test in cluster; - [x] Make sure Notebook v1 still works; - [ ] Stretch, and only in v3 so Feb 5 entropy minimized: asynchttp + uvloop; - [ ] Stretch ?: route by pod ip instead of svc name: DNS propagation latency significantly longer than pod instantiation time, which sucks for users, both because notebook instances will look broken when they're not, and because if we mask that the apparent latency to first useful operation is multiples of that needed. new: ; Cotton is right, mysql is adding too much complexity for the minimal use case, esp. with gevent conflicting with PyMySQL, necessitating per route handler connection. old:; Not ready to be merged, would like to improve SQL connection handling. 6a4599df5dfe0affdb5e367dd9cdc70cca59fd17 onward dependent on this. MySQL use is unoptimized because PyMySQL doesn't play well with gevent in the following way: initial impression from reading was that monkey.patch_all() before creation of global connection should result in connection spawned for each new request, or to at least private to a greenlet. Doesn't appear to be the case, plenty of connection errors. So establishing connection within each request, which is slow. . Python C library also out, because it does not play well with Python threading/greenlet/monkey patch implementations. MySQL Connector is an option, provides thread pools, but is also slowest option, by up to 10x, for small requests, like our are likely to be",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5215:102,test,testing,102,https://hail.is,https://github.com/hail-is/hail/pull/5215,2,"['Test', 'test']","['Test', 'testing']"
Testability,TStream/PStream type stub,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5610:21,stub,stub,21,https://hail.is,https://github.com/hail-is/hail/pull/5610,1,['stub'],['stub']
Testability,Table.union assertion fails on mismatched requiredness in globals,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3639:12,assert,assertion,12,https://hail.is,https://github.com/hail-is/hail/issues/3639,1,['assert'],['assertion']
Testability,Table.union assertionerrors on different schema,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3404:12,assert,assertionerrors,12,https://hail.is,https://github.com/hail-is/hail/issues/3404,1,['assert'],['assertionerrors']
Testability,TableAggregateByKey AssertionError,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8694:20,Assert,AssertionError,20,https://hail.is,https://github.com/hail-is/hail/issues/8694,1,['Assert'],['AssertionError']
Testability,TableDistinct Lowering + Tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8776:25,Test,Tests,25,https://hail.is,https://github.com/hail-is/hail/pull/8776,1,['Test'],['Tests']
Testability,"Talked to @tpoterba about this. We should list things here like requirements to run the tests, build the docs, etc.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1791:88,test,tests,88,https://hail.is,https://github.com/hail-is/hail/issues/1791,1,['test'],['tests']
Testability,"Talked with Dan and Tim about tests taking a long time, and we concluded it would probably save a lot of test time if SparkSuite just had lazy vals for vds's representing sample1.vcf and sample2.vcf in order to reduce time spend reading them in.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1722:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/issues/1722,2,['test'],"['test', 'tests']"
Testability,Teach batch to test itself locally,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4785:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/4785,1,['test'],['test']
Testability,"Teaches `hfs.ls('gs://bucket/')` to list the files and directories at the top-level of the bucket. In `main` that command raises because this line of `_ls_no_glob` raises:. ```python3; maybe_sb_and_t, maybe_contents = await asyncio.gather(; self._size_bytes_and_time_modified_or_none(path), ls_as_dir(); ); ```. In particular, `statfile` raises a cloud-specific, esoteric error about a malformed URL or empty object names:. ```python3; async def _size_bytes_and_time_modified_or_none(self, path: str) -> Optional[Tuple[int, float]]:; try:; # Hadoop semantics: creation time is used if the object has no notion of last modification time.; file_status = await self.afs.statfile(path); return (await file_status.size(), file_status.time_modified().timestamp()); except FileNotFoundError:; return None; ```. I decided to add a sub-class of `FileNotFoundError` which is self-describing: `IsABucketError`. I changed most methods to raise that error when given a bucket URL. The two interesting cases:. 1. `isdir`. This raises an error but I could also see this returning `True`. A bucket is like a directory whose path/name is empty. 2. `isfile`. This returns False but I could also see this raising an error. This just seems convenient, we know the bucket is not a file so we should say so. ---. Apparently `hfs.ls` had no current tests because the globbing system doesn't work with Azure https:// URLs. I fixed it to use `AsyncFSURL.with_new_path_component` which is resilient to Azure https weirdness. However, I had to change `with_new_path_component` to treat an empty path in a special way. I wanted this to hold:. ```; actual = str(afs.parse_url('gs://bucket').with_new_path_component('bar')); expected = 'gs://bucket/bar'; assert actual == expected; ```. But `with_new_path_component` interacts badly with `GoogleAsyncFSURL.__str__` to return this:. ```; 'gs://bucket//bar'; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14176:1326,test,tests,1326,https://hail.is,https://github.com/hail-is/hail/pull/14176,2,"['assert', 'test']","['assert', 'tests']"
Testability,TeamCity Test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/656:9,Test,Test,9,https://hail.is,https://github.com/hail-is/hail/pull/656,1,['Test'],['Test']
Testability,Test *.rst files,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3703:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/3703,1,['Test'],['Test']
Testability,Test Errors from Digital China Health,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/683:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/issues/683,1,['Test'],['Test']
Testability,Test Genotype pAB,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/145:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/issues/145,1,['Test'],['Test']
Testability,Test TSV files for format and shape,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/216:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/issues/216,1,['Test'],['Test']
Testability,Test VCF with no sample data,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/140:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/issues/140,1,['Test'],['Test']
Testability,Test by comparing with plink on random datasets with no missingness.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/299:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/299,1,['Test'],['Test']
Testability,Test for account being locked,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4533:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/issues/4533,1,['Test'],['Test']
Testability,Test jwt signing key,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6140:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/6140,1,['Test'],['Test']
Testability,Test missingness comparisons for distinctly keyed,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11263:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/11263,1,['Test'],['Test']
Testability,Test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/523:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/pull/523,1,['Test'],['Test']
Testability,"Test:. ```scala; @Test def testArrayLeftJoin() {; val l = Ref(genUID(), TInt32()); val r = Ref(genUID(), TInt32()); val left = ArrayRange(0, 10, 1); val right = MakeArray(Seq(2, 5, 8), TArray(TInt32())); assertEvalsTo(; ArrayLeftJoinDistinct(; left, right,; l.name, r.name,; l - r,; If(IsNA(r), l, 0)),; IndexedSeq(0, 1, 0, 3, 4, 0, 6, 7, 0, 9))(; ExecStrategy.javaOnly; ); }; ```. Fails with: `java.lang.IllegalStateException: Bytecode failed verification 1`. ```; Verify Output 2 for is/hail/codegen/generated/C1:; org.objectweb.asm.tree.analysis.AnalyzerException: Error at instruction 478: Argument 2: expected I, but found J; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6827:0,Test,Test,0,https://hail.is,https://github.com/hail-is/hail/issues/6827,4,"['Test', 'assert', 'test']","['Test', 'assertEvalsTo', 'testArrayLeftJoin']"
Testability,"TestNG (appears to) allocates every class in the classpath matching the package glob. I assume this is to check if any of these are `instanceof` `TestNGSuite`. The Azure SDK depends on `rector-netty-core` which includes some classes which reference interfaces *not included in its required dependencies*. These classes are meant to be used only when those optional dependencies are present. They should not be willy-nilly allocated, but, of course, we told TestNG to go willy-nilly allocating everything.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13459:0,Test,TestNG,0,https://hail.is,https://github.com/hail-is/hail/pull/13459,3,['Test'],"['TestNG', 'TestNGSuite']"
Testability,"TestNG Suite from JAR File Fails to Delete Temporary Copy of Suite File (Steven Jubb); Fixed: GITHUB-2818: Add configuration key for callback discrepancy behavior (Krishnan Mahadevan); Fixed: GITHUB-2819: Ability to retry a data provider in case of failures (Krishnan Mahadevan); Fixed: GITHUB-2308: StringIndexOutOfBoundsException in findClassesInPackage - Surefire/Maven - JDK 11 fails (Krishnan Mahadevan); Fixed: GITHUB:2788: TestResult.isSuccess() is TRUE when test fails due to expectedExceptions (Krishnan Mahadevan); Fixed: GITHUB-2800: Running Test Classes with Inherited <a href=""https://github.com/Factory""><code>@​Factory</code></a> and <a href=""https://github.com/DataProvider""><code>@​DataProvider</code></a> Annotated Non-Static Methods Fail (Krishnan Mahadevan); New: Ability to provide custom error message for assertThrows\expectThrows methods (Anatolii Yuzhakov); Fixed: GITHUB-2780: Use SpotBugs instead of abandoned FindBugs; Fixed: GITHUB-2801: JUnitReportReporter is too slow; Fixed: GITHUB-2807: buildStackTrace should be fail-safe (Sergey Chernov); Fixed: GITHUB-2830: TestHTMLReporter parameter toString should be fail-safe (Sergey Chernov); Fixed: GITHUB-2798: Parallel executions coupled with retry analyzer results in duplicate retry analyzer instances being created (Krishnan Mahadevan)</p>; <p>7.6.1; Fixed: GITHUB-2761: Exception: ERROR java.nio.file.NoSuchFileException: /tmp/testngXmlPathInJar-15086412835569336174 (Krishnan Mahadevan); 7.6.0; Fixed: GITHUB-2741: Show fully qualified name of the test instead of just the function name for better readability of test output.(Krishnan Mahadevan); Fixed: GITHUB-2725: Honour custom attribute values in TestNG default reports (Krishnan Mahadevan); Fixed: GITHUB-2726: <a href=""https://github.com/AfterClass""><code>@​AfterClass</code></a> config method is executed for EACH <a href=""https://github.com/Test""><code>@​Test</code></a> method when parallel == methods (Krishnan Mahadevan); Fixed: GITHUB-2752: TestListener i",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12665:11824,assert,assertThrows,11824,https://hail.is,https://github.com/hail-is/hail/pull/12665,2,"['Test', 'assert']","['TestHTMLReporter', 'assertThrows']"
Testability,"TestNGSuite ""assert"" is not serializable",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/39:0,Test,TestNGSuite,0,https://hail.is,https://github.com/hail-is/hail/issues/39,2,"['Test', 'assert']","['TestNGSuite', 'assert']"
Testability,Tested and working.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6559:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/6559,1,['Test'],['Tested']
Testability,"Tested export_vcf and confirmed that an `rsid` row field gets put into ID, but this is not documented.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4047:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/4047,1,['Test'],['Tested']
Testability,Tested in a dev deploy'd load test that # of add_attempt_resources queries == # of jobs instead of double as you can currently observe in default.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12461:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/12461,2,"['Test', 'test']","['Tested', 'test']"
Testability,"Tested on my laptop, works now.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7944:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/7944,1,['Test'],['Tested']
Testability,Tested the following in GCP and Azure:; 1. `hailctl auth login` on the current release (pre-OAuth2) and `hailctl auth logout` on `main`; 2. Both login/logout on `main`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13578:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/13578,5,"['Test', 'log']","['Tested', 'login', 'logout']"
Testability,Tested this locally after uploading a tiny dataset to all three clouds.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11090:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/11090,1,['Test'],['Tested']
Testability,Tested this manually to make sure that the build-worker instance ran to completion (it fails on `apt-get update` currently),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10411:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/10411,1,['Test'],['Tested']
Testability,"Tested using code from [zulip]. After this change, the same pipeline went from 135 MiB peak usage per; partition, to 808 KiB. [zulip]: https://hail.zulipchat.com/#narrow/stream/123010-Hail-Query.200.2E2.20support/topic/Hail.20off-heap.20memory/near/270245855",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11312:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/11312,1,['Test'],['Tested']
Testability,Tested with check.count = 1000. Will easily plug into read once prune fields goes in.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3667:0,Test,Tested,0,https://hail.is,https://github.com/hail-is/hail/pull/3667,1,['Test'],['Tested']
Testability,Testing improvements.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/586:0,Test,Testing,0,https://hail.is,https://github.com/hail-is/hail/pull/586,1,['Test'],['Testing']
Testability,Testing is sparse but my next step is property-based anyway.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/92:0,Test,Testing,0,https://hail.is,https://github.com/hail-is/hail/pull/92,1,['Test'],['Testing']
Testability,Testing website build,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2028:0,Test,Testing,0,https://hail.is,https://github.com/hail-is/hail/pull/2028,1,['Test'],['Testing']
Testability,Tests against a scala mutable.Set and a random batch of inserts.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6771:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/6771,1,['Test'],['Tests']
Testability,Tests are approximate but should be safe.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6769:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/6769,1,['Test'],['Tests']
Testability,Tests fail on GCP due to NPE,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2174:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/issues/2174,1,['Test'],['Tests']
Testability,"Tests fail, segmentation fault, issue in copyFromType added test in PBaseStruct, haven't solved yet, no remaining time today.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7958:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/7958,2,"['Test', 'test']","['Tests', 'test']"
Testability,"Tests not passing, not sure why yet. Errors are MatchError. Stacked on #6421, will see if I can unwind; ```sh; > Task :test; Running test: Test method bitPackedVectorCorrectWhenOffsetNotZero(is.hail.methods.LocalLDPruneSuite). Gradle suite > Gradle test > is.hail.methods.LocalLDPruneSuite.bitPackedVectorCorrectWhenOffsetNotZero PASSED; Running test: Test method testBitPackUnpack(is.hail.methods.LocalLDPruneSuite). Gradle suite > Gradle test > is.hail.methods.LocalLDPruneSuite.testBitPackUnpack FAILED; scala.MatchError at LocalLDPruneSuite.scala:222; Running test: Test method testIsLocallyUncorrelated(is.hail.methods.LocalLDPruneSuite). Gradle suite > Gradle test > is.hail.methods.LocalLDPruneSuite.testIsLocallyUncorrelated FAILED; org.apache.spark.SparkException at LocalLDPruneSuite.scala:214; Caused by: scala.MatchError; Running test: Test method testR2(is.hail.methods.LocalLDPruneSuite). Gradle suite > Gradle test > is.hail.methods.LocalLDPruneSuite.testR2 FAILED; scala.MatchError at LocalLDPruneSuite.scala:244; Running test: Test method testRandom(is.hail.methods.LocalLDPruneSuite). Gradle suite > Gradle test > is.hail.methods.LocalLDPruneSuite.testRandom FAILED; java.lang.AssertionError at LocalLDPruneSuite.scala:323; Caused by: scala.MatchError at LocalLDPruneSuite.scala:323; ```. cc @tpoterba",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6425:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/6425,24,"['Assert', 'Test', 'test']","['AssertionError', 'Test', 'Tests', 'test', 'testBitPackUnpack', 'testIsLocallyUncorrelated', 'testRandom']"
Testability,"Tests now take ~2m40 on my laptop. With -Dcheck.size=100 -Dcheck.count=1, they take about ~1m20. A huge part of the test time was (re)creating the SparkContext. I disabled testVSMGenIsLinearSpaceInSizeParameter. It doesn't quite make sense to me to be spending half our test time budget verifying ... that our tests aren't taking too long. Happy to discuss it on Monday. Following Jackie's original code, the duplicated logic and defaults for check settings in Prop and gradle are needed to include the check settings (in particular, the seed) in the gradle output when you're not using `--info` or similar. I couldn't figure out another way to do it. Changes:. Set seed with -Dcheck.seed=seed, random with -Dcheck.seed=random.; Added SparkManager to store sc and sqlContext.; Reuse sc between tests.; Added -Dcheck.size=size and -Dcheck.count=count.; Removed Prop.check with count, size options.; Disabled testVSMGenIsLinearSpaceInSizeParameter.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/586:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/586,8,"['Test', 'log', 'test']","['Tests', 'logic', 'test', 'testVSMGenIsLinearSpaceInSizeParameter', 'tests']"
Testability,"Tests pass. Have an adjustment to the assertPType to make the check deep on PStruct and PArray . Happy to adjust interface, add additional assertions. The todo comments will all go, just to raise a few questions I had. Also, I preferred to pass false to the constructors, instead of relying on default, because this is more explicitly indicating intentions, and defaults only auto-populate for those using IDEs. Similarly, I explicitly checked booleans, but I suspect the preference is not that. cc @cseed, @chrisvittal, @patrick-schultz, @catoverdrive",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6912:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/6912,3,"['Test', 'assert']","['Tests', 'assertPType', 'assertions']"
Testability,"Tests scale of commands, to some degree.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7864:0,Test,Tests,0,https://hail.is,https://github.com/hail-is/hail/pull/7864,1,['Test'],['Tests']
Testability,Testtttt,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3968:0,Test,Testtttt,0,https://hail.is,https://github.com/hail-is/hail/pull/3968,1,['Test'],['Testtttt']
Testability,"The 'build' docs page implies that the only requirement for running hail is Gradle. However, I've just tried to build hail on Debian Jessie and Ubuntu 16.04, and both failed in different ways. On Jessie, I was able to figure out that the version of Gradle was too old. On Ubuntu 16.04, I get. ```; :compileJava UP-TO-DATE; :compileScala FAILED. FAILURE: Build failed with an exception. * What went wrong:; A problem was found with the configuration of task ':compileScala'.; > No value has been specified for property 'zincClasspath'. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED; ```. A quick Google around doesn't reveal any obvious answers to this. What version of Gradle is needed? Is Scala a prerequisite? It would be very useful to provide detailed instructions on how to build hail from scratch on a fresh installation of some Linux distribution.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/594:642,log,log,642,https://hail.is,https://github.com/hail-is/hail/issues/594,1,['log'],['log']
Testability,"The Encoder/Decoder methods weren't handling non-struct values correctly (this is mostly fine from an Encoder/Decoder perspective, since they don't handle non-struct/array values). I fixed this in #6727 because I wanted to encode arbitrary values, and changed EmitPackDecoder/EmitPackEncoder to handle arbitrary values so that I could test this. I also pulled out some more peripheral changes from that PR, mostly defining some (currently unused, untested) methods like `Code.orEmpty` and a version of `newMethod` that lets you give the method a real name for ease of debugging, as well as some more changes to move more load/store methods off of region instances and onto the Region object.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6759:335,test,test,335,https://hail.is,https://github.com/hail-is/hail/pull/6759,1,['test'],['test']
Testability,"The FS tests were accidentally disabled because pytest-asyncio was never included in dev/requirements.txt (as it should have been). As a result, all the `async def` tests were (silently) ignored by pytest.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12520:7,test,tests,7,https://hail.is,https://github.com/hail-is/hail/pull/12520,2,['test'],['tests']
Testability,The GCP terraform got into a bit of an invalid state during an ambitious but ultimately fragmented migration I was trying to make to modularize the terraform code. The `sql_config` module assumed by the terraform code no longer exists (!) and I've reinstated the database server config resource for the time being until the GCP terraform code is ready to use the new `infra/k8s` module. This also includes the following fixes/cleanup:. - A GSA key/secret for grafana that is required for grafana/create_accounts to work correctly; - Deleting resources related to the `gcr_pull` service account that no longer exists since it isn't used in our codebase.; - Added the cluster role/binding for batch that it needs to use to access developer/test namespaces. This will become relevant soon when I introduce the rest of the changes from #10866 that I now intend to do more gradually. I tested this by applying my changes to my own cluster and restarting auth/auth-driver to validate that the sql config works as intended and using the admin-pod to verify that the `sql-config.cnf` is also correct.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11009:738,test,test,738,https://hail.is,https://github.com/hail-is/hail/pull/11009,2,['test'],"['test', 'tested']"
Testability,"The IP address we got from `address` might be the IP of a pod that has been removed. When this happens; we get connection failed errors, which we treat as ""transient"". This change modifies the test to also; get a new IP address each time a transient error occurs. Not ideal, but more correct than previously.; There are forthcoming changes that I hope will more pervasively address this problem.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9963:193,test,test,193,https://hail.is,https://github.com/hail-is/hail/pull/9963,1,['test'],['test']
Testability,"The LDMatrix apply method calls collect on more or less the entire set of variants twice. Noticed this taking a lot of time in testing lmmreg pipeline, think it's worth trying to eliminate one if possible.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2009:127,test,testing,127,https://hail.is,https://github.com/hail-is/hail/issues/2009,1,['test'],['testing']
Testability,The PR adds support for skipping Scala `SchedulerSuite` unit tests by setting a `HAIL_TEST_SKIP_SCHEDULER` environment variable.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6768:61,test,tests,61,https://hail.is,https://github.com/hail-is/hail/pull/6768,1,['test'],['tests']
Testability,"The RNGSplit emitter assumed the components of `dynBitstring` were always inferred to be required, but it seems to be impossible to construct the bitstrings in a way that the requiredness inference can always see that. This first makes the type of `dynBitstring` more constrained to simplify the emitter. Before it was allowed to be a single long, or an arbitrarily nested tuple all of whose leaves are longs. But I believe only flat tuples are actually being generated, so this makes that the enforced type. Then the emitter asserts all fields are present at runtime.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12060:526,assert,asserts,526,https://hail.is,https://github.com/hail-is/hail/pull/12060,1,['assert'],['asserts']
Testability,The ServiceBackend is not yet fast enough to serially execute huge numbers of tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10944:78,test,tests,78,https://hail.is,https://github.com/hail-is/hail/pull/10944,1,['test'],['tests']
Testability,"The [VCF 4.2 spec](https://samtools.github.io/hts-specs/VCFv4.2.pdf) says:; > The Description value must be surrounded by double-quotes. Double-quote character can be escaped with backslash \ and backslash as \\\\. `hl.export_vcf` does not escape double quotes in descriptions. For example:; ```; ds = hl.import_vcf(""hail/src/test/resources/sample.vcf""); meta = hl.get_vcf_metadata(""hail/src/test/resources/sample.vcf""); meta[""info""][""AF""][""Description""] = 'foo ""bar""'; hl.export_vcf(ds, ""test.vcf"", metadata=meta); ```. ```; $ grep ID=AF test.vcf; ##INFO=<ID=AF,Number=A,Type=Float,Description=""foo ""bar"""">. $ bcftools view -h test.vcf; [E::bcf_hdr_parse_line] Could not parse the header line: ""##INFO=<ID=AF,Number=A,Type=Float,Description=""foo ""bar"""">""; [W::bcf_hdr_parse] Could not parse header line: ##INFO=<ID=AF,Number=A,Type=Float,Description=""foo ""bar"""">; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9782:326,test,test,326,https://hail.is,https://github.com/hail-is/hail/issues/9782,5,['test'],['test']
Testability,"The [documented](https://hail.is/docs/0.2/getting_started_developing.html#building-the-docs-and-website) process for building documentation is:; ```; cd hail; make docs-no-test; ```. That now fails with; ```; Warning, treated as error:; html_extra_path entry '/path/to/hail/hail/build/docs/../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../www/hail-logo-cropped.png' does not exist; make[1]: *** [html] Error 2; make: *** [docs-no-test] Error 2; ```. It looks like the source of the problem is that docs/conf.py can't find the `www` directory.; https://github.com/hail-is/hail/blob/0b3823af5310a735bc9544fb73308f82426292be/hail/python/hail/docs/conf.py#L225-L232. I'm guessing this is related to changes in #8923.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8940:172,test,test,172,https://hail.is,https://github.com/hail-is/hail/issues/8940,3,"['log', 'test']","['logo-cropped', 'test']"
Testability,"The `BatchPoolExecutor` assumes, incorrectly, that the default number of CPUs for; a batch job is 1. This is not true in test and development environment. I avoid explicitly setting the value if it is `None`. This choice preserves the; default value in this environment. I set the thread limit to 1 if the CPU is `None`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9462:121,test,test,121,https://hail.is,https://github.com/hail-is/hail/pull/9462,1,['test'],['test']
Testability,"The `BlockingInputBuffer` allocates a somewhat large array of; bytes each time it is allocated. As such, it is important to avoid; allocating a `BlockingInputBuffer` for each row if each row is; significantly smaller than the buffer size. This change removes problematic methods from `RegionValue`, `RVD`,; and `CodecSpec` that have poor performance. In every case, a small; code change enables one allocation per-partition. This required the; implementation of `RestartableByteArrayInputStream` which is a thread-; unsafe version of `ByteArrayInputStream` that, crucially, can; be restarted with a new `Array[Byte]`. ---. I rebased this off of my shuffler branch. With this change on the shuffler branch (which otherwise didn't change Spark shuffles), I saw these benchmark results:; ```; # hailctl dev benchmark compare more-allocs.json fewer-allocs.json; Name Ratio Time 1 Time 2; ---- ----- ------ ------; shuffle__key_rows_by_mt 105.2% 25.528 26.860; shuffle__key_rows_by_4096_byte_rows 102.7% 1.052 1.081; shuffle__key_rows_by_65k_byte_rows 102.7% 19.311 19.832; shuffle__order_by_10m_int 47.0% 93.554 44.011; ----------------------; Geometric mean: 85.0%; Simple mean: 89.4%; Median: 102.7%; ```. The first benchmark is dominated by LZ4 calls in Kryo. The second and third benchmarks are dominated by the construction of the MT. I suspect this is due to unnecessary data copying (when Hail constructs an array of structs it creates the structs out of line and copies them into place).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7108:765,benchmark,benchmark,765,https://hail.is,https://github.com/hail-is/hail/pull/7108,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"The `HailContext.getOrCreate` method seems to have been broken in #5512. This patch fixes the issue and adds a regression test so that it won't break again. Since this test must add create a new Hail context, I had to add a gradle task that runs every suite in a separate JVM. I'm not a gradle expert, so if there's a simpler way to accomplish this execution mode, feel free to suggest :).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5871:122,test,test,122,https://hail.is,https://github.com/hail-is/hail/pull/5871,2,['test'],['test']
Testability,"The `LocalBackend` recently was changed to include a call to `async_to_blocking` but does not apply `nest_asyncio`, so using the local backend in a jupyter notebook breaks. I lifted the application of `nest_asyncio` from the `ServiceBackend` to the super class. Should we add a test that runs in its own python session to make sure that this is caught?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13614:278,test,test,278,https://hail.is,https://github.com/hail-is/hail/pull/13614,1,['test'],['test']
Testability,"The `MatrixEntriesTable` lowering rule was broken. It fails when the input `MatrixTable` has multiple key fields, which appear out of order in the row struct. `MatrixEntriesTable` has to do an `TableAggregateByKey`, which makes a table with row type `Struct{keyFields..., aggResult}`. In particular, it rearranges the key fields to the key order. Then the later; ```scala; mapRows('row.dropFields(toExplode).insertStruct('row (toExplode),; ordering = Some(x.typ.rowType.fieldNames.toFastIndexedSeq))); ```; fails, because it tries to put the key fields back in their original order. I've fixed this by changing the above line to a `mapRows(makeStruct(...))`, but I don't see any good reason for the restriction that `InsertFields` must preserve the relative ordering of old fields. Another fix, which I prefer, is to change the typecheck rule for `InsertFields` to; ```scala; case x@InsertFields(old, fields, fieldOrder) =>; fieldOrder.foreach { fds =>; val fieldsMap = scala.collection.mutable.Map(; old.typ.asInstanceOf[TStruct].fields.map(f => f.name -> -f.typ): _*); fieldsMap ++= fields.map { case (name, ir) => name -> ir.typ }. assert(fds.forall { f =>; fieldsMap.get(f).forall(_ == -x.typ.fieldType(f)); }); assert(fds.length == x.typ.size); ```; As far as I can tell, code generation for `InsertFields` is safe for this relaxed typechecking. @tpoterba Can you weigh in on the `InsertFields` semantics?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6882:1135,assert,assert,1135,https://hail.is,https://github.com/hail-is/hail/pull/6882,2,['assert'],['assert']
Testability,"The `UserData` dict is loaded from the `auth` database and passed around to different services, but mostly to look at the current user's username or some other metadata. Because it's in so many places I'm a little worried about it getting logged, which we can't do because it contains the user's `session_id`. But `userdata['session_id']` is used in so few places that I removed `session_id` from the dict and retrieve it explicitly where it's needed.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13618:239,log,logged,239,https://hail.is,https://github.com/hail-is/hail/pull/13618,1,['log'],['logged']
Testability,"The `assert(_ptype2 == null)` check in InferPType is breaking here on; certain complex pipelines in a way I don't want to debug. There's no IR sharing within the IR (see utility I added), but there; must be subtrees that are inferred multiple times in different Compile; calls. This is a safe stop-gap.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8031:5,assert,assert,5,https://hail.is,https://github.com/hail-is/hail/pull/8031,1,['assert'],['assert']
Testability,"The `delete_azure_batch_instances` step is failing on various PRs with the error `jq: command not found`. This appears to be because we do not pin the version for the `mcr.microsoft.com/azure-cli` image, and while that image was previously based on the Alpine image, [now it is based on the Azure Linux image](https://learn.microsoft.com/en-us/cli/azure/run-azure-cli-docker), and does not appear to have `jq` (or `kubectl`) preinstalled on it. This change updates the commands run in the `azure-cli` container for this CI step to install `jq` and `kubectl` via `curl` before running the relevant commands. The `curl` commands were tested locally by running `docker run -it mcr.microsoft.com/azure-cli` and trying them out in the image's shell. This change also adds the installation commands in the other place where this image is used (when cleaning up from `buildImage2` jobs that are run in Azure).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14677:632,test,tested,632,https://hail.is,https://github.com/hail-is/hail/pull/14677,1,['test'],['tested']
Testability,The `fails_in_azure` decorator uses the `HAIL_CLOUD` environment variable and it wasn't supplied to tests. The decorator itself looks fine.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11132:100,test,tests,100,https://hail.is,https://github.com/hail-is/hail/pull/11132,1,['test'],['tests']
Testability,"The `log.exception` in the wrapping try/except means we log anything that raises as an error, even things like 503's and 403's from the workers which we explicitly log as info. I think we're abusing exception handling here to catch a potentially non-exceptional failure mode which is ""we couldn't schedule, we need to add back those cores"". Didn't rework things though, just pushed the exception logging in to the only chunk of code that wasn't already in a nested try/except.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11715:5,log,log,5,https://hail.is,https://github.com/hail-is/hail/pull/11715,4,['log'],"['log', 'logging']"
Testability,"The `notebook` and `workshop` services were incorrectly pointing to the python notebook app instead of its nginx proxy, which handles proxying to notebook workers. In #10250 I added back https to the notebook python app and accidentally changed the nginx -> notebook worker connection `https`, where it should not be. These combined meant that notebook was unable to proxy to notebook workers. I deployed this into default and verified that I can get to jupyter, and also run scale tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10292:482,test,tests,482,https://hail.is,https://github.com/hail-is/hail/pull/10292,1,['test'],['tests']
Testability,"The assumption is that the default_ns namespace has a database-server-config that has credentials for the database instance which can be used to create various databases. This is present in default. We will require this is also present for dev namespaces, database-server-config will be the user's private database. devs shouldn't have access to the root database credentials. When we create a test default_ns when running the tests, we also create a ""test_instance"" database that will be used as the database instance inside the tests. database-server-config is only used by CI. Also, there's no reason to use the credentials from batch-pods anymore, so I use the one from default. This will need to go in before I can finish https://github.com/hail-is/hail/pull/7674",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7683:394,test,test,394,https://hail.is,https://github.com/hail-is/hail/pull/7683,3,['test'],"['test', 'tests']"
Testability,"The biggest benefit of this PR is that I declare most of the pool state in one file so that we have one place to look to figure out what the tests are doing. We pay about 2 USD per PR test, which is not very high but still higher than I would like. I investigated why and looked at eight recent PR tests (all after Daniel's QoB test reduction):. 1. https://grafana.hail.is/d/8Kldmmynk/job-analytics?from=1695065243258&to=1695070128973&var-namespace=pr-13643-default-w484n4ke6oeg&orgId=1; 2. https://grafana.hail.is/d/8Kldmmynk/job-analytics?from=1694628837271&to=1694632585473&var-namespace=pr-12468-default-y8okmle5k65x&orgId=1; 3. https://grafana.hail.is/d/8Kldmmynk/job-analytics?from=1695078157872&to=1695080578446&var-namespace=pr-13644-default-phtb7scq3qln&orgId=1; 4. https://grafana.hail.is/d/8Kldmmynk/job-analytics?from=1694729270680&to=1694730449193&var-namespace=pr-13376-default-biulo4i0wohp&orgId=1; 5. https://grafana.hail.is/d/8Kldmmynk/job-analytics?from=1694628896138&to=1694632029521&var-namespace=pr-12468-default-y8okmle5k65x&orgId=1; 6. https://grafana.hail.is/d/8Kldmmynk/job-analytics?from=1695077856969&to=1695080563275&var-namespace=pr-13644-default-phtb7scq3qln&orgId=1; 7. https://grafana.hail.is/d/8Kldmmynk/job-analytics?from=1694625081745&to=1694626754800&var-namespace=pr-13430-default-hf2v0q29kgqy&orgId=1; 8. https://grafana.hail.is/d/8Kldmmynk/job-analytics?from=1694729252321&to=1694730683820&var-namespace=pr-13376-default-biulo4i0wohp&orgId=1. In every case, we spin up 32 cores of highcpu VMs but, apparently, never use them. They are live for 20-40 minutes depending on the tests. For the non-preemptible VM, thats about 0.40 USD for 30 minutes. We use 16 highmem cores once for about two minutes but we otherwise let them run idle the whole time. This PR accepts that we will wait 2-3min for a highmem to start when we need it. In exchange, we save about a dollar per PR (50%). I am also investigating why we seem to keep 80 cores alive for about 10 minutes de",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13667:141,test,tests,141,https://hail.is,https://github.com/hail-is/hail/pull/13667,4,['test'],"['test', 'tests']"
Testability,"The capacity on the cache is pretty arbitrary, but given that bunches are going to get churned through very quickly and then never used again, it seemed nice to have the assertion that every layer of the cache is always small and shouldn't be an issue to search through in a blocking manner. I tested this with a dev-deployed load-test and observed the number of `get_token_start_id` queries drop from O(jobs) to ~4 per second at max throughput. No difference in profiling, this is just an attempt to reduce the number of queries we're hitting the database with.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12023:170,assert,assertion,170,https://hail.is,https://github.com/hail-is/hail/pull/12023,3,"['assert', 'test']","['assertion', 'test', 'tested']"
Testability,"The change log only supports (#NNNN) for PRs and issues, not a comma separated; list of #NNNNs inside parentheses. See: https://hail.is/docs/0.2/change_log.html#bug-fixes; for the issue currently. A sed rule in the makefile implements this syntax.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8824:11,log,log,11,https://hail.is,https://github.com/hail-is/hail/pull/8824,1,['log'],['log']
Testability,"The coalesce is necessary right now because Azure has no resources so the result is None rather than 0. Since the cost is always 0, then the tests that test billing limits fail. In addition, the tests that choose whether we select the cheapest machine won't work because all machines cost $0/hr right now due to no billing setup. Instead, we get the first pool alphabetically (highcpu). . The reason for the database upgrade is because we're selecting the first pool alphabetically which is highcpu. The default settings don't leave enough disk space and thus require an external disk. To circumvent this, I just made the worker data disk size the same as in GCP -- 375Gi -- for the highcpu pool.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11087:141,test,tests,141,https://hail.is,https://github.com/hail-is/hail/pull/11087,3,['test'],"['test', 'tests']"
Testability,The combiner benchmarks broke following the deletion of the `experimental.vcf_combiner` python package. Re-implement them in terms of the `vds` package.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13956:13,benchmark,benchmarks,13,https://hail.is,https://github.com/hail-is/hail/pull/13956,1,['benchmark'],['benchmarks']
Testability,"The combiner needs tests. Given it's general newness, those tests may not be anything other than comparing output to make sure it doesn't change, but it needs tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5390:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/issues/5390,3,['test'],['tests']
Testability,"The conceptual change here is we want to parameterize all batch related tables to have a new job group ID that I've set to **0** for the root job group. We need to make sure all future inserts / updates into the batches table are propagated to the new job groups table. When we create a batch now, we also create the corresponding entries into the job groups and job group parents tables. I chose the root job group to be 0 as I think conceptually, the client should start numbering job groups at 1 and not know there is a hidden root job group being created under the hood. I'm not wedded to this. I tried to check for all the indices that would be needed in my prototype. It's possible I missed one or two, but it's not a big deal to add it later. I don't think we need to test this on a populated database (dev deploy main, submit jobs, then run the migration), but let me know if you think that would be helpful.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13475:775,test,test,775,https://hail.is,https://github.com/hail-is/hail/pull/13475,1,['test'],['test']
Testability,"The constructor to the VDS Combiner has this sanity check:; https://github.com/hail-is/hail/blob/3e0b2131eafa075e406d674c2d5e847c2f06f8cc/hail/python/hail/vds/combiner/variant_dataset_combiner.py#L226-L227. A complete combiner will not have any vdses or gvcfs present, so that sanity check will fail and the combiner will be rerun in its entirety. It is a valid state for a `VariantDatasetCombiner` to have no vdses or gvcfs (when it is done), and so the fix is straightforward, remove the sanity check. A similar one already exists in `new_combiner` and `VariantDatasetCombiner.__init__` isn't really part of the public interface. I'm undecided if we should add a different sanity check to `maybe_load_from_saved_path` to see if the final file is present if the combiner is done. Though better logging will be added to that function so that the message from the exception is logged.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14079:795,log,logging,795,https://hail.is,https://github.com/hail-is/hail/issues/14079,2,['log'],"['logged', 'logging']"
Testability,"The core of the change is the MakeArray.unify method, and Python only passing the type when constructing an empty array. I added strong assertions about types. to that and the node constructor.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4341:136,assert,assertions,136,https://hail.is,https://github.com/hail-is/hail/pull/4341,1,['assert'],['assertions']
Testability,"The crux of this PR is the 9 line change in `file_store.py` -- we shouldn't decode job logs to `str` before uploading because we can't trust jobs to output only valid UTF-8 to stdout. The FS can take bytes anyway so it is an unnecessary conversion. The rest of the complexity of this PR is figuring out how to communicate those logs over the Batch API in a backwards-compatible and straight-forward way. What makes that tricky is that when we say ""job log"" in the code we mostly talk about a dictionary or JSON object of container to log string. Valid JSON must be UTF-8, so JSON starts to make less and less sense for sending log files. Log files are easy to send though if we just want one, so I added an endpoint to request the log for a specific container in a job and we can easily fulfill that without unnecessary encoding/decoding between str and bytes. Resolves #12666",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12666:87,log,logs,87,https://hail.is,https://github.com/hail-is/hail/pull/12666,7,"['Log', 'log']","['Log', 'log', 'logs']"
Testability,"The current TDT command tests for transmission disequilibrium for each variant across a number of trios. However, it would be helpful to get transmission information on each parent-proband trio as well, similar to how Mendelian-inconsistent variants are identified on Hail. Would this be possible?; Thanks :)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1055:24,test,tests,24,https://hail.is,https://github.com/hail-is/hail/issues/1055,1,['test'],['tests']
Testability,"The current `on_cleanup` code carefully attempts to close resources in the correct order (if B depends on A, we should close B before we close A). Doing so is pretty error prone though and we have messed it up in the past, leading to noisy error logs when pods are shut down. If we instead push `.close` methods onto a stack immediately after they are initialized, the exit stack cannot be executed in the wrong order.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14172:246,log,logs,246,https://hail.is,https://github.com/hail-is/hail/pull/14172,1,['log'],['logs']
Testability,"The current implementation of `Container.delete`,; ```python; async def delete(self):; log.info(f'deleting {self}'); self.deleted_event.set(); await self.delete_container(); ```. provokes a race between the `run` task and the `delete` task. The former sees the `deleted_event`, raises and jumps to `delete_container`, so both tasks might be trying to delete the container at the same time. This races here,; ```python; if self.container_is_running():; try:; log.info(f'{self} container is still running, killing crun process'); self.process.terminate(); self.process = None; await check_exec_output('crun', 'kill', '--all', self.container_name, 'SIGTERM'); except asyncio.CancelledError:; raise; except Exception:; log.exception('while deleting container', exc_info=True). ```; where we might queue two `crun kill` calls, the second of which fails because it cannot find any such container. Calling `delete_container` from within the `delete` method is a remnant from an older implementation of deletion, before we used `deleted_event` to explicitly signal to the `run` task that it's time to wrap things up. This is no longer necessary. The simplified way to think about deletion now is:. - Calling `Container.delete` just sets an `asyncio.Event` that the container has been deleted.; - Anything in the `run` task of the container that can be interrupted by a deletion waits on that event and short circuits the run process if it is set.; - The `run` task is the only task that calls `delete_container`, and always calls it when it is done.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10714:87,log,log,87,https://hail.is,https://github.com/hail-is/hail/pull/10714,3,['log'],['log']
Testability,"The current implementation of piping into the worker's process and calling `readline` fails on log lines that are greater than 64KiB. This directs the container's stdout/stderr to a log file in their XFS project, so a job cannot blow up the worker with excessive logging. It then just calls `read` on the entire log file when requested, so there still is some issue of loading the log into memory, but no more so than currently exists. The added test currently fails in default.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10683:95,log,log,95,https://hail.is,https://github.com/hail-is/hail/pull/10683,6,"['log', 'test']","['log', 'logging', 'test']"
Testability,The current lack of this guard means we log exceptions when users submit jobs with images that don't exist or when users cancel their jobs (`ContainerDeletedError`). We do this check elsewhere but looks like this line slipped through.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14253:40,log,log,40,https://hail.is,https://github.com/hail-is/hail/pull/14253,1,['log'],['log']
Testability,The database name `test-instance` is causing trouble in: https://github.com/hail-is/hail/pull/7856,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7857:19,test,test-instance,19,https://hail.is,https://github.com/hail-is/hail/pull/7857,1,['test'],['test-instance']
Testability,"The dataset type should not change with each stage in the combiner, so; we are able to assert the type of the combiner datasets at each stage; and prevent round trips to the backend during reading. As such, we can; remove a call to read_multiple_matrix_tables which requires spark. This sets up more changes so that we can switch on the backend and run; the combiner in query on batch.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12372:87,assert,assert,87,https://hail.is,https://github.com/hail-is/hail/pull/12372,1,['assert'],['assert']
Testability,"The default options are all false. If left all false, the user gets an clear error saying that they must include at least one entry field. This forces users to think about what they actually need to import, as it can make a big difference on, say, UKBB until we have better tech. I've updated the docs and tests accordingly. @cseed suggested that we remove BGEN v1.1 support if nobody is reliant on it anymore. I've asked on Slack. So I didn't add more complexity to support these options for BGEN v1.1. Rather this PR requires GT and GP set to true if any file is 1.1 (as explained in docs and error message). If nobody minds, we can rip out BGEN 1.1 and update the docs simultaneously in a subsequent PR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2930:306,test,tests,306,https://hail.is,https://github.com/hail-is/hail/pull/2930,1,['test'],['tests']
Testability,"The deleted assertion says that a node can't both be lifted to a let, and be the destination of lets being lifted from below. When I added it, I figured any lets being lifted from below should be able to lift all the way to the destination of this node, and I hadn't thought carefully through what would happen if that assumption weren't true. The example that breaks that assumption is when some expression `x` is used as the top level of a branch of an if, or any other spot that prevents lets from being lifted any higher, while also being used >1 times elsewhere, and `x` also contains a repeated subexpression. The other uses of `x` will be lifted out somewhere above, so `x` gets marked as being lifted. The use in the if cannot be lifted, and moreover is the destination of the lifted repeated subexpression, so `x` gets marked as being a destination. It's still true that the uses being lifted are disjoint from the uses which are destinations, but there is only one object in memory. I deleted the assertion, added a test case that would have violated it, and convinced myself that this case is actually handled correctly in general.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12819:12,assert,assertion,12,https://hail.is,https://github.com/hail-is/hail/pull/12819,3,"['assert', 'test']","['assertion', 'test']"
Testability,The deployed-sha logic seems broken.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5042:17,log,logic,17,https://hail.is,https://github.com/hail-is/hail/issues/5042,1,['log'],['logic']
Testability,"The dice came up Patrick for compiler team. From Masa via Zulip:. full pipeline is literally gt_to_gp then export_bgen. ```; import hail as hl; import atexit; import datetime. atexit.register(; lambda: hl.copy_log(f'gs://ukbb-hail/export_hardcall_bgen_{datetime.datetime.now().strftime(""%Y%m%d-%H%M%S"")}.log')). # cf. https://github.com/Nealelab/ukb_common/blob/master/saige/extract_vcf_from_mt.py; def gt_to_gp(mt, gt_location: str = 'GT', gp_location: str = 'GP'):; return mt.annotate_entries(; **{; gp_location:; hl.or_missing(; hl.is_defined(mt[gt_location]),; hl.map(lambda i: hl.cond(mt[gt_location] == i, 1.0, 0.0),; hl.range(0, hl.triangle(hl.len(mt.alleles))))); }). chrom = 1; mt = hl.read_matrix_table(f'gs://ukbb-hail/ukb31063.dosage.pGT.gwas_samples.chr{chrom}.mt'). # write bgen as well; mt = gt_to_gp(mt); hl.export_bgen(mt, f'gs://ukbb-hail/ukb31063.dosage.hard_call.gwas_samples.chr{chrom}', gp=mt.GP, varid=mt.rsid); ```; doesn't work with highmem, working now on ultramem",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8163:304,log,log,304,https://hail.is,https://github.com/hail-is/hail/issues/8163,1,['log'],['log']
Testability,"The divs for the two columns now span the whole screen, so there is room to breathe between the dev deploy and PR tables. Fixed a spacing bug in the PR tables by aligning them to the start of the flexbox column and standardized on header / searchbox / table per card. This should take up more of the screen, but is not explicitly ""centered"", basically the tables start at 0% and 50%. Unfortunately it's a painful process to fiddle with the test repo to get anything good to look at on a development CI. I'll start thinking automatically writing out test data to better test UI changes, but for now I just want to see this in main.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10121:440,test,test,440,https://hail.is,https://github.com/hail-is/hail/pull/10121,3,['test'],['test']
Testability,The docker file describes a sufficient environment to build and test hail 0.1. The Makefile wraps up Docker image production. The `hail-docs-trampoline.sh` delays the `git rev-parse` until the docs are actually built which allows `gradle downloadDependencies` to run without the `.git` folder present which allows me to cache some of the gradle dependencies once rather than per-build. `hail-ci-build-image` contains the name of a docker image in which to build and test hail 0.1. `hail-ci-build.sh` describes how to build and test hail 0.1 and populates the `artifacts` directory with the results and an index file.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4123:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/4123,3,['test'],['test']
Testability,The environment variable was getting assigned after we setup the fluentd log parameters.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13726:73,log,log,73,https://hail.is,https://github.com/hail-is/hail/pull/13726,1,['log'],['log']
Testability,"The error encountered when importing multiple VCFs with different INFO fields was not a good one. This improves the situation somewhat, by making it print the types instead of the ptypes, by calling attention to the fact that the issue is likely info fields, and by adding a test of this error message. . The situation could still be improved by pushing error ids through `TableRead`, but I have not done so yet. I will save that for a future PR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10819:275,test,test,275,https://hail.is,https://github.com/hail-is/hail/pull/10819,1,['test'],['test']
Testability,"The error message you get is this:; ```; Error from server (BadRequest): a container name must be specified for pod blog-0, choose one of: [nginx blog]; ```. This option is described in `kubectl logs --help` as:; > --all-containers=false: Get all containers logs in the pod(s).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8494:195,log,logs,195,https://hail.is,https://github.com/hail-is/hail/pull/8494,2,['log'],['logs']
Testability,The event loop is supposed to be initialized in the main thread. Sometimes; our tests get placed in the non-main thread (always a thread named Dummy-1).; Hopefully the session-scoped fixture is run in the main thread.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10153:80,test,tests,80,https://hail.is,https://github.com/hail-is/hail/pull/10153,1,['test'],['tests']
Testability,"The first few lines of a hail log look like:; ```; 2019-12-02 13:20:36 Hail: WARN: This Hail JAR was compiled for Spark 2.4.0, running with Spark 2.4.1.; Compatibility is not guaranteed.; 2019-12-02 13:20:36 SparkContext: INFO: Running Spark version 2.4.1; 2019-12-02 13:20:36 SparkContext: INFO: Submitted application: Hail; 2019-12-02 13:20:36 SparkContext: INFO: Spark configuration:; spark.app.name=Hail; spark.driver.extraClassPath=//miniconda3/envs/hail/lib/python3.7/site-packages/hail/hail-all-spark.jar; spark.executor.extraClassPath=./hail-all-spark.jar; spark.hadoop.io.compression.codecs=org.apache.hadoop.io.compress.DefaultCodec,is.hail.io.compress.BGzipCodec,is.hail.io.compress.BGzipCodecTbi,org.apache.hadoop.io.compress.GzipCodec; spark.hadoop.mapreduce.input.fileinputformat.split.minsize=0; spark.jars=file:///miniconda3/envs/hail/lib/python3.7/site-packages/hail/hail-all-spark.jar; spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator; spark.logConf=true; spark.master=local[*]; spark.repl.local.jars=file:///miniconda3/envs/hail/lib/python3.7/site-packages/hail/hail-all-spark.jar; spark.serializer=org.apache.spark.serializer.KryoSerializer; spark.submit.deployMode=client; spark.ui.showConsoleProgress=false; ```. But the hail version string isn't here! That would be helpful. The full one with the hash. Rolled the dice, came up John.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7644:30,log,log,30,https://hail.is,https://github.com/hail-is/hail/issues/7644,2,['log'],"['log', 'logConf']"
Testability,"The first series addressing https://github.com/hail-is/hail/issues/6952. If we like this, will implement Coalesce Node in a similar manner. As part of this NA node changes, so that elements of collections are set to required (effectively a hoop when taking the boolean and of requireness on element types of non-NA nodes). Implemented and tested for every collection type, besides PNDArray, because we currently don't support arrays of NDArray. This also fixes the ToDict node inference, which requires the union of top-down and bottom-up element requiredeness inference. cc @patrick-schultz @catoverdrive",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6990:339,test,tested,339,https://hail.is,https://github.com/hail-is/hail/pull/6990,1,['test'],['tested']
Testability,The following IR need tests in IRSuite:. - [x] ApplyBinaryPrimOp (per op); - [x] ApplyUnaryPrimOp (per op); - [x] ToDict; - [x] LowerBoundOnOrderedCollection (also see: https://github.com/hail-is/hail/issues/3937); - [x] ArrayFold; - [x] MakeStruct; - [x] SelectFields; - [x] GetField; - [x] MakeTuple; - [x] GetTupleElement; - [ ] TableAggregate; - [ ] MatrixAggregate; - [ ] TableWrite; - [ ] TableExport; - [ ] MatrixWrite,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4014:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/issues/4014,1,['test'],['tests']
Testability,"The following command always fails at the write stage:; ```; hail read test.in.vds annotatevariants expr -c 'va = {}' write -o test.out.vds; ```. The traceback is huge, but I've copied what I think is the relevant parts:; ```; log4j:WARN No appenders could be found for logger (org.apache.hadoop.metrics2.lib.MutableMetricsFactory).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; 17/01/17 09:24:46 INFO SparkContext: Running Spark version 2.0.2; 17/01/17 09:24:46 INFO SecurityManager: Changing view acls to: marpin; 17/01/17 09:24:46 INFO SecurityManager: Changing modify acls to: marpin; 17/01/17 09:24:46 INFO SecurityManager: Changing view acls groups to:; 17/01/17 09:24:46 INFO SecurityManager: Changing modify acls groups to:; 17/01/17 09:24:46 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(marpin); groups with view permissions: Set(); users with modify permissions: Set(marpin); groups with modify permissions: Set(); 17/01/17 09:24:46 INFO Utils: Successfully started service 'sparkDriver' on port 37801.; 17/01/17 09:24:46 INFO SparkEnv: Registering MapOutputTracker; 17/01/17 09:24:46 INFO SparkEnv: Registering BlockManagerMaster; 17/01/17 09:24:46 INFO DiskBlockManager: Created local directory at ; /tmp/hail/blockmgr-522fbeb1-5053-4884-9115-5f2af7bd912a; 17/01/17 09:24:46 INFO MemoryStore: MemoryStore started with capacity 15.8 GB; 17/01/17 09:24:46 INFO SparkEnv: Registering OutputCommitCoordinator; 17/01/17 09:24:46 INFO Utils: Successfully started service 'SparkUI' on port 4040.; 17/01/17 09:24:46 INFO SparkUI: Bound SparkUI to 0.0.0.0, and started at http://129.94.72.55:4040; 17/01/17 09:24:46 INFO Executor: Starting executor ID driver on host localhost; 17/01/17 09:24:46 INFO Utils: Successfully started service 'org.apache.s",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1260:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/issues/1260,4,"['log', 'test']","['logger', 'logging', 'test']"
Testability,"The fourth in a series of PCRelate Improvements. Sprinkling `cache` on any RDD which is used more than once dramatically improved runtime. On a benchmark program (included below) PCRelate took 36 seconds with four cores on 1000 samples and 10,000 variants. ```; from hail import *; from timeit import default_timer as timer. hc = HailContext(); vds = hc.balding_nichols_model(20, 1000, 10000).repartition(10).persist(); vds.count(). start = timer(); vds.pc_relate(5, 0.01, min_kinship=0.1, desire=""phi"").count(); end = timer(); print(end-start); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2252:144,benchmark,benchmark,144,https://hail.is,https://github.com/hail-is/hail/pull/2252,1,['benchmark'],['benchmark']
Testability,"The front-end accepted a boolean flag to make the a random BlockMatrix with a uniform distribution and would default to gaussian, whereas the backend method it's calling accepts a `gaussian` flag. Updated the front-end API to match the backend and added a test to check that matrices made explicitly uniform have no negative values and are (very likely) not gaussian.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5409:256,test,test,256,https://hail.is,https://github.com/hail-is/hail/pull/5409,1,['test'],['test']
Testability,"The goal is to have a branch that supports making more radical changes and doesn't require all the tests to pass. When merging to experimental, tests that throw `UnimplementedException` should be marked as ""skipped"" (or something) rather than failing. Figure out how to do this with TestNG/gradle.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/828:99,test,tests,99,https://hail.is,https://github.com/hail-is/hail/issues/828,3,"['Test', 'test']","['TestNG', 'tests']"
Testability,"The goal of this PR is to have all of the JVM container logs available where all the worker logs are. I tagged the entries with ""worker.log"" so they show up with the other worker log entries. However, it's plain text with no timestamp. We can improve the formatting as a separate project. Notice the two entries with ""*"" on the left instead of the normal ""I"". The design choice I made is to have the JVM containers write to a location that is static. We cannot easily change the fluentd configuration dynamically. It requires restarting the daemon which takes 1.5 seconds. Furthermore, the configuration for fluentd is on /etc/ on the host which the batch worker container cannot access. Hence, why I took the approach of specifying it in the startup script at known locations. . Before we merge this, I'd like to confirm that (a) we want these logs and (b) they don't contain any secrets.; <img width=""1585"" alt=""Screenshot 2023-06-16 at 4 06 43 PM"" src=""https://github.com/hail-is/hail/assets/1693348/0ce9f7dc-1188-4c66-ae6f-83fcc3744f95"">",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13190:56,log,logs,56,https://hail.is,https://github.com/hail-is/hail/pull/13190,5,['log'],"['log', 'logs']"
Testability,"The identity color scale (which treats the values of the ""color"" aesthetic mapping as literal hex color codes) was grouping by the color values, because their type ""tstr"" is normally a discrete type. This had the effect of reordering data unnecessarily, and creating a pointless noisy legend for the trivial color scale. This changes the identity color scale to be continuous. It also modifies the grouping logic to group by aesthetics with discrete scales, not with ""discrete types"". Now the identity color scale doesn't group or create a legend.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12089:407,log,logic,407,https://hail.is,https://github.com/hail-is/hail/pull/12089,1,['log'],['logic']
Testability,"The issue is we start billing for instances as soon as they're created with the API. However, if an instance is stuck in provisioning and never activates, we never update the start billing time to account for the lack of resource. This PR uses the `lastStartTimestamp` in the [Google REST API](https://cloud.google.com/compute/docs/reference/rest/v1/instances/get). This value is in RFC3339 format. I think this is the same format the timestamp in the activity logs, so I copied how we parse that value. If we delete the instance due to activation timeout, then we set the attempt start time to NULL so it's not billed. I couldn't find good documentation on this, but it seems like the `lastStartTimestamp` approximates what we care about for the purposes of checking for stuck workers. I checked it on an instance that was provisioning and the value was missing. Once the instance was in starting, the value was about 10 seconds after the `creationTimestamp`. . QUESTION: This does raise a question on whether we should be using the `lastStartTimestamp` when billing users if the difference is around 10 seconds. That will be a harder change, but is probably doable. We can't access the `lastStartTimestamp` through the metadata on the worker which would have been the easiest solution. We can get the compute client on the worker and access the `lastStartTimestamp` that way and set the job start time to the instance start time. I'd need to change the database for the attempts trigger to account for this. For the scenario where a job private job is cancelled while creating the instance, we would either need to make the additional API call or we just leave the time we created the instance. Thoughts?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10069:461,log,logs,461,https://hail.is,https://github.com/hail-is/hail/pull/10069,1,['log'],['logs']
Testability,"The json output now has ""config"" and ""benchmarks"" top level fields",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6826:38,benchmark,benchmarks,38,https://hail.is,https://github.com/hail-is/hail/pull/6826,1,['benchmark'],['benchmarks']
Testability,The last test for making sure PRs get merged is still a work in progress.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7434:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/7434,1,['test'],['test']
Testability,"The local backend tests only use 1 core, so this dedicates the same resources for much more parallelism.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12716:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/12716,1,['test'],['tests']
Testability,"The logic trying to infer the version of various Spark dependencies; was total garbage and almost certainly except for a few specific; cases. I was feeling aggressive. I nuked it. If we want to support; building with other versions of Spark reliably (whcih we don't test)`,; we should find another way.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8676:4,log,logic,4,https://hail.is,https://github.com/hail-is/hail/pull/8676,2,"['log', 'test']","['logic', 'test']"
Testability,"The main goal of this PR was to remove some of the vector/scalar logic from the BlockMatrixMap2 node, and to support the scalar operations on BlockMatrixMap. I basically accomplished this by taking the cases that are matched on in BlockMatrixMap2 and lifting them into the Simplify rules. The only endpoint that I believe I needed to cover was the BlockMatrix.pyExecute() one; all the others will go through the usual CompileAndEvaluate. There's another part of the PR that fixes the variable bindings, which are currently hard-coded and unchecked. I needed this to construct the right expressions for the IR expressions, so I changed it to handle variable bindings with the rest of our IR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7566:65,log,logic,65,https://hail.is,https://github.com/hail-is/hail/pull/7566,1,['log'],['logic']
Testability,"The main point here was to implement an `assertBMEvalsTo` function that works a lot like `assertEvalsTo` for IR---currently only testing existing tests through interpret and BlockMatrix, but as we move lowering things over we can also add eval strategies for existing tests to test them through the lowerer as well. I also removed a lot of the explicit BlockMatrix construction and conversions since we can handle them through the IR. (also removed the lowering test in favor of adding the lowered execStrategy to the BlockMatrixDot test as it's essentially a duplicate of that)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8291:41,assert,assertBMEvalsTo,41,https://hail.is,https://github.com/hail-is/hail/pull/8291,8,"['assert', 'test']","['assertBMEvalsTo', 'assertEvalsTo', 'test', 'testing', 'tests']"
Testability,"The memory that machines use is calculated based off of the number of cores the machine has, with a fix ratio set of cores to Gb of RAM. The code assumed a ratio of 3.75 cores: 1 Gb but this assumption does not hold outside of the n1 machine family. This PR changes the functions that calculate memory from number of cores to account for this by passing the machine_type as the main parameter rather than the worker type. Then, logic is added to use the appropriate ratio of 4:1 for the g2 family of machines.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14498:428,log,logic,428,https://hail.is,https://github.com/hail-is/hail/pull/14498,1,['log'],['logic']
Testability,The modified test catches it. I'll be updating the test further tomorrow as I make changes to BlockMatrix.from_expr and MatrixTable.writeBlockMatrix,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3087:13,test,test,13,https://hail.is,https://github.com/hail-is/hail/pull/3087,2,['test'],['test']
Testability,The most trivial loop is the loop which does not recur. I added a simple test and fixed Requiredness to handle this case.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12796:73,test,test,73,https://hail.is,https://github.com/hail-is/hail/pull/12796,1,['test'],['test']
Testability,The mounted docker has gid 412:. ```; $ kubectl logs docker-test; srw-rw---- 1 root 412 0 Jul 1 17:49 /var/run/docker.sock; ```. I tested by had this fixes it.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4444:48,log,logs,48,https://hail.is,https://github.com/hail-is/hail/pull/4444,3,"['log', 'test']","['logs', 'test', 'tested']"
Testability,"The native libraries sometimes play tricks to squeeze out better; precision if the memory layout is amenable to it. This causes some; of our tests to fail, particularly those related to transposition.; We avoid extreme values which should keep us from encountering; situations where naive arithmetic produces Infinity.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2366:141,test,tests,141,https://hail.is,https://github.com/hail-is/hail/pull/2366,1,['test'],['tests']
Testability,"The new LinearMixedModel tests require specific pandas version, for instance.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3925:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/issues/3925,1,['test'],['tests']
Testability,The new tests in scala and python both catch this.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10754:8,test,tests,8,https://hail.is,https://github.com/hail-is/hail/pull/10754,1,['test'],['tests']
Testability,The old BPE images (which still exist) are based on the full python image. The; slim image reduces the size by about 750MB. This should substantially improve; image pull on the n1-standards. I have seen image pull for this image take 136; seconds before in a test job.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9472:259,test,test,259,https://hail.is,https://github.com/hail-is/hail/pull/9472,1,['test'],['test']
Testability,"The only noticeable change after this PR is that devs will be able to access `internal.hail.is/<PR-namespace>/<service>` while it is running and see jobs submitted by tests. Well, that and you can add another developer to a dev namespace as a developer without destroying the developer's existing namespace. Subsequent PRs will introduce on-demand dev namespaces and the ability to suspend the deletion of a test namespace. New context added to the CI pipeline is treated as optional to be backward compatible with the current CI. So devs won't be able to log in to test namespaces on *this* PR but will be able to once this PR becomes main. ### What has changed; - All developers from default are now added to all test namespaces using the `add_users` build.yaml step and removed at the end of the PR run through the `delete_users` step. These use the normal create and delete API instead of copying the user's gsa from the production namespace. This relies on / tests that the delete user endpoint is properly deleting cloud identities when the users are deleted (previously broken in GCP but fixed in this PR.; - The developer role no longer implicitly deletes and recreates a corresponding namespace. I wanted adding developers to test namespaces not to have side-effects that leaked out of the namespace. A follow-up PR will incorporate the ability for a developer to request an on-demand dev namespace, which should be made a lot easier after these changes. I think this also means that we can remove some permissions from the auth K8s ServiceAccount since it no longer needs the ability to create and delete namespaces.; - A fixed-but-sufficient number of oauth2 callbacks are hard-coded into the oauth2 secret from GCP/azure and then allocated to a given namespace. This is fairly self-contained, all that needs to happen is to tell `auth` what callback to use and rewrite those callback urls in gateway to route back to the appropriate auth. This is done only for test namespaces, production ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12751:167,test,tests,167,https://hail.is,https://github.com/hail-is/hail/pull/12751,5,"['log', 'test']","['log', 'test', 'tests']"
Testability,"The only remaining references are in the datasets scripts, but those are meant as references of how we created the files, and in the `hailctl dataproc` command. I chose not to change the latter because I fear some users might still have ancient versions of `gcloud`. The reviewer should verify that I got the right version of the `gcloud` command in each case. Hopefully this resolves the bizarre error we see in test-dataproc.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12781:413,test,test-dataproc,413,https://hail.is,https://github.com/hail-is/hail/pull/12781,1,['test'],['test-dataproc']
Testability,"The original goal of this PR was avoiding `Try` when we are not using the restartability provided by semantic hashing because I strongly suspect it is related to the loss of stacktraces in exceptions. Unrelatedly, we realized the semantic hash PR changed the semantics of Query-on-Spark even when semantic hash is disabled: previously we would abort RDD writing on the first exception. In Hail 0.2.123 through 0.2.126, the semantics were changed to only crash *after* we already ran every other partition. Two bad scenarios of which I can think:. 1. Suppose the first partition fails due to OOM. We now waste time/money on the rest of the partitions even though we cannot possibly get a valid output. 2. Suppose every partition hits a permission error. Users should get that feedback after paying for O(1) partitions run, not O(N). I created two Backend paths: the normal `parallelizeAndComputeWithIndex` with its pre-0.2.123 semantics as well as `parallelizeAndComputeWithIndexReturnAllErrors` which, as the name says, returns errors instead of raising them. While making this change, I think I found two other bugs in the ""return all errors"" path, only one of which I addressed in this PR:. 1. I'm pretty sure semantic-hash-enabled QoB batch submission is broken because it uses the logical partition ids as job indices. Suppose there are 10,000 partitions, but we only need to compute 1, 100, and 1543. 0.2.126 would try to submit a batch of size 3 but whose job indices are 1, 100, and 1543. 2. Likewise, the Query-on-Spark path returns an invalid `SparkTaskContext.partitionId` which, at best, produces confusing partition filenames. I only fixed the former because it was simple to fix. I wasn't exactly sure what to do about the latter. We should fix that separately because the changes in this PR need to urgently land in the next release to avoid unexpected cost when one partition fails.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14085:1285,log,logical,1285,https://hail.is,https://github.com/hail-is/hail/pull/14085,1,['log'],['logical']
Testability,"The point of setting the following values at the end of fit() is so they won't be mutated by further calls to `compute_neg_log_lkhd`:. ```; self._residual_sq = self.sigma_sq * self._dof; self._d_alt = self._d; self._ydy_alt = self._ydy; self._xdy_alt[1:] = self._xdy; self._xdx_alt[1:, 1:] = self._xdx; ```. But when I added `h_sq_standard_error` above them, it introduced a very subtle bug by calling `compute_neg_log_lkhd` at a value `1e-4` to the right of the fit `log_gamma`. This caused both the scala and python routes to use the value of `self._residual_sq` at `log_gamma` but the value of `self._d_alt` and the rest at `log_gamma + 1e-4`. So these two routes remained consistent, but sometimes the alternate residual was coming up greater than the null residual, resulting in negative chi_sq stat. The modified tests catch this.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4180:819,test,tests,819,https://hail.is,https://github.com/hail-is/hail/pull/4180,1,['test'],['tests']
Testability,"The previous idiom was mapAnnotations(...).copy(vaSignature =; newVASignature), but this results (temporarily) in a VDS with an; incorrect va type that which causes problems for downstream changes; and assertions like typecheck.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2188:202,assert,assertions,202,https://hail.is,https://github.com/hail-is/hail/pull/2188,1,['assert'],['assertions']
Testability,"The previous location directive redirected every URL matching that prefix to `/batch`, thus losing the suffix. I'm testing right now.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8541:115,test,testing,115,https://hail.is,https://github.com/hail-is/hail/pull/8541,1,['test'],['testing']
Testability,"The problem was query was writing the job configuration to the query bucket, but workers only get the user gsa, so they were unable to read the configuration. This worked in the tests because the query and user account are both the test service account. I can remove the query-gsa-key and the hail-query bucket after this goes in.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8937:178,test,tests,178,https://hail.is,https://github.com/hail-is/hail/pull/8937,2,['test'],"['test', 'tests']"
Testability,"The real change here is changing the preemptible pool config from `preemptible = true` to `spot = true`, but the `spot` config was only available in the new provider which involved a major version upgrade. The only incompatibility was the addition of an explicit `project` input to `google_project_iam_member`, as opposed to picking it up from the provider configuration. Tested just now in my own project. If one wants to apply this change without incurring downtime for preemptible deployments, they should follow the instructions outlined in the [migrating node pools dev-docs](https://github.com/hail-is/hail/blob/main/dev-docs/kubernetes-operations.md#when-using-terraform).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12127:372,Test,Tested,372,https://hail.is,https://github.com/hail-is/hail/pull/12127,1,['Test'],['Tested']
Testability,"The real issue here is that `mt2`'s `af` field is not from the same object as `mt`, but the error message is really misleading, it moves your focus to the `mt.GT.n_alt_alleles()` which is actually fine. ```; In [13]: import hail as hl ; ...: mt = hl.balding_nichols_model(2, 5, 5) ; ...: mt2 = hl.balding_nichols_model(2, 5, 5) ; ...: mt = mt.annotate_entries(x = mt.GT.n_alt_alleles() * mt2.af) ; Initializing Hail with default parameters...; 2020-07-28 10:40:36 WARN Utils:66 - Your hostname, wm06b-953 resolves to a loopback address: 127.0.0.1; using 192.168.0.54 instead (on interface en0); 2020-07-28 10:40:36 WARN Utils:66 - Set SPARK_LOCAL_IP if you need to bind to another address; 2020-07-28 10:40:37 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; 2020-07-28 10:40:37 WARN Hail:37 - This Hail JAR was compiled for Spark 2.4.5, running with Spark 2.4.1.; Compatibility is not guaranteed.; Running on Apache Spark version 2.4.1; SparkUI available at http://192.168.0.54:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.49-c6975678edc4; LOGGING: writing to /Users/dking/projects/hail/hail/hail-20200728-1040-0.2.49-c6975678edc4.log; 2020-07-28 10:40:39 Hail: INFO: balding_nichols_model: generating genotypes for 2 populations, 5 samples, and 5 variants...; 2020-07-28 10:40:39 Hail: INFO: balding_nichols_model: generating genotypes for 2 populations, 5 samples, and 5 variants...; Traceback (most recent call last):; File ""<ipython-input-13-f638f6c0399a>"", line 4, in <module>; mt = mt.annotate_entries(x = mt.GT.n_alt_alleles() * mt2.af); File ""/Users/dking/projects/hail/hail/python/hail/expr/expressions/typed_expressions.py"", line 1988, in __mul__; return self._bin_op_numeric(""*"", other); File ""/Users/dking/projects/hail/hail/py",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9163:856,log,log,856,https://hail.is,https://github.com/hail-is/hail/issues/9163,2,['log'],"['log', 'logging']"
Testability,"The refactor in #14524, ironically to add more testing, accidentally dropped the query arguments when production CI filters by live namespaces. I'll follow up with more testing but CI is currently borked without this",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14549:47,test,testing,47,https://hail.is,https://github.com/hail-is/hail/pull/14549,2,['test'],['testing']
Testability,"The result of running `black $HAIL` and added `black --check` to the `check` targets for the affected services: batch, gear, website, benchmark-service. cc: @danking",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11205:134,benchmark,benchmark-service,134,https://hail.is,https://github.com/hail-is/hail/pull/11205,1,['benchmark'],['benchmark-service']
Testability,The return value of these functions indicates if the containing loop; should wait or if we should immediately re-call the function. This; is intended to be used to allow functions which *know* they have more; work to eagerly invoke themselves again. The use of this variable seems to have been changed to basically always; eagerly re-run during the Azure work. This change restores the original behavior:; 1. Do not wait in job private if we saw 300 records (seems likely there were; 301 or more records in the db).; 2. Do not wait in pool scheduler if we exhaust a user's share. I do not; fully follow the pool scheduler's logic. There might be something; smarter we can do. I think we should really only re-call if we believe; the db contains more ready jobs and we have available cores.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11384:624,log,logic,624,https://hail.is,https://github.com/hail-is/hail/pull/11384,1,['log'],['logic']
Testability,"The root issue here was that sometimes exc.args[0] was a string and sometimes it was a dict. When it was a string the `in` condition worked fine. When it was a dict, it was looking at the keys of the dict and not finding the error message (which is buried under a few layers). The code was unnecessarily complex. I reworked the yaml printer to be simpler and work for any multiline string. I removed the regular expression that was used to discover the worker batch when the worker jobs were in a different batch from the driver jobs. I remove all specialized debugging information in favor of the general `debug_info` methods on `Batch` and `ServiceBackend`. I also have two clear error cases: if the driver does not write its output file, then something went horribly wrong. We dump all the debug info. If we do not receive valid JSON from the driver, again, something went horribly wrong. We dump all the debug info. The only remaining exceptional case is an error purposely serialized by the QoB driver to us (with or without an error id). In particular, note that we now completely ignore the number of failing or successful jobs. That doesn't matter. If the driver sends us an output file, we use the data found there. If the driver does not send us an output file or sends us an output file without valid JSON, we dump as much debug info as possible. cc: @tpoterba for visibility on your end; cc: @iris-garden because you're in this space (albeit, the bug you're fixing is in the QoB *driver* whereas this is the *client* [nb: *client* is the Python code which starts a batch with a *driver*. A *driver* adds zero or more *worker* jobs to its batch. You're addressing an issue with how the *driver* handles errors from the *workers*. This PR simplifies the logic for how the *client* handles errors from the *driver*.]).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12470:1764,log,logic,1764,https://hail.is,https://github.com/hail-is/hail/pull/12470,1,['log'],['logic']
Testability,"The scala compiler generates an implementation of this type for every primitive type:. ```; dking@wmb16-359 # ll build/classes/main/is/hail/utils/*ArrayBuilder*.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3142 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcB$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3155 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcC$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3151 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcD$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3148 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcF$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3139 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcI$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3145 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcJ$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3148 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcS$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3209 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcV$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 3147 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder$mcZ$sp.class; -rw-r--r-- 1 dking CHARLES\Domain Users 9220 Mar 14 12:00 build/classes/main/is/hail/utils/ArrayBuilder.class; -rw-r--r-- 1 dking CHARLES\Domain Users 959 Mar 14 12:00 build/classes/main/is/hail/utils/ByteArrayBuilder.class; ```. Curiously, it generates an implementation for a list of units (that's `mcV`), which of course is just a natural number. Uses of `ArrayBuilder[T]` where `T` is primitive also do The Right Thing. You can take a look at `ArrayBuilderSuite` for an example. The only boxing present there is for the assertion library (which traffics in boxed values).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1549:1754,assert,assertion,1754,https://hail.is,https://github.com/hail-is/hail/pull/1549,1,['assert'],['assertion']
Testability,"The scheduling loop started log statements are pretty substantial. If you want to keep them, then we can revisit this once Daniel is back because he might be recording these metrics somewhere else.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11904:28,log,log,28,https://hail.is,https://github.com/hail-is/hail/pull/11904,1,['log'],['log']
Testability,"The search bar for the batch docs is broken and just says `Searching…` forever. Tracked it down to a bug in the `sphinx_rtd_theme` dependency that was fixed in a later release. The important files to look at are the `requirements.txt` files not the `pinned-requirements.txt` files as the latter bulk updated a bunch of patch releases when I regenerated them. . In the mess of version conflicts that updating a dependency appears to do here, I also removed `google-cloud-logging` as it appears to be an unused dependency and `pre-commit` because it is optional for developers and had a hard requirement on a `importlib-metadata` version that made it incompatible with other important libraries that we use. I also explicitly pinned `protobuf` as a major version upgrade that wasn't restricted by some google libraries we use broke those same google libraries that added that dependency.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12215:470,log,logging,470,https://hail.is,https://github.com/hail-is/hail/pull/12215,1,['log'],['logging']
Testability,"The serial deployment of auth and batch can lengthen the critical path of CI pipelines by a few minutes if k8s needs to spin up new nodes. While auth is necessary for batch to function correctly, it's not necessary to deploy batch, so I think it's more appropriate to not have `deploy_batch` depend on `deploy_auth` but have anything that depends on `deploy_batch` also depend on `deploy_auth`. There's already a precedent for this in that the service backend tests depend on `deploy_batch` and `deploy_memory` as opposed to `deploy_batch` being dependent on `deploy_memory`. I also removed the dependency of `upload_query_jar` on `deploy_batch`, no idea why that was there, but maybe it should be the other way around?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12354:460,test,tests,460,https://hail.is,https://github.com/hail-is/hail/pull/12354,1,['test'],['tests']
Testability,"The service backend is shared among all the threads which means we were changing the resource requests of random other tests. This substantially delays certain tests when, say, 16 quick partitions require 8 highmem cores each.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13040:119,test,tests,119,https://hail.is,https://github.com/hail-is/hail/pull/13040,2,['test'],['tests']
Testability,"The shuffler lives!. I'm really quite satisfied with how small this PR is. Make sure you enable ""Hide whitespace changes"". I removed a try-catch from each test which changed a bunch of formatting. This PR just deploys the shuffler and retargets all tests at the shuffler service rather than a local version.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9109:155,test,test,155,https://hail.is,https://github.com/hail-is/hail/pull/9109,2,['test'],"['test', 'tests']"
Testability,"The slight increase in complexity is worth it for the code improvement.; We now will clearly support early truncation when possible (and can; enable the inner join benchmark to go through whole stage codegen),; and will propagate requiredness correctly.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10758:164,benchmark,benchmark,164,https://hail.is,https://github.com/hail-is/hail/pull/10758,1,['benchmark'],['benchmark']
Testability,"The stack trace looks like this now:. ```; Error; Traceback (most recent call last):; File ""/Users/jigold/hail/python/hail/expr/expressions/expression_typecheck.py"", line 73, in check; return self.coerce(to_expr(x)); File ""/Users/jigold/hail/python/hail/expr/expressions/base_expression.py"", line 101, in to_expr; dtype = impute_type(e); File ""/Users/jigold/hail/python/hail/expr/expressions/base_expression.py"", line 59, in impute_type; raise ExpressionException(""Cannot impute type of empty list. Use 'hl.empty_array' to create an empty array.""); hail.expr.expressions.base_expression.ExpressionException: Cannot impute type of empty list. Use 'hl.empty_array' to create an empty array. The above exception was the direct cause of the following exception:. Traceback (most recent call last):; File ""/Users/jigold/hail/python/hail/typecheck/check.py"", line 426, in check_all; arg_ = tc.check(arg, name, argname); File ""/Users/jigold/hail/python/hail/expr/expressions/expression_typecheck.py"", line 75, in check; raise TypecheckFailure from e; hail.typecheck.check.TypecheckFailure. The above exception was the direct cause of the following exception:. Traceback (most recent call last):; File ""/Users/jigold/hail/python/hail/tests/test_expr.py"", line 1085, in test_empty_collection_error_msg; self.assertRaisesRegex(hl.expr.ExpressionException, ""Cannot impute type of empty list."", hl.array([])); File ""<decorator-gen-420>"", line 2, in array; File ""/Users/jigold/hail/python/hail/typecheck/check.py"", line 494, in _typecheck; args_, kwargs_ = check_all(__orig_func__, args, kwargs, checkers, is_method=False); File ""/Users/jigold/hail/python/hail/typecheck/check.py"", line 436, in check_all; )) from e; TypeError: array: parameter 'collection': expected expression of type set<any> or array<any> or dict<('any', 'any')>, found list: []; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3497:1226,test,tests,1226,https://hail.is,https://github.com/hail-is/hail/pull/3497,2,"['assert', 'test']","['assertRaisesRegex', 'tests']"
Testability,"The tabix line iterator works by building a list of virtual offsets from; the index that correspond to a requested interval. We recently; discovered an issue that would lead to a runtime exception if the; following conditions held:. * An offset pair ended exactly on a block boundary.; * The block boundary was exactly the start of a line. In a blocked file with virtual offsets, there are two ways to point to; the start of every block, (previous block start offset, previous block size) or; (current block start offset, 0). Because of the way curOff is calculated in TabixLineIterator, this would; lead to a situation where curOff was the (previous block start offset, previous block size); value, causing the jump to next chunk comparision `!TbiOrd.less64(curOff, offsets(i)._2)`; to fail when it should succeed, causing an extra line to be read, which; then makes the assertion check in the next iteration. The key invariant of TabixLineIterator must be to keep bufferCursor; inside the block currently being read. We therefore make a check to see; if we need to refresh the buffer in any circumstance where we read; a line. Coupled with a reflow of control in readLine to increase; readability and fix a bug where lines greater than 64k would not be read; properly.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9304:872,assert,assertion,872,https://hail.is,https://github.com/hail-is/hail/pull/9304,1,['assert'],['assertion']
Testability,"The test deployment sets the default storage to 1GiB instead of the normal 10GiB. As a result, the PR tests passed. The deployment tests fail because the 10GiB default storage request forces a minimum core count of 0.5 CPU. This change explicitly requests less storage, thus preventing the rounding up of core count from 0.25 CPU to 0.5 CPU. The rounding up doubled the mcpu_msec time for the test, thus failing the test. Fixes this:. ```; -------------------------------- live log call ---------------------------------; 2020-07-28T15:42:34 INFO batch_client.aioclient aioclient.py:497:submit created batch 70818; 2020-07-28T15:42:34 INFO batch_client.aioclient aioclient.py:533:submit closed batch 70818; FAILED; _____________________________ Test.test_msec_mcpu ______________________________. self = <test.test_batch.Test testMethod=test_msec_mcpu>. def test_msec_mcpu(self):; builder = self.client.create_batch(); resources = {; 'cpu': '100m',; 'memory': '375M'; }; # two jobs so the batch msec_mcpu computation is non-trivial; builder.create_job('ubuntu:18.04', ['echo', 'foo'], resources=resources); builder.create_job('ubuntu:18.04', ['echo', 'bar'], resources=resources); b = builder.submit(); ; batch = b.wait(); assert batch['state'] == 'success', batch; ; batch_msec_mcpu2 = 0; for job in b.jobs():; # I'm dying; job = self.client.get_job(job['batch_id'], job['job_id']); job = job.status(); ; # runs at 250mcpu; job_msec_mcpu2 = 250 * max(job['status']['end_time'] - job['status']['start_time'], 0); # greater than in case there are multiple attempts; assert job['msec_mcpu'] >= job_msec_mcpu2, batch; ; batch_msec_mcpu2 += job_msec_mcpu2; ; > assert batch['msec_mcpu'] == batch_msec_mcpu2, batch; E AssertionError: {'billing_project': 'test', 'closed': True, 'complete': True, 'cost': '$0.0000', ...}; E assert 2813000 == 1406500; E -2813000; E +1406500; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9166:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/9166,16,"['Assert', 'Test', 'assert', 'log', 'test']","['AssertionError', 'Test', 'assert', 'log', 'test', 'testMethod', 'tests']"
Testability,The test for keys has to be `is not None` to make sure falsey things like `Struct()` can be keys.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11735:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/11735,1,['test'],['test']
Testability,"The test that lists batches timed out. The main problem is the limit in the aioclient used by the test_batch tests was passing a string rather than an integer. I assumed downstream the function was passing an integer. Therefore, we were doing this:. batch_id < ""137""; and not batch_id < 137. So the query was running forever and scanning all batches from the test user. I also was missing a tag annotation on the queries, but that was not causing the timeout.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13237:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/13237,3,['test'],"['test', 'tests']"
Testability,"The test was lacking asserts, so it didn't fail even though it wasn't right. The tables were missing keys.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10357:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/10357,2,"['assert', 'test']","['asserts', 'test']"
Testability,"The tests need to install a previous version of Hail and verify that files written by the current version under test can be ready by older versions. That ""older version"" might be the change itself in the case that the file format version is being bumped. I'm not 100% sure how to specify that version because we won't know the hash on master until after merge. Hmm.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8249:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/issues/8249,2,['test'],"['test', 'tests']"
Testability,The tests relying on Batch are getting slower because it takes a long time to download and build Docker images and we're putting more load on Batch. This will increase parallelism and reduce test failures due to timeouts.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9441:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/9441,2,['test'],"['test', 'tests']"
Testability,"The tests use multiple threads which can race to download the references. This is a bit; of a blunt fix. In particular, this is not an asyncio-friendly lock (because I need; thread safety, which asyncio.Lock does not provide). In general, users should not try; to initialize hail multiple times in different coroutines in the same thread.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11949:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/pull/11949,1,['test'],['tests']
Testability,"The third in a series of PCRelate Improvements. Depends on #2249 . Sprinkling `cache` on any RDD which is used more than once dramatically improved runtime. On a benchmark program (included below) PCRelate took 40 seconds with four cores on 1000 samples and 10,000 variants. ```; from hail import *; from timeit import default_timer as timer. hc = HailContext(); vds = hc.balding_nichols_model(20, 1000, 10000).repartition(10).persist(); vds.count(). start = timer(); vds.pc_relate(5, 0.01, min_kinship=0.1, desire=""all"").count(); end = timer(); print(end-start); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2253:162,benchmark,benchmark,162,https://hail.is,https://github.com/hail-is/hail/pull/2253,1,['benchmark'],['benchmark']
Testability,"The third in a series of PCRelate Improvements. Depends on #2249. Sprinkling cache on any RDD which is used more than once dramatically improved runtime. On a benchmark program (included below) PCRelate took 80 seconds with four cores on 1000 samples and 10,000 variants. ```; from hail import *; from timeit import default_timer as timer. hc = HailContext(); vds = hc.balding_nichols_model(20, 1000, 10000).repartition(10).persist(); vds.count(). start = timer(); vds.pc_relate(5, 0.01, min_kinship=0.1, desire=""all"").count(); end = timer(); print(end-start); ```. Ready for a final look after #2270 lands. Creating a PR so that @konradjk and others can take it for a spin if desired.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2280:159,benchmark,benchmark,159,https://hail.is,https://github.com/hail-is/hail/pull/2280,1,['benchmark'],['benchmark']
Testability,The two deleted tests are covered by Python tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3988:16,test,tests,16,https://hail.is,https://github.com/hail-is/hail/pull/3988,2,['test'],['tests']
Testability,"The ubuntu 18.04 docker default is ascii, which was causing batch to barf on logs that contained special characters.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5654:77,log,logs,77,https://hail.is,https://github.com/hail-is/hail/pull/5654,1,['log'],['logs']
Testability,"There are many things wrong here. The Hadoop configuration is not copied per HadoopRDD operation. Proof:. ```; >>> import hail as hl; >>> hl.init(min_block_size=0); >>> t = hl.import_table('test.tsv.bgz', impute=True, min_partitions=8); >>> t.n_partitions(); 8; >>> t = hl.import_table('test-bgz.tsv.gz', impute=True, min_partitions=8); >>> t.n_partitions(); 1; ```. where `test-bgz.tsv.gz` is a bgz in gz's clothing. This is compounded by the fact that SparkContext.hadoopFile is not invoked until TableIR.execute is run making HailContext.forceBGZ() completely ineffective. One option is turning on spark.hadoop.cloneConf, that appears to clone the Hadoop configuration (to avoid some multithreading issues) although the docs don't recommend it due to ""performance regressions"". I haven't tested it. The other option is stop using the Hadoop stuff so we can pass state into the file loaders. Doing that for text files/line splitting is a bit nasty, but it would mean we could properly fix this gz/bgz business once and for all (look at the GZ header to see if it is block gzip'ed).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3861:190,test,test,190,https://hail.is,https://github.com/hail-is/hail/issues/3861,4,['test'],"['test', 'test-bgz', 'tested']"
Testability,There are some additional Google hoops to jump through to enable oauth2 login from non-organization accounts.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8159:72,log,login,72,https://hail.is,https://github.com/hail-is/hail/issues/8159,1,['log'],['login']
Testability,"There are three ways to represent a homogenous set of named values of type `T`.; 1. an `array<T>` and a `dict<str, int>`, the values are stored in the array and the names are stored in a separate dictionary mapping names to their indices; 2. a `dict<str, T>`, the name-value pairs are stored as dictionary key-value pairs; 3. a `struct{name1: T, name2: T, ... nameN: T}`, the name-value pairs are stored as field name, field string pairs. The third option is the most space efficient: the type stores the field names and there is no bookkeeping overhead per-set-of-named-values. The first two options repeat the field names for each occurrence (in particular, consider a Table field or MatrixTable entry-indexed field). The first two options needlessly encode the length (which is statically known). The third option is the most access-time-efficient: the offset of any named-value is known at hail compile time. The first two options require a logarithmic search of hail's dictionary tree representation. The third option is more user-friendly for accessing: `x.name`. The first is the least user-friendly: `x[indices[""name""]]`. The first and third options are the most cache-friendly for homogenous operations. The first uses `ArrayExpression.map`, so code size is `O(CODE)`. The third option's code size is `O(CODE * #VALUES)` because structs have no `map`-like primitive. The third option is also not user-friendly for homogenous operations (the user must repeat the code for each name-value pair). The third is the most self-documenting option. The number of fields and their names are visible in `ds.describe()`. The first is the next best because the dictionary is likely a global field that can be viewed with `x.indices.show()`. ---. ## Phase 1; Implement a new virtual type `tstaticdict<T, name1, name2, ..., nameN>` who's physical type is `PStruct` with N fields. These changes span Scala and Python. Implement `map` and `__getitem__` on `StaticDictExpression`s. `map` is implemented by cod",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6881:945,log,logarithmic,945,https://hail.is,https://github.com/hail-is/hail/issues/6881,1,['log'],['logarithmic']
Testability,There are two errors in the status returned by the worker: one is caught when executing the job and the other is when executing the container (such as uploading log to google storage or timeout error). We were only handling job-level errors correctly.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8784:161,log,log,161,https://hail.is,https://github.com/hail-is/hail/pull/8784,1,['log'],['log']
Testability,There is a `testng-build.xml` that is used by build.yaml and tests the google storage fs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8448:12,test,testng-build,12,https://hail.is,https://github.com/hail-is/hail/pull/8448,2,['test'],"['testng-build', 'tests']"
Testability,"There is more work to do to get this unified with the modern hail deployment (note that I copied the logging setup here). Nevertheless, this brings asyncio to notebook leader, which enables it to handle a helluva lot more simultaneous users. Next steps are to get this regularly deployed again and to get it on to a normal hail docker image.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6836:101,log,logging,101,https://hail.is,https://github.com/hail-is/hail/pull/6836,1,['log'],['logging']
Testability,"There is no hail operation that removes keys and guarantees no change to order (see https://github.com/hail-is/hail/issues/6929). In `BaseExpression._to_table`, we use the following expression which works in practice but is not guaranteed to work.; ```python; entries = ds.key_cols_by().entries(); entries = entries.order_by(*ds.row_key); return ..., entries.select(name); ```. In particular:; - `order_by(*ds.row_key)` does not guarantee that entries from the same row are appear in the order of the corresponding columns; - `order_by(*ds.row_key)` does not guarantee that entries from a pair of rows with equivalent keys appear in the order of the corresponding rows. There exists an operation that guarantees this:; ```python; ridx = Env.get_uid(); cidx = Env.get_uid(); entries = ds.key_cols_by().add_row_index(ridx).add_col_index(cidx).entries(); entries = entries.order_by(ridx, cidx); return ..., entries.select(name); ```; But this requires a scan to produce the row index and then a scan to verify the table rows are in the correct order. We consider this unacceptable performance. Instead, we rely on the above expression and add the following tests which we hope will alert us if we accidentally change the behavior:. ```; rmt33 = hl.utils.range_matrix_table(3, 3, n_partitions=2). mt = rmt33.choose_cols([1, 2, 0]); assert mt.col.collect() == [hl.Struct(col_idx=x) for x in [1, 2, 0]]. mt = rmt33.key_rows_by(rowkey=-mt.row_idx); assert mt.row.collect() == [hl.Struct(row_idx=x) for x in [2, 1, 0]]. mt = rmt33.annotate_entries(; x=(rmt33.row_idx + 1) * (rmt33.col_idx + 1)); mt = mt.key_rows_by(rowkey=-mt.row_idx); mt = mt.choose_cols([2, 1, 0]); assert mt.x.collect() == [9, 6, 3, 6, 4, 2, 3, 2, 1]. t = hl.utils.range_table(3); t = t.key_by(-t.idx); assert t.idx.collect() == [2, 1, 0]; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6930:1154,test,tests,1154,https://hail.is,https://github.com/hail-is/hail/issues/6930,5,"['assert', 'test']","['assert', 'tests']"
Testability,"There is still work to do here, but it is now complete enough that InterpretSuite can be run properly on a minimal example. Current TODOs:; - [x] Add C++ emit; - [x] Add Python api (experimental, for now); - [x] Proper type checking in python? *yes, but no type inference*; - [ ] Test ALL failure pathways; - [x] Mismatched Number of args between `Loop` and matching `Recur`; - [x] Mismatched types of args between `Loop` and matching `Recur`; - [ ] Infinite loop detection; - [ ] Not tail recursive detection",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5228:280,Test,Test,280,https://hail.is,https://github.com/hail-is/hail/pull/5228,1,['Test'],['Test']
Testability,"There might be additional PRs, but for now this PR does the following:. - Names folders for jobs based on the job_id computed after ordering the jobs; - Gets rid of double slashes in path names; - Names JobResourceFiles based on the name of the attribute.; Example: j.ofile => /batch/1/ofile; - Names resource groups from jobs as follows:; Example: j.declare_resource_group(ofile={'bed': '{root}.bed'}); /batch/1/ofile.bed; - Names input resource files based on the file name; /batch/inputs/{uid}/my_vcf.bgz; - Names input resource groups two-ways; input = batch.declare_resource_group(vcf=...); /batch/inputs/{uid}/my_vcf.bgz; /batch/inputs/{uid}.vcf. I tested this locally and on the service to make sure it's doing what I want.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8934:655,test,tested,655,https://hail.is,https://github.com/hail-is/hail/pull/8934,1,['test'],['tested']
Testability,"There was a logic error in constructFromIndicesUnsafe, if a missing value was pushed, pushing a present value with the same index would not clear the missing bit.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13263:12,log,logic,12,https://hail.is,https://github.com/hail-is/hail/pull/13263,1,['log'],['logic']
Testability,"There was a typo in the `Interpret` rule for `TableAggregate` which had it refer to the row instead of the globals inside the init op. I tried to add a test for this, but it's frustratingly difficult to force the compiler to go through this code path. Even when using an `InterpretOnly` compilation, the lowering pipeline often lifts `TableAggregate` to a `RelationalLet`, and then evaluates it, using the compiler not the interpreter. This is a deeper issue we should address, but a user is currently blocked on this bug so I don't want to hold it up.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14673:152,test,test,152,https://hail.is,https://github.com/hail-is/hail/pull/14673,1,['test'],['test']
Testability,"There was a typo in the term `mean_impute`. I assume this benchmark has never actually worked, so it's troubling we haven't ever noticed it was broken for such a silly reason.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9807:58,benchmark,benchmark,58,https://hail.is,https://github.com/hail-is/hail/pull/9807,1,['benchmark'],['benchmark']
Testability,There were only effectively two non-duplicate tests as far as I can tell. I moved them into IRSuite.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5579:46,test,tests,46,https://hail.is,https://github.com/hail-is/hail/pull/5579,1,['test'],['tests']
Testability,There were some cases where GH or CI were a bit slow to respond to PR changes. This lets the tests wait a bit until CI is aware of a PR. I think some test flakiness came from this. cc: @cseed,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5801:93,test,tests,93,https://hail.is,https://github.com/hail-is/hail/pull/5801,2,['test'],"['test', 'tests']"
Testability,"There were two bugs when checking if an ndarray is column major, causing it to always return false. This method is used to decide whether we need to copy the ndarray into a column major form. By fixing this bug, we now don't have to copy both arrays before every matrix multiply. Benchmark: linear_regression_rows_nd. Before fix timings:. [50.794169104999995, 51.562208821, 60.402329871999996]. After fix timings: . [38.504665161, 39.919831891, 37.882298633999994]",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9768:280,Benchmark,Benchmark,280,https://hail.is,https://github.com/hail-is/hail/pull/9768,1,['Benchmark'],['Benchmark']
Testability,"There were two sources of deadlocks:. 1. The attempt resources were not inserted in the same order in the aggregated_*_resources tabes between the two triggers `attempt_resources_after_insert` and `attempts_after_update`. One had jobs -> batches -> billing projects and the other had billing_projects -> batches -> jobs. We also were inserting the resources in a different order in the two triggers. I solved the ordering issue by making sure we `INSERT MANY` the resources in alphabetical order. 2. Once I fixed (1), then the next set of errors were in `add_attempt`. We were locking the `instances_free_cores_mcpu` table only if the attempt didn't already exist. This was causing cryptic deadlock errors like this:. ```; ------------------------; LATEST DETECTED DEADLOCK; ------------------------; 2022-06-23 18:08:12 0x7f1807665700; *** (1) TRANSACTION:; TRANSACTION 1215034153, ACTIVE 0 sec starting index read; mysql tables in use 1, locked 1; LOCK WAIT 21 lock struct(s), heap size 1136, 12 row lock(s), undo log entries 5; MySQL thread id 962402, OS thread handle 139741222766336, query id 6809292838 10.32.5.50 jigold updating; UPDATE instances_free_cores_mcpu; SET free_cores_mcpu = free_cores_mcpu + cur_cores_mcpu; WHERE instances_free_cores_mcpu.name = in_instance_name; *** (1) WAITING FOR THIS LOCK TO BE GRANTED:; RECORD LOCKS space id 1578686 page no 3 n bits 72 index PRIMARY of table `jigold`.`instances_free_cores_mcpu` trx id 1215034153 lock_mode X locks rec but not gap waiting; Record lock, heap no 3 PHYSICAL RECORD: n_fields 4; compact format; info bits 0; 0: len 30; hex 62617463682d776f726b65722d6a69676f6c642d7374616e646172642d62; asc batch-worker-jigold-standard-b; (total 34 bytes);; 1: len 6; hex 0000486bf32c; asc Hk ,;;; 2: len 7; hex 600001287513cb; asc ` (u ;;; 3: len 4; hex 80002de6; asc - ;;. *** (2) TRANSACTION:; TRANSACTION 1215034156, ACTIVE 0 sec inserting; mysql tables in use 6, locked 6; 22 lock struct(s), heap size 1136, 13 row lock(s), undo log entries",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11959:1016,log,log,1016,https://hail.is,https://github.com/hail-is/hail/pull/11959,1,['log'],['log']
Testability,There's no reason for these tiny CI test jobs to use 3.7 cpus.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5639:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/5639,1,['test'],['test']
Testability,"These actually all pass, much to my surprise, because we're; doing great IR sanitization in Python. I have some changes in; another branch that introduced bugs that tests like this will; make easier to debug. It's quite satisfying to add a PR with only tests and no code changes.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5961:165,test,tests,165,https://hail.is,https://github.com/hail-is/hail/pull/5961,2,['test'],['tests']
Testability,"These are some easy to remove references to `RVD.rdd`. I added `treeReduce`, which depends on `treeAggregate` (#3310) which will hopefully be merged soon. In the meantime, I've added the `treeAggregate` methods here so this PR will pass its tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3344:241,test,tests,241,https://hail.is,https://github.com/hail-is/hail/pull/3344,1,['test'],['tests']
Testability,"These billing projects tests did not correctly handle multiple attempts. Instead,; we use one billing project prefix for the entire batch (based on the token) and; each attempt gets a unique prefix. After all batch tests are complete, a job runs; which deletes all billing projects for the current batch.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9987:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/9987,2,['test'],['tests']
Testability,"These changes are a prerequisite for introducing a mysql DB pod for every test and dev namespace. The crux of such a change is any CreateDatabase steps should use the `database-server-config` from *its own namespace* (which will come in the PR that uses this step) and not from default. There's no cleanup step required because this will be used to create DBs inside the namespace for the pipeline, so resources will get cleaned up with the namespace. The other changes in this step bring the configuration for `dev` scopes closer to that of `test` scopes, because creation of test databases should really just be idempotent and there shouldn't be a difference between deploying a database in dev and test. I would have deferred making the changes to the `dev` scope except dev deploy was the most practical way for me to test this change.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13022:74,test,test,74,https://hail.is,https://github.com/hail-is/hail/pull/13022,5,['test'],['test']
Testability,"These changes are mostly because mypy now needs all `None` parameters to be explicit optionals, whereas before it would let something like `def foo(arg: str = None)` slide. The `type: ignore` on the azure client call is an azure library bug, I looked into the source for that function and there's a comment saying that the input is an `Optional[int]` but the type stubs that mypy is picking up say `int`. the `check_untyped_defs` config flag tells mypy to typecheck the bodies of functions that do not have a type signature, which apparently it wasn't doing on its own.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12447:364,stub,stubs,364,https://hail.is,https://github.com/hail-is/hail/pull/12447,1,['stub'],['stubs']
Testability,"These follow the same logic as the `/hail` to `/docs/0.1` to redirect,; except they are 307 TEMPORARY REDIRECT because devel and stable may; change to different versions in the future.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4934:22,log,logic,22,https://hail.is,https://github.com/hail-is/hail/pull/4934,1,['log'],['logic']
Testability,"These functions are now only used in tests. I re-implemented computeRRM via expression language, interim to deleting entirely on the Scala side once LMM is updated and KinshipMatrix goes away. Note `realized_relationship_matrix` is tested in `test_rrm` on the Python side, and computed independently of the ComputeRRM code. I also moved RichMatrixTable to testUtils alongside RichTable, rather than with the Suites in utils.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3287:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/3287,3,['test'],"['testUtils', 'tested', 'tests']"
Testability,"These incremental improvements set us up for a cleaner diff when the Shuffler IR lands. The bigger changes:. - add `getOrNull` to `HailContextFlags`, previously you'd always get an error if the key did not exist.; - add a few currently unused flags for the shuffler; they all default to settings appropriate for tests.; - transmit ETypes instead of codec specs; the buffer is fixed at compile-time.; - use buffers instead of raw input streams for all communication. This resolved some latent bugs that arise from mixing Hail's (In|Out)putBuffers with operations on the underlying streams. Encoders and Decoders appear to have no issue being interleaved with Buffer operations, so I now freely use the buffer of the (En|De)coder as is convenient.; - get now accepts inclusivity flags for both start and end (this was critical to use partition bounds correctly).; - implement partitionBounds.; - add a `close` to `ShuffleClient` so it can clean up ExecuteContext and the socket.; - the server and client now handshake (each sends and receives one byte) on a close so as to raise errors sooner if either one of them did not expect the conversation to end.; - KeyedCodecSpec => ShuffleCodecSpec, changed to support the all-etypes, no-codec-specs methodology.; - shrink uuid to 32 bytes, still a lot, but fits on one log line.; - implement a *whole pile* of write/read methods on `Wire.scala` that give a unified language to our mess of serializers and deserializers. I tried to make the rule: write: to buffer, read: from buffer, serialize: to string, deserialize: from string. Why are some things missing? Why are some thing unused? This is the set of things I need to ultimately make the Shuffler work. My apologies for the mammoth size of this PR. I've been trimming and trimming to get little fixes in, but now we're down to almost exclusive Shuffler changes. It seems less valuable to try and educate the team about the Shuffler via PR since it will be owned by services team.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8812:312,test,tests,312,https://hail.is,https://github.com/hail-is/hail/pull/8812,2,"['log', 'test']","['log', 'tests']"
Testability,"These should basically run as no-ops on every PR but then actually test dataproc if we dare to bump the pip version. Can read these CI tests as ""every version of hail has passed tests on dataproc"".",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13917:67,test,test,67,https://hail.is,https://github.com/hail-is/hail/pull/13917,3,['test'],"['test', 'tests']"
Testability,These should never have been read-write. Caught this because a CI job I was modifying overwrote `/gsa-key/key.json` with `/test-gsa-key/key.json` which caused the Output step to use the test credentials instead of CI credentials. I also removed an overriding definition of `secret_host_path` in `JVMJob`. I don't see why it should be different than what's defined in `Job` and using `host_path` seems quite dangerous. Added a test that we can't `mv` a secret path and updated some existing tests that assumed we can overwrite secrets. TODO: Update `build.yaml` to not `mv` any secrets or PRs will fail when this joins the mainline.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11931:123,test,test-gsa-key,123,https://hail.is,https://github.com/hail-is/hail/pull/11931,4,['test'],"['test', 'test-gsa-key', 'tests']"
Testability,These tests only work if fewer than 200 batches were created between the batches; under test and the `list_batches` API call. This is obviously not necessarily; true in general and *certainly* not true when the Hail Query on Hail Batch is; spewing hundreds of batches per second into the system.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10928:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/10928,2,['test'],"['test', 'tests']"
Testability,These tests run for ~35 minutes right now.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11408:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/11408,1,['test'],['tests']
Testability,"These tests spin up a lot of non-preemptible Query Driver jobs. This makes these tests feel not really preemptible safe, as a preemption of the test job will end up submitting duplicate Query Drivers.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13004:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/13004,3,['test'],"['test', 'tests']"
Testability,"These tests start up whole clusters and can take >30min, so while they are idempotent the cost of preemption is substantial.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14444:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/14444,1,['test'],['tests']
Testability,These tests were timing out consistently now. I think 3 minutes is too strict given what we know about the performance of our current system.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13320:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/13320,1,['test'],['tests']
Testability,"These top-shelf methods make applying the LinearMixedModel class as easy as 1-2-3:; 1: create model from matrix table expressions (and possibly kinship matrix) ; 2: fit model; 3: test each row of matrix table using fit model. E.g., using markers as random effects:; ```; mt0 = dataset.filter_rows(mt.use_as_marker); model, _ = hl.linear_mixed_model(y=mt0.height, x=[1, mt0.sex], z_t=mt0.n_alt_alleles(), p_path='p.bm'); model.fit(); mt = hl.linear_mixed_regression(mt.n_alt_alleles(), model); ```. E.g., using any ndarray kinship matrix:; ```; model, _ = hl.linear_mixed_model(y=mt0.height, x=[1, mt0.sex], k, p_path='p.bm'); model.fit(); mt = hl.linear_mixed_regression(mt.n_alt_alleles(), model); ```. This required smaller changes to LinearMixedRegression class, particularly adding `p_path` as a member variable and to all constructors. I've also modified and run `doctest_write_data.py` which rebuilt the datasets, accounting for the large binary file count (I can factor this out as it's own pre-PR if you prefer). I renamed `from_mixed_effects` to `from_random_effects` since a mixed model has fixed and random effects, and `z` is the random ones.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4191:179,test,test,179,https://hail.is,https://github.com/hail-is/hail/pull/4191,1,['test'],['test']
Testability,"These two tests take a very long time in the service and do not benefit from the; massive horizontal scalability of Hail Query on Hail Batch. These tests also; somewhat frequently cause OOMs in the service backend, so the point is perhaps; moot. Nonetheless, I think this is an overall positive change.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10943:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/10943,2,['test'],['tests']
Testability,These values are computed whenever an object of this class is allocated. This happens even when `gradle test --tests 'FOO'` filters out the class. I would prefer filtered tests to not run anything so that the desired tests run as quickly as possible.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1782:104,test,test,104,https://hail.is,https://github.com/hail-is/hail/pull/1782,4,['test'],"['test', 'tests']"
Testability,"They have `__str__` and tested by verifying, value IR, TableIR can be parsed by the Scala parser. (MatrixIR parser is still pending.). Made some changes to Table/MatrixRead. Instead of rendering them exactly (which we can't construct from Python), assume they will read on parser and only require the minimal information necessary to construct read IRs. MatrixRead doesn't contain MatrixReader in the parser, matrix readers are treated as full ""virtual"" MatrixIR nodes in the parser. When MatrixIR is done, we can replace expr.AST with IR and we're golden. @tpoterba commentary on the Python organization welcome.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3896:24,test,tested,24,https://hail.is,https://github.com/hail-is/hail/pull/3896,1,['test'],['tested']
Testability,"They were quadratic. Bad bad bad bad bad. Benchmark now takes ~7s, compared to roughly the amount of time it; would take for my laptop to naturally sublimate.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7771:42,Benchmark,Benchmark,42,https://hail.is,https://github.com/hail-is/hail/pull/7771,1,['Benchmark'],['Benchmark']
Testability,Think this should resolve this [error](https://console.cloud.google.com/logs/query;query=resource.type%3D%22k8s_container%22%0Aresource.labels.namespace_name%3D%22default%22%0Aresource.labels.container_name%3D%22auth-driver%22%0Aseverity%3DERROR;timeRange=PT3H?authuser=2&project=hail-vdc) where `auth-driver` is crashing on start,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9949:72,log,logs,72,https://hail.is,https://github.com/hail-is/hail/pull/9949,1,['log'],['logs']
Testability,"Third piece of #6518; staged on #6532. Add extract aggregators pass using staged aggregators. Currently uses files for communicating between workers and master. This isn't ideal, but I wanted to try to get this merged and tested as quickly as possible before starting to modify anything.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6534:222,test,tested,222,https://hail.is,https://github.com/hail-is/hail/pull/6534,1,['test'],['tested']
Testability,"This PR Python-izes all but the LocalLDPrune step of `ld_prune` while adding modular functionality for window indices that also simplifies computing big banded correlation (where the band is in terms of position, centimorgans, or any other non-decreasing value per contig). I later plan to simplify computing correlation, but basically:; ```; ld_matrix = ... BlockMatrix stuff starting from mt ...; starts, stops = hl.locus_windows(mt.rows(), radius=1e6); banded_ld_matrix = ld_matrix.sparsify_row_intervals(starts, stops); ```; Or if centimorgan coordinates are a row field (via annotation or import from plink format):; ```; ht = mt.rows(); starts, stops = hl.locus_windows(ht, radius=1e6, value_expr=ht.centimorgans); ```. Changes:; - added `array_windows` to methods/misc, with docs and test.; - added `locus_windows` to methods/genetics, with docs and test.; - reworked `ld_prune` to use `locus_windows` and `sparsify_row_intervals`, moved squaring op from expression language to block matrix `r2_bm`, moved arg checks from scala to python.; - then deleted `UpperIndexBounds`, `UpperIndexBoundsSuite`, `BlockMatrix.filteredEntriesTable` and tests.; - improved `test_ld_prune` and modified `ldprune.vcf` to make it much smaller and span three chromosomes instead of one for better testing; - allowed `sparsify_row_intervals` to accept ndarrays so user need not convert output of `locus_windows` (which should naturally be an ndarray) with `[int(s) for s in starts]`. If the arg checking or py4j communication become a bottleneck, we can add passage through file similar to what we do for arrays of doubles.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3715:791,test,test,791,https://hail.is,https://github.com/hail-is/hail/pull/3715,4,['test'],"['test', 'testing', 'tests']"
Testability,"This PR achieves a couple of things in preparation for #11617, which requires that QoB jars be built against Spark 3.2. QoB doesn't actually *use* spark, but it will use the Azure Blob Storage client library which requires a version of jackson that conflicts with that of pyspark 3.1.1. Until such a day that we can remove pyspark from the QoB environment, we upgrade it to appease our java dependencies. Non-QoB builds of hail query remain on Spark 3.1.1/3.0.1 as it is what dataproc/hdinsight support, on which we don't need to use the Azure storage fs. This PR moves the installation of pyspark out of the base image so we can make a spark 3.2 image on which to run the scala fs suite. We also build a spark 3.2 jar to be used in that test. Also update a couple of dependencies to be compatible with spark 3.2 and stop pulling in jackson from the gcs dependency, which just so happens to match spark 3.1",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11790:738,test,test,738,https://hail.is,https://github.com/hail-is/hail/pull/11790,1,['test'],['test']
Testability,"This PR adds `--master local` to `PYSPARK_SUBMIT_ARGS` for the Gradle `makeDocs` target, so that the Sphinx notebook tests do not try to spawn distributed Spark jobs when running by coincidence on a Spark master. Now `makeDocs` locally under macOS and locally on an AWS EMR Spark cluster master. This PR also removes `PYSPARK_SUBMIT_ARGS` from the `makeDocsNoTest` target, since Sphinx does not run notebook tests for that target.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4190:117,test,tests,117,https://hail.is,https://github.com/hail-is/hail/pull/4190,2,['test'],['tests']
Testability,"This PR adds `utils/StackSafe.scala`, which contains generic tools for writing stack safe code. To illustrate its use, I've converted `NormalizeNames` and `RewriteBottomUp` to be stack safe. This approach optimizes for the minimal possible change to existing code to make it stack safe. I originally expected this to have mediocre performance, and designed this to have optimization opportunities--requiring more substantial rewrites--where we found it was necessary. In a follow up PR, I converted the IR parser to be stack safe. In benchmarking that, I'm not able to see any performance penalty (if anything, the stack safe version looks slightly faster, which is probably just noise). So it's possible this will perform well enough as is, but we can keep an eye on it as we convert more passes. The basic idea is to rewrite functions that can be called recursively (directly or indirectly through a path of mutually recursive functions) from `f: (...) => A` to `f: (...) => StackFrame[A]`. Where the former evaluates, executing all recursive calls, and then returns the `A` result, the later returns a description of the work to be done before making any recursive calls. The method `StackFrame[A].run(): A` executes that description in a non-recursive loop. `StackFrame` is a monad, implementing `map` and `flatMap`, which allows the `for` syntactic sugar to be used. When a method makes several recursive calls, this can be significantly more readable. The public api is small. There are the free functions; ```scala; def done[A](result: A): StackFrame[A]; def call[A](body: => StackFrame[A]): StackFrame[A]; ```; and the methods; ```scala; abstract class StackFrame[A] {; def flatMap[B](f: A => StackFrame[B]): StackFrame[B]; def map[B](f: A => B): StackFrame[B] = flatMap(a => Done(f(a))); def run(): A; }; ```; `done` is basically the return statement. `call` is very important: it wraps a recursive call in a thunk, so that returning a `StackFrame` doesn't require descending all the way to t",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9320:534,benchmark,benchmarking,534,https://hail.is,https://github.com/hail-is/hail/pull/9320,1,['benchmark'],['benchmarking']
Testability,"This PR adds environment variable options to skip tests requiring plink/Rscript executables. - If `HAIL_TEST_SKIP_PLINK` is set, skip tests requiring the `plink` binary.; - If `HAIL_TEST_SKIP_R` is set, skip tests requiring `RScript`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5123:50,test,tests,50,https://hail.is,https://github.com/hail-is/hail/pull/5123,3,['test'],['tests']
Testability,"This PR adds infrastructure for unrealizable `PType`s and `PCode`s. My primary goal was finding the shortest path to enabling nested streams in EmitStream. The main changes are:; * Add `PUnrealizable` and `PUnrealizableCode`. These are traits in the `PType` and `PCode` hierarchies, respectively, that provide ""implementations"" (throw exceptions) for methods not supported on unrealizable types.; * Add `PStreamCode` and `PCanonicalStreamCode`. The latter just wraps a `Stream` from EmitStream.scala, but eventually these should be unified. I also added `PCanonicalStream`, mostly for consistency with the rest of the `PType` hierarchy. If you think the added noise isn't worth the consistency, I can get rid of the abstract classes.; * I added assertions to `TypeCheck` for all cases I could think of where a node could take a child of any type, but now will only work for realizable types.; * To support nested streams in the emitter, we need to be able to bind streams in the environment, e.g. to map over stream of streams. The easiest way I could see to enable this was to keep the environment an `Env[EmitValue]`, but to allow `EmitValue`s of unrealizable types. I added `EmitUnrealizableValue` which asserts that it is only used once. This does go against the concept that ""values are things that can safely be used multiple times""; I'm open to discussion on what the right design is.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8564:745,assert,assertions,745,https://hail.is,https://github.com/hail-is/hail/pull/8564,2,['assert'],"['assertions', 'asserts']"
Testability,This PR adds lowering rule for `TableHead`. It also adds a test for `TableHead` since there wasn't any good one.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8695:59,test,test,59,https://hail.is,https://github.com/hail-is/hail/pull/8695,1,['test'],['test']
Testability,"This PR adds support for Azure SAS tokens in QoB. A SAS token is basically a blob storage URI with a short-lived credential to access that resource appended as a URL query string. In such a scenario where the FS receives a blob URI with a SAS token, that token should be used instead of the latent credentials on the system. Most of the changes to the `AzureStorageFS.scala` are to parse out a SAS token from blob names. This change brings with it a couple caveats. Unfortunately it is not possible to truly disambiguate a SAS token from a glob pattern, or even just a normal blob filename. So we take what is probably a safe assumption and look to see if there exists a query-parameter style key-value pair after the last `?` in the blob name. If this is the case, we treat everything after the last `?` as a SAS token. If this condition is not satsified, we say there is no SAS token and treat the whole path as the blob name. This logic already exists in python, but I'm open to alternatives. Introducing SAS tokens also breaks the way globbing is currently implemented, where it is deemed safe to iteratively append components to the end of a blob URI string. I added an abstract type member to `FS` and instead of a `String` have `globWithPrefix` accept that associated URL type that can properly handle path updates. I'm unclear on the best way to do this w.r.t. the type system, and wasn't quite sure what to put as the associated type for `RouterFS`, which ideally would accept a union of the URL types for the filesystems that it wraps, so some guidance on that would be great if you have any.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13178:934,log,logic,934,https://hail.is,https://github.com/hail-is/hail/pull/13178,1,['log'],['logic']
Testability,"This PR adds the Azure AsyncFS. I added a new secret with the Azure credentials for a new service account, adopted the container `hail-test-****` as the test container, and made the container have a 1 day retention policy (we'll want to check and make sure this actually works). The performance seemed decent. We'll probably want to benchmark this formally at some point, but I think it's good enough for now to have something that works.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10795:135,test,test,135,https://hail.is,https://github.com/hail-is/hail/pull/10795,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"This PR adds the job groups functionality as described in this [RFC](https://github.com/hail-is/hail-rfcs/pull/5) to the Batch backend and `hailtop.batch_client`. This includes supporting nested job groups up to a maximum depth of 5. Note, that none of these changes are user-facing yet (hence no change log here). The PRs that came before this one:; - #13475 ; - #13487 ; - #13810 (note that this database migration required a shutdown). Subsequent PRs will need to implement the following:; - Querying job groups with the flexible query language (v2); - Implementing job groups in the Scala Client for QoB; - Using job groups in QoB with `cancel_after_n_failures=1` for all new stages of worker jobs; - UI functionality to page and sort through job groups; - A new `hailtop.batch` interface for users to define and work with Job Groups. A couple of nuances in the implementation came up that I also tried to articulate in the RFC:; 1. A root job group with ID = 0 does not belong to an update (""update_id"" IS NULL). This means that any checks that look for ""committed"" job groups need to do `(batch_updates.committed OR job_groups.job_group_id = %s)` where ""%s"" is the ROOT_JOB_GROUP_ID.; 2. When job groups are cancelled, only the specific job group that was cancelled is inserted into `job_groups_cancelled`. This table does **NOT** contain all transitive job groups that were also cancelled indirectly. The reason for this is we cannot guarantee that a user wouldn't have millions of job groups and we can't insert millions of records inside a single SQL stored procedure. Now, any query on the driver / front_end must look up the tree and see if any parent has been cancelled. This code looks similar to the code below [1].; 3. There used to be `DELETE FROM` statements in `commit_batch_update` and `commit_batch` that cleaned up old records that were no longer used in `job_group_inst_coll_cancellable_resources` and `job_groups_inst_coll_staging`. This cleanup now occurs in a periodic loop on",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14282:304,log,log,304,https://hail.is,https://github.com/hail-is/hail/pull/14282,1,['log'],['log']
Testability,"This PR asserts a stronger precondition for `Method.findBlocks`: all reachable blocks must be non-empty, must be terminated by a control expression, and all targets of the control expression must be non-null.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9489:8,assert,asserts,8,https://hail.is,https://github.com/hail-is/hail/pull/9489,1,['assert'],['asserts']
Testability,"This PR asserts all inputs are consistent with the reference genome (default of GRCh37 if not supplied by the user). This PR **will break** user scripts if their data does not conform to GRCh37. If this occurs, the user can utilize the recode contigs option on import or create their own reference genome.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2520:8,assert,asserts,8,https://hail.is,https://github.com/hail-is/hail/pull/2520,1,['assert'],['asserts']
Testability,"This PR attempts to make CI more useful as a developer feedback tool. Developers need to know the success/failure state of their PR ASAP. It is better to know that state for an old tip sha pair than to know nothing. It is better still to know that state for a more recent sha pair. It is best to know that state for the tip sha pair. We aim to test a PR's tip source sha (perhaps against an out of date target sha). ---. Our *target state* for remembering batches is:; - one is complete and the other is in-progress; the complete one is for an out-of-date tip sha pair, or ; - only one batch is in-progress or complete; it's for the tip sha pair. We forget an in-progress batch for a PR only if:; - a batch for a more recent sha pair is complete, or; - a more recent, but not tip, source sha build is also in progress. As is the case for our services, at any time we may not be in our target state. For CI, if we are not in our target state, `_refresh` and `_heal` are intended to move us towards the desired state. `_refresh` incorporates new GitHub information. `_heal` incorporates new batch state and perturbs batch as necessary. cc: services crew: @akotlar, @jigold . EDIT:. I've gone round and round with my thoughts on what the right idea here is. I would appreciate some discussion around what we should aim for.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6007:344,test,test,344,https://hail.is,https://github.com/hail-is/hail/pull/6007,1,['test'],['test']
Testability,"This PR begins the implementation of checkpointing and restoring of jobs in Batch. Currently, a container is checkpointed after 10 seconds and before running a container (using crun run) the worker container checks if it should restore a job based on a checkpoint in Google storage. Currently, the kinds of Jobs that can be checkpointed/restored are: jobs that do simple operations and only print to stdout, jobs that redirect their output to local files. Changelist:; - Add copy method to RouterAsyncFS; - Add checkpointable flag to containers (make DockerJob containers checkpointable and JVMJob containers not checkpointable); - Create checkpoint method which pauses a container, checkpoints it, copies the checkpoint directory and upper directory of the overlay into Google storage, and then resumes the container; - Add logic in _run_container to try copying checkpoint directory and upper directory from cloud storage and then running `crun restore` if the job is checkpointable",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11888:825,log,logic,825,https://hail.is,https://github.com/hail-is/hail/pull/11888,1,['log'],['logic']
Testability,"This PR begins to expose RowMatrix functions in Python.; - lots of docs; - fixed up parallel options in export; - added add_index option, useful for parallel export; - test of add_index. I broke this out from changes in sparse_block_matrix (v1 on its way, at which point I'll assign this and that) and lmm2. Three key uses for RowMatrix:; - BlockMatrix export; - class of inputs to per-variant LMM (see lmm2 branch); - BlockMatrix to MatrixTable conversion (once I add RowMatrix.toMatrixTable)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3466:168,test,test,168,https://hail.is,https://github.com/hail-is/hail/pull/3466,1,['test'],['test']
Testability,"This PR begins to implement the infrastructure needed for reproducible randomness. The main components are:; * An implementation of the Threefish block cipher, reduced to 20 rounds as in Threefry [1], but keeping the tweak from Threefish (really just the first 64 bits, the second 64 bits are always 0). The specification for Threefish can be found in [2].; * An implementation of the `jdistlib.RandomEngine` interface using Threefish, so that we can continue using the `jdistlib` implementations of sampling from various distributions.; * This has some improvements over the standard Java RNG implementations of random floating point numbers, and of random integers from a specified interval. See comments in the code for details.; * The beginnings of a new type `(S/T)RNGState`. This implements a splittable RNG interface, similarly to [3], but instead of the cascade construction, we use a modification of PMAC [4] to build a psuedo-random function from a blockcipher. This allows us to reorder the processing of blocks of the input, in particular moving computation to compile time as much as possible.; * A simple test suite for the new RNG using a chi-square test. [1] ""Parallel random numbers: as easy as 1, 2, 3"", http://www.thesalmons.org/john/random123/papers/random123sc11.pdf; [2] ""The Skein Hash Function Family"", https://www.schneier.com/wp-content/uploads/2015/01/skein.pdf; [3] ""Splittable pseudorandom number generators using cryptographic hashing"", https://publications.lib.chalmers.se/records/fulltext/183348/local_183348.pdf; [4] ""Efficient Instantiations of Tweakable Blockciphers and Refinements to Modes OCB and PMAC"", https://www.cs.ucdavis.edu/~rogaway/papers/offsets.pdf",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11605:1119,test,test,1119,https://hail.is,https://github.com/hail-is/hail/pull/11605,2,['test'],['test']
Testability,"This PR brings the `Streamify` pass back to the JVM emitter. Streamify is useful because it make explicit *in the structure of the IR*, which nodes are stream producers and which nodes are stream consumers. In particular, the following nodes **produce** streams:; ```; ReadPartition; MakeStream; StreamRange; ToStream. ArrayMap; ArrayFilter; ArrayFlatMap; ArrayScan; ArrayAggScan; ArrayLeftJoinDistinct. Let /* sometimes */; ```; And the following nodes **consume** streams (`#` indicates which arguments are streams):; ```; ToArray(#); ToDict(#); ToSet(#); GroupByKey(#) ; ArraySort(#, -, -, -); ArrayFold(#, -, -, -, -); ArrayFold2(#, -, -, -, -); ArrayFor(#, -, -); ArrayAgg(#, -, -); CollectDistributedArray(#, -, -, -, -). ArrayMap(#, -, -); ArrayFilter(#, -, -); ArrayFlatMap(#, -, #); ArrayScan(#, -, -, -, -); ArrayAggScan(#, -, -); ArrayLeftJoinDistinct(#, #, -, -, -, -). Let(-, -, #) /* sometimes */; ```. Thus, `Emit` may make better assumptions about the IR it is walking over. `emitArrayIterator` only deals with stream producers, and all stream consumers must call `emitArrayIterator` on their stream arguments. Additionally:; - `Streamify` was fixed to materialize less arrays than it used to (there were also bugs that caused errors on certain IR; see tests); - The producer `ToStream` may assume that its argument is a container.; - The IR nodes `ArrayRange` and `MakeArray` do not make their way to `Emit`.; - I'm not sure what the purpose of `{T,P}Streamable` is, I think all of its functionality is already covered by `{T,P}Iterable`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7120:1269,test,tests,1269,https://hail.is,https://github.com/hail-is/hail/pull/7120,1,['test'],['tests']
Testability,"This PR changes our vep init scripts to pull from the new `hail-us-vep` google bucket, which is requester pays. . I realized while doing this that my previous PR (#8253) really had nothing to do with supporting this, since that really just sets the configuration for the Google Cloud / Hadoop connector, which is not how we get vep data. I tried to enforce the rules from those command line arguments anyway by rejecting `--vep` flag if they don't specify they're ok with requester pays and manually checking that `hail-us-vep` was in their approved bucket list. But if a user was to specify the init scripts using `gcloud dataproc` and didn't go through `hailctl`, there'd be no catch to check if they were ok with requester pays. Perhaps there is some way we could set environment variables on the dataproc machines based on the `--requester-pays-allow....` flags and use those in the init scripts. I also expanded `make test-dataproc` to test with a GRCh38 cluster as well, as we use separate scripts to make them and I'm uncomfortable with only testing one.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8268:923,test,test-dataproc,923,https://hail.is,https://github.com/hail-is/hail/pull/8268,3,['test'],"['test', 'test-dataproc', 'testing']"
Testability,"This PR changes the semantics of TableMapRows in the IR and Table.select. They are now required to preserve the key ordering. In other words, applying TableMapRows to an ordered table can produce an ordered table without shuffling. I put an assert to verify that the produced OrderedRVD is really ordered, but that might be too expensive an assertion. Before, `newKey = None` meant ""keep the old key"", but that left no room to ask for the result to be unkeyed. Now `newKey` is just the key of the resulting table. If any partition key fields are modified, then even if the ordering is preserved, the result will need to be scanned to update the partition bounds. To avoid this scan when unnecessary, I added the `preservedKeyFields` parameter, which is the length of the prefix of key fields which are not modified. Thus, if the number of partition keys of the underlying OrderedRVD is less than or equal to `preservedKeyFields`, the partition bounds will remain valid. This feels pretty clunky, and I welcome better ideas. In particular, is there a way to compute this from the `newRow` IR? That's what I did on the Python side in `_select`, but it wasn't obvious to me how to do the same with the Scala IR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3622:241,assert,assert,241,https://hail.is,https://github.com/hail-is/hail/pull/3622,2,['assert'],"['assert', 'assertion']"
Testability,"This PR defines a `ReadPartition` IR node which takes a file path, spec, and written/requested row types and reads in the rows in the file. I haven't supported/defined this IR node in either JVM Emit or in python, since for now this node can only exist after a TableRead gets lowered. In order to be able to read the file, I exposed some things to be able to pass in a (java) HadoopConfiguration and use it to create a (C++) InputStream for the decoder; The way these extra arguments are passed into Emit right now are a little hacky, but I've started tidying some stuff up in #5248 and was going to wait on that to write a better way to pipe around potentially unused arguments. Warning: Until #5248 goes in, the ReadPartition IR node will put all the rows into a single region. Since the SparkBackend lowerer/execution is not exposed at the python level, and we're only using it for some small Scala tests right now, I think that's ok; just wanted to note it here.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5326:902,test,tests,902,https://hail.is,https://github.com/hail-is/hail/pull/5326,1,['test'],['tests']
Testability,"This PR describes a lowering framework for BlockMatrixIR -> CollectDistributedArray. As part of this, I split out a `LowerIR` function from the `LowerTableIR` value rules so that we can apply lowering more modularly, if desired. It delegates to `LowerTableIR` and `LowerBlockMatrixIR` for the relevant nodes but lets us use both the table lowerer and/or the block matrix lowerer together as desired. (this PR turned into quite a large change, since I ended up implementing enough to start testing the lowering, but I'm happy to break it up, too.). cc @cseed @tpoterba @danking @patrick-schultz @johnc1231",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8087:489,test,testing,489,https://hail.is,https://github.com/hail-is/hail/pull/8087,1,['test'],['testing']
Testability,"This PR eliminates this warning message:. ```; This version of MySQL doesn't yet support 'sorting of non-scalar JSON values'; ```. I tested this change in the SQL Fiddle and still got the correct answer. We could remove all non-varying fields from the group by, but decided to leave the other sortable fields as that is the SQL standard.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10713:133,test,tested,133,https://hail.is,https://github.com/hail-is/hail/pull/10713,1,['test'],['tested']
Testability,"This PR enables calling QR decomposition via LAPACK. It's passing all the tests, and I've made some initial cleanup passes, but there's probably more that could be done to simplify this. . I referenced the numpy QR implementation when doing this, it may be helpful to understand the goal outside of the dealing with all the overhead of reading staged code: https://github.com/numpy/numpy/blob/0aeab48b9e914d1dc7041b7e3f3b7e575ffcbbed/numpy/linalg/linalg.py",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7682:74,test,tests,74,https://hail.is,https://github.com/hail-is/hail/pull/7682,1,['test'],['tests']
Testability,"This PR enables shuffling in the service. It is stacked on several other PRs, so look only at the; most recent commit. Some highlights:; - Open the public network back up. We should probably make query jobs special so that they can; access the internal network. To do that, batch would need to accept a ""acting on behalf of"" user; account: Query submits the job using its account ""acting on behalf of"" the user. Batch allows; query to use the private network, but for all other purposes, the job is owned by the user. - Allow public access to some the `gcr.io/hail-vdc/query` Docker image. - Automatically rewrite uses of `hailgenetics/` Docker images to their `gcr.io` equivalents. - Move `deploy_address` above `deploy_query` so that query can depend on address (necessary for; shufles). - Fix logging configuration. Services team wants all logs all the time to go to stdout. - Implement lowerDistributedSort using the shuffler. - Allow shuffle ids to be encoded so they can be used in `Literal`.; Unified Split",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9848:796,log,logging,796,https://hail.is,https://github.com/hail-is/hail/pull/9848,2,['log'],"['logging', 'logs']"
Testability,"This PR exposes the `lower_tail` and `log_p` parameters in `hl.pnorm`, `hl.qnorm`, `hl.pchisqtail`, and `hl.qchisqtail`, per this [feature request](https://hail.zulipchat.com/#narrow/stream/127634-Feature-Requests/topic/log_p.20option.20for.20pnorm.2Fpchisqtail). . While I was at it I made a few other changes, including:; - Added `hl.dnorm` and `hl.dchisq` to allow for computation of normal and chi-squared probability densities.; - Exposed `mu` and `sigma` in `hl.dnorm`, `hl.pnorm`, and `hl.qnorm` so users can specify different mean/sd values if they wish. By default these functions will still use `mu=0` and `sigma=1` for standard normal densities/cumulative probabilities/quantiles if not otherwise specified by the user.; - Added `ncp` parameter to `hl.qchisqtail` to allow users to specify a non-centrality parameter when computing quantiles.; - Added tests for all of these functions to `test_expr.py`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11038:863,test,tests,863,https://hail.is,https://github.com/hail-is/hail/pull/11038,1,['test'],['tests']
Testability,This PR extends environment variable options to skip Scala tests requiring plink/Rscript executables.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5126:59,test,tests,59,https://hail.is,https://github.com/hail-is/hail/pull/5126,1,['test'],['tests']
Testability,"This PR fixes a problem where the database state for the instance didn't match the in-memory state for the instance. For example, in-memory the state was 'inactive' while in the database it was 'deleted'. We're not sure why that happens yet. There are 4 possible states: pending, active, inactive, deleted. Rather than failing when this happens (causing an infinite retry loop), we check the return code from the database and act accordingly. . For `deactivate`, the return code will be non-zero only if the instance is inactive or deleted. I thought about making the in-memory state match the state in the database explicitly, but I think it's safer to keep the current behavior where the in-memory state is ""inactive"". The state will be fixed to deleted when the callers of deactivate eventually call `mark_deleted`. Likewise, `mark_deleted` expects the state to be inactive. I thought about handling the case where the db is pending or active and the in-memory state is inactive and realized that could never happen. Therefore, I just assert the db state must be already deleted and update the state appropriately.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8254:1038,assert,assert,1038,https://hail.is,https://github.com/hail-is/hail/pull/8254,1,['assert'],['assert']
Testability,"This PR implements the core IBS operations in terms of vectorized C code. In particular, we use the `libsimdpp` library to take advantage of whatever the widest available register is (many modern CPUs have AVX2 256 bit integer registers; Knights Landing will introduce AVX512 512-bit integer registers). The performance improvement is massive. We can compute the full IBD matrix on 2,535 samples and ~37 million variants in just under 17 minutes. We believe the complexity of this code is `O(nSamples^2 * nVariants)`. Assuming the scaling works out well, we should be able to compute 100,000 Variants and 40,000 samples in the same time. There were a couple issues I had to workaround, but hopefully we can re-use those workarounds:. - compiling native code from gradle; - packaging native code for `test`, `installDist`, and the JARs; - building native code specialized to certain architectures. Still left to do:. - [x] break the C tests into a separate file and call from gradle `test`; - [x] maybe use a library ([libsimdpp?](https://github.com/p12tic/libsimdpp)) to do the SIMD so we're agnostic to the underlying architecture (right now if you don't have AVX, we fall all the way back to 64-bit registers, rather than 128-bit SSE registers) ; - [x] some minor clean up of the IBSFFI class. Future Work:; - implement IBSExpectations in C as well; - expand this work to KING (or other structure correcting IBD calculations)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1092:800,test,test,800,https://hail.is,https://github.com/hail-is/hail/pull/1092,3,['test'],"['test', 'tests']"
Testability,"This PR incorporates @cseed 's changes from #3477, brings everything up to date with master, and adds/fixes the following:; - added a test for linreg with no covariates against R, and deleted old `test_linear_regression_with_no_cov` since that still had intercept.; - extended Skat to work without covariates and added test that it runs, but it’s hard to test result against R given that the latter fails with no covariates: `Error in solve.default(t(X1) %*% X1) : 'a' is 0-diml`. The result look ""reasonable"" to me.; - added req of at least one covariate for logreg in doc and code. It's going to be painful to get logistic to take no covariates, we can always come back to it if priority goes up. Related fun breeze behavior: `a(::, *) *:* b` with `a` an `(n, 0)` matrix and `b` an `n`-vector has dimensions `(0, 0)`.; - removed default value of empty list for `covariate`, both to help signal users to consider putting in the intercept (pipelines currently using intercept only with default empty `[]` will break) and because empty is not currently valid for logreg.; - noted in docs that intercept must be included explicitly.; - added comment of R code against which linreg and logreg are testing",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4067:134,test,test,134,https://hail.is,https://github.com/hail-is/hail/pull/4067,8,"['log', 'test']","['logistic', 'logreg', 'test', 'testing']"
Testability,"This PR introduces Search v2.0 for querying jobs in a batch with the REST interface. The UI additions will come in a separate PR as well as the upgraded search for querying batches. We can decide whether to upgrade CI to v2. I think for backwards compatibility we need to have the default remain ""1"" in perpetuity in the batch client and you have to explicitly say you want version 2 as an argument if you want the new query language. If we want to add tests for the SQL, I can do that once what I have currently is passing and we're happy with the code.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12748:453,test,tests,453,https://hail.is,https://github.com/hail-is/hail/pull/12748,1,['test'],['tests']
Testability,This PR introduces `NDArrayProducer`s as an alternative to the current `NDArrayEmitter`. The redesign is described here: https://dev.hail.is/t/ndarray-emitter-redesign/217/2. Benchmarks against main: https://gist.github.com/johnc1231/58072d13dc7266a2b4ecff44a4f16994,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10510:175,Benchmark,Benchmarks,175,https://hail.is,https://github.com/hail-is/hail/pull/10510,1,['Benchmark'],['Benchmarks']
Testability,"This PR introduces a new test case that was failing. It fixes two problems:. 1. needed to bind `n` to `blockSize` so that it didn't serialize the whole IR. ; 2. needed to add references to the regions from producer to `targetRegion` to ensure that the filter test passes. . Question: Does this keep too much garbage in memory? Ideally, I'd release the references to the regions of my producer once I finished constructing the new `RegionValue`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7952:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/7952,2,['test'],['test']
Testability,"This PR introduces and tests a new `EType`, `ENDArray`. It is not used anywhere yet except for tests, as there are some issues with `fundamentalType` and backcompatibility to be worked out, but in the interest of smaller PRs I figured I'd get the type implementation in first and do a follow up where we start using it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8910:23,test,tests,23,https://hail.is,https://github.com/hail-is/hail/pull/8910,2,['test'],['tests']
Testability,"This PR is almost done. I need to change one of the Makefile rules to include new targets from #5791 and make sure the database is cleaned and test the deploy works. My plan is to continually delete the production tables per deployment until we're happy with the schema and everything is working. Once this is all in, then the next PR will add the actual data to the tables in `server.py` and get rid of the global dictionaries / application state. I might try and do this in 2 stages (jobs and batch), but I'm not sure it's possible. Depends on #5781, #5784",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5809:143,test,test,143,https://hail.is,https://github.com/hail-is/hail/pull/5809,1,['test'],['test']
Testability,"This PR is already getting kind of massive, so I think I'm going to plan on implementing (extracted) aggregator support separately. I may also pull out the TableIR stuff into a separate PR and leave this as just implementations of pure value IR nodes, since I ended up needing to add a bunch of stuff to be able to pull minimal PTypes out of reads. I've written tests for most of the values nodes, but not all of them.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8602:362,test,tests,362,https://hail.is,https://github.com/hail-is/hail/pull/8602,1,['test'],['tests']
Testability,"This PR is important for making the query service tests run in a reasonable amount of time. 1. msec_mcpu is not used any more, so don't bother. This causes a conflict with *every other job in; the batch*, effectively serializing changes to every attempt in the same batch. 2. There is no need to eagerly take update lock on the instances table in add_attempt. A share lock; prevents other rows from mutating that value while we're looking at it. We do not care if they; read an old value for free_cores_mcpu between us reading `state` and us updating; `free_cores_mcpu`. 3. In `schedule_job` there is no need to take an update lock on the `batches` table (which; effectively serializes all scheduling on the same batch). 4. In `unschedule_job`, I made the formatting match other selects. 5. In `unschedule_job`, same thing about update locks on the `instances` table. 6. In `mark_job_creating`, same thing about update locks on the `batches` table. 7. In `mark_job_started`, same thing about update locks on the `batches` table. 8. In `mark_job_complete`, same thing about update locks on the `instances` table.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10367:50,test,tests,50,https://hail.is,https://github.com/hail-is/hail/pull/10367,1,['test'],['tests']
Testability,"This PR is incomplete. The goals are:; * Make the key on `Table` and `TableType` `Option`al.; * Make `Table.keyBy` produce an `OrderedRVD` backed `Table`. When setting `key = None`, the table has an `UnpartitionedRVD`.; * Make `RepartionedOrderedRVD` handle the case where the new partitioner has shorter partition keys than the old partitioner. Some things I know still need to be done:; * Fix `Table.same` to handle the case where the tables are unkeyed. This is currently causing tests `testKeyTableToDF` and `testSame` in `TableSuite` to fail.; * Make `Table.keyBy` smarter. In some cases, no sorting needs to be done, or maybe only local sorting.; * Add tests checking that writing then reading back an `OrderedRVD` backed table remains so, and that writing and reading can handle the `key = None` case.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3371:483,test,tests,483,https://hail.is,https://github.com/hail-is/hail/pull/3371,4,['test'],"['testKeyTableToDF', 'testSame', 'tests']"
Testability,"This PR is the first towards the goal of supporting arbitrary machine types. I tested both code paths where we create zones from a static list versus if there's over 4000 cores, creating it with east and west regions as well. I thought about putting the regions and init_zones in the database, but figured that could be a follow up PR. I wasn't sure what the best way to do that was.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9769:79,test,tested,79,https://hail.is,https://github.com/hail-is/hail/pull/9769,1,['test'],['tested']
Testability,This PR just adds a test to make sure submounts don't cause deletion.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12977:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/12977,1,['test'],['test']
Testability,"This PR lowers `MatrixBlockMatrixWriter`, which writes an entry field of a `MatrixTable` out into a `BlockMatrix`. Its main use is to support `BlockMatrix.from_entry_expr`. Accordingly, the `from_entry_expr` test on the `LocalBackend` is now passing. . Alright, removed all shuffles from this, should be good for review.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10476:208,test,test,208,https://hail.is,https://github.com/hail-is/hail/pull/10476,1,['test'],['test']
Testability,This PR lowers `TableGroupWithinPartitions` and adds a test for it.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8665:55,test,test,55,https://hail.is,https://github.com/hail-is/hail/pull/8665,1,['test'],['test']
Testability,"This PR lowers `TableKeyByAndAggregate`. The tests are set to only run in the interpreter though, since method splitting issues cause them to fail currently. If I turn off method splitting, the tests I've added pass.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8892:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/8892,2,['test'],['tests']
Testability,This PR lowers `TableParallelize` and beefs up the tests for parallelize a bit. If you see a simpler formulation of the math to compute `start` and `length` let me know.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8596:51,test,tests,51,https://hail.is,https://github.com/hail-is/hail/pull/8596,1,['test'],['tests']
Testability,"This PR lowers `TableRename`. The only thing that is not really tested is the renaming of key fields, because we don't support lowering `TableKeyBy` yet.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8605:64,test,tested,64,https://hail.is,https://github.com/hail-is/hail/pull/8605,1,['test'],['tested']
Testability,"This PR makes a number of changes to reduce the overhead of the interpreted `TableAggregate` in general, plus a couple of tweaks to `ApproxCDFCombiner` to eliminate sources of boxed primitives. The main changes are:; * Make `RegionMemory` track the number of Java objects being held, and include that in the log.; * Make the combOp in `TableAggregate` interpreter operate directly on `RegionValue`s. It modifies and returns the left state, and frees the right one.; * To generate the combOp function, I had to compile a function with two agg states (instead of concatenating two `TupleAggregatorStates`, which must live in a single region). That meant not using the `CombOp` IR node. I couldn't quite get rid of the `CombOp` node completely, because I don't understand how it's being used in `Aggregators2Suite` well enough to rewrite it, but that is now the only use.; * In `TableAggregate`, work with `RDD[WrappedByteArray]` instead of `RDD[Array[Byte]]`, to allow the incoming `Array[Byte]` to be GCed as soon as we have decoded it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8794:308,log,log,308,https://hail.is,https://github.com/hail-is/hail/pull/8794,1,['log'],['log']
Testability,"This PR only adds support in the worker and exposes the functionality in the batch client. Another PR will be added to make these changes user facing in the user version of batch. I added the WIP tag because I want to make sure the test passes once before I comment it out. That's because when this PR deploys, the workers will still be the old workers.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8960:232,test,test,232,https://hail.is,https://github.com/hail-is/hail/pull/8960,1,['test'],['test']
Testability,"This PR pushes aggregators much closer to where we want; them to be with regardes to SCodes/STypes. Here are the; important conceptual changes:; 1. Aggregators are no longer parameterized by the ptypes; of seqop and initop args. Instead, the state signature; contains a sequence of VirtualTypeWithRequiredness, which; is exactly what its name says. Aggregators use ptypes; internally, but this is not in the state signature.; 2. As a consequence of 1), we no longer cast argument types; to seqop/initops. We are still able to, for instance,pass a seqop; argument of a different type than the container type to; the collect aggregator because the collect aggregator accepts; an SCode argument, and uses the appropriate PType constructor to; store that SCode (with a possible conversion if necessary, as here).; 3. We codebuilder-ify most of the aggregator package. There are some; straggling bits, but I will clean that up in a followup since the; time to get a change in will scale super-linearly with its size. Benchmarks forthcoming. Agg SCodes hopefully done",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9868:1012,Benchmark,Benchmarks,1012,https://hail.is,https://github.com/hail-is/hail/pull/9868,1,['Benchmark'],['Benchmarks']
Testability,This PR refactors the aioclient to merge the functionality of Batch and BatchBuilder into just a single Batch object. The reason for making this change is to make adding job groups simpler. I will follow up with a change to Jobs after this merges. I apologize for the number of line changes. Most are just renaming `bb -> b` in the tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13458:332,test,tests,332,https://hail.is,https://github.com/hail-is/hail/pull/13458,1,['test'],['tests']
Testability,"This PR reimplements the Wald and LRT test types of hail's logistic regression rows in terms of ndarrays. It is not yet in a state where it should replace hail's current Breeze based logistic regression since:. 1. I still have to implement the `'firth'` and `'score'` test types (there's some extra work to implement Firth specifically that's going to mean adding a new ndarray method); 2. It is slower than Hail's Breeze based logistic regression. I'd still like to get it in its current state, as it's still a feature add to the local and service backends, and I intend to follow up by adding a benchmark for this to track performance changes. . This PR also fixes two bugs I found along the way:. 1. In Python, `TailLoop._compute_type` was not recursively calling `_compute_type` on its params, which was a mistake. ; 2. TailLoop creates bindings, but didn't have a `PruneDeadFields` rule. I added one based on the `Let` rule we already had.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10469:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/10469,6,"['benchmark', 'log', 'test']","['benchmark', 'logistic', 'test']"
Testability,"This PR removes the JVM version of Pedigree in favor a Python based one, as a step towards removing unnecessary calls to the JVM altogether. There were already Pedigree python tests I added a few more, and the ones in Scala seem to mostly test functionality that was never exposed to the python interface anyway.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6438:176,test,tests,176,https://hail.is,https://github.com/hail-is/hail/pull/6438,2,['test'],"['test', 'tests']"
Testability,"This PR sets up Elasticsearch, Kibana, and Fluentd on the Kubernetes cluster, allowing us to go to internal.hail.is/monitoring/kibana and look at logs from the cluster.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6413:146,log,logs,146,https://hail.is,https://github.com/hail-is/hail/pull/6413,1,['log'],['logs']
Testability,"This PR should fail because the gsa key is not in the test namespace -- I think we should have a second user account for testing. Still to do is to expose all of the user key infrastructure in the batch `Makefile` and `test-locally` in pipeline and ci. At some point, we should consolidate the `google_storage.py` file so not duplicating with `ci`. . But first I wanted to get feedback. @danking @cseed @akotlar",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/5866,3,['test'],"['test', 'test-locally', 'testing']"
Testability,This PR tries compacting the v2 tables instead of the intended v3 tables to test CI performance improvements on tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13156:76,test,test,76,https://hail.is,https://github.com/hail-is/hail/pull/13156,2,['test'],"['test', 'tests']"
Testability,"This PR tries to address the comments in #10860. However, there are a bunch of additional changes as well. I did everything necessary to make the entire batch code base cloud-agnostic. Before I fully test the entire system and someone proofreads this PR carefully, I would like your input on the design and get high level comments. It's a lot of work to test this branch!!!! Once everyone is happy with this structure, then I can start writing the Azure components. List of changes:; - Created a new CloudResourceManager that has the interface for interacting with VMs and managing cloud resources; - Renamed WorkerConfig to InstanceConfig; - Created a new Disk interface in batch/worker/disk.py; - Renamed the instance's zone field to location as Azure's zones mean something different.; - Moved all resource utility calculations to its own module; - resource_utils.py contains a set of functions that calls the appropriate implementation based on the cloud parameter. I moved all GCP specific implementations into the batch/gcp module. There is one cyclic dependency I couldn't break right now which is the InstanceCollectionManager -> InstanceCollection -> Pool/JPIM all need a CloudResourceManager while the CloudResourceManager needs to know the list of active instances and the global number of cores from InstanceCollectionManager to appropriately clean up resources and select a zone. I think of the InstanceCollectionManager hierarchy as being the manager of virtual instances and the CloudResourceManager manages the physical VM instances. I had to put the constructor functions for the InstanceConfig in utils.py because of cyclic imports even though the import was inside the static method constructor function in my original attempt.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10920:200,test,test,200,https://hail.is,https://github.com/hail-is/hail/pull/10920,2,['test'],['test']
Testability,"This PR tries to address the error we saw last Friday on Azure where there was a stuck worker that could not pull ubuntu:20.04 from Dockerhub. The error message in the worker logs was. ```; DockerError(500, 'Head \""https://haildev.azurecr.io/v2/ubuntu/manifests/20.04\"": denied: retrieving permissions failed'); ```. I looked at the system logs and the actual error message was this:. ```; Mar 03 16:56:12 batch-worker-default-standard-nj0qy dockerd[4066]: time=""2023-03-03T16:56:12.112691249Z"" level=info msg=""Attempting next endpoint for pull after error: Head \""https://haildev.azurecr.io/v2/ubuntu/manifests/20.04\"": denied: retrieving permissions failed""; ```. Higher up in the logs was:. ```; Mar 03 16:54:50 batch-worker-default-standard-nj0qy dockerd[4066]: time=""2023-03-03T16:54:50.520878176Z"" level=debug msg=""Fetching manifest from remote"" digest=""sha256:9fa30fcef427e5e88c76bc41ad37b7cc573e1d79cecb23035e413c4be6e476ab"" error=""<nil>"" remote=""docker.io/library/ubuntu:20.04""; Mar 03 16:54:50 batch-worker-default-standard-nj0qy dockerd[4066]: time=""2023-03-03T16:54:50.762789745Z"" level=debug msg=""Fetching manifest from remote"" digest=""sha256:9fa30fcef427e5e88c76bc41ad37b7cc573e1d79cecb23035e413c4be6e476ab"" error=""ref moby/1/index-sha256:9fa30fcef427e5e88c76bc41ad37b7cc573e1d79cecb23035e413c4be6e476ab locked: unavailable"" remote=""docker.io/library/ubuntu:20.04""; ```. My working hypothesis is described in detail here that the image cache with locks got corrupted with the simultaneous pulls: https://hail.zulipchat.com/#narrow/stream/300487-Hail-Batch-Dev/topic/Azure.20CI.20appears.20hung/near/339452619. To mitigate this, when we get the error ""denied: retrieving permissions failed"", we try and delete the image and then try pulling again once more before erroring gracefully. At least for now, this errors the user's job, but that's better than the status quo where the job is stuck.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12758:175,log,logs,175,https://hail.is,https://github.com/hail-is/hail/pull/12758,3,['log'],['logs']
Testability,"This PR updates a lot of NDArray code that was using the old `Code[T]` and emit triplet interface in favor of using code builders and `IEmitCode`. This is going to make it easier to update the `PNDArray` interface to not use `Code[Long]` everywhere, among other things. . Before this PR, there existed `NDArrayEmitter`, which did the old thing, and `NDArrayEmitter2`, which was a prototype of a new emitter. . After this PR, a tweaked version of `NDArrayEmitter2` has become the new `NDArrayEmitter`. `outputElement` now returns a `PCode`, and all the missingness problems are handled by carrying a `IEmitCodeGen[NDArrayEmitter]` around throughout the deforesting process, meaning the `NDArrayEmitter` no longer needs internal state about missingness. . I think the diff for `Emit.scala` is going to be pretty confusing. I'd at least opt for a side by side view instead of the intermingled one, as I've mostly implemented the same logic, just on top of our new code builder primitives. . All tests pass, but marking WIP since I'm noticing some slow down in the slice test that I want to look into. . This PR also adds a `get` function to `EmitValue` that gets the underlying `PValue` and moves two functions off of the `PNDArray` interface into `LinalgCodeUtils`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9824:931,log,logic,931,https://hail.is,https://github.com/hail-is/hail/pull/9824,3,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"This PR updates the LocalBackend to match the behavior of the SparkBackend w.r.t. error handling. . - `handle_java_exception` and `execute` are lifted into the parent file, `Py4JBackend`. ; - Tests in `test_ndarrays` that were marked as failing local tests are now passing, since the only failure was inconsistent handling of errors. . The error handling changes in question here were introduced in #9398",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9569:192,Test,Tests,192,https://hail.is,https://github.com/hail-is/hail/pull/9569,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"This PR will not be merged as-is, but split along the 3 commits contained within: ; - Add `Coalesce` IR node; - Expose pruning on FilterIntervals relational functions. These should be promoted to full IR nodes, especially after this PR.; - Add `ExtractIntervalFilters` optimizer pass. I also have yet to add tests for the last commit. What does this PR do?. ```python; In [2]: mt = hl.read_matrix_table('data/1kg.rep.mt'). In [3]: mt.filter_rows(mt.locus.contig == '16').count(); Hail: INFO: interval filter loaded 5 of 128 partitions; Out[3]: (384, 284). In [4]: mt.filter_rows(mt.locus.contig == '16').count_rows(); Hail: INFO: interval filter loaded 5 of 128 partitions; Out[4]: 384. In [5]: mt.filter_rows((mt.locus.contig == '16') | (mt.locus.contig == '19')).count(); Hail: INFO: interval filter loaded 10 of 128 partitions; Out[5]: (730, 284). In [6]: mt.filter_rows(hl.literal({'16', '19'}).contains(mt.locus.contig)).count_rows(); Hail: INFO: interval filter loaded 10 of 128 partitions; Out[6]: 730. In [7]: mt.filter_rows((mt.locus.contig == '16') & (mt.locus.position > 10_000_000)).count_rows(); Hail: INFO: interval filter loaded 2 of 128 partitions; Out[7]: 82. In [8]: mt.filter_rows((mt.locus.contig == '16') & (mt.locus.position > 10_000_000) & (mt.locus.position < 12_000_000)).count_rows(); Hail: INFO: interval filter loaded 5 of 128 partitions; Out[8]: 384. In [9]: mt.filter_rows(mt.locus == hl.parse_locus('1:3761547')).count(); Hail: INFO: interval filter loaded 1 of 128 partitions; Out[9]: (1, 284). In [10]: mt.filter_rows(hl.parse_locus_interval('16:20000000-30000000').contains(mt.locus)).count(); Hail: INFO: interval filter loaded 1 of 128 partitions; Out[10]: (35, 284); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5979:308,test,tests,308,https://hail.is,https://github.com/hail-is/hail/pull/5979,1,['test'],['tests']
Testability,"This PR will require BGEN index files are recreated!. I'm leaning towards adding an `overwrite` argument on `index_bgen`. I'm worried users are going to accidentally overwrite the old file unintentionally. Also, we haven't thought about the use case where users are using some scripts written for 0.1 and other 0.2 scripts with the same BGEN file. Hardcoding the index file is at the same location is going to pose problems. I thought about adding the option to specify the index files to use on `import_bgen` and where to write it for `index_bgen`. Thoughts?. I still want to do timing experiments before this PR is merged and test it on UKBB. Builds on #4194. They're not related, but this PR shouldn't go in until all of the index file format changes are done.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4198:628,test,test,628,https://hail.is,https://github.com/hail-is/hail/pull/4198,1,['test'],['test']
Testability,"This PR:. - Implements IR Nodes `MakeNDArray` and `NDArrayShape` in the JVM emitter. First emitter task, so let me know if I'm doing things in a nonstandard way or making it more complicated than I ought to. I have two questions as well:. 1. Should I implement NDArray in the interpreter as I go? What is the result of MakeNDArray in Interpreter world? Just a row?; 2. In text_expr.py, I commented out a decorator that makes the test run only with cxx compile, since I want to test the jvm byte code version. Is there any way currently to run both cxx and jvm compile for a test? If not maybe I ought to add one?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6874:429,test,test,429,https://hail.is,https://github.com/hail-is/hail/pull/6874,3,['test'],['test']
Testability,"This PR:. - Introduces `NDArrayReindex`, which allows the use of the `transpose` on hail `NDArrayExpressions`. ; - Introduces `NDArrayMap2`, which allows operations like elementwise +, -, /, *, etc. This has full broadcasting support to match numpys. ; - Fixes `NDArrayShape`, which was not properly implemented. The only reason `NDArrayShape` seemed to work was because calling `NDArrayShape` directly on a `MakeNDArray` or on a `NDArrayMap1` was always simplified away to just return the tuple. ; - Removed the Simplify rule that transformed `NDArrayShape(MakeNDArray(..., shape))` to `shape`, since that was resulting in a type change, as `NDArrayShape` always returns a required tuple and `shape` was not a required tuple.; - Changes `ndarrays_eq` in the tests to just go through `eval` instead of a write then read, since write and read don't exist yet. . Things I'm not happy with:; - The rule for emitting `NDArrayReindex` is written twice, since depending on the situation one or the other is computationally cheaper. Seems like there should be a version of `NDArrayEmitter` that allows us to use an already existing array as the data. . Might add a few more tests, but code is here for review.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7069:759,test,tests,759,https://hail.is,https://github.com/hail-is/hail/pull/7069,2,['test'],['tests']
Testability,"This PR:. - Pushes code builders through PNDArray interface instead of method builders; - Starts switching away from `PNDArray.data.load` to using methods like `dataPArrayPointer` and `dataFirstElementPointer`. All `dataPArrayPointer` calls will go away when ndarrays are no longer backed by `PArray`. ; - Speeds up repeated calls to `loadElement` on `SNDArrayPointerSettable`, which speeds up linear regression nd benchmark ~12%. Now we are approximately 60% slower than breeze linear regression.'; - Removes `CodePTuple`, since all instances of its use are removed now and it predated the current `PCode` system",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9883:415,benchmark,benchmark,415,https://hail.is,https://github.com/hail-is/hail/pull/9883,1,['benchmark'],['benchmark']
Testability,"This PR:. - Switches all python tests to run in debug mode on the checked allocator.; - Adds a pytest mark, `unchecked_allocator`. Anything with this mark will be rerun with the unchecked allocator as a way of testing the unchecked allocator",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9568:32,test,tests,32,https://hail.is,https://github.com/hail-is/hail/pull/9568,2,['test'],"['testing', 'tests']"
Testability,"This PR:. 1. Creates test_pca.py, moves current PCA tests there.; 2. Adds several new tests based on Section 7 of https://arxiv.org/pdf/1412.3510.pdf. The idea is to test different singular value spectra (i.e. gradual decay, rapid decay, big cliff in the middle, etc.). The new test is a little slow. It takes ~2 minutes to run altogether.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9513:52,test,tests,52,https://hail.is,https://github.com/hail-is/hail/pull/9513,4,['test'],"['test', 'tests']"
Testability,"This PR:. 1. Fixes a mistake in deploy.sh so that files get written to predictable paths. I manually put a file in the hail-common bucket for the purposes of testing this PR. ; 2. Replaces `make_pip_versioned_docs` with `get_pip_versioned_docs`, a step that will usually just pull prerendered docs from `hail-common`, but if it's a deploy, it will pass along the docs that it gets from its input, `make-docs`. . The effect should be that as soon as this merges, tutorials will correctly render again.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11314:158,test,testing,158,https://hail.is,https://github.com/hail-is/hail/pull/11314,1,['test'],['testing']
Testability,This PR:; - Replaces Fluentd with Filebeat (Filebeat config based on the recommended kubernetes filebeat config from elastic repo); - Increases elasticsearch storage. ; - Modifies Kibana's security context so that it doesn't run as root (Kibana will print an error message if it's running as root).; - Adds the `decode_json_fields` processor to filebeat so that it parse our structured log messages as json.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6659:386,log,log,386,https://hail.is,https://github.com/hail-is/hail/pull/6659,1,['log'],['log']
Testability,"This addresses a user issue whereby adding an indicator covariate that only varied in controls caused Firth to fail. Currently the standard logistic MLE is computed even for Firth regression so this beta can be used to initialize the Firth per-variant models. But if the data has a (quasi-)separated coordinate, the standard MLE may not converge, throwing an error before the Firth models are fit. With the changes in this PR, if the MLE does not converge, Firth falls back to initializing with the intercept-only estimate.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2737:140,log,logistic,140,https://hail.is,https://github.com/hail-is/hail/pull/2737,1,['log'],['logistic']
Testability,"This adds `partitionKeys` which partitions the keys into partitions containing as-near-to-equal-as-possible number of records. The partitions are represented by an array, `pb`, of keys of length `nPartitions + 1`. The partitions are taken to include records with keys in; ```; [pb(0), pb(1)); [pb(1), pb(2)); ...; [pb(nPartitions-1), pb(nPartitions)]; ```; Note that the last partition is inclusive of both end-points. I have two simple examples of the partitioning behavior at the top of `LSMSuite`. In these cases, the number of elements is so small that the LSM perfectly stored the distribution, so there is no approximation. `LSMSuite` also contains tests that use enough keys so as to force the LSM to not keep them all. When the LSM has more than 10,000 keys, it starts sampling. It flips a coin that is true with probability `10,000 / n_keys_seen`. As we see more keys, the probability that the next seen key is kept decreases. If we decide to keep a key, we uniformly randomly choose a key to evict. The above is not entirely true. In reality, we keep 9998 keys in an array and separately keep the greatest and the least. Those are the true greatest seen key and the true least seen key. The probabilities above are adjusted accordingly. If the sample of keys is unbiased, then we expect the partitions chosen to be roughly equal in number of records. ---. The TestNG changes are already in another PR, I'll rebase when that lands. I separately fixed a bug in KeyedCodecSpec wherein it incorrectly assumed the Key and Value types were the same. I also fixed a bug in that the LSM used non-thread-local regions. Regions are not thread safe and the Indeed LSM implementation uses many threads. In order to track every addition to the LSM, I made the Indeed LSM object private and made the Hail LSM class have the necessary methods.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8803:655,test,tests,655,https://hail.is,https://github.com/hail-is/hail/pull/8803,2,"['Test', 'test']","['TestNG', 'tests']"
Testability,"This adds `test_storage_uri` and `batch_logs_storage_uri` fields in the global config. In GCP, this meant just copying existing GCS bucket names and prepending `gs://`, which I've done in the terraform and manually in default. For azure, in the terraform I add two storage accounts, `batch` and `ci`, with `logs` and `test` containers, respectively. This felt like an intuitive consolidation of containers under storage accounts that would make permissioning cleaner. E.g. the batch service principal has access to the entire batch storage account, but only to the `test` container in the ci storage account. However, I've not thought about it deeper than that so it might be worth some looking into. Luckily this decision has no impact on application code. There's still more to be done in a follow-up PR to replace instances of `hail_test_gcs_bucket_name` with `test_storage_uri`, but I think this takes care of the batch deployment's dependency on GCS.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11014:307,log,logs,307,https://hail.is,https://github.com/hail-is/hail/pull/11014,3,"['log', 'test']","['logs', 'test']"
Testability,"This adds a new IR pretty-printer that uses an mlir inspired printed form. It is currently not rigorously tested, so using the new format in logs is gated behind the flag `HAIL_USE_SSA_LOGS`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11302:106,test,tested,106,https://hail.is,https://github.com/hail-is/hail/pull/11302,2,"['log', 'test']","['logs', 'tested']"
Testability,"This adds a new IR that does a `consoleLogInfo` as a side effect. I use it once, in `_linear_regression_rows_nd`, to mimic the info message we were logging to users.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10726:148,log,logging,148,https://hail.is,https://github.com/hail-is/hail/pull/10726,1,['log'],['logging']
Testability,"This adds all WIP-labelled PRs to the Awaiting Action table on the CI's /me page. CI has automated testing in-so-far as we create a test repository on GitHub with some toy code in it and see that CI can deploy that code into Kubernetes. This stuff not so much, but I can for example put a CI in my namespace and make a PR to its test repository, add a wip tag, and see the table change at `internal.hail.is/dgoldste/ci/me`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11290:99,test,testing,99,https://hail.is,https://github.com/hail-is/hail/pull/11290,3,['test'],"['test', 'testing']"
Testability,"This adds apiserver to CI, and modifies notebook to use the hail-jupyter image that the former defines. To ensure that it's using the appropriate image, notebook2's Makefile has been modified to read the [""hail-jupyter-image"" label that the apiserver deployment defines](https://github.com/hail-is/hail/blob/master/apiserver/deployment.yaml.in#L74); - the Makefile tests that we get a non-empty string from the kubectl command used to read this value before proceeding. Stacks on https://github.com/hail-is/hail/pull/5592, without which notebook2 wouldn't work when also defaulting to hail-jupyter. I used the ""dependencies"" property in `projects.yaml` as well as presenting the proper order, but that doesn't look like it's actually used yet. Still, it seems like a good idea, so if that is planned still I would like notebook2 to take advantage. ```; ..//env-setup.sh:for project in $(cat projects.yaml | grep '^- project: ' | sed 's/^- project: //'); ..//env-setup.sh-do; ..//env-setup.sh- if [[ -e $project/environment.yml ]]; ..//env-setup.sh- then; ..//env-setup.sh- ${CONDA_BINARY} env create -f $project/environment.yml || ${CONDA_BINARY} env update -f $project/environment.yml; ..//env-setup.sh- fi; ..//env-setup.sh-done; ```. ```; ..//hail-ci-build.sh:PROJECTS=$(cat projects.yaml | grep '^- project: ' | sed 's/^- project: //'); ..//hail-ci-build.sh-; ..//hail-ci-build.sh-for project in $PROJECTS; do; ..//hail-ci-build.sh- if [[ -e $project/hail-ci-build.sh ]]; then; ..//hail-ci-build.sh- CHANGED=$(python3 project-changed.py target/$TARGET_BRANCH $project); ..//hail-ci-build.sh- if [[ $CHANGED != no ]]; then; ..//hail-ci-build.sh- (cd $project && /bin/bash hail-ci-build.sh); ..//hail-ci-build.sh- fi; ..//hail-ci-build.sh- fi; ..//hail-ci-build.sh-done; ```. cc @cseed, @danking",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5593:365,test,tests,365,https://hail.is,https://github.com/hail-is/hail/pull/5593,1,['test'],['tests']
Testability,"This adds filter, filterCols, and filterRows to BlockMatrix, en route to moving kinship and LD matrix to from IRM to BlockMatrix. For example, filtering out rows/columns from a kinship matrix (e.g. to remove samples with missing covariate data); or filtering an LD matrix (e.g. to perform Leave-One-Chromosome-Out LMM analysis). Since the number of tasks equals the number of resulting partitions (blocks), these functions are suited to filtering out a small to medium subset (say, throwing out a few rows and columns, or half of the rows and columns) and may fail when filtering all but a small number of rows and columns due to all the blocks being sent to one executor. In the latter case, one can do better by writing the result of filterCols, then reading and applying filterRows. Testing locally, on a 16384 * 16384 matrix (block size 4096, 16 partitions, 128MB each), when only filtering columns (or rows), filterCols (or filterRows) tends to be faster than filter (likely due to less copying), and filterCols tends to be a bit faster than filterRows (which I think is due to lack of transpose and esp. better striding). When filtering both columns and rows, filter tends to be fastest but filter_columns followed by filter_rows is often comparable. It may be that the cost of an additional copy in the first step is offset by smaller strides resulting better caching in the second step. For example, filtering out every 31st row and column:; ```; filter; [9.550655126571655, 9.62321400642395]; filterCols.filterRows; [12.190248966217041, 12.07064700126648]; filterRows.filterCols; [14.239542007446289, 15.601837158203125]; ```; Filtering out every row and column with 0.5 probability, resulting in 4 partitions:; ```; filter; [4.625396966934204, 4.427164077758789, 4.435616970062256]; filterCols.filterRows; [4.647814035415649, 4.610292911529541, 4.655405044555664]; filterRows.filterCols; [4.866307973861694, 5.073392868041992, 5.470307111740112]; ```. On GCP, with 32 core highmem master and",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2647:786,Test,Testing,786,https://hail.is,https://github.com/hail-is/hail/pull/2647,1,['Test'],['Testing']
Testability,"This adds preliminary support for python 3.7 including a conda env with relaxed dependencies compared to what we currently ship. I've tested this manually and found no problems aside from a lot of warnings about upcoming depreciation in new versions of dependencies. The value of `__origin__` changed for many types from 3.6 to 3.7, which is why the check function map needed to be expanded.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4701:134,test,tested,134,https://hail.is,https://github.com/hail-is/hail/pull/4701,1,['test'],['tested']
Testability,"This adds roles to the auth service. They are not used yet, but they are stored in the database and I created a simple UI for adding them. I tested with this dev deploy. FYI @danking @jigold",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9672:141,test,tested,141,https://hail.is,https://github.com/hail-is/hail/pull/9672,1,['test'],['tested']
Testability,This adds simple unit tests to the CI functionality that generates the configs for `gateway` and `internal-gateway`. It also adds a developer-only endpoint to CI for easier inspection of what configs CI is currently generating in production. These configs do not contain any sensitive information.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14524:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/14524,1,['test'],['tests']
Testability,"This adds terraform modules for CI azure resources and CI k8s resources. It also many roles to the test account that the batch account has so that we can run PR and test namespaces (internal batch instances use the test account for all the services so the test account needs tons of privilege. It looks scary, but this is the model we currently have). Thanks to #11053, which is the current version of the CI deployment in Azure, this required no change to the CI application code. ### Sidebar; It might look weird that I've added a block here for the kubernetes provider. That is because up until now I've kept all the k8s and azure terraform in separate root modules, so that they need to be `terraform apply`'d separately and therefore their provider blocks were separated as well. While keeping the code isolated is good (the k8s modules can be reused for GCP), putting them in separate apply's was purely because of [this bug](https://github.com/hashicorp/terraform-provider-kubernetes/issues/1028) in the kubernetes provider. I ran into it when experimenting tearing clusters down and putting them back up again. However, it has since proven very cumbersome to manage two different terraform states where one relies heavily on the other and I've changed my mind. The bug in question has a PR forthcoming and is really only a problem when tearing a K8s cluster down and rebuilding it while preserving other terraform state, which isn't something I see us dealing with often past initial development. Thus, I've added the k8s provider block so that I can directly invoke the CI k8s module. I'll follow up with a PR that moves the other k8s module invocations in here as well. If it would help, I can first start with a dev doc detailing our terraform structure (or where I want it to be).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11084:99,test,test,99,https://hail.is,https://github.com/hail-is/hail/pull/11084,4,['test'],['test']
Testability,This adds the necessary glue to use the Scala AzureStorageFS when running QoB in Azure and turns on the QoB tests in Azure CI.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11816:108,test,tests,108,https://hail.is,https://github.com/hail-is/hail/pull/11816,1,['test'],['tests']
Testability,"This allows a developer with access inside of the batch worker container to examine currently running `asyncio` tasks inside the worker, get stack traces, examine locals, etc. E.g. ```; monitor >>> ps; 367 tasks running; +---------------------------------------------------------------------------------------------------------------------------------+; | Task ID State Name Coroutine Created Location Since |; +---------------------------------------------------------------------------------------------------------------------------------+; | 140063857549376 PENDING Task-755614 Worker.post_job_started() - - |; | 140063857549584 PENDING Task-755568 Worker.run_job() - - |; | 140063857549792 PENDING Task-755590 Worker.run_job() - - |; | 140063857550000 PENDING Task-755592 Worker.run_job() - - |; | 140063857550208 PENDING Task-755372 RequestHandler._handle_request() - - |; | 140063857550416 PENDING Task-755637 Worker.run_job() - - |; | 140063857550624 PENDING Task-755580 BaseSubprocessTransport._connect_pipes() - - |; | 140063857550832 PENDING Task-752239 Worker.run_job() - - |; | 140063857551040 PENDING Task-755612 Worker.post_job_started() - - |; | 140063857551248 PENDING Task-755610 Worker.post_job_started() - - |; | 140063857551456 PENDING Task-755589 Worker.run_job() - - |; | 140063857551664 PENDING Task-755613 BaseSubprocessTransport._connect_pipes() - - |; | 140063857552288 PENDING Task-755591 Worker.run_job() - - |; ```. Wondering do we want this for production or just to activate in test namespaces?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13439:1510,test,test,1510,https://hail.is,https://github.com/hail-is/hail/pull/13439,1,['test'],['test']
Testability,"This allows the user to specify the cloud platform ('gcp' or 'aws') they are using when accessing datasets via the datasets API and annotation DB. A user running hail on AWS would read from the s3 bucket, and a user running on GCP would read from the gs bucket (can also still read locally from gs bucket with cloud storage connector installed). Not intended for cross-platform use like running a dataproc cluster and trying to access the s3 bucket, or trying to access the gs bucket on an EMR cluster. Will assume user on AWS has their configuration set with their credentials. . Did not have permissions to set up a cluster or EC2 instance on AWS to test, but was able to access all the datasets without issue on a dataproc cluster when using s3a:// prefixes and providing my AWS credentials in the spark config. So these changes should (hopefully) work fine on an EMR cluster with the s3:// client. Everything worked as expected on GCP. Overview of changes:; - Added missing type hints to `load_dataset()` function and methods in `db.py`.; - In `datasets.json`:; - Added AWS urls so now for each version of a dataset in dataset[""versions""], the url entry looks like:; ```; ""url"": {; ""aws"": {; ""us"": ""s3://hail-datasets-us-east-1/...""; },; ""gcp"": {; ""eu"": ""gs://hail-datasets-eu/..."",; ""us"": ""gs://hail-datasets-us/...; }; ```; - In `load_dataset()` function:; - Added `cloud` parameter, set default values to `region='us'` and `cloud='gcp`.; - In `DB` class:; - Added `cloud` parameter to constructor, set default values to `region='us'` and `cloud='gcp`.; - All datasets in `datasets.json` currently end up in the `_DB__by_name` dictionary, even if not annotation datasets. Added line 279 in `db.py` to fix this and filter out datasets that are not annotation datasets (datasets missing ""annotation_db"" key).; - In `Dataset` class:; - Added `cloud` and `custom_config` parameters to `Dataset.from_name_and_json()` to pass to `DatasetVersion.from_json()` to grab correct urls for platform.; - Refac",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9605:652,test,test,652,https://hail.is,https://github.com/hail-is/hail/pull/9605,1,['test'],['test']
Testability,"This allows the writing of job logs greater than the max size of a python `bytes`, and probably more stable memory usage on the worker.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14075:31,log,logs,31,https://hail.is,https://github.com/hail-is/hail/pull/14075,1,['log'],['logs']
Testability,"This allows us to fully control subnet parameters. In particular, we want VPC flow logs enabled on all subnets. I already made this change in the console and deleted the asia, europe, me, northamerica, and southamerica subnets which were not in use and which lacked VPC flow logs.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13016:83,log,logs,83,https://hail.is,https://github.com/hail-is/hail/pull/13016,2,['log'],['logs']
Testability,"This allows us to write functions for the IR that handle missingness specially, in cases where we don't necessarily want the behavior where any missing argument implies that the entire function result is considered missing. I implemented `&&` and `||` using this in order to test. I also refactored the return from Emit.emit to a case class `EmitTriplet` to make it easier to talk about them in other contexts. cc @cseed @danking",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3210:275,test,test,275,https://hail.is,https://github.com/hail-is/hail/pull/3210,1,['test'],['test']
Testability,"This also fixes logreg issue in MutableGenotype branch, by no longer filtering on genotype stream.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1425:16,log,logreg,16,https://hail.is,https://github.com/hail-is/hail/pull/1425,1,['log'],['logreg']
Testability,"This also fixes the currently broken `delete_*_tables` steps. In the past, all dev and test databases shared the same MySQL Server (with production), so instead of each service getting its own dedicated database, there was one database per dev/test namespace with all the tables for all the services. This made it difficult to reset the database state of a particular service -- you needed to explicitly delete only the tables for that particular service. Nowadays, dev and test databases live on their own MySQL Servers, so each service gets its own database (like in production). This makes it a lot easier to reset a service's database, we just drop the MySQL database for that service. This PR makes that change, deletes all the now unused `delete-*-tables.sql` files, and adds a dev doc explaining how to reset a dev database. The reason these steps were broken is that the sql configs in dev/test namespaces use K8s DNS for the `host`, which does not work out of the box in batch jobs because they are not in the K8s network. There's code in `database.py` that uses the K8s API to resolve the database host to an IP address that the batch jobs can access. This is why I wrote a python script instead of just using `mysql`. I tested these with the following dev deploy, which scrapped everything and I was able to log in after it was done!. ```; hailctl dev deploy -b daniel-goldstein/hail:dev-ns-delete-db -s delete_auth_tables,delete_batch_tables,deploy_batch,add_developers; ```. cc: @sjparsa, @iris-garden given your recent dev namespace woes",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13456:87,test,test,87,https://hail.is,https://github.com/hail-is/hail/pull/13456,6,"['log', 'test']","['log', 'test', 'tested']"
Testability,"This assert is here because the buffer we use in the FS is a Java array and can't be longer than MAX_INT, but clearly the position in the blob can be more than that. This currently breaks range reads into indexes on data that's more than 2GiB.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12164:5,assert,assert,5,https://hail.is,https://github.com/hail-is/hail/pull/12164,1,['assert'],['assert']
Testability,"This assertion was getting triggered by the ref `inner` in a perfectly correct IR of the form `StreamMap(inner, StreamGrouped(...), ...)`. There's no way to avoid the unrealizable ref when mapping over a nested stream, and I don't see why `extract` depends on this assertion.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9631:5,assert,assertion,5,https://hail.is,https://github.com/hail-is/hail/pull/9631,2,['assert'],['assertion']
Testability,"This basically just pulls out the logic from the `NativeDecoder` and `NativeEncoder` stuff in RowStore.scala into their own objects, and dynamically generates a c++ class for the row type. (The only things that have changed between `NativeDecoder`/`cxx.PackDecoder` and the encoders are the `apply` functions; I'm generating an Encoder class that inherits NativeObj instead of relying on the wrapper classes in `Encoder.h` and `Decoder.h`. This mostly felt like it made things easier to reason about when I started writing the full-stage code generation stuff, but I've pulled it out here as a separate PR. cc @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4722:34,log,logic,34,https://hail.is,https://github.com/hail-is/hail/pull/4722,1,['log'],['logic']
Testability,This benchmark tests speed of collecting data and converting to Python. I am expecting #10971 to speed this up considerably.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10972:5,benchmark,benchmark,5,https://hail.is,https://github.com/hail-is/hail/pull/10972,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"This builds on top of #3779 and will merge clean once that it's in. Please review after #3779 merges. This adds a row field that is the index of the variant _in the original file_. This might not be the same as the locus ordered position. In particular, our 8bit test file has variants ordered by RSID, which is not the same ordering as the file ordering. The next file will add a filter on file row indices. Then, finally, we can use all this in combination to generate a list of file row indices to keep and dramatically increase filtering speed. ```python; In [1]: import hail as hl; ...: ; ...: mt = hl.import_bgen('/Users/dking/projects/hail/src/test/resources/example.8bits.bgen',; ...: entry_fields=['dosage'],; ...: contig_recoding={'01': '1'},; ...: reference_genome='GRCh37',; ...: _row_fields=['varid', 'rsid', 'file_row_idx']); ...: ; ...: mt.rows().show(); ```; ```; +---------------+------------+----------+-----------+--------------+; | locus | alleles | rsid | varid | file_row_idx |; +---------------+------------+----------+-----------+--------------+; | locus<GRCh37> | array<str> | str | str | int64 |; +---------------+------------+----------+-----------+--------------+; | 1:1001 | [""A"",""G""] | RSID_101 | SNPID_101 | 99 |; | 1:2000 | [""A"",""G""] | RSID_2 | SNPID_2 | 0 |; | 1:2001 | [""A"",""G""] | RSID_102 | SNPID_102 | 100 |; | 1:3000 | [""A"",""G""] | RSID_3 | SNPID_3 | 1 |; | 1:3001 | [""A"",""G""] | RSID_103 | SNPID_103 | 101 |; | 1:4000 | [""A"",""G""] | RSID_4 | SNPID_4 | 2 |; | 1:4001 | [""A"",""G""] | RSID_104 | SNPID_104 | 102 |; | 1:5000 | [""A"",""G""] | RSID_5 | SNPID_5 | 3 |; | 1:5001 | [""A"",""G""] | RSID_105 | SNPID_105 | 103 |; | 1:6000 | [""A"",""G""] | RSID_6 | SNPID_6 | 4 |; +---------------+------------+----------+-----------+--------------+; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3808:263,test,test,263,https://hail.is,https://github.com/hail-is/hail/pull/3808,2,['test'],['test']
Testability,This caused assertion errors in Scala in `MakeArray.unify`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12750:12,assert,assertion,12,https://hail.is,https://github.com/hail-is/hail/pull/12750,1,['assert'],['assertion']
Testability,"This causes issues when starting interactive sessions on clusters. Before, I get lots of output like this:; SPARKMONITOR_LISTENER: Started SparkListener for Jupyter Notebook; SPARKMONITOR_LISTENER: Port obtained from environment: ERRORNOTFOUND. SPARKMONITOR_LISTENER: Exception creating socket:java.lang.NumberFormatException: For input string: ""ERRORNOTFOUND"". SPARKMONITOR_LISTENER: Application Started: application_1569946119076_0001 ...Start Time: 1569946336092. SPARKMONITOR_LISTENER: Exception sending socket message:java.lang.NullPointerException. After:; <nothing>. I also tested to make sure the monitor still worked in a notebook.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7174:581,test,tested,581,https://hail.is,https://github.com/hail-is/hail/pull/7174,1,['test'],['tested']
Testability,"This change adds an nginx sidecar to the batch-driver pod for terminating TLS. TLS negotiation has proven a major bottleneck to scheduling performance, as the batch-driver currently spends up to 60% of its CPU time in handshakes with workers. Moving TLS termination into a sidecar that can leverage additional cores both reduced CPU pressure on the driver and allowed for a 3-4x increase in job-scheduling throughput. ## Benchmarking; Below are before-and-after profiles of the same benchmark (30,000 1s jobs) under the proposed higher rate limit, showing CPU time:; <img width=""1889"" alt=""Screen Shot 2022-03-21 at 5 10 13 PM"" src=""https://user-images.githubusercontent.com/24440116/159364769-6fd60840-5745-40ab-802e-68b8d4f32078.png"">; <img width=""1885"" alt=""Screen Shot 2022-03-21 at 5 12 33 PM"" src=""https://user-images.githubusercontent.com/24440116/159364787-ca7ec307-877d-479c-9c19-8746b5e82eab.png"">. Looking at Wall time, the before profile is nearly identical because at the current rate limit the driver uses 100% of its CPU shares under this benchmark. On this branch, CPU utilization drops to 40-60%, giving the following wall time profile:; <img width=""1879"" alt=""Screen Shot 2022-03-21 at 5 30 39 PM"" src=""https://user-images.githubusercontent.com/24440116/159367182-0830d6ff-3b6f-4fa7-8004-0fc43283ec4a.png"">. So we can be confident that driver CPU is no longer a bottleneck even in the increased rate limit. ## So what's the bottleneck now?; Since the higher rate limit still leaves the driver plenty of CPU room (I've seen it peak at 60% of a vCPU), why not crank it higher? Well, we're increasing concurrency so latent deadlocks start to be a bigger issue again. We start to see tens of deadlocks per second in the proposed rate limit and hundreds at higher rate limits. As a result, we're spending more cycles repeating queries instead of actually scheduling faster. Next steps should focus on eliminating deadlocks before we can continue to max out CPU use. ## Miscellaneous; We'v",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11638:421,Benchmark,Benchmarking,421,https://hail.is,https://github.com/hail-is/hail/pull/11638,3,"['Benchmark', 'benchmark']","['Benchmarking', 'benchmark']"
Testability,"This change allows `Let` nodes to bind multiple values. Serialisation is backwards compatible meaning no changes to existing python code are necessary.; This form of `Let` is perferable because it flattens deeply nested IRs which can help reduce the time and stack space needed to type-check.; An extreme example of this is the benchmark [matrix_multi_write_nothing](https://github.com/hail-is/hail/blob/67801dfc66b504a7d49daa53f7ec6d22c1194585/benchmark/python/benchmark_hail/run/matrix_table_benchmarks.py#L369C10-L373), which overflows the stack on type-checking without this change.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13984:328,benchmark,benchmark,328,https://hail.is,https://github.com/hail-is/hail/pull/13984,2,['benchmark'],['benchmark']
Testability,This change allows batchces which fit in one bunch to be created in one; request instead of three. I found this saved a few hundred milliseconds; for batches with 1 job. This path is already well tested because most; of our test batches fit in one job. To be clear: all the savings here is from avoiding two round-trips to front-end.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11044:196,test,tested,196,https://hail.is,https://github.com/hail-is/hail/pull/11044,2,['test'],"['test', 'tested']"
Testability,"This change also updates the `make pylint-hail` target to include the `hail/python/(hail|test|cluster-tests)` directories, rather than the `hail/` directory. This is because the latter would require adding `hail/__init__.py` and/or `hail/python/__init__.py` files, which creates issues because some modules in `hail/python/hail` and `hail/python/hailtop` have the same name but are at different paths, which breaks the package resolution for `ruff` and `mypy`. For this reason, although `black` is run on the files in the `hail/` and `hail/python/` directories, `pylint` cannot be.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13235:89,test,test,89,https://hail.is,https://github.com/hail-is/hail/pull/13235,2,['test'],"['test', 'tests']"
Testability,"This change combines cloud auth logic that was previously duplicated; between the various `FS` implementations and the `BatchClient`. . The main refactoring is to make the interface between the `ServiceBackend` more; high-level and leave json serialisation to the `BatchClient`. To do this, I've; added a bunch of case classes that resemble the python objects the batch service ; expects (or a subset of the data). To simplify the interface, I've split batch; creation from job submission (update). For QoB, the python client creates the ; batch before handing control to the query driver; batch creation is necessary; for testing only. This change has low security impact as there are minor changes to the creation; and scoping of service account credentials. Note that for each `FS`, credentials; are scoped to the default storage oauth2 scopes for each service.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14684:32,log,logic,32,https://hail.is,https://github.com/hail-is/hail/pull/14684,2,"['log', 'test']","['logic', 'testing']"
Testability,"This change creates mysql pods for test and dev namespaces, instead of sharing the CloudSQL database server. The areas of change are as follows:. ### Generation of the namespace's database-server-config; The current approach in main does a little trick. Since the current `createDatabase` step uses the `database-server-config` from default to generate admin/user sql configs, the CI pipeline creates a dummy database `test-database-instance` to create a `sql-test-instance-admin-config` that inherits the credentials from the production `database-server-config`, and then copies that within the test namespace to `database-server-config`. In this change, since we are creating the server ourselves, we can just replace these with a step that creates a `database-server-config` from scratch, and then uses that for the DB pod. Overall making these changes really gave me the heebie jeebies that the test and dev namespaces have all these credentials to the CloudSQL server. I'm glad this gets rid of that. ### Accessing the database server; We use the DB pod's service DNS name as the `host` so inside Kubernetes this Just Works. The one caveat is the CI pipeline in which we run migrations in batch jobs. Those jobs need a way to reach the DB pod. I achieve this with a NodePort and then use the job's K8s credentials to resolve the node and port that the DB is on. The code I've added to do this resolution feels a bit janky, wouldn't mind some feedback on that. In terms of security, if a user job was able to somehow resolve the address of a test db, they would still not have the credentials to access it, and this is currently also the case with the production database. Nevertheless, this does raise an action item that we should only allow traffic to the k8s and DB subnets for `network=private` jobs, but I think we should make that a separate PR. ### Database creation; In order to test this properly in a dev deploy, I needed to make some changes to `create_database.py`. In main, dev deplo",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13030:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/13030,5,['test'],"['test', 'test-database-instance', 'test-instance-admin-config']"
Testability,This change enforces that `String` accepting methods just convert to `URL` and do nothing more. All the logic is now in `URL` accepting methods. I think this is a bit easier to understand. It also avoids the `val url = XXXX.parseUrl(filename)` at the start of every method. I had to remove the type parameter because I would have needed a kind of existential types that I could not easily encode in Scala. I suspect there's a slight speed benefit because anywhere that we work with URLs we can avoid re-parsing them for each method call.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13650:104,log,logic,104,https://hail.is,https://github.com/hail-is/hail/pull/13650,1,['log'],['logic']
Testability,"This change exists as part of larger refactoring work. Herein, I've exchanged; hard-coded contextual strings passed to `ExecutionTimer.time` with implict; contexts, drawing inspiration from scalatest. These contexts are now supplied after entering functions like `Compile` and; `Emit` instead of before (see `ExecuteContext.time`). By sprinking calls to ; `time` throughout the codebase after entering functions, we obtain a nice trace; of the timings with `sourcecode.Enclosing`, minus the previous verbosity. See [1] for more information about what pre-built macros are available. We can; always build our own later. See comments in [pull request id] for example output.; Note that `ExectionTimer.time` still accepts a string to support uses like; `Optimise` and `LoweringPass` where those contexts are provided already.; It is also exception-safe now. This change exposed many similarities between the implementations of query; execution across all three backends. I've stopped short of full unification; which is a greater work, I've instead simplified and moved duplicated result; encoding into the various backend api implementations. More interesting changes are to `ExecuteContext`, which now supports; - `time`, as discussed above; - `local`, a generalisation for temporarily overriding properties of an ; `ExecuteContext` (inspired by [2]). While I've long wanted this for testing,; we were doing some questionable things when reporting timings back to python,; for which locally overriding the `timer` of a `ctx` has been very useful.; We also follow this pattern for local regions. [1] https://github.com/com-lihaoyi/sourcecode; [2] https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Reader.html#v:local",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14679:1383,test,testing,1383,https://hail.is,https://github.com/hail-is/hail/pull/14679,1,['test'],['testing']
Testability,"This change grew out of https://github.com/hail-is/hail/pull/13674.; The idea is simple - we shouldn't be appending code after control statements as such statements are redundant. That idea opened pandora's box, but now we're not generating and dropping dead code anymore. Main changes that rose form fixing fallout from adding assert in `Block.append`:; - Implement basic control-flow structures (if, while, for, switch) in `CodeBuilderLike` and remove the older implementations from `Code`.; - main difference is these are built from sequencing `Code` operations rather than being defined from LIR; - allows for a higher-level implementation that I think is simpler to read.; - Use the type-system to prevent foot-guns like `cb.ifx(cond, label.goto)`. Other changes:; - rename `ifx`, `forLoop` and `whileLoop` to just `if_`, `for_` and `while_`, respectively.; - Implement loops in-terms of one-another to remove code duplication.; - Fix logic for when to write IRs as some default value behaviour was broken when `HAIL_WRITE_IR_FILES` was set in tests",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13752:328,assert,assert,328,https://hail.is,https://github.com/hail-is/hail/pull/13752,3,"['assert', 'log', 'test']","['assert', 'logic', 'tests']"
Testability,"This change introduces timeouts to `benchmark run`. This makes it easier; to run benchmarks on old versions of Hail, which might have extremely; slow times for certain benchmarks (block matrix multiply, looking at you)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7214:36,benchmark,benchmark,36,https://hail.is,https://github.com/hail-is/hail/pull/7214,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"This change is temporary. I do not intend to keep the extra hop to `auth` on all internal-gateway requests. Once all the TLS changes go in and everything in the cluster is TLS-secured, then I can switch the internal gateway to unconditionally use HTTPS and remove the router-resolver's extra endpoint. I've already deployed this (I need it to get batch tests to pass in my namespace.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8490:353,test,tests,353,https://hail.is,https://github.com/hail-is/hail/pull/8490,1,['test'],['tests']
Testability,"This change simplifies aspects of the annotation db's implementation as well as adding new features such as annotating a Table or using a custom JSON configuration file. The Annotation DB will remain experimental until we iron out the JSON configuration file's structure and we're confident in the deploy process. - Allow custom URL or JSON for configuration (enabling testing and local development).; - Support Tables.; - Restructure the annotation db JSON to reduce duplication. It now maps from dataset name to dataset metadata and dataset versions.; - Simplify JS logic based on new JSON structure.; - Check-in and implement versioned deployment of the annotation db configuration JSON.; - Add a JS file to the website that defines `hail_version` and `hail_pip_version`.; - Add `key_properties` which currently supports two properties `gene` and `unique`. Gene keyed datasets require using the `gencode` dataset to crosswalk from locus to gene before joining.; - Rudimentary test of key properties functionality. Foundational Changes Outside Annotation DB:; - Define `__pip_version__` in `hail`.; - Teach `StructExpression` and `TupleExpression` how to slice by integers, facilitating the construction of structs of a prefix of fields.; - Make `ttuple` a mapping from integers to the tuple elements.; - Implement `Table._maybe_flexindex_table_by_expr` which, given a indexer expression, finds a prefix of the expression that can index the indexee, if such an expression exists. Unrelated changes:; - Clarify Makefile error echos with `ERROR:`. ---. ## flexindex. The primary use case for this is a dataset which is `locus, allele` keyed and needs to index into a `locus` keyed or `interval<locus>` keyed dataset. Hail's normal join logic will return a key mismatch error:. ```python; import hail as hl; t = hl.utils.range_table(10); t2 = t.key_by(x=t.idx, y=t.idx); t.index(t2.key); ```; ```; Traceback (most recent call last):; File ""<ipython-input-6-3ddc90774dfe>"", line 1, in <module>; t.index(",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7178:369,test,testing,369,https://hail.is,https://github.com/hail-is/hail/pull/7178,3,"['log', 'test']","['logic', 'test', 'testing']"
Testability,"This change simplifies the logic to create the various globals when computing linear regression, cuts the size of the IR in half, and makes the code faster in the process. Benchmark times for linear_regression_rows_nd on my laptop:. Before this PR: [37.80013062, 37.84073734200001, 38.025162351999995]; After this PR: [31.85279850500001, 33.12659071399999, 31.33206254000001]. So about 15% faster, but still not fast enough. Regular linear regression is 22 seconds on my laptop.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10075:27,log,logic,27,https://hail.is,https://github.com/hail-is/hail/pull/10075,2,"['Benchmark', 'log']","['Benchmark', 'logic']"
Testability,"This changes allow `hl.init()` to run against the query service without starting JVM/Spark on the client:. ```; $ python3; Python 3.7.3 (default, Oct 7 2019, 12:56:13) ; [GCC 8.3.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import hail as hl; >>> hl.init(_backend=hl.backend.ServiceBackend()); Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.34-0ef20f14e0c1; LOGGING: writing to /home/cotton/hail/hail-20200402-0120-0.2.34-0ef20f14e0c1.log; ```. Summary of changes:; - Move initialization of Java HailContext from init to SparkBackend ctor. There is no JVM or Java HailContext when using the service backend.; - Env no longer carries the gateway. (Next: jvm); - make Java HailContext.tmpDir construction lazy. It requires a fs, but HailContext will only carry an fs for the SparkBackend. This will have to get rethought.; - Make Java ServiceBackend extend Backend.; - Construct a HailContext in the query service.; - Implement /references/get in query backend which is needed by hl.init to get the builtin reference genomes on startup.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8434:442,LOG,LOGGING,442,https://hail.is,https://github.com/hail-is/hail/pull/8434,2,"['LOG', 'log']","['LOGGING', 'log']"
Testability,"This check:; ```; if e._ast.search(lambda ast: not isinstance(ast, TopLevelReference) and not isinstance(ast, Select)): ; ```; will let a join through, since a join isn't an AST node. We should probably just make a Join AST node, and push all of the join logic into the AST",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3372:255,log,logic,255,https://hail.is,https://github.com/hail-is/hail/issues/3372,1,['log'],['logic']
Testability,This didn't fail the PR because this step does not have the test scope.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12480:60,test,test,60,https://hail.is,https://github.com/hail-is/hail/pull/12480,1,['test'],['test']
Testability,"This enables Query-on-Batch pipelines to read from requester pays buckets. @tpoterba curious for your thoughts on the flag situation. I suspect this PR will induce the Australians to start including requester pays config in their pipelines. If you describe an API you like, I can implement it for this PR. Otherwise, I think this is ready. It works, it is tested. The changes to GoogleStorageFS suck, but its due to the reality of the GCS API.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12133:356,test,tested,356,https://hail.is,https://github.com/hail-is/hail/pull/12133,1,['test'],['tested']
Testability,"This ended up being a great lesson in `asyncio`!. `kubernetes_asyncio` has a deeply hidden `asyncio.ClientSession` that doesn't get properly closed when we restart services with `SIGINT`. Turns out the `__del__` method on the `RESTClient` deep inside the library that holds this client session sets up a future with asyncio to close the session, but I suspect that this object is getting deleted _after_ the event loop closes. As a result we get a bunch of garbage in the logs that; - the event loop is already closed when something is trying to happen; - a `ClientSession.close` was never properly awaited. I initially tried to explicitly close the client session but still dealt with the problem that the `k8s_client` was trying to interact with the even loop after it closed. Explicitly deleting the `k8s_client` on cleanup and then awaiting any remaining futures (so the client session `close`) appears to fix the problem as I get no more errors on shutdown, but let me know if this isn't kosher. If this is alright I'll see this through to the rest of the services.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9944:472,log,logs,472,https://hail.is,https://github.com/hail-is/hail/pull/9944,1,['log'],['logs']
Testability,This ensures that we fail a benchmark early if we cannot copy into the output directory.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9341:28,benchmark,benchmark,28,https://hail.is,https://github.com/hail-is/hail/pull/9341,1,['benchmark'],['benchmark']
Testability,"This feature is not widely supported (only on MatrixTable & SparkBackend); and is not well-tested in CI (we only test that matrix writes run and return; the correct result with the _checkpoint_file parameter, not the performance; semantics). I've played around with this code on my laptop and the performance semantics; are what I expect. Logging messages provide some transparency too:. ```. In [2]: mt = hl.utils.range_matrix_table(100000, 10, 500). In [3]: mt.write('/tmp/mt_temp4.mt', _checkpoint_file='/tmp/mt_checkpoint'); 	2021-03-23 14:50:06 Hail: INFO: creating new checkpoint at /tmp/mt_checkpoint; 	^C---------------------------------------------------------------------------00]; 	KeyboardInterrupt Traceback (most recent call last); 	<snip>; 	KeyboardInterrupt:. In [4]: mt.write('/tmp/mt_temp4.mt', _checkpoint_file='/tmp/mt_checkpoint'); 	2021-03-23 14:50:14 Hail: INFO: resuming matrix write from /tmp/mt_checkpoint with 192/500 partitions written; 	^C---------------------------------------------------------------------------00]; 	KeyboardInterrupt Traceback (most recent call last); 	<snip>; 	KeyboardInterrupt:. In [5]: mt.write('/tmp/mt_temp4.mt', _checkpoint_file='/tmp/mt_checkpoint'); 	2021-03-23 14:50:22 Hail: INFO: resuming matrix write from /tmp/mt_checkpoint with 300/500 partitions written; 	^C---------------------------------------------------------------------------00]; 	KeyboardInterrupt Traceback (most recent call last); 	<snip>; 	KeyboardInterrupt:. In [6]: mt.write('/tmp/mt_temp4.mt', _checkpoint_file='/tmp/mt_checkpoint'); 	2021-03-23 14:50:29 Hail: INFO: resuming matrix write from /tmp/mt_checkpoint with 372/500 partitions written; 	2021-03-23 14:50:36 Hail: INFO: wrote matrix table with 100000 rows and 10 columns in 500 partitions to /tmp/mt_temp4.mt; 	 Total size: 391.55 KiB; 	 * Rows/entries: 391.51 KiB; 	 * Columns: 31.00 B; 	 * Globals: 11.00 B; 	 * Smallest partition: 200 rows (505.00 B); 	 * Largest partition: 200 rows (835.00 B). In [7]: mt_r",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10215:91,test,tested,91,https://hail.is,https://github.com/hail-is/hail/pull/10215,3,"['Log', 'test']","['Logging', 'test', 'tested']"
Testability,"This file is a distraction. We should always use the pylintrc in the root of the repo. All; our Makefiles and tests use that. cc: @tpoterba AFAIK, this file is unused.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9808:110,test,tests,110,https://hail.is,https://github.com/hail-is/hail/pull/9808,1,['test'],['tests']
Testability,This fixes `balding_nichols_model` in the service. I also fixed warn => warning. Warn is deprecated in Python's logging library.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8796:112,log,logging,112,https://hail.is,https://github.com/hail-is/hail/pull/8796,1,['log'],['logging']
Testability,"This fixes a bug in joins where:; * The join key is a prefix of the left key; * Values of the join key in the left table span multiple partitions. For example, say the left table is `{[(0, 0), (0, 1)], [(0, 2), (1, 0)]}`, where the two lists of tuples are the two partitions, and the key is the entire tuple, and the join key is just the first field. Then in the old code; ```; val loweredLeft = lower(left).strictify(); val leftKeyToRightKeyMap = left.typ.keyType.fieldNames.zip(right.typ.keyType.fieldNames).toMap; val newRightPartitioner = loweredLeft.partitioner.coarsen(commonKeyLength); .rename(leftKeyToRightKeyMap); val loweredRight = lower(right).repartitionNoShuffle(newRightPartitioner); ```; the left partitioner is coarsened to `[(0), (0)], [(0), (1)]` in the third line, and the `repartitionNoShuffle` in the fourth line fails because rows with key `(0)` are split across both partitions. One possible fix would be to strictify the coarsened partitioner, which in this case would force the left table to one partition. But this seems dangerous performance-wise. Instead, this PR makes the lowered behavior match the old behavior, which is to ""repartition"" the right to the invalid partitioner `[(0), (0)], [(0), (1)]`, meaning rows with key `(0)` get duplicated into both partitions. This is exactly the intended semantics of `alignAndZipPartitions` as described in the code:; > The partitioner of the result will be the left partitioner. Each partition will be computed by 'joiner', with corresponding partition of 'this' as first iterator, and with all rows of 'that' whose 'joinKey' might match something in partition as the second iterator. This behavior is implemented with a flag `allowDuplication` on `repartitionNoShuffle`. This simply omits the assertion on the new partitioner that guarantees each incoming row ends up in at most one result partition.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11556:1768,assert,assertion,1768,https://hail.is,https://github.com/hail-is/hail/pull/11556,1,['assert'],['assertion']
Testability,"This fixes a few of problems:; - Batch.jobs() was discarding the job json objects and returning an Job objects. This is not OK because we need the metadata from the json objects for efficiency (e.g. in CI PR/batch pages).; - We confused Job.status(), which is the job json object, with the status field of that object. In particular, we got that wrong in BatchFormatVersion.get_status_exit_code_duration in the call to Job.{exit_code, total_duration_msecs}. Add a test to check we got this right.; - Return the duration in msecs, not a string, because as an API, the string is useless. humanize it before sending it to the API. I think the batch client is (1) has a lot of legacy baggage that can be cleaned up, and (2) is massive overkill and can probably be cleaned up. It should probably have no objects, pass around job_id ints or (batch_id, job_id) tuples, and be a thin wrapper around request calls. Pipeline should be the high level API. Finally, I think we need a little document (just a comment) about the format of GET /batches/batch_id and GET /jobs/job_id. It's changed enough that it is getting a little hard to follow. I'm going to dev deploy to test the UI. Don't approve until it checks out, please. FYI @jigold",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7996:464,test,test,464,https://hail.is,https://github.com/hail-is/hail/pull/7996,2,['test'],['test']
Testability,"This fixes an issue where we cannot retrieve old batches for a PR. Addresses this error:; ```; {""levelname"": ""ERROR"", ""asctime"": ""2019-08-01 15:59:17,119"", ""filename"": ""web_protocol.py"", ""funcNameAndLine"": ""log_exception:355"", ""message"": ""Error handling request"", ""exc_info"": ""Traceback (most recent call last):\n File \""/usr/local/lib/python3.6/dist-packages/aiohttp/web_protocol.py\"", line 418, in start\n resp = await task\n File \""/usr/local/lib/python3.6/dist-packages/aiohttp/web_app.py\"", line 458, in _handle\n resp = await handler(request)\n File \""/usr/local/lib/python3.6/dist-packages/aiohttp/web_urldispatcher.py\"", line 157, in handler_wrapper\n result = await result\n File \""/usr/local/lib/python3.6/dist-packages/aiohttp_jinja2/__init__.py\"", line 91, in wrapped\n context = await coro(*args)\n File \""/ci/ci.py\"", line 170, in get_batch\n j['duration'] = humanize.naturaldelta(datetime.timedelta(seconds=sum(j['duration'])))\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'""}; {""levelname"": ""INFO"", ""asctime"": ""2019-08-01 15:59:17,119"", ""filename"": ""web_log.py"", ""funcNameAndLine"": ""log:233"", ""message"": ""10.32.0.177 [01/Aug/2019:15:59:17 +0000] \""GET /batches/584 HTTP/1.0\"" 500 315 \""-\"" \""Mozilla/5.0 (Macintosh;; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6783:1120,log,log,1120,https://hail.is,https://github.com/hail-is/hail/pull/6783,1,['log'],['log']
Testability,This fixes an issue which caused tests run through IntelliJ to fail due to version conflicts between dependencies.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14298:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/14298,1,['test'],['tests']
Testability,"This fixes site to work inside PRs and dev namespaces. The main fix is to teach; site that, when the namespace is not default, all its resources are located at; `/$NAMESPACE/site`. I also use `subs_filter` to rewrite images, anchors, and; stylesheets that have absolute links (this can be `<a href=""/""` or `<a; href=""/foo/bar/baz.html""`) to include the namespace prefix. I also added a test that the website is up and returning 200 with our infrastructure. I also added `updated_host` which uses the X-Fowarded-For host if it exists (i.e. in a namespace).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8763:386,test,test,386,https://hail.is,https://github.com/hail-is/hail/pull/8763,1,['test'],['test']
Testability,"This fixes the notebook2 deployment permission issue that was resulting in CrashLoopBackoff (no permissions for the Table class to `read_namespaced_secret('get-users', 'default')`). Already tested, works (notebook2 back up). It also fixes an apparent error in the master branch RoleBinding. This diff looks slightly weird. I fixed the existing notebook Roles/RoleBindings by deleting the `create-services` `Role` and `notebook-create-services` `RoleBinding`, and then fixing the broken `notebook-create-servivces-and-pods` `RoleBiding`, by correctly updating the `roleRef` to read `create-services-and-pods`. When notebook1 totally goes away, we can probably remove the ""services"" permission. Before:; ```yaml; ---; kind: Role; apiVersion: rbac.authorization.k8s.io/v1; metadata:; namespace: default; name: create-services; rules:; - apiGroups: [""""]; resources: [""services""]; verbs: [""*""]; ---; kind: RoleBinding; apiVersion: rbac.authorization.k8s.io/v1; metadata:; namespace: default; name: notebook-create-services; subjects:; - kind: ServiceAccount; name: notebook; namespace: default; roleRef:; kind: Role; name: create-services; apiGroup: """"; ---; kind: Role; apiVersion: rbac.authorization.k8s.io/v1; metadata:; namespace: default; name: create-services-and-pods; rules:; - apiGroups: [""""]; resources: [""services""]; verbs: [""*""]; - apiGroups: [""""]; resources: [""pods""]; verbs: [""*""]; ---; kind: RoleBinding; apiVersion: rbac.authorization.k8s.io/v1; metadata:; namespace: default; name: notebook-create-services-and-pods; subjects:; - kind: ServiceAccount; name: notebook; namespace: default; roleRef:; kind: Role; name: create-services #this was causing the error, and of course the create-services role is superseded by the the create-services-and-pods role; apiGroup: """"; ---; ```. After:; ```yaml; kind: Role; apiVersion: rbac.authorization.k8s.io/v1; metadata:; namespace: default; name: create-services-and-pods; rules:; - apiGroups: [""""]; resources: [""services""]; verbs: [""*""]; - apiGrou",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5746:190,test,tested,190,https://hail.is,https://github.com/hail-is/hail/pull/5746,1,['test'],['tested']
Testability,"This fixes two bugs:; 1. The container logs weren't being cached. This made the logs ""disappear"" for previous tasks while the job was still running. FYI @konradjk . 2. My job got stuck in ""running"" even though the job was deleted from the worker because writing the status to GCS timed out and we didn't actually mark the job complete. I'm not sure if we should always try to retry writing the status rather than failing on non-transient errors. ```; Traceback (most recent call last):; File ""/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 384, in _make_request; six.raise_from(e, None); File ""<string>"", line 2, in raise_from; File ""/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 380, in _make_request; httplib_response = conn.getresponse(); File ""/usr/local/lib/python3.6/http/client.py"", line 1354, in getresponse; response.begin(); File ""/usr/local/lib/python3.6/http/client.py"", line 307, in begin; version, status, reason = self._read_status(); File ""/usr/local/lib/python3.6/http/client.py"", line 268, in _read_status; line = str(self.fp.readline(_MAXLINE + 1), ""iso-8859-1""); File ""/usr/local/lib/python3.6/socket.py"", line 586, in readinto; return self._sock.recv_into(b); File ""/usr/local/lib/python3.6/ssl.py"", line 1012, in recv_into; return self.read(nbytes, buffer); File ""/usr/local/lib/python3.6/ssl.py"", line 874, in read; return self._sslobj.read(len, buffer); File ""/usr/local/lib/python3.6/ssl.py"", line 631, in read; v = self._sslobj.read(len, buffer); socket.timeout: The read operation timed out. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/usr/local/lib/python3.6/site-packages/requests/adapters.py"", line 449, in send; timeout=timeout; File ""/usr/local/lib/python3.6/site-packages/urllib3/connectionpool.py"", line 638, in urlopen; _stacktrace=sys.exc_info()[2]); File ""/usr/local/lib/python3.6/site-packages/urllib3/util/retry.py"", line 368, in increment; ra",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8054:39,log,logs,39,https://hail.is,https://github.com/hail-is/hail/pull/8054,2,['log'],['logs']
Testability,This frequently fails and triggers an error log.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12472:44,log,log,44,https://hail.is,https://github.com/hail-is/hail/pull/12472,1,['log'],['log']
Testability,"This gets ld_prune on the `get_1kg` data down to around 37s. That's still ~1000 times slower than plink.; ```; mt = hl.read_matrix_table('repartitioned.mt'); pruned_tbl = hl.ld_prune(mt.GT, r2 = 0.2, bp_window_size = 1000000, memory_per_core = 1000); pruned_tbl.write(""pruned_tbl.ht"", overwrite=True); ```. Performance Wins:; - local ld prune returns an unkeyed, unsorted dataset, and `ld_prune` collects the relatively small number of variants locally instead of trying to do table joins (I'm doing the broadcast join optimization manually); - avoid `key_by` (and thus sort) of output of MIS, again we do a broadcast join; - two unnecessary writes removed (at the cost of no debugging output); - `maximal_independent_set` no longer keys by, thus avoiding a sort. Minor Changes:. - I don't set env vars anymore, so I need an easy way to pip install hail, so I added a gradle task for that and an associated file that does almost the same thing as deploy.sh. you should complain and make me consolidate these two files. ---; ## Big Data Test. I'm running a test on profile225 right now. ---. resolves #4506",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5078:1036,Test,Test,1036,https://hail.is,https://github.com/hail-is/hail/pull/5078,2,"['Test', 'test']","['Test', 'test']"
Testability,"This gets us back to the ~65s total time referenced in [here](https://github.com/hail-is/hail/pull/1254#issuecomment-274951875), but [ultimately not achieved](https://github.com/hail-is/hail/pull/1254#issuecomment-284071915) by the final PR. In that time, `master`'s speed on that benchmark decreased ~10s. This PR + [the compiler PR](https://github.com/hail-is/hail/pull/1254) yield about a total 30% reduction in time on that benchmark.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1473:281,benchmark,benchmark,281,https://hail.is,https://github.com/hail-is/hail/pull/1473,2,['benchmark'],['benchmark']
Testability,"This implements my proposal to simplify aggregators here: http://dev.hail.is/t/proposal-for-aggregators/93/3. Builds on: https://github.com/hail-is/hail/pull/3552. I still need to finish converting some tests from ExtractAggregatorSuite (they are currently commented out). Old-style aggregators (filter, map, flatMap) are expanded at toIR conversion time to ApplyAggOp and SeqOp. ApplyAggOp returns the result of the aggregation. ApplyAggOp's first argument, which must be of type TVoid, is the expression to run for each element being aggregated over. SeqOp merges a computed value into the RegionValueAggregator. I added a AggSignature that holds the AggOp, type being aggregated over and the RegionValueAggregator constructor argument types. This is stored by the ApplyAggOp and the SeqOp. @tpoterba I believe TAggregable is no longer used in the IR code and can go away when the AST gets ripped out. @danking I added some IR testing logic to TestUtils. Namely, `eval` evaluates an IR with environments, args and/or aggregations with a single call (and verifies that the interpret with and without optimization and compiler all agree). There are also functions for asserting the result of aggregations, for example:. ```; val aggSig = AggSignature(Sum(), TFloat64(), FastSeq()); assertEvalsTo(ApplyAggOp(; SeqOp(ApplyBinaryPrimOp(Multiply(), Ref(""a"", TFloat64()), Ref(""b"", TFloat64())), I32(0), aggSig),; FastSeq(), aggSig),; (FastIndexedSeq(Row(1.0, 10.0), Row(10.0, 10.0), Row(null, 10.0)), TStruct(""a"" -> TFloat64(), ""b"" -> TFloat64())),; 110.0); ```. The line:. > (FastIndexedSeq(Row(1.0, 10.0), ...), TStruct(""a"" -> TFloat64(), ""b"" -> TFloat64())),. is the IndexedSeq of values to aggregate over, along with their signature. The struct type is used to build the scope in which aggregators are evaluated. (A little noisy because of the aggregator syntax. It's noisier than I'd like it to be.). This nicely paves the way for aggregators with multi-argument seqOps (like takeBy) that were previou",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3570:203,test,tests,203,https://hail.is,https://github.com/hail-is/hail/pull/3570,4,"['Test', 'log', 'test']","['TestUtils', 'logic', 'testing', 'tests']"
Testability,"This implements the Shuffler IR, which has become these four nodes:; - ShuffleWith: owns the shuffle, passes the shuffle id to children as a binding.; - ShuffleWrite: writes a stream into the shuffler.; - ShufflePartitionBounds: gets the boundaries of approximately balanced partitions.; - ShuffleRead: reads a stream from the shuffler. It adds `TShuffle` which represents a shuffle and contains all the EType, PType, and Type information necessary to implement all nodes (thanks @catoverdrive !). `TShuffle` is realized at runtime by a `PCanonicalShuffle(true)`, which is a straight copy of `PCanonicalBinary`. Unfortunately, it appears not possible to have two distinct virtual types whose run-time realization is the same physical type. `testShuffleIR` is most of the work towards a lowering of TableKeyBy/TableSortBy, I believe. Next Up:; - Actually implement ""successful partition ids,"" which is ignored by the IR. The server doesn't even have functionality for this right now. Note there are FIXME comments about this in this PR. I will remove them in the next PR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8726:741,test,testShuffleIR,741,https://hail.is,https://github.com/hail-is/hail/pull/8726,1,['test'],['testShuffleIR']
Testability,This improves a benchmark variant of a pipeline of @konradjk with six aggregators by 24% (140.6s => 106.8s) on a shard of gnomAD. The improvement will be larger with more aggregators. This change compiles the seqOp for all aggregators together into a single function and eliminates a loop over aggregators where the aggregations are invoked (e.g. MatrixMapRows). I added a SeqOp node that represents the call of a seqOp on a single region value aggregator. This replaces ApplyAggOp when extracting aggregators. I added a Begin node which just sequences collection of void-typed IRs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3420:16,benchmark,benchmark,16,https://hail.is,https://github.com/hail-is/hail/pull/3420,1,['benchmark'],['benchmark']
Testability,"This installs our fully-pinned requirements deep in the docker image and then installs the hail wheel without dependencies on top. This will be a lot more consistent (and docker cache friendly) than the current approach, which will install all dependencies with the wheel and possibly upgrade some of them. Also did the same to the hail-pip-installed images used for testing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12433:367,test,testing,367,https://hail.is,https://github.com/hail-is/hail/pull/12433,1,['test'],['testing']
Testability,"This is a bad change to a worse problem. The right solution is to redesign the IR; so that implicit init eval scopes don't exist -- but the right solution is hard to justify; going off to do right now. This change patches the Extract.scala lowering logic to track the variables bound inside a; lowered IR and find the highest node that provides all necessary free variables. This change; still makes assumptions about the structure of the IR -- namely, it is still invalid to write; an IR like:. ```; MakeTuple; Let; initBinding1; <something>; ApplyAggOp with ref to initBinding1; Let; initBinding2; <something2>; ApplyAggOp with ref to initbinding2; ```. However, this fix resolves the case where init args reference a high single binding chain, as; in the test added.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12092:249,log,logic,249,https://hail.is,https://github.com/hail-is/hail/pull/12092,2,"['log', 'test']","['logic', 'test']"
Testability,"This is a bit of a mess so feel free to ask that I break it down or explain more in depth. In short, this:. - adds terraform for forgotten bits and pieces necessary for running PR tests like test buckets and the necessary permissions on those resources; - Adds a couple of flags that allow a CI `WatchedBranch` to be considered mergeable or not. This shouldn't change anything in default CI, but it allows you to specify that a secondary CI should run PRs, post statuses, and deploy new commits, but never actually commit anything to GitHub. Similarly there's a flag for turning off zulip notifications, but annoyingly the zulip config is still a required secret. I plan to make that nicer in the future.; - Fixes a lot of previously-unreached syntax errors in the batch tests. Following PRs will have relatively less functionality but probably a fair bit of cleanup and reorganization, e.g. getting rid of config.mk and generating it from terraform output, making scripts of the bootstrapping process etc.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10866:180,test,tests,180,https://hail.is,https://github.com/hail-is/hail/pull/10866,3,['test'],"['test', 'tests']"
Testability,"This is a multi-stage overhaul of our Kubernetes load balancers / service discovery. This involves moving off of NGINX onto Envoy, but more importantly involves better control of what namespaces and services are active in our cluster at a given point in time. TL;DR Switching from NGINX to Envoy with CI acting as the ""control plane"" for our internal networking allows us to more easily dynamically configure our Kubernetes networking and achieve proper connection pooling/load-balancing over TLS, which translates to less resource consumption and lower request latencies. ## Motivation; This is primarily a performance-motivated change, and one largely based on our (ab)use of NGINX in order to work with our dynamically-generated Kubernetes test namespaces. Currently, we configure NGINX by creating server blocks that dynamically resolve and dispatch requests based on matching regular expressions on the host and path headers. This is in large part due that at gateway deploy time we do not statically know all of the namespaces and namespace-service combinations that will exist in the cluster in the future. This is true for `default`, but not test namespaces, and NGINX will refuse to start with statically-configured clusters that it cannot reach. Making the server blocks make the routing decisions dynamically circumvents this limitation. However, this prevents usage of NGINX [upstream](http://nginx.org/en/docs/http/ngx_http_upstream_module.html) blocks that provide connection pooling, at least in the community edition, and as a result the gateways will create and terminate a TCP connection per http request. This likely causes minor delays on the front-end through gateway, but this hampers performance greatly in job scheduling. The batch driver is forced to establish a new TCP connection and do an SSL handshake with the internal-gateway multiple times per job, which is expensive and slow. We currently have to dedicate a 2-core NGINX sidecar for the batch-driver just to terminate",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12095:743,test,test,743,https://hail.is,https://github.com/hail-is/hail/pull/12095,1,['test'],['test']
Testability,"This is a name to IP address and port service. GKE exposes pod IPs onto our VDC; network. As such, regular Google Cloud VMs can access pods by IP. GKE cannot; expose our services as IPs on our VDC because the way services load balance; traffic is more complex than DNS can handle. We acknowledge and accept the; limitations of client-side load balancing. In particular, if there are not many; clients and clients re-use address-port-pairs traffic will likely be; unbalanced. This is not a problem for the planned Shuffle service because the; clients are intended to be numerous (consider all the workers in a Query or; Batch pipeline). The big change is that deploy config now has an `addresses` function which will; return a list of address-port pairs. Deploy config also now has `address` which; randomly chooses one of the address-port pairs. I have included a simple test. Please review both code and overall design, considering how it fits in the wider system.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9129:871,test,test,871,https://hail.is,https://github.com/hail-is/hail/pull/9129,1,['test'],['test']
Testability,"This is a newer version of #9598. We decided to give users min(5Gi/core, 5 Gi) in `/` with mounting external storage at `/io` if they need more storage. All storage requests can be 0, 0 < storage < 10 will be rounded up to 10 Gi, or 10+Gi rounded up to the nearest integer. I added a loop to remove orphaned disks in gce.py. I changed how the resources appear in the spec. Now there's `req_cpu`, `req_storage`, `req_memory` which stores what the user specified. Then we also have `cores_mcpu`, `memory_bytes`, and `storage_gib` which are the actual resources allocated. I think this will be simpler and more understandable. Resources are computed in the front end now and the worker just uses the values from the front end (no more doing conversions on both the worker and front end). I kept backwards compatibility on the worker for now which can get deleted once there are no more jobs with batch format version < 6. I bumped the instance version to 16 so we know which workers have the new storage functionality. . I tested this by submitting 4 jobs on my 1 core test instance with 150Gi requests. I then looked at the worker logs to make sure the disks were created correctly and the value of the semaphore was correct. I also tested 0 Gi and 5 Gi by hand to make sure the resource fulfilled was 0Gi and 10Gi respectively. Lastly, I checked the billing to make sure we charged for the fraction of the SSD used as well as the cost of adding an extra persistent SSD for that job. I also looked at the disks in the GCE console to make sure they wear torn down correctly. Although there isn't a migration, we should make sure there are no non-ci jobs running so that we don't over allocate the storage available. Also, once this is merged, we should send an email to all users to let them know the cores must be a power of 2 now and about the storage now being mounted at '/io`. I put the WIP tag on so I can do this when I'm ready to.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10090:1020,test,tested,1020,https://hail.is,https://github.com/hail-is/hail/pull/10090,4,"['log', 'test']","['logs', 'test', 'tested']"
Testability,"This is a performance improvement (and also returns explosion after the right number of iterations which is more logical). It is only necessary to check the first element because I'm confident NaN appears nowhere or everywhere in deltaB (and certainly if it appears somewhere in one iteration, it spreads to everywhere in the next).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5050:113,log,logical,113,https://hail.is,https://github.com/hail-is/hail/pull/5050,1,['log'],['logical']
Testability,This is a placeholder PR so I don't forget about this bug. I still need to devise a test case that triggers it. I saw it happen on the Broad on-prem cluster.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1986:84,test,test,84,https://hail.is,https://github.com/hail-is/hail/pull/1986,1,['test'],['test']
Testability,"This is a pod running in default that mounts deploy-config and database-server-config. `mysql` will connect to the database as root. Useful for troubleshooting. I often have it running, but figure it should be official. Doesn't run in test since it doesn't have a database-server-config.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7819:235,test,test,235,https://hail.is,https://github.com/hail-is/hail/pull/7819,1,['test'],['test']
Testability,"This is a pretty simple change, though the diff is a little bizarre. I don't want running a ukbb server to be a requirement of running a hail instance. Since the ukbb app is a special case in the way we deploy apps in k8s, we would render the gateway configuration server blocks with the logic:. - For each service, if it's not ukbb, render it the usual way; - Render the ukbb block. This is a very simple change to instead make the logic. - For each service, if it's ukbb render it the ukbb way, else render it the usual way. Together with the separation of the ukbb terraform into its own module in #10842, it should be easier to deploy hail without the ukbb app and simplify the bootstrap process. This is currently running in hail-vdc.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10845:288,log,logic,288,https://hail.is,https://github.com/hail-is/hail/pull/10845,2,['log'],['logic']
Testability,"This is a simplified implementation of `Process.communicate`. We feed lines into the log one-by-one; until we reach the end of both stdout and stderr. When both stdout and stderr have been closed by; the child process, we wait for the process to exit. At any point in time, the most recent log is; available to us.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10259:85,log,log,85,https://hail.is,https://github.com/hail-is/hail/pull/10259,2,['log'],['log']
Testability,This is a temporary workaround to enable easy local testing to continue,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5999:52,test,testing,52,https://hail.is,https://github.com/hail-is/hail/pull/5999,1,['test'],['testing']
Testability,"This is an attempt to modularize / refactor our terraform code regarding google service accounts and kubernetes secrets. This doesn't add any new functionality. Currently, our use of terraform is one flat file `main.tf` where we declare every `resource` in GCP that should exist. Examples of such resources are `google_service_account`, `google_service_account_key` and `kubernetes_secret`. For each of the accounts we create for various services, we end up creating these three resources (and sometimes IAM roles) in the same way. To abstract this, we can create a custom `module`, which is just a collection of resources, a set of inputs called `variables`, and a set of outputs. A module can then be ""instantiated"" using a `module` block in `main.tf`, providing it the source path of the module and values for its declared variables. Tested by hand in my own GCP project.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10785:837,Test,Tested,837,https://hail.is,https://github.com/hail-is/hail/pull/10785,1,['Test'],['Tested']
Testability,"This is basically #6534 except with some bugfixes. Stacked on #6535. I opened a new PR because I created this branch to do some benchmarking against @chrisvittal's combiner pipeline; running `summarize` on the mt he provided (which I believe is chr22 and 10 samples wide) yields about the same runtime as the unstaged version, currently---about 30 seconds on my laptop to read/summarize/write. @patrick-schultz @tpoterba @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6580:128,benchmark,benchmarking,128,https://hail.is,https://github.com/hail-is/hail/pull/6580,1,['benchmark'],['benchmarking']
Testability,"This is currently an IR that does nothing except take an IR of a container type and changes the wrapper type to TStream. In this PR, I've defined it in the usual (Scala) IR framework and in Emit (currently equivalent to ToArray, but that will change in the c++ emitter as the stream infrastructure goes in). It's otherwise not used yet (and will essentially continue to be a no-op in the JVM emitter), so I haven't written tests other than the parser test. I intend to use this mostly to enforce non-instantiation of arrays in the c++ emitter, so that we don't inadvertently try to create e.g. an array of all the rows in a partition.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5637:423,test,tests,423,https://hail.is,https://github.com/hail-is/hail/pull/5637,2,['test'],"['test', 'tests']"
Testability,This is for @catoverdrive and I to be able to manipulate billing projects and their limits in tests. But we don't want to litter the default namespace with a bunch of bogus projects. We also need to reset the accrued costs to 0 in order for the billing limit tests to work. @danking -- FYI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9581:94,test,tests,94,https://hail.is,https://github.com/hail-is/hail/pull/9581,2,['test'],['tests']
Testability,This is for testing purposes only.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6205:12,test,testing,12,https://hail.is,https://github.com/hail-is/hail/pull/6205,1,['test'],['testing']
Testability,"This is for the batch callback test, so I can make test_batch a direct pod.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7723:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/7723,1,['test'],['test']
Testability,"This is half code cleanup and half guardrail. The key assertion here is: if the request authenticates using a cookie and is attempting a state-changing HTTP method, it should pass a CSRF check. I tested this with the following:; 1. dev deployed and loaded the billing projects page; 2. Deleted the hidden csrf input from one of the forms; 3. Submitted the form; 4. Got a 401",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13604:54,assert,assertion,54,https://hail.is,https://github.com/hail-is/hail/pull/13604,2,"['assert', 'test']","['assertion', 'tested']"
Testability,"This is in implementation of `linear_regression_rows` that does not rely on any `MatrixToTableApply` nodes. Once `TableKeyBy` is lowered, this should be executable on the service. There are lingering issues:. 1. `TableGroupWithinPartitions` is likely not the right abstraction. It forgets about keying, which forces me to rekey and scan the table even though it's already in order. 2. I don't support chained linear regression (the situation where `y` is a list of lists of phenotypes). I just throw an error there for now. . 3. It's not as fast as the current `linear_regression_rows` (addressing problem 1 should help with this). 4. I don't yet support the `pass_through` field. I want to PR this now because I would like to get the benchmark in so I can continue to measure how this performs in comparison to the current version of `linear_regression_rows`. The tests of this method also serve as useful integration tests for lots of NDArray functionality. Additionally, it'll make it easier to make a smaller PR in the future that adds the new `TableIR` that will hopefully be more suitable than `TableGroupWithinPartitions`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8757:735,benchmark,benchmark,735,https://hail.is,https://github.com/hail-is/hail/pull/8757,3,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,This is intended to prevent the script from being terminated while it cleans up (c.f. people who spam ctrl-c to kill a local test). `set` is not the word for setting a `trap` though. Long standing bug 🤷‍♀️ .,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5802:125,test,test,125,https://hail.is,https://github.com/hail-is/hail/pull/5802,1,['test'],['test']
Testability,"This is needed to properly implement copy/rename when you don't know if the source is a file or directory. We now only stat dest if treat_dest_as == INFER_DEST. Suppose we do `cp src dest`. There are three cases:. - Treat dest as a directory, and copy `src` to `dest/src`; - Treat dest like the target, and copy `src` to `dest` (whether src is a file or directory).; - Infer the type of dest and act accordingly. If `dest` is a directory, we're in the first case. If dest doesn't exist, or is a file, we're in the second case. I added two tests cases: test_copy_rename_dir_dest_is_target and test_overwrite_rename_dir, which test copying a directory with DEST_IS_TARGET (when the dest exists or not). I already had tests for when we were copying a file. I regenerated the copy test specs because of renames and some minor changes to error checking behavior. I spot checked the differences, and they don't seem worse (e.g. `cp file destfile/` now generates an error instead of ignoring the trailing slash.)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10127:539,test,tests,539,https://hail.is,https://github.com/hail-is/hail/pull/10127,4,['test'],"['test', 'tests']"
Testability,"This is not a real error. It is not the fault of batch that the other; end of the connection did not respond. If batch is having general; network connectivity issues, I would expect to see many other; error log statements.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11383:207,log,log,207,https://hail.is,https://github.com/hail-is/hail/pull/11383,1,['log'],['log']
Testability,"This is not this interface's final form, but it is an important; transitionary step in moving the entire code generation codebase away; from Code[T]. The CodeOrdering interface now (as before) has 12 methods, but before; the function signatures looked like:. def compare(lhs: (Code[Boolean], Code[T]), rhs: (Code[Boolean], Code[T])) -> Code[Int]. They now look like:. def compare(cb: EmitCodeBuilder, lhs: EmitCode, rhs: EmitCode) -> Code[Int]. There have been a lot of miscellaneous changes needed to get this to; work. There's some stuff that needs to be cleaned up, notably in Emit,; it's not always the case that the type of the IR/Aggregator is the same; as the type of the EmitCode that emit produces. I've tried to add; assertions where possible, but if there is an error, then a rather; cryptic 'Cannot pop value off of empty stack' exception is thrown,; generally indicating that an ordering expected an optional value, but; a required emitcode was provided.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9825:727,assert,assertions,727,https://hail.is,https://github.com/hail-is/hail/pull/9825,1,['assert'],['assertions']
Testability,This is one piece of a multi-part saga to use tls for any and all communication between pods. This basically just required adding the `create_certs` step to the ci test `build.yaml` so we can create a ssl config for `hello`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10192:164,test,test,164,https://hail.is,https://github.com/hail-is/hail/pull/10192,1,['test'],['test']
Testability,"This is only relevant to the local testing case. `pylint` is really slow (even if you run it on one file, which was my first attempt to mitigate slowness).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5237:35,test,testing,35,https://hail.is,https://github.com/hail-is/hail/pull/5237,1,['test'],['testing']
Testability,This is pretty bare bones but I thought this might help a lot with the testing of all your upcoming `hailctl config` changes rather than having to manually test various possible combinations. Run by just invoking pytest: `pytest hail/python/test/hailtop/hailctl/config`,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13389:71,test,testing,71,https://hail.is,https://github.com/hail-is/hail/pull/13389,3,['test'],"['test', 'testing']"
Testability,"This is pretty rough, but it sketches out a structure and has a test.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4593:64,test,test,64,https://hail.is,https://github.com/hail-is/hail/pull/4593,1,['test'],['test']
Testability,"This is preventing the website from updating, AFAICT. [job-40-62pkp.log](https://github.com/hail-is/hail/files/2498305/job-40-62pkp.log)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4592:68,log,log,68,https://hail.is,https://github.com/hail-is/hail/issues/4592,2,['log'],['log']
Testability,"This is small addition on top of #2665, only review last commit if that has yet to go in. Here's the logic/plan: rows refers to actual rows as in RowMatrix or MatrixTable. nRows refers to the number of rows, as already used in GridPartitioner, RowMatrix, etc. Breeze uses mat.rows for nRows, but we'll still use nRows as variable name of number of rows in Hail's linear algebra. In Python, we'll use num_rows and num_cols.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2698:101,log,logic,101,https://hail.is,https://github.com/hail-is/hail/pull/2698,1,['log'],['logic']
Testability,This is sufficiently large to permit the transmission of the Hail JAR; which is about 38 MB. I will use this to test and eventually normally; use the Gradle build cache server.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7801:112,test,test,112,https://hail.is,https://github.com/hail-is/hail/pull/7801,1,['test'],['test']
Testability,This is the cause of master test failures. More detail to follow.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6086:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/issues/6086,1,['test'],['test']
Testability,"This is the common use case for collapsed burden testing, and will eventually be the input to linreg_burden and logreg_burden. The resulting table can by pushed to Python or PySpark for flexible analysis. Unlike in the burden regression methods, this table need not have numeric values, and it doesn't filter out samples with missing phenotype or covariates (since there are none to speak of here).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1765:49,test,testing,49,https://hail.is,https://github.com/hail-is/hail/pull/1765,1,['test'],['testing']
Testability,"This is the compiled BGEN decoder. there's a fix to the partitioning logic as well. If there's no partitions, it previously errored. I added a `math.max` in case the maxRecordPerPartition is huge and the records is small and their floating point ratio ends up as zero. You can more easily see these changes when ignoring whitespace: https://github.com/hail-is/hail/pull/3916/files?w=1. ---. I reverted back to the `Iterator[Option[RegionValue]]` because per-row allocation isn't that bad and it just seems kind of hard an unnecessary 🤷‍♀️ . cc: @patrick-schultz",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3916:69,log,logic,69,https://hail.is,https://github.com/hail-is/hail/pull/3916,1,['log'],['logic']
Testability,"This is the current state of the C++ support. If you look at the tests in src/test/is/hail/nativecode/NativeCodeSuite.scala that should give a; quick overview of how it works, viz. 1. Generate C++ source code as a Scala String, then create a NativeModule which handles; the grunt work of getting it compiled, linked, and loaded, and allows you to look up functions; by name, and get a callable Scala object corresponding to the C++ function. 2. The NativeModule also allows the binary of the DLL to be passed around and instantiated; on other cluster nodes (but note that those nodes will need to have the correct versions of; the C++ runtime shared libraries in the right directories to allow symbols in the DLL to be; correctly resolved). This is not tested yet. 3. I have been using llvm-6.0.0 on Mac, and llvm-5.0 on linux. It makes a half-hearted attempt; to use whatever other compiler you have, but that may not work. We probably need to figure; out a standardized and automated way to get the right tools installed in the right place (and; get the right shared libraries on worker nodes). 4. Data which needs to be accessible to both Scala and C++ is held in C++ objects inheriting; from NativeObj, with lifetimes managed by std::shared_ptr, i.e. reference-counted. There's; some dirty under-the-hood plumbing to allow a shared_ptr to be smuggled into a Scala; object derived from NativeBase. These Scala-side object references must be managed; carefully using copyAssign/moveAssign/close in order to maintain the off-heap ref-counts. 5. There are some gnarly differences between Linux and MacOSX in the linker and dynamic; loading. I think I'm converging on the right compile/link options for each, but in getting; Linux to work it's possible that Mac is temporarily broken ... Not really expecting that we'll merge this right away, but I wanted to put it out there to get the; review process started before it grows any bigger.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3461:65,test,tests,65,https://hail.is,https://github.com/hail-is/hail/pull/3461,3,['test'],"['test', 'tested', 'tests']"
Testability,"This is the first step in lowering the importers. GenericTableValue is a table value that can either be converted to a normal TableValue, or can be lowered to a TableStage. MatrixPlinkReader now generates a GenericTableValue, but haven't wired it up to the TableIR lowering logic yet (next PR). This includes two interface changes: import_plink now takes n_partitions and block_size, like import_bgen. It still takes min_partitions, which is actual min_partitions. When all is said and done, this interface should be consistent across the importers. Second, the Plink reader now splits along variants instead of bytes.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8624:274,log,logic,274,https://hail.is,https://github.com/hail-is/hail/pull/8624,1,['log'],['logic']
Testability,"This is the initial version of the ATGU intranet service. Currently, it has a curated list of resources which can be created, viewed, edited and deleted. Resources can have attachments, which I store on Google storage. I used the async Google Storage client and it worked very nicely with aiohttp. Right now this developers only. I may give access to the admins to start curating resources. I'll follow up with roles and add roles for atgu-viewer and atgu-editor that I'll use in the service. I think the code is mostly straightforward, but a few remarks:. This is built on Bootstrap. It doesn't share the the styling with web common (which I probably want to convert). On the resources page, for client side search I use fuse.js: https://fusejs.io/ (so fast). For a rich text box (the resource content), I use quill.js: https://quilljs.com/. Quill doesn't allow you to post its contents in a form, so I use a JS event handler to populate a hidden input with the contents on submission. I tested it with dev deploy. I suggest you do the same before reviewing to get a sense of what's here. Feedback on the UI welcome.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9684:989,test,tested,989,https://hail.is,https://github.com/hail-is/hail/pull/9684,1,['test'],['tested']
Testability,"This is the most recently deployed version of monitoring.yaml. I'm not sure the best way to test it solves the problem that deployments faced. One thing to note is that StatefulSets don't guarantee that all of their constituent pods get deleted when the StatefulSet is deleted. To be sure the pods all get deleted, we'd have to either manually delete them or scale the StatefulSet size down to 0 before deleting it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6343:92,test,test,92,https://hail.is,https://github.com/hail-is/hail/pull/6343,1,['test'],['test']
Testability,"This is the plan for the new Hail CI (tentatively: Hephaestus aka h8s [but Hodor is also in the running, see CI software name in Zulip for the real big questions of our time]). # Expected Repo Structure; Every repository to be tested has at least two files: `hail-ci-build-image` and `hail-ci-build.sh`. The former contains a docker image in a publicly accessible repository. The latter is a shell script that exits with 0 if this branch passes the tests, otherwise it exists with a non-zero code. The logs of this shell script will be shared publicly via the GH PR Status. This script will be executed in the image referenced by `hail-ci-build-image`. # Dockerfile.pr-builder; I carefully wrote a docker file to cache as much gradle crap as possible. # gitHash in Gradle; I pushed `gitHash`'s definition into the `doLast` blocks of the gradle steps that actually need it. `doLast` is only run when the task is actually requested. This allows me to run `downloadDependencies` without creating a dependency on the entire `.git` directory (which changes with each commit, thus invalidating the cache'd docker image).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4066:227,test,tested,227,https://hail.is,https://github.com/hail-is/hail/pull/4066,3,"['log', 'test']","['logs', 'tested', 'tests']"
Testability,"This is the script I am running:. ```python; rf_kt =(; hc.read(rf_path,sites_only=True); .variants_keytable(); .flatten(); .select(['va.info.MQRankSum']); ); print(rf_kt.schema()). rf_df = rf_kt.to_dataframe(); rf_df.printSchema(); rf_df.show(); ```. And here is the output and stacktrace as it crashes when running `show()`:. ```; Struct {; `va.info.MQRankSum`: Double; }; root; |-- va.info.MQRankSum: double (nullable = true); Traceback (most recent call last):; File ""/tmp/db4d8e04-85c9-4eba-b0b3-4ade69200fd3/test.py"", line 60, in <module>; rf_df.show(); File ""/usr/lib/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py"", line 287, in show; File ""/usr/lib/spark/python/lib/py4j-0.10.3-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/usr/lib/spark/python/lib/pyspark.zip/pyspark/sql/utils.py"", line 63, in deco; for criterion, pop in criteria_pops:; File ""/usr/lib/spark/python/lib/py4j-0.10.3-src.zip/py4j/protocol.py"", line 319, in get_return_value; py4j.protocol.Py4JJavaError: An error occurred while calling o73.showString.; : org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 2.0 failed 20 times, most recent failure: Lost task 0.19 in stage 2.0 (TID 2520, gnomad-prod-sw-s89f.c.broad-mpg-gnomad.internal): java.lang.IndexOutOfBoundsException: 21; at scala.collection.mutable.ResizableArray$class.apply(ResizableArray.scala:43); at scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:48); at is.hail.keytable.KeyTable$$anonfun$8$$anonfun$10.apply(KeyTable.scala:68); at is.hail.keytable.KeyTable$$anonfun$8$$anonfun$10.apply(KeyTable.scala:68); at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59); at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48); at scala.collection.TraversableLike$class.map(TraversableLike.s",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1275:513,test,test,513,https://hail.is,https://github.com/hail-is/hail/issues/1275,1,['test'],['test']
Testability,This is the setup for the website. Some remarks:; - We run a web server (nginx) in Kubernetes (service and deployment); - It has a volume (letsencrypt-certs) that stores our SSL certificates; - Those come from Let's Encrypt. Getting new certs is totally automated (see run-letsencrypt make target).; - certbot by default installs a cron job that runs daily to renew the certs.; - Other publicly exposed services are now encrypted and go through nginx. That's set up for ci and scorecard.; - The site pod (via a cron job) polls for a new deployment every 3m for new documentation. It's not yet integrated into the ci for automatic deployment (and testing?),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4403:646,test,testing,646,https://hail.is,https://github.com/hail-is/hail/pull/4403,1,['test'],['testing']
Testability,"This is to make it easier to port things to the FunctionRegistry. This involves serializing the type, so it's not going to be especially efficient on most arbitrary objects, so i pulled strings out separately. It also doesn't deal with returning things that are arrays or structs or anything yet. (mostly just strings). The type serializing is also included in this PR. I moved the StringFunctions to use this so it should be moderately tested by the string function tests in python. cc @tpoterba",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3519:437,test,tested,437,https://hail.is,https://github.com/hail-is/hail/pull/3519,2,['test'],"['tested', 'tests']"
Testability,"This is two independent commits but I put them in one PR, happy to split if you want. 1. These tests weren't being run in CI I think because of the filename not starting with `test_*`. The microseconds test currently fails on main. I believe this is because the fallback case at the end uses the units of the input and not the smallest possible units (on main you get naturaldelta(0.000001) == 0 seconds not 1 microsecond). 2. Changed second(s) -> s, millisecond(s) -> ms, microsecond(s) -> µs",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13743:95,test,tests,95,https://hail.is,https://github.com/hail-is/hail/pull/13743,2,['test'],"['test', 'tests']"
Testability,"This isn't needed any more, since setAggState() and newAggState() do the right thing when called. At least on my laptop, this brings the one test down to ; ```; Name	Mean	Median	StDev; matrix_table_many_aggs_col_wise	24.275	24.372	0.818; ```; vs with the flag disabled, which is ; ```; Name	Mean	Median	StDev; matrix_table_many_aggs_col_wise	30.147	29.706	1.868; ```; (oops)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6791:141,test,test,141,https://hail.is,https://github.com/hail-is/hail/pull/6791,1,['test'],['test']
Testability,"This isn't really our fault. k8s sends us a 400 when a container is in a funky state. Creating this issue so I can find it again later when I run into this. Somehow a container terminates without timing information, and the read logs request returns a 400 instead of a 404. Batch handles this fine (it treats all log read failures the same). Known issue: https://github.com/kubernetes/kubernetes/issues/59296. ```; {""levelname"": ""INFO"", ""asctime"": ""2019-07-11 14:19:39,890"", ""filename"": ""batch.py"", ""funcNameAndLine"": ""update_job_with_pod:1145"", ""message"": ""update job (9, 1, 'main') with pod batch-9-job-1-c8b9b2""}; {""levelname"": ""INFO"", ""asctime"": ""2019-07-11 14:19:39,890"", ""filename"": ""batch.py"", ""funcNameAndLine"": ""update_job_with_pod:1159"", ""message"": ""job (9, 1, 'main') mark complete""}; {""levelname"": ""WARNING"", ""asctime"": ""2019-07-11 14:19:39,899"", ""filename"": ""batch.py"", ""funcNameAndLine"": ""mark_complete:579"", ""message"": ""job (9, 1, 'main') has pod batch-9-job-1-c8b9b2 which is terminated but has no timing information. {'api_version': 'v1',\n 'kind': 'Pod',\n 'metadata': {'annotations': None,\n 'cluster_name': None,\n 'creation_timestamp': datetime.datetime(2019, 7, 11, 14, 19, 34, tzinfo=tzlocal()),\n 'deletion_grace_period_seconds': 30,\n 'deletion_timestamp': datetime.datetime(2019, 7, 11, 14, 20, 4, tzinfo=tzlocal()),\n 'finalizers': None,\n 'generate_name': None,\n 'generation': None,\n 'initializers': None,\n 'labels': {'app': 'batch-job',\n 'batch_id': '9',\n 'hail.is/batch-instance': 'ffa5abc4607849df8e5f0036e7350bcf',\n 'job_id': '1',\n 'task': 'main',\n 'user': 'test',\n 'uuid': '291b9eed73b9433c86ff1f58624cf24d'},\n 'name': 'batch-9-job-1-c8b9b2',\n 'namespace': 'pr-6604-batch-pods-cjklalqnl5u9',\n 'owner_references': None,\n 'resource_version': '86681671',\n 'self_link': '/api/v1/namespaces/pr-6604-batch-pods-cjklalqnl5u9/pods/batch-9-job-1-c8b9b2',\n 'uid': 'e878f906-a3e6-11e9-a4bb-42010a8000af'},\n 'spec': {'active_deadline_seconds': None,\n 'affinity': ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6616:229,log,logs,229,https://hail.is,https://github.com/hail-is/hail/issues/6616,2,['log'],"['log', 'logs']"
Testability,This issue tracks the results of the 30k pod scale test 2,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6566:51,test,test,51,https://hail.is,https://github.com/hail-is/hail/issues/6566,1,['test'],['test']
Testability,"This larger benchmark shows clearer separation between the old pc-relate approach and the current one. this branch (which include's master's improvements); ```; 2020-01-27 13:16:20,975: INFO: [1/1] Running pc_relate_big...; 2020-01-27 13:18:12,886: INFO: burn in: 111.90s; 2020-01-27 13:19:56,255: INFO: run 1: 103.35s; 2020-01-27 13:21:46,801: INFO: run 2: 110.54s; 2020-01-27 13:23:39,147: INFO: run 3: 112.37s; {""config"": {""cores"": 1, ""version"": ""0.2.31-68d448411ab5"", ""timestamp"": ""2020-01-27 13:23:39.157122"", ""system"": ""darwin""}, ""benchmarks"": [{""name"": ""pc_relate_big"", ""failed"": false, ""timed_out"": false, ""times"": [103.35172498200001, 110.53654034999997, 112.369625832]}]}; ```; before improvements `becbbc6d2` (run against this branch's new benchmark); ```; 2020-01-27 13:25:15,789: INFO: [1/1] Running pc_relate_big...; 2020-01-27 13:27:25,725: INFO: burn in: 129.92s; 2020-01-27 13:29:44,260: INFO: run 1: 138.48s; 2020-01-27 13:31:49,675: INFO: run 2: 125.40s; 2020-01-27 13:33:59,580: INFO: run 3: 129.86s; ```. cc: @tpoterba",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7975:12,benchmark,benchmark,12,https://hail.is,https://github.com/hail-is/hail/pull/7975,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"This lets RVB copy values of a different type. To do this, I needed to; delete all the logic in RVB and move it to PType. This also was an; opportunity to slightly simplify the existing copy code. I realize this may be a challenge to review. Happy to walk through any part as necessary.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8099:87,log,logic,87,https://hail.is,https://github.com/hail-is/hail/pull/8099,1,['log'],['logic']
Testability,This lets me run tests in SBT. SBT sets up a class loader that it; uses to load freshly compiled test clases and execute tests. This; makes the code-compile-test loop less time consuming. I will check it against a cluster to ensure that it does not; introduce new class loader issues when code is shipped.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3707:17,test,tests,17,https://hail.is,https://github.com/hail-is/hail/pull/3707,4,['test'],"['test', 'tests']"
Testability,This lets us run benchmarks on M1s,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11825:17,benchmark,benchmarks,17,https://hail.is,https://github.com/hail-is/hail/pull/11825,1,['benchmark'],['benchmarks']
Testability,"This leverages the Indeed LSM tree. It implements this API:; - `start(...)`; - `put(x1, ...)` (keys are extracted from the records themselves); - `get(l, r)` which takes two key records and retrieves the values in `[l, r)`. There's a server (`ShuffleServer.scala`) and a client (`ShuffleClient.scala`). They communicate over TLS-secured TCP/IP sockets on a configurable port. The server has one thread per client socket. The client is currently single-threaded. I had to add a `log4j.properties` because I don't start a HailContext and log4j gets upset when you don't configure it. Files; - `HailLSM.scala` - This wraps the Indeed LSM tree with some shims so that we encoders and decoders use `InputStream` and `OutputStream` instead of these were `Data...` interfaces.; - `HailSSLContext.scala` - This implements creation of an actually secure `SSLContext` from a key store and a trust store. It requires clients to identify themselves with a trusted certificate.; - `ShuffleClient.scala` - Self-explanatory.; - `ShuffleServer.scala` - Three classes: `Handler` corresponds to a client connection. It has its own thread. `Shuffle` owns the `Region` , the LSM tree, and the encoder/decoders. `ShuffleServer` waits for connections and spawns threads. It owns the executor service.; - `ShuffleUtils.scala` - Odds and ends.; - `Wire.scala` - Serializers and deserializers for various things. Includes renames that help me keep everything sensible (e.g. for every X I use, I have ""writeX"" and ""readX"").; - `ShuffleSuite.scala` - One test: write 1,000,000 randomly ordered numbers into the LSM tree and read them all back in order. Takes about 1 minute. Obviously we need to dramatically improve the performance of that (I think this should take not longer than one second).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8361:1528,test,test,1528,https://hail.is,https://github.com/hail-is/hail/pull/8361,1,['test'],['test']
Testability,This logic can happen at config time instead of runtime.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11026:5,log,logic,5,https://hail.is,https://github.com/hail-is/hail/pull/11026,1,['log'],['logic']
Testability,This makes the logs MUCH more readable.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3999:15,log,logs,15,https://hail.is,https://github.com/hail-is/hail/pull/3999,1,['log'],['logs']
Testability,"This may be an environment specific bug, but we have showed it only occurs with releases after 0.2.42 (in our environment) and only under very specific conditions. When we run `subject_qc` on a matrix table with >= 354 partitions using an external spark cluster (i.e. specifying `master` in `hail.init`), the spark worker crashes with a SIGSEGV. The issue does not occur with `variant_qc` but we do not know know the extent of what specific operations trigger it. Below is a test that consistently triggers the issue:. Setup:. $ $SPARK_HOME/sbin/start-master.sh --host localhost --port 7077; $ $SPARK_HOME/sbin/start-shuffle-service.sh; $ $SPARK_HOME/sbin/start-slave.sh spark://localhost:7077 --work-dir /scratch/local/. Test:. import hail; hail.init(master=""spark://localhost:7077""); P = 1; S = 1000; V = 50000; for N in range(350, 400, 1):; try:; mt = hail.balding_nichols_model(P, S, V, N); mt = hail.sample_qc(mt); mt = mt.filter_cols(mt.sample_qc.n_hom_var > V*0.32); print(""\n[PASS] with"", N, ""partitions:"", mt.count()); except Exception:; print(""\n[FAIL] with "", N, ""partitions""); break. Test Output (SIGSEGV is reported in Spark worker logs, see end):. 2020-06-10 10:29:56 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; 	Setting default log level to ""WARN"".; 	To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; 	Running on Apache Spark version 2.4.5; 	SparkUI available at http://US0HPN0036.cm.cluster:4047; 	Welcome to; 		 __ __ <>__; 		/ /_/ /__ __/ /; 	 / __ / _ `/ / /; 	 /_/ /_/\_,_/_/_/ version 0.2.44-6cfa355a1954; 	LOGGING: writing to /bmrn/apps/bmrn-hugelib/0.3.0/test/hail-20200610-1029-0.2.44-6cfa355a1954.log; 	2020-06-10 10:29:59 Hail: INFO: balding_nichols_model: generating genotypes for 1 populations, 1000 samples, and 50000 variants...; 	[Stage 1:==========================> (171 + 80) / 350]; 	[PASS] with 350 partitions: (50000, 984); 	2020-06-10",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8944:475,test,test,475,https://hail.is,https://github.com/hail-is/hail/issues/8944,2,"['Test', 'test']","['Test', 'test']"
Testability,This means that logs from submitted gcloud jobs won't go into; the void by default.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10574:16,log,logs,16,https://hail.is,https://github.com/hail-is/hail/pull/10574,1,['log'],['logs']
Testability,This means tokens obtained via `hailctl auth login` won't expire (but can be explicitly revoked by `hailctl auth logout`),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8484:45,log,login,45,https://hail.is,https://github.com/hail-is/hail/pull/8484,2,['log'],"['login', 'logout']"
Testability,"This might give us a bit more insight into the 500. However, this assert shouldn't fail because we're querying on the primary key which is necessarily unique.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7300:66,assert,assert,66,https://hail.is,https://github.com/hail-is/hail/pull/7300,1,['assert'],['assert']
Testability,"This moves the LinearMixedModel class and tests to the stats module, plus some doc fixes. I'll be adding a function to `stats` section of methods that will construct an LMM from a matrix table, to go alongside linear_regression and logistic_regression. But it's much nicer to have the LMM class on it's own page in the stats module with its methods listed and linked after the top matter. And LMM really is a statistical python class more than a single method. And `test_statgen.py` was getting way too long.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4083:42,test,tests,42,https://hail.is,https://github.com/hail-is/hail/pull/4083,1,['test'],['tests']
Testability,"This moves the nginx proxy configuration out of router and into a sidecar in the notebook/workshop pod. This extends TLS termination from router to the notebook pod and consolidates the notebook routing logic. I didn't run a scale test but this doesn't change any functionality, and I tested in dev that I could log in to a workshop, start and open a notebook.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10204:203,log,logic,203,https://hail.is,https://github.com/hail-is/hail/pull/10204,4,"['log', 'test']","['log', 'logic', 'test', 'tested']"
Testability,"This needs tests as well as I think I need to fix indexing (so I don't blow memory on the full genome), but I wanted to share what I've been up to with y'all. Also, caitlin can use this branch to run an analysis if it comes to that. I would also appreciate some feedback on the approach. It would be much more ideal to just make joins of variant tables against BGENs smarter, but I think the infrastructure necessary for that is big. cc: @cseed. List of changes:. - added `_variants_per_file` limits the loaded variants to variants at the given array of indexes (0-indexed, same order as on disk). - ~added `row_fields` which prevents reading and allocation of LID and RSID (also improved python-type-checking for `row_fields` and `entry_fields`)~ Moved to #3779 and #3778. - ~fixed table-table joins to _not_ always coerce (thus computing partition keys of) the right-hand table~ Moved to #3723 . - ~added a check that prevents globals and sample annotations copying when they're not used in the body of a MatrixMapCols~ Moved to #3751. - ~fixed a bug in `IndexBTree` wherein if the number of elements was a multiple of 1024, an unnecessary 1024 elements were added to the end of the index file (which I believe breaks the reading process which expects the number of bytes to correspond to the size of the tree)~ Moved to #3750. - ~added `IndexBTree2` which is just an in-memory list of the variant start positions. This is a fair bit of data. Chromosome 1 has about 250 million bases, so in the worst case this is 250 * 8 million bytes = 2 GB. It occurs to me that this is actually way to much data to load on the master node in general (since I just try to open the indexes for every file). I should switch this to a disk-based index.~ Made it disk-based, called it `OnDiskBTreeIndexToValue` #3794. - each hadoop `FileSplit` now contains a possibly null (indicating no filter) list of variants (by index) to keep, in practice this should be quite small. - ~I changed several asserts to `if`'s with ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3727:11,test,tests,11,https://hail.is,https://github.com/hail-is/hail/pull/3727,1,['test'],['tests']
Testability,"This new test runs fine locally without the service account key activation, but I think it will be needed on the cloud. We'll see if this just works!. cc: @konradjk",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5762:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/5762,1,['test'],['test']
Testability,"This one just handles value IRs, needed to get rid of AST. Test by verifying x == parse(pretty(x)) on an example of each value IR.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3826:59,Test,Test,59,https://hail.is,https://github.com/hail-is/hail/pull/3826,1,['Test'],['Test']
Testability,"This pains me. As currently set up, there's no way to deploy the wheel that we tested because that wheel is tightly coupled with a bunch of ""temporary"" file paths. I'm not confident I can untangle all this into a clean promote-what-you-test deploy right now. This PR should get us back to correct deploys until I can take the time to get us to proper promote-what-you-test deploys.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8606:79,test,tested,79,https://hail.is,https://github.com/hail-is/hail/pull/8606,3,['test'],"['test', 'tested']"
Testability,"This pipeline:; ```python3; # cwd = repo_root/hail; vcf2 = hl.import_vcf('src/test/resources/gvcfs/HG00268.g.vcf.gz', force_bgz=True, reference_genome='GRCh38'); vcf1 = hl.import_vcf('src/test/resources/gvcfs/HG00096.g.vcf.gz', force_bgz=True, reference_genome='GRCh38'); vcfs = [vcf1.rows().key_by('locus'), vcf2.rows().key_by('locus')]; ht = hl.Table.multi_way_zip_join(vcfs, 'data', 'new_globals'); ht._force_count(); ```; Fails with:; ```; java.lang.IllegalArgumentException: requirement failed; at scala.Predef$.require(Predef.scala:224); at is.hail.rvd.RVD.<init>(RVD.scala:46); at is.hail.rvd.RVD$.apply(RVD.scala:1411); at is.hail.expr.ir.TableMultiWayZipJoin.execute(TableIR.scala:925); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8027:78,test,test,78,https://hail.is,https://github.com/hail-is/hail/issues/8027,2,['test'],['test']
Testability,"This probably needs a little cleanup. What's this for? Well, in another branch I have a bunch of IR rewrite optimizations. Those rewrite rules (1) want to test types (e.g. eliminate a cast of a type to itself), and they (2) also want to create new IRs which therefore need well-formed types. Calculating all the intermediate types explicitly (or calling Infer) everywhere both seem like non-starters. Therefore, I changed the IR nodes to compute their own types. I repurposed Infer, but it is no longer recursive. This meant that In, InAgg and Ref needed to carry their types, becuase, in the old, Infer-based way, they were dependent on the environment to type themselves, but that's no longer possible. I also repurposed Infer as a recursive type checker. This created two subtle problems: (1) the IR code uses rvRowType everywhere in stead of rowType (so it can reuse pointers to the full row) and (2) toIR needs to set the Ref type from the symbol table, but the symbol table strips out all missing bits, so the types on Ref terms disagreed with the actual values flowing around. I resolved this in two ways: (1) va now refers to the full rvRowType in all eval contexts, everywhere. (This is closer to the existing IR behavior.) (2) the symbol table no longer strips missingness, but it is stripped by Ref when the symbol is referenced. Ref also records the unstripped type which is used by toIR. The sooner we can kill AST, the better.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3332:155,test,test,155,https://hail.is,https://github.com/hail-is/hail/pull/3332,1,['test'],['test']
Testability,This produces a python script `_build/doctest/test_hail_docs.py` with all of the code tested by the Sphinx doctest module.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1825:86,test,tested,86,https://hail.is,https://github.com/hail-is/hail/pull/1825,1,['test'],['tested']
Testability,"This proposes a way to test `hailctl dataproc`, starting with `hailctl dataproc start`. 1. Move `subprocess` calls to run gcloud commands and get gcloud configuration to a separate `gcloud` module. This module serves as a convenient place to insert mocks in tests.; 2. Automatically (with pytests's `autouse`) mock calls to the `gcloud` module's methods in tests. This prevents actually running `gcloud` in tests. This also provides a pytest fixture to set the mocked `gcloud` configuration values.; 3. Add some tests for `hailctl dataproc start`. These tests pass arguments to `cli.main` and make assertions about the resulting `gcloud` command(s).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9066:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/9066,10,"['assert', 'mock', 'test']","['assertions', 'mock', 'mocked', 'mocks', 'test', 'tests']"
Testability,"This really frustrated me while I was working on the Shuffler. Does it not bother; everyone else? Without this, my log statements get buffered and placed into some; HTML page.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8691:115,log,log,115,https://hail.is,https://github.com/hail-is/hail/pull/8691,1,['log'],['log']
Testability,"This reduced the number of logs in ""worker.log"" by over 80% from 515K lines to 77K for an hour with some load. https://console.cloud.google.com/logs/query;query=resource.type%3D%22gce_instance%22%0AlogName:%22worker%22%0ANOT%20labels.namespace%3D%22default%22%0ANOT%20%22crun%20process%22%20AND%20NOT%20%22crun%20run%20process%22%20AND%20NOT%20%22marking%20complete%22%20AND%20NOT%20%22initializing%22%20AND%20NOT%20%22running%20input%22%20AND%20NOT%20%22input:%22%20AND%20NOT%20%22running%20main%22%20AND%20NOT%20%22main:%22%20AND%20NOT%20%22running%20output%22%20AND%20NOT%20%22output:%22%20AND%20NOT%20%22cleaning%20up%22%20AND%20NOT%20%22downloading%20JAR%22%20AND%20NOT%20%22running%20jvm%20process%22%20AND%20NOT%20%22uploading%20log%22%20and%20NOT%20%22Obtained%20writer%22%20AND%20NOT%20%22finished%20normally%22%20AND%20NOT%20%22was%20cancelled%22%20AND%20NOT%20%22user%20exception%20encountered%22%20AND%20NOT%20%22:%20execute%22%20AND%20NOT%20%22JVM-%22%20AND%20NOT%20%22healthcheck%22%20AND%20NOT%20%22%2Fapi%2Fv1alpha%2Fbatches%2Fjobs%2Fcreate%22;timeRange=2022-06-06T17:00:59.759Z%2F2022-06-06T18:00:59.759Z;cursorTimestamp=2022-06-06T17:53:15.865608694Z?project=hail-vdc",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11898:27,log,logs,27,https://hail.is,https://github.com/hail-is/hail/pull/11898,3,['log'],"['log', 'logs']"
Testability,"This refactors the parser to use `BindingEnv`, which tracks the separate eval, agg, scan, and relational environments. This was motivated by the new randomness work, which needs to be able to rebind row and col references in both eval and agg scopes, which was breaking the parser. I don't like duplicating the (rather complicated) binding behavior of the nodes, but I couldn't find a way to avoid it without a much larger refactoring of the IR. So I tried to make the binding logic in the parser be as direct a copy of what is encoded in `Binds.scala` as possible. For example, relational nodes always pass `env.onlyRelational` to their children, which isn't necessary if we ensure that only relational bindings exist in environments passed to relational nodes, but it matches the logic in `Binds`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12289:477,log,logic,477,https://hail.is,https://github.com/hail-is/hail/pull/12289,2,['log'],['logic']
Testability,This removes the name conflict with the `key` attribute of a table. I also changed the test `count` to `_force_count` to be sure they aren't ever optimized.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4257:87,test,test,87,https://hail.is,https://github.com/hail-is/hail/pull/4257,1,['test'],['test']
Testability,This reverts commit 06b5a9ad7e10a564fc8fc848826beb3c445425db. 9506 modified a migration file which is not permitted. It passes the PR tests because the PR test environment doesn't use an extant database schema. We should really test that the migration works for an extant database ... . We could at least check that none of the SQL files are modified in the current commit.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9530:134,test,tests,134,https://hail.is,https://github.com/hail-is/hail/pull/9530,3,['test'],"['test', 'tests']"
Testability,"This seems to save like 20 to 30 seconds out of a 2.5 minute pipeline, so like 1/6 to 1/5 saved. I'm testing this PR and the SplitMulti one (both separately and with changes combined) with:; ```; In [1]: import hail as hl; In [2]: hl.init(); In [3]: %%time ; ...: hl.split_multi_hts(hl.read_matrix_table('/Users/dking/projects/hail-data/profile.mt').select_entries('GT', 'AD', 'DP', 'GQ', 'PL'))._force_count_rows(); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3627:101,test,testing,101,https://hail.is,https://github.com/hail-is/hail/pull/3627,1,['test'],['testing']
Testability,This should fix the issue where we were trying to use a nonexistent GoogleAsyncFS when a worker is killed in the UI. I tested this in my namespace.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12398:119,test,tested,119,https://hail.is,https://github.com/hail-is/hail/pull/12398,1,['test'],['tested']
Testability,"This should fix the test_copy failures. The problem was, we were sending a mutable byte iterator for data when inserting a new object. If that insert read some of the data, failed, and was retried, the data that was read was lost and the retry started where the failed insert left off. To retry writes, you need to keep around the data you've sent to resend in case of failure. So you don't have to keep around an unbounded amount of data, Google Storage supports resumable uploads: https://cloud.google.com/storage/docs/resumable-uploads. This allows us to send data in chunks, and release the data after Google reports back that the data has been committed. `StorageClient.insert_object`, when the upload type is resumable (the default), takes an additional argument `bufsize`. This is the amount the amount that the writer will buffer for retries, and the size of the chunks sent to GCS. I kept around the simpler media upload type since I actually want to use it in copy (copy doesn't need to buffer because it can retry by rereading the file being copied from). This code was actually kind of hard to organize. It would be better if the code immediately wrote any incoming data instead of just buffering it until we hit the chunk size, but I didn't find a manageable way to write that. Suggestions welcome, tho it would be good to get this fix in because of the test failures.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10023:1367,test,test,1367,https://hail.is,https://github.com/hail-is/hail/pull/10023,1,['test'],['test']
Testability,This should quiet the logging situation when the driver goes offline.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12496:22,log,logging,22,https://hail.is,https://github.com/hail-is/hail/pull/12496,1,['log'],['logging']
Testability,"This should speed up the scheduler a bit. I tested it with some log statements to ensure there were cache hits. I tested the cleanup loop works before I added a try, except wrapper.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7825:44,test,tested,44,https://hail.is,https://github.com/hail-is/hail/pull/7825,3,"['log', 'test']","['log', 'tested']"
Testability,This should speed up the tests and fully revert everything,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9276:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/9276,1,['test'],['tests']
Testability,"This should wait for #9184 . This PR adds fluentd support for streaming the logs to Logs Viewer. Things to Note:; - I didn't have to setup the authorization at all, so I believe it's using the service account on the worker which would be the batch2 service account. I had to give that service account Logs Writer permissions. This is the same service account regardless of the namespace.; - All namespaces have output written.; - I added some labels of the instance id and namespace to help with searching. Let me know if you think we need something else.; - I used a filter to parse the JSON in the worker log to get the right timestamp of the record rather than the publication of the log message in the Logs Viewer. Example Stackdriver Queries:. ```; resource.type=""gce_instance""; labels.namespace=""jigold""; logName=""projects/hail-vdc/logs/worker.log""; ```. ```; resource.type=""gce_instance""; labels.""compute.googleapis.com/resource_name""=""batch-worker-jigold-uyvo5""; logName=""projects/hail-vdc/logs/worker.log""; ```. I basically just followed this: https://cloud.google.com/logging/docs/agent. Will attempt to get dockerd logs in some other time.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9189:76,log,logs,76,https://hail.is,https://github.com/hail-is/hail/pull/9189,14,"['Log', 'log']","['Logs', 'log', 'logName', 'logging', 'logs']"
Testability,"This slows the exponential growth in sleeps dramatically. Enough that the tests don't sometimes wait 30 seconds to learn that a batch is finished. On my laptop, the tests just finished in less than three minutes.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5604:74,test,tests,74,https://hail.is,https://github.com/hail-is/hail/pull/5604,2,['test'],['tests']
Testability,"This streamlines the logic significantly. No attempt has been made to have the encoder methods take; PCode/EmitCode directly, but that is the future direction here.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9371:21,log,logic,21,https://hail.is,https://github.com/hail-is/hail/pull/9371,1,['log'],['logic']
Testability,"This subsumes #4540, which I'll close once I think I can get the rest of this finished tonight. Currently I've got... something that passes tests in Scala, although I haven't gone through and cleaned up the code for the SeqOps and other CodeAggregator stuff yet. Need to go through and push the changes into python but I thought I'd open this as a status update. @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4555:140,test,tests,140,https://hail.is,https://github.com/hail-is/hail/pull/4555,1,['test'],['tests']
Testability,"This task creates `hail.zip` and places it in `build/distributions`. This zip contains a top-level folder `hail` which contains:. - `bin`: three scripts for running python, ipython, and jupyter with the hail environment set correctly. These scripts also check that `SPARK_HOME` is set to something sensible.; - `python`: the python files from the hail repository; - `docs`: the contents of `build/www/hail`, i.e. `hail.is/hail`, i.e the docs; - `hail-all-spark.jar`: the hail jar sans tests. I also checked in the darwin/OSX identity-by-state library. When `shadowJar` is run on any system other than OS X, the resulting jar will contain both that architecture's library and the OS X library. In particular, the build machines will generate jars with both the OS X library and linux x86-64 library. Resolves #1810",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1871:485,test,tests,485,https://hail.is,https://github.com/hail-is/hail/pull/1871,1,['test'],['tests']
Testability,"This test could run forever if batch is temporarily down between starting the job and the job completing. I'm not entirely sure what to do in this scenario, failing doesn't seem too bad because we weren't actually able to verify the test, but it seems better than potentially having the job hang.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12420:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/12420,2,['test'],['test']
Testability,This test currently takes 3 minutes. I reduce the number of parameters we check.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2275:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/2275,1,['test'],['test']
Testability,"This test fails often ([for example](https://ci.hail.is/batches/234836/jobs/73)). I do not believe the test itself is being cancelled; by pytest-asyncio. Instead, I believe the aiotools code inadvertantly allows a; `CancelledError` to bubble to the top-level. Unfortunately, `asyncio` appears; to treat that as if the *task itself was cancelled*. Because it treats the; task as cancelled, we lose the stack trace (which would tell us where; we were just before the cancellation occurred). You can see for yourself this unfortunate behavior here:; ```; In [1]: import asyncio ; ...: ; ...: async def foo(): ; ...: raise asyncio.CancelledError() ; ...: ; ...: loop = asyncio.get_event_loop() ; ...: future = asyncio.ensure_future(foo()) ; ...: # allow the loop to run long enough that foo gets scheduled ; ...: loop.run_until_complete(asyncio.sleep(1)) ; ...: print(f'is cancelled? {future.cancelled()}') ; ...: future.result() ; is cancelled? True; Traceback (most recent call last):; File ""<ipython-input-1-14d822ad2a93>"", line 11, in <module>; future.result(); CancelledError. In [2]: . ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10243:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/10243,2,['test'],['test']
Testability,"This test failure has occurred a few times. It's usually been resolved by simply re-running the test without any source code changes. There are at least four recent examples, all on different feature branches: . - [2017-02-21 11:10 UTC](https://ci.hail.is/viewLog.html?buildId=6489&tab=buildResultsDiv&buildTypeId=HailSourceCode_HailCi#); - [2017-02-15 21:51 UTC](https://ci.hail.is/viewLog.html?buildId=5446#2135525582_186_5446_problem); - [2017-02-15 18:45 UTC](https://ci.hail.is/viewLog.html?buildId=5333#1163765489_186_5333_problem); - [2017-02-13 22:42 UTC](https://ci.hail.is/viewLog.html?buildId=4934&tab=buildResultsDiv&buildTypeId=HailSourceCode_HailCi). ```; [11:19:14][:testHail] ======================================================================; [11:19:14][:testHail] ERROR: test_dataset (hail.tests.ContextTests); [11:19:14][:testHail] ----------------------------------------------------------------------; [11:19:14][:testHail] Traceback (most recent call last):; [11:19:14][:testHail] File ""/home/ec2-user/BuildAgent/work/c38e75e72b769a7c/python/hail/tests.py"", line 233, in test_dataset; [11:19:14][:testHail] vds_assoc = vds_assoc.lmmreg(vds_kinship, 'sa.pheno', ['sa.cov1', 'sa.cov2']); [11:19:14][:testHail] File ""<decorator-gen-89>"", line 2, in lmmreg; [11:19:14][:testHail] File ""/home/ec2-user/BuildAgent/work/c38e75e72b769a7c/python/hail/java.py"", line 93, in handle_py4j; [11:19:14][:testHail] raise FatalError(msg); [11:19:14][:testHail] FatalError: lmmreg: failed to fit delta: REML realized at delta upper search boundary e^10 = 22026.465794806718, indicating negligible genetic component of variance. Standard linear regression may be more appropriate.; ```. These are the [offending lines](https://github.com/hail-is/hail/blob/master/python/hail/tests.py#L222-L233):. ```; vds_assoc = (hc.import_vcf(test_resources + '/sample.vcf'); .split_multi(); .variant_qc(); .annotate_samples_expr(; 'sa.culprit = gs.filter(g => v == Variant(""20"", 13753124, ""A"", ""C"")).map(g =",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1416:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/issues/1416,9,['test'],"['test', 'testHail', 'tests']"
Testability,"This test is failing because `jq` reading back to its own stream is resulting in wiping the file. This seemed the easiest workaround. I also fixed the semantics of the test. I'm not sure why I previously prepended `batch` to the domain, what I'm really testing here is that something meant to be `internal.hail.is` can't pretend to be pointing to `hail.is`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10850:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/10850,3,['test'],"['test', 'testing']"
Testability,This test takes up to fifteen minutes on QoB and can be a long tail for CI pipelines so I broke it up into smaller tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13048:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/13048,2,['test'],"['test', 'tests']"
Testability,"This test tests a lot of functionality. Two different things were failing, both of which are fixed here:. 1. When you list a file (as opposed to a directory) you should get a size one list containing the stat for that file. Previously, `LocalFS.ls` would raise a NotADirectoryError.; 2. `LocalFS.ls` does not support the globbing that `HadoopFS` supports. I fixed that.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11629:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/11629,2,['test'],"['test', 'tests']"
Testability,"This test times out occasionally, as far as we can tell due to unavailability of g2 machines. We've determined that for the time being we will allow the test to time out so it does not interfere with the CI pipeline.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14435:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/14435,2,['test'],['test']
Testability,"This test would fail because multiple test jobs could race with the exact same prefix. Instead, we use a fresh prefix for each job and each pytest thread in the job. I also switched from unittest to pytest so I could use a fixture. I honestly do not understand why the local tests were passing the service backend.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12463:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/12463,3,['test'],"['test', 'tests']"
Testability,"This test:. ```python3; p = Pipeline(backend=BatchBackend('https://batch.hail.is')); for _ in range(30000):; p.new_task().command('/bin/true'); p.run(); ```. Revealed a number of issues:; daniel king: Problems Found:; - [x] https://github.com/hail-is/hail/issues/6543 mysql can deadlock itself, requiring you to reissue the db request; - [x] https://github.com/hail-is/hail/issues/6545 of the 20760 pods that were successfully created before #6543 happened, about 800 could not get their logs due to not existing. That's a failure rate of ~4%. The number of failures continues to grow as I type this message (now up to 1280). I'm counting failures this way:; ```; k logs -l app=batch --tail=999999 | grep 'no logs for ' | sed -E 's/^.*no logs for ([^ ]+).*$/\1/' | sort -u | wc -l; ```; - the k8s request latency spiked to 3.47s max 0.6 s mean during this test and stayed elevated for 10 minutes.; - [ ] https://github.com/hail-is/hail/issues/6546 there was a lot of volume mount failures due to, apparently, the secrets, e.g.:; ```; 9m13s Warning FailedMount Pod Unable to mount volumes for pod ""batch-278-job-10258-a49a81_batch-pods(82ea5910-9ccb-11e9-ad88-42010a800049)"": timeout expired waiting for volumes to attach or mount for pod ""batch-pods""/""batch-278-job-10258-a49a81"". list of unmounted volumes=[gsa-key default-token-8h99c]. list of unattached volumes=[gsa-key default-token-8h99c]; ```; - [ ] https://github.com/hail-is/hail/issues/6548 batch takes 4 seconds to render the batch page with 20k jobs (the web browser displays it fine though), e.g. https://batch.hail.is/batches/278; - [ ] https://github.com/hail-is/hail/issues/6548 batch UI search is DOA with 20k jobs; - [ ] https://github.com/hail-is/hail/issues/6556 delete (and likely cancel) will timeout on large batches",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6547:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/issues/6547,6,"['log', 'test']","['logs', 'test']"
Testability,This updates `hl.variant_qc` to compute the p-value from the one-sided HWE test for excess heterozygosity as the field `p_value_excess_het`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10993:75,test,test,75,https://hail.is,https://github.com/hail-is/hail/pull/10993,1,['test'],['test']
Testability,"This vectorized form yields a 3x+ benefit for MakeNDArray. Up to 120x for the copy function alone (when top bit is missing), 6x for 200k full array (copy function only, no missing values), 3x in python test of MakeNDArray for a 200k full array. I tried to find a reasonable set of tests. A future improvement: check the complementary case, where missingness bytes are initiated to -1 (all 1's in 2's complement), but this requires not using ScalaToRegionValue, since that does not allow non-0 initialization.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7646:202,test,test,202,https://hail.is,https://github.com/hail-is/hail/pull/7646,2,['test'],"['test', 'tests']"
Testability,This was added in https://github.com/hail-is/hail/pull/12421 to help debug errors in `testSeekMoreThanMaxInt`. We have not seen that transient error in a while and I think the switch to https://github.com/hail-is/hail/pull/12590 might have fixed some underlying misuse of `AppendBlobClient` (by not using it).,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13472:86,test,testSeekMoreThanMaxInt,86,https://hail.is,https://github.com/hail-is/hail/pull/13472,1,['test'],['testSeekMoreThanMaxInt']
Testability,"This was basically a debugging assertion that slipped into `main`. We run our clusters in Azure's `eastus` region, but other than this line there's nothing stopping anyone from running clusters elsewhere.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14416:31,assert,assertion,31,https://hail.is,https://github.com/hail-is/hail/pull/14416,1,['assert'],['assertion']
Testability,This was breaking RouterFS.ls. Tested in the export_vcf lowering branch,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11622:31,Test,Tested,31,https://hail.is,https://github.com/hail-is/hail/pull/11622,1,['Test'],['Tested']
Testability,"This was driving me fucking crazy. Change the logs to end in '.log', set the content-type on .log artifacts to text/plain.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4536:46,log,logs,46,https://hail.is,https://github.com/hail-is/hail/pull/4536,3,['log'],"['log', 'logs']"
Testability,"This was identified as a cost center during my compiler investigations. The effect is not measurable on the standard benchmark [1]. More investigation is needed. As we improve the performance of the expression language, I suspect this will constitute a more significant fraction of execution time. [1]:; ```; filtergenotypes -c ' g.dp > 400 ||; (g.isHomRef && (g.ad[0] / g.dp < 0.9 || g.gq < 20)) ||; (g.isHomVar && (g.ad[1] / g.dp < 0.9 || g.pl[0] < 20)) ||; (g.isHet && ( (g.ad[0] + g.ad[1]) / g.dp < 0.9 || g.ad[1] / g.dp < 0.20 || g.pl[0] < 20 ))' --keep; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1292:117,benchmark,benchmark,117,https://hail.is,https://github.com/hail-is/hail/pull/1292,1,['benchmark'],['benchmark']
Testability,"This was left over from the old AST parsing stuff and I don't think it's used anymore (except in one test, which I just refactored).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6946:101,test,test,101,https://hail.is,https://github.com/hail-is/hail/pull/6946,1,['test'],['test']
Testability,This was preventing some of the python import_vcf tests from going through IR.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3802:50,test,tests,50,https://hail.is,https://github.com/hail-is/hail/pull/3802,1,['test'],['tests']
Testability,"This was the patch I had to apply to fix the 500s that we had yesterday in PR pages. The URI to URL rewrite enforced GCP which caused the 500. I removed the assertion but don't know yet the proper way to link to a **private** blob storage containers so I just return the URI. I looked at the [canonical URL for blob storage containers](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#resource-uri-syntax) but appears to only work for public containers. When I looked up how to get a URL for private containers, I get a lot of articles on SAS URLs that bake a token into the URL -- not what we want. We really just use this to link to the portal/console, but when I went to the portal the URL contains subscription-specific parameters that we don't have based on just the URI. This was the point where I figured our time was best spent elsewhere… Unless I'm missing something obvious, I can add this to the bottom of the TODO list. I also fixed the deploy_steps environment variable to match what was actually declared in the ci/deployment.yaml",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11121:157,assert,assertion,157,https://hail.is,https://github.com/hail-is/hail/pull/11121,1,['assert'],['assertion']
Testability,"This was to simplify the bytecode generated for unsafe memory access calls vs Scala objects. If there was an improvement, it was smaller than the benchmark measurement noise. Also added some object+offset variants.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2184:146,benchmark,benchmark,146,https://hail.is,https://github.com/hail-is/hail/pull/2184,1,['benchmark'],['benchmark']
Testability,This will be used to merge GVCFs in O(1) IR. WIP because I want to test end-to-end with the GVCF partition reader piece.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12904:67,test,test,67,https://hail.is,https://github.com/hail-is/hail/pull/12904,1,['test'],['test']
Testability,"This will fail until #7376 lands and allows the test to create an empty matrix table. - document `sep`; - add two tests for importing empty matrix tables, one with a header and one without; - include the offending lines in error messages when files have different numbers of columns; - consistently use `String.split(separator, 0)` instead of using two different approaches which yield inconsistent results.; - simplify `parseHeader` and generalize to empty files; - improve error message when a row field found in the file does not match one of the row fields specified by `row_fields` (a dictionary from row field name to type). NB: A no-header empty file implies no columns in the MT. We print a warning to this effect when we discover an empty file. Resolves #7242",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7378:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/7378,2,['test'],"['test', 'tests']"
Testability,This will hopefully make it harder to accidentally build in debug mode when doing performance testing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14306:94,test,testing,94,https://hail.is,https://github.com/hail-is/hail/pull/14306,1,['test'],['testing']
Testability,This will merge cleanly when #3186 goes in and this is rebased. I just want to use the CI to test this branch.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3205:93,test,test,93,https://hail.is,https://github.com/hail-is/hail/pull/3205,1,['test'],['test']
Testability,"This works by parsing log files for the message produced by TaskContext cleanup added in #10392. A bit hacky, but it works!. ```; Benchmark Name Ratio Time 1 Time 2 Mem Ratio Mem 1 (MB) Mem 2 (MB); -------------- ----- ------ ------ --------- ---------- ----------; union_p1000_p1000 116.0% 28.394 32.935 100.0% 1 1; union_p10_p100 114.8% 33.685 38.683 100.0% 1 1; compile_2k_merge 112.1% 253.023 283.740 100.0% 7 7; ndarray_matmul_int64_benchmark 110.1% 8.165 8.992 100.0% 1 1; shuffle_key_by_aggregate_bad_locality 108.9% 414.396 451.457 100.0% 4 4; shuffle_order_by_10m_int 108.7% 95.688 103.993 100.0% 1 1; import_and_transform_gvcf 107.0% 109.282 116.941 100.0% 1 1; matrix_table_entries_show 106.8% 1.318 1.408 100.0% 2 2; sample_qc 106.7% 31.869 34.002 100.0% 2 2; matrix_table_scan_count_rows 105.3% 129.907 136.832 100.0% 1 1; shuffle_key_rows_by_mt 104.9% 25.313 26.553 100.0% 3 3; matrix_table_entries_table_no_key 104.9% 47.893 50.225 100.0% 1 1; table_aggregate_downsample_worst_case 104.7% 33.056 34.625 100.0% 1 1; python_only_10k_transform 104.6% 69.072 72.271 100.0% 1 1; shuffle_key_by_aggregate_good_locality 104.4% 10.776 11.250 100.0% 24 24; table_aggregate_take_by_strings 104.3% 7.718 8.049 100.0% 1 1; kyle_sex_specific_qc 104.2% 9.326 9.715 100.0% 1 1; union_p100_p100 104.1% 24.184 25.174 100.0% 1 1; table_scan_prev_non_null 103.6% 111.901 115.887 100.0% 1 1; write_range_matrix_table_p100 103.3% 6.568 6.786 100.0% 1 1; read_force_count_p10 103.2% 3.644 3.760 100.0% 1 1; variant_and_sample_qc_nested_with_filters_4 103.1% 33.173 34.204 100.0% 2 2; concordance 102.8% 34.514 35.475 100.0% 3 3; table_foreign_key_join_same_cardinality 102.4% 17.859 18.279 100.0% 2 2; gnomad_coverage_stats_optimized 102.3% 27.443 28.087 100.0% 1 1; table_group_by_aggregate_sorted 101.6% 7.337 7.458 100.0% 4 4; write_range_table_p1000 101.0% 43.753 44.186 100.0% 1 1; table_range_means 100.9% 9.722 9.810 100.0% 1 1; matrix_table_decode_and_count_just_gt 100.7% 5.026 5.063 100.0% 1 1; imp",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10407:22,log,log,22,https://hail.is,https://github.com/hail-is/hail/pull/10407,2,"['Benchmark', 'log']","['Benchmark', 'log']"
Testability,"This works for importing the single-dog sample vcf that I've been testing on. It looks like there's a couple of different coding conventions for contig names, but this is the one that matches the fasta file.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8404:66,test,testing,66,https://hail.is,https://github.com/hail-is/hail/pull/8404,1,['test'],['testing']
Testability,"This works, I'm still cleaning it up though. PRing for the test suite to see if I broke anything.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7716:59,test,test,59,https://hail.is,https://github.com/hail-is/hail/pull/7716,1,['test'],['test']
Testability,"Threads an environment through the type parser to handle reference genomes. Currently we're just using the default, which looks at the global ReferenceGenome.references; this needs to be threaded through the type serialization logic before we can get rid of that.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6954:227,log,logic,227,https://hail.is,https://github.com/hail-is/hail/pull/6954,1,['log'],['logic']
Testability,"Three changes:. 1. I noticed the costs were all 0. I think this is due to `cores_mcpu INTO cores_mcpu` scoping issues in the attempt triggers, where the local variable was always zero. At least changing the local variable name immediately fixed the problem. 2. I wrote a test to verify the costs were non-zero and consistent with the reported timing for the succeeding job. It is hard to do on the cost string, so I included msec_mcpu in the batch/job status response to verify it. In trying to verify it, I noticed that timestamps in the attempts table were slightly truncated compared to start/end times in the status (JSON). This lead to rounding errors and slight disagreement. 3. Rather descend into the floating point rabbit hole of madness, I changed times everywhere to be stored as integers in milliseconds (like unix time, since the epoch). In the database, they are not BIGINT. Millisecond resolution seems fine for everything we're building. 4. (Bonus change!) Don't let timing for jobs be negative. This will require another reset.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7628:271,test,test,271,https://hail.is,https://github.com/hail-is/hail/pull/7628,1,['test'],['test']
Testability,"Three things:; 1. Jenkins build #116:. http://hail-ci.broadinstitute.org:8080/job/Hail%20-%20Test%20All%20Branches/116/. of master, revision 6d5fe392b32c7383370b2fc2ea259fb8cff2c1c6, failed several test cases, but I wasn't able to reproduce it on my laptop. Can we get more detailed logs, either by default or in another file, so we can debug build irreproducible build failures? Custom log4j properties for gradle might be a solution.; 1. I tried to rebuild #116 by clicking ""Rebuild"" on the left hand side menu. This resulted in build #119 . http://hail-ci.broadinstitute.org:8080/job/Hail%20-%20Test%20All%20Branches/119/. which is labeled ""rebuild of #116"", but it is a build of a different branch, origin/tp_dbnsfp_bug and a different revision. What's going on?; 1. When I noticed #116 failed, I wanted to find the last build of origin/master that succeeded. Is there a way to do that?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/335:198,test,test,198,https://hail.is,https://github.com/hail-is/hail/issues/335,2,"['log', 'test']","['logs', 'test']"
Testability,"Tim, like we discussed, thanks for the suggestion. No login for workshop users, we skip auth0 altogether. Not quite as safe, but probably not a big deal provided https, a long-enough password. . I also removed the image picker, because it's I think more implementation detail than workshop users need (and it's not particularly styled). and uses ibg2019. cc @danking @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5556:54,log,login,54,https://hail.is,https://github.com/hail-is/hail/pull/5556,1,['log'],['login']
Testability,"Timing on hardcall version of 1kg genomes (2535 samples, 96k variants in kernel, 15.3 million variants in assoc) is 6 minutes, using 344 cores on 1000 partitions (1m on kernel, 4m on assoc). In this run, I fixed delta at 1000.0 because I'm using a random phenotype that results in fit $delta$ being negligible (outside the search range, where linear regression becomes more appropriate). But the ""fitting delta"" step post eigen-decomposition is negligible (~ 1s). ```; gcloud dataproc clusters create cluster-jb --zone us-central1-f --master-machine-type n1-standard-16 --master-boot-disk-size 100 --num-workers 2 --num-preemptible-workers 20 --worker-machine-type n1-standard-16 --worker-boot-disk-size 100 --image-version 1.0 --project broad-ctsa. gcp-hail-lmm1 cluster-jb -l /home/jbloom/hail.log \; read -i gs://hail-1kg/ALL.1KG.qc.hardcalls.p1000.vds \; filtervariants expr --keep -c 'va.qc.callRate > .98 && va.qc.AF > 0.005' \; lmmreg \; -d 1000.0 \; -y sa.pheno \; -c sa.isFemale \; -k 'v.start % 100 == 0 && va.qc.AF > 0.02 && va.qc.AF < 0.98' \; showglobals \; -o gs://jbloom/lmmreg.1kg.globals.json \; exportvariants \; -c 'variant = v, pval = va.lmmreg.pval, beta = va.lmmreg.beta, sigmaG2 = va.lmmreg.sigmaG2, chi2 = va.lmmreg.chi2, nNotCalled = va.qc.nNotCalled, nHomRef = va.qc.nHomRef, nHet = va.qc.nHet, nHomVar = va.qc.nHomVar' \; -o gs://jbloom/lmmreg.1kg.tsv.bgz. merge time: 12.084s; hail: info: timing:; read: 55.305s; filtervariants expr: 162.868ms; lmmreg: 56.056s; showglobals: 693.315ms; exportvariants: 4m10.4s; total: 6m2.6s; ```. Timing on 2000 partitions, pre-filtered, 680 cores is 3m42s.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1064:796,log,log,796,https://hail.is,https://github.com/hail-is/hail/pull/1064,1,['log'],['log']
Testability,"Timings: https://gist.github.com/johnc1231/253aed65af131c2f67af2576c350d6a7. Basically the benchmark designed for this to fix got 3x better, and most other things didn't change. That's about what I expected.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10971:91,benchmark,benchmark,91,https://hail.is,https://github.com/hail-is/hail/pull/10971,1,['benchmark'],['benchmark']
Testability,To Do:; - Test migration speeds; - ~Fix the migration to fully populate batches_n_completed_states for older batches~ [not necessary],MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13086:10,Test,Test,10,https://hail.is,https://github.com/hail-is/hail/pull/13086,1,['Test'],['Test']
Testability,"To be clear, the bug was that if the rdd of IndexedRows backing the IndexedRowMatrix omitted some rows (as a way of indicating that they contained only 0's), that omitted row would not get written to TSV file. This has been corrected, and a test was created for it by making the test data in the Suite more interesting and adding an assertion.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1679:241,test,test,241,https://hail.is,https://github.com/hail-is/hail/pull/1679,3,"['assert', 'test']","['assertion', 'test']"
Testability,To be dropped in both header and data logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6232:38,log,logic,38,https://hail.is,https://github.com/hail-is/hail/issues/6232,1,['log'],['logic']
Testability,"To come next:; * Expose in Python, add more tests of Python functionality",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9089:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/9089,1,['test'],['tests']
Testability,"To enable easy testing, I also parameterized the methods by the branchingFactor and broke generation of the byte array away from writing the byte array to a file. The key issue is that `k * 1024 % 1024 = 0` for any integer `k`, which we were interpreting as meaning that the last block needed 1024 more elements to be full. There are no errors on write. On read, we try to calculate the number of layers present in the BGEN using `calcDepth` but this fails to correctly guess the layers when the size of the file is not a positive integral power of 1024. The only real changes (the rest are restructuring/whitespace) are using `branchingFactor` in place of `1024` and replacing; ```; - // Pad last layer so last block is 1024 elements (1024*8 bytes); - val paddingRequired = 1024 - (arr.length % 1024); ```; with; ```; + // Pad last layer so last block is branchingFactor elements (branchingFactor*8 bytes); + val danglingElements = (arr.length % branchingFactor); + val paddingRequired =; + if (danglingElements == 0) 0; + else branchingFactor - danglingElements; ```. cc: @jigold one of the PRs you asked me to break out.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3750:15,test,testing,15,https://hail.is,https://github.com/hail-is/hail/pull/3750,1,['test'],['testing']
Testability,To make uber jar: `mvn assembly:single`. `compile` automatically runs `make` for the NativeLib stuff.; `clean` automatically runs `make clean` for NativeLib; Not sure if I needed to incorporate `nativeLibTest` or `nativeLibPrebuilt`. Added two test configurations. One is for all tests and the other is for the set of tests with HAIL_ENABLE_CPP_CODEGEN=1. I double checked the Python tests pass with the uber jar. The test output doesn't have the nice formatting that we have in Gradle. Would be some work with listeners and reporters to do that: http://maven.apache.org/surefire/maven-surefire-plugin/examples/testng.html#. There also isn't the `check` input and some other bells and whistles we have in Gradle. I had to add `com.google.inject:guice` to get rid of some compile warnings with the test-jar. Let me know if there's other things to add/enable or if this is good enough for ci2. We should probably add some CI tests for this in a makefile somewhere.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5906:244,test,test,244,https://hail.is,https://github.com/hail-is/hail/pull/5906,8,['test'],"['test', 'test-jar', 'testng', 'tests']"
Testability,"To replicate:. - create a PR; - open some started by incomplete job from the PR build; - refresh repeatedly; - just as the job is finished, you'll receive a 500 ISE; - your next refresh will probably hang; - your next refresh will probably show you a page with None as the log for Input and Main (instead of the expected empty string and full log) and None for Output; - finally, your next refresh will contain the complete job log.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7548:273,log,log,273,https://hail.is,https://github.com/hail-is/hail/issues/7548,3,['log'],['log']
Testability,"To report a bug, fill in the information below. . hail-0.2.70-4fcd186e31da; -----------------------------------------------------------------------------. After uploading vcfs, merging to mt, qcing and exporting back to vcf, the header was missing the filled out Description field for the FORMAT and INFO header lines. . Originally this.....; ```; ##FORMAT=<ID=AD,Number=R,Type=Integer,Description=""Allelic depths for the ref and alt alleles in the order listed"">; ##FORMAT=<ID=DP,Number=1,Type=Integer,Description=""Approximate read depth (reads with MQ=255 or with bad mates are filtered)"">; ##FORMAT=<ID=GQ,Number=1,Type=Integer,Description=""Genotype Quality"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; ##FORMAT=<ID=MIN_DP,Number=1,Type=Integer,Description=""Minimum DP observed within the GVCF block"">; ##FORMAT=<ID=PL,Number=G,Type=Integer,Description=""Normalized, Phred-scaled likelihoods for genotypes as defined in the VCF specification"">; ##FORMAT=<ID=PS,Number=1,Type=Integer,Description=""Phasing set (typically the position of the first variant in the set)"">; ##FORMAT=<ID=RGQ,Number=1,Type=Integer,Description=""Unconditional reference genotype confidence, encoded as a phred quality -10*log10 p(genotype call is wrong)"">; ##FORMAT=<ID=SB,Number=4,Type=Integer,Description=""Per-sample component statistics which comprise the Fisher's Exact Test to detect strand bias."">; ```. head header.norm.qc.txt. ```; ##hailversion=0.2.70-4fcd186e31da; ##FORMAT=<ID=AD,Number=.,Type=Integer,Description="""">; ##FORMAT=<ID=DP,Number=1,Type=Integer,Description="""">; ##FORMAT=<ID=GQ,Number=1,Type=Integer,Description="""">; ##FORMAT=<ID=GT,Number=1,Type=String,Description="""">; ##FORMAT=<ID=MIN_DP,Number=1,Type=Integer,Description="""">; ##FORMAT=<ID=PL,Number=.,Type=Integer,Description="""">; ##FORMAT=<ID=PS,Number=1,Type=Integer,Description="""">; ##FORMAT=<ID=RGQ,Number=1,Type=Integer,Description="""">. ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11093:1370,Test,Test,1370,https://hail.is,https://github.com/hail-is/hail/issues/11093,1,['Test'],['Test']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: ; https://discuss.hail.is/. Please include the full Hail version and as much detail as possible. -----------------------------------------------------------------------------. Hi,. Likely a typo the change log in the docs shows version # as 0.2.99",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12135:323,log,log,323,https://hail.is,https://github.com/hail-is/hail/issues/12135,1,['log'],['log']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: ; https://discuss.hail.is/. Please include the full Hail version and as much detail as possible. -----------------------------------------------------------------------------. Package Info:; Name: hail; Version: 0.2.93; Summary: Scalable library for exploring and analyzing genomic data.; Home-page: https://hail.is; Author: Hail Team; Author-email: hail@broadinstitute.org; License: UNKNOWN; Location: /Users/jacobbayer/opt/anaconda3/lib/python3.8/site-packages; Requires: dill, bokeh, scipy, azure-storage-blob, janus, parsimonious, botocore, google-cloud-storage, tabulate, Jinja2, python-json-logger, plotly, avro, azure-identity, PyJWT, orjson, tqdm, aiohttp-session, google-auth, nest-asyncio, uvloop, humanize, hurry.filesize, decorator, requests, Deprecated, aiohttp, asyncinit, numpy, pyspark, sortedcontainers, boto3, pandas. -----------------------------------------------------------------------------. Importing hail via the IPython console in Spyder causes the following error:. Python 3.8.12 (default, Oct 12 2021, 06:23:56) ; IPython 8.2.0 -- An enhanced Interactive Python. In [1]: `import hail`. > [SpyderKernelApp] ERROR | Exception in message handler:; > Traceback (most recent call last):; > File ""/Users/jacobbayer/opt/anaconda3/lib/python3.8/site-packages/spyder_kernels/comms/frontendcomm.py"", line 164, in poll_one; > asyncio.run(handler(out_stream, ident, msg)); > File ""/Users/jacobbayer/opt/anaconda3/lib/python3.8/site-packages/nest_asyncio.py"", line 36, in run; > task = asyncio.ensure_future(main); > File ""/Users/jacobbayer/opt/anaconda3/lib/python3.8/asyncio/tasks.py"", line 684, in ensure_future; > raise TypeError('An asyncio.Future, a coroutine or an awaitable is '; > TypeError: An asyncio.Future, a coroutine or an awaitable is required; > [SpyderKernelApp] ERROR | Exception in message handler:; > Traceback (most recent call last):; > File ""/Us",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11758:714,log,logger,714,https://hail.is,https://github.com/hail-is/hail/issues/11758,1,['log'],['logger']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: ; https://discuss.hail.is/. Please include the full Hail version and as much detail as possible. -----------------------------------------------------------------------------; Versions of software products:. Running on Apache Spark version 2.4.5; SparkUI available at http://vhabosgen72:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2.61-3c86d3ba497a; LOGGING: writing to /dacs1/team/vhabhsxum/tasks/ancestryPainting/hail-20210125-1235-0.2.61-3c86d3ba497a.log. I am running the GWAS tutorial hosted at https://hail.is/docs/0.2/tutorials/01-genome-wide-association-study.html#Let's-do-a-GWAS. Everything is OK until the line to do GWAS. The error I have is as follows:. -------------- start of error ------------------; 2021-01-25 12:36:11 Hail: INFO: linear_regression_rows: running on 250 samples for 1 response variable y,; with input variable x, and 1 additional covariate...; ERROR:root:Exception while sending command.; Traceback (most recent call last):; File ""/fnas/tools/anaconda3/envs/R_361/lib/python3.6/site-packages/py4j/java_gateway.py"", line 1159, in send_command; raise Py4JNetworkError(""Answer from Java side is empty""); py4j.protocol.Py4JNetworkError: Answer from Java side is empty. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/fnas/tools/anaconda3/envs/R_361/lib/python3.6/site-packages/py4j/java_gateway.py"", line 985, in send_command; response = connection.send_command(command); File ""/fnas/tools/anaconda3/envs/R_361/lib/python3.6/site-packages/py4j/java_gateway.py"", line 1164, in send_command; ""Error while receiving"", e, proto.ERROR_ON_RECEIVE); py4j.protocol.Py4JNetworkError: Error while receiving; ERROR:py4j.java_gateway:An error occurred while trying to connect to the Java server (127.0.0.1:44859); Traceback (most recent call last):; File ",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/9939:514,LOG,LOGGING,514,https://hail.is,https://github.com/hail-is/hail/issues/9939,2,"['LOG', 'log']","['LOGGING', 'log']"
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version: 0.2. ### What you did:; ```python; from gnomad_hail import *. logging.basicConfig(format=""%(levelname)s (%(name)s %(lineno)s): %(message)s""); logger = logging.getLogger(""variant_histograms""); logger.setLevel(logging.INFO). def release_ht_path(data_type: str, nested = True, with_subsets = True, temp = False):; tag = 'nested_release' if nested else 'flat_release'; tag = tag + '.with_subsets' if with_subsets else tag + '.no_subsets'; tag = tag + '.temp' if temp else tag; return f'gs://gnomad/release/2.1/ht/gnomad.{data_type}.{tag}.ht'. def main(args):; hl.init(log='/variant_histograms.log'); data_type = 'genomes' if args.genomes else 'exomes'. metrics = ['FS', 'InbreedingCoeff', 'MQ', 'MQRankSum', 'QD', 'ReadPosRankSum', 'SOR', 'BaseQRankSum',; 'ClippingRankSum', 'DP', 'VQSLOD', 'rf_tp_probability', 'pab_max']. ht = hl.read_table(release_ht_path(data_type, nested=False)); # NOTE: histogram aggregations are done on the entire callset (not just PASS variants), on raw data. # Compute median and MAD on variant metrics; medmad_dict = {}; for metric in metrics:; medmad_dict[metric] = hl.struct(median=hl.median(hl.agg.collect(ht[metric])), mad=4*1.48268*hl.median(hl.abs(hl.agg.collect(ht[metric])-hl.median(hl.agg.collect(ht[metric]))))); medmad = ht.aggregate(hl.struct(**medmad_dict)); print(medmad); print(hl.eval_expr(hl.json(medmad))); ```. ### What went wrong (all error messages here, including the full java stack trace):; ```; [Stage 0:==================================================>(9853 + 93) / 10000]#; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007fbeaec3ca22, pid=6662, tid=0x00007fbe3dd81700; #; # JRE version: OpenJDK Runtime Environment (8.0_181-b13) (build 1.8.0_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4418:315,log,logging,315,https://hail.is,https://github.com/hail-is/hail/issues/4418,7,['log'],"['log', 'logger', 'logging']"
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version: 0.2.10-91149b50a53c. ### What you did:. ```; qc_ht = qc_mt.annotate_cols(; dp_stats=hl.agg.group_by(qc_mt.qc_platform, hl.agg.stats(qc_mt.DP)),; gq_stats=hl.agg.group_by(qc_mt.qc_platform, hl.agg.stats(qc_mt.GQ)),; callstats=hl.agg.group_by(qc_mt.qc_platform, hl.agg.call_stats(qc_mt.GT, qc_mt.alleles)),; call_rate=hl.agg.group_by(qc_mt.qc_platform, hl.agg.fraction(hl.is_defined(qc_mt.GQ))); ).rows(); ```. ### What went wrong (all error messages here, including the full java stack trace):. So I was distracted and used `annotate_rows` instead of `annotate_cols` and I got what seems to be an 0.1 error message:. ```; ---------------------------------------------------------------------------; AssertionError Traceback (most recent call last); <ipython-input-44-7491b514f674> in <module>; 3 gq_stats=hl.agg.group_by(qc_mt.qc_platform, hl.agg.stats(qc_mt.GQ)),; 4 callstats=hl.agg.group_by(qc_mt.qc_platform, hl.agg.call_stats(qc_mt.GT, qc_mt.alleles)),; ----> 5 call_rate=hl.agg.group_by(qc_mt.qc_platform, hl.agg.fraction(hl.is_defined(qc_mt.GQ))); 6 ).rows(); 7 # qc_ht = qc_ht.key_by('locus','alleles'). </opt/conda/lib/python3.6/site-packages/decorator.py:decorator-gen-976> in annotate_cols(self, **named_exprs). /home/hail/hail.zip/hail/typecheck/check.py in wrapper(__original_func, *args, **kwargs); 559 def wrapper(__original_func, *args, **kwargs):; 560 args_, kwargs_ = check_all(__original_func, args, kwargs, checkers, is_method=is_method); --> 561 return __original_func(*args_, **kwargs_); 562 ; 563 return wrapper. /home/hail/hail.zip/hail/matrixtable.py in annotate_cols(self, **named_exprs); 995 caller = ""MatrixTable.annotate_cols""; 996 check_annotate_exprs(caller, named_exprs, self._col_indices); --> 997 return self._selec",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5415:951,Assert,AssertionError,951,https://hail.is,https://github.com/hail-is/hail/issues/5415,1,['Assert'],['AssertionError']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version: 0.2.11. ### What you did: ./gradlew -Dspark.version=2.2.1 -Dspark.version=2.2.1 -Dpy4j.version=0.10.4 -Dbreeze.version=0.13.1 shadowJar. ### What went wrong (all error messages here, including the full java stack trace):; :compileJava UP-TO-DATE; :generateBuildInfo; :nativeLib; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux testutils/unit-tests.cpp -MG -M -MF build/testutils/unit-tests.d -MT build/testutils/unit-tests.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux test.cpp -MG -M -MF build/test.d -MT build/test.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux ibs.cpp -MG -M -MF build/ibs.d -MT build/ibs.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux davies.cpp -MG -M -MF build/davies.d -MT build/davies.o; g++ -march=sandybridge -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Werror -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/usr/lib/jvm/java-8-openjdk-amd64/include -I/usr/lib/jvm/java-8-openjdk-amd64/include/linux cache-tests.cpp -MG -M -MF build/cache-tests.d -MT build/cache-tests.o; g++ -march=s",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5659:758,test,testutils,758,https://hail.is,https://github.com/hail-is/hail/issues/5659,6,['test'],"['tests', 'testutils']"
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version: ; version 0.2-721af83bc30a. ### What you did: ; Import UK Biobank bgen chr10. import hail as hl; import sys; hl.init(); chr=sys.argv[1]; bgen=""/project/ukbiobank/imp/uk.v3/bgen/ukb_imp_chr""+chr+""_v3.bgen""; sample=""/project/ukbiobank/imp/uk.v3/bgen/ukb19416_imp_chr""+chr+""_v3_s487327.sample""; mt=""/project/ukbiobank/imp/uk.v3/mt/ukbb_imp_chr""+chr+""_v3_s487327.mt""; hl.index_bgen(bgen); hl.import_bgen(bgen,sample_file=sample,entry_fields=['GT', 'GP','dosage']).write(mt). ### What went wrong (all error messages here, including the full java stack trace):; ```; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version 0.2-721af83bc30a; LOGGING: writing to /restricted/projectnb/ukbiobank/ad/analysis/ad.v1/hail-20181114-1827-0.2-721af83bc30a.log; Exception in thread ""dispatcher-event-loop-8"" Exception in thread ""refresh progress"" java.lang.OutOfMemoryError: GC overhead limit exceeded; at java.util.zip.ZipCoder.getBytes(ZipCoder.java:80); at java.util.zip.ZipFile.getEntry(ZipFile.java:310); at java.util.jar.JarFile.getEntry(JarFile.java:240); at java.util.jar.JarFile.getJarEntry(JarFile.java:223); at sun.misc.URLClassPath$JarLoader.getResource(URLClassPath.java:1042); at sun.misc.URLClassPath.getResource(URLClassPath.java:239); at java.net.URLClassLoader$1.run(URLClassLoader.java:365); at java.net.URLClassLoader$1.run(URLClassLoader.java:362); at java.security.AccessController.doPrivileged(Native Method); at java.net.URLClassLoader.findClass(URLClassLoader.java:361); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at org.apache.spark.HeartbeatReceiver$$anonfun$org$apache$s",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4780:915,LOG,LOGGING,915,https://hail.is,https://github.com/hail-is/hail/issues/4780,1,['LOG'],['LOGGING']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version: devel-63d60cc. ### What you did:. Tried to run ld_prune and pc_relate on 5000 WGS samples. ```; spark-submit --verbose --master yarn --deploy-mode client \; --num-executors 14 \; --executor-cores 6 \; --jars $JAR \; --conf spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator \; --conf ""spark.driver.extraClassPath=$JAR"" \; --conf ""spark.executor.extraClassPath=$JAR"" \; --executor-memory 90G\; --driver-memory 80g\; --conf spark.yarn.executor.memoryOverhead=8000 \; --conf spark.network.timeout=600 \; --conf spark.executor.heartbeatInterval=120\; hc_prune.py; ```. Where hc_prune.py is:. ```; import matplotlib.pyplot as plt; import seaborn. import numpy as np; import pandas as pd; from collections import Counter; from math import log, isnan; from pprint import pprint; # hail; import hail as hl; import hail.expr.aggregators as agg; import hail.expr.functions. hl.init(default_reference='GRCh38'); print(""Read in PASS SNVs""); passed=hl.read_matrix_table('/project/casa/hail.ds/gatk.hc/gcad.5k.snv.vqsr.pass'); print(""Filtering Common Variants""); common=passed.filter_rows(passed.variant_qc.AF > 0.01).persist(); common.write('/project/casa/hail.ds/gatk.hc/gcad.5k.snv.vqsr.pass.common'); print(""Pruning LD Variants""); pruned =hl.ld_prune(common,30,r2=0.1, memory_per_core=2048); pruned.write('/project/casa/hail.ds/gatk.hc/gcad.5k.snv.vqsr.pruned'); print(""Sample 20% of variants for running PC-Relate""); pruned_subsample = pruned.sample_rows(0.2).persist(); print(""Running PC_Relate""); rel = hl.pc_relate(pruned_subsample.GT, 0.01, k=10); rel_df = rel.to_pandas(); rel_df.describe(); pprint(rel_df); rel_df.to_csv('gcad_5k.snv.rel.csv'); ```. ### What went wrong (all error messages here, including the full java stack trace):. Got a memor",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3463:991,log,log,991,https://hail.is,https://github.com/hail-is/hail/issues/3463,1,['log'],['log']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version: devel-abac611 using Apache Spark version 2.2.0. ### What you did:; Tried converting joint genotyped Delly vcf file to vdf file. ```; import hail as hl; hl.init(default_reference='GRCh38'); hl.import_vcf('/project/casa/vcf.5k/delly/gcad.sv.delly.5k.vcf.bgz').write('/project/casa/vdf.5k/delly'); ```. ### What went wrong (all error messages here, including the full java stack trace):. Error reading a GL field. ; ##FORMAT=<ID=GL,Number=G,Type=Float,Description=""Log10-scaled genotype likelihoods for RR,RA,AA genotypes"">. where the entry was:; 0/1:-66.2667,0,-25.4754:10000:PASS:5639:13071:8160:2:0:0:13:27. Here are the log and error messages... ```; [Stage 1:======================================================>(415 + 1) / 416]2018-04-12 07:57:52 Hail: INFO: Coerced almost-sorted dataset; [Stage 2:> (0 + 36) / 416]Traceback (most recent call last):; File ""/restricted/projectnb/genpro/github/hail/delly_vcf2vdf.py"", line 3, in <module>; hl.import_vcf('/project/casa/vcf.5k/delly/gcad.sv.delly.5k.vcf.bgz').write('/project/casa/vdf.5k/delly'); File ""<decorator-gen-546>"", line 2, in write; File ""/restricted/projectnb/genpro/github/hail/build/distributions/hail-python.zip/hail/typecheck/check.py"", line 481, in _typecheck; File ""/restricted/projectnb/genpro/github/hail/build/distributions/hail-python.zip/hail/matrixtable.py"", line 1956, in write; File ""/share/pkg/spark/2.2.0/install/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/restricted/projectnb/genpro/github/hail/build/distributions/hail-python.zip/hail/utils/java.py"", line 196, in deco; hail.utils.java.FatalError: NumberFormatException: For input string: ""-66.2667,0,-25.4754"". Java stack trace:; org.apache.spark.SparkException: Job aborte",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3361:874,log,log,874,https://hail.is,https://github.com/hail-is/hail/issues/3361,1,['log'],['log']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version: master build . ### What you did:; Ran python script ; [root@]cat hail/Hail_Tutorial.py; **from hail import * ; hc = HailContext()** ; import numpy as np ; import pandas as pd ; import matplotlib.pyplot as plt ; import matplotlib.patches as mpatches ; from collections import Counter ; from math import log, isnan ; from pprint import pprint ; import seaborn ; vds = hc.read('/gpfs/hail/test_hail_qnsnodes_2500c_spark2_20170515.vds') ; vds.summarize().report() ; vds.query_variants('variants.take(5)'); vds.query_samples('samples.take(5)'); vds.sample_ids[:5]; vds.query_genotypes('gs.take(5)'); #%%sh; #head data/1kg_annotations.txt | column -t; table = hc.import_table('data/1kg_annotations.txt', impute=True)\; .key_by('Sample'); print(table.schema); pprint(table.schema); table.to_dataframe().show(10); vds = vds.annotate_samples_table(table, root='sa'); pprint(vds.sample_schema); pprint(table.query('SuperPopulation.counter()')); pprint(table.query('CaffeineConsumption.stats()')); table.count(); vds.num_samples; vds.query_samples('samples.map(s => sa.SuperPopulation).counter()'); table.count(); vds.num_samples. #common_vds = (vds; # .filter_variants_expr('va.qc.AF > 0.01'); # .ld_prune(memory_per_core=256, num_cores=4)); pca = vds.pca('sa.pca', k=5, eigenvalues='global.eigen'); pprint(pca.globals). #vds = vds.filter_samples_expr('sa.qc.dpMean >= 4 && sa.qc.callRate >= 0.97'); #print('After filter, %d/1000 samples remain.' % vds.num_samples). df = vds.samples_table().to_pandas(); df.head(). ### What went wrong (all error messages here, including the full java stack trace):. **File ""/hail/Hail_Tutorial.py"", line 2, in <module>; hc = HailContext() ; NameError: name 'HailContext' is not defined; + /software/spark/spark-2.2.0-bin-ha",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3102:555,log,log,555,https://hail.is,https://github.com/hail-is/hail/issues/3102,1,['log'],['log']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version:; 0.2-48fb15983780. ### What you did:; Plotting a histogram of mt.sample_qc.r_ti_tv, using tutorial data:. import hail as hl; import bokeh. hl.init(); mt = hl.read_matrix_table('data/1kg.mt'); mt = hl.sample_qc(mt); p = hl.plot.histogram(mt.sample_qc.r_ti_tv); bokeh.io.save(p, 'test.html'). ### What went wrong (all error messages here, including the full java stack trace):. The resulting histogram has very high numbers for Frequency labels (y-axis). There are 284 samples in the tutorial dataset, so I expected frequencies to sum up to that, but y-axis labels are 5.000e+4, 1.000e+5, 1.500e+5, implying much higher counts. . I'm new to Hail and I could be plotting the values wrong and misunderstanding this particular plot (what I wanted to plot was the histogram of Ti/Tv ratios of all the samples). I've noticed the same y-axis labels in the GWAS tutorial in the docs (In [29]). . Thank you for your time.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4776:531,test,test,531,https://hail.is,https://github.com/hail-is/hail/issues/4776,1,['test'],['test']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version:; Hail version: devel-eb1e04205793. ### What you did:. Attempt to `export_vcf` with a MT where some `locus` values are `NA`. ### What went wrong (all error messages here, including the full java stack trace):. Bad error message. Didn't really tell me anything except Java Assertion Error. [Stage 2:===========================================> (1709 + 291) / 2000]Traceback (most recent call last):; File ""/tmp/0eccddcf-0d49-4280-8b79-c43e193b044d/vdstovcf.py"", line 12, in <module>; hail.export_vcf(myvds, 'gs://ibd-exomes/v34meta/exomes.ccdg.vcf.bgz'); File ""/home/hail/hail.zip/hail/typecheck/check.py"", line 547, in wrapper; File ""/home/hail/hail.zip/hail/methods/impex.py"", line 422, in export_vcf; File ""/usr/lib/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/home/hail/hail.zip/hail/utils/java.py"", line 196, in deco; hail.utils.java.FatalError: AssertionError: assertion failed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4011:524,Assert,Assertion,524,https://hail.is,https://github.com/hail-is/hail/issues/4011,3,"['Assert', 'assert']","['Assertion', 'AssertionError', 'assertion']"
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version:; devel-92bbe4b. ### What you did:; I used `join` to combine two VDS. Empty sample schema, different variant schema, no overlapping samples, hardcalls. ### What went wrong (all error messages here, including the full java stack trace):; Got an AssertionError:; ```; org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 5.0 failed 20 times, most recent failure: Lost task 0.19 in stage 5.0 (TID 677, mycluster3-w-1.c.ccdg-wgs.internal): java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.annotations.Region.loadInt(Region.scala:36); at is.hail.expr.types.TContainer$.loadLength(TContainer.scala:9); at is.hail.expr.types.TContainer.loadLength(TContainer.scala:27); at is.hail.variant.MatrixTable$$anonfun$105$$anonfun$apply$58.apply(MatrixTable.scala:1702); at is.hail.variant.MatrixTable$$anonfun$105$$anonfun$apply$58.apply(MatrixTable.scala:1685); at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); at is.hail.rvd.OrderedRVD$$anonfun$apply$9$$anon$5.next(OrderedRVD.scala:661); at is.hail.rvd.OrderedRVD$$anonfun$apply$9$$anon$5.next(OrderedRVD.scala:655); ```. I can make it work by copying the variant annotation from one VDS to the other before calling `join`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2763:496,Assert,AssertionError,496,https://hail.is,https://github.com/hail-is/hail/issues/2763,4,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version:; hail: `hail-devel-c8ca698`; ### What you did:; ```; hl.init(); ds = hl.import_plink('gs://testdata/1kg_phase1_chr22.bed',; 'gs://testdata/1kg_phase1_chr22.bim',; 'gs://testdata/1kg_phase1_chr22.fam'); ds = hl.sample_qc(ds); ```; Data was downloaded from [here](https://www.cog-genomics.org/plink/1.9/resources).; ; ### What went wrong (all error messages here, including the full java stack trace):; Spark jobs fail at `treeReduce at SampleQC.scala:206`.; Java Error: `java.lang.NegativeArraySizeException`. Full stack:; See file attached.; [error_message.txt](https://github.com/hail-is/hail/files/2003301/error_message.txt)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3585:344,test,testdata,344,https://hail.is,https://github.com/hail-is/hail/issues/3585,3,['test'],['testdata']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version:; version 0.2.4-f1e6526d34b1. ### What you did:; cd hail/hail. ./gradlew -Dspark.version=2.2.1 -Dbreeze.version=0.13.1 -Dpy4j.version=0.10.4 shadowJar archiveZip. ### What went wrong (all error messages here, including the full java stack trace):; In file included from Decoder.cpp:3:0:; ../resources/include/hail/Decoder.h:3:10: fatal error: lz4.h: No such file or directory; #include ""lz4.h""; ^~~~~~~; compilation terminated.; make: *** [build/Decoder.o] Error 1; :nativeLib FAILED. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':nativeLib'.; > Process 'command 'make'' finished with non-zero exit value 2. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 36.47 secs",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4880:1010,log,log,1010,https://hail.is,https://github.com/hail-is/hail/issues/4880,1,['log'],['log']
Testability,"To report a bug, fill in the information below. ; For support and feature requests, please use the discussion forum: http://discuss.hail.is/. -------------------------------------------------------------------------------------------. ### Hail version:devel-abac611. ### What you did: spark-submit --jars build/libs/hail-all-spark.jar --conf spark.kryo.registrator=is.hail.kryo.HailKryoRegistrator --py-files build/distributions/hail-python.zip --num-executors 6 test.py; where test.y is:; import hail as hl; hl.init(master='yarn',default_reference='GRCh38'); hl.import_vcf('/project/casa/vcf.5k/gatk.hc/adsp-5k.hg38.tileDB.recalibrate_SNP.chr22.biallelic.4795samples.g.vcf.bgz').write('/project/casa/vdf.5k/test.vdf'). ### What went wrong (all error messages here, including the full java stack trace):; Error summary: ClassNotFoundException: is.hail.utils.SerializableHadoopConfiguration; Running on Apache Spark version 2.2.0; SparkUI available at http://10.48.225.55:4040; Welcome to; __ __ <>__; / /_/ /__ __/ /; / __ / _ `/ / /; /_/ /_/\_,_/_/_/ version devel-abac611; NOTE: This is a beta version. Interfaces may change; during the beta period. We also recommend pulling; the latest changes weekly.; [Stage 1:======================================================>(243 + 1) / 244]2018-04-10 09:30:24 Hail: INFO: Coerced sorted dataset; Traceback (most recent call last):; File ""/restricted/projectnb/genpro/github/hail/test.py"", line 3, in <module>; hl.import_vcf('/project/casa/vcf.5k/gatk.hc/adsp-5k.hg38.tileDB.recalibrate_SNP.chr22.biallelic.4795samples.g.vcf.bgz').write('/project/casa/vdf.5k/test. vdf'); File ""<decorator-gen-546>"", line 2, in write; File ""/restricted/projectnb/genpro/github/hail/build/distributions/hail-python.zip/hail/typecheck/check.py"", line 481, in _typecheck; File ""/restricted/projectnb/genpro/github/hail/build/distributions/hail-python.zip/hail/matrixtable.py"", line 1956, in write; File ""/share/pkg/spark/2.2.0/install/python/lib/py4j-0.10.4-src.zip/py4j/java",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3342:463,test,test,463,https://hail.is,https://github.com/hail-is/hail/issues/3342,3,['test'],['test']
Testability,"To run benchmarks, you'll need to grant your batch service account permissions:. 1. grab service account name from https://auth.hail.is/user. Then:; ```; export BATCH_SERVICE_ACCOUNT=""...""; gsutil iam ch serviceAccount:${BATCH_SERVICE_ACCOUNT}:objectAdmin gs://hail-benchmarks-2; gsutil iam ch serviceAccount:${BATCH_SERVICE_ACCOUNT}:objectViewer gs://artifacts.broad-ctsa.appspot.com; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9239:7,benchmark,benchmarks,7,https://hail.is,https://github.com/hail-is/hail/pull/9239,2,['benchmark'],"['benchmarks', 'benchmarks-']"
Testability,"To test, for example, catching and reporting SparkException inside Main.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/344:3,test,test,3,https://hail.is,https://github.com/hail-is/hail/issues/344,1,['test'],['test']
Testability,ToDict bugfix/test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3638:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/3638,1,['test'],['test']
Testability,Todo: tests for `--pyfiles`.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9082:6,test,tests,6,https://hail.is,https://github.com/hail-is/hail/pull/9082,1,['test'],['tests']
Testability,Took 3 minutes on the test database and no locking occurred...,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12208:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/12208,1,['test'],['test']
Testability,"Travis test processes sometimes die with a gradle exit code 137, internet research suggests that this is because Travis is issuing a SIGKILL to the process for using too many resources. No clear fix.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/118:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/issues/118,1,['test'],['test']
Testability,Treat them analogously to ref. I think there's potential for an assertion failure now.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/539:64,assert,assertion,64,https://hail.is,https://github.com/hail-is/hail/issues/539,1,['assert'],['assertion']
Testability,"Tried running ; `hail read -i file:///mnt/lustre/bavila/denovo/myrioux3.vep.vds exportvcf -o file:///mnt/lustre/bavila/denovo/myrioux3.vep.vcf`. got the following; ```; hail: info: running: read -i file:///mnt/lustre/bavila/denovo/myrioux3.vep.vds; [Stage 1:======================================================>(255 + 1) / 256]hail: info: running: exportvcf -o file:///mnt/lustre/bavila/denovo/myrioux3.vep.vcf; [Stage 2:=====> (2117 + 256) / 19042]hail: exportvcf: caught exception: org.apache.spark.SparkException: Job aborted due to stage failure: Task 2137 in stage 2.0 failed 4 times, most recent failure: Lost task 2137.3 in stage 2.0 (TID 3028, nid00013.urika.com): java.lang.IllegalArgumentException: Self-suppression not permitted; 	at java.lang.Throwable.addSuppressed(Throwable.java:1043); 	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1219); 	at org.apache.spark.rdd.PairRDDFunctions$$anonfun$saveAsHadoopDataset$1$$anonfun$13.apply(PairRDDFunctions.scala:1116); 	at org.apache.spark.rdd.PairRDDFunctions$$anonfun$saveAsHadoopDataset$1$$anonfun$13.apply(PairRDDFunctions.scala:1095); 	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:66); 	at org.apache.spark.scheduler.Task.run(Task.scala:88); 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:214); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); 	at java.lang.Thread.run(Thread.java:745); ```. Full error and log below:. [error.txt](https://github.com/hail-is/hail/files/652656/error.txt); [hail.log.txt](https://github.com/hail-is/hail/files/652665/hail.log.txt)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1185:1552,log,log,1552,https://hail.is,https://github.com/hail-is/hail/issues/1185,3,['log'],['log']
Testability,"Trigger with `Table.range(1).annotate(x=[1, 1.0])`; ```; Java stack trace:; java.lang.AssertionError: assertion failed: at position 1 type mismatch: Int32 Float64; 	at scala.Predef$.assert(Predef.scala:170); 	at is.hail.expr.ir.Infer$$anonfun$apply$4.apply(Infer.scala:59); 	at is.hail.expr.ir.Infer$$anonfun$apply$4.apply(Infer.scala:59); 	at scala.collection.Iterator$class.foreach(Iterator.scala:893); 	at scala.collection.AbstractIterator.foreach(Iterator.scala:1336); 	at scala.collection.IterableLike$class.foreach(IterableLike.scala:72); 	at scala.collection.AbstractIterable.foreach(Iterable.scala:54); 	at is.hail.expr.ir.Infer$.apply(Infer.scala:59); 	at is.hail.expr.ir.Infer$.is$hail$expr$ir$Infer$$infer$1(Infer.scala:9); 	at is.hail.expr.ir.Infer$$anonfun$apply$10.apply(Infer.scala:129); 	at is.hail.expr.ir.Infer$$anonfun$apply$10.apply(Infer.scala:129); 	at scala.collection.Iterator$class.foreach(Iterator.scala:893); 	at scala.collection.AbstractIterator.foreach(Iterator.scala:1336); 	at scala.collection.IterableLike$class.foreach(IterableLike.scala:72); 	at scala.collection.AbstractIterable.foreach(Iterable.scala:54); 	at is.hail.expr.ir.Infer$.apply(Infer.scala:129); 	at is.hail.expr.TableAnnotate.<init>(Relational.scala:495); 	at is.hail.table.Table.annotate(Table.scala:502); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:497); 	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); 	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); 	at py4j.Gateway.invoke(Gateway.java:280); 	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); 	at py4j.commands.CallCommand.execute(CallCommand.java:79); 	at py4j.GatewayConnection.run(GatewayConnection.java:214); 	at java.lang.Thread.run(Thr",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/2905:86,Assert,AssertionError,86,https://hail.is,https://github.com/hail-is/hail/issues/2905,3,"['Assert', 'assert']","['AssertionError', 'assert', 'assertion']"
Testability,Trying to construct a genotype stream fails with assertion error,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/1976:49,assert,assertion,49,https://hail.is,https://github.com/hail-is/hail/issues/1976,1,['assert'],['assertion']
Testability,"Trying to make it more ergonomic to simply do `python3 -m pytest batch/test/test_batch.py::test_job` (now works without any extra environment variables or configuration). This involved the following changes:; - Deleted of some env vars that are no longer used / can be easily consolidated into existing ones; - Gave defaults to those testing env variables for which there are reasonable defaults. E.g. `DOCKER_ROOT_IMAGE` and `HAIL_GENETICS_HAIL_IMAGE`.; - Pushed other environment variables for which there are not reasonable defaults into the tests that need them. If you run a test that requires `HAIL_CLOUD`, you'll still get an error that that env variable is unset and you should set it. But, if you just want to run a single test that doesn't need `HAIL_CLOUD` it won't get in the way.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12862:71,test,test,71,https://hail.is,https://github.com/hail-is/hail/pull/12862,5,['test'],"['test', 'testing', 'tests']"
Testability,Trying to slowly add more reliability to the `hailctl` CLI. This adds some very basic tests for the `hailctl batch billing` subcommand that mocks the `BatchClient` so it's just testing that command line parsing and yaml dumping don't break. Most of the other noise in this PR is a refactor. I moved `hail/python/test/hailtop/hailctl/config/conftest.py` up a level so I could reuse its `CLIRunner` fixture across all `hailctl` test modules. That fixture sets a new config directory per test so if you use it in a test the test won't accidentally use or modify the user's actual hailctl config.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13490:86,test,tests,86,https://hail.is,https://github.com/hail-is/hail/pull/13490,8,"['mock', 'test']","['mocks', 'test', 'testing', 'tests']"
Testability,Turn logging back off in SparkSuite.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/650:5,log,logging,5,https://hail.is,https://github.com/hail-is/hail/pull/650,1,['log'],['logging']
Testability,"Turns out we didn't support `--dry-run` on `dataproc connect`. I'm not totally satisfied with this, as the command that gets printed out isn't runnable, because it will lack quotes around the `--ssh-flag=-D 1000` part. I tried adding the quotes into the command, thinking it would work but just be redundant, but I couldn't get it to work. I suppose I could have the printing logic go through the list and replace that bit with a quoted version. Let me know what you think.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7128:376,log,logic,376,https://hail.is,https://github.com/hail-is/hail/pull/7128,1,['log'],['logic']
Testability,"Tweak lmmreg docs, reduce logDelta interval to [-8, 8]",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1732:26,log,logDelta,26,https://hail.is,https://github.com/hail-is/hail/pull/1732,1,['log'],['logDelta']
Testability,"Typically, a CSRF attack can occur when `evil.com` tricks a user into requesting a state-changing URL at `batch.hail.is`. We use CSRF tokens to protect against such attacks, but there is an additional defense-in-depth cookie attribute that we can use called [SameSite](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute). The possible values for this attribute are:. - None => browser always sends this cookie in cross-site requests; - Strict => browser never sends this cookie in cross-site requests; - Lax => browser only sends this cookie in cross-site requests that use ""safe"" HTTP methods (GET, HEAD, OPTIONS). Both Lax and Strict protect against the most primitive forms of CSRF (a form on evil.com submitting a POST to batch.hail.is). Lax seems very reasonable, and still allows linking to, say, linking to jobs from Zulip's web app without the user needing to log in once they get there. Worth noting that this does not protect against [all forms of CSRF](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-02#section-5.3.7.1) attacks, so this does not replace CSRF tokens, just provides additional defense-in-depth.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13631:945,log,log,945,https://hail.is,https://github.com/hail-is/hail/pull/13631,1,['log'],['log']
Testability,Typo in documentation for HWE test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10745:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/issues/10745,1,['test'],['test']
Testability,Unchecked allocator test is supposed to only run a few marked tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11398:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/11398,2,['test'],"['test', 'tests']"
Testability,"Unclear what changed. GKE release history doesn't specify when Docker was upgraded to 19.03.1. We think Notebook worked in the past. Anyway, the fix is to never specify ""m"" (lowercase m) as the size modifier for a Kubernetes memory limit. Docker silently drops the ""m"" which means the limit is set to a few thousand bytes (e.g. 3500m becomes 3.5kB). The resulting error message is this:; ```; Failed create pod sandbox: rpc error: code = Unknown desc = failed to start sandbox container for pod ""notebook-worker-9l2wq"": Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused ""process_linux.go:303: getting the final child's pid from pipe caused \""read init-p: connection reset by peer\"""": unknown; ```; Which you can see in `kubectl describe pod`:; ```; Warning FailedCreatePodSandBox 73s (x13 over 85s) kubelet, gke-vdc-non-preemptible-pool-5-80798769-kp8n Failed create pod sandbox: rpc error: code = Unknown desc = failed to start sandbox container for pod ""notebook-worker-9l2wq"": Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused ""process_linux.go:303: getting the final child's pid from pipe caused \""read init-p: connection reset by peer\"""": unknown; Normal SandboxChanged 73s (x12 over 84s) kubelet, gke-vdc-non-preemptible-pool-5-80798769-kp8n Pod sandbox changed, it will be killed and re-created.; ```. We narrowed down to this error by trial and error of removing and adding lines of the YAML file. https://github.com/kubernetes/kubernetes/issues/79950. The fix is to use `Mi` not `m`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8165:411,sandbox,sandbox,411,https://hail.is,https://github.com/hail-is/hail/issues/8165,6,"['Sandbox', 'sandbox']","['SandboxChanged', 'sandbox']"
Testability,"Unclear what's wrong, but this k8s container got stuck in container creating. ```; (base) dking@wmb16-359 # k describe pods -n test job-4-7xqf9; Name: job-4-7xqf9; Namespace: test; Node: gke-vdc-non-preemptible-pool-0106a51b-zsmg/10.128.0.5; Start Time: Thu, 17 Jan 2019 16:31:42 -0500; Labels: app=batch-job; hail.is/batch-instance=21706daa42404f5489a53bb5ad22a068; uuid=b4fbcb0d4e2045e8bc4aea6b012ffad6; Annotations: <none>; Status: Pending; IP: ; Containers:; default:; Container ID: ; Image: alpine; Image ID: ; Port: <none>; Host Port: <none>; Command:; sleep; 1; State: Waiting; Reason: ContainerCreating; Ready: False; Restart Count: 0; Environment:; POD_IP: (v1:status.podIP); POD_NAME: job-4-7xqf9 (v1:metadata.name); Mounts:; /var/run/secrets/kubernetes.io/serviceaccount from default-token-85kwr (ro); Conditions:; Type Status; Initialized True ; Ready False ; PodScheduled True ; Volumes:; default-token-85kwr:; Type: Secret (a volume populated by a Secret); SecretName: default-token-85kwr; Optional: false; QoS Class: BestEffort; Node-Selectors: <none>; Tolerations: node.kubernetes.io/not-ready:NoExecute for 300s; node.kubernetes.io/unreachable:NoExecute for 300s; Events:; Type Reason Age From Message; ---- ------ ---- ---- -------; Normal SandboxChanged 11m (x171 over 1h) kubelet, gke-vdc-non-preemptible-pool-0106a51b-zsmg Pod sandbox changed, it will be killed and re-created.; Warning FailedSync 6m kubelet, gke-vdc-non-preemptible-pool-0106a51b-zsmg error determining status: rpc error: code = Unknown desc = Error: No such container: 741291eb67b9026c0fe4ac52d1f5a553ea420f07f5a7d7368c9dba93e707a079; Warning FailedCreatePodSandBox 1m (x203 over 1h) kubelet, gke-vdc-non-preemptible-pool-0106a51b-zsmg Failed create pod sandbox: rpc error: code = Unknown desc = NetworkPlugin kubenet failed to set up pod ""job-4-7xqf9_test"" network: Error adding container to network: failed to allocate for range 0: no IP addresses available in range set: 10.32.3.1-10.32.3.254; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5168:127,test,test,127,https://hail.is,https://github.com/hail-is/hail/issues/5168,5,"['Sandbox', 'sandbox', 'test']","['SandboxChanged', 'sandbox', 'test']"
Testability,Unfortunately this is hard to test in the current setup because the tests never get the root config file (which has no database set).,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7706:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/7706,2,['test'],"['test', 'tests']"
Testability,Uniroot is strict in min and max test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3776:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/3776,1,['test'],['test']
Testability,"Unsure if the test for this should go in python or scala, so I have both right now. I can delete one of them.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4118:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/4118,1,['test'],['test']
Testability,Unused since worker logs go into GCP logging now,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9778:20,log,logs,20,https://hail.is,https://github.com/hail-is/hail/pull/9778,2,['log'],"['logging', 'logs']"
Testability,Up to 569 tests passing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9319:10,test,tests,10,https://hail.is,https://github.com/hail-is/hail/pull/9319,1,['test'],['tests']
Testability,Update notebook scale test to reflect new location of workshop service (moved notebook.hail.is/workshop => workshop.hail.is). Just ran it with 10 notebooks against production and it worked fine.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7167:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/7167,1,['test'],['test']
Testability,Update test.cpp,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/1342:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/pull/1342,1,['test'],['test']
Testability,Updated incorrect doc and added test to verify that if you try to export a sparse block it writes a file of zeros. resolves #5500,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5511:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/5511,1,['test'],['test']
Testability,"Updates the requirements on [avro](https://github.com/apache/avro) to permit the latest version.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/apache/avro/releases"">avro's releases</a>.</em></p>; <blockquote>; <h2>Apache Avro 1.11.0</h2>; <p>The Apache Avro community is pleased to announce the release of Avro 1.11.0!</p>; <p>All signed release artifacts, signatures and verification instructions can; be found here: <a href=""https://avro.apache.org/releases.html"">https://avro.apache.org/releases.html</a></p>; <p>This release includes 120 Jira issues, including some interesting features:</p>; <p>Specification: AVRO-3212 Support documentation tags for FIXED types; C#: AVRO-2961 Support dotnet framework 5.0; C#: AVRO-3225 Prevent memory errors when deserializing untrusted data; C++: AVRO-2923 Logical type corrections; Java: AVRO-2863 Support Avro core on android; Javascript: AVRO-3131 Drop support for node.js 10; Perl: AVRO-3190 Fix error when reading from EOF; Python: AVRO-2906 Improved performance validating deep record data; Python: AVRO-2914 Drop Python 2 support; Python: AVRO-3004 Drop Python 3.5 support; Ruby: AVRO-3108 Drop Ruby 2.5 support</p>; <p>For the first time, the 1.11.0 release includes experimental support for; Rust. Work is continuing on this donated SDK, but we have not versioned and; published official artifacts for this release.</p>; <p>Python: The avro package fully supports Python 3. We will no longer publish a; separate avro-python3 package</p>; <p>And of course upgraded dependencies to latest versions, CVE fixes and more:; <a href=""https://issues.apache.org/jira/issues/?jql=project%3DAVRO%20AND%20fixVersion%3D1.11.0"">https://issues.apache.org/jira/issues/?jql=project%3DAVRO%20AND%20fixVersion%3D1.11.0</a></p>; <p>The link to all fixed JIRA issues and a brief summary can be found at:; <a href=""https://github.com/apache/avro/releases/tag/release-1.11.0"">https://github.com/apache/avro/releases/tag/relea",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11475:847,Log,Logical,847,https://hail.is,https://github.com/hail-is/hail/pull/11475,1,['Log'],['Logical']
Testability,"Updates the requirements on [bokeh](https://github.com/bokeh/bokeh) to permit the latest version.; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/bokeh/bokeh/blob/branch-3.0/CHANGELOG"">bokeh's changelog</a>.</em></p>; <blockquote>; <h2>2021-11-22 2.4.2:</h2>; <ul>; <li>; <p>bugfixes:</p>; <ul>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11422"">#11422</a> [component: bokehjs] [BUG] <code>DeserializationError</code> when trying to change a <code>DataTable</code>'s columns with <code>CustomJS</code></li>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11800"">#11800</a> [BUG] DeserializationError when plotting graphs</li>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11801"">#11801</a> [component: bokehjs] [BUG] Log axis figures don't render if they're not visible at start</li>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11807"">#11807</a> [component: bokehjs] Work around issues with initialization-time change discovery</li>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11808"">#11808</a> Don't unnecessarily update node/edge renderers in graphs</li>; </ul>; </li>; <li>; <p>tasks:</p>; <ul>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11613"">#11613</a> [component: docs] Cache-bust custom.css for docs</li>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11791"">#11791</a> [component: docs] Update issue template to use new GH forms</li>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11761"">#11761</a> [component: docs] Clarify use of color in first steps guide</li>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11762"">#11762</a> [component: docs] Replace slash with backslash for PS commands</li>; <li><a href=""https://github-redirect.dependabot.com/bokeh/bokeh/issues/11767"">#11767</a> [component: bokehjs] Upgr",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11540:837,Log,Log,837,https://hail.is,https://github.com/hail-is/hail/pull/11540,1,['Log'],['Log']
Testability,"Updates the requirements on [plotly](https://github.com/plotly/plotly.py) to permit the latest version.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/plotly/plotly.py/releases"">plotly's releases</a>.</em></p>; <blockquote>; <h2>v5.10.0</h2>; <h3>Updated</h3>; <ul>; <li>Updated Plotly.js to from version 2.12.1 to version 2.14.0. See the <a href=""https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2140----2022-08-10"">plotly.js CHANGELOG</a> for more information. Notable changes include:; <ul>; <li>Add support for <code>sankey</code> links with arrows</li>; <li>Add <code>selections</code>, <code>newselection</code> and <code>activeselection</code> layout attributes to have persistent and editable selections over cartesian subplots</li>; <li>Add <code>unselected.line.color</code> and <code>unselected.line.opacity</code> options to <code>parcoords</code> trace</li>; <li>Display Plotly's new logo in the modebar</li>; </ul>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/plotly/plotly.py/blob/master/CHANGELOG.md"">plotly's changelog</a>.</em></p>; <blockquote>; <h2>[5.10.0] - 2022-08-11</h2>; <h3>Updated</h3>; <ul>; <li>Updated Plotly.js to from version 2.12.1 to version 2.14.0. See the <a href=""https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2140----2022-08-10"">plotly.js CHANGELOG</a> for more information. Notable changes include:; <ul>; <li>Add support for <code>sankey</code> links with arrows</li>; <li>Add <code>selections</code>, <code>newselection</code> and <code>activeselection</code> layout attributes to have persistent and editable selections over cartesian subplots</li>; <li>Add <code>unselected.line.color</code> and <code>unselected.line.opacity</code> options to <code>parcoords</code> trace</li>; <li>Display Plotly's new logo in the modebar</li>; </ul>; </li>; </ul>; <h2>[5.9.0] - 2022-06-23</h2>; <h3>Added</h3>;",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12113:956,log,logo,956,https://hail.is,https://github.com/hail-is/hail/pull/12113,1,['log'],['logo']
Testability,"Updates the requirements on [scipy](https://github.com/scipy/scipy) to permit the latest version.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/scipy/scipy/releases"">scipy's releases</a>.</em></p>; <blockquote>; <h1>SciPy 1.8.0 Release Notes</h1>; <p>SciPy <code>1.8.0</code> is the culmination of <code>6</code> months of hard work. It contains; many new features, numerous bug-fixes, improved test coverage and better; documentation. There have been a number of deprecations and API changes; in this release, which are documented below. All users are encouraged to; upgrade to this release, as there are a large number of bug-fixes and; optimizations. Before upgrading, we recommend that users check that; their own code does not use deprecated SciPy functionality (to do so,; run your code with <code>python -Wd</code> and check for <code>DeprecationWarning</code> s).; Our development attention will now shift to bug-fix releases on the; 1.8.x branch, and on adding new features on the master branch.</p>; <p>This release requires Python <code>3.8+</code> and <code>NumPy 1.17.3</code> or greater.</p>; <p>For running on PyPy, PyPy3 <code>6.0+</code> is required.</p>; <h1>Highlights of this release</h1>; <ul>; <li>A sparse array API has been added for early testing and feedback; this; work is ongoing, and users should expect minor API refinements over; the next few releases.</li>; <li>The sparse SVD library PROPACK is now vendored with SciPy, and an interface; is exposed via <code>scipy.sparse.svds</code> with <code>solver='PROPACK'</code>. It is currently; default-off due to potential issues on Windows that we aim to; resolve in the next release, but can be optionally enabled at runtime for; friendly testing with an environment variable setting of <code>USE_PROPACK=1</code>.</li>; <li>A new <code>scipy.stats.sampling</code> submodule that leverages the <code>UNU.RAN</code> C; library to sample from arbitrary univariate non-uniform c",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11538:443,test,test,443,https://hail.is,https://github.com/hail-is/hail/pull/11538,1,['test'],['test']
Testability,Usages of `physicalType` remain in four places:. - in/around aggregators; - tests; - a few stray TableIR nodes; - at the boundary of encoding/decoding,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6702:76,test,tests,76,https://hail.is,https://github.com/hail-is/hail/pull/6702,1,['test'],['tests']
Testability,Use JSON formatting in logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6453:23,log,logs,23,https://hail.is,https://github.com/hail-is/hail/pull/6453,1,['log'],['logs']
Testability,"Use Sanic + ujson instead of Flask + flask.json, cache more, and fix missing favicon in HTML templates. Sanic should be 3+x faster than Flask, and ujson ~2-3x faster than the standard json lib. I also optimize away the unnecessary re-generation of user_data (via get_users()) and json equivalent for /json. This is deployed currently on scorecard.hail.is, and improves performance by ~20%, even for 1 single connection, and for that simple workload (response time from ~50ms to ~40ms). Besides performance ( https://fgimian.github.io/blog/2018/06/05/python-api-framework-benchmarks/ ) Sanic also builds in a production-oriented web server, so need for WSGI or aWSGI, Gunicorn, etc. Can easily run multiple workers if desired. ```python; app.run(host='0.0.0.0', port=5000, workers=4); ```. This serves as a demonstration or migration to faster web frameworks, and in particular to uvloop-based asyncio implementations.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5242:571,benchmark,benchmarks,571,https://hail.is,https://github.com/hail-is/hail/pull/5242,1,['benchmark'],['benchmarks']
Testability,"Use `emitI` to emit `ApplySeeded` nodes and port the seeded function implementations to rely on IEmitCode instead of EmitCode. The changes in IRSuite are arguably to a test that's no longer relevant---it was a regression test for a bug where we were occasionally double-emitting some part of the EmitTriplet in some cases. On the other hand, it feels kind of useful to keep as an illustration of how to thread IEmitCode through the function registry in a way that allows us to have weird interactions between the setup code of various IEmitCode args and the function itself. It was certainly instructive for me to work through how to translate the test functions in a way that made sense. I've removed one of the functions since we no longer have a single notion for ""this code should be run after all the IEmitCode setup but before the missingness is calculated""---they've been kind of merged into one concept.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8893:168,test,test,168,https://hail.is,https://github.com/hail-is/hail/pull/8893,3,['test'],['test']
Testability,"Use color to make the wall of text easier to parse, and print a condensed list of failed tests at the end.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4318:89,test,tests,89,https://hail.is,https://github.com/hail-is/hail/pull/4318,1,['test'],['tests']
Testability,Use new environment parameters in gradle test target,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5999:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/5999,1,['test'],['test']
Testability,Use pure Python to do some IO and CPU work. This will help; identify fraught comparisons between benchmark runs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10584:97,benchmark,benchmark,97,https://hail.is,https://github.com/hail-is/hail/pull/10584,1,['benchmark'],['benchmark']
Testability,Use rvd in logreg.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2651:11,log,logreg,11,https://hail.is,https://github.com/hail-is/hail/pull/2651,1,['log'],['logreg']
Testability,"Use the binomial p-test on allelic depths, but include a flag to allow for optionally setting a ref bias other than 0.5 (for example in exome it can be .53, which for high-depth sites is not negligible)",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/59:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/issues/59,1,['test'],['test']
Testability,Use the global RDG in vsm linearity test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/587:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/587,1,['test'],['test']
Testability,"Use web_common in ci, batch and scorecard for common design (e.g. header) and styling. The styling is clearly not ideal, this is intended to be a work in progress. Hand-deployed to checked batch and scorecard UI are still workable. Not easy to do with CI. Converted scorecard to aiohttp and gidgethub. Will remove dependencies in separate PR so I don't want to wait for all the images to rebuild. Can't quite get rid of Flask yet as it is used in callback tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7064:456,test,tests,456,https://hail.is,https://github.com/hail-is/hail/pull/7064,1,['test'],['tests']
Testability,"User jobs should not have access to our internal network. This enforces that; requirement. Every job spec now has a `network` argument which can be unset,; null, `public`, or `private`. If `private`, the job has access to our internal; network. Both unset and null default to the `public` network. Only the ci user is permitted to create non-`public` network jobs. I define the; networks using Docker and `iptables`. First I create two distinct docker; networks `public` and `private`. These correspond to virtual Ethernet bridges. A; virtual bridge may be connected to many virtual interfaces. Each docker; container is given a virtual interface. The `public` virtual bridge is severely limited. All traffic originating from; the public bridge destined for any of the [three private; subnets](https://en.wikipedia.org/wiki/Private_network#Private_IPv4_addresses); is dropped. Perhaps most importantly, packets destined for other containers on the same host; are dropped. I tested this manually using a Linux VM with Docker. testing it in; the wild is a little tricky! I have no way to ensure a pair of containers end up; on the same VM in a test environment. I did add tests for connecting to `localhost`, `127.0.0.1`, and one's own; IP. Note that one's own IP is the IP of a container, so you might naively think; it should be dropped by the aforementioned rules. However, packets destined for; the container's own IP are never sent to the virtual bridge, the container knows; its own IP and simply routes the packets to itself. I found [this website](https://rancher.com/learning-paths/introduction-to-container-networking/) helpful for understanding Docker networking.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9380:974,test,tested,974,https://hail.is,https://github.com/hail-is/hail/pull/9380,4,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"User reported that hail wouldn't build on an EMR instance. It turns out that g++-4.8.x doesn't; support ""-march=sandybridge"", but has the same architecture called ""-march=corei7_avx"". ; With this PR the Makefile tests a trivial compilation to pick a -march which works for the; particular $(CXX).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4317:212,test,tests,212,https://hail.is,https://github.com/hail-is/hail/pull/4317,1,['test'],['tests']
Testability,"Using URL parsing for object storage URIs has proven problematic as they don't really have the same syntax. In particular, Java URI truncates the path at `?` and assigns the rest to a query string field (as it should), but `?` is a valid character in a blob storage object and is used as a glob pattern. We were forgetting to look at the `URI.query` field to assemble the full object name and therefore broke globbing. I added a few tests specifically that used single-character match pattern (`?`) and got rid of `URI` in favor of a regex to get ahead of any other potential footguns.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13173:433,test,tests,433,https://hail.is,https://github.com/hail-is/hail/pull/13173,1,['test'],['tests']
Testability,"Using hail 0.2.32, `hailctl dataproc submit` results in the following error:. ```; hailctl dataproc submit hail-test {python file} -- {arguments to script}; Submitting to cluster 'hail-test'...; gcloud command:; gcloud dataproc jobs submit pyspark {python file} \; --cluster=hail-test \; --files= \; --py-files=/var/folders/7y/hvrzyxts3xg74r3m2jbq0kc0zt3g3z/T/pyscripts_srh2ze4a.zip \; --properties= \; -- \; {arguments to script}; ERROR: (gcloud.dataproc.jobs.submit.pyspark) The required property [region] is not currently set.; It can be set on a per-command basis by re-running your command with the [--region] flag. You may set it for your current workspace by running:. $ gcloud config set dataproc/region VALUE. or it can be set temporarily by the environment variable [CLOUDSDK_DATAPROC_REGION]; Traceback (most recent call last):; File ""/Users/aarong/Documents/gtex-wgs/.devenv/bin/hailctl"", line 8, in <module>; sys.exit(main()); File ""/Users/aarong/Documents/gtex-wgs/.devenv/lib/python3.7/site-packages/hailtop/hailctl/__main__.py"", line 94, in main; cli.main(args); File ""/Users/aarong/Documents/gtex-wgs/.devenv/lib/python3.7/site-packages/hailtop/hailctl/dataproc/cli.py"", line 107, in main; jmp[args.module].main(args, pass_through_args); File ""/Users/aarong/Documents/gtex-wgs/.devenv/lib/python3.7/site-packages/hailtop/hailctl/dataproc/submit.py"", line 78, in main; check_call(cmd); File ""/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py"", line 363, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError; ``` . However, adding `--region us-central1` to any location in the argument string to hailctl dataproc submit results in the argument being picked up as an input to the script, not to the underlying gcloud command",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8078:112,test,test,112,https://hail.is,https://github.com/hail-is/hail/issues/8078,3,['test'],['test']
Testability,"Using index expressions to represent abstract transformations on tensors. E.g. broadcasts from scalars and vectors to matrices would be represented by. ```; O(i, j) <- A(); O(i, j) <- A(i); O(i, j) <- A(j); ```; where A is the input tensor and O is the output tensor. Similarly, transpose and identity look like. ```; O(i, j) <- A(j, i); O(i, j) <- A(i, j); ```. Since the `O(i,j)` is the same in all of these, we only need to look at the ""in"" index expressions for broadcasts to distinguish what operation needs to be performed. There's also a Simplify rule to cut out identity broadcasts. ## Workaround; This method of index expressions treats scalars and vectors as 0-dimensional and 1-dimensional tensors, respectively. As such, their shapes in the IR are 0 and 1-dimensional. However, BlockMatrix (Py API and Scala backend) assumes that all BlockMatrices are 2-dimensional, with the potential to have dimensions of length 1. To satisfy the current user API while maintaining a tensor-like mindset in the IR, the BlockMatrixType now has a `isRowVector` flag to help the front-end BlockMatrix discern whether a 1-tensor IR should be treated as a row or column vector. As BlockMatrix generalizes to n-tensors this flag can be removed. The IR should not rely on this flag for any execution logic.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5338:1291,log,logic,1291,https://hail.is,https://github.com/hail-is/hail/pull/5338,1,['log'],['logic']
Testability,"Using this TSV,; ```; id	foo_1	foo_2	foo_3	bar_1	bar_2	bar_3; a	1	2	3	4	5	6; b	7	8	9	10	11	12; c	13	14	15	16	17	18; ```. This code; ```; import hail as hl. ds = hl.import_matrix_table(""test.tsv"", row_fields={""id"": hl.tstr}, entry_type=hl.tfloat); ds = ds.annotate_cols(prefix=ds.col_id.split(""_"")[0]). t = ds.group_cols_by(ds.prefix).aggregate(**{"""": hl.agg.approx_median(ds.x)}).make_table(); t.show(); ```. Throws an error `HailException: approx_cdf already initialized` on Hail 0.2.28 and 0.2.30. On Hail 0.2.26, that code worked and output; ```; +--------+-----+----------+----------+; | row_id | id | bar | foo |; +--------+-----+----------+----------+; | int64 | str | float64 | float64 |; +--------+-----+----------+----------+; | 0 | ""a"" | 5.00e+00 | 2.00e+00 |; | 1 | ""b"" | 1.10e+01 | 8.00e+00 |; | 2 | ""c"" | 1.70e+01 | 1.40e+01 |; +--------+-----+----------+----------+; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7824:185,test,test,185,https://hail.is,https://github.com/hail-is/hail/issues/7824,1,['test'],['test']
Testability,VCF combiner assertion error about schema mismatches,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/10813:13,assert,assertion,13,https://hail.is,https://github.com/hail-is/hail/issues/10813,1,['assert'],['assertion']
Testability,VEP is currently untested. Need:; - Standard install location (with installation instructions) and vep.properties to run tests locally.; - Kyle has agreed to compare Hail and non-Hail pipelines. Migrate this comparison into automated tests.; - Option to set vep.properties in tests to run with VEP on the cluster.; - Konrad has promised checks to make sure VEP/Loftee is working. Make into automated test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/225:121,test,tests,121,https://hail.is,https://github.com/hail-is/hail/issues/225,4,['test'],"['test', 'tests']"
Testability,VEP tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/225:4,test,tests,4,https://hail.is,https://github.com/hail-is/hail/issues/225,1,['test'],['tests']
Testability,"VEP/CacheDir.pm:111; STACK Bio::EnsEMBL::VEP::AnnotationSourceAdaptor::get_all_from_cache /opt/vep/src/ensembl-vep/modules/Bio/EnsEMBL/VEP/AnnotationSourceAdaptor.pm:115; STACK Bio::EnsEMBL::VEP::AnnotationSourceAdaptor::get_all /opt/vep/src/ensembl-vep/modules/Bio/EnsEMBL/VEP/AnnotationSourceAdaptor.pm:91; STACK Bio::EnsEMBL::VEP::BaseRunner::get_all_AnnotationSources /opt/vep/src/ensembl-vep/modules/Bio/EnsEMBL/VEP/BaseRunner.pm:175; STACK Bio::EnsEMBL::VEP::Runner::init /opt/vep/src/ensembl-vep/modules/Bio/EnsEMBL/VEP/Runner.pm:123; STACK Bio::EnsEMBL::VEP::Runner::run /opt/vep/src/ensembl-vep/modules/Bio/EnsEMBL/VEP/Runner.pm:194; STACK toplevel /opt/vep/src/ensembl-vep/vep:225; Date (localtime) = Mon Apr 29 23:53:34 2024; Ensembl API version = 95; ---------------------------------------------------. Java stack trace:; org.apache.spark.SparkException: Job aborted due to stage failure: Task 8 in stage 1.0 failed 20 times, most recent failure: Lost task 8.19 in stage 1.0 (TID 2899) (hail-test-w-1.australia-southeast1-a.c.pb-dev-312200.internal executor 3): is.hail.utils.HailException: VEP command '/vep --format vcf --json --everything --allele_number --no_stats --cache --offline --minimal --assembly GRCh38 --fasta /opt/vep/.vep/homo_sapiens/95_GRCh38/Homo_sapiens.GRCh38.dna.toplevel.fa.gz --plugin LoF,loftee_path:/opt/vep/Plugins/,gerp_bigwig:/opt/vep/.vep/gerp_conservation_scores.homo_sapiens.GRCh38.bw,human_ancestor_fa:/opt/vep/.vep/human_ancestor.fa.gz,conservation_file:/opt/vep/.vep/loftee.sql --dir_plugins /opt/vep/Plugins/ -o STDOUT' failed with non-zero exit status 2; VEP Error output:; Smartmatch is experimental at /opt/vep/Plugins/de_novo_donor.pl line 175.; Smartmatch is experimental at /opt/vep/Plugins/de_novo_donor.pl line 214.; Smartmatch is experimental at /opt/vep/Plugins/splice_site_scan.pl line 191.; Smartmatch is experimental at /opt/vep/Plugins/splice_site_scan.pl line 194.; Smartmatch is experimental at /opt/vep/Plugins/splice_site_scan.pl line",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14513:3542,test,test-w-,3542,https://hail.is,https://github.com/hail-is/hail/issues/14513,1,['test'],['test-w-']
Testability,"VMs or use a single multi-threaded JVM, we'll need to ensure the top-level; ClassLoader *does not have Hail on its classpath*. I looked briefly at this approach and found it; more work than the current approach. ---. My apologies for eliminating JVMProcess in this PR. It's an unrelated change which facilitated my; understanding of worker.py. I essentially inlined JVMProcess into JVMJob and eliminated any duplicative; code. ---. After making this change I restored the tests. Some tests had bitrotted. In the process of fixing; those tests, I found a few other bugs. Fixing these lower-level bugs unlocked a number of new; tests. One test (which was added since the service tests were removed) had to be marked as failing. Some; Hail operations rely on writing to the local file system. Implementing that properly in the Query; Worker will take some thought. Here are the bugs I fixed:. 1. Correct the error message raised when tests are run in a non-main thread (we look for this; message and start an event loop for Hail's async code because asyncio refuses to start an event; loop in a non-main thread). 2. Use a `SafeRow` to copy the globals data out of a Region and into durable, GC'ed objects. 3. Re-enable serialization of GoogleStorageFS (including its private key, which we really shouldn't; do; Tim is working on it), which was broken (presumably) when we changed Scala versions. The; `var` modifier ensures the name is compiled as a JVM field. 4. Correctly convert from a `Byte` to an `Int`. By default `Byte` to `Int` conversion (which is done; automatically when you return a `Byte` from a function whose return type is `Int`) is; sign-preserving. That means that the byte `0000 1111` is converted to the `Int` 15 and the byte; `1000 1111` is converted to the `Int` -113. The contract of; [`InputStream.read`](https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html#read--); is to return the unsigned integeral value of the next `Byte` or `-1` if we've reached the end of; t",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10314:1868,test,tests,1868,https://hail.is,https://github.com/hail-is/hail/pull/10314,1,['test'],['tests']
Testability,Validation code was not updated when adding azure https support. Made this check a bit more robust and tested locally. Resolves #13049,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13051:103,test,tested,103,https://hail.is,https://github.com/hail-is/hail/pull/13051,1,['test'],['tested']
Testability,"ValueError: math domain error&quot; for <code>metric(0)</code> (<a href=""https://github-redirect.dependabot.com/python-humanize/humanize/issues/47"">#47</a>) <a href=""https://github.com/liukun""><code>@​liukun</code></a></li>; </ul>; <h2>4.3.0</h2>; <h2>Added</h2>; <ul>; <li>Add Greek translation (<a href=""https://github-redirect.dependabot.com/python-humanize/humanize/issues/46"">#46</a>) <a href=""https://github.com/waseigo""><code>@​waseigo</code></a></li>; <li>Polish: Added thousand, fixed big numbers (<a href=""https://github-redirect.dependabot.com/python-humanize/humanize/issues/43"">#43</a>) <a href=""https://github.com/dejurin""><code>@​dejurin</code></a></li>; </ul>; <h2>Fixed</h2>; <ul>; <li>Fix intword for negative numbers (<a href=""https://github-redirect.dependabot.com/python-humanize/humanize/issues/41"">#41</a>) <a href=""https://github.com/vishket""><code>@​vishket</code></a></li>; </ul>; <h2>4.2.3</h2>; <h2>Fixed</h2>; <ul>; <li>Update annotations, docs, and tests: <code>naturaltime</code> can also accept a <code>timedelta</code> (<a href=""https://github-redirect.dependabot.com/python-humanize/humanize/issues/31"">#31</a>) <a href=""https://github.com/nuztalgia""><code>@​nuztalgia</code></a></li>; </ul>; <h2>4.2.2</h2>; <h2>Fixed</h2>; <ul>; <li>Update annotations: <code>naturadelta</code> and <code>naturaltime</code> can also accept a <code>float</code> (<a href=""https://github-redirect.dependabot.com/python-humanize/humanize/issues/29"">#29</a>) <a href=""https://github.com/hugovk""><code>@​hugovk</code></a></li>; </ul>; <h2>4.2.1</h2>; <h2>Fixed</h2>; <ul>; <li>Rename Arabic locale from <code>ar_SA</code> to <code>ar</code> to enable fallbacks (<a href=""https://github-redirect.dependabot.com/python-humanize/humanize/issues/27"">#27</a>) <a href=""https://github.com/hugovk""><code>@​hugovk</code></a></li>; <li>Use <code>%d</code> for year translations, convert to string for <code>intcomma</code> after (<a href=""https://github-redirect.dependabot.com/python-humanize/hu",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12329:2673,test,tests,2673,https://hail.is,https://github.com/hail-is/hail/pull/12329,1,['test'],['tests']
Testability,"Versions/3.7/bin/hailctl"", line 10, in <module>; sys.exit(main()); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/__main__.py"", line 91, in main; cli.main(args); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/dataproc/cli.py"", line 99, in main; jmp[args.module].main(args, pass_through_args); File ""/usr/local/lib/python3.7/site-packages/hailtop/hailctl/dataproc/start.py"", line 195, in main; sp.check_call(cmd); File ""/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py"", line 347, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '['gcloud', 'beta', 'dataproc', 'clusters', 'create', 'bw2', '--image-version=1.4-debian9', '--properties=spark:spark.driver.maxResultSize=0,spark:spark.task.maxFailures=20,spark:spark.kryoserializer.buffer.max=1g,spark:spark.driver.extraJavaOptions=-Xss4M,spark:spark.executor.extraJavaOptions=-Xss4M,hdfs:dfs.replication=1,dataproc:dataproc.logging.stackdriver.enable=false,dataproc:dataproc.monitoring.stackdriver.enable=false,spark:spark.driver.memory=41g', '--initialization-actions=gs://hail-common/hailctl/dataproc/0.2.18/init_notebook.py,gs://gnomad-public/tools/inits/master-init.sh', '--metadata=^|||^WHEEL=gs://hail-common/hailctl/dataproc/0.2.18/hail-0.2.18-py3-none-any.whl|||PKGS=aiohttp|bokeh>1.1,<1.3|decorator<5|gcsfs==0.2.1|hurry.filesize==0.9|ipykernel<5|nest_asyncio|numpy<2|pandas>0.22,<0.24|parsimonious<0.9|PyJWT|python-json-logger==0.1.11|requests>=2.21.0,<2.21.1|scipy>1.2,<1.4|tabulate==0.8.3|slackclient==2.0.0|websocket-client|sklearn|tabulate|statsmodels|scikit-learn|hdbscan|matplotlib', '--master-machine-type=n1-highmem-8', '--master-boot-disk-size=100GB', '--num-master-local-ssds=0', '--num-preemptible-workers=0', '--num-worker-local-ssds=0', '--num-workers=2', '--preemptible-worker-boot-disk-size=40GB', '--worker-boot-disk-size=40', '--worker-machine-type=n1-standard-8', '--zone=us-central1-b', '--initializa",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6634:3684,log,logging,3684,https://hail.is,https://github.com/hail-is/hail/issues/6634,1,['log'],['logging']
Testability,"Very much WIP, this just adds a ptype that isn't yet fully implemented, plus a test that checks that some reference counting is happening. @tpoterba , mostly posting to make sure that I understood our conversation and that this is what you had in mind.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9654:79,test,test,79,https://hail.is,https://github.com/hail-is/hail/pull/9654,1,['test'],['test']
Testability,"Very preliminary. Builds test instead of main by default, output looks like this:. ```; ~/hail/libhail/build$ ./test; RUN test_int64_value; RUN test_int64_value OK; RUN test_int32_value; RUN test_int32_value OK; RUN test_bool_value; RUN test_bool_value OK; ...; ```. Added `std::string render(...)` to format module. Added some format tests. Added `CHECK_EQ` macro that prints the details on failure:. ```; ../src/hail/test.hpp:42: assert failed:; CHECK_EQ(render(FormatAddress(nullptr)), ""0x0000000000000000""); with values:; CHECK_EQ(0000000000000000, 0x0000000000000000); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10231:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/10231,5,"['assert', 'test']","['assert', 'test', 'tests']"
Testability,"WIP pull request. - [x] Write tests to replicate existing errors. - [ ] Write test to replicate stalled request. - [ ] Resolve stalled request. However, I think we should consider writing a more complete solution to this. As far as I can tell, our use of threads is fragile; following Flask recommendations w.r.t reliance on production-ready WSGI server seems a good idea. Happy to take that on. I'd also like to move away from Flask for API stuff. While not likely to be a bottleneck for many moons, there are solutions rumored to be far faster (Falcon, esp using Cpython).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5065:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/5065,2,['test'],"['test', 'tests']"
Testability,WIP while I wait for benchmarks to succeed with this change,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8472:21,benchmark,benchmarks,21,https://hail.is,https://github.com/hail-is/hail/pull/8472,1,['benchmark'],['benchmarks']
Testability,Was causing segfaults in the read_with_index_p1000 benchmark. closes #6793,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6842:51,benchmark,benchmark,51,https://hail.is,https://github.com/hail-is/hail/pull/6842,1,['benchmark'],['benchmark']
Testability,Was getting tired of having to manually delete my root cert every so often and redeploy. This will recreate the root cert in dev and test namespaces if it is already expired. Deleting an expired root cert won't break communication that isn't already now broken.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13135:133,test,test,133,https://hail.is,https://github.com/hail-is/hail/pull/13135,1,['test'],['test']
Testability,"Was testing that we could run with newer pythons, encountered some warnings to clean up. - We aren't supposed to use `collections.Sequence` anymore. It's `collections.abc.Sequence`. They said this wouldn't work in 3.9, but they decided to delay removal again to 3.10.; - `np.bool` is just the same as `bool`, so numpy has deprecated `np.bool`. ; - We deprecatd `hl.null` in favor of `hl.missing` a little while ago.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10224:4,test,testing,4,https://hail.is,https://github.com/hail-is/hail/pull/10224,1,['test'],['testing']
Testability,"Wasn't short circuiting properly as written. Caused this test to fail:. `self.assertEqual(hl.cond(hl.null(hl.tbool), 1, 2, missing_false=True).value, 2)`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3175:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/3175,2,"['assert', 'test']","['assertEqual', 'test']"
Testability,"We currently cannot run untrusted code on our cluster and guarantee that malicious code in one pod does not leak into other pods, or affect the entire cluster. This proposal outlines a solution to this problem. *This is a work in progress*. ### TL;DR; Use Kata + CRI-Containerd runtime to sandbox pods, at a low performance cost. [Jessie Frazelle’s Blog: Hard Multi-Tenancy in Kubernetes](https://blog.jessfraz.com/post/hard-multi-tenancy-in-kubernetes/). ### Roadmap; I would like to implement a test cluster that uses this system, and begin migrating our existing workloads to it asap. . *TODO*. ### Rationale; 1. We want resource preemption across users., running multiple user containers on a single cluster.; 2. This means sandboxing at the cluster level is out.; 3. Therefore we must sandbox at the pod (or container) level. Kata + CRI-Containerd chosen for performance and maturity reasons.; CRI-Containerd is much faster than CRI-O, and Kata is much faster than gVisor. Kata is a relatively mature product from Intel. Production users include JD.com. ### User-level access control ; An orthogonal issue that still needs to be addressed. [RBAC Authorization - Kubernetes](https://kubernetes.io/docs/reference/access-authn-authz/rbac/). *TODO*. ### Related: Firecracker; Interesting project, similar to Kata and gVisor in its isolation properties. Doesn’t work with Kubernetes, replicates some Kube functionality.; * [Announcing the Firecracker Open Source Technology: Secure and Fast microVM for Serverless Computing | AWS Open Source Blog](https://aws.amazon.com/blogs/opensource/firecracker-open-source-secure-fast-microvm-serverless/); * Potentially lower runtime cost that Kata; * Written in Rust :). ### Alternatives; [Nabla containers: a new approach to container isolation · Nabla Containers](https://nabla-containers.github.io); * Unclear how good containment is. Worth exploring. ### Performance; [Runtime performance benchmark result. containerd vs CRI-containerd vs CRI-O · GitHub](h",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5111:289,sandbox,sandbox,289,https://hail.is,https://github.com/hail-is/hail/issues/5111,4,"['sandbox', 'test']","['sandbox', 'sandboxing', 'test']"
Testability,"We currently have several hail sparse matrix tables that contain up to 10,000 aggregated gVCF files that we aggregated using run_combiner(). We are trying to merge these tables together with a script that makes use of your combine_gvcfs function that is defined in your experimental vcf combiner library. We have successfully succeeded in doing this for merging multiple sparse matrix table into a final table of around 18,000 gVCFs. We are now trying to do this for just under 110,00 gVCFs. The script runs for a while and seems to fail at the very end. Based on the logs, it looks like it is writing to output when it fails. We monitored our resources on google cloud and there is not an issue with cluster CPU or memory usage. We believe the problem stems from not having enough memory in the individual executors at this stage. We are currently using the default of:. spark.executor.memory=10117m; spark.executor.memoryOverhead=15175m. We would like to scale this up and re-run. Do you have any recommended settings for a job of this size?. For reference, below is the error message that we received. Thank you in advance.; ````; Hail version: 0.2.81-edeb70bc789c; Error summary: SparkException: Job aborted due to stage failure: Task 2476 in stage 0.0 failed 20 times, most recent failure: Lost task 2476.20 in stage 0.0 (TID 6571) (<clusterinfo>.internal executor 1128): ExecutorLostFailure (executor 1128 exited caused by one of the running tasks) Reason: Container from a bad node: container_1659731953912_0002_01_001691 on host: cluster-himem-w-0.c.gbsc-gcp-project.internal. Exit status: 143. Diagnostics: [2022-08-10 20:11:38.904]Container killed on request. Exit code is 143; [2022-08-10 20:11:38.904]Container exited with a non-zero exit code 143. ; [2022-08-10 20:11:38.905]Killed by external signal-; ````",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12083:568,log,logs,568,https://hail.is,https://github.com/hail-is/hail/issues/12083,1,['log'],['logs']
Testability,"We deprecated `hl.null` in favor of `hl.missing`. I removed uses from code base but missed the tests, so we are printing lots of deprecation messages when we run the tests.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10004:95,test,tests,95,https://hail.is,https://github.com/hail-is/hail/pull/10004,2,['test'],['tests']
Testability,"We do not yet have pyright running on the Hail python package nor the tests. Without this change, I get failures on push.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14124:70,test,tests,70,https://hail.is,https://github.com/hail-is/hail/pull/14124,1,['test'],['tests']
Testability,"We don't even run this test currently, but we were generating a warning everytime we ran pytest about the fact that it would always be true if we did run it.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7655:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/7655,1,['test'],['test']
Testability,We don't make it easy to copy the hail log off the driver when a spark job fails. We should make that as automatic as possible. One way to do this is to add a call to [`hl.copy_log`](https://hail.is/docs/0.2/utils/index.html#hail.utils.copy_log) in the `except` block of `SparkBackend.execute`. We would need to expose some configuration for where to copy logs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14431:39,log,log,39,https://hail.is,https://github.com/hail-is/hail/issues/14431,2,['log'],"['log', 'logs']"
Testability,"We don't test the logs, but I did test this manually, it works as; expected.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10160:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/10160,3,"['log', 'test']","['logs', 'test']"
Testability,"We forgot to retry create part in a test. See, for example, copier.py, where we do retry create part.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11409:36,test,test,36,https://hail.is,https://github.com/hail-is/hail/pull/11409,1,['test'],['test']
Testability,"We get a lot of spurious Grafana alerts because batch-driver has unclosed `aiohttp.ClientSession` objects. `aiohttp` can [report the creation location](https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L242-L247), but only when aysncio is in debug mode. I am hesitant to enable debug mode because I suspect it will slow down everything by grabbing stack traces for every coroutine (so that it can report an error later). I adapted the code from the linked asyncio code and tested it as follows:. ```; In [1]: import aiohttp; ...: import traceback; ...: import sys; ...:; ...: oldinit = aiohttp.ClientSession.__init__; ...: def newinit(self, *args, **kwargs):; ...: oldinit(self, *args, **kwargs); ...: self._source_traceback: Optional[; ...: traceback.StackSummary; ...: ] = traceback.extract_stack(sys._getframe(1)); ...: aiohttp.ClientSession.__init__ = newinit. In [2]: aiohttp.ClientSession(); <ipython-input-1-028690903e5f>:7: DeprecationWarning: The object should be created within an async function; oldinit(self, *args, **kwargs); Out[2]: <aiohttp.client.ClientSession at 0x104ab3850>. In [3]: aiohttp.ClientSession(); <ipython-input-1-028690903e5f>:7: DeprecationWarning: The object should be created within an async function; oldinit(self, *args, **kwargs); Out[3]: <aiohttp.client.ClientSession at 0x104dac8b0>. In [4]: aiohttp.ClientSession(); <ipython-input-1-028690903e5f>:7: DeprecationWarning: The object should be created within an async function; oldinit(self, *args, **kwargs); Out[4]: <aiohttp.client.ClientSession at 0x104daeec0>. In [5]:. Do you really want to exit ([y]/n)? y; Unclosed client session; client_session: <aiohttp.client.ClientSession object at 0x104ab3850>; source_traceback: Object created at (most recent call last):; File ""/Users/dking/miniconda3/bin/ipython"", line 8, in <module>; sys.exit(start_ipython()); File ""/Users/dking/miniconda3/lib/python3.10/site-packages/IPython/__init__.py"", line 128, in start_ipython; return launch_new_instance(",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13421:489,test,tested,489,https://hail.is,https://github.com/hail-is/hail/pull/13421,1,['test'],['tested']
Testability,"We had a lowering defined for `BlockMatrixSlice`, but it was barely tested and not correct. In this PR I rewrote it to be correct and enabled the python tests in `test_linalg` that check slicing behavior.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10489:68,test,tested,68,https://hail.is,https://github.com/hail-is/hail/pull/10489,2,['test'],"['tested', 'tests']"
Testability,"We had an old assert that only applies to Spark, moved it into the execute method.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10501:14,assert,assert,14,https://hail.is,https://github.com/hail-is/hail/pull/10501,1,['assert'],['assert']
Testability,We have had a ton of recent issues with Google thinking we are anonymous; users. I want more information in the logs about authentication.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10958:112,log,logs,112,https://hail.is,https://github.com/hail-is/hail/pull/10958,1,['log'],['logs']
Testability,"We have some problem with running nirvana in hail and we use the sample file of GWAS Tutorial. Code: ; hl.utils.get_1kg('data/'); vcfVds = hl.import_vcf('data/1kg.vcf.bgz', min_partitions=8); vds = hl.nirvana(vcfVds,'data/nirvana.properties'). Version:; Running on Apache Spark version 2.2.1; Hail version: 0.2.10-ceb85fc87544. We got this error massage:; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""</usr/local/lib/python3.6/dist-packages/decorator.py:decorator-gen-1226>"", line 2, in nirvana; File ""/seqslab/hail/hail/build/distributions/hail-python.zip/hail/typecheck/check.py"", line 561, in wrapper; File ""/seqslab/hail/hail/build/distributions/hail-python.zip/hail/methods/qc.py"", line 860, in nirvana; File ""/usr/local/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py"", line 1133, in __call__; File ""/seqslab/hail/hail/build/distributions/hail-python.zip/hail/utils/java.py"", line 227, in deco; hail.utils.java.FatalError: AssertionError: assertion failed. Java stack trace:; java.lang.AssertionError: assertion failed; at scala.Predef$.assert(Predef.scala:156); at is.hail.methods.Nirvana$.annotate(Nirvana.scala:361); at is.hail.methods.Nirvana$.apply(Nirvana.scala:487); at is.hail.methods.Nirvana.apply(Nirvana.scala); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:498); at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244); at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357); at py4j.Gateway.invoke(Gateway.java:280); at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132); at py4j.commands.CallCommand.execute(CallCommand.java:79); at py4j.GatewayConnection.run(GatewayConnection.java:214); at java.lang.Thread.run(Thread.java:748). Hail version: 0.2.10-ceb85fc",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5657:973,Assert,AssertionError,973,https://hail.is,https://github.com/hail-is/hail/issues/5657,2,"['Assert', 'assert']","['AssertionError', 'assertion']"
Testability,"We need a logging system to organize warnings, info, etc.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/170:10,log,logging,10,https://hail.is,https://github.com/hail-is/hail/issues/170,1,['log'],['logging']
Testability,We need benchmarks for densification before we merge this.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7951:8,benchmark,benchmarks,8,https://hail.is,https://github.com/hail-is/hail/pull/7951,1,['benchmark'],['benchmarks']
Testability,We previously were just passing the Code in EmitParams to method; invocations without testing missingness. This change fixes this by; wrapping the PCode in a missingness that will return a default value if; the original EmitCode is missing.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8671:86,test,testing,86,https://hail.is,https://github.com/hail-is/hail/pull/8671,1,['test'],['testing']
Testability,"We probably should have better retry logic, but hopefully this will alleviate some of the errors in the short term.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11883:37,log,logic,37,https://hail.is,https://github.com/hail-is/hail/pull/11883,1,['log'],['logic']
Testability,"We probably want a function like:. ``` scala; def projectT[T <: AST](maybeT: AST)(implicit m: ASTDefaultExpectedMessage[T]): T =; projectT[T](maybeT, m.message). def projectT[T <: AST](maybeT: AST, message: => String): T =; maybeT match {; case t : T => t; case _ => maybeT.parseError(message); }; ```. that we can use like:. ``` scala; val Lambda(position, parameter, body) = projectT[Lambda](rhs); ```. But we have the additional issue of wanting to assert function arity, so we want some way to say:. ``` scala; val Array(Lambda(position, parameter, body)) = projectArray(projectT[Lambda]); ```. And more generally. ``` scala; val Array(A(...), B(...)) = projectArray(projectT[A], projectT[B]); ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/789:452,assert,assert,452,https://hail.is,https://github.com/hail-is/hail/issues/789,1,['assert'],['assert']
Testability,"We recently had a debugging odyssey due to the following code:. ```python; import hailtop.batch as hb. def make_job(batch):; job = batch.new_job(name='test'); return job # Oops, forgot to also return the output resource. batch = hb.Batch(name='test'); my_job, my_output = make_job(batch); ```. This lead to the following error message:. ```; Traceback (most recent call last):; File ""…/borkscript.py"", line 8, in <module>; my_job, my_output = make_job(batch); File ""…/site-packages/hailtop/batch/job.py"", line 125, in __getitem__; return self._get_resource(item); File ""…/site-packages/hailtop/batch/job.py"", line 118, in _get_resource; r = self._batch._new_job_resource_file(self, value=item); File ""…/site-packages/hailtop/batch/batch.py"", line 405, in _new_job_resource_file; jrf = _resource.JobResourceFile(value, source); File ""…/site-packages/hailtop/batch/resource.py"", line 128, in __init__; super().__init__(value); File ""…/site-packages/hailtop/batch/resource.py"", line 48, in __init__; assert value is None or isinstance(value, str); AssertionError; ```. Of course, in a 400-line script it took a long while to figure out what the traceback that seemed to have little to do with any dubious code of ours was trying to tell us, and to notice that the actual problem was the `return` 200 lines away!. The problem is that these classes define `__getitem__()` so their resources can be accessed as if via a dict. The assignment into multiple variables causes Python to try to interpret the RHS as something iterable, and as `__getitem__` is defined, it will use `__getitem__(0)`, `__getitem__(1)`,... to implement that iteration. These classes are not really iterable, so define a no-op `__iter__()` to prevent this. With this, we get:. ```; Traceback (most recent call last):; File ""…/borkscript.py"", line 8, in <module>; my_job, my_output = make_job(batch); File ""…/site-packages/hailtop/batch/job.py"", line 127, in __iter__; raise TypeError(f'{type(self).__name__!r} object is not iterable')",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14390:151,test,test,151,https://hail.is,https://github.com/hail-is/hail/pull/14390,2,['test'],['test']
Testability,"We seem to be running into spark/yarn scheduling limitations causing stages to often fail with a large number of partitions. Here, we implement a very simple chunking strategy to run spark jobs with a limited number of partitions at a time. The maximum parallelism is controlled by a new `spark_max_stage_parallelism` feature flag, which defaults to MAXINT until we can figure out a good default. Also, this change corrects a small error in logic for partition indices for call caching. The `resultHandler` argument of [`runJob`] is called with the job's partition index, not the index of the partition within the RDD. So we need to index into the `partitions` sequence when populating the results buffer. CHANGELOG: Add 'spark_max_stage_parallelism' flag to allow users to run pipelines with a large number of partitions in chunks. By default, hail still attempts to run all partitions in a stage at once. . [`runJob`]: https://spark.apache.org/docs/latest/api/scala/org/apache/spark/SparkContext.html#runJob[T,U](rdd:org.apache.spark.rdd.RDD[T],func:(org.apache.spark.TaskContext,Iterator[T])=%3EU,partitions:Seq[Int],resultHandler:(Int,U)=%3EUnit)(implicitevidence$11:scala.reflect.ClassTag[U]):Unit",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14590:441,log,logic,441,https://hail.is,https://github.com/hail-is/hail/pull/14590,1,['log'],['logic']
Testability,"We should be able to assume in tests that plink, gatk, bcftools, tabix and R are installed to test interoperability (e.g. vcf export).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/106:31,test,tests,31,https://hail.is,https://github.com/hail-is/hail/issues/106,2,['test'],"['test', 'tests']"
Testability,We should benchmark the following vs 0.1:. - a single linear regression; - a single logistic regression; - a representative example of the UKB MegaGWAS. We should also verify computing PRS is reasonably efficient (was that even possible in 0.1?). Depends on:; - [x] https://github.com/hail-is/hail/issues/4018; - [x] https://github.com/hail-is/hail/issues/4019,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4020:10,benchmark,benchmark,10,https://hail.is,https://github.com/hail-is/hail/issues/4020,2,"['benchmark', 'log']","['benchmark', 'logistic']"
Testability,"We should have documentation about our expectations about versions of C compiler. Plus, we don't need R for dev testing anymore.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6832:112,test,testing,112,https://hail.is,https://github.com/hail-is/hail/pull/6832,1,['test'],['testing']
Testability,We should lean more heavily into using our published images for testing instead of having different images that install hail in different ways that are only used for tests.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12432:64,test,testing,64,https://hail.is,https://github.com/hail-is/hail/pull/12432,2,['test'],"['testing', 'tests']"
Testability,"We should probably make batch faster, but a quicker fix is to figure out what the timeout is set to 5 seconds and raise it. The default batch client timeout is 60 seconds. We should probably not send all the logs in response to list_jobs.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5519:208,log,logs,208,https://hail.is,https://github.com/hail-is/hail/issues/5519,1,['log'],['logs']
Testability,We should test that the GitHub accounts used by ci tests are real and active (not locked) before using them. See motivating issues in #4517.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4533:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/issues/4533,2,['test'],"['test', 'tests']"
Testability,We still have the error log. This produces a lot of logs and I have never used it for debugging purposes.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11978:24,log,log,24,https://hail.is,https://github.com/hail-is/hail/pull/11978,2,['log'],"['log', 'logs']"
Testability,"We want all allocations of `Region` to be controlled with a `using` or within a `RVDContext` (which will be appropriately closed). When we have achieved this, we can move the `Region` off-heap which provides a number of benefits including the use of raw-pointers in our Hail Object Representation as well as allocation free communication with other languages. This PR makes `LoadVCF` and `HailContext.readRows` use the regions in the `RVDContext`. Note that the _consumer_ is responsible for clearing the region when they're done with the current values. This is why `writePartitions` now includes `ctx.clear()`. Moreover, _producers_ must _not_ clear the region. These changes are tested by our whole infrastructure, but in particular, `is.hail.annotations.AnnotationsSuite.testReadWrite` exercises a lot of this. NB: We no longer clear the region between each read of a row. This means we could blow memory if we don't clear in the consumer. The other consumers are: aggregations, collects, shuffles, and joins. The tests pass though, so I guess I'm not too concerned for now. Once this is merged, I'll follow swiftly with uses of the RVDContext's region else where in our infrastructure. cc: @cseed . ---. I also included a couple miscellaneous small clean ups like unifying `RVD.rdd` and adding a use of `Region.scoped` in `HailContext`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3392:682,test,tested,682,https://hail.is,https://github.com/hail-is/hail/pull/3392,3,['test'],"['testReadWrite', 'tested', 'tests']"
Testability,"We want to eventually run all of our tests with the checked memory allocator, plus a few representative tests with the regular allocator. This PR switches the Java tests to the checked memory allocator, while the python tests remain on the normal allocator. I'll follow up to deal with the Python tests, but wanted to get a start in here to at least make sure some CI tests are exercising each allocator.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9376:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/9376,6,['test'],['tests']
Testability,"We want to track Hail's performance with every release for a number of reasons, including but not limited to: ; - Measure how we are doing in delivering value to scientists; - Measure the effect of changes, test our intuition and learn how to improve the product. ; - Compare our solution with others; - Catch unexpected regressions. As of the time of writing, benchmarks are run rarely and have rotted somewhat. There's a bit of work required to get them going again. There's also some work in getting them running in CI and capturing the results. Very roughly, I think work can broken down as follows:; - [ ] get benchmarks passing; - [ ] organise trials with learnings from https://www.zora.uzh.ch/id/eprint/170445/1/emse_smb_cloud.pdf; - [x] run bechmarks in ci on deploy and store the results somewhere appropriate, fail if there's something really awful ; - [ ] visualise results on some appropriate cadance for trends. Might be nice to have a graphic on our github page. . I think many of these can be done in parallel.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14221:207,test,test,207,https://hail.is,https://github.com/hail-is/hail/issues/14221,3,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"We were getting lots of exceptions when an instance was no longer reachable because it had either been preempted or idled out. The driver could have been offline or the monitor instances / health check loop ran before the activity log monitor was able to process the delete instance events. This PR attempts to tone down the exceptions such that we only get errors for instances that are likely to be zombies (no contact for 5 minutes) rather than normally disappearing instances. However, I do think we should have a separate Grafana alert for when we have lots of instances being deactivated because they couldn't contact the driver as that's a sign of a bigger problem.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12184:231,log,log,231,https://hail.is,https://github.com/hail-is/hail/pull/12184,1,['log'],['log']
Testability,We were getting warnings when tests ran that we were internally using deprecated methods still.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10653:30,test,tests,30,https://hail.is,https://github.com/hail-is/hail/pull/10653,1,['test'],['tests']
Testability,"We were reading the column values per row. This was bad. Introduce the LiftMeOut node that is evaluated in the; `InterpretNonCompilable` lowering pass. The benchmarked pipelines are still exponential in the number of; iterations of QC, which I will fix in a forthcoming PR. Before:. ```; 2020-01-29 12:36:38,135: INFO: [1/1] Running variant_and_sample_qc_nested_with_filters...; 2020-01-29 12:38:31,070: INFO: burn in: 112.93s; 2020-01-29 12:40:17,863: INFO: run 1: 106.79s; 2020-01-29 12:42:01,471: INFO: run 2: 103.61s; 2020-01-29 12:43:47,330: INFO: run 3: 105.86s; ```. After:; ```; 2020-01-29 12:30:18,619: INFO: [1/1] Running variant_and_sample_qc_nested_with_filters...; 2020-01-29 12:31:24,969: INFO: burn in: 66.34s; 2020-01-29 12:32:24,797: INFO: run 1: 59.82s; 2020-01-29 12:33:22,849: INFO: run 2: 58.05s; 2020-01-29 12:34:20,667: INFO: run 3: 57.81s; ```. SSDs are fast.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7989:156,benchmark,benchmarked,156,https://hail.is,https://github.com/hail-is/hail/pull/7989,1,['benchmark'],['benchmarked']
Testability,"We weren't actually testing the compaction in test and dev, which is probably why we had those initial errors in production.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13476:20,test,testing,20,https://hail.is,https://github.com/hail-is/hail/pull/13476,2,['test'],"['test', 'testing']"
Testability,We'd mixed up nullable and required. The default for nullable is False. Added test. This fixes the 500 Konrad ran into.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7915:78,test,test,78,https://hail.is,https://github.com/hail-is/hail/pull/7915,1,['test'],['test']
Testability,We're supposed to use DOCKER-USER https://docs.docker.com/network/iptables/. I also added a test.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9353:92,test,test,92,https://hail.is,https://github.com/hail-is/hail/pull/9353,1,['test'],['test']
Testability,"We're upsetting the robots of the world by not having a `robots.txt` to instruct how they should crawl the website. As retribution, they crawl everything, so this robots.txt doesn't change any indexing behavior but if there's anything we don't want indexed I can add here. Requests for `/robots.txt` and `/favicon.ico` make up a non-trivial amount of site's error logs now, so I also added a symlink to the image we use as our favicon. Hopefully this helps to further quiet the logs.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10052:364,log,logs,364,https://hail.is,https://github.com/hail-is/hail/pull/10052,2,['log'],['logs']
Testability,"We've had a number of pip issues recently, particularly incompatibilities with the `six` package. The central issue is that pip will install incompatible package versions with only a warning message. This primarily happens when a set of packages is installed (say in a parent image) and then a new set of packages are installed later. Pip attempts to satisfy all requirements of the packages in an installed set, but it does not consider the versions of packages already installed. In this PR, I pervasively change every use of `pip` to be followed by the use of `pip check`. Pip check errors if there are incompatible package versions installed. Rather than change every place that we use `pip install`, I created an ubuntu image with a script, `hail-pip-install`, and pip configuration which makes it easy to do the right thing. Now, we should always install python packages like this:. ```; hail-pip-install package1 package2 package3; ```. The script will ensure that all packages are compatible with existing packages. Moreover, it will retry downloads five times. I did not make every Dockerfile depend on the new hail-ubuntu-image because they are legacy Dockerfile that I didn't want to edit. These include the benchmark Dockerfile and some notebook workers. PySpark presented a challenge because we did not install it via pip. As a result, packages, such as Hail, which depend on PySpark failed the `pip check`. I modified all uses of PySpark to instead use the standard pip-installed version of PySpark. In particular, take a look at how query and shuffler changed. cc: @Dania-Abuhijleh @catoverdrive",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9593:1219,benchmark,benchmark,1219,https://hail.is,https://github.com/hail-is/hail/pull/9593,1,['benchmark'],['benchmark']
Testability,"We've run into this on Hail Batch 0.2.108. Binaries unfortunately sometimes produce binary output in logs (through `stdout` or `stderr`), e.g. `tabix` does that when it encounters the wrong input format. It appears that Hail Batch doesn't display _any_ log in such circumstances. That makes debugging the underlying issue really hard. For some reason, this seems to specifically happen with the byte value of 128. A simple way to reproduce this is to run the following commands in a batch:. ```python; job.command(""echo 'hi there :)'""); job.command(""echo -n -e '\\x80'""); ```. This will result in a `ERROR: could not find log file`.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/12614:101,log,logs,101,https://hail.is,https://github.com/hail-is/hail/issues/12614,3,['log'],"['log', 'logs']"
Testability,"Website is an aiohttp application which templates docs pages and normal pages. This opens the path; towards unifying the visual appearance of hail.is, the docs, and the services. I simplified documentation generation at the cost of building the docs twice per commit. A new step,; `make_pip_versioned_docs` builds the pip version of the docs without testing them. `make_docs`; continues to work as it did before. The website uses the docs from `make_pip_versioned_docs`. The; GCS docs location is now completely unused. Website has four key folders:. - `website/website/pages/`: Jinja2 templated HTML pages. Served at `/`. - `website/website/docs/`: Hail & Batch docs pages, all HTML pages are templated with Jinja2.; Served at `/docs`. - `website/website/templates/`: Jinaj2 templates that are used in pages or in docs. - `website/website/static/`: Non-templated files. Served at `/static`. The website can be developed locally in or outside of Docker:; ```; make -C website run; ```; or; ```; make -C website rundocker; ```. ---. I had to rename site to website due to a Python package conflict. I also deleted two unused css; files. I also removed PLINK from hail_run_image because it was slowing down my iteration speed; and was a long-term FIXME anyway.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10056:350,test,testing,350,https://hail.is,https://github.com/hail-is/hail/pull/10056,1,['test'],['testing']
Testability,"What happened?. Minor issue: the following code produces a cryptic ValueError:. ```; import hailtop.batch as hb; b = hb.Batch(backend=hb.ServiceBackend()); b.run(); ```. Example:; <img width=""559"" alt=""image"" src=""https://github.com/hail-is/hail/assets/6240170/a62295fb-094a-48b1-9959-eadfad1c3adc"">. Here is the full stack trace:; ```; Traceback (most recent call last):; File ""single_sample_vcfs/single_sample_vcf_pipeline.py"", line 154, in <module>; main(); File ""single_sample_vcfs/single_sample_vcf_pipeline.py"", line 95, in main; b.run(); File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/hailtop/batch/batch.py"", line 687, in run; run_result = self._backend._run(self, dry_run, verbose, delete_scratch_on_exit, **backend_kwargs) # pylint: disable=assignment-from-no-return; File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/hailtop/batch/backend.py"", line 543, in _run; self._async_run(batch, dry_run, verbose, delete_scratch_on_exit, wait, open, disable_progress_bar, callback, token, **backend_kwargs)); File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/hailtop/utils/utils.py"", line 152, in async_to_blocking; return loop.run_until_complete(task); File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/nest_asyncio.py"", line 81, in run_until_complete; return f.result(); File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/asyncio/futures.py"", line 181, in result; raise self._exception; File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/asyncio/tasks.py"", line 249, in __step; result = coro.send(None); File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/hailtop/batch/backend.py"", line 792, in _async_run; starting_job_id = min(j._client_job.job_id for j in unsubmitted_jobs); ValueError: min() arg is an empty sequence; ```. ### Version. 0.2.115. ### Relevant log output. _No response_",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13132:1979,log,log,1979,https://hail.is,https://github.com/hail-is/hail/issues/13132,1,['log'],['log']
Testability,What level of confidence do we need in this? Definitely not something our CI test suite supports.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11156:77,test,test,77,https://hail.is,https://github.com/hail-is/hail/pull/11156,1,['test'],['test']
Testability,What might be the issue as I had an error reported while running:. hail importvcf /user/jkoskela/ibd/vcf/v30_ibd_exomes.vcf.bgz splitmulti \. > write -o /user/jkoskela/ibd/hail/v30_split_ibd.vds; > hail: info: running: importvcf /user/jkoskela/ibd/vcf/v30_ibd_exomes.vcf.bgz; > [Stage 0:====================================================>(4569 + 1) / 4570]hail: info: Coerced sorted dataset; > hail: info: running: splitmulti; > hail: info: running: write -o /user/jkoskela/ibd/hail/v30_split_ibd.vds; > [Stage 2:> (0 + 162) / 4570]hail: write: caught exception: org.apache.spark.SparkException: Job aborted. Log can be found in:. /humgen/atgu1/fs03/jkoskela/hail.log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/913:611,Log,Log,611,https://hail.is,https://github.com/hail-is/hail/issues/913,2,"['Log', 'log']","['Log', 'log']"
Testability,"When I test this, I get; ```; FatalError: IllegalFormatConversionException: d != java.lang.String. Java stack trace:; is.hail.utils.HailException: Encountered invalid type for format string %d: format specifier d does not accept type java.lang.String; 	at is.hail.utils.ErrorHandling.fatal(ErrorHandling.scala:15); 	at is.hail.utils.ErrorHandling.fatal$(ErrorHandling.scala:15); 	at is.hail.utils.package$.fatal(package.scala:78); 	at is.hail.expr.ir.functions.UtilFunctions$.format(UtilFunctions.scala:168); 	at __C12Compiled.__m15format(Emit.scala); ... java.util.IllegalFormatConversionException: d != java.lang.String; 	at java.util.Formatter$FormatSpecifier.failConversion(Formatter.java:4302); 	at java.util.Formatter$FormatSpecifier.printInteger(Formatter.java:2793); 	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2747); 	at java.util.Formatter.format(Formatter.java:2520); 	at java.util.Formatter.format(Formatter.java:2455); 	at java.lang.String.format(String.java:2940); 	at is.hail.expr.ir.functions.UtilFunctions$.format(UtilFunctions.scala:165); 	at __C12Compiled.__m15format(Emit.scala); ... Hail version: 0.2.74-4d495f1c5e01; Error summary: IllegalFormatConversionException: d != java.lang.String; ```. Why is the summary not the `HailException` string?",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10827:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/pull/10827,1,['test'],['test']
Testability,"When I timed the specific code block we hid behind the flag, it took; about 1.5 seconds on the benchmark dataset. This check scales linearly with the number of samples, though, which is not great.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6669:95,benchmark,benchmark,95,https://hail.is,https://github.com/hail-is/hail/pull/6669,1,['benchmark'],['benchmark']
Testability,"When adding Azure CI, we made its context `hail-ci-azure`. This way, our primary CI would pick up any additional statuses that start with `hail-ci` and not merge PRs unless all those statuses were also green. The original GCP status, however, is still `ci-test`. This is awkward for a number of reasons:. - Inconsistent naming; - ci.azure.hail.is does not report the GCP status; - As a result of the above, Azure CI might not always make the same decisions as to who the merge candidate should be. The last is the most bothersome and the reason for this change. An example of how this can deadlock the current CI system is the following:. | |GCP |Azure |; |----|--------|----------|; |1 |Fail |Success |; |2 |Success|Pending |. GCP will see PR 2 as the merge candidate because out of the 2 it has no failing checks, and will wait for Azure to post a status. Azure, on the other hand, does not see GCP's status, and so views PR 1 as ready to merge and has no need to run any other PRs. Azure does not issue merge requests to Github as it is not the primary CI. This stalls both CIs until someone manually retries PR 2 on Azure or otherwise changes the system. The way in which we decide the merge priority should not be different on different CI instances, so long as each instance has the same view of the PRs. This PR is a step toward fixing that. I want to just change the GCP CI's status to `hail-ci-gcp` instead of the legacy `ci-test`. However, I don't want all the existing PR statuses to go to waste. So, this change picks up `ci-test` statuses in addition to `hail-ci-*` statuses, and mirrors any `ci-test` status as `hail-ci-gcp`. This way, if I change GCP's status to `hail-ci-gcp`, it will see existing statuses as its own and not try to re-compute statuses for all existing PRs. Once a PR has a real `hail-ci-gcp` status, I can go and delete the `ci-test` status without disturbing the system. Once all `ci-test` statuses are gone, we can just delete any mention of `ci-test` in the code b",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11958:256,test,test,256,https://hail.is,https://github.com/hail-is/hail/pull/11958,1,['test'],['test']
Testability,When building hail from source on an Apple M1 MacBook Pro . `make install HAIL_COMPILE_NATIVES=1 `. I get . ```; /Library/Developer/CommandLineTools/usr/bin/make -C src/main/c prebuilt; c++ -march=native -O3 -std=c++14 -Ilibsimdpp-2.1 -Wall -Wextra -fPIC -ggdb -fno-strict-aliasing -I../resources/include -I/Library/Java/JavaVirtualMachines/jdk-17.0.1.jdk/Contents/include -I/Library/Java/JavaVirtualMachines/jdk-17.0.1.jdk/Contents/include/darwin testutils/unit-tests.cpp -MG -M -MF build/testutils/unit-tests.d -MT build/testutils/unit-tests.o; clang: error: the clang compiler does not support '-march=native'; ```. This issue is related specifically to new MacBook hardware and not hail itself but I cannot find an obvious way to fix this from searching online. Has anyone seen this and know how to resolve the issue?,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/11729:448,test,testutils,448,https://hail.is,https://github.com/hail-is/hail/issues/11729,6,['test'],"['tests', 'testutils']"
Testability,"When buliding hail , There are several problems ，please help，thanks. [root@**\* hail]# gradle shadowJar; Using a seed of [1] for testing.; Build file '/**_/hail/build.gradle': line 188; useAnt has been deprecated and is scheduled to be removed in Gradle 3.0. The Ant-Based Scala compiler is deprecated, please see https://docs.gradle.org/current/userguide/scala_plugin.html.; :compileJava UP-TO-DATE; :compileScala; /**_/hail/src/main/scala/org/broadinstitute/hail/expr/AST.scala:135: not enough arguments for constructor AnnotationPathException: (msg: String)org.broadinstitute.hail.annotations.AnnotationPathException; throw new AnnotationPathException(); ^; /**_/hail/src/main/scala/org/broadinstitute/hail/expr/AST.scala:153: not enough arguments for constructor AnnotationPathException: (msg: String)org.broadinstitute.hail.annotations.AnnotationPathException; throw new AnnotationPathException(); ^; /**_/hail/src/main/scala/org/broadinstitute/hail/expr/AST.scala:162: not enough arguments for constructor AnnotationPathException: (msg: String)org.broadinstitute.hail.annotations.AnnotationPathException; throw new AnnotationPathException(); ^; /**_/hail/src/main/scala/org/broadinstitute/hail/expr/AST.scala:661: not enough arguments for constructor AnnotationPathException: (msg: String)org.broadinstitute.hail.annotations.AnnotationPathException; case None => throw new AnnotationPathException(); ^; /**_/hail/src/main/scala/org/broadinstitute/hail/expr/AST.scala:753: not enough arguments for constructor AnnotationPathException: (msg: String)org.broadinstitute.hail.annotations.AnnotationPathException; throw new AnnotationPathException(); ^; 5 errors found; :compileScala FAILED. FAILURE: Build failed with an exception.; - What went wrong:; Execution failed for task ':compileScala'.; ; > Compilation failed; - Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 39.537 secs",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/454:129,test,testing,129,https://hail.is,https://github.com/hail-is/hail/issues/454,2,"['log', 'test']","['log', 'testing']"
Testability,"When installing XML::LibXML, `cpanm` installs the module and then runs tests, and there are currently two tests for the module that are failing. That in itself is concerning, but I just wanted to see if it would break our use of VEP, so I disabled the tests when installing that module.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12996:71,test,tests,71,https://hail.is,https://github.com/hail-is/hail/pull/12996,3,['test'],['tests']
Testability,"When the Output step of a CI job is running, the Main logs (which were previously visible while Main was running) are set to `None` in the job page. After the Output step completes, the Main logs become visible again.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7619:54,log,logs,54,https://hail.is,https://github.com/hail-is/hail/issues/7619,2,['log'],['logs']
Testability,"When using GNU Make 4.3, the slashes in the json string in; query/Makefile were being passed unmodified as arguments to the python; copy process. In order to fix this, I had to put the json input on one; line. Furthermore, I converted all indents to tabs for consistency. I also modified hailtop.aiotools.copy to read from standard input if '-'; or no 'files' argument is provided. I belive this will allow easier use; of the copy tool by end users, for example, using [jo], the copy; invocation looks like:. ```make; 	jo -a \; 		$$(jo from=../hail/src/test/resources to=$(HAIL_TEST_RESOURCES_DIR)) \; 		$$(jo from=../hail/python/hail/docs/data to=$(HAIL_DOCTEST_DATA_DIR)) | \; 		python3 -m hailtop.aiotools.copy 'null'; ```. [jo]: https://jpmens.net/2016/03/05/a-shell-command-to-create-json-jo/",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11634:553,test,test,553,https://hail.is,https://github.com/hail-is/hail/pull/11634,1,['test'],['test']
Testability,"When virtual type requiredeness is removed, fix all tests that pass a value for required. IRSuite in particular have tests of different virtual type requiredeness that should be fixed.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7973:52,test,tests,52,https://hail.is,https://github.com/hail-is/hail/issues/7973,2,['test'],['tests']
Testability,"When we attempt to build the vep 95 docker image, we have issues installing LibXML causing later failures. Not sure why this is happening.; From https://batch.hail.is/batches/8209583/jobs/27; ```; #13 423.5 Building and testing XML-LibXML-2.0210 ... ! Installing XML::LibXML failed. See /root/.cpanm/work/1727981951.12888/build.log for details. Retry with --force to force install it.; #13 453.0 FAIL; ```; leading to; ```; #13 724.7 ! Installing the dependencies failed: Module 'XML::LibXML' is not installed, Module 'XML::LibXML::Reader' is not installed; #13 724.7 ! Bailing out the installation for BioPerl-1.7.8.; #13 724.7 ! Installing the dependencies failed: Module 'Bio::Root::Version' is not installed; #13 724.7 ! Bailing out the installation for Bio-BigFile-1.07.; #13 724.7 63 distributions installed; #13 ERROR: executor failed running [/bin/sh -c export KENT_SRC=$PWD/kent-335_base/src && export MACHTYPE=$(uname -m) && export CFLAGS=""-fPIC"" && export MYSQLINC=""mysql_config --include | sed -e 's/^-I//g'"" && export MYSQLLIBS=""mysql_config --libs"" && wget https://github.com/ucscGenomeBrowser/kent/archive/v335_base.tar.gz && tar xzf v335_base.tar.gz && cd $KENT_SRC/lib && echo 'CFLAGS=""-fPIC""' > ../inc/localEnvironment.mk && make clean && make && cd ../jkOwnLib && make clean && make && mkdir -p $VEP_DIR/cpanm && export PERL5LIB=\$PERL5LIB:$HOME/cpanm/lib/perl5 && cpanm Bio::DB::BigFile]: exit code: 1; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14710:220,test,testing,220,https://hail.is,https://github.com/hail-is/hail/issues/14710,2,"['log', 'test']","['log', 'testing']"
Testability,"When workers shut down, we get warning logs about unclosed client sessions, as seen in #14261. While it can be difficult to derive the source of the client session, I think it's the one held by the `GCPWorkerAPI`. I've added an exit stack and added the session's close method to it. I also made a small change to `Worker`. I find it can be difficult to determine whether or not a particular class should close a client session because it's not always clear who owns it. Without a clear way to communicate this in python, I think we should just never transfer ownership of a `ClientSession` and always assume that if an object's constructor takes a client session, it should be assumed a borrow and not close the session when the object is closed. As such, I moved the call to `client_session()` into the `Worker` constructor so it's clear that the worker owns the session.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14418:39,log,logs,39,https://hail.is,https://github.com/hail-is/hail/pull/14418,1,['log'],['logs']
Testability,"Whenever the batch driver shuts down we have some errors due to unclosed aiohttp `ClientSession`s. Deploying the driver in asyncio debug mode revealed that these sessions were in the `ComputeClient` and `LoggingClient`, which we don't call `close` on (and we don't use them as context managers). After this change I was able to delete my driver pod without any unclosed client session errors (though plenty of cancelled errors, which is a separate issue.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10634:204,Log,LoggingClient,204,https://hail.is,https://github.com/hail-is/hail/pull/10634,1,['Log'],['LoggingClient']
Testability,"While I was running the script shown below. I got the error message. I attach the log file. Do you know what cause the errors ? Thanks . ```; hail -l /medpop/afib/schoi/projects/TOPMed/Script/log/TopMed.Chr22.QC.vds.log \; importvcf file:///medpop/afib/schoi/projects/TOPMed/Data/BROAD/Link/Chr22/*.bgz splitmulti \; filtervariants expr -c 'v.contig == ""X"" || v.contig == ""Y"" || v.contig == ""MT""' --remove \; filtersamples list -i file:///medpop/afib/schoi/projects/TOPMed/Result/TopMed_nodup.6998.sample.map --keep \; sampleqc -o file:///medpop/afib/schoi/projects/TOPMed/Result/SampleQC/chrom/TOPMed.PreQC.sampleqc.chr22.tsv \; variantqc -o file:///medpop/afib/schoi/projects/TOPMed/Result/VariantQC/chrom/TOPMed.PreQC.variantqc.chr22.tsv \; annotatevariants expr -c 'va.info.AC = va.info.AC[va.aIndex]' \; filtergenotypes -c '(g.ad[0] + g.ad[1]) / g.dp < 0.9 || (g.isHomRef && (g.ad[0] / g.dp < 0.9 || g.gq < 20)) || (g.isHet && (g.ad[1] / g.dp < 0.20 || g.pl[0] < 20)) || (g.isHomVar && (g.ad[1] / g.dp < 0.9 || g.pl[0] < 20)) || g.dp > 200' --remove \; variantqc -o file:///medpop/afib/schoi/projects/TOPMed/Result/VariantQC/chrom/TOPMed.QCstep1.variantqc.Chr22.tsv \; annotatevariants intervals -r va.isLCF -i file:///medpop/afib/schoi/projects/TOPMed/Data/LCR/LCR.interval_list \; annotatevariants expr -c 'va.AC1 = va.qc.AC,; va.good = ((va.info.QD > 3 && v.altAllele.isIndel) || (va.info.QD > 2 && v.altAllele.isSNP)) && (va.qc.callRate > 0.95)' \; annotateglobal expr -c 'global.badVQSLOD = variants.count(va.pass),; global.badQD = variants.count((va.info.QD <= 3 && v.altAllele.isIndel) || (va.info.QD <= 2 && v.altAllele.isSNP)),; global.badCallRate = variants.count(va.qc.callRate <= 0.95),; global.nIndel_1 = variants.count(v.altAllele.isIndel && va.AC1 > 0),; global.nSNP_1 = variants.count(v.altAllele.isSNP && va.AC1 > 0),; global.nIndel_2 = variants.count(v.altAllele.isIndel && va.AC1 > 0 && va.pass),; global.nSNP_2 = variants.count(v.altAllele.isSNP && va.AC1 > 0 && va.pass),; gl",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/660:82,log,log,82,https://hail.is,https://github.com/hail-is/hail/issues/660,3,['log'],['log']
Testability,"While only used in a few places, this helps us generate; much better code in the case where we emit error-checking; IRs as below:. ```; If; <error_condition>; Die err_msg; <value we want>; ```. The code generator for the `If` node uses `SType.canonical` to; choose its result type, and casts both consequent and alternate; values to that type. We want the stype of the result here to be; the type of the alternate `<value we want>`, which we can achieve; by adding unreachable types/codes for the `SType.canonical` logic.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10539:515,log,logic,515,https://hail.is,https://github.com/hail-is/hail/pull/10539,1,['log'],['logic']
Testability,"With 1 core on my local computer, it went from 49.832s to 10.254s with this change. I removed the random test (count=10) of pruning `sample.vcf` with random partition numbers, window size, and r2 threshold. This is replaced with one test with default parameters (R^2 = 0.2, window size = 1MB). I also moved the vcf import as a class value so it wasn't being reimported for each test.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3409:105,test,test,105,https://hail.is,https://github.com/hail-is/hail/pull/3409,3,['test'],['test']
Testability,"With this table; ```; ds = hl.utils.range_table(10); ds = ds.annotate(t=hl.tuple([1, ""Foo"", True])); ds.write(""test.ht""); ```. `hailctl dataproc describe test.ht` currently outputs the following for ""Row fields"":; ```; ----------------------------------------; Row fields:; 'idx': int32; 't': tuple<>; ----------------------------------------; ```. With this change, it outputs:; ```; ----------------------------------------; Row fields:; 'idx': int32; 't': tuple<int32, str, bool>; ----------------------------------------; ```",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8939:111,test,test,111,https://hail.is,https://github.com/hail-is/hail/pull/8939,2,['test'],['test']
Testability,"Without `--cache-repo`, Kaniko uses `{image_name}/cache` (e.g. `gcr.io/hail-vdc/batch-worker/cache`). That works particularly poorly for all the test images which are `gcr.io/hail-vdc/ci-intermediate` and therefore don't share a cache with the default images.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10396:145,test,test,145,https://hail.is,https://github.com/hail-is/hail/pull/10396,1,['test'],['test']
Testability,"Without this `make test-local` fails because there is no running server. This ensures that `make test-local` first starts a server to test against. Recreated for stacked PRs from #4785. ---. The `until curl ...` nonsense is because the server takes some time to start up, so we poll until we get a successful return value from `curl`. `-f` means return non-zero-exit-code on failure. `-L` means follow redirects (not really necessary here, but I think it's good practice to use `-L`). `BATCH_USE_KUBE_CONFG=1` tells batch to use the latent kubernetes configuration, which means the developer must already have set up `kubectl`. This is a reasonable expectation for a developer of `batch`. The `trap cleanup EXIT` ensures we run cleanup before the shell exits. `trap ""exit 24"" INT TERM` converts interruption (`Ctrl-c`) and termination (`kill -15`) into an `EXIT` signal. We do this to ensure that the exit handler is called once. if we did `trap cleanup EXIT INT TERM` some shells would call `cleanup` twice. Once for the interruption and once for the shell exiting. Inside `cleanup` we `trap """" INT TERM` to make `Ctrl-c` do nothing, because the user COUGH cotton COUGH might smash ctrl-c repeatedly and we might not kill the subprocess before they kills us ;).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4786:19,test,test-local,19,https://hail.is,https://github.com/hail-is/hail/pull/4786,3,['test'],"['test', 'test-local']"
Testability,"Without this `make test-local` fails because there is no running server. This ensures that `make test-local` first starts a server to test against. The `until curl ...` nonsense is because the server takes some time to start up, so we poll until we get a successful return value from `curl`. `-f` means return non-zero-exit-code on failure. `-L` means follow redirects (not really necessary here, but I think it's good practice to use `-L`). `BATCH_USE_KUBE_CONFG=1` tells batch to use the latent kubernetes configuration, which means the developer must already have set up `kubectl`. This is a reasonable expectation for a developer of `batch`. The `trap cleanup EXIT` ensures we run cleanup before the shell exits. `trap ""exit 24"" INT TERM` converts interruption (`Ctrl-c`) and termination (`kill -15`) into an `EXIT` signal. We do this to ensure that the exit handler is called once. if we did `trap cleanup EXIT INT TERM` some shells would call `cleanup` twice. Once for the interruption and once for the shell exiting. Inside `cleanup` we `trap """" INT TERM` to make `Ctrl-c` do nothing, because the user COUGH cotton COUGH might smash ctrl-c repeatedly and we might not kill the subprocess before they kills us ;).",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4785:19,test,test-local,19,https://hail.is,https://github.com/hail-is/hail/pull/4785,3,['test'],"['test', 'test-local']"
Testability,Without this it is a huge pain to run the services tests locally.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9717:51,test,tests,51,https://hail.is,https://github.com/hail-is/hail/pull/9717,1,['test'],['tests']
Testability,"Wonder what your thoughts are on this. I think that we have too deep an image hierarchy and that it's only stalling our time-to-test in CI. I propose here getting rid of the run-tests image and just putting plink in the hail-run image. I also remove the dependency on service-base and just install hailtop in the hail-run image -- I don't think anything hail/hail should depend on services code. This change actually revealed an accidental dependency where there was a gear (services) test in the hail/python tests. I moved that over to the batch suite as batch is the primary user of that class and we don't have a gear suite atm. Ultimately, I think we should have a pretty flat docker image hierarchy. Each of our Dockerfiles does a decent job of following the docker mantra of dependencies first, code later. But if you consider the fact that we stack images on top of each other then you can see that in reality that doesn't translate to our images! We instead get an interleaving of hail code and dependencies such that it's very easy to break the cache for images like this one.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12396:128,test,test,128,https://hail.is,https://github.com/hail-is/hail/pull/12396,4,['test'],"['test', 'tests']"
Testability,"Workers can dynamically attach disks to themselves to accommodate jobs that request storage that the VM cannot accommodate. In certain circumstances like preemption, the VM can disappear before it is able to delete its own disks, so the Batch Driver scans for disks that are no longer attached (orphaned) and deletes them. It looks like our disk cleanup loop was broken due to inadvertent mutation that leads to an assertion error if the same `params` argument is used in multiple invocations of `GoogleComputeClient.list`. This is preventing orphaned disks from being deleted, costing us money. Additional details are in #14613. Fixes #14613",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14614:415,assert,assertion,415,https://hail.is,https://github.com/hail-is/hail/pull/14614,1,['assert'],['assertion']
Testability,Workflow:. ```; $ hdfs dfs -rm -r src/test/resources; $ hdfs dfs -put src/test/resources src/test; $ ./gradlew shadowTestJar; $ SPARK_CLASSPATH=./build/libs/hail-all-spark-test.jar spark-submit --total-executor-cores 2 --class org.testng.TestNG ./build/libs/hail-all-spark-test.jar ./testng.xml; ```,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/749:38,test,test,38,https://hail.is,https://github.com/hail-is/hail/pull/749,8,"['Test', 'test']","['TestNG', 'test', 'testng']"
Testability,"Working in cluster. Fixes the below error, the origin of which I'm not quite sure: does it happen because wherever CI builds this has spark2.4 installed, or is spark2.4 pulled by gradlew shadowJar (I don't see where this happens, but I also haven't looked very carefully). ```; install-hail-locally:; 	rm -rf build; 	(cd ../hail && GRADLE_OPTS=-Xmx2048m ./gradlew shadowJar --gradle-user-home /gradle-cache); 	mkdir -p build/hail/jars; 	mkdir -p build/hail/python; 	cp -a ../hail/build/libs/hail-all-spark.jar build/hail/jars; 	cp -a ../hail/python/hail build/hail/python. build-hail-base: build-spark-base install-hail-locally; ```. <img width=""814"" alt=""Screenshot 2019-04-10 13 22 01"" src=""https://user-images.githubusercontent.com/5543229/55902941-79ea4c00-5b9a-11e9-9899-8e37311c4d06.png"">. ; Only issue I see is; """"""; 2019-04-10 18:00:59 WARN NativeCodeLoader:62 - Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Setting default log level to ""WARN""; """""""". not sure if that's new, but googling around suggests the typical solution is warning suppression. cc @cseed",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5850:990,log,log,990,https://hail.is,https://github.com/hail-is/hail/pull/5850,1,['log'],['log']
Testability,"Working on the safe memory allocator that checks if we are accessing invalid memory, it's catching this 0 pointer. . There are already tests that hit `TableWriter`, and this should result in no functionality change.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8970:135,test,tests,135,https://hail.is,https://github.com/hail-is/hail/pull/8970,1,['test'],['tests']
Testability,"Would be nice to be able to use log/log10 - this way, if I filter by pHWE, I won't have to type out the full float and potentially miss a zero",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/527:32,log,log,32,https://hail.is,https://github.com/hail-is/hail/issues/527,1,['log'],['log']
Testability,Write AST to IR conversion message to log instead of console,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/3246:38,log,log,38,https://hail.is,https://github.com/hail-is/hail/pull/3246,1,['log'],['log']
Testability,Write a message to user / log about currently silent shuffles,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/3799:26,log,log,26,https://hail.is,https://github.com/hail-is/hail/issues/3799,1,['log'],['log']
Testability,"Write loading lines from text files in a way that can be used by Spark or table lowering. This will be to lower the VCF and text file importers. This handles three cases:; - an (splittable) uncompressed file,; - a (splittable) bgzip compressed file, and; - an non-splittable compressed file compressed by some other codec. In this case, it will be loaded as a single partition. I test each of the three cases. I also ported the prexisting partition test that generates random splittings and tests that in the bgzip case. I tested with the number of tests turned up to 10,000. Two ideas here:. Each line has a fixed offset depending on the case (file offset, virtual offset, or decompressed offset). The split defines a partition of the offset spaces. For a partition (start, end), and line with offset x, the line belongs in the partition if x lies in the range (start, end] or, if it is the first partition, [start, end]. This is because, if at the beginning of a split, you can't tell if the line started earlier or not. The second idea is to copy the blocks one at a time into buf. bgzip blocks are max 64KB. `read` on a BGzipInputStream doesn't return data that spans blocks. So buf always contains the entire data for a block. This is used to track the offset o the beginning of the line.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8662:380,test,test,380,https://hail.is,https://github.com/hail-is/hail/pull/8662,5,['test'],"['test', 'tested', 'tests']"
Testability,"YAML has an arbitrary extension mechanism. pyYAML defines a python extension that lets you create arbitrary python objets. This is clearly a huge security vulnerability. Apparently, pyYAML, by default, enables this extension (rather than just parsing vanilla YAML, 🤦‍♀️). `safe_load` loads vanilla YAML without the gaping security hole. I was getting warnings about this when testing.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5825:376,test,testing,376,https://hail.is,https://github.com/hail-is/hail/pull/5825,1,['test'],['testing']
Testability,"Yet Another Terraform Refactoring PR, this creates two simple modules:; - A gcs_bucket module to remove the redundancy of resources that we have across the batch-logs, query and test bucket; - A ukbb module which sets up the ukbb k8s resources. While this technically would allow us to reuse this, say in azure, it's more an attempt to tease it apart from the google-specific infrastructure so that we wouldn't have to. In short, it would be nice to organize things such that deploying hail with or without the ukbb site is as simple as choosing to include or omit a terraform module.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10842:162,log,logs,162,https://hail.is,https://github.com/hail-is/hail/pull/10842,2,"['log', 'test']","['logs', 'test']"
Testability,[0.1] Reworked logging to route log output through Python stderr (#2063),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2109:15,log,logging,15,https://hail.is,https://github.com/hail-is/hail/pull/2109,2,['log'],"['log', 'logging']"
Testability,[0.1] Reworked logging to route log output through Python stderr.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/2064:15,log,logging,15,https://hail.is,https://github.com/hail-is/hail/pull/2064,2,['log'],"['log', 'logging']"
Testability,[17]([Ljava.lang.String;@47162b74)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[17]([Ljava.lang.String;@47162b74) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[18]([Ljava.lang.String;@70bfbb33) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2)(is.hail.io.IndexSuite). Gradle suite > Gradle test > is.hail.io.IndexSuite.writeReadGivesSameAsInput[19]([Ljava.lang.String;@3e391ee2) FAILED; java.lang.AssertionError at IndexSuite.scala:42; Running test: Test method testCXXCodeFunctions(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testCXXCodeFunctions PASSED; Running test: Test method testNativeBuild(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeBuild PASSED; Running test: Test method testNativeCallSpeed(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeCallSpeed PASSED; Running test: Test method testNativeGlobal(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeGlobal PASSED; Running test: Test method testNativePtr(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativePtr PASSED; Running test: Test method testNativeUpcall(is.hail.nativecode.NativeCodeSuite); DEBUG: Logging set_test_msg ... Gradle suite > Gradle test > is.hail.nativecode.NativeCodeSuite.testNativeUpcall PASSED; Running test: Test method testObjectArray(is.hail.nativecode.NativeCodeSuite). Gradle suite > Gradle test > is.hail.nativecode.Native,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/4718:8119,test,testCXXCodeFunctions,8119,https://hail.is,https://github.com/hail-is/hail/issues/4718,4,"['Test', 'test']","['Test', 'test', 'testCXXCodeFunctions', 'testNativeBuild']"
Testability,[Auth] Always select user during login prompt,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14636:33,log,login,33,https://hail.is,https://github.com/hail-is/hail/pull/14636,1,['log'],['login']
Testability,[Benchmark] Add header dropdown,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9314:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9314,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] Add indices and axis labels to plot,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9280:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9280,2,['Benchmark'],['Benchmark']
Testability,[Benchmark] Enable benchmark to read from any benchmarks bucket,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9296:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9296,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark', 'benchmarks']"
Testability,[Benchmark] Enable benchmark to read from multiple buckets,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9359:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9359,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,[Benchmark] Fix typo and add rounding wrapper function,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9454:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9454,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] GitHub polling loop,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9547:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9547,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] Global state for gs reader,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9361:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9361,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] Read JSON file from Google storage,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9252:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9252,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] Submit,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9505:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9505,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] Submit dummy batch test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9614:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9614,2,"['Benchmark', 'test']","['Benchmark', 'test']"
Testability,[Benchmark] add autocomplete,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9393:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9393,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] add autocomplete to compare,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9442:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9442,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] add page to compare two benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9284:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9284,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,[Benchmark] added indices and axis labels plot tags,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9282:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9282,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] fix error by adding .json ext to file name,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9669:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9669,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] fix file path,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9673:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9673,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] fix update commits,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9676:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9676,2,['Benchmark'],['Benchmark']
Testability,[Benchmark] fixes (for 500 server error),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9477:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9477,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] get JSON file from google bucket,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9214:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9214,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] read JSON file from google bucket,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9215:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9215,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] rename HAIL_VERSION to HAIL_PIP_VERSION,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9500:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9500,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] submit button read JSON from google bucket,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9211:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9211,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] submit ui,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9741:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9741,1,['Benchmark'],['Benchmark']
Testability,[Benchmark] test update_commits,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9689:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9689,2,"['Benchmark', 'test']","['Benchmark', 'test']"
Testability,[Benchmark] update commits,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9638:1,Benchmark,Benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9638,1,['Benchmark'],['Benchmark']
Testability,[CI] More merge logging in CI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14674:16,log,logging,16,https://hail.is,https://github.com/hail-is/hail/pull/14674,1,['log'],['logging']
Testability,[CI] fix assertion,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4677:9,assert,assertion,9,https://hail.is,https://github.com/hail-is/hail/pull/4677,1,['assert'],['assertion']
Testability,[Config] Appsec sandbox config and files,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14726:16,sandbox,sandbox,16,https://hail.is,https://github.com/hail-is/hail/pull/14726,1,['sandbox'],['sandbox']
Testability,[Here](https://ci.daniel-azure.hail.is/batches/1253/jobs/129)'s an example of the failing test. I think the `--service-principal` should fix,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11124:90,test,test,90,https://hail.is,https://github.com/hail-is/hail/pull/11124,1,['test'],['test']
Testability,[QoB] disable import_plink using tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11987:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/11987,1,['test'],['tests']
Testability,[RFC] Proposal: Move to sandboxed containers,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5111:24,sandbox,sandboxed,24,https://hail.is,https://github.com/hail-is/hail/issues/5111,1,['sandbox'],['sandboxed']
Testability,"[SIG Node]</li>; <li>Kubelet: add '--logging-format' flag to support structured logging (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/91532"">kubernetes/kubernetes#91532</a>, <a href=""https://github.com/afrouzMashaykhi""><code>@​afrouzMashaykhi</code></a>) [SIG API Machinery, Cluster Lifecycle, Instrumentation and Node]</li>; <li>Kubernetes is now built with golang 1.15.0-rc.1.; <ul>; <li>The deprecated, legacy behavior of treating the CommonName field on X.509 serving certificates as a host name when no Subject Alternative Names are present is now disabled by default. It can be temporarily re-enabled by adding the value x509ignoreCN=0 to the GODEBUG environment variable. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/93264"">kubernetes/kubernetes#93264</a>, <a href=""https://github.com/justaugustus""><code>@​justaugustus</code></a>) [SIG API Machinery, Auth, CLI, Cloud Provider, Cluster Lifecycle, Instrumentation, Network, Node, Release, Scalability, Storage and Testing]</li>; </ul>; </li>; <li>Promote Immutable Secrets/ConfigMaps feature to Beta and enable the feature by default.; This allows to set <code>Immutable</code> field in Secrets or ConfigMap object to mark their contents as immutable. (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/89594"">kubernetes/kubernetes#89594</a>, <a href=""https://github.com/wojtek-t""><code>@​wojtek-t</code></a>) [SIG Apps and Testing]</li>; <li>Remove <code>BindTimeoutSeconds</code> from schedule configuration <code>KubeSchedulerConfiguration</code> (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/91580"">kubernetes/kubernetes#91580</a>, <a href=""https://github.com/cofyc""><code>@​cofyc</code></a>) [SIG Scheduling and Testing]</li>; <li>Remove kubescheduler.config.k8s.io/v1alpha1 (<a href=""https://github-redirect.dependabot.com/kubernetes/kubernetes/pull/89298"">kubernetes/kubernetes#89298</a>, <a href=""https://github.com/gavi",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11462:11099,Test,Testing,11099,https://hail.is,https://github.com/hail-is/hail/pull/11462,1,['Test'],['Testing']
Testability,[This is what the nginx docker image does](https://github.com/nginxinc/docker-nginx/blob/master/stable/alpine/Dockerfile#L136-L137). The polls will finish first so we'll still see those logs.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4428:186,log,logs,186,https://hail.is,https://github.com/hail-is/hail/pull/4428,1,['log'],['logs']
Testability,"[This test](https://github.com/hail-is/hail/blob/9ad2e64bd7570199ebdb64304b6ca6599749b260/hail/python/test/hail/utils/test_utils.py#L88) suggests that `fs.open` should fail immediately if the desired blob does not already exist. This is true of the hadoop and the aiogoogle FS implementations. The azure implementation varies slightly in that `open` will succeed if the blob does not exist but *read* will throw an exception. The current async fs test for a nonexistent file does both open and read so the subtle distinction is flying under the radar. The azure sdk intentionally allows you to create a blob client for a blob that doesn't exist, so we have to do an existence check ourselves.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11852:6,test,test,6,https://hail.is,https://github.com/hail-is/hail/pull/11852,3,['test'],['test']
Testability,[UI] Remove broken Log out; provide another option,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14639:19,Log,Log,19,https://hail.is,https://github.com/hail-is/hail/pull/14639,1,['Log'],['Log']
Testability,[`hail/hail-ci-build.sh` has a cluster](https://github.com/hail-is/hail/blob/master/hail/hail-ci-build.sh#L235-L250) and we should use it to run the full python test suite. The archiveZip should contain the tests (it's just a zip of the python folder). We should be able to invoke pytest on the test dir as a module from a `cluster submit`ed python script.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5143:161,test,test,161,https://hail.is,https://github.com/hail-is/hail/issues/5143,3,['test'],"['test', 'tests']"
Testability,[`orjson`](https://github.com/ijl/orjson#serialize) is a fast JSON serialize/deserialize library. I found that it; improved the performance of the copy tool substantially. I suspect we will see a low-level improvement across all; services. We can't use aiohttp's normal json library overrides because aiohttp stubbornly refuses to support a JSON interface that doesn't (unnecessarily) return strings (which are then decoded to utf-8 bytes anyway). cc: @daniel-goldstein,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10982:309,stub,stubbornly,309,https://hail.is,https://github.com/hail-is/hail/pull/10982,1,['stub'],['stubbornly']
Testability,[aiogoogle] another fix to the write logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10044:37,log,logic,37,https://hail.is,https://github.com/hail-is/hail/pull/10044,1,['log'],['logic']
Testability,[aiogoogle] fix incorrect logic in resumable upload status check,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10039:26,log,logic,26,https://hail.is,https://github.com/hail-is/hail/pull/10039,1,['log'],['logic']
Testability,[aiogoogle] make aiogoogle tests resilient,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10947:27,test,tests,27,https://hail.is,https://github.com/hail-is/hail/pull/10947,1,['test'],['tests']
Testability,[aiogoogle] retry create part in test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11409:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/11409,1,['test'],['test']
Testability,[aiotools.fs] retry transient errors in tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10954:40,test,tests,40,https://hail.is,https://github.com/hail-is/hail/pull/10954,1,['test'],['tests']
Testability,[aiotools] Log exception is task manager task errors,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13453:11,Log,Log,11,https://hail.is,https://github.com/hail-is/hail/pull/13453,1,['Log'],['Log']
Testability,[aiotools] add better debugging information for flaky test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10243:54,test,test,54,https://hail.is,https://github.com/hail-is/hail/pull/10243,1,['test'],['test']
Testability,[auth] Deleting users in test auth should not delete any namespaces,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13315:25,test,test,25,https://hail.is,https://github.com/hail-is/hail/pull/13315,1,['test'],['test']
Testability,[auth] avoid redirect loop on failed login,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12401:37,log,login,37,https://hail.is,https://github.com/hail-is/hail/pull/12401,1,['log'],['login']
Testability,[auth] log X-Real-IP (and generally use our standard log format),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8688:7,log,log,7,https://hail.is,https://github.com/hail-is/hail/pull/8688,2,['log'],['log']
Testability,[auth] remove userinfo logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11977:23,log,logs,23,https://hail.is,https://github.com/hail-is/hail/pull/11977,1,['log'],['logs']
Testability,[base] add sortedcontainers and google-cloud-logging,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6934:45,log,logging,45,https://hail.is,https://github.com/hail-is/hail/pull/6934,1,['log'],['logging']
Testability,[batch+] reduce job default memory in tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7330:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/7330,1,['test'],['tests']
Testability,"[batch,ci,pipeline] remove batch from build.yaml and tests",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7474:53,test,tests,53,https://hail.is,https://github.com/hail-is/hail/pull/7474,1,['test'],['tests']
Testability,[batch/test] Wait for job to be running in list_jobs_v2 test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13289:7,test,test,7,https://hail.is,https://github.com/hail-is/hail/pull/13289,2,['test'],['test']
Testability,[batch2] Do not merge -- secret testing,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6844:32,test,testing,32,https://hail.is,https://github.com/hail-is/hail/pull/6844,1,['test'],['testing']
Testability,[batch2] Don't generate broken links to log/status for pending jobs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7449:40,log,log,40,https://hail.is,https://github.com/hail-is/hail/pull/7449,1,['log'],['log']
Testability,[batch2] add benchmark of mysql db,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7181:13,benchmark,benchmark,13,https://hail.is,https://github.com/hail-is/hail/pull/7181,1,['benchmark'],['benchmark']
Testability,[batch2] add ubuntu to disk image and change tests to use ubuntu,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7216:45,test,tests,45,https://hail.is,https://github.com/hail-is/hail/pull/7216,1,['test'],['tests']
Testability,"[batch2] fix batch2 cleanup, copy worker logs",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7444:41,log,logs,41,https://hail.is,https://github.com/hail-is/hail/pull/7444,1,['log'],['logs']
Testability,[batch2] fix worker logs not being uploaded,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7307:20,log,logs,20,https://hail.is,https://github.com/hail-is/hail/pull/7307,1,['log'],['logs']
Testability,[batch2] test disk image works,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7246:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/7246,1,['test'],['test']
Testability,[batch2] use shutdown-script to copy worker log files,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7365:44,log,log,44,https://hail.is,https://github.com/hail-is/hail/pull/7365,1,['log'],['log']
Testability,[batch] 30k pod scale test 2,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6566:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/issues/6566,1,['test'],['test']
Testability,[batch] Add back database tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6057:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/issues/6057,1,['test'],['tests']
Testability,[batch] Add client job id to test batch attributes for debugging,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13733:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/13733,1,['test'],['test']
Testability,[batch] Add debugging batch logs path,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9764:28,log,logs,28,https://hail.is,https://github.com/hail-is/hail/pull/9764,1,['log'],['logs']
Testability,[batch] Add download logs button,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11841:21,log,logs,21,https://hail.is,https://github.com/hail-is/hail/pull/11841,1,['log'],['logs']
Testability,[batch] Add error to missing k8s log message,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6461:33,log,log,33,https://hail.is,https://github.com/hail-is/hail/pull/6461,1,['log'],['log']
Testability,[batch] Add failure reason to logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6260:30,log,logs,30,https://hail.is,https://github.com/hail-is/hail/pull/6260,1,['log'],['logs']
Testability,[batch] Add infrastructure for not running batch tests in production,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9581:49,test,tests,49,https://hail.is,https://github.com/hail-is/hail/pull/9581,1,['test'],['tests']
Testability,[batch] Add limit to list_batches in tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10065:37,test,tests,37,https://hail.is,https://github.com/hail-is/hail/pull/10065,1,['test'],['tests']
Testability,[batch] Add log analytics agent for worker logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11130:12,log,log,12,https://hail.is,https://github.com/hail-is/hail/pull/11130,2,['log'],"['log', 'logs']"
Testability,[batch] Add logs to disk operations,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10429:12,log,logs,12,https://hail.is,https://github.com/hail-is/hail/pull/10429,1,['log'],['logs']
Testability,[batch] Add more logging and fix site activation in worker,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10221:17,log,logging,17,https://hail.is,https://github.com/hail-is/hail/pull/10221,1,['log'],['logging']
Testability,[batch] Add more logging for disk formatting errors,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11867:17,log,logging,17,https://hail.is,https://github.com/hail-is/hail/pull/11867,1,['log'],['logging']
Testability,[batch] Add storage resource to the tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9168:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/pull/9168,1,['test'],['tests']
Testability,[batch] Add testing for invariants,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9375:12,test,testing,12,https://hail.is,https://github.com/hail-is/hail/pull/9375,1,['test'],['testing']
Testability,[batch] Allow more than test and test-dev users in test billing project,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10688:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/10688,6,['test'],"['test', 'test-dev']"
Testability,[batch] Always upload logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11076:22,log,logs,22,https://hail.is,https://github.com/hail-is/hail/pull/11076,1,['log'],['logs']
Testability,[batch] Batch Client needs robust tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6722:34,test,tests,34,https://hail.is,https://github.com/hail-is/hail/issues/6722,1,['test'],['tests']
Testability,[batch] Batch workers log with ERROR severity when job is canceled,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13803:22,log,log,22,https://hail.is,https://github.com/hail-is/hail/issues/13803,1,['log'],['log']
Testability,[batch] Change number test worker pool size,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9441:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/9441,1,['test'],['test']
Testability,[batch] Clean up environment variables for easier local execution of batch tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12862:75,test,tests,75,https://hail.is,https://github.com/hail-is/hail/pull/12862,1,['test'],['tests']
Testability,[batch] Cleanup logging on the front end and driver,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11904:16,log,logging,16,https://hail.is,https://github.com/hail-is/hail/pull/11904,1,['log'],['logging']
Testability,[batch] Cleanup worker logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11898:23,log,logs,23,https://hail.is,https://github.com/hail-is/hail/pull/11898,1,['log'],['logs']
Testability,[batch] Default to using the test method name for the name of the batch,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12884:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/12884,1,['test'],['test']
Testability,[batch] Do not log user errors as exceptions,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14253:15,log,log,15,https://hail.is,https://github.com/hail-is/hail/pull/14253,1,['log'],['log']
Testability,[batch] Don't check invariants every 10 seconds in test PRs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12815:51,test,test,51,https://hail.is,https://github.com/hail-is/hail/pull/12815,1,['test'],['test']
Testability,[batch] Don't do O(jobs) logging in scheduling loop when no machines found,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11357:25,log,logging,25,https://hail.is,https://github.com/hail-is/hail/pull/11357,1,['log'],['logging']
Testability,[batch] Don't double log exceptions in job scheduling,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11715:21,log,log,21,https://hail.is,https://github.com/hail-is/hail/pull/11715,1,['log'],['log']
Testability,[batch] Dont allow log test to possibly run forever,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12420:19,log,log,19,https://hail.is,https://github.com/hail-is/hail/pull/12420,2,"['log', 'test']","['log', 'test']"
Testability,[batch] Dont log an exception if the exception is a user error,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10636:13,log,log,13,https://hail.is,https://github.com/hail-is/hail/pull/10636,1,['log'],['log']
Testability,[batch] Dont log cancelling long-running loops on driver shutdown,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10637:13,log,log,13,https://hail.is,https://github.com/hail-is/hail/pull/10637,1,['log'],['log']
Testability,[batch] Dont log user errors from JVM jobs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11376:13,log,log,13,https://hail.is,https://github.com/hail-is/hail/pull/11376,1,['log'],['log']
Testability,[batch] Expose and test SQL table operations,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5784:19,test,test,19,https://hail.is,https://github.com/hail-is/hail/pull/5784,1,['test'],['test']
Testability,[batch] Fix 500 when job log doesn't exist,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10300:25,log,log,25,https://hail.is,https://github.com/hail-is/hail/pull/10300,1,['log'],['log']
Testability,[batch] Fix GCP fluentd log labels,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13726:24,log,log,24,https://hail.is,https://github.com/hail-is/hail/pull/13726,1,['log'],['log']
Testability,[batch] Fix access logger filters,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11901:19,log,logger,19,https://hail.is,https://github.com/hail-is/hail/pull/11901,1,['log'],['logger']
Testability,[batch] Fix jq wiping deploy config in test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10850:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/10850,1,['test'],['test']
Testability,[batch] Fix list batches query and test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13237:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/13237,1,['test'],['test']
Testability,[batch] Fix logs for running jobs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11512:12,log,logs,12,https://hail.is,https://github.com/hail-is/hail/pull/11512,2,['log'],['logs']
Testability,[batch] Fix missing await in read failed logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7005:41,log,logs,41,https://hail.is,https://github.com/hail-is/hail/pull/7005,1,['log'],['logs']
Testability,[batch] Fix overeager assertions in GC loops,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12493:22,assert,assertions,22,https://hail.is,https://github.com/hail-is/hail/pull/12493,1,['assert'],['assertions']
Testability,[batch] Fix rare bug in list batches v2 test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13350:40,test,test,40,https://hail.is,https://github.com/hail-is/hail/pull/13350,1,['test'],['test']
Testability,[batch] Fix update_batch_no_deps test to wait for all jobs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12238:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/12238,1,['test'],['test']
Testability,[batch] Fixes to get tests to start running on Azure,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11071:21,test,tests,21,https://hail.is,https://github.com/hail-is/hail/pull/11071,1,['test'],['tests']
Testability,[batch] Ignore client_job attribute in test_callback test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13741:53,test,test,53,https://hail.is,https://github.com/hail-is/hail/pull/13741,1,['test'],['test']
Testability,[batch] Ignore job deletion when uploading the logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11082:47,log,logs,47,https://hail.is,https://github.com/hail-is/hail/pull/11082,1,['log'],['logs']
Testability,[batch] Increase max worker idle time to 2 mins in test and dev,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13314:51,test,test,51,https://hail.is,https://github.com/hail-is/hail/pull/13314,1,['test'],['test']
Testability,[batch] JVM container logs streamed with fluentd,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13190:22,log,logs,22,https://hail.is,https://github.com/hail-is/hail/pull/13190,1,['log'],['logs']
Testability,"[batch] JVMJobs that hang connecting to the JVM, setting up xfs_quota, etc. never upload logs or status files",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13950:89,log,logs,89,https://hail.is,https://github.com/hail-is/hail/issues/13950,1,['log'],['logs']
Testability,[batch] Logging error: hail_logging.py: 18 fails assertion.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14261:8,Log,Logging,8,https://hail.is,https://github.com/hail-is/hail/issues/14261,2,"['Log', 'assert']","['Logging', 'assertion']"
Testability,[batch] Mitigate accrued_costs test failure,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11420:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/11420,1,['test'],['test']
Testability,[batch] Mitigate test failures by extending batch client timeout,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12709:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/12709,1,['test'],['test']
Testability,[batch] Only update log files if they exist,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13911:20,log,log,20,https://hail.is,https://github.com/hail-is/hail/pull/13911,1,['log'],['log']
Testability,[batch] Only write logs and resource usage for started containers,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13727:19,log,logs,19,https://hail.is,https://github.com/hail-is/hail/pull/13727,1,['log'],['logs']
Testability,[batch] Quiet down MJC and MJS logging exceptions,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12496:31,log,logging,31,https://hail.is,https://github.com/hail-is/hail/pull/12496,1,['log'],['logging']
Testability,[batch] Quiet warning log messages,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12505:22,log,log,22,https://hail.is,https://github.com/hail-is/hail/pull/12505,1,['log'],['log']
Testability,[batch] Remove explicit settings in hailtop tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13973:44,test,tests,44,https://hail.is,https://github.com/hail-is/hail/pull/13973,1,['test'],['tests']
Testability,[batch] Remove hardcoded eastus assert,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14416:32,assert,assert,32,https://hail.is,https://github.com/hail-is/hail/pull/14416,1,['assert'],['assert']
Testability,[batch] Render more of a job log on the front end,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13391:29,log,log,29,https://hail.is,https://github.com/hail-is/hail/pull/13391,1,['log'],['log']
Testability,[batch] Show logs and status for running cancelled jobs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11353:13,log,logs,13,https://hail.is,https://github.com/hail-is/hail/pull/11353,1,['log'],['logs']
Testability,[batch] Skip currently incorrect tests after Azure price change,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12979:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/12979,1,['test'],['tests']
Testability,[batch] Sometimes k8s sends 400 when reading logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6616:45,log,logs,45,https://hail.is,https://github.com/hail-is/hail/issues/6616,1,['log'],['logs']
Testability,[batch] Stream job logs from the worker to cloud storage,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14075:19,log,logs,19,https://hail.is,https://github.com/hail-is/hail/pull/14075,1,['log'],['logs']
Testability,[batch] Stream job logs in the batch front-end,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13322:19,log,logs,19,https://hail.is,https://github.com/hail-is/hail/pull/13322,2,['log'],['logs']
Testability,[batch] Support job logs that are not UTF-8 compatible,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12666:20,log,logs,20,https://hail.is,https://github.com/hail-is/hail/pull/12666,1,['log'],['logs']
Testability,[batch] Support running the test_regions test in non-US deployments,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13929:41,test,test,41,https://hail.is,https://github.com/hail-is/hail/pull/13929,1,['test'],['test']
Testability,[batch] The GCP logging client breaks invariants when processing activity logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13332:16,log,logging,16,https://hail.is,https://github.com/hail-is/hail/issues/13332,2,['log'],"['logging', 'logs']"
Testability,[batch] Tone down access log messages that are not helpful,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11897:25,log,log,25,https://hail.is,https://github.com/hail-is/hail/pull/11897,1,['log'],['log']
Testability,[batch] Turn off logging syslog on workers for GCP,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11895:17,log,logging,17,https://hail.is,https://github.com/hail-is/hail/pull/11895,1,['log'],['logging']
Testability,[batch] Turn off oms_agent in test and dev,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13306:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/13306,1,['test'],['test']
Testability,[batch] Turn off sys logs in fluentd,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13714:21,log,logs,21,https://hail.is,https://github.com/hail-is/hail/pull/13714,1,['log'],['logs']
Testability,[batch] Turn on compaction in test and dev,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13476:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/13476,1,['test'],['test']
Testability,[batch] Use cloud env var for hailtop tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11132:38,test,tests,38,https://hail.is,https://github.com/hail-is/hail/pull/11132,1,['test'],['tests']
Testability,[batch] Use default credentials for the Azure SAS token test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13981:56,test,test,56,https://hail.is,https://github.com/hail-is/hail/pull/13981,1,['test'],['test']
Testability,[batch] Use generic storage URIs for logs and test data,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11014:37,log,logs,37,https://hail.is,https://github.com/hail-is/hail/pull/11014,2,"['log', 'test']","['logs', 'test']"
Testability,[batch] Use the test and test-dev GSAs in test_batch not CI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13562:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/13562,2,['test'],"['test', 'test-dev']"
Testability,[batch] Write batch job logs to gcs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5845:24,log,logs,24,https://hail.is,https://github.com/hail-is/hail/issues/5845,1,['log'],['logs']
Testability,[batch] Write job logs to disk in user's XFS project,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10683:18,log,logs,18,https://hail.is,https://github.com/hail-is/hail/pull/10683,1,['log'],['logs']
Testability,[batch] Write user's JVM logs to disk,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11471:25,log,logs,25,https://hail.is,https://github.com/hail-is/hail/pull/11471,1,['log'],['logs']
Testability,[batch] a deleted batch zombie jobs causes assertion errors,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6737:43,assert,assertion,43,https://hail.is,https://github.com/hail-is/hail/issues/6737,1,['assert'],['assertion']
Testability,[batch] actually run benchmark test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8471:21,benchmark,benchmark,21,https://hail.is,https://github.com/hail-is/hail/pull/8471,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,[batch] add bpe test for calling result after a timeout,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10760:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/10760,1,['test'],['test']
Testability,[batch] add more logs and do not wait for asyncgens,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10136:17,log,logs,17,https://hail.is,https://github.com/hail-is/hail/pull/10136,1,['log'],['logs']
Testability,[batch] add retry query logic for new_record and update_record,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6551:24,log,logic,24,https://hail.is,https://github.com/hail-is/hail/pull/6551,1,['log'],['logic']
Testability,[batch] add test for getting not null records,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5965:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/5965,1,['test'],['test']
Testability,[batch] add tests for python jobs using hl.read_input,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14318:12,test,tests,12,https://hail.is,https://github.com/hail-is/hail/pull/14318,1,['test'],['tests']
Testability,[batch] allow UI to show job page without log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10917:42,log,log,42,https://hail.is,https://github.com/hail-is/hail/pull/10917,1,['log'],['log']
Testability,[batch] also check hailtop.batch tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14316:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/14316,1,['test'],['tests']
Testability,[batch] assertion error in delete_pod,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6753:8,assert,assertion,8,https://hail.is,https://github.com/hail-is/hail/issues/6753,1,['assert'],['assertion']
Testability,[batch] avoid use of metadata server in regenie tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9390:48,test,tests,48,https://hail.is,https://github.com/hail-is/hail/pull/9390,1,['test'],['tests']
Testability,[batch] bad container status logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6875:29,log,logic,29,https://hail.is,https://github.com/hail-is/hail/pull/6875,1,['log'],['logic']
Testability,[batch] balance the tests by marking slow tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11908:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/11908,2,['test'],['tests']
Testability,[batch] better debug info on batch test failure,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10948:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/10948,1,['test'],['test']
Testability,[batch] catch errors reading logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6034:29,log,logs,29,https://hail.is,https://github.com/hail-is/hail/pull/6034,1,['log'],['logs']
Testability,[batch] cleanup content in worker.log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9184:34,log,log,34,https://hail.is,https://github.com/hail-is/hail/pull/9184,1,['log'],['log']
Testability,[batch] close compute and logging clients on shutdown,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10634:26,log,logging,26,https://hail.is,https://github.com/hail-is/hail/pull/10634,1,['log'],['logging']
Testability,[batch] compress job log files,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13431:21,log,log,21,https://hail.is,https://github.com/hail-is/hail/issues/13431,1,['log'],['log']
Testability,[batch] configure logging,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6873:18,log,logging,18,https://hail.is,https://github.com/hail-is/hail/pull/6873,1,['log'],['logging']
Testability,[batch] convert activity logs to audit logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9439:25,log,logs,25,https://hail.is,https://github.com/hail-is/hail/pull/9439,2,['log'],['logs']
Testability,[batch] create load test to stress the batch-driver at a maximum sche…,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11226:20,test,test,20,https://hail.is,https://github.com/hail-is/hail/pull/11226,1,['test'],['test']
Testability,[batch] directly test batch,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7780:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/7780,1,['test'],['test']
Testability,"[batch] do not explicitly set cpu in BPE, which improves test time",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9462:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/9462,1,['test'],['test']
Testability,[batch] do not log user errors,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11377:15,log,log,15,https://hail.is,https://github.com/hail-is/hail/pull/11377,1,['log'],['log']
Testability,"[batch] driver holds open aiomysql connections after the event loop is destroyed, this triggers a bunch of error logs and a grafana alert",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13863:113,log,logs,113,https://hail.is,https://github.com/hail-is/hail/issues/13863,1,['log'],['logs']
Testability,[batch] eliminate expected exceptional log statement,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9980:39,log,log,39,https://hail.is,https://github.com/hail-is/hail/pull/9980,1,['log'],['log']
Testability,[batch] eliminate non-determinism in test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9788:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/9788,1,['test'],['test']
Testability,[batch] eliminate unused imports in hailtop.batch tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14315:50,test,tests,50,https://hail.is,https://github.com/hail-is/hail/pull/14315,1,['test'],['tests']
Testability,[batch] enable 5 JP instances in tests and alleviate failures,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11928:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/pull/11928,1,['test'],['tests']
Testability,[batch] ensure deletion of test billing projects,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10886:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/10886,1,['test'],['test']
Testability,[batch] ensure we cancel batches after BPE tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10761:43,test,tests,43,https://hail.is,https://github.com/hail-is/hail/pull/10761,1,['test'],['tests']
Testability,[batch] error in get container status results in exit code set to zero even though log retrieval failed,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8083:83,log,log,83,https://hail.is,https://github.com/hail-is/hail/issues/8083,1,['log'],['log']
Testability,[batch] extract python job specific tests to separate file,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14314:36,test,tests,36,https://hail.is,https://github.com/hail-is/hail/pull/14314,1,['test'],['tests']
Testability,[batch] extract service backend test fixtures to separate file,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14313:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/14313,1,['test'],['test']
Testability,[batch] faster no access to metadata test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9416:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/9416,1,['test'],['test']
Testability,"[batch] file existence checks in batch test setup fails in a bizarre manner, apparently involving the event loop",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13997:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/issues/13997,1,['test'],['test']
Testability,[batch] fix _read_logs overriding logger with pod log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6257:34,log,logger,34,https://hail.is,https://github.com/hail-is/hail/pull/6257,2,['log'],"['log', 'logger']"
Testability,[batch] fix another logging error,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8975:20,log,logging,20,https://hail.is,https://github.com/hail-is/hail/pull/8975,1,['log'],['logging']
Testability,[batch] fix assertion error in mark_job_task_complete,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6367:12,assert,assertion,12,https://hail.is,https://github.com/hail-is/hail/pull/6367,1,['assert'],['assertion']
Testability,[batch] fix batch logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5470:18,log,logs,18,https://hail.is,https://github.com/hail-is/hail/pull/5470,1,['log'],['logs']
Testability,[batch] fix batch tests in deploy,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7816:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/7816,1,['test'],['tests']
Testability,[batch] fix batch tests in deployment,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7818:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/7818,1,['test'],['tests']
Testability,[batch] fix billing projects tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9987:29,test,tests,29,https://hail.is,https://github.com/hail-is/hail/pull/9987,1,['test'],['tests']
Testability,[batch] fix flaky batch invariants test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9509:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/pull/9509,1,['test'],['test']
Testability,[batch] fix flaky callback test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5875:27,test,test,27,https://hail.is,https://github.com/hail-is/hail/pull/5875,1,['test'],['test']
Testability,[batch] fix flaky test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11552:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/11552,1,['test'],['test']
Testability,[batch] fix invalid resource test to account for 16 core machines,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7847:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/7847,1,['test'],['test']
Testability,[batch] fix mark_unscheduled if log exists in db,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6497:32,log,log,32,https://hail.is,https://github.com/hail-is/hail/pull/6497,1,['log'],['log']
Testability,[batch] fix missing SCRATCH breaking all tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8557:41,test,tests,41,https://hail.is,https://github.com/hail-is/hail/pull/8557,1,['test'],['tests']
Testability,[batch] fix not all tests being run,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6015:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/6015,1,['test'],['tests']
Testability,[batch] fix resource requests in test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9166:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/9166,1,['test'],['test']
Testability,[batch] fix test unauthorized users to be resilient to transient errors,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8230:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/8230,1,['test'],['test']
Testability,[batch] fix url for batch logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6460:26,log,logs,26,https://hail.is,https://github.com/hail-is/hail/pull/6460,1,['log'],['logs']
Testability,[batch] fix worker jvm log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10273:23,log,log,23,https://hail.is,https://github.com/hail-is/hail/pull/10273,1,['log'],['log']
Testability,[batch] further cost test mitigation,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11480:21,test,test,21,https://hail.is,https://github.com/hail-is/hail/pull/11480,1,['test'],['test']
Testability,[batch] high log retrieval failure rate (at least 5%),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6545:13,log,log,13,https://hail.is,https://github.com/hail-is/hail/issues/6545,1,['log'],['log']
Testability,"[batch] improve logging, remove dead code, unify code",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6972:16,log,logging,16,https://hail.is,https://github.com/hail-is/hail/pull/6972,1,['log'],['logging']
Testability,[batch] include job status and log if no BPE output found,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10952:31,log,log,31,https://hail.is,https://github.com/hail-is/hail/pull/10952,1,['log'],['log']
Testability,[batch] introduce Support-Logs-Specs-and-Firewall fee,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13542:26,Log,Logs-Specs-and-Firewall,26,https://hail.is,https://github.com/hail-is/hail/pull/13542,1,['Log'],['Logs-Specs-and-Firewall']
Testability,[batch] job private instance test fails in Azure often,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13889:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/issues/13889,1,['test'],['test']
Testability,[batch] log every event we receive from k8s,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6615:8,log,log,8,https://hail.is,https://github.com/hail-is/hail/pull/6615,1,['log'],['log']
Testability,[batch] log files from gcs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5866:8,log,log,8,https://hail.is,https://github.com/hail-is/hail/pull/5866,1,['log'],['log']
Testability,[batch] log non-secret auth info when copying,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10958:8,log,log,8,https://hail.is,https://github.com/hail-is/hail/pull/10958,1,['log'],['log']
Testability,[batch] log scheduler queries timing,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7953:8,log,log,8,https://hail.is,https://github.com/hail-is/hail/pull/7953,1,['log'],['log']
Testability,[batch] log setup failure,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6961:8,log,log,8,https://hail.is,https://github.com/hail-is/hail/pull/6961,1,['log'],['log']
Testability,[batch] log store needs to be destroyed if database is also destroyed,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6705:8,log,log,8,https://hail.is,https://github.com/hail-is/hail/issues/6705,1,['log'],['log']
Testability,"[batch] log timing to create pvc, pods, db updates",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6457:8,log,log,8,https://hail.is,https://github.com/hail-is/hail/pull/6457,1,['log'],['log']
Testability,[batch] make JVM logs real-time,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10259:17,log,logs,17,https://hail.is,https://github.com/hail-is/hail/pull/10259,1,['log'],['logs']
Testability,[batch] make tests resilient to concurrent batches,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10928:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/10928,1,['test'],['tests']
Testability,[batch] meta-issue 30k pod scale tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6547:33,test,tests,33,https://hail.is,https://github.com/hail-is/hail/issues/6547,1,['test'],['tests']
Testability,[batch] mitigate some of the cost test failures,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11448:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/pull/11448,1,['test'],['test']
Testability,[batch] more durable cancellation of test batches,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12993:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/12993,1,['test'],['test']
Testability,[batch] move worker logs to worker logs bucket,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8742:20,log,logs,20,https://hail.is,https://github.com/hail-is/hail/pull/8742,2,['log'],['logs']
Testability,[batch] no logs on container deleted,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13857:11,log,logs,11,https://hail.is,https://github.com/hail-is/hail/pull/13857,1,['log'],['logs']
Testability,[batch] novel error in copying container logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/8053:41,log,logs,41,https://hail.is,https://github.com/hail-is/hail/issues/8053,1,['log'],['logs']
Testability,[batch] parallelize batch tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9381:26,test,tests,26,https://hail.is,https://github.com/hail-is/hail/pull/9381,1,['test'],['tests']
Testability,[batch] prevent test from evaluating server.py,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5795:16,test,test,16,https://hail.is,https://github.com/hail-is/hail/pull/5795,1,['test'],['test']
Testability,[batch] quieter logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6627:16,log,logs,16,https://hail.is,https://github.com/hail-is/hail/pull/6627,1,['log'],['logs']
Testability,[batch] reduce test flakiness,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9460:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/9460,1,['test'],['test']
Testability,[batch] remove assertion that breaks the usage of Artifact Registry images,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9908:15,assert,assertion,15,https://hail.is,https://github.com/hail-is/hail/pull/9908,1,['assert'],['assertion']
Testability,[batch] remove unused test utility,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10472:22,test,test,22,https://hail.is,https://github.com/hail-is/hail/pull/10472,1,['test'],['test']
Testability,[batch] remove unused variable in test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5542:34,test,test,34,https://hail.is,https://github.com/hail-is/hail/pull/5542,1,['test'],['test']
Testability,[batch] remove unused worker logs bucket code,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9778:29,log,logs,29,https://hail.is,https://github.com/hail-is/hail/pull/9778,1,['log'],['logs']
Testability,[batch] replace GCS with GoogleStorageAsyncFS in LogStore,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10331:49,Log,LogStore,49,https://hail.is,https://github.com/hail-is/hail/pull/10331,1,['Log'],['LogStore']
Testability,[batch] reproduce Ben's non-responsive worker issue and convert to a test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13992:69,test,test,69,https://hail.is,https://github.com/hail-is/hail/issues/13992,2,['test'],['test']
Testability,[batch] restore java batch testing,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9707:27,test,testing,27,https://hail.is,https://github.com/hail-is/hail/pull/9707,1,['test'],['testing']
Testability,[batch] revert test for wildcards in input paths,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9275:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/pull/9275,1,['test'],['test']
Testability,[batch] silence instance logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14243:25,log,logs,25,https://hail.is,https://github.com/hail-is/hail/pull/14243,1,['log'],['logs']
Testability,[batch] skip disk mount test in azure because it hangs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11136:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/11136,1,['test'],['test']
Testability,[batch] speed up metadata connectivity test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9415:39,test,test,39,https://hail.is,https://github.com/hail-is/hail/pull/9415,1,['test'],['test']
Testability,[batch] substantially reduce PR test costs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13667:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/13667,1,['test'],['test']
Testability,[batch] test batch directly,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7808:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/7808,1,['test'],['test']
Testability,[batch] test flaky test reduction,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9467:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/9467,2,['test'],['test']
Testability,[batch] test for bug found in siwei pipeline #13399,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13400:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/pull/13400,1,['test'],['test']
Testability,[batch] test job was never cancelled,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13599:8,test,test,8,https://hail.is,https://github.com/hail-is/hail/issues/13599,1,['test'],['test']
Testability,[batch] turn off all unintended gcp cloud ops logs and metrics,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14050:46,log,logs,46,https://hail.is,https://github.com/hail-is/hail/pull/14050,1,['log'],['logs']
Testability,"[batch] update state with ec, log atomically",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6355:30,log,log,30,https://hail.is,https://github.com/hail-is/hail/pull/6355,1,['log'],['log']
Testability,[batch] upload logs after timeout occurs in worker,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8280:15,log,logs,15,https://hail.is,https://github.com/hail-is/hail/pull/8280,1,['log'],['logs']
Testability,[batch] use regional bucket for requester pays tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12964:47,test,tests,47,https://hail.is,https://github.com/hail-is/hail/pull/12964,1,['test'],['tests']
Testability,[batch] variety of errors from the 3000 pod test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6707:44,test,test,44,https://hail.is,https://github.com/hail-is/hail/issues/6707,1,['test'],['test']
Testability,[batch] various improvements re: benchmark,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7026:33,benchmark,benchmark,33,https://hail.is,https://github.com/hail-is/hail/pull/7026,1,['benchmark'],['benchmark']
Testability,[batch] xfail highcpu cheapest test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12959:31,test,test,31,https://hail.is,https://github.com/hail-is/hail/pull/12959,1,['test'],['test']
Testability,[batch][ci] NO LOGS!,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5969:15,LOG,LOGS,15,https://hail.is,https://github.com/hail-is/hail/pull/5969,1,['LOG'],['LOGS']
Testability,[batch][ci] better error message when the deploy test fails,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8337:49,test,test,49,https://hail.is,https://github.com/hail-is/hail/pull/8337,1,['test'],['test']
Testability,[batch][ci][scorecard][auth][notebook][dbuf] log real ips,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8102:45,log,log,45,https://hail.is,https://github.com/hail-is/hail/pull/8102,1,['log'],['log']
Testability,[batch][dag1] Teach batch to test itself locally,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4786:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/4786,1,['test'],['test']
Testability,[batch][dag8] pull out kubernetes and log,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/4795:38,log,log,38,https://hail.is,https://github.com/hail-is/hail/pull/4795,1,['log'],['log']
Testability,[batch][hail][ci] fix retrying logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8477:31,log,logic,31,https://hail.is,https://github.com/hail-is/hail/pull/8477,1,['log'],['logic']
Testability,[batches] fix slow tests by adding a cancel,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7341:19,test,tests,19,https://hail.is,https://github.com/hail-is/hail/pull/7341,1,['test'],['tests']
Testability,[bench] Add combiner compile benchmark.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8075:29,benchmark,benchmark,29,https://hail.is,https://github.com/hail-is/hail/pull/8075,1,['benchmark'],['benchmark']
Testability,[benchmark-service] Mark as GCP only,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11125:1,benchmark,benchmark-service,1,https://hail.is,https://github.com/hail-is/hail/pull/11125,1,['benchmark'],['benchmark-service']
Testability,[benchmark-service] fix the test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10154:1,benchmark,benchmark-service,1,https://hail.is,https://github.com/hail-is/hail/pull/10154,2,"['benchmark', 'test']","['benchmark-service', 'test']"
Testability,[benchmark-service] remove unused service,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12270:1,benchmark,benchmark-service,1,https://hail.is,https://github.com/hail-is/hail/pull/12270,1,['benchmark'],['benchmark-service']
Testability,[benchmark] Add .gitignore,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7123:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7123,1,['benchmark'],['benchmark']
Testability,[benchmark] Add BGEN benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6976:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6976,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Add GVCF full combiner benchmark,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8566:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8566,2,['benchmark'],['benchmark']
Testability,[benchmark] Add `compare` module to benchmark,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6588:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6588,2,['benchmark'],['benchmark']
Testability,[benchmark] Add an example genetics pipeline,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7095:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7095,1,['benchmark'],['benchmark']
Testability,[benchmark] Add argument to filter simple patterns,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6528:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6528,2,['benchmark'],['benchmark']
Testability,[benchmark] Add batch attributes,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8589:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8589,1,['benchmark'],['benchmark']
Testability,[benchmark] Add benchmark for GVCF import/transform,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8382:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8382,2,['benchmark'],['benchmark']
Testability,[benchmark] Add benchmark for range_matrix_table write,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6541:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6541,2,['benchmark'],['benchmark']
Testability,[benchmark] Add benchmark for vds combiner,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11061:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/11061,2,['benchmark'],['benchmark']
Testability,[benchmark] Add benchmark user account,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9539:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9539,2,['benchmark'],['benchmark']
Testability,[benchmark] Add benchmarks for pruned decode and part of Kyle's QC,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7165:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7165,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Add benchmarks for take/show,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6890:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6890,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Add day timestamp to benchmark files,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10556:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10556,2,['benchmark'],['benchmark']
Testability,[benchmark] Add gnomad coverage benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6482:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6482,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Add hail billing project,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7679:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7679,1,['benchmark'],['benchmark']
Testability,[benchmark] Add include and exclude regexes,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8977:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8977,1,['benchmark'],['benchmark']
Testability,[benchmark] Add indices to plot tag,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9310:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9310,1,['benchmark'],['benchmark']
Testability,[benchmark] Add integer table + benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6970:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6970,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Add iterative qc benchmark with intermediate counts,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9889:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9889,2,['benchmark'],['benchmark']
Testability,[benchmark] Add memory tracking to benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10407:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10407,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"[benchmark] Add more configuration, add version info to json output",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6796:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6796,1,['benchmark'],['benchmark']
Testability,[benchmark] Add partitioning join/union tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6435:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6435,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,[benchmark] Add resource groups to benchmarks.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7527:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7527,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Add rudimentary LD-prune benchmark,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7894:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7894,2,['benchmark'],['benchmark']
Testability,[benchmark] Add sentinel benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10584:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10584,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Add simple range_table write benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6529:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6529,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Add timeout functionality.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7214:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7214,1,['benchmark'],['benchmark']
Testability,[benchmark] Allow configuration of `BENCHMARK_DOCKER_TAG`,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12846:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/12846,1,['benchmark'],['benchmark']
Testability,[benchmark] Allow profile to run without ASYNC_PROFILER_HOME set,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9665:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9665,1,['benchmark'],['benchmark']
Testability,[benchmark] Benchmarks on Ubuntu 22.04,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13880:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/13880,2,"['Benchmark', 'benchmark']","['Benchmarks', 'benchmark']"
Testability,[benchmark] Combine files hierarchically,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8472:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8472,1,['benchmark'],['benchmark']
Testability,[benchmark] Don't double-log about downloading,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11813:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/11813,2,"['benchmark', 'log']","['benchmark', 'log']"
Testability,[benchmark] Expose functionality to label batches (e.g. branch name),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8119:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8119,1,['benchmark'],['benchmark']
Testability,[benchmark] Expose running benchmarks with lowering,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9613:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9613,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Fix `make_ndarray_bench` to avoid optimizations that obvi…,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10717:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10717,1,['benchmark'],['benchmark']
Testability,[benchmark] Fix benchmark cleanup handling,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9878:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9878,2,['benchmark'],['benchmark']
Testability,[benchmark] Fix benchmark_in_batch by fixing makefile and updating st…,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10405:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10405,1,['benchmark'],['benchmark']
Testability,[benchmark] Fix billing project,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9671:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9671,1,['benchmark'],['benchmark']
Testability,[benchmark] Fix combiner benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8464:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8464,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Fix docker usage,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8567:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8567,1,['benchmark'],['benchmark']
Testability,[benchmark] Fix errors in running and analyzing benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7878:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7878,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Fix imports,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6950:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6950,1,['benchmark'],['benchmark']
Testability,[benchmark] Fix makefile so we can create images again,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11825:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/11825,1,['benchmark'],['benchmark']
Testability,[benchmark] Fix memory benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8532:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8532,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Fix nonverbose arg to wget,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7749:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7749,1,['benchmark'],['benchmark']
Testability,[benchmark] Fix pipeline benchmarks by adding single_gvcf to resources,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8426:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8426,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Fix scan benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10685:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10685,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Fix usages of hl.utils.new_temp_file,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8895:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8895,1,['benchmark'],['benchmark']
Testability,[benchmark] Generate proper dependency graph in pipeline benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7618:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7618,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Get benchmarks running in qob again,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12829:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/12829,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Include benchmark in name of batch job,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8130:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8130,2,['benchmark'],['benchmark']
Testability,[benchmark] Make benchmark-on-pipeline more robust,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7877:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7877,2,['benchmark'],"['benchmark', 'benchmark-on-pipeline']"
Testability,[benchmark] Make benchmarks run in Google Artifact Repository,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13039:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/13039,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] Make it possible to benchmark older Hail versions,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8976:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8976,2,['benchmark'],['benchmark']
Testability,[benchmark] Minor tweaks to `hail-bench compare`,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8033:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8033,1,['benchmark'],['benchmark']
Testability,[benchmark] Move benchmark to its own project directory,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7103:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7103,2,['benchmark'],['benchmark']
Testability,[benchmark] Parameterize batch service,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7461:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7461,1,['benchmark'],['benchmark']
Testability,"[benchmark] Parameterize output formats, files, verbosity.",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6558:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6558,1,['benchmark'],['benchmark']
Testability,[benchmark] Remove memory and disk requests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9225:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9225,1,['benchmark'],['benchmark']
Testability,[benchmark] Restructure benchmark resources directory,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7591:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7591,2,['benchmark'],['benchmark']
Testability,[benchmark] Run benchmarks in pipeline,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6908:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6908,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"[benchmark] Tolerate failure in `run`, improve `compare`",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6630:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6630,1,['benchmark'],['benchmark']
Testability,[benchmark] Tolerate tests that kill backend and mark as failed,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12838:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/12838,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,[benchmark] Turn off read_with_index benchmark.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6794:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6794,2,['benchmark'],['benchmark']
Testability,[benchmark] Tweak benchmark pipeline parameters,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8293:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8293,2,['benchmark'],['benchmark']
Testability,"[benchmark] Update 'compare' printed ratios, compute geometric mean",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6795:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6795,1,['benchmark'],['benchmark']
Testability,[benchmark] Update compare logic to process new schema,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6826:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6826,2,"['benchmark', 'log']","['benchmark', 'logic']"
Testability,[benchmark] Upgrade setuptools to allow avro dependency,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10841:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10841,1,['benchmark'],['benchmark']
Testability,[benchmark] Use 'median' for benchmark default metric,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8534:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8534,2,['benchmark'],['benchmark']
Testability,[benchmark] Use `wget` instead of urllib to download resources,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7747:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7747,1,['benchmark'],['benchmark']
Testability,[benchmark] Uses regex instead of string containment for pattern,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6894:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6894,1,['benchmark'],['benchmark']
Testability,[benchmark] Various fixes to makefile,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7118:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7118,1,['benchmark'],['benchmark']
Testability,[benchmark] actually set the env vars,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12840:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/12840,1,['benchmark'],['benchmark']
Testability,[benchmark] add `visualize` + refactor hail-bench,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12856:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/12856,1,['benchmark'],['benchmark']
Testability,[benchmark] add benchmark to build.yaml,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9090:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9090,2,['benchmark'],['benchmark']
Testability,[benchmark] add debugging / refactor test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10144:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10144,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,[benchmark] add profiler options to hail-bench,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9577:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9577,1,['benchmark'],['benchmark']
Testability,[benchmark] added authorization,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9153:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9153,1,['benchmark'],['benchmark']
Testability,[benchmark] build hail in release mode,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14197:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/14197,1,['benchmark'],['benchmark']
Testability,[benchmark] cat output file in case of permissions errors,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8329:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8329,1,['benchmark'],['benchmark']
Testability,[benchmark] check permissions before all resource jobs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9341:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9341,1,['benchmark'],['benchmark']
Testability,[benchmark] close github client session on cleanup,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10113:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10113,1,['benchmark'],['benchmark']
Testability,[benchmark] fix benchmark duplication in batch,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14591:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/14591,2,['benchmark'],['benchmark']
Testability,[benchmark] fix benchmark in light of auth changes,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7019:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7019,2,['benchmark'],['benchmark']
Testability,[benchmark] fix broken command in make install,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7126:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7126,1,['benchmark'],['benchmark']
Testability,[benchmark] fix combiner benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13956:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/13956,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] fix crash loop backoff from init_app,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9175:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9175,2,['benchmark'],['benchmark']
Testability,[benchmark] fix file path by adding .json ext,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9670:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9670,1,['benchmark'],['benchmark']
Testability,[benchmark] fix lowered benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9617:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9617,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] fix memory benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8531:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/8531,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] fix missed HAIL_VERSION rename in makefile,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9567:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9567,1,['benchmark'],['benchmark']
Testability,[benchmark] minor fixups,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9841:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9841,1,['benchmark'],['benchmark']
Testability,[benchmark] parallel benchmarks in pipeline,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6968:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/6968,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"[benchmark] parameterize metric, skip short benchmarks",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7105:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7105,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] pip install aiomysql,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7034:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7034,1,['benchmark'],['benchmark']
Testability,[benchmark] pytest-ify hail benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14565:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/14565,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] pytestify hail benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14570:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/14570,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[benchmark] remove extraneous write,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10513:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/10513,1,['benchmark'],['benchmark']
Testability,[benchmark] run benchmark suite on release,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14221:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/issues/14221,2,['benchmark'],['benchmark']
Testability,[benchmark] support cleanup operations,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9876:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9876,1,['benchmark'],['benchmark']
Testability,[benchmark] update for ubuntu 20.4,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11066:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/11066,1,['benchmark'],['benchmark']
Testability,[benchmark] use HAIL_PYTHON3 variable instead of `python`,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7017:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/7017,1,['benchmark'],['benchmark']
Testability,[benchmark] use latest SHA,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9338:1,benchmark,benchmark,1,https://hail.is,https://github.com/hail-is/hail/pull/9338,1,['benchmark'],['benchmark']
Testability,[benchmarking] Time execution,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5857:1,benchmark,benchmarking,1,https://hail.is,https://github.com/hail-is/hail/pull/5857,1,['benchmark'],['benchmarking']
Testability,[benchmarks] Additional multi-write / combiner benchmarks,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8080:1,benchmark,benchmarks,1,https://hail.is,https://github.com/hail-is/hail/pull/8080,2,['benchmark'],['benchmarks']
Testability,[benchmarks] Fix benchmark combine after scipy update,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10062:1,benchmark,benchmarks,1,https://hail.is,https://github.com/hail-is/hail/pull/10062,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,[blog][hailctl] add url hailctl command and use to test blog,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8117:51,test,test,51,https://hail.is,https://github.com/hail-is/hail/pull/8117,1,['test'],['test']
Testability,[bootstrap] Fix positional login-id argument,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11171:27,log,login-id,27,https://hail.is,https://github.com/hail-is/hail/pull/11171,1,['log'],['login-id']
Testability,[bug-fix] Fix incorrect assert when transposing row vector,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6018:24,assert,assert,24,https://hail.is,https://github.com/hail-is/hail/pull/6018,1,['assert'],['assert']
Testability,[bug] Fix and test single row blockmatrix vector sum bug,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9025:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/9025,1,['test'],['test']
Testability,"[bugfix] Fix persisting of vep, logistic regression, poisson regression",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5416:32,log,logistic,32,https://hail.is,https://github.com/hail-is/hail/pull/5416,1,['log'],['logistic']
Testability,[bugfix] fix LoadVCF warning logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6096:29,log,logic,29,https://hail.is,https://github.com/hail-is/hail/pull/6096,1,['log'],['logic']
Testability,[build.yaml] Add retry to cloning ci test repo,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11064:37,test,test,37,https://hail.is,https://github.com/hail-is/hail/pull/11064,1,['test'],['test']
Testability,[build.yaml] Add test_blob_storage_uri for cloud-agnostic test storage,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10960:58,test,test,58,https://hail.is,https://github.com/hail-is/hail/pull/10960,1,['test'],['test']
Testability,[build.yaml] cancel all running test batches after tests timeout/complete,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11679:32,test,test,32,https://hail.is,https://github.com/hail-is/hail/pull/11679,2,['test'],"['test', 'tests']"
Testability,[build.yaml] don't copy non-existent query/test,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10143:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/10143,1,['test'],['test']
Testability,[build.yaml] logging in create_accounts step,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13394:13,log,logging,13,https://hail.is,https://github.com/hail-is/hail/pull/13394,1,['log'],['logging']
Testability,[build.yaml] run hailtop tests (besides batch),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9396:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/9396,1,['test'],['tests']
Testability,[build.yaml] thou canst test that which does not exist,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11145:24,test,test,24,https://hail.is,https://github.com/hail-is/hail/pull/11145,1,['test'],['test']
Testability,[build.yaml] use hailtop.aiotools.copy (and re-enable FS tests),MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11089:57,test,tests,57,https://hail.is,https://github.com/hail-is/hail/pull/11089,1,['test'],['tests']
Testability,[build] Add benchmark limits,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9688:12,benchmark,benchmark,12,https://hail.is,https://github.com/hail-is/hail/pull/9688,1,['benchmark'],['benchmark']
Testability,[build] Parallelize test-dataproc,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11273:20,test,test-dataproc,20,https://hail.is,https://github.com/hail-is/hail/pull/11273,1,['test'],['test-dataproc']
Testability,[build] directly test ci,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7590:17,test,test,17,https://hail.is,https://github.com/hail-is/hail/pull/7590,1,['test'],['test']
Testability,[build] test-instance use createDatabase2 step,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7856:8,test,test-instance,8,https://hail.is,https://github.com/hail-is/hail/pull/7856,1,['test'],['test-instance']
Testability,[c++] fix test times,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5578:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/5578,1,['test'],['test']
Testability,"[ci, build] don't test ci in deploy",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7814:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/7814,1,['test'],['test']
Testability,"[ci,batch,hailjwt] fix csrf test",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6427:28,test,test,28,https://hail.is,https://github.com/hail-is/hail/pull/6427,1,['test'],['test']
Testability,"[ci,pipeline] setup temporary tables in test-locally.sh",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5847:40,test,test-locally,40,https://hail.is,https://github.com/hail-is/hail/pull/5847,1,['test'],['test-locally']
Testability,[ci/benchmark-service] Fix bad deployment.yaml files,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9812:4,benchmark,benchmark-service,4,https://hail.is,https://github.com/hail-is/hail/pull/9812,1,['benchmark'],['benchmark-service']
Testability,[ci/test] Write java test progress to System.err,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12730:4,test,test,4,https://hail.is,https://github.com/hail-is/hail/pull/12730,2,['test'],['test']
Testability,[ci2] add a log option to deploy steps,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6094:12,log,log,12,https://hail.is,https://github.com/hail-is/hail/pull/6094,1,['log'],['log']
Testability,[ci2] add heal logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5814:15,log,logic,15,https://hail.is,https://github.com/hail-is/hail/pull/5814,1,['log'],['logic']
Testability,[ci2] build logic mark 2,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6038:12,log,logic,12,https://hail.is,https://github.com/hail-is/hail/pull/6038,1,['log'],['logic']
Testability,[ci] Add CI infrastructure for testing outside hail-vdc,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11053:31,test,testing,31,https://hail.is,https://github.com/hail-is/hail/pull/11053,1,['test'],['testing']
Testability,[ci] Add CreateDatabase2Step for in-namespace test and dev databases,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13022:46,test,test,46,https://hail.is,https://github.com/hail-is/hail/pull/13022,1,['test'],['test']
Testability,[ci] Add developers to test namespaces,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12751:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/12751,1,['test'],['test']
Testability,[ci] Add requester pays bucket for tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10870:35,test,tests,35,https://hail.is,https://github.com/hail-is/hail/pull/10870,1,['test'],['tests']
Testability,[ci] Add retry to git push in test repo creation,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12153:30,test,test,30,https://hail.is,https://github.com/hail-is/hail/pull/12153,1,['test'],['test']
Testability,[ci] Add test identities for services in test namespaces,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13202:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/13202,2,['test'],['test']
Testability,[ci] Add tests for CI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7434:9,test,tests,9,https://hail.is,https://github.com/hail-is/hail/pull/7434,1,['test'],['tests']
Testability,[ci] Add tests for generating envoy xds configs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14524:9,test,tests,9,https://hail.is,https://github.com/hail-is/hail/pull/14524,1,['test'],['tests']
Testability,[ci] Allow GCP g2 test to timeout,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14435:18,test,test,18,https://hail.is,https://github.com/hail-is/hail/pull/14435,1,['test'],['test']
Testability,[ci] Automatically recreate expired root cert in dev and test namespaces,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13135:57,test,test,57,https://hail.is,https://github.com/hail-is/hail/pull/13135,1,['test'],['test']
Testability,"[ci] CI should link to the various logs (worker, batch, driver, etc.) from the CI page",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13556:35,log,logs,35,https://hail.is,https://github.com/hail-is/hail/issues/13556,1,['log'],['logs']
Testability,[ci] Choose order for testing PRs by merge priority order,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13478:22,test,testing,22,https://hail.is,https://github.com/hail-is/hail/pull/13478,1,['test'],['testing']
Testability,[ci] Create a test MySQL server in test and dev namespaces,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13030:14,test,test,14,https://hail.is,https://github.com/hail-is/hail/pull/13030,2,['test'],['test']
Testability,[ci] Don't run pre-commit hooks that are not tested in CI on pre-push,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/13875:45,test,tested,45,https://hail.is,https://github.com/hail-is/hail/issues/13875,1,['test'],['tested']
Testability,[ci] Don't test PRs with do-not-test label,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13540:11,test,test,11,https://hail.is,https://github.com/hail-is/hail/pull/13540,2,['test'],['test']
Testability,[ci] Fix CI test flakiness,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5230:12,test,test,12,https://hail.is,https://github.com/hail-is/hail/pull/5230,1,['test'],['test']
Testability,[ci] Fix PR update_batch logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6581:25,log,logic,25,https://hail.is,https://github.com/hail-is/hail/pull/6581,1,['log'],['logic']
Testability,[ci] Fix assertion that artifacts URI must be gs:// and fix deploy steps,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11121:9,assert,assertion,9,https://hail.is,https://github.com/hail-is/hail/pull/11121,1,['assert'],['assertion']
Testability,[ci] Fix bug where we pushed test images to the main image cache,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11907:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/11907,1,['test'],['test']
Testability,[ci] Fix github logic,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6138:16,log,logic,16,https://hail.is,https://github.com/hail-is/hail/pull/6138,1,['log'],['logic']
Testability,[ci] Fix logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5466:9,log,logs,9,https://hail.is,https://github.com/hail-is/hail/pull/5466,1,['log'],['logs']
Testability,[ci] Fix namespace used for logging queries on PR page,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13813:28,log,logging,28,https://hail.is,https://github.com/hail-is/hail/pull/13813,1,['log'],['logging']
Testability,[ci] Fix retryable cloning of ci test repo,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12116:33,test,test,33,https://hail.is,https://github.com/hail-is/hail/pull/12116,1,['test'],['test']
Testability,[ci] Format logs in a readable format,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7353:12,log,logs,12,https://hail.is,https://github.com/hail-is/hail/pull/7353,1,['log'],['logs']
Testability,[ci] Generate PR specific logging queries,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13744:26,log,logging,26,https://hail.is,https://github.com/hail-is/hail/pull/13744,1,['log'],['logging']
Testability,[ci] Grant create temporary tables privilege to test dbs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13165:48,test,test,48,https://hail.is,https://github.com/hail-is/hail/pull/13165,1,['test'],['test']
Testability,[ci] Remove unused step that adds billing project for benchmark,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13393:54,benchmark,benchmark,54,https://hail.is,https://github.com/hail-is/hail/pull/13393,1,['benchmark'],['benchmark']
Testability,[ci] Retry more for auth copy paste logins,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14353:36,log,logins,36,https://hail.is,https://github.com/hail-is/hail/pull/14353,1,['log'],['logins']
Testability,[ci] Run service backend tests on non-preemptibles,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13004:25,test,tests,25,https://hail.is,https://github.com/hail-is/hail/pull/13004,1,['test'],['tests']
Testability,[ci] Run the dataproc tests on release PRs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13917:22,test,tests,22,https://hail.is,https://github.com/hail-is/hail/pull/13917,1,['test'],['tests']
Testability,[ci] Run the local backend tests much more in parallel,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12716:27,test,tests,27,https://hail.is,https://github.com/hail-is/hail/pull/12716,1,['test'],['tests']
Testability,[ci] Run the test-dataproc jobs on non-preemptible instances,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14444:13,test,test-dataproc,13,https://hail.is,https://github.com/hail-is/hail/pull/14444,1,['test'],['test-dataproc']
Testability,[ci] Split Python tests into 5 groups,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8251:18,test,tests,18,https://hail.is,https://github.com/hail-is/hail/pull/8251,1,['test'],['tests']
Testability,[ci] Test pip-installed lints against python 3.9,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12970:5,Test,Test,5,https://hail.is,https://github.com/hail-is/hail/pull/12970,1,['Test'],['Test']
Testability,[ci] Upload query jar before testing hailctl batch submit,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12527:29,test,testing,29,https://hail.is,https://github.com/hail-is/hail/pull/12527,1,['test'],['testing']
Testability,[ci] Use numSplits instead of copy pasting test steps,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/11787:43,test,test,43,https://hail.is,https://github.com/hail-is/hail/pull/11787,1,['test'],['test']
Testability,[ci] Use private base image for GPU testing image,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13750:36,test,testing,36,https://hail.is,https://github.com/hail-is/hail/pull/13750,1,['test'],['testing']
Testability,[ci] We should scan the logs of every service for error conditions on PR tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7625:24,log,logs,24,https://hail.is,https://github.com/hail-is/hail/issues/7625,2,"['log', 'test']","['logs', 'tests']"
Testability,[ci] add --tail=999999 for kubectl logs calls with selectors,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6259:35,log,logs,35,https://hail.is,https://github.com/hail-is/hail/pull/6259,1,['log'],['logs']
Testability,[ci] cancelled jobs seem to lose their logs?,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/7758:39,log,logs,39,https://hail.is,https://github.com/hail-is/hail/issues/7758,1,['log'],['logs']
Testability,[ci] fix logs ui page,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7500:9,log,logs,9,https://hail.is,https://github.com/hail-is/hail/pull/7500,1,['log'],['logs']
Testability,[ci] fix print logs on failure,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/8437:15,log,logs,15,https://hail.is,https://github.com/hail-is/hail/pull/8437,1,['log'],['logs']
Testability,[ci] fix test storage request,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10403:9,test,test,9,https://hail.is,https://github.com/hail-is/hail/pull/10403,1,['test'],['test']
Testability,[ci] fix test-locally cloud-sql targets,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5836:9,test,test-locally,9,https://hail.is,https://github.com/hail-is/hail/pull/5836,1,['test'],['test-locally']
Testability,[ci] handle assertion errors in update_github loop,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6377:12,assert,assertion,12,https://hail.is,https://github.com/hail-is/hail/pull/6377,1,['assert'],['assertion']
Testability,"[ci] if no logs are available for a job, do not 500",MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/6586:11,log,logs,11,https://hail.is,https://github.com/hail-is/hail/issues/6586,1,['log'],['logs']
Testability,[ci] include migration output in job logs,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/13896:37,log,logs,37,https://hail.is,https://github.com/hail-is/hail/pull/13896,1,['log'],['logs']
Testability,[ci] link to logs for all PRs in CI UI,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5054:13,log,logs,13,https://hail.is,https://github.com/hail-is/hail/pull/5054,1,['log'],['logs']
Testability,[ci] log batch id that raises an exception,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6539:5,log,log,5,https://hail.is,https://github.com/hail-is/hail/pull/6539,1,['log'],['log']
Testability,[ci] log when the github statuses change,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/12861:5,log,log,5,https://hail.is,https://github.com/hail-is/hail/pull/12861,1,['log'],['log']
Testability,[ci] make ci tests resilient to slow ci,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5801:13,test,tests,13,https://hail.is,https://github.com/hail-is/hail/pull/5801,1,['test'],['tests']
Testability,[ci] make test deployment tolerate preemptibles,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/7871:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/7871,1,['test'],['test']
Testability,[ci] make test hello speak https,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10192:10,test,test,10,https://hail.is,https://github.com/hail-is/hail/pull/10192,1,['test'],['test']
Testability,[ci] raise resources for java services tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9423:39,test,tests,39,https://hail.is,https://github.com/hail-is/hail/pull/9423,1,['test'],['tests']
Testability,[ci] reduce PR test latency to ten minutes.,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/14003:15,test,test,15,https://hail.is,https://github.com/hail-is/hail/issues/14003,1,['test'],['test']
Testability,[ci] retry cloning the test repo,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/10605:23,test,test,23,https://hail.is,https://github.com/hail-is/hail/pull/10605,1,['test'],['test']
Testability,[ci] show 50 slowest python tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/6350:28,test,tests,28,https://hail.is,https://github.com/hail-is/hail/pull/6350,1,['test'],['tests']
Testability,[ci] simplify local tests,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/5803:20,test,tests,20,https://hail.is,https://github.com/hail-is/hail/pull/5803,2,['test'],['tests']
Testability,[ci] test artefacts missing pytest.ini,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/14721:5,test,test,5,https://hail.is,https://github.com/hail-is/hail/pull/14721,1,['test'],['test']
Testability,[ci] use global config in ci test deployment,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/pull/9790:29,test,test,29,https://hail.is,https://github.com/hail-is/hail/pull/9790,1,['test'],['test']
Testability,[ci][batch] Any batch-dependent PR test can fail if k8s API times out,MatchSource.ISSUE,hail-is,hail,0.2.133,https://github.com/hail-is/hail/issues/5911:35,test,test,35,https://hail.is,https://github.com/hail-is/hail/issues/5911,1,['test'],['test']
