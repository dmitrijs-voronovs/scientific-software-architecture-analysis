quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"// use simplified expression ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:7,simpl,simplified,7,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['simpl'],['simplified']
Usability,"// use simply TF1 wrapper; // ROOT::Math::WrappedMultiTF1 f(*func);; // ROOT::Math::WrappedTF1 f(*func);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:7,simpl,simply,7,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['simpl'],['simply']
Usability,"// use simply TF1 wrapper; // ROOT::Math::WrappedMultiTF1 f2(*f1);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx:7,simpl,simply,7,math/minuit2/test/testNdimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx,5,['simpl'],['simply']
Usability,"// use the Fisher output simple as additional variable; // #### OK now what's going on...; // #### looks like we are setting up histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,simpl,simple,25,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['simpl'],['simple']
Usability,"// use the Fisher output simple as additional variable; // #### set up the binning info arrays; // #### each var has its own binning since some may be integers ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,simpl,simple,25,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['simpl'],['simple']
Usability,// use the appropriate clear functions to clear the target if it's a signed; // or unsigned integer target,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:23,clear,clear,23,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['clear'],['clear']
Usability,"// used for both this 'clear' and the 'clear' inside destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:23,clear,clear,23,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,2,['clear'],['clear']
Usability,"// used for progress bar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:12,progress bar,progress bar,12,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,2,['progress bar'],['progress bar']
Usability,"// used to transfer to feedback",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:23,feedback,feedback,23,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,1,['feedback'],['feedback']
Usability,"// using shared ptrs everywhere, even for RooLinkedList which needs custom deleter to clear itself; // but still work ok for assignment operations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:86,clear,clear,86,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['clear'],['clear']
Usability,// usub.sat; // We need to clear all the known ones as we can only use the leading zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:27,clear,clear,27,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,1,['clear'],['clear']
Usability,// very simple - openui5 was loaded before and will be used as is,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:8,simpl,simple,8,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['simpl'],['simple']
Usability,"// very simple html browser",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtmlBrowser.h:8,simpl,simple,8,gui/guihtml/inc/TGHtmlBrowser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtmlBrowser.h,2,['simpl'],['simple']
Usability,// void clearerr(FILE *stream);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:8,clear,clearerr,8,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['clear'],['clearerr']
Usability,// we can still create a valid deduction guide here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:41,guid,guide,41,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['guid'],['guide']
Usability,"// we could get finer grain at lengths, or use simple interpolation between two points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:47,simpl,simple,47,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['simpl'],['simple']
Usability,"// we simply add all of our and the bases' members into one big list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx:6,simpl,simply,6,tree/tree/src/TBranchBrowsable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx,1,['simpl'],['simply']
Usability,"// when there are childs and they are not see, simply show them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:47,simpl,simply,47,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['simpl'],['simply']
Usability,// whether this is a sampler feedback op,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp:29,feedback,feedback,29,interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp,1,['feedback'],['feedback']
Usability,"// while next module; // libCint is missing as we don't have class doc for it; // We need it for dependencies nevertheless, so add it by hand.; /*; sstrCluster << ""subgraph clusterlibCint {"" << std::endl; << ""style=filled;"" << std::endl; << ""color=lightgray;"" << std::endl; << ""label=\""libCint\"";"" << std::endl; << ""\""CINT\"" [style=filled,color=white,fontsize=10]"" << std::endl; << ""}"" << std::endl;; */; // simplify the library dependencies, by removing direct links; // that are equivalent to indirect ones, e.g. instead of having both; // A->C, A->B->C, keep only A->B->C.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx:408,simpl,simplify,408,html/src/TDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx,1,['simpl'],['simplify']
Usability,"// will be be deleted when pad is cleared",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:34,clear,cleared,34,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['clear'],['cleared']
Usability,// workaround for simpleHTTP,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,simpl,simpleHTTP,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['simpl'],['simpleHTTP']
Usability,"// xor(x, x-1) is common idioms that will clear all but lowest set; // bit. If we have a single known bit in x, we can clear all bits; // above it.; // TODO: xor(x, x-1) is often rewritting as xor(x, x-C) where C !=; // -1 but for the purpose of demanded bits (xor(x, x-C) &; // Demanded) == (xor(x, x-1) & Demanded). Extend the xor pattern; // to use arbitrary C if xor(x, x-C) as the same as xor(x, x-1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:42,clear,clear,42,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,2,['clear'],['clear']
Usability,"// { """", """", kFALSE, -1, 0 },; // { ""bld_undo.png"", ""Undo (Ctrl-Z)"", kFALSE, kUndoAct, 0 },; // { ""bld_redo.png"", ""Redo (Shift-Ctrl-Z)"", kFALSE, kRedoAct, 0 },",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TRootGuiBuilder.cxx:53,Undo,Undo,53,gui/guibuilder/src/TRootGuiBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TRootGuiBuilder.cxx,1,['Undo'],['Undo']
Usability,"// {0,+,F} --> {0,+,1} * F; // If this is a simple linear addrec, emit it now as a special case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:44,simpl,simple,44,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['simpl'],['simple']
Usability,// |X| / |Y| --> 0; //; // We require that 1 operand is a simple constant. That could be extended to; // 2 variables if we computed the sign bit for each.; //; // Make sure that a constant is not the minimum signed value because taking; // the abs() of that is undefined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:58,simpl,simple,58,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simple']
Usability,"//! allow simple guide axes labels to be scaled relative to scene units; ///////////////////////////////////////////////////////////////////////; // Methods; ///////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h:10,simpl,simple,10,graf3d/gl/inc/TGLViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"//! remove guides hidden-lines",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h:11,guid,guides,11,graf3d/gl/inc/TGLViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h,1,['guid'],['guides']
Usability,"//""Guides"" tab's controls",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewerEditor.h:3,Guid,Guides,3,graf3d/gl/inc/TGLViewerEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewerEditor.h,1,['Guid'],['Guides']
Usability,"//# of color levels for rainbowed display modes, it does not apply for simple display modes algorithm group",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h:71,simpl,simple,71,hist/spectrumpainter/inc/TSpectrum2Painter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h,1,['simpl'],['simple']
Usability,"//#ifdef TEX; /**. A variable names bgamma appears in several places in this file. A few; words of elaboration are needed to make its meaning clear. On page 69; of Misner, Thorne and Wheeler, (Exercise 2.7) the elements of the matrix; for a general Lorentz boost are given as. \f[ \Lambda^{j'}_k = \Lambda^{k'}_j; = (\gamma - 1) n^j n^k + \delta^{jk} \f]. where the n^i are unit vectors in the direction of the three spatial; axes. Using the definitions, \f$ n^i = \beta_i/\beta \f$ , then, for example,. \f[ \Lambda_{xy} = (\gamma - 1) n_x n_y; = (\gamma - 1) \beta_x \beta_y/\beta^2 \f]. By definition, \f[ \gamma^2 = 1/(1 - \beta^2) \f]. so that \f[ \gamma^2 \beta^2 = \gamma^2 - 1 \f]. or \f[ \beta^2 = (\gamma^2 - 1)/\gamma^2 \f]. If we insert this into the expression for \f$ \Lambda_{xy} \f$, we get. \f[ \Lambda_{xy} = (\gamma - 1) \gamma^2/(\gamma^2 - 1) \beta_x \beta_y \f]. or, finally. \f[ \Lambda_{xy} = \gamma^2/(\gamma+1) \beta_x \beta_y \f]. The expression \f$ \gamma^2/(\gamma+1) \f$ is what we call <em>bgamma</em> in the code below. \class ROOT::Math::Boost; */; //#endif",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/Boost.cxx:142,clear,clear,142,math/genvector/src/Boost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/Boost.cxx,1,['clear'],['clear']
Usability,"//(*fWith)(x, y) = (sumSig[k] + sumBgd[k])/(fSumOfWeightsS + fSumOfWeightsB);; // HHV: I am still convinced that THIS is how it should be (below) However, while; // the old version corresponded so nicely with LD, the FIXED version does not, unless; // we agree to change LD. For LD, it is not ""defined"" to my knowledge how the weights; // are weighted, while it is clear how the ""Within"" matrix for Fisher should be calculated; // (i.e. as seen below). In order to agree with the Fisher classifier, one would have to; // weigh signal and background such that they correspond to the same number of effective; // (weighted) events.; // THAT is NOT done currently, but just ""event weights"" are used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:365,clear,clear,365,tmva/tmva/src/MethodFisher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx,1,['clear'],['clear']
Usability,"//- method name based pythonization ------------------------------------------; // for smart pointer style classes that are otherwise not known as such; would; // prefer operator-> as that returns a pointer (which is simpler since it never; // has to deal with ref-assignment), but operator* plays better with STL iters; // and algorithms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:217,simpl,simpler,217,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['simpl'],['simpler']
Usability,"//- simplistic len() functions -----------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:4,simpl,simplistic,4,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['simpl'],['simplistic']
Usability,"//-- SystemZMachineScheduler.cpp - SystemZ Scheduler Interface -*- C++ -*---==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // -------------------------- Post RA scheduling ---------------------------- //; // SystemZPostRASchedStrategy is a scheduling strategy which is plugged into; // the MachineScheduler. It has a sorted Available set of SUs and a pickNode(); // implementation that looks to optimize decoder grouping and balance the; // usage of processor resources. Scheduler states are saved for the end; // region of each MBB, so that a successor block can learn from it.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.cpp:821,learn,learn,821,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.cpp,1,['learn'],['learn']
Usability,"//--- This macro creates a simple geometry based on all shapes known; //--- by TGeo. The first test generates 1 million random points inside; //--- the bounding box of each shape and computes the volume of the; //--- shape as Vbbox*Ninside/Ntotal.; //--- The second test tracks 100K random rays in the geometry, histogramming; //--- the length of all segments passing through each different shape.; //--- It computes mean, RMS and sum of lengths of all segments inside a; //--- given shape and compares with reference values.; //; // This test program is automatically created by $ROOTSYS/test/Makefile.; // To run it in batch, execute stressGeom.; // To run this test with interactive CINT, do; // root > .x stressShapes.cxx++; // or; // root > .x stressShapes.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:27,simpl,simple,27,test/stressShapes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx,1,['simpl'],['simple']
Usability,"//--- progress bar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx:6,progress bar,progress bar,6,tree/treeviewer/src/TTreeViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx,1,['progress bar'],['progress bar']
Usability,"//-----------------------------------------------------------; //; // clearScan(); //; // Clears all the fields in the scan panel (panel B).; //; //-----------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx:70,clear,clearScan,70,test/histviewer/histaction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/histviewer/histaction.cxx,2,"['Clear', 'clear']","['Clears', 'clearScan']"
Usability,/// (re-)initializes and clears the set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h:25,clear,clears,25,interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h,1,['clear'],['clears']
Usability,"/// @brief A class to manage loop scopes using the RAII technique. To wrap your code around a loop,; /// simply place it between a brace inclosed scope with a call to beginLoop at the top. For e.g.; /// {; /// auto scope = ctx.beginLoop({<-set of vector observables to loop over->});; /// // your loop body code goes here.; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:105,simpl,simply,105,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,1,['simpl'],['simply']
Usability,/// @name ArrayRef Deduction guides; /// @{; /// Deduction guide to construct an ArrayRef from a single element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:29,guid,guides,29,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,2,['guid'],"['guide', 'guides']"
Usability,/// @name MutableArrayRef Deduction guides; /// @{; /// Deduction guide to construct a `MutableArrayRef` from a single element,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:36,guid,guides,36,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,2,['guid'],"['guide', 'guides']"
Usability,"/// @{; /// @name Helpers, which simplify node replacement; ///\brief Replaces given dependent AST node with an instantiation of; /// EvaluateT with the deduced type.; ///; /// @param[in] InstTy The deduced type used to create instantiation.; /// @param[in] SubTree The AST node or subtree, which is being replaced.; /// @param[in] ValuePrinterReq Whether to turn on the value printing or not; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.h:33,simpl,simplify,33,interpreter/cling/lib/Interpreter/DynamicLookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.h,1,['simpl'],['simplify']
Usability,"/// @}; /// @name Output Files; /// @{; /// clearOutputFiles - Clear the output file list. The underlying output; /// streams must have been closed beforehand.; ///; /// \param EraseFiles - If true, attempt to erase the files from disk.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:44,clear,clearOutputFiles,44,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,2,"['Clear', 'clear']","['Clear', 'clearOutputFiles']"
Usability,/// @}; /// @name Simple Operations; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:18,Simpl,Simple,18,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['Simpl'],['Simple']
Usability,/// @}; /// Clear all the bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h:12,Clear,Clear,12,interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CoalescingBitVector.h,1,['Clear'],['Clear']
Usability,"/// @}; /// Create a ConstantFPSDNode wrapping a constant value.; /// If VT is a vector type, the constant is splatted into a BUILD_VECTOR.; ///; /// If only legal types can be produced, this does the necessary; /// transformations (e.g., if the vector element type is illegal).; /// The forms that take a double should only be used for simple constants; /// that can be exactly represented in VT. No checks are made.; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:337,simpl,simple,337,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['simpl'],['simple']
Usability,"/// @}; /// Matches any node.; ///; /// Useful when another matcher requires a child matcher, but there's no; /// additional constraint. This will often be used with an explicit conversion; /// to an \c internal::Matcher<> type such as \c TypeMatcher.; ///; /// Example: \c DeclarationMatcher(anything()) matches all declarations, e.g.,; /// \code; /// ""int* p"" and ""void f()"" in; /// int* p;; /// void f();; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:432,Usab,Usable,432,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,/// @}; /// Returns the minimum size of a nop in bytes on this target. The assembler; /// will use this to emit excess padding in situations where the padding; /// required for simple alignment would be less than the minimum nop size.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:177,simpl,simple,177,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,1,['simpl'],['simple']
Usability,/// @}; /// This is a simple wrapper around an MDNode which provides a; /// higher-level interface by hiding the details of how alias analysis; /// information is encoded in its operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp:22,simpl,simple,22,interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/TypeBasedAliasAnalysis.cpp,2,['simpl'],['simple']
Usability,"/// @}; /// User-friendly dump in tree shape.; ///; /// If \c M is provided, metadata nodes will be numbered canonically;; /// otherwise, pointer addresses are substituted.; ///; /// Note: this uses an explicit overload instead of default arguments so that; /// the nullptr version is easy to call from a debugger.; ///; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:12,User-friendly,User-friendly,12,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['User-friendly'],['User-friendly']
Usability,/// @}; /// \name Simple Queries; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:18,Simpl,Simple,18,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['Simpl'],['Simple']
Usability,/// @}; //===--------------------------------------------------------------------===//; /// \name Simple mod/ref information; /// @{; /// Returns a bitmask that should be unconditionally applied to the ModRef; /// info of a memory location. This allows us to eliminate Mod and/or Ref from; /// the ModRef info based on the knowledge that the memory location points to; /// constant and/or locally-invariant memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:98,Simpl,Simple,98,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['Simpl'],['Simple']
Usability,"/// @}; //===--------------------------------------------------------------------===//; /// \name Simple mod/ref information; /// @{; /// Returns a bitmask that should be unconditionally applied to the ModRef; /// info of a memory location. This allows us to eliminate Mod and/or Ref; /// from the ModRef info based on the knowledge that the memory location; /// points to constant and/or locally-invariant memory.; ///; /// If IgnoreLocals is true, then this method returns NoModRef for memory; /// that points to a local alloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:98,Simpl,Simple,98,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['Simpl'],['Simple']
Usability,"/// A (possibly-)qualified type.; ///; /// For efficiency, we don't store CV-qualified types as nodes on their; /// own: instead each reference to a type stores the qualifiers. This; /// greatly reduces the number of nodes we need to allocate for types (for; /// example we only need one for 'int', 'const int', 'volatile int',; /// 'const volatile int', etc).; ///; /// As an added efficiency bonus, instead of making this a pair, we; /// just store the two bits we care about in the low bits of the; /// pointer. To handle the packing/unpacking, we make QualType be a; /// simple wrapper class that acts like a smart pointer. A third bit; /// indicates whether there are extended qualifiers present, in which; /// case the pointer points to a special structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:575,simpl,simple,575,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['simpl'],['simple']
Usability,"/// A 32-bit type reference. Types are indexed by their order of appearance in; /// .debug$T plus 0x1000. Type indices less than 0x1000 are ""simple"" types,; /// composed of a SimpleTypeMode byte followed by a SimpleTypeKind byte.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:141,simpl,simple,141,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,3,"['Simpl', 'simpl']","['SimpleTypeKind', 'SimpleTypeMode', 'simple']"
Usability,"/// A CallbackVH to notify PhiValues when a value is deleted or replaced, so; /// that the cached information for that value can be cleared to avoid; /// dangling pointers to invalid values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h:132,clear,cleared,132,interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h,1,['clear'],['cleared']
Usability,"/// A Chain is a sequence of instructions that are linked together by; /// an accumulation operand. For example:; ///; /// fmul def d0, ?; /// fmla def d1, ?, ?, killed d0; /// fmla def d2, ?, ?, killed d1; ///; /// There may be other instructions interleaved in the sequence that; /// do not belong to the chain. These other instructions must not use; /// the ""chain"" register at any point.; ///; /// We currently only support chains where the ""chain"" operand is killed; /// at each link in the chain for simplicity.; /// A chain has three important instructions - Start, Last and Kill.; /// * The start instruction is the first instruction in the chain.; /// * Last is the final instruction in the chain.; /// * Kill may or may not be defined. If defined, Kill is the instruction; /// where the outgoing value of the Last instruction is killed.; /// This information is important as if we know the outgoing value is; /// killed with no intervening uses, we can safely change its register.; ///; /// Without a kill instruction, we must assume the outgoing value escapes; /// beyond our model and either must not change its register or must; /// create a fixup FMOV to keep the old register value consistent.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:506,simpl,simplicity,506,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['simpl'],['simplicity']
Usability,/// A Counter expression builder is used to construct the counter expressions.; /// It avoids unnecessary duplication and simplifies algebraic expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:122,simpl,simplifies,122,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['simpl'],['simplifies']
Usability,"/// A GCStrategy which serves as an example for the usage of a statepoint based; /// lowering strategy. This GCStrategy is intended to suitable as a default; /// implementation usable with any collector which can consume the standard; /// stackmap format generated by statepoints, uses the default addrespace to; /// distinguish between gc managed and non-gc managed pointers, and has; /// reasonable relocation semantics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BuiltinGCs.cpp:177,usab,usable,177,interpreter/llvm-project/llvm/lib/IR/BuiltinGCs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BuiltinGCs.cpp,1,['usab'],['usable']
Usability,"/// A MemorySSAWalker that does no alias queries, or anything else. It; /// simply returns the links as they were constructed by the builder.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h:76,simpl,simply,76,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSA.h,1,['simpl'],['simply']
Usability,"/// A ProcResource can have multiple units.; ///; /// For processor resource groups this field is a mask of contained resource; /// units. It is obtained from ResourceMask by clearing the highest set bit.; /// The number of resource units in a group can be simply computed as the; /// population count of this field.; ///; /// For normal (i.e. non-group) resources, the number of bits set in this mask; /// is equivalent to the number of units declared by the processor model (see; /// field 'NumUnits' in 'ProcResourceUnits').",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:175,clear,clearing,175,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,2,"['clear', 'simpl']","['clearing', 'simply']"
Usability,"/// A RooAbsReal::Ref can be constructed from a `RooAbsReal&` or a `double`; /// that will be implicitly converted to a RooConstVar&. The RooAbsReal::Ref; /// can be used as a replacement for `RooAbsReal&`. With this type; /// definition, you can write RooFit interfaces that accept both RooAbsReal,; /// or simply a number that will be implicitly converted to a RooConstVar&.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:308,simpl,simply,308,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['simpl'],['simply']
Usability,"/// A SimpleCompiler that owns its TargetMachine.; ///; /// This is convenient for clients who don't want to own their TargetMachines,; /// e.g. LLJIT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:6,Simpl,SimpleCompiler,6,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,1,['Simpl'],['SimpleCompiler']
Usability,"/// A _weak topological ordering_ (WTO) of CFG nodes provides a total order over; /// the CFG (defined in `WTOCompare`, below), which can guide the order in which; /// to visit nodes in fixpoint computations over the CFG.; ///; /// Roughly, a WTO a) groups the blocks so that loop heads are grouped with; /// their bodies and any nodes they dominate after the loop and b) orders the; /// groups topologically. As a result, the blocks in a series of loops are; /// ordered such that all nodes in loop `i` are earlier in the order than nodes; /// in loop `j`. This ordering, when combined with widening, bounds the number; /// of times a node must be visited for a dataflow algorithm to reach a; /// fixpoint. For the precise definition of a WTO and its properties, see; /// [Bourdoncle1993].; ///; /// Here, we provide a simplified WTO which drops its nesting structure,; /// maintaining only the ordering itself. The ordering is built from the limit; /// flow graph of `Cfg` (derived from iteratively partitioning it into; /// intervals) if and only if it is reducible (its limit flow graph has one; /// node). Returns `nullopt` when `Cfg` is not reducible.; ///; /// This WTO construction is described in Section 4.2 of [Bourdoncle1993].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/IntervalPartition.h:138,guid,guide,138,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/IntervalPartition.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/IntervalPartition.h,2,"['guid', 'simpl']","['guide', 'simplified']"
Usability,"/// A base class to help implement the function alias analysis results concept.; ///; /// Because of the nature of many alias analysis implementations, they often; /// only implement a subset of the interface. This base class will attempt to; /// implement the remaining portions of the interface in terms of simpler forms; /// of the interface where possible, and otherwise provide conservatively; /// correct fallback implementations.; ///; /// Implementors of an alias analysis should derive from this class, and then; /// override specific methods that they wish to customize. There is no need to; /// use virtual anywhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:309,simpl,simpler,309,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['simpl'],['simpler']
Usability,"/// A base type of mapped iterator, that is useful for building derived; /// iterators that do not need/want to store the map function (as in; /// mapped_iterator). These iterators must simply provide a `mapElement` method; /// that defines how to map a value of the iterator to the provided reference; /// type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:186,simpl,simply,186,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['simpl'],['simply']
Usability,"/// A boolean expression such as ""true"" or ""V1 & !V2"".; /// Expressions may refer to boolean atomic variables. These should take a; /// consistent true/false value across the set of formulas being considered.; ///; /// (Formulas are always expressions in terms of boolean variables rather than; /// e.g. integers because our underlying model is SAT rather than e.g. SMT).; ///; /// Simple formulas such as ""true"" and ""V1"" are self-contained.; /// Compound formulas connect other formulas, e.g. ""(V1 & V2) || V3"" is an 'or'; /// formula, with pointers to its operands ""(V1 & V2)"" and ""V3"" stored as; /// trailing objects.; /// For this reason, Formulas are Arena-allocated and over-aligned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h:382,Simpl,Simple,382,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,1,['Simpl'],['Simple']
Usability,/// A cache of @llvm.assume intrinsics used by SimplifyInstruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:47,Simpl,SimplifyInstruction,47,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['Simpl'],['SimplifyInstruction']
Usability,/// A cache of \@llvm.assume calls used by SimplifyInstruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PHITransAddr.h:43,Simpl,SimplifyInstruction,43,interpreter/llvm-project/llvm/include/llvm/Analysis/PHITransAddr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PHITransAddr.h,1,['Simpl'],['SimplifyInstruction']
Usability,"/// A class representing a position in a DataExtractor, as well as any error; /// encountered during extraction. It enables one to extract a sequence of; /// values without error-checking and then checking for errors in bulk at the; /// end. The class holds an Error object, so failing to check the result of; /// the parse will result in a runtime error. The error flag is sticky and; /// will cause all subsequent extraction functions to fail without even; /// attempting to parse and without updating the Cursor offset. After clearing; /// the error flag, one can again use the Cursor object for parsing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:529,clear,clearing,529,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['clear'],['clearing']
Usability,/// A collapsed DomainValue has no instructions to twiddle - it simply keeps; /// track of the domains where the registers are already available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h:64,simpl,simply,64,interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,1,['simpl'],['simply']
Usability,/// A collection of instructions to delete.; /// We try to batch deletions to simplify code and make things a bit more; /// efficient. We also make sure there is no dangling pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:78,simpl,simplify,78,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['simpl'],['simplify']
Usability,"/// A convenenience variadic helper.; /// It simply iterates over its arguments, in order.; /// ```; /// add(Arg1, Arg2);; /// ```; /// is equivalent to; /// ```; /// add(Arg1); /// add(Arg2); /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:45,simpl,simply,45,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,1,['simpl'],['simply']
Usability,"/// A declaration that can appear at the top-level. Note that this does *not*; /// correspond 1-to-1 to clang::Decl. Syntax trees distinguish between top-level; /// declarations (e.g. namespace definitions) and declarators (e.g. variables,; /// typedefs, etc.). Declarators are stored inside SimpleDeclaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h:292,Simpl,SimpleDeclaration,292,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,1,['Simpl'],['SimpleDeclaration']
Usability,/// A deduction-guide name (a template-name),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:16,guid,guide,16,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['guid'],['guide']
Usability,"/// A field qualifies as simple if it is both mappable and has no post-read callback",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:25,simpl,simple,25,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['simpl'],['simple']
Usability,/// A frontend action which simply wraps some other runtime-specified; /// frontend action.; ///; /// Deriving from this class allows an action to inject custom logic around; /// some existing action's behavior. It implements every virtual method in; /// the FrontendAction interface by forwarding to the wrapped action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:28,simpl,simply,28,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,1,['simpl'],['simply']
Usability,"/// A generic diagnostic builder for errors which may or may not be deferred.; ///; /// In CUDA, there exist constructs (e.g. variable-length arrays, try/catch); /// which are not allowed to appear inside __device__ functions and are; /// allowed to appear in __host__ __device__ functions only if the host+device; /// function is never codegen'ed.; ///; /// To handle this, we use the notion of ""deferred diagnostics"", where we; /// attach a diagnostic to a FunctionDecl that's emitted iff it's codegen'ed.; ///; /// This class lets you emit either a regular diagnostic, a deferred; /// diagnostic, or no diagnostic at all, according to an argument you pass to; /// its constructor, thus simplifying the process of creating these ""maybe; /// deferred"" diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:689,simpl,simplifying,689,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['simpl'],['simplifying']
Usability,"/// A handle to the function-wide basic block to block chain mapping.; ///; /// This is retained in each block chain to simplify the computation of child; /// block chains for SCC-formation and iteration. We store the edges to child; /// basic blocks, and map them back to their associated chains using this; /// structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:120,simpl,simplify,120,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['simpl'],['simplify']
Usability,"/// A helper class for separating a constant offset from a GEP index.; ///; /// In real programs, a GEP index may be more complicated than a simple addition; /// of something and a constant integer which can be trivially splitted. For; /// example, to split ((a << 3) | 5) + b, we need to search deeper for the; /// constant offset, so that we can separate the index to (a << 3) + b and 5.; ///; /// Therefore, this class looks into the expression that computes a given GEP; /// index, and tries to find a constant integer that can be hoisted to the; /// outermost level of the expression as an addition. Not every constant in an; /// expression can jump out. e.g., we cannot transform (b * (a + 5)) to (b * a +; /// 5); nor can we transform (3 * (a + 5)) to (3 * a + 5), however in this case,; /// -instcombine probably already optimized (3 * (a + 5)) to (3 * a + 15).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:141,simpl,simple,141,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['simpl'],['simple']
Usability,/// A helper function for createAddRecFromPHI to handle simple cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:56,simpl,simple,56,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['simpl'],['simple']
Usability,"/// A helper function for createAddRecFromPHI to handle simple cases.; ///; /// This function tries to find an AddRec expression for the simplest (yet most; /// common) cases: PN = PHI(Start, OP(Self, LoopInvariant)).; /// If it fails, createAddRecFromPHI will use a more general, but slow,; /// technique for finding the AddRec expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:56,simpl,simple,56,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['simpl'],"['simple', 'simplest']"
Usability,"/// A helper that repeats an SCC pass each time an indirect call is refined to; /// a direct call by that pass.; ///; /// While the CGSCC pass manager works to re-visit SCCs and RefSCCs as they; /// change shape, we may also want to repeat an SCC pass if it simply refines; /// an indirect call to a direct call, even if doing so does not alter the; /// shape of the graph. Note that this only pertains to direct calls to; /// functions where IPO across the SCC may be able to compute more precise; /// results. For intrinsics, we assume scalar optimizations already can fully; /// reason about them.; ///; /// This repetition has the potential to be very large however, as each one; /// might refine a single call site. As a consequence, in practice we use an; /// upper bound on the number of repetitions to limit things.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:258,simpl,simply,258,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['simpl'],['simply']
Usability,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:108,simpl,simply,108,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,1,['simpl'],['simply']
Usability,/// A logger that simply writes messages to the specified ostream in real; /// time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h:18,simpl,simply,18,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Logger.h,1,['simpl'],['simply']
Usability,/// A map of functions to SCC. The SCCs are described by a simple integer; /// ID that is only useful for comparing for equality (are two functions; /// in the same SCC or not?),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h:59,simpl,simple,59,interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h,1,['simpl'],['simple']
Usability,/// A more lightweight version of the Attributor which only runs attribute; /// inference but no simplifications.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:97,simpl,simplifications,97,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['simpl'],['simplifications']
Usability,/// A no-op pass template which simply forces a specific analysis result; /// to be invalidated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:32,simpl,simply,32,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['simpl'],['simply']
Usability,/// A node in a MsgPack Document. This is a simple copyable and; /// passable-by-value type that does not own any memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:44,simpl,simple,44,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['simpl'],['simple']
Usability,"/// A non-RAII class containing all the information about a bound; /// opaque value. OpaqueValueMapping, below, is a RAII wrapper for; /// this which makes individual mappings very simple; using this; /// class directly is useful when you have a variable number of; /// opaque values or don't want the RAII functionality for some; /// reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:181,simpl,simple,181,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,/// A nonce module pass used to place a barrier in a pass manager.; ///; /// There is no mechanism for ending a CGSCC pass manager once one is started.; /// This prevents extension points from having clear deterministic ordering; /// when they are phrased as non-module passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/BarrierNoopPass.cpp:200,clear,clear,200,interpreter/llvm-project/llvm/lib/Transforms/IPO/BarrierNoopPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/BarrierNoopPass.cpp,1,['clear'],['clear']
Usability,"/// A pass manager to run a set of extra function simplification passes after; /// vectorization, if requested. LoopVectorize caches the; /// ShouldRunExtraVectorPasses analysis to request extra simplifications, if; /// they could be beneficial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h:50,simpl,simplification,50,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorize.h,2,['simpl'],"['simplification', 'simplifications']"
Usability,/// A pass that does profile-guided sinking of instructions into loops.; ///; /// This is a function pass as it shouldn't be composed into any kind of; /// unified loop pass pipeline. The goal of it is to sink code into loops that; /// is loop invariant but only required within the loop body when doing so; /// reduces the global expected dynamic frequency with which it executes.; /// A classic example is an extremely cold branch within a loop body.; ///; /// We do this as a separate pass so that during normal optimization all; /// invariant operations can be held outside the loop body to simplify; /// fundamental analyses and transforms of the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h:29,guid,guided,29,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSink.h,2,"['guid', 'simpl']","['guided', 'simplify']"
Usability,"/// A pass to simplify and canonicalize the CFG of a function.; ///; /// This pass iteratively simplifies the entire CFG of a function. It may change; /// or remove control flow to put the CFG into a canonical form expected by; /// other passes of the mid-level optimizer. Depending on the specified options,; /// it may further optimize control-flow to create non-canonical forms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:14,simpl,simplify,14,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,2,['simpl'],"['simplifies', 'simplify']"
Usability,"/// A pointer to a memory block, live or dead.; ///; /// This object can be allocated into interpreter stack frames. If pointing to; /// a live block, it is a link in the chain of pointers pointing to the block.; ///; /// In the simplest form, a Pointer has a Block* (the pointee) and both Base; /// and Offset are 0, which means it will point to raw data.; ///; /// The Base field is used to access metadata about the data. For primitive; /// arrays, the Base is followed by an InitMap. In a variety of cases, the; /// Base is preceded by an InlineDescriptor, which is used to track the; /// initialization state, among other things.; ///; /// The Offset field is used to access the actual data. In other words, the; /// data the pointer decribes can be found at; /// Pointee->rawData() + Pointer.Offset.; ///; ///; /// Pointee Offset; /// │ │; /// │ │; /// ▼ ▼; /// ┌───────┬────────────┬─────────┬────────────────────────────┐; /// │ Block │ InlineDesc │ InitMap │ Actual Data │; /// └───────┴────────────┴─────────┴────────────────────────────┘; /// ▲; /// │; /// │; /// Base",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:229,simpl,simplest,229,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,1,['simpl'],['simplest']
Usability,"/// A pure virtual base class for all recipes modeling header phis, including; /// phis for first order recurrences, pointer inductions and reductions. The; /// start value is the first operand of the recipe and the incoming value from; /// the backedge is the second operand.; ///; /// Inductions are modeled using the following sub-classes:; /// * VPCanonicalIVPHIRecipe: Canonical scalar induction of the vector loop,; /// starting at a specified value (zero for the main vector loop, the resume; /// value for the epilogue vector loop) and stepping by 1. The induction; /// controls exiting of the vector loop by comparing against the vector trip; /// count. Produces a single scalar PHI for the induction value per; /// iteration.; /// * VPWidenIntOrFpInductionRecipe: Generates vector values for integer and; /// floating point inductions with arbitrary start and step values. Produces; /// a vector PHI per-part.; /// * VPDerivedIVRecipe: Converts the canonical IV value to the corresponding; /// value of an IV with different start and step values. Produces a single; /// scalar value per iteration; /// * VPScalarIVStepsRecipe: Generates scalar values per-lane based on a; /// canonical or derived induction.; /// * VPWidenPointerInductionRecipe: Generate vector and scalar values for a; /// pointer induction. Produces either a vector PHI per-part or scalar values; /// per-lane based on the canonical induction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:492,resume,resume,492,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['resume'],['resume']
Usability,"/// A raw_ostream that writes to an SmallVector or SmallString. This is a; /// simple adaptor class. This class does not encounter output errors.; /// raw_svector_ostream operates without a buffer, delegating all memory; /// management to the SmallString. Thus the SmallString is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:79,simpl,simple,79,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['simpl'],['simple']
Usability,"/// A reference group represents a set of memory references that exhibit; /// temporal or spacial reuse. Two references belong to the same; /// reference group with respect to a inner loop L iff:; /// 1. they have a loop independent dependency, or; /// 2. they have a loop carried dependence with a small dependence distance; /// (e.g. less than 2) carried by the inner loop, or; /// 3. they refer to the same array, and the subscript in their innermost; /// dimension is less than or equal to 'd' (where 'd' is less than the cache; /// line size); ///; /// Intuitively a reference group represents memory references that access; /// the same cache line. Conditions 1,2 above account for temporal reuse, while; /// contition 3 accounts for spacial reuse.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:558,Intuit,Intuitively,558,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['Intuit'],['Intuitively']
Usability,"/// A resource mask. This is generated by the tool with the help of; /// function `mca::computeProcResourceMasks' (see Support.h).; ///; /// Field ResourceMask only has one bit set if this resource state describes a; /// processor resource unit (i.e. this is not a group). That means, we can; /// quickly check if a resource is a group by simply counting the number of; /// bits that are set in the mask.; ///; /// The most significant bit of a mask (MSB) uniquely identifies a resource.; /// Remaining bits are used to describe the composition of a group (Group).; ///; /// Example (little endian):; /// Resource | Mask | MSB | Group; /// ---------+------------+------------+------------; /// A | 0b000001 | 0b000001 | 0b000000; /// | | |; /// B | 0b000010 | 0b000010 | 0b000000; /// | | |; /// C | 0b010000 | 0b010000 | 0b000000; /// | | |; /// D | 0b110010 | 0b100000 | 0b010010; ///; /// In this example, resources A, B and C are processor resource units.; /// Only resource D is a group resource, and it contains resources B and C.; /// That is because MSB(B) and MSB(C) are both contained within Group(D).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:339,simpl,simply,339,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,1,['simpl'],['simply']
Usability,/// A retain summary is simple if it has no ArgEffects other than the default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h:24,simpl,simple,24,interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,1,['simpl'],['simple']
Usability,"/// A runtime availability query.; ///; /// There are 2 ways to spell this node:; /// \code; /// @available(macos 10.10, ios 8, *); // Objective-C; /// __builtin_available(macos 10.10, ios 8, *); // C, C++, and Objective-C; /// \endcode; ///; /// Note that we only need to keep track of one \c VersionTuple here, which is; /// the one that corresponds to the current deployment target. This is meant to; /// be used in the condition of an \c if, but it is also usable as top level; /// expressions.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:461,usab,usable,461,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['usab'],['usable']
Usability,"/// A scoped hash table of the current values of all of our simple; /// scalar expressions.; ///; /// As we walk down the domtree, we look to see if instructions are in this:; /// if so, we replace them with what we find, otherwise we insert them so; /// that dominated values can succeed in their lookup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:60,simpl,simple,60,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['simpl'],['simple']
Usability,"/// A set of analyses that are preserved following a run of a transformation; /// pass.; ///; /// Transformation passes build and return these objects to communicate which; /// analyses are still valid after the transformation. For most passes this is; /// fairly simple: if they don't change anything all analyses are preserved,; /// otherwise only a short list of analyses that have been explicitly updated; /// are preserved.; ///; /// This class also lets transformation passes mark abstract *sets* of analyses; /// as preserved. A transformation that (say) does not alter the CFG can; /// indicate such by marking a particular AnalysisSetKey as preserved, and; /// then analyses can query whether that AnalysisSetKey is preserved.; ///; /// Finally, this class can represent an ""abandoned"" analysis, which is; /// not preserved even if it would be covered by some abstract set of analyses.; ///; /// Given a `PreservedAnalyses` object, an analysis will typically want to; /// figure out whether it is preserved. In the example below, MyAnalysisType is; /// preserved if it's not abandoned, and (a) it's explicitly marked as; /// preserved, (b), the set AllAnalysesOn<MyIRUnit> is preserved, or (c) both; /// AnalysisSetA and AnalysisSetB are preserved.; ///; /// ```; /// auto PAC = PA.getChecker<MyAnalysisType>();; /// if (PAC.preserved() || PAC.preservedSet<AllAnalysesOn<MyIRUnit>>() ||; /// (PAC.preservedSet<AnalysisSetA>() &&; /// PAC.preservedSet<AnalysisSetB>())) {; /// // The analysis has been successfully preserved ...; /// }; /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:264,simpl,simple,264,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['simpl'],['simple']
Usability,/// A set of live virtual registers and physical register units.; ///; /// This is a wrapper around a SparseSet which deals with mapping register unit; /// and virtual register indexes to an index usable by the sparse set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:197,usab,usable,197,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,1,['usab'],['usable']
Usability,/// A simple AA result that uses TBAA metadata to answer queries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TypeBasedAliasAnalysis.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Analysis/TypeBasedAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TypeBasedAliasAnalysis.h,2,['simpl'],['simple']
Usability,/// A simple AA result which uses scoped-noalias metadata to answer queries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScopedNoAliasAA.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Analysis/ScopedNoAliasAA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScopedNoAliasAA.h,1,['simpl'],['simple']
Usability,/// A simple EPC server implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,1,['simpl'],['simple']
Usability,/// A simple RAII based Delegate installer.; /// Use this in a scope to install a delegate to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,1,['simpl'],['simple']
Usability,/// A simple RAII based Observer installer.; /// Use this in a scope to install the Observer to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,1,['simpl'],['simple']
Usability,/// A simple alias analysis implementation that uses ScalarEvolution to answer; /// queries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionAliasAnalysis.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionAliasAnalysis.h,1,['simpl'],['simple']
Usability,"/// A simple and fast domtree-based CSE pass.; ///; /// This pass does a simple depth-first walk over the dominator tree,; /// eliminating trivially redundant instructions and using instsimplify to; /// canonicalize things as it goes. It is intended to be fast and catch obvious; /// cases so that instcombine and other passes are more effective. It is; /// expected that a later pass of GVN will catch the interesting/hard cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,6,['simpl'],['simple']
Usability,/// A simple and fast domtree-based GVN pass to hoist common expressions; /// from sibling branches.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,1,['simpl'],['simple']
Usability,/// A simple array of base specifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['simpl'],['simple']
Usability,/// A simple binary serialization of an offloading file. We use this format to; /// embed the offloading image into the host executable so it can be extracted; /// and used by the linker.; ///; /// Many of these could be stored in the same section by the time the linker; /// sees it so we mark this information with a header. The version is used to; /// detect ABI stability and the size is used to find other offloading entries; /// that may exist in the same section. All offsets are given as absolute byte; /// offsets from the beginning of the file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/OffloadBinary.h,1,['simpl'],['simple']
Usability,"/// A simple class that finds DeclRefExpr in the given expression.; ///; /// However, we don't want to find ANY nested DeclRefExpr skipping whatever; /// expressions on our way. Only certain expressions considered ""no-op""; /// for our task are indeed skipped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:6,simpl,simple,6,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['simpl'],['simple']
Usability,/// A simple code-completion consumer that prints the results it; /// receives in a simple format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,2,['simpl'],['simple']
Usability,"/// A simple dependency action controller that uses a callback. If no callback; /// is provided, it is assumed that looking up module outputs is unreachable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['simpl'],['simple']
Usability,"/// A simple file can either be written as TFile container or as NTuple bare file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx:6,simpl,simple,6,tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,1,['simpl'],['simple']
Usability,/// A simple handler which streams the returned data to a cache file. The cache; /// file is only created if a 200 OK status is observed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp:6,simpl,simple,6,interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp,1,['simpl'],['simple']
Usability,/// A simple helper class to pack several bits in order into (a) 32 bit; /// integer(s).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,1,['simpl'],['simple']
Usability,/// A simple helper class to unpack an integer to bits and consuming; /// the bits in order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['simpl'],['simple']
Usability,/// A simple holder for a QualType representing a type in an; /// exception specification. Unfortunately needed by FunctionProtoType; /// because TrailingObjects cannot handle repeated types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['simpl'],['simple']
Usability,/// A simple holder for various uncommon bits which do not fit in; /// FunctionTypeBitfields. Aligned to alignof(void *) to maintain the; /// alignment of subsequent objects in TrailingObjects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['simpl'],['simple']
Usability,/// A simple identifier lookup iterator that represents an; /// empty sequence of identifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:6,simpl,simple,6,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,1,['simpl'],['simple']
Usability,"/// A simple intrusive list implementation.; ///; /// This is a simple intrusive list for a \c T that inherits from \c; /// ilist_node<T>. The list never takes ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,3,"['clear', 'simpl']","['clear', 'simple']"
Usability,/// A simple linked-list of traversed states that can have a shared tail. The; /// traversed path is stored in reverse order with the latest state as the; /// head.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h,1,['simpl'],['simple']
Usability,/// A simple loop rotation transformation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopRotation.h,3,['simpl'],['simple']
Usability,/// A simple memoizer of T(*)() functions.; ///; /// It will call the passed 'Func' template parameter at most once.; /// Used to support AST_MATCHER_FUNCTION() macro.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['simpl'],['simple']
Usability,"/// A simple notion of pointer kinds, which matches up with the various; /// pointer declarators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:6,simpl,simple,6,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['simpl'],['simple']
Usability,/// A simple pair of identifier info and location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['simpl'],['simple']
Usability,"/// A simple registry entry which provides only a name, description, and; /// no-argument constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,1,['simpl'],['simple']
Usability,"/// A simple round-robin selector for processor resource units.; /// Each bit of this mask identifies a sub resource within a group.; ///; /// As an example, lets assume that this is a default policy for a; /// processor resource group composed by the following three units:; /// ResourceA -- 0b001; /// ResourceB -- 0b010; /// ResourceC -- 0b100; ///; /// Field NextInSequenceMask is used to select the next unit from the set of; /// resource units. It defaults to the value of field `ResourceUnitMasks` (in; /// this example, it defaults to mask '0b111').; ///; /// The round-robin selector would firstly select 'ResourceC', then; /// 'ResourceB', and eventually 'ResourceA'. When a resource R is used, the; /// corresponding bit in NextInSequenceMask is cleared. For example, if; /// 'ResourceC' is selected, then the new value of NextInSequenceMask becomes; /// 0xb011.; ///; /// When NextInSequenceMask becomes zero, it is automatically reset to the; /// default value (i.e. ResourceUnitMask).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:6,simpl,simple,6,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,2,"['clear', 'simpl']","['cleared', 'simple']"
Usability,/// A simple structure that captures a vtable use for the purposes of; /// the \c ExternalSemaSource.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,1,['simpl'],['simple']
Usability,/// A simple token,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:6,simpl,simple,6,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['simpl'],['simple']
Usability,/// A simple visitor class that helps create attribute visitors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AttrVisitor.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/AttrVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AttrVisitor.h,1,['simpl'],['simple']
Usability,/// A simple visitor class that helps create attribute visitors.; ///; /// This class preserves constness of Attr pointers (see also; /// AttrVisitor).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AttrVisitor.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/AttrVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AttrVisitor.h,1,['simpl'],['simple']
Usability,/// A simple visitor class that helps create declaration visitors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h,1,['simpl'],['simple']
Usability,/// A simple visitor class that helps create declaration visitors.; ///; /// This class preserves constness of Decl pointers (see also DeclVisitor).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h,1,['simpl'],['simple']
Usability,/// A simple visitor class that helps create template argument visitors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h,1,['simpl'],['simple']
Usability,/// A simple visitor class that helps create template argument visitors.; ///; /// This class preserves constness of TemplateArgument references (see also; /// TemplateArgumentVisitor).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h,1,['simpl'],['simple']
Usability,/// A simple visitor to record what VarDecls occur in EH-handling code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp:6,simpl,simple,6,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp,1,['simpl'],['simple']
Usability,/// A simple wrapper when you only need to notify checkers of pointer-escape; /// of some values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:6,simpl,simple,6,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['simpl'],['simple']
Usability,"/// A simplified binary data writer class that doesn't require targets, target; /// definitions, architectures, or require any other optional compile time; /// libraries to be enabled via the build process. This class needs the ability; /// to seek to different spots in the binary stream that is produces to fixup; /// offsets and sizes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h:6,simpl,simplified,6,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h,1,['simpl'],['simplified']
Usability,"/// A simplified classification of types used to determine whether two; /// types are ""similar enough"" when adjusting priorities.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:6,simpl,simplified,6,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['simpl'],['simplified']
Usability,"/// A simplified classification of types used when determining; /// ""similar"" types for code completion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:6,simpl,simplified,6,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['simpl'],['simplified']
Usability,/// A simplified description of \c CommentDecl kind that should be good enough; /// for documentation rendering purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Comment.h:6,simpl,simplified,6,interpreter/llvm-project/clang/include/clang/AST/Comment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Comment.h,1,['simpl'],['simplified']
Usability,"/// A simplistic name lookup mechanism that performs name lookup; /// into this declaration context without consulting the external source.; ///; /// This function should almost never be used, because it subverts the; /// usual relationship between a DeclContext and the external source.; /// See the ASTImporter for the (few, but important) use cases.; ///; /// FIXME: This is very inefficient; replace uses of it with uses of; /// noload_lookup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:6,simpl,simplistic,6,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['simpl'],['simplistic']
Usability,"/// A switch()-like statement whose cases are string literals.; ///; /// The StringSwitch class is a simple form of a switch() statement that; /// determines whether the given string matches one of the given string; /// literals. The template type parameter \p T is the type of the value that; /// will be returned from the string-switch expression. For example,; /// the following code switches on the name of a color in \c argv[i]:; ///; /// \code; /// Color color = StringSwitch<Color>(argv[i]); /// .Case(""red"", Red); /// .Case(""orange"", Orange); /// .Case(""yellow"", Yellow); /// .Case(""green"", Green); /// .Case(""blue"", Blue); /// .Case(""indigo"", Indigo); /// .Cases(""violet"", ""purple"", Violet); /// .Default(UnknownColor);; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h:101,simpl,simple,101,interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringSwitch.h,1,['simpl'],['simple']
Usability,/// A thread-safe version of SimpleCompiler.; ///; /// This class creates a new TargetMachine and SimpleCompiler instance for each; /// compile.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:29,Simpl,SimpleCompiler,29,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,2,['Simpl'],['SimpleCompiler']
Usability,"/// A trie to efficiently match against the entries of the compilation; /// database in order of matching suffix length.; ///; /// When a clang tool is supposed to operate on a specific file, we have to; /// find the corresponding file in the compilation database. Although entries; /// in the compilation database are keyed by filename, a simple string match; /// is insufficient because of symlinks. Commonly, a project hierarchy looks; /// like this:; /// /<project-root>/src/<path>/<somefile>.cc (used as input for the tool); /// /<project-root>/build/<symlink-to-src>/<path>/<somefile>.cc (stored in DB); ///; /// Furthermore, there might be symlinks inside the source folder or inside the; /// database, so that the same source file is translated with different build; /// options.; ///; /// For a given input file, the \c FileMatchTrie finds its entries in order; /// of matching suffix length. For each suffix length, there might be one or; /// more entries in the database. For each of those entries, it calls; /// \c llvm::sys::fs::equivalent() (injected as \c PathComparator). There might; /// be zero or more entries with the same matching suffix length that are; /// equivalent to the input file. Three cases are distinguished:; /// 0 equivalent files: Continue with the next suffix length.; /// 1 equivalent file: Best match found, return it.; /// >1 equivalent files: Match is ambiguous, return error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h:340,simpl,simple,340,interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/FileMatchTrie.h,1,['simpl'],['simple']
Usability,"/// A utility class for making simple allocations using JITLinkMemoryManager.; ///; /// SimpleSegementAlloc takes a mapping of AllocGroups to Segments and uses; /// this to create a LinkGraph with one Section (containing one Block) per; /// Segment. Clients can obtain a pointer to the working memory and executor; /// address of that block using the Segment's AllocGroup. Once memory has been; /// populated, clients can call finalize to finalize the memory.; ///; /// Note: Segments with MemLifetime::NoAlloc are not permitted, since they would; /// not be useful, and their presence is likely to indicate a bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:31,simpl,simple,31,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,2,"['Simpl', 'simpl']","['SimpleSegementAlloc', 'simple']"
Usability,/// A utility class used to compute instruction encodings for a code region.; ///; /// It provides a simple API to compute and return instruction encodings as; /// strings. Encodings are cached internally for later usage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h:101,simpl,simple,101,interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,1,['simpl'],['simple']
Usability,/// A utility pass template that simply runs another pass multiple times.; ///; /// This can be useful when debugging or testing passes. It also serves as an; /// example of how to extend the pass manager in ways beyond composition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:33,simpl,simply,33,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['simpl'],['simply']
Usability,"/// A variant matcher object.; ///; /// The purpose of this object is to abstract simple and polymorphic matchers; /// into a single object type.; /// Polymorphic matchers might be implemented as a list of all the possible; /// overloads of the matcher. \c VariantMatcher knows how to select the; /// appropriate overload when needed.; /// To get a real matcher object out of a \c VariantMatcher you can do:; /// - getSingleMatcher() which returns a matcher, only if it is not ambiguous; /// to decide which matcher to return. Eg. it contains only a single; /// matcher, or a polymorphic one with only one overload.; /// - hasTypedMatcher<T>()/getTypedMatcher<T>(): These calls will determine if; /// the underlying matcher(s) can unambiguously return a Matcher<T>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:82,simpl,simple,82,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,1,['simpl'],['simple']
Usability,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,simpl,simplified,49,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['simpl'],['simplified']
Usability,"/// A very simple comment parser that extracts ""a brief description"".; ///; /// Due to a variety of comment styles, it considers the following as ""a brief; /// description"", in order of priority:; /// \li a \or \\short command,; /// \li the first paragraph,; /// \li a \\result or \\return or \\returns paragraph.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CommentBriefParser.h:11,simpl,simple,11,interpreter/llvm-project/clang/include/clang/AST/CommentBriefParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CommentBriefParser.h,1,['simpl'],['simple']
Usability,"/// A very simple error handler that is usually replaced by the TROOT default error handler.; /// The minimal error handler is not serialized across threads, so that output of multi-threaded programs; /// can get scrambled; /// @note `abort()` is only called if `abort_bool` is `true` and `level >= gErrorIgnoreLevel`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TError.cxx:11,simpl,simple,11,core/foundation/src/TError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/TError.cxx,1,['simpl'],['simple']
Usability,/// A worklist of the instructions that need to be simplified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:51,simpl,simplified,51,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,1,['simpl'],['simplified']
Usability,/// A wrapper around ScalarEvolution used to add runtime SCEV checks. Applies; /// dynamic knowledge to simplify SCEV expressions and converts them to a; /// more usable form.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:104,simpl,simplify,104,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,"['simpl', 'usab']","['simplify', 'usable']"
Usability,/// A wrapper around ScalarEvolution used to add runtime SCEV checks.; /// Applies dynamic knowledge to simplify SCEV expressions in the context; /// of existing SCEV assumptions. The analysis will also add a minimal set; /// of new predicates if this is required to enable vectorization and; /// unrolling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:104,simpl,simplify,104,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['simpl'],['simplify']
Usability,"/// A wrapper around ScalarEvolution, used to add runtime SCEV checks, and; /// applies dynamic knowledge to simplify SCEV expressions and convert them; /// to a more usable form. We need this in case assumptions about SCEV; /// expressions need to be made in order to avoid unknown dependences. For; /// example we might assume a unit stride for a pointer in order to prove; /// that a memory access is strided and doesn't wrap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:109,simpl,simplify,109,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,2,"['simpl', 'usab']","['simplify', 'usable']"
Usability,"/// A wrapper around ScalarEvolution, used to add runtime SCEV checks.; /// Simplifies SCEV expressions in the context of existing SCEV assumptions.; /// The interleaved access analysis can also add new predicates (for example; /// by versioning strides of pointers).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h:76,Simpl,Simplifies,76,interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/VectorUtils.h,1,['Simpl'],['Simplifies']
Usability,"/// A wrapper class for fallible iterators.; ///; /// The fallible_iterator template wraps an underlying iterator-like class; /// whose increment and decrement operations are replaced with fallible versions; /// like:; ///; /// @code{.cpp}; /// Error inc();; /// Error dec();; /// @endcode; ///; /// It produces an interface that is (mostly) compatible with a traditional; /// c++ iterator, including ++ and -- operators that do not fail.; ///; /// Instances of the wrapper are constructed with an instance of the; /// underlying iterator and (for non-end iterators) a reference to an Error; /// instance. If the underlying increment/decrement operations fail, the Error; /// is returned via this reference, and the resulting iterator value set to an; /// end-of-range sentinel value. This enables the following loop idiom:; ///; /// @code{.cpp}; /// class Archive { // E.g. Potentially malformed on-disk archive; /// public:; /// fallible_iterator<ArchiveChildItr> children_begin(Error &Err);; /// fallible_iterator<ArchiveChildItr> children_end();; /// iterator_range<fallible_iterator<ArchiveChildItr>>; /// children(Error &Err) {; /// return make_range(children_begin(Err), children_end());; /// //...; /// };; ///; /// void walk(Archive &A) {; /// Error Err = Error::success();; /// for (auto &C : A.children(Err)) {; /// // Loop body only entered when increment succeeds.; /// }; /// if (Err) {; /// // handle error.; /// }; /// }; /// @endcode; ///; /// The wrapper marks the referenced Error as unchecked after each increment; /// and/or decrement operation, and clears the unchecked flag when a non-end; /// value is compared against end (since, by the increment invariant, not being; /// an end value proves that there was no error, and is equivalent to checking; /// that the Error is success). This allows early exits from the loop body; /// without requiring redundant error checks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h:1571,clear,clears,1571,interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/fallible_iterator.h,1,['clear'],['clears']
Usability,/// A wrapper class to simplify modification of SwitchInst cases along with; /// their prof branch_weights metadata.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:23,simpl,simplify,23,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['simpl'],['simplify']
Usability,/// AAQueryInfo that uses SimpleCaptureInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:26,Simpl,SimpleCaptureInfo,26,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['Simpl'],['SimpleCaptureInfo']
Usability,/// API for tracking metadata references through RAUW and deletion.; ///; /// Shared API for updating \a Metadata pointers in subclasses that support; /// RAUW.; ///; /// This API is not meant to be used directly. See \a TrackingMDRef for a; /// user-friendly tracking reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:246,user-friendly,user-friendly,246,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['user-friendly'],['user-friendly']
Usability,"/// ARM EHABI Section 5 - Index Table Entries; /// * The first word contains a PREL31 offset to the start of a function with; /// bit 31 clear; /// * The second word contains one of:; /// - The PREL31 offset of the start of the table entry for the function,; /// with bit 31 clear; /// - The exception-handling table entry itself with bit 31 set; /// - The special bit pattern EXIDX_CANTUNWIND, indicating that associated; /// frames cannot be unwound",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:137,clear,clear,137,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,2,['clear'],['clear']
Usability,/// ASTReaderListenter implementation to set SuggestedPredefines of; /// ASTReader which is required to use a pch file. This is the replacement; /// of PCHValidator or SimplePCHValidator when using a pch file without; /// validating it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:168,Simpl,SimplePCHValidator,168,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['Simpl'],['SimplePCHValidator']
Usability,/// Accelerator table data implementation for simple Apple accelerator tables; /// with a DIE offset but no actual DIE pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:46,simpl,simple,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['simpl'],['simple']
Usability,/// Accelerator table data implementation for simple Apple accelerator tables; /// with just a DIE reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:46,simpl,simple,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['simpl'],['simple']
Usability,/// Access the list of assumption handles currently tracked for this; /// function.; ///; /// Note that these produce weak handles that may be null. The caller must; /// handle that case.; /// FIXME: We should replace this with pointee_iterator<filter_iterator<...>>; /// when we can write that to filter out the null values. Then caller code; /// will become simpler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h:360,simpl,simpler,360,interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h,1,['simpl'],['simpler']
Usability,/// Accumulate a constant GEP offset into an APInt if possible.; ///; /// Returns false if unable to compute the offset for any reason. Respects any; /// simplified values known during the analysis of this callsite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:154,simpl,simplified,154,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['simpl'],['simplified']
Usability,"/// Add RDF nodes that require just-in-time compilation to the computation graph.; /// This method also clears the contents of GetCodeToJit().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx:104,clear,clears,104,tree/dataframe/src/RLoopManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx,1,['clear'],['clears']
Usability,"/// Add a C assignment step.; //; // FIXME: It isn't clear whether this should ever be needed;; // ideally, we would handle everything needed in C in the common; // path. However, that isn't the case yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:53,clear,clear,53,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['clear'],['clear']
Usability,"/// Add a new branch, and infer the data type from the array `addobj` being passed.; ///; /// \note This and the previous overload should cover most cases for creating a branch. Try to use these two whenever; /// possible, unless e.g. type conversions are needed.; ///; /// \param[in] name Name of the branch to be created.; /// \param[in] addobj Array of the objects to be added. When calling Fill(), the current value of the type/object will be saved.; /// \param[in] bufsize he buffer size in bytes for this branch. When the buffer is full, it is compressed and written to disc.; /// The default value of 32000 bytes and should be ok for most simple types. Larger buffers (e.g. 256000) if your Tree is not split and each entry is large (Megabytes).; /// A small value for bufsize is beneficial if entries in the Tree are accessed randomly and the Tree is in split mode.; /// \param[in] splitlevel If T is a class or struct and splitlevel > 0, the members of the object are serialised as separate branches.; /// \return Pointer to the TBranch that was created. The branch is owned by the tree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h:646,simpl,simple,646,tree/tree/inc/TTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h,1,['simpl'],['simple']
Usability,"/// Add a new branch, and infer the data type from the type of `obj` being passed.; ///; /// \note This and the next overload should cover most cases for creating a branch. Try to use these two whenever; /// possible, unless e.g. type conversions are needed.; ///; /// \param[in] name Name of the branch to be created.; /// \param[in] obj Address of the object to be added. Make sure to pass a pointer to the actual type/class that; /// should be stored in the tree (no pointers to base classes). When calling Fill(), the current value of the type/object will be saved.; /// \param[in] bufsize The buffer size in bytes for this branch. When the buffer is full, it is compressed and written to disc.; /// The default value of 32000 bytes and should be ok for most simple types. Larger buffers (e.g. 256000) if your Tree is not split and each entry is large (Megabytes).; /// A small value for bufsize is beneficial if entries in the Tree are accessed randomly and the Tree is in split mode.; /// \param[in] splitlevel If T is a class or struct and splitlevel > 0, the members of the object are serialised as separate branches.; /// \return Pointer to the TBranch that was created. The branch is owned by the tree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h:763,simpl,simple,763,tree/tree/inc/TTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h,1,['simpl'],['simple']
Usability,/// Add an original name for the value of the given GUID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:52,GUID,GUID,52,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,"/// Add default attributes to a function, which have merge semantics under; /// -mlink-builtin-bitcode and should not simply overwrite any existing; /// attributes in the linked library.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:118,simpl,simply,118,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['simpl'],['simply']
Usability,"/// Additional information about basic blocks where the current variable is; /// live. Such a block will look like one of these templates:; ///; /// 1. | o---x | Internal to block. Variable is only live in this block.; /// 2. |---x | Live-in, kill.; /// 3. | o---| Def, live-out.; /// 4. |---x o---| Live-in, kill, def, live-out. Counted by NumGapBlocks.; /// 5. |---o---o---| Live-through with uses or defs.; /// 6. |-----------| Live-through without uses. Counted by NumThroughBlocks.; ///; /// Two BlockInfo entries are created for template 4. One for the live-in; /// segment, and one for the live-out segment. These entries look as if the; /// block were split in the middle where the live range isn't live.; ///; /// Live-through blocks without any uses don't get BlockInfo entries. They; /// are simply listed in ThroughBlocks instead.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:803,simpl,simply,803,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,1,['simpl'],['simply']
Usability,/// Additional overload to guarantee simplified codegen; this is equivalent to; /// concat().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h:37,simpl,simplified,37,interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Twine.h,2,['simpl'],['simplified']
Usability,"/// Adds a dot to the end of the given expression, but adds parentheses when; /// needed by the syntax, and simplifies to `->` when possible, e.g.:; ///; /// `x` becomes `x.`; /// `*a` becomes `a->`; /// `a+b` becomes `(a+b).`; ///; /// DEPRECATED. Use `buildAccess`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h:108,simpl,simplifies,108,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,1,['simpl'],['simplifies']
Usability,"/// Adds an appropriate access operator (`.`, `->` or nothing, in the case of; /// implicit `this`) to the end of the given expression. Adds parentheses when; /// needed by the syntax and simplifies when possible. If `PLTypeClass` is; /// `Pointer`, for known pointer-like types (see `isKnownPointerLikeType`),; /// treats `operator->` and `operator*` like the built-in `->` and `*`; /// operators.; ///; /// `x` becomes `x->` or `x.`, depending on `E`'s type; /// `a+b` becomes `(a+b)->` or `(a+b).`, depending on `E`'s type; /// `&a` becomes `a.`; /// `*a` becomes `a->`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h:188,simpl,simplifies,188,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,1,['simpl'],['simplifies']
Usability,"/// Adds an arrow to the end of the given expression, but adds parentheses; /// when needed by the syntax, and simplifies to `.` when possible, e.g.:; ///; /// `x` becomes `x->`; /// `&a` becomes `a.`; /// `a+b` becomes `(a+b)->`; ///; /// DEPRECATED. Use `buildAccess`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h:111,simpl,simplifies,111,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,1,['simpl'],['simplifies']
Usability,"/// Adds barrier chain edges from all SUs in map, and then clear the map.; /// This is equivalent to insertBarrierChain(), but optimized for the common; /// case where the new BarrierChain (a global memory object) has a higher; /// NodeNum than all SUs in map. It is assumed BarrierChain has been set; /// before calling this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:59,clear,clear,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['clear'],['clear']
Usability,"/// Adds the `L1 v ... v Ln` clause to the formula. Applies; /// simplifications, based on single-literal clauses.; ///; /// Requirements:; ///; /// `Li` must not be `NullLit`.; ///; /// All literals must be distinct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:65,simpl,simplifications,65,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['simpl'],['simplifications']
Usability,/// Adjusts a program memory address.; /// This is a simple right-shift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp:53,simpl,simple,53,interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp,1,['simpl'],['simple']
Usability,"/// Advance one step based on the previous match status unless the previous; /// status is MS_None. Then update Status based on the comparison between two; /// container iterators at the current step. If the previous status is; /// MS_None, it means two iterators are at the beginning and no comparison has; /// been made, so we simply update Status without advancing the iterators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:329,simpl,simply,329,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['simpl'],['simply']
Usability,"/// All fields that have columns have a distinct main column. E.g., for simple fields (float, int, ...), the; /// principal column corresponds to the field type. For collection fields except fixed-sized arrays,; /// the main column is the offset field. Class fields have no column of their own.; /// When reading, points to any column of the column team of the active representation. Usually, this is just; /// the first column.; /// When writing, points to the first column index of the currently active (not suppressed) column representation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:72,simpl,simple,72,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['simpl'],['simple']
Usability,/// All the callbacks in one container to simplify iteration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:42,simpl,simplify,42,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,1,['simpl'],['simplify']
Usability,/// Allow standard passes to be disabled by command line options. This supports; /// simple binary flags that either suppress the pass or do nothing.; /// i.e. -disable-mypass=false has no effect.; /// These should be converted to boolOrDefault in order to use applyOverride.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:85,simpl,simple,85,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,1,['simpl'],['simple']
Usability,"/// Allow the target to reverse allocation order of local live ranges. This; /// will generally allocate shorter local live ranges first. For targets with; /// many registers, this could reduce regalloc compile time by a large; /// factor. It is disabled by default for three reasons:; /// (1) Top-down allocation is simpler and easier to debug for targets that; /// don't benefit from reversing the order.; /// (2) Bottom-up allocation could result in poor evicition decisions on some; /// targets affecting the performance of compiled code.; /// (3) Bottom-up allocation is no longer guaranteed to optimally color.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:317,simpl,simpler,317,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['simpl'],['simpler']
Usability,"/// Allows the conversion of a \c Matcher<Type> to a \c; /// Matcher<QualType>.; ///; /// Depending on the constructor argument, the matcher is either strict, i.e.; /// does only matches in the absence of qualifiers, or not, i.e. simply; /// ignores any qualifiers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:230,simpl,simply,230,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['simpl'],['simply']
Usability,"/// An ""identifier"" for a virtual function. This contains the type identifier; /// represented as a GUID and the offset from the address point to the virtual; /// function pointer, where ""address point"" is as defined in the Itanium ABI:; /// https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vtable-general",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:100,GUID,GUID,100,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,"/// An ID used in the DbgOpIDMap (below) to lookup a stored DbgOp. This is used; /// in place of actual DbgOps inside of a DbgValue to reduce its size, as; /// DbgValue is very frequently used and passed around, and the actual DbgOp is; /// over 8x larger than this class, due to storing a MachineOperand. This ID; /// should be equal for all equal DbgOps, and also encodes whether the mapped; /// DbgOp is a constant, meaning that for simple equality or const-ness checks; /// it is not necessary to lookup this ID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:436,simpl,simple,436,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['simpl'],['simple']
Usability,/// An RAII object to set (and then clear) a mapping for an OpaqueValueExpr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:36,clear,clear,36,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['clear'],['clear']
Usability,/// An SDNode that holds an arbitrary LLVM IR Value. This is; /// used when the SelectionDAG needs to make a simple reference to something; /// in the LLVM IR representation.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:109,simpl,simple,109,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['simpl'],['simple']
Usability,/// An abstract interface for value simplify abstract attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:36,simpl,simplify,36,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplify']
Usability,"/// An analysis to compute the \c PointerTypes for pointers in a \c Module.; /// Since this analysis is only run during codegen and the new pass manager; /// doesn't support codegen passes, this is wrtten as a function in a namespace.; /// It is very simple to transform it into a proper analysis pass.; /// This code relies on typed pointers existing as LLVM types, but could be; /// migrated to a custom Type if PointerType loses typed support.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXIRPasses/PointerTypeAnalysis.h:251,simpl,simple,251,interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXIRPasses/PointerTypeAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXIRPasses/PointerTypeAnalysis.h,1,['simpl'],['simple']
Usability,"/// An assumed simplified value. Initially, it is set to std::nullopt, which; /// means that the value is not clear under current assumption. If in the; /// pessimistic state, getAssumedSimplifiedValue doesn't return this value but; /// returns orignal associated value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,simpl,simplified,15,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,"['clear', 'simpl']","['clear', 'simplified']"
Usability,/// An async resume function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp:13,resume,resume,13,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,1,['resume'],['resume']
Usability,"/// An enum to describe what types of loops we should attempt to tail-fold:; /// Disabled: None; /// Reductions: Loops containing reductions; /// Recurrences: Loops with first-order recurrences, i.e. that would; /// require a SVE splice instruction; /// Reverse: Reverse loops; /// Simple: Loops that are not reversed and don't contain reductions; /// or first-order recurrences.; /// All: All",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h:282,Simpl,Simple,282,interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Utils/AArch64BaseInfo.h,1,['Simpl'],['Simple']
Usability,/// An immutable pass that tracks lazily created \c AssumptionCache; /// objects.; ///; /// This is essentially a workaround for the legacy pass manager's weaknesses; /// which associates each assumption cache with Function and clears it if the; /// function is deleted. The nature of the AssumptionCache is that it is not; /// invalidated by any changes to the function body and so this is sufficient; /// to be conservatively correct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h:228,clear,clears,228,interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h,1,['clear'],['clears']
Usability,/// An instruction to simplify (e.g. an overflow math; /// intrinsics).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:22,simpl,simplify,22,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['simpl'],['simplify']
Usability,"/// An interface layer with SCEV used to manage how we see SCEV expressions; /// for values in the context of existing predicates. We can add new; /// predicates, but we cannot remove them.; ///; /// This layer has multiple purposes:; /// - provides a simple interface for SCEV versioning.; /// - guarantees that the order of transformations applied on a SCEV; /// expression for a single Value is consistent across two different; /// getSCEV calls. This means that, for example, once we've obtained; /// an AddRec expression for a certain value through expression; /// rewriting, we will continue to get an AddRec expression for that; /// Value.; /// - lowers the number of expression rewrites.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:252,simpl,simple,252,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['simpl'],['simple']
Usability,/// An internal division function for dividing APInts.; ///; /// This is used by the toString method to divide by the radix. It simply; /// provides a more convenient form of divide for internal use since KnuthDiv; /// has specific constraints on its inputs. If those constraints are not met; /// then it provides a simpler form of divide.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:128,simpl,simply,128,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['simpl'],"['simpler', 'simply']"
Usability,"/// An optional transcription object. This uses much more state than simply; /// traversing the DFA for acceptance, so is heap allocated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h:69,simpl,simply,69,interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h,1,['simpl'],['simply']
Usability,"/// An optional value the associated value is assumed to fold to. That is, we; /// assume the associated value (which is a call) can be replaced by this; /// simplified value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:158,simpl,simplified,158,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['simpl'],['simplified']
Usability,/// An use of a compare instruction to simplify.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:39,simpl,simplify,39,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['simpl'],['simplify']
Usability,/// Analyze the given simple or compound assignment for warning-worthy; /// operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:22,simpl,simple,22,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['simpl'],['simple']
Usability,"/// Appends all attachments for the global to \c Result, sorting by attachment; /// ID. Attachments with the same ID appear in insertion order. This function; /// does \em not clear \c Result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:176,clear,clear,176,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,1,['clear'],['clear']
Usability,"/// Applies simplifications while building up a BooleanFormula.; /// We keep track of unit clauses, which tell us variables that must be; /// true/false in any model that satisfies the overall formula.; /// Such variables can be dropped from subsequently-added clauses, which; /// may in turn yield more unit clauses or even a contradiction.; /// The total added complexity of this preprocessing is O(N) where we; /// for every clause, we do a lookup for each unit clauses.; /// The lookup is O(1) on average. This method won't catch all; /// contradictory formulas, more passes can in principle catch; /// more cases but we leave all these and the general case to the; /// proper SAT solver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:12,simpl,simplifications,12,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['simpl'],['simplifications']
Usability,"/// Applies the first rule whose pattern matches; other rules are ignored. If; /// the matchers are independent then order doesn't matter. In that case,; /// `applyFirst` is simply joining the set of rules into one.; //; // `applyFirst` is like an `anyOf` matcher with an edit action attached to each; // of its cases. Anywhere you'd use `anyOf(m1.bind(""id1""), m2.bind(""id2""))` and; // then dispatch on those ids in your code for control flow, `applyFirst` lifts; // that behavior to the rule level. So, you can write `applyFirst({makeRule(m1,; // action1), makeRule(m2, action2), ...});`; //; // For example, consider a type `T` with a deterministic serialization function,; // `serialize()`. For performance reasons, we would like to make it; // non-deterministic. Therefore, we want to drop the expectation that; // `a.serialize() = b.serialize() iff a = b` (although we'll maintain; // `deserialize(a.serialize()) = a`).; //; // We have three cases to consider (for some equality function, `eq`):; // ```; // eq(a.serialize(), b.serialize()) --> eq(a,b); // eq(a, b.serialize()) --> eq(deserialize(a), b); // eq(a.serialize(), b) --> eq(a, deserialize(b)); // ```; //; // `applyFirst` allows us to specify each independently:; // ```; // auto eq_fun = functionDecl(...);; // auto method_call = cxxMemberCallExpr(...);; //; // auto two_calls = callExpr(callee(eq_fun), hasArgument(0, method_call),; // hasArgument(1, method_call));; // auto left_call =; // callExpr(callee(eq_fun), callExpr(hasArgument(0, method_call)));; // auto right_call =; // callExpr(callee(eq_fun), callExpr(hasArgument(1, method_call)));; //; // RewriteRule R = applyFirst({makeRule(two_calls, two_calls_action),; // makeRule(left_call, left_call_action),; // makeRule(right_call, right_call_action)});; // ```; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:174,simpl,simply,174,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['simpl'],['simply']
Usability,"/// AssignConvertType - All of the 'assignment' semantic checks return this; /// enum to indicate whether the assignment was allowed. These checks are; /// done for simple assignments, as well as initialization, return from; /// function, argument passing, etc. The query is phrased in terms of a; /// source and destination type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:165,simpl,simple,165,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['simpl'],['simple']
Usability,/// Assignment from nullptr which just clears the union.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h:39,clear,clears,39,interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerUnion.h,1,['clear'],['clears']
Usability,"/// Assume that a legal-sized 'or'-reduction of shifted/zexted loaded values; /// can be load combined in the backend. Load combining may not be allowed in; /// the IR optimizer, so we do not want to alter the pattern. For example,; /// partially transforming a scalar bswap() pattern into vector code is; /// effectively impossible for the backend to undo.; /// TODO: If load combining is allowed in the IR optimizer, this analysis; /// may not be necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:352,undo,undo,352,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['undo'],['undo']
Usability,"/// Assume that a vector of stores of bitwise-or/shifted/zexted loaded values; /// can be load combined in the backend. Load combining may not be allowed in; /// the IR optimizer, so we do not want to alter the pattern. For example,; /// partially transforming a scalar bswap() pattern into vector code is; /// effectively impossible for the backend to undo.; /// TODO: If load combining is allowed in the IR optimizer, this analysis; /// may not be necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:353,undo,undo,353,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['undo'],['undo']
Usability,"/// Assuming ValNo is going to clobber some valid lanes in Other.LR, compute; /// the extent of the tainted lanes in the block.; ///; /// Multiple values in Other.LR can be affected since partial redefinitions; /// can preserve previously tainted lanes.; ///; /// 1 %dst = VLOAD <-- Define all lanes in %dst; /// 2 %src = FOO <-- ValNo to be joined with %dst:ssub0; /// 3 %dst:ssub1 = BAR <-- Partial redef doesn't clear taint in ssub0; /// 4 %dst:ssub0 = COPY %src <-- Conflict resolved, ssub0 wasn't read; ///; /// For each ValNo in Other that is affected, add an (EndIndex, TaintedLanes); /// entry to TaintedVals.; ///; /// Returns false if the tainted lanes extend beyond the basic block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:415,clear,clear,415,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['clear'],['clear']
Usability,"/// At this point, prevailing symbols have been resolved. The following leads; /// to returning a conservative result:; /// - Multiple instances with local linkage. Normally local linkage would be; /// unique per module; /// as the GUID includes the module path. We could have a guid alias if; /// there wasn't any distinguishing path when each file was compiled, but; /// that should be rare so we'll punt on those.; /// These next 2 cases should not happen and will assert:; /// - Multiple instances with external linkage. This should be caught in; /// symbol resolution; /// - Non-existent FunctionSummary for Aliasee. This presents a hole in our; /// knowledge meaning we have to go conservative.; /// Otherwise, we calculate attributes for a function as:; /// 1. If we have a local linkage, take its attributes. If there's somehow; /// multiple, bail and go conservative.; /// 2. If we have an external/WeakODR/LinkOnceODR linkage check that it is; /// prevailing, take its attributes.; /// 3. If we have a Weak/LinkOnce linkage the copies can have semantic; /// differences. However, if the prevailing copy is known it will be used; /// so take its attributes. If the prevailing copy is in a native file; /// all IR copies will be dead and propagation will go conservative.; /// 4. AvailableExternally summaries without a prevailing copy are known to; /// occur in a couple of circumstances:; /// a. An internal function gets imported due to its caller getting; /// imported, it becomes AvailableExternally but no prevailing; /// definition exists. Because it has to get imported along with its; /// caller the attributes will be captured by propagating on its; /// caller.; /// b. C++11 [temp.explicit]p10 can generate AvailableExternally; /// definitions of explicitly instanced template declarations; /// for inlining which are ultimately dropped from the TU. Since this; /// is localized to the TU the attributes will have already made it to; /// the callers.; /// These are edge cases and a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:232,GUID,GUID,232,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,2,"['GUID', 'guid']","['GUID', 'guid']"
Usability,"/// At this point, we have learned that the only two values ever stored into GV; /// are its initializer and OtherVal. See if we can shrink the global into a; /// boolean and select between the two values whenever it is used. This exposes; /// the values to other scalar optimizations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:27,learn,learned,27,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['learn'],['learned']
Usability,/// Atoms that the original constraints imply must be false.; /// Simplification replaces all occurrences of these atoms by a false literal; /// (which may enable additional simplifications).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h:66,Simpl,Simplification,66,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,2,"['Simpl', 'simpl']","['Simplification', 'simplifications']"
Usability,/// Atoms that the original constraints imply must be true.; /// Simplification replaces all occurrences of these atoms by a true literal; /// (which may enable additional simplifications).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h:65,Simpl,Simplification,65,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,2,"['Simpl', 'simpl']","['Simplification', 'simplifications']"
Usability,/// Attempt to ensure that we have at least 8MiB of usable stack space.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1_main.cpp:52,usab,usable,52,interpreter/llvm-project/clang/tools/driver/cc1_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1_main.cpp,1,['usab'],['usable']
Usability,"/// Attempt to fold a cttz/ctlz followed by a icmp plus select into a single; /// call to cttz/ctlz with flag 'is_zero_poison' cleared.; ///; /// For example, we can fold the following code sequence:; /// \code; /// %0 = tail call i32 @llvm.cttz.i32(i32 %x, i1 true); /// %1 = icmp ne i32 %x, 0; /// %2 = select i1 %1, i32 %0, i32 32; /// \code; ///; /// into:; /// %0 = tail call i32 @llvm.cttz.i32(i32 %x, i1 false)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:127,clear,cleared,127,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['clear'],['cleared']
Usability,"/// Attempt to load API notes for the given framework. A framework will have; /// the API notes file under either {FrameworkPath}/APINotes,; /// {FrameworkPath}/Headers or {FrameworkPath}/PrivateHeaders, while a; /// library will have the API notes simply in its directory.; ///; /// \param FrameworkPath The path to the framework.; /// \param Public Whether to load the public API notes. Otherwise, attempt; /// to load the private API notes.; ///; /// \returns the header directory entry (e.g., for Headers or PrivateHeaders); /// for which the API notes were successfully loaded, or NULL if API notes; /// could not be loaded for any reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesManager.h:249,simpl,simply,249,interpreter/llvm-project/clang/include/clang/APINotes/APINotesManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesManager.h,1,['simpl'],['simply']
Usability,"/// Attempt to match a simple first order recurrence cycle of the form:; /// %iv = phi Ty [%Start, %Entry], [%Inc, %backedge]; /// %inc = binop %iv, %step; /// OR; /// %iv = phi Ty [%Start, %Entry], [%Inc, %backedge]; /// %inc = binop %step, %iv; ///; /// A first order recurrence is a formula with the form: X_n = f(X_(n-1)); ///; /// A couple of notes on subtleties in that definition:; /// * The Step does not have to be loop invariant. In math terms, it can; /// be a free variable. We allow recurrences with both constant and; /// variable coefficients. Callers may wish to filter cases where Step; /// does not dominate P.; /// * For non-commutative operators, we will match both forms. This; /// results in some odd recurrence structures. Callers may wish to filter; /// out recurrences where the phi is not the LHS of the returned operator.; /// * Because of the structure matched, the caller can assume as a post; /// condition of the match the presence of a Loop with P's parent as it's; /// header *except* in unreachable code. (Dominance decays in unreachable; /// code.); ///; /// NOTE: This is intentional simple. If you want the ability to analyze; /// non-trivial loop conditons, see ScalarEvolution instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:23,simpl,simple,23,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,2,['simpl'],['simple']
Usability,"/// Attempt to pre-truncate inputs to arithmetic ops if it will simplify; /// the codegen.; /// e.g. TRUNC( BINOP( X, Y ) ) --> BINOP( TRUNC( X ), TRUNC( Y ) ); /// TODO: This overlaps with the generic combiner's visitTRUNCATE. Remove; /// anything that is guaranteed to be transformed by DAGCombiner.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:64,simpl,simplify,64,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simplify']
Usability,"/// Attempt to shrink AND/OR/XOR operations requiring non-inlineable literals.; /// For AND or OR, try using S_BITSET{0,1} to clear or set bits.; /// If the inverse of the immediate is legal, use ANDN2, ORN2 or; /// XNOR (as a ^ b == ~(a ^ ~b)).; /// \returns true if the caller should continue the machine function iterator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp:126,clear,clear,126,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp,1,['clear'],['clear']
Usability,/// Attempt to simplify SSE4A EXTRQ/EXTRQI instructions using constant folding; /// or conversion to a shuffle vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:15,simpl,simplify,15,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['simpl'],['simplify']
Usability,/// Attempt to simplify SSE4A INSERTQ/INSERTQI instructions using constant; /// folding or conversion to a shuffle vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:15,simpl,simplify,15,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['simpl'],['simplify']
Usability,"/// Attempt to simplify any target nodes based on the demanded bits/elts,; /// returning true on success. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:15,simpl,simplify,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['simpl'],['simplify']
Usability,"/// Attempt to simplify any target nodes based on the demanded vector; /// elements, returning true on success. Otherwise, analyze the expression and; /// return a mask of KnownUndef and KnownZero elements for the expression; /// (used to simplify the caller). The KnownUndef/Zero elements may only be; /// accurate for those bits in the DemandedMask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:15,simpl,simplify,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['simpl'],['simplify']
Usability,"/// Attempts to reduce a cleanup's entry block to a fallthrough. This; /// is basically llvm::MergeBlockIntoPredecessor, except; /// simplified/optimized for the tighter constraints on cleanup blocks.; ///; /// Returns the new block, whatever it is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:133,simpl,simplified,133,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,1,['simpl'],['simplified']
Usability,/// Attempts to replace V with a simpler value based on the demanded; /// bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:33,simpl,simpler,33,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['simpl'],['simpler']
Usability,"/// BBInsertBeforeMap holds a description for the set of location defs to be; /// inserted after the analysis is complete. It is updated during the dataflow; /// and the entry for a block is CLEARED each time it is (re-)visited. After; /// the dataflow is complete, each block entry will contain the set of defs; /// calculated during the final (fixed-point) iteration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:191,CLEAR,CLEARED,191,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['CLEAR'],['CLEARED']
Usability,/// BFI and PSI are used to check for profile guided size optimizations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:46,guid,guided,46,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,2,['guid'],['guided']
Usability,"/// Base struct for all ""concrete attribute"" deductions.; ///; /// The abstract attribute is a minimal interface that allows the Attributor to; /// orchestrate the abstract/fixpoint analysis. The design allows to hide away; /// implementation choices made for the subclasses but also to structure their; /// implementation and simplify the use of other abstract attributes in-flight.; ///; /// To allow easy creation of new attributes, most methods have default; /// implementations. The ones that do not are generally straight forward, except; /// `AbstractAttribute::updateImpl` which is the location of most reasoning; /// associated with the abstract attribute. The update is invoked by the; /// Attributor in case the situation used to justify the current optimistic; /// state might have changed. The Attributor determines this automatically; /// by monitoring the `Attributor::getAAFor` calls made by abstract attributes.; ///; /// The `updateImpl` method should inspect the IR and other abstract attributes; /// in-flight to justify the best possible (=optimistic) state. The actual; /// implementation is, similar to the underlying abstract state encoding, not; /// exposed. In the most common case, the `updateImpl` will go through a list of; /// reasons why its optimistic state is valid given the current information. If; /// any combination of them holds and is sufficient to justify the current; /// optimistic state, the method shall return UNCHAGED. If not, the optimistic; /// state is adjusted to the situation and the method shall return CHANGED.; ///; /// If the manifestation of the ""concrete attribute"" deduced by the subclass; /// differs from the ""default"" behavior, which is a (set of) LLVM-IR; /// attribute(s) for an argument, call site argument, function return value, or; /// function, the `AbstractAttribute::manifest` method should be overloaded.; ///; /// NOTE: If the state obtained via getState() is INVALID, thus if; /// AbstractAttribute::getState().isValidState() ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:327,simpl,simplify,327,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplify']
Usability,"/// Based on typeID string, get all associated vtable GUIDS that are; /// visible to regular objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:54,GUID,GUIDS,54,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['GUID'],['GUIDS']
Usability,"/// BasicLayout simplifies the implementation of JITLinkMemoryManagers.; ///; /// BasicLayout groups Sections into Segments based on their memory protection; /// and deallocation policies. JITLinkMemoryManagers can construct a BasicLayout; /// from a Graph, and then assign working memory and addresses to each of the; /// Segments. These addreses will be mapped back onto the Graph blocks in; /// the apply method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h:16,simpl,simplifies,16,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLinkMemoryManager.h,1,['simpl'],['simplifies']
Usability,"/// Before emitting the patterns inside the PatFrag, add all necessary code; /// expansions to \p PatFragCEs imported from \p ParentCEs.; ///; /// For a MachineOperand PatFrag parameter, this will fetch the expansion for; /// that operand from \p ParentCEs and add it to \p PatFragCEs. Errors can be; /// emitted if the MachineOperand reference is unbound.; ///; /// For an Immediate PatFrag parameter this simply adds the integer value to; /// \p PatFragCEs as an expansion.; ///; /// \param ParentCEs Contains all of the code expansions declared by the other; /// patterns emitted so far in the pattern list containing; /// this PatFragPattern.; /// \param PatFragCEs Output Code Expansions (usually empty); /// \param DiagLoc Diagnostic loc in case an error occurs.; /// \return `true` on success, `false` on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h:407,simpl,simply,407,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/Patterns.h,1,['simpl'],['simply']
Usability,/// Begin a new structured loop. Stage attributes from the Attrs list.; /// The staged attributes are applied to the loop and then cleared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:131,clear,cleared,131,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,1,['clear'],['cleared']
Usability,/// Begin a new structured loop. The set of staged attributes will be; /// applied to the loop and then cleared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:104,clear,cleared,104,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,1,['clear'],['cleared']
Usability,/// Begin a try-block to attempt a match and jump to OnFail if it is; /// unsuccessful.; /// - OnFail(4) - The MatchTable entry at which to resume if the match fails.; ///; /// FIXME: This ought to take an argument indicating the number of try-blocks; /// to exit on failure. It's usually one but the last match attempt of; /// a block will need more. The (implemented) alternative is to tack a; /// GIM_Reject on the end of each try-block which is simpler but; /// requires an extra opcode and iteration in the interpreter on each; /// failed match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:140,resume,resume,140,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,2,"['resume', 'simpl']","['resume', 'simpler']"
Usability,"/// Bit vector of active entries in LiveOut, also used as a visited set by; /// findReachingDefs. One entry per basic block, indexed by block number.; /// This is kept as a separate bit vector because it can be cleared quickly; /// when switching live ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h:211,clear,cleared,211,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRangeCalc.h,1,['clear'],['cleared']
Usability,/// Build a ParsedType for a simple-type-specifier with a nested-name-specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:29,simpl,simple-type-specifier,29,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['simpl'],['simple-type-specifier']
Usability,"/// Build a TBranchElement for an object of class classname.; ///; /// addr is the address of a pointer to an object of class; /// classname. The class dictionary must be available (ClassDef; /// in class header).; ///; /// Note: See the comments in TBranchElement::SetAddress() for a more; /// detailed discussion of the meaning of the addr parameter.; ///; /// This option requires access to the library where the; /// corresponding class is defined. Accessing one single data; /// member in the object implies reading the full object.; ///; /// By default the branch buffers are stored in the same file as the Tree.; /// use TBranch::SetFile to specify a different file; ///; /// IMPORTANT NOTE about branch names:; ///; /// And in general, in case two or more master branches contain subbranches; /// with identical names, one must add a ""."" (dot) character at the end; /// of the master branch name. This will force the name of the subbranches; /// to be of the form `master.subbranch` instead of simply `subbranch`.; /// This situation happens when the top level object; /// has two or more members referencing the same class.; /// For example, if a Tree has two branches B1 and B2 corresponding; /// to objects of the same class MyClass, one can do:; /// ~~~ {.cpp}; /// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; /// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; /// ~~~; /// if MyClass has 3 members a,b,c, the two instructions above will generate; /// subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c; ///; /// bufsize is the buffer size in bytes for this branch; /// The default value is 32000 bytes and should be ok for most cases.; /// You can specify a larger value (e.g. 256000) if your Tree is not split; /// and each entry is large (Megabytes); /// A small value for bufsize is optimum if you intend to access; /// the entries in the Tree randomly and your Tree is in split mode.; ///; /// Use splitlevel < 0 instead of splitlevel=0 when the class; /// has a custom Streamer; ///; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:2012,simpl,simply,2012,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simply']
Usability,/// Build a deduction guide with the specified parameter types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:22,guid,guide,22,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['guid'],['guide']
Usability,"/// Build a function type.; ///; /// This routine checks the function type according to C++ rules and; /// under the assumption that the result type and parameter types have; /// just been instantiated from a template. It therefore duplicates; /// some of the behavior of GetTypeForDeclarator, but in a much; /// simpler form that is only suitable for this narrow use case.; ///; /// \param T The return type of the function.; ///; /// \param ParamTypes The parameter types of the function. This array; /// will be modified to account for adjustments to the types of the; /// function parameters.; ///; /// \param Loc The location of the entity whose type involves this; /// function type or, if there is no such entity, the location of the; /// type that will have function type.; ///; /// \param Entity The name of the entity that involves the function; /// type, if known.; ///; /// \param EPI Extra information about the function type. Usually this will; /// be taken from an existing function with the same prototype.; ///; /// \returns A suitable function type, if there are no errors. The; /// unqualified type will always be a FunctionProtoType.; /// Otherwise, returns a NULL type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:313,simpl,simpler,313,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['simpl'],['simpler']
Usability,"/// Build a wrapper struct that has 8-byte alignment. All heap allocations; /// should provide this much alignment at least, but this makes it clear we; /// specifically rely on this amount of alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp:143,clear,clear,143,interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,1,['clear'],['clear']
Usability,"/// Build and attach the minimal necessary MIB metadata. If the alloc has a; /// single allocation type, add a function attribute instead. The reason for; /// adding an attribute in this case is that it matches how the behavior for; /// allocation calls will be communicated to lib call simplification after; /// cloning or another optimization to distinguish the allocation types,; /// which is lower overhead and more direct than maintaining this metadata.; /// Returns true if memprof metadata attached, false if not (attribute added).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h:287,simpl,simplification,287,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h,1,['simpl'],['simplification']
Usability,"/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 << NumBits) - 1; ///; /// This clears the low bits of a pointer operand without destroying its; /// pointer properties. This has the effect of rounding the address *down* to; /// a specified alignment in bits.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res and \p Op0 must be generic virtual registers with pointer; /// type.; /// \pre \p NumBits must be an integer representing the number of low bits to; /// be cleared in \p Op0.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:96,clear,clears,96,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,2,['clear'],"['cleared', 'clears']"
Usability,"/// Build the cloned blocks for an unswitched copy of the given loop.; ///; /// The cloned blocks are inserted before the loop preheader (`LoopPH`) and; /// after the split block (`SplitBB`) that will be used to select between the; /// cloned and original loop.; ///; /// This routine handles cloning all of the necessary loop blocks and exit; /// blocks including rewriting their instructions and the relevant PHI nodes.; /// Any loop blocks or exit blocks which are dominated by a different successor; /// than the one for this clone of the loop blocks can be trivially skipped. We; /// use the `DominatingSucc` map to determine whether a block satisfies that; /// property with a simple map lookup.; ///; /// It also correctly creates the unconditional branch in the cloned; /// unswitched parent block to only point at the unswitched successor.; ///; /// This does not handle most of the necessary updates to `LoopInfo`. Only exit; /// block splitting is correctly reflected in `LoopInfo`, essentially all of; /// the cloned blocks (and their loops) are left without full `LoopInfo`; /// updates. This also doesn't fully update `DominatorTree`. It adds the cloned; /// blocks to them but doesn't create the cloned `DominatorTree` structure and; /// instead the caller must recompute an accurate DT. It *does* correctly; /// update the `AssumptionCache` provided in `AC`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:683,simpl,simple,683,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['simpl'],['simple']
Usability,"/// Build the cloned loops of an original loop from unswitching.; ///; /// Because unswitching simplifies the CFG of the loop, this isn't a trivial; /// operation. We need to re-verify that there even is a loop (as the backedge; /// may not have been cloned), and even if there are remaining backedges the; /// backedge set may be different. However, we know that each child loop is; /// undisturbed, we only need to find where to place each child loop within; /// either any parent loop or within a cloned version of the original loop.; ///; /// Because child loops may end up cloned outside of any cloned version of the; /// original loop, multiple cloned sibling loops may be created. All of them; /// are returned so that the newly introduced loop nest roots can be; /// identified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:95,simpl,simplifies,95,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['simpl'],['simplifies']
Usability,/// Builds idiomatic source for taking the address of `E`: prefix with `&` but; /// simplify when it already begins with `*`. \returns empty string on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h:84,simpl,simplify,84,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,1,['simpl'],['simplify']
Usability,/// Builds idiomatic source for the dereferencing of `E`: prefix with `*` but; /// simplify when it already begins with `&`. \returns empty string on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h:83,simpl,simplify,83,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCodeBuilders.h,1,['simpl'],['simplify']
Usability,"/// CFI-specific: a vector containing the list of function summaries that use; /// the llvm.type.checked.load intrinsic and therefore will require; /// resolutions for llvm.type.test in order to implement CFI checks if; /// devirtualization was unsuccessful. If devirtualization was successful, the; /// pass will clear this vector by calling markDevirt(). If at the end of the; /// pass the vector is non-empty, we will need to add a use of llvm.type.test; /// to each of the function summaries in the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:314,clear,clear,314,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['clear'],['clear']
Usability,/// CHAIN = CLRBHRB CHAIN - Clear branch history rolling buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:28,Clear,Clear,28,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['Clear'],['Clear']
Usability,"/// CPUser - One user of a constant pool, keeping the machine instruction; /// pointer, the constant pool being referenced, and the max displacement; /// allowed from the instruction to the CP. The HighWaterMark records the; /// highest basic block where a new CPEntry can be placed. To ensure this; /// pass terminates, the CP entries are initially placed at the end of the; /// function and then move monotonically to lower addresses. The; /// exception to this rule is when the current CP entry for a particular; /// CPUser is out of range, but there is another CP entry for the same; /// constant value in range. We want to use the existing in-range CP; /// entry, but if it later moves out of range, the search for new water; /// should resume where it left off. The HighWaterMark is used to record; /// that point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp:742,resume,resume,742,interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,3,['resume'],['resume']
Usability,/// Cache for module units which is usable for current module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:36,usab,usable,36,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['usab'],['usable']
Usability,"/// Cache pairs ""filename - source location""; ///; /// Cache contains only source locations from preamble so it is; /// guaranteed that they stay valid when the SourceManager is recreated.; /// This cache is used when loading preamble to increase performance; /// of that loading. It must be cleared when preamble is recreated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:292,clear,cleared,292,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['clear'],['cleared']
Usability,"/// Calculate the magic numbers required to implement an unsigned integer; /// division by a constant as a sequence of multiplies, adds and shifts.; /// Requires that the divisor not be 0. Taken from ""Hacker's Delight"", Henry; /// S. Warren, Jr., chapter 10.; /// LeadingZeros can be used to simplify the calculation if the upper bits; /// of the divided value are known zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:292,simpl,simplify,292,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,1,['simpl'],['simplify']
Usability,"/// Call SimplifyCFG on all the blocks in the function,; /// iterating until no more changes are made.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp:9,Simpl,SimplifyCFG,9,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp,1,['Simpl'],['SimplifyCFG']
Usability,"/// CallDescription currently cannot restrict matches to the global namespace; /// only, which is why multiple CallDescriptionMaps are used, as we want to; /// disambiguate global C functions from functions inside user-defined; /// namespaces.; // TODO: Remove separation to simplify matching logic once CallDescriptions; // are more expressive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:275,simpl,simplify,275,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['simpl'],['simplify']
Usability,"/// CallInst simplification. This mostly only handles folding of intrinsic; /// instructions. For normal calls, it allows visitCallBase to do the heavy; /// lifting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:13,simpl,simplification,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['simpl'],['simplification']
Usability,/// Callback type for loop body code generation.; ///; /// \param CodeGenIP is the insertion point where the loop's body code must be; /// placed. This will be a dedicated BasicBlock with a; /// conditional branch from the loop condition check and; /// terminated with an unconditional branch to the loop; /// latch.; /// \param IndVar is the induction variable usable at the insertion point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:362,usab,usable,362,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['usab'],['usable']
Usability,/// Called after the pipeline is resumed from pausing state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:33,resume,resumed,33,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,1,['resume'],['resumed']
Usability,"/// Called for each TopLevelDecl.; /// NOTE: To allow more flexibility a custom ASTConsumer could probably be; /// used instead, but having only this method allows a simpler API.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:166,simpl,simpler,166,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,1,['simpl'],['simpler']
Usability,/// Called when the client has changed the disposition of values in; /// a loop or block.; ///; /// We don't have a way to invalidate per-loop/per-block dispositions. Clear; /// and recompute is simpler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:167,Clear,Clear,167,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,"['Clear', 'simpl']","['Clear', 'simpler']"
Usability,/// Called when the client has changed the disposition of values in; /// this loop.; ///; /// We don't have a way to invalidate per-loop dispositions. Clear and; /// recompute is simpler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:151,Clear,Clear,151,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,"['Clear', 'simpl']","['Clear', 'simpler']"
Usability,"/// Called when the contents of one or more regions change.; ///; /// This can occur in many different ways: an explicit bind, a blanket; /// invalidation of the region contents, or by passing a region to a function; /// call whose behavior the analyzer cannot model perfectly.; ///; /// \param State The current program state.; /// \param Invalidated A set of all symbols potentially touched by the change.; /// \param ExplicitRegions The regions explicitly requested for invalidation.; /// For a function call, this would be the arguments. For a bind, this; /// would be the region being bound to.; /// \param Regions The transitive closure of regions accessible from,; /// \p ExplicitRegions, i.e. all regions that may have been touched; /// by this change. For a simple bind, this list will be the same as; /// \p ExplicitRegions, since a bind does not affect the contents of; /// anything accessible through the base region.; /// \param LCtx LocationContext that is useful for getting various contextual; /// info, like callstack, CFG etc.; /// \param Call The opaque call triggering this invalidation. Will be 0 if the; /// change was not triggered by a call.; ///; /// check::RegionChanges",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp:767,simpl,simple,767,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,1,['simpl'],['simple']
Usability,"/// Called when the separate crash-recovery thread was finished, to; /// indicate that we don't need to clear the thread-local CurrentContext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:104,clear,clear,104,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,1,['clear'],['clear']
Usability,"/// Calls remove on all trackers currently associated with this JITDylib.; /// Does not run static deinits.; ///; /// Note that removal happens outside the session lock, so new code may be; /// added concurrently while the clear is underway, and the newly added; /// code will *not* be cleared. Adding new code concurrently with a clear; /// is usually a bug and should be avoided.; ///; /// It is illegal to call this method on a defunct JITDylib and the client; /// is responsible for ensuring that they do not do so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:223,clear,clear,223,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,3,['clear'],"['clear', 'cleared']"
Usability,"/// Calls simplifyInstruction in each instruction in functions, and replaces; /// their values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp:10,simpl,simplifyInstruction,10,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp,1,['simpl'],['simplifyInstruction']
Usability,/// Calls the callback for each value GUID and summary to be written to; /// bitcode. This hides the details of whether they are being pulled from the; /// entire index or just those in a provided ModuleToSummariesForIndex map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:38,GUID,GUID,38,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['GUID'],['GUID']
Usability,"/// Can an out-of-line inline function serve as a key function?; ///; /// This flag is only useful in ABIs where type data (for example,; /// vtables and type_info objects) are emitted only after processing; /// the definition of a special ""key"" virtual function. (This is safe; /// because the ODR requires that every virtual function be defined; /// somewhere in a program.) This usually permits such data to be; /// emitted in only a single object file, as opposed to redundantly; /// in every object file that requires it.; ///; /// One simple and common definition of ""key function"" is the first; /// virtual function in the class definition which is not defined there.; /// This rule works very well when that function has a non-inline; /// definition in some non-header file. Unfortunately, when that; /// function is defined inline, this rule requires the type data; /// to be emitted weakly, as if there were no key function.; ///; /// The ARM ABI observes that the ODR provides an additional guarantee:; /// a virtual function is always ODR-used, so if it is defined inline,; /// that definition must appear in every translation unit that defines; /// the class. Therefore, there is no reason to allow such functions; /// to serve as key functions.; ///; /// Because this changes the rules for emitting type data,; /// it can cause type data to be emitted with both weak and strong; /// linkage, which is not allowed on all platforms. Therefore,; /// exploiting this observation requires an ABI break and cannot be; /// done on a generic Itanium platform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:541,simpl,simple,541,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,1,['simpl'],['simple']
Usability,/// Can the next token be the start of a simple key?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:41,simpl,simple,41,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['simpl'],['simple']
Usability,/// Canonical scalar induction phi of the vector loop. Starting at the specified; /// start value (either 0 or the resume value when vectorizing the epilogue; /// loop). VPWidenCanonicalIVRecipe represents the vector version of the; /// canonical induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:115,resume,resume,115,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['resume'],['resume']
Usability,/// Canonicalize a set or clear of a masked set of constant bits to; /// select-of-constants form.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:26,clear,clear,26,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['clear'],['clear']
Usability,"/// Canonicalize array indices to pointer-size integers. This helps to; /// simplify the logic of splitting a GEP. For example, if a + b is a; /// pointer-size integer, we have; /// gep base, a + b = gep (gep base, a), b; /// However, this equality may not hold if the size of a + b is smaller than; /// the pointer size, because LLVM conceptually sign-extends GEP indices to; /// pointer size before computing the address; /// (http://llvm.org/docs/LangRef.html#id181).; ///; /// This canonicalization is very likely already done in clang and; /// instcombine. Therefore, the program will probably remain the same.; ///; /// Returns true if the module changes.; ///; /// Verified in @i32_add in split-gep.ll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:76,simpl,simplify,76,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['simpl'],['simplify']
Usability,"/// Check \p Pred on all call sites of \p Fn.; ///; /// This method will evaluate \p Pred on call sites and return; /// true if \p Pred holds in every call sites. However, this is only possible; /// all call sites are known, hence the function has internal linkage.; /// If true is returned, \p UsedAssumedInformation is set if assumed; /// information was used to skip or simplify potential call sites.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:373,simpl,simplify,373,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplify']
Usability,"/// Check \p Pred on all function call sites.; ///; /// This method will evaluate \p Pred on call sites and return; /// true if \p Pred holds in every call sites. However, this is only possible; /// all call sites are known, hence the function has internal linkage.; /// If true is returned, \p UsedAssumedInformation is set if assumed; /// information was used to skip or simplify potential call sites.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:373,simpl,simplify,373,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplify']
Usability,/// Check if a simpler conditional branch can be generated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:15,simpl,simpler,15,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['simpl'],['simpler']
Usability,"/// Check if the given Cst should be converted into; /// a load of a global variable initialized with Cst.; /// A constant should be converted if it is likely that the materialization of; /// the constant will be tricky. Thus, we give up on zero or undef values.; ///; /// \todo Currently, accept only vector related types.; /// Also we give up on all simple vector type to keep the existing; /// behavior. Otherwise, we should push here all the check of the lowering of; /// BUILD_VECTOR. By giving up, we lose the potential benefit of merging; /// constant via global merge and the fact that the same constant is stored; /// only once with this method (versus, as many function that uses the constant; /// for the regular approach, even for float).; /// Again, the simplest solution would be to promote every; /// constant and rematerialize them when they are actually cheap to create.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:352,simpl,simple,352,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,2,['simpl'],"['simple', 'simplest']"
Usability,/// Check if this expression starts with _GLOBAL_OFFSET_TABLE_ and if it is; /// of the form _GLOBAL_OFFSET_TABLE_-symbol. This is needed to support PIC on; /// ELF i386 as _GLOBAL_OFFSET_TABLE_ is magical. We check only simple case that; /// are know to be used: _GLOBAL_OFFSET_TABLE_ by itself or at the start of a; /// binary expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:221,simpl,simple,221,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,1,['simpl'],['simple']
Usability,/// Check if we should skip checking ODRHash for declaration \param D.; ///; /// The existing ODRHash mechanism seems to be not stable enough and; /// the false positive ODR violation reports are annoying and we rarely see; /// true ODR violation reports. Also we learned that MSVC disabled ODR checks; /// for declarations in GMF. So we try to disable ODR checks in the GMF to; /// get better user experiences before we make the ODR violation checks stable; /// enough.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:264,learn,learned,264,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,"['learn', 'user experience']","['learned', 'user experiences']"
Usability,"/// Check that the given module is available, producing a diagnostic if not.; /// \return \c true if the check failed (because the module is not available).; /// \c false if the module appears to be usable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:199,usab,usable,199,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['usab'],['usable']
Usability,"/// Check the specified integer node value to see if it can be simplified or if; /// things it uses can be simplified by bit propagation. If so, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:63,simpl,simplified,63,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['simpl'],['simplified']
Usability,"/// Check the specified integer node value to see if it can be simplified or; /// if things it uses can be simplified by bit propagation.; /// If so, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:63,simpl,simplified,63,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['simpl'],['simplified']
Usability,"/// Check the specified vector node value to see if it can be simplified or; /// if things it uses can be simplified as it only uses some of the elements.; /// If so, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:62,simpl,simplified,62,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['simpl'],['simplified']
Usability,"/// Check the specified vector node value to see if it can be simplified or; /// if things it uses can be simplified as it only uses some of the; /// elements. If so, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:62,simpl,simplified,62,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['simpl'],['simplified']
Usability,"/// Check the validity of a declarator that we parsed for a deduction-guide.; /// These aren't actually declarators in the grammar, so we need to check that; /// the user didn't specify any pieces that are not part of the deduction-guide; /// grammar. Return true on invalid deduction-guide.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:70,guid,guide,70,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,3,['guid'],['guide']
Usability,"/// Check to see if V is (and load (ptr), imm), where the load is having; /// specific bytes cleared out. If so, return the byte size being masked out; /// and the shift amount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,clear,cleared,93,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['clear'],['cleared']
Usability,"/// Check whether E, which is either a discarded-value expression or an; /// unevaluated operand, is a simple-assignment to a volatlie-qualified lvalue,; /// and if so, remove it from the list of volatile-qualified assignments that; /// we are going to warn are deprecated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:103,simpl,simple-assignment,103,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['simpl'],['simple-assignment']
Usability,/// Check whether any part of the range will be invalidated by clearing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:63,clear,clearing,63,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,1,['clear'],['clearing']
Usability,"/// Check whether we can use a ""simpler"", more core exceptions personality; /// function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:32,simpl,simpler,32,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['simpl'],['simpler']
Usability,"/// CheckAsmLValue - GNU C has an extremely ugly extension whereby they silently; /// ignore ""noop"" casts in places where an lvalue is required by an inline asm.; /// We emulate this behavior when -fheinous-gnu-extensions is specified, but; /// provide a strong guidance to not use it.; ///; /// This method checks to see if the argument is an acceptable l-value and; /// returns false if it is a case we can handle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp:262,guid,guidance,262,interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAsm.cpp,1,['guid'],['guidance']
Usability,/// CheckObjCString - Checks that the argument to the builtin; /// CFString constructor is correct; /// Note: It might also make sense to do the UTF-16 conversion here (would; /// simplify the backend).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:180,simpl,simplify,180,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['simpl'],['simplify']
Usability,"/// Checks if N is a multiplication by a constant where we can extract out a; /// power of two from the constant so that it can be used in a shift, but only; /// if it simplifies the materialization of the constant. Returns true if it; /// is, and assigns to PowerOfTwo the power of two that should be extracted; /// out and to NewMulConst the new constant to be multiplied by.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp:168,simpl,simplifies,168,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,1,['simpl'],['simplifies']
Usability,"/// Checks if the given array of loads can be represented as a vectorized,; /// scatter or just simple gather.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:96,simpl,simple,96,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['simpl'],['simple']
Usability,"/// Checks to see if the specified callsite can clobber the specified memory; /// object.; ///; /// Since we only look at local properties of this function, we really can't; /// say much about this query. We do, however, use simple ""address taken""; /// analysis on local objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:225,simpl,simple,225,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['simpl'],['simple']
Usability,"/// Checks whether the cursor is valid (i.e. no errors were encountered). In; /// case of errors, this does not clear the error flag -- one must call; /// takeError() instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:112,clear,clear,112,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['clear'],['clear']
Usability,"/// Checks whether the given constructor is a valid subject for the; /// complete-to-base constructor delegation optimization, i.e.; /// emitting the complete constructor as a simple call to the base; /// constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:176,simpl,simple,176,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['simpl'],['simple']
Usability,/// Clarification is a simple pair of a reason why parameter is not called; /// on every path and a statement to blame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:23,simpl,simple,23,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['simpl'],['simple']
Usability,"/// Class objc_loadClassref (void *); ///; /// Loads from a classref. For Objective-C stub classes, this invokes the; /// initialization callback stored inside the stub. For all other classes; /// this simply dereferences the pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:202,simpl,simply,202,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['simpl'],['simply']
Usability,"/// Class provides a way to call simple version of codegen for OpenMP region, or; /// an advanced with possible pre|post-actions in codegen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,simpl,simple,33,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['simpl'],['simple']
Usability,"/// Class representing the legacy GCC Objective-C ABI. This is the default when; /// -fobjc-nonfragile-abi is not specified.; ///; /// The GCC ABI target actually generates code that is approximately compatible; /// with the new GNUstep runtime ABI, but refrains from using any features that; /// would not work with the GCC runtime. For example, clang always generates; /// the extended form of the class structure, and the extra fields are simply; /// ignored by GCC libobjc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:442,simpl,simply,442,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['simpl'],['simply']
Usability,"/// Classify (icmp eq (A & B), C) and (icmp ne (A & B), C) as matching patterns; /// that can be simplified.; /// One of A and B is considered the mask. The other is the value. This is; /// described as the ""AMask"" or ""BMask"" part of the enum. If the enum contains; /// only ""Mask"", then both A and B can be considered masks. If A is the mask,; /// then it was proven that (A & C) == C. This is trivial if C == A or C == 0.; /// If both A and C are constants, this proof is also easy.; /// For the following explanations, we assume that A is the mask.; ///; /// ""AllOnes"" declares that the comparison is true only if (A & B) == A or all; /// bits of A are set in B.; /// Example: (icmp eq (A & 3), 3) -> AMask_AllOnes; ///; /// ""AllZeros"" declares that the comparison is true only if (A & B) == 0 or all; /// bits of A are cleared in B.; /// Example: (icmp eq (A & 3), 0) -> Mask_AllZeroes; ///; /// ""Mixed"" declares that (A & B) == C and C might or might not contain any; /// number of one bits and zero bits.; /// Example: (icmp eq (A & 3), 1) -> AMask_Mixed; ///; /// ""Not"" means that in above descriptions ""=="" should be replaced by ""!="".; /// Example: (icmp ne (A & 3), 3) -> AMask_NotAllOnes; ///; /// If the mask A contains a single bit, then the following is equivalent:; /// (icmp eq (A & B), A) equals (icmp ne (A & B), 0); /// (icmp ne (A & B), A) equals (icmp eq (A & B), 0)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:97,simpl,simplified,97,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,"['clear', 'simpl']","['cleared', 'simplified']"
Usability,"/// Classify whether a cast is worth optimizing.; ///; /// This is a helper to decide whether the simplification of; /// logic(cast(A), cast(B)) to cast(logic(A, B)) should be performed.; ///; /// \param CI The cast we are interested in.; ///; /// \return true if this cast actually results in any code being generated and; /// if it cannot already be eliminated by some other transformation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:98,simpl,simplification,98,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['simpl'],['simplification']
Usability,/// Clear MF related structures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,1,['Clear'],['Clear']
Usability,/// Clear NSW/NUW flags from reduction instructions if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h,1,['Clear'],['Clear']
Usability,"/// Clear Scanner's CurDirToks before returning, in case we didn't push a; /// new directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp:4,Clear,Clear,4,interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,1,['Clear'],['Clear']
Usability,/// Clear UsesMap for runtime function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['Clear'],['Clear']
Usability,"/// Clear a bit in this vector for every '0' bit in Mask. Don't resize.; /// This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,1,['Clear'],['Clear']
Usability,/// Clear a global's ModRef info. Should be used when a global is being; /// deleted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,1,['Clear'],['Clear']
Usability,"/// Clear all analysis results cached by this AnalysisManager.; ///; /// Like \c clear(IRUnitT&), this doesn't invalidate the results; it simply; /// deletes them. This lets you clean up the AnalysisManager when the set of; /// IR units itself has potentially changed, and thus we can't even look up a; /// a result and invalidate/clear it directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,4,"['Clear', 'clear', 'simpl']","['Clear', 'clear', 'simply']"
Usability,/// Clear all bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,1,['Clear'],['Clear']
Usability,/// Clear all counters for processor resources.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZHazardRecognizer.h,1,['Clear'],['Clear']
Usability,"/// Clear all data. Destroys the LocID <=> LocIdx map, which makes most of; /// the information in this pass uninterpretable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['Clear'],['Clear']
Usability,/// Clear all dead flags on operands defining register @p Reg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['Clear'],['Clear']
Usability,"/// Clear all kill flags affecting Reg. If RegInfo is provided, this includes; /// all aliasing registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['Clear'],['Clear']
Usability,/// Clear all lists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,1,['Clear'],['Clear']
Usability,"/// Clear all memory not needed downstream.; ///; /// Releases all memory not used downstream. In particular, saves Freqs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp,1,['Clear'],['Clear']
Usability,/// Clear all memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['Clear'],['Clear']
Usability,/// Clear all previously defined node graph attributes.; /// Intended to be used from a debugging tool (eg. gdb).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Clear'],['Clear']
Usability,/// Clear all the per-function data used to load samples and propagate weights.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,1,['Clear'],['Clear']
Usability,/// Clear all timers in this group.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,1,['Clear'],['Clear']
Usability,/// Clear and free the cached objc methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:4,Clear,Clear,4,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['Clear'],['Clear']
Usability,"/// Clear any bits in this vector that are set in Mask. Don't resize.; /// This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,1,['Clear'],['Clear']
Usability,"/// Clear any cached analysis results for a single unit of IR.; ///; /// This doesn't invalidate, but instead simply deletes, the relevant results.; /// It is useful when the IR is being removed and we want to clear out all the; /// memory pinned for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,3,"['Clear', 'clear', 'simpl']","['Clear', 'clear', 'simply']"
Usability,/// Clear any flags in this flag set that aren't also set in Flags. All; /// flags will be cleared if Flags are undefined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,2,"['Clear', 'clear']","['Clear', 'cleared']"
Usability,/// Clear any flags in this node that aren't also set in Flags.; /// If Flags is not in a defined state then this has no effect.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Clear'],['Clear']
Usability,/// Clear cache that is used to connect a pass to the analysis (PassInfo).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,1,['Clear'],['Clear']
Usability,/// Clear everything and initialise with ⊤-values for all variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['Clear'],['Clear']
Usability,/// Clear information about the data arrays.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['Clear'],['Clear']
Usability,"/// Clear kill flags for any uses in the given set. This will likely; /// conservatively remove more kill flags than are necessary, but removing them; /// is safer than incorrect kill flags remaining on instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2ITBlockPass.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2ITBlockPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2ITBlockPass.cpp,1,['Clear'],['Clear']
Usability,/// Clear live in list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,1,['Clear'],['Clear']
Usability,/// Clear or set all bits in the chunk at the given index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,1,['Clear'],['Clear']
Usability,/// Clear out a specific template argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Sema/Template.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h,1,['Clear'],['Clear']
Usability,/// Clear out all of the candidates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['Clear'],['Clear']
Usability,/// Clear out all of the candidates.; /// TODO: This may be unnecessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TemplateDeduction.h,1,['Clear'],['Clear']
Usability,/// Clear out all of the type qualifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['Clear'],['Clear']
Usability,"/// Clear out all timers. This is mostly used to disable automatic; /// printing on shutdown, when timers have already been printed explicitly; /// using \c printAll or \c printJSONValues.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,1,['Clear'],['Clear']
Usability,/// Clear out and deallocate,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['Clear'],['Clear']
Usability,/// Clear out the code completion handler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['Clear'],['Clear']
Usability,/// Clear out the current SelectionDAG and the associated state and prepare; /// this SelectionDAGBuilder object to be used for a new block. This doesn't; /// clear out information about additional blocks that are needed to complete; /// switch lowering or PHI node updating; that information is cleared out as; /// it is consumed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,3,"['Clear', 'clear']","['Clear', 'clear', 'cleared']"
Usability,/// Clear out the current diagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,2,['Clear'],['Clear']
Usability,"/// Clear out the information in this function scope, making it; /// suitable for reuse.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['Clear'],['Clear']
Usability,/// Clear out the memory reference descriptor list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['Clear'],['Clear']
Usability,"/// Clear out this builder, and prepare it to build another; /// nested-name-specifier with source-location information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,1,['Clear'],['Clear']
Usability,/// Clear out this map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['Clear'],['Clear']
Usability,"/// Clear out this partial diagnostic, giving it a new diagnostic ID; /// and removing all of its arguments, ranges, and fix-it hints.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h,1,['Clear'],['Clear']
Usability,"/// Clear out this unqualified-id, setting it to default (invalid); /// state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['Clear'],['Clear']
Usability,/// Clear parent maps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,1,['Clear'],['Clear']
Usability,/// Clear part of the context that's no longer needed when we're done with; /// the debug object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,1,['Clear'],['Clear']
Usability,/// Clear specific AsmPrinter flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['Clear'],['Clear']
Usability,/// Clear state and free memory necessary to make this; /// SelectionDAG ready to process a new block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['Clear'],['Clear']
Usability,/// Clear state of errno (make it irrelevant).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h:4,Clear,Clear,4,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h,1,['Clear'],['Clear']
Usability,/// Clear the AsmPrinter bitvector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['Clear'],['Clear']
Usability,/// Clear the MapVector and return the underlying vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/MapVector.h,1,['Clear'],['Clear']
Usability,/// Clear the Node Cache for all Regions.; ///; /// @see Region::clearNodeCache(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,2,"['Clear', 'clear']","['Clear', 'clearNodeCache']"
Usability,/// Clear the SetVector and return the underlying vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,1,['Clear'],['Clear']
Usability,/// Clear the TmpMap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,1,['Clear'],['Clear']
Usability,/// Clear the base-paths results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,1,['Clear'],['Clear']
Usability,"/// Clear the cache",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Clear,Clear,4,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['Clear'],['Clear']
Usability,/// Clear the cache for BB RegionNodes.; ///; /// After calling this function the BasicBlock RegionNodes will be stored at; /// different memory locations. RegionNodes obtained before this function is; /// called are therefore not comparable to RegionNodes abtained afterwords.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,1,['Clear'],['Clear']
Usability,/// Clear the cache of \@llvm.assume intrinsics for a function.; ///; /// It will be re-scanned the next time it is requested.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AssumptionCache.h,1,['Clear'],['Clear']
Usability,"/// Clear the cache payload but retain slot mapping w.r.t to; /// normalization and integration sets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Clear,Clear,4,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['Clear'],['Clear']
Usability,/// Clear the command line arguments adjuster chain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,1,['Clear'],['Clear']
Usability,"/// Clear the container",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h:4,Clear,Clear,4,core/cont/inc/TVirtualCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TVirtualCollectionProxy.h,1,['Clear'],['Clear']
Usability,/// Clear the current error and return a successful one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,1,['Clear'],['Clear']
Usability,/// Clear the current insertion point. This is useful if the instruction; /// that had been serving as the insertion point may have been deleted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,1,['Clear'],['Clear']
Usability,/// Clear the dangling debug information map. This function is separated from; /// the clear so that debug information that is dangling in a basic block can; /// be properly resolved in a different basic block. This allows the; /// SelectionDAG to resolve dangling debug information attached to PHI nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,/// Clear the error message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['Clear'],['Clear']
Usability,/// Clear the fast-math flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['Clear'],['Clear']
Usability,/// Clear the floating-point exception state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['Clear'],['Clear']
Usability,/// Clear the given bit of a bignum. Zero-based.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['Clear'],['Clear']
Usability,/// Clear the insertion point: created instructions will not be inserted into; /// a block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,1,['Clear'],['Clear']
Usability,/// Clear the internal data structures that are created by 'buildTree'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Clear'],['Clear']
Usability,/// Clear the internal state. See updateState for more information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,1,['Clear'],['Clear']
Usability,/// Clear the job list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:4,Clear,Clear,4,interpreter/llvm-project/clang/include/clang/Driver/Job.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h,1,['Clear'],['Clear']
Usability,/// Clear the list and dispose of the nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,1,['Clear'],['Clear']
Usability,/// Clear the list of the analyzed reduction root instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Clear'],['Clear']
Usability,/// Clear the list; never deletes.; ///; /// \see \a clearAndDispose() if the nodes should be deleted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,2,"['Clear', 'clear']","['Clear', 'clearAndDispose']"
Usability,/// Clear the location definitions currently cached for insertion after /p; /// After.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['Clear'],['Clear']
Usability,/// Clear the memory usage of this object. This is called from; /// SelectionDAGBuilder::clear. We require this is never called in the; /// midst of processing a statepoint sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,/// Clear the method info map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:4,Clear,Clear,4,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['Clear'],['Clear']
Usability,"/// Clear the object and pre-process for the given statement, usually function; /// body statement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:4,Clear,Clear,4,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,1,['Clear'],['Clear']
Usability,/// Clear the optional flags contained in this value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['Clear'],['Clear']
Usability,/// Clear the outgoing edges.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,1,['Clear'],['Clear']
Usability,/// Clear the result so it can be used for another round of pressure tracking.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterPressure.cpp,2,['Clear'],['Clear']
Usability,/// Clear the results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,1,['Clear'],['Clear']
Usability,/// Clear the specified flag on the instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.h,1,['Clear'],['Clear']
Usability,/// Clear the timer state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Timer.h,1,['Clear'],['Clear']
Usability,/// Clear the underlying pointer without clearing the use list.; ///; /// This should only be used if a derived class has manually removed the; /// handle from the use list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,2,"['Clear', 'clear']","['Clear', 'clearing']"
Usability,/// Clear the value to null with the min tag type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerSumType.h,1,['Clear'],['Clear']
Usability,"/// Clear the vector, i.e. clear the allocated pages, the whole page; /// lookup index and reset the size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PagedVector.h,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,/// Clear this DomainValue and point to next which has all its data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ExecutionDomainFix.h,1,['Clear'],['Clear']
Usability,/// Clear this MachineInstr's memory reference descriptor list. This resets; /// the memrefs to their most conservative state. This should be used only; /// as a last resort since it greatly pessimizes our knowledge of the memory; /// access performed by the instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['Clear'],['Clear']
Usability,"/// Clear unused high order bits; ///; /// This method is used internally to clear the top ""N"" bits in the high order; /// word that are not used by the APInt. This is needed after the most; /// significant word is assigned a value to ensure that those bits are; /// zero'd out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,/// Clear value data entries,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['Clear'],['Clear']
Usability,/// Clear value data entries and edge counters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:4,Clear,Clear,4,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['Clear'],['Clear']
Usability,/// Clearance before partial register updates (in number of instructions),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h:4,Clear,Clearance,4,interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMSubtarget.h,1,['Clear'],['Clearance']
Usability,/// Clears LocalValueMap and moves the area for the new local variables; /// to the beginning of the block. It helps to avoid spilling cached variables; /// across heavy instructions like calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:4,Clear,Clears,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['Clear'],['Clears']
Usability,/// Clears all bits in the source except for the least significant bit; /// containing a value of 1 and returns the result.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c BLSI instruction.; ///; /// \param __X; /// An unsigned 64-bit integer whose bits are to be cleared.; /// \returns An unsigned 64-bit integer containing the result of clearing the; /// bits from the source operand.; /// \see _blsi_u64,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,3,"['Clear', 'clear']","['Clears', 'cleared', 'clearing']"
Usability,/// Clears all bits in the source except for the least significant bit; /// containing a value of 1 and returns the result.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c BLSI instruction.; ///; /// \param __X; /// An unsigned integer whose bits are to be cleared.; /// \returns An unsigned integer containing the result of clearing the bits from; /// the source operand.; /// \see _blsi_u32,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,3,"['Clear', 'clear']","['Clears', 'cleared', 'clearing']"
Usability,/// Clears all bits in the source except for the least significant bit; /// containing a value of 1 and returns the result.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// unsigned int _blsi_u32(unsigned int __X);; /// \endcode; ///; /// This intrinsic corresponds to the \c BLSI instruction.; ///; /// \param __X; /// An unsigned integer whose bits are to be cleared.; /// \returns An unsigned integer containing the result of clearing the bits from; /// the source operand.; /// \see __blsi_u32,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,3,"['Clear', 'clear']","['Clears', 'cleared', 'clearing']"
Usability,/// Clears all bits in the source except for the least significant bit; /// containing a value of 1 and returns the result.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// unsigned long long _blsi_u64(unsigned long long __X);; /// \endcode; ///; /// This intrinsic corresponds to the \c BLSI instruction.; ///; /// \param __X; /// An unsigned 64-bit integer whose bits are to be cleared.; /// \returns An unsigned 64-bit integer containing the result of clearing the; /// bits from the source operand.; /// \see __blsi_u64,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,3,"['Clear', 'clear']","['Clears', 'cleared', 'clearing']"
Usability,/// Clears all dependency information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4,Clear,Clears,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Clear'],['Clears']
Usability,/// Clears any association between `Loc` and a value in the environment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:4,Clear,Clears,4,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['Clear'],['Clears']
Usability,/// Clears kill flags on all operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Clear,Clears,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['Clear'],['Clears']
Usability,/// Clears map from all contents.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp:4,Clear,Clears,4,interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,1,['Clear'],['Clears']
Usability,/// Clears out all bindings in the given region and assigns a new value; /// as a Default binding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['Clear'],['Clears']
Usability,/// Clears out any current state and re-initializes for a; /// different kind of lookup.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:4,Clear,Clears,4,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['Clear'],['Clears']
Usability,/// Clears out any current state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:4,Clear,Clears,4,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['Clear'],['Clears']
Usability,"/// Clears so-far stored clusters, fields, and columns and return to a pristine ntuple descriptor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:4,Clear,Clears,4,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['Clear'],['Clears']
Usability,/// Clears the DAG state (between regions).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Clear,Clears,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,1,['Clear'],['Clears']
Usability,/// Clears the MMX state by setting the state of the x87 stack registers; /// to empty.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> EMMS </c> instruction.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/mmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h,1,['Clear'],['Clears']
Usability,"/// Clears the Minuit status history.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:4,Clear,Clears,4,roofit/roofitcore/inc/RooMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h,1,['Clear'],['Clears']
Usability,"/// Clears the PredIteratorCache info.; ///; /// This needs to be done when the CFG changes, e.g., due to splitting; /// critical edges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:4,Clear,Clears,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['Clear'],['Clears']
Usability,/// Clears the \p Pair.LaneMask lanes of \p Pair.Reg (mark them as dead).; /// Returns the previously live lanes of \p Pair.Reg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:4,Clear,Clears,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,1,['Clear'],['Clears']
Usability,/// Clears the branch-fixups list. This should only be called by; /// ResolveAllBranchFixups.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h,1,['Clear'],['Clears']
Usability,/// Clears the data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4,Clear,Clears,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Clear'],['Clears']
Usability,/// Clears the given bit of a bignum.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:4,Clear,Clears,4,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['Clear'],['Clears']
Usability,/// Clears the least significant bit that is set to 1 in the source; /// operand and returns the result.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c BLSR instruction.; ///; /// \param __X; /// An unsigned 64-bit integer containing the operand to be cleared.; /// \returns An unsigned 64-bit integer containing the result of clearing the; /// source operand.; /// \see _blsr_u64,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,3,"['Clear', 'clear']","['Clears', 'cleared', 'clearing']"
Usability,/// Clears the least significant bit that is set to 1 in the source; /// operand and returns the result.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c BLSR instruction.; ///; /// \param __X; /// An unsigned integer containing the operand to be cleared.; /// \returns An unsigned integer containing the result of clearing the source; /// operand.; /// \see _blsr_u32,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,3,"['Clear', 'clear']","['Clears', 'cleared', 'clearing']"
Usability,/// Clears the least significant bit that is set to 1 in the source; /// operand and returns the result.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// unsigned int _bls4_u32(unsigned int __X);; /// \endcode; ///; /// This intrinsic corresponds to the \c BLSR instruction.; ///; /// \param __X; /// An unsigned integer containing the operand to be cleared.; /// \returns An unsigned integer containing the result of clearing the source; /// operand.; /// \see __blsr_u32,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,3,"['Clear', 'clear']","['Clears', 'cleared', 'clearing']"
Usability,/// Clears the least significant bit that is set to 1 in the source; /// operand and returns the result.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// unsigned long long _blsr_u64(unsigned long long __X);; /// \endcode; ///; /// This intrinsic corresponds to the \c BLSR instruction.; ///; /// \param __X; /// An unsigned 64-bit integer containing the operand to be cleared.; /// \returns An unsigned 64-bit integer containing the result of clearing the; /// source operand.; /// \see __blsr_u64,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/bmiintrin.h,3,"['Clear', 'clear']","['Clears', 'cleared', 'clearing']"
Usability,/// Clears the list of NamedDecls and adds the given set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Clear,Clears,4,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,1,['Clear'],['Clears']
Usability,/// Clears the list of NamedDecls before adding the new one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Clear,Clears,4,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,1,['Clear'],['Clears']
Usability,/// Clears the list of NamedDecls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Clear,Clears,4,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,1,['Clear'],['Clears']
Usability,/// Clears the list of SUs mapped to V.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp:4,Clear,Clears,4,interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,1,['Clear'],['Clears']
Usability,/// Clears the namespace of this declaration.; ///; /// This is useful if we want this declaration to be available for; /// redeclaration lookup but otherwise hidden for ordinary name lookups.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:4,Clear,Clears,4,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['Clear'],['Clears']
Usability,/// Clears the set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h:4,Clear,Clears,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LivePhysRegs.h,2,['Clear'],['Clears']
Usability,/// Clears the set. This is a very fast constant time operation.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:4,Clear,Clears,4,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,1,['Clear'],['Clears']
Usability,/// Clears the stack without calling any destructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h,1,['Clear'],['Clears']
Usability,/// Clears the state of the given TypoExpr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Clear,Clears,4,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Clear'],['Clears']
Usability,/// Clears the used flag for all entries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4,Clear,Clears,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Clear'],['Clears']
Usability,"/// Clears the user interrupt flag (UIF). Its effect takes place immediately: a; /// user interrupt cannot be delivered on the instruction boundary following; /// CLUI. Can be executed only if CR4.UINT = 1, the logical processor is in; /// 64-bit mode, and software is not executing inside an enclave; otherwise,; /// each causes an invalid-opcode exception. Causes a transactional abort if; /// executed inside a transactional region; the abort loads EAX as it would; /// had it been due to an execution of CLI.; ///; /// \headerfile <x86gprintrin.h>; ///; /// This intrinsic corresponds to the <c> CLUI </c> instruction.; ///; /// \code{.operation}; /// UIF := 0; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h:4,Clear,Clears,4,interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/uintrintrin.h,1,['Clear'],['Clears']
Usability,"/// Clears value of this numeric variable, regardless of whether it is; /// currently defined or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:4,Clear,Clears,4,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['Clear'],['Clears']
Usability,"/// Clone OldFunc into NewFunc, transforming the old arguments into references; /// to VMap values. Note that if NewFunc already has basic blocks, the ones; /// cloned into it will be added to the end of the function. This function; /// fills in a list of return instructions, and can optionally remap types; /// and/or append the specified suffix to all values cloned.; ///; /// If \p Changes is \a CloneFunctionChangeType::LocalChangesOnly, VMap is; /// required to contain no non-identity GlobalValue mappings. Otherwise,; /// referenced metadata will be cloned.; ///; /// If \p Changes is less than \a CloneFunctionChangeType::DifferentModule; /// indicating cloning into the same module (even if it's LocalChangesOnly), if; /// debug info metadata transitively references a \a DISubprogram, it will be; /// cloned, effectively upgrading \p Changes to GlobalChanges while suppressing; /// cloning of types and compile units.; ///; /// If \p Changes is \a CloneFunctionChangeType::DifferentModule, the new; /// module's \c !llvm.dbg.cu will get updated with any newly created compile; /// units. (\a CloneFunctionChangeType::ClonedModule leaves that work for the; /// caller.); ///; /// FIXME: Consider simplifying this function by splitting out \a; /// CloneFunctionMetadataInto() and expecting / updating callers to call it; /// first when / how it's needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:1206,simpl,simplifying,1206,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,1,['simpl'],['simplifying']
Usability,/// Clone the body of the original function into a resume function of; /// some sort.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp:51,resume,resume,51,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,1,['resume'],['resume']
Usability,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:130,simpl,simply,130,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['simpl'],['simply']
Usability,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.; ///; /// \return true if there were no problems.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:130,simpl,simply,130,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,1,['simpl'],['simply']
Usability,/// Collect all Resume instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:16,Resume,Resume,16,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['Resume'],['Resume']
Usability,/// Collect for each module the list of Summaries it defines (GUID ->; /// Summary).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:62,GUID,GUID,62,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,/// Collect for the given module the list of functions it defines; /// (GUID -> Summary).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:72,GUID,GUID,72,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,/// Collect the hint info for \p Reg.; /// The results are stored into \p Out.; /// \p Out is not cleared before being populated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:98,clear,cleared,98,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['clear'],['cleared']
Usability,"/// CollectStatementsForCase - Given the body of a 'switch' statement and a; /// constant value that is being switched on, see if we can dead code eliminate; /// the body of the switch to a simple series of statements to emit. Basically,; /// on a switch (5) we want to find these statements:; /// case 5:; /// printf(...); <--; /// ++i; <--; /// break;; ///; /// and add them to the ResultStmts vector. If it is unsafe to do this; /// transformation (for example, one of the elided statements contains a label; /// that might be jumped to), return CSFC_Failure. If we handled it and 'S'; /// should include statements after it (e.g. the printf() line is a substmt of; /// the case) then return CSFC_FallThrough. If we handled it and found a break; /// statement, then return CSFC_Success.; ///; /// If Case is non-null, then we are looking for the specified case, checking; /// that nothing we jump over contains labels. If Case is null, then we found; /// the case and are looking for the break.; ///; /// If the recursive walk actually finds our Case, then we set FoundCase to; /// true.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:190,simpl,simple,190,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['simpl'],['simple']
Usability,"/// Collects all of the declaration contexts that are semantically; /// connected to this declaration context.; ///; /// For declaration contexts that have multiple semantically connected but; /// syntactically distinct contexts, such as C++ namespaces, this routine; /// retrieves the complete set of such declaration contexts in source order.; /// For example, given:; ///; /// \code; /// namespace N {; /// int x;; /// }; /// namespace N {; /// int y;; /// }; /// \endcode; ///; /// The \c Contexts parameter will contain both definitions of N.; ///; /// \param Contexts Will be cleared and set to the set of declaration; /// contexts that are semanticaly connected to this declaration context,; /// in source order, including this context (which may be the only result,; /// for non-namespace contexts).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:582,clear,cleared,582,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['clear'],['cleared']
Usability,"/// Collects cases of a ""match switch"": a collection of matchers paired with; /// callbacks, which together define a switch that can be applied to a node; /// whose type derives from `BaseT`. This structure can simplify the definition; /// of `transfer` functions that rely on pattern-matching.; ///; /// For example, consider an analysis that handles particular function calls. It; /// can define the `ASTMatchSwitch` once, in the constructor of the analysis,; /// and then reuse it each time that `transfer` is called, with a fresh state; /// value.; ///; /// \code; /// ASTMatchSwitch<Stmt, TransferState<MyLattice> BuildSwitch() {; /// return ASTMatchSwitchBuilder<TransferState<MyLattice>>(); /// .CaseOf(callExpr(callee(functionDecl(hasName(""foo"")))), TransferFooCall); /// .CaseOf(callExpr(argumentCountIs(2),; /// callee(functionDecl(hasName(""bar"")))),; /// TransferBarCall); /// .Build();; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MatchSwitch.h:211,simpl,simplify,211,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MatchSwitch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MatchSwitch.h,1,['simpl'],['simplify']
Usability,"/// Command syntax: MetaCommand := < CommandSymbol >< Command >; /// CommandSymbol := '.' | '//.'; /// Command := LCommand | XCommand | qCommand | UCommand |; /// ICommand | OCommand | RawInputCommand |; /// PrintDebugCommand | DynamicExtensionsCommand |; /// HelpCommand | FileExCommand | FilesCommand |; /// ClassCommand | GCommand | StoreStateCommand |; /// CompareStateCommand | StatsCommand | undoCommand; /// LCommand := 'L' [FilePath]; /// TCommand := 'T' FilePath FilePath; /// >Command := '>' FilePath; /// qCommand := 'q'; /// XCommand := 'x' FilePath[ArgList] | 'X' FilePath[ArgList]; /// UCommand := 'U' FilePath; /// ICommand := 'I' [FilePath]; /// OCommand := 'O'[' ']Constant; /// RawInputCommand := 'rawInput' [Constant]; /// PrintDebugCommand := 'printDebug' [Constant]; /// DebugCommand := 'debug' [Constant]; /// StoreStateCommand := 'storeState' ""Ident""; /// CompareStateCommand := 'compareState' ""Ident""; /// StatsCommand := 'stats' ['ast']; /// traceCommand := 'trace' ['ast'] [""Ident""]; /// undoCommand := 'undo' [Constant]; /// DynamicExtensionsCommand := 'dynamicExtensions' [Constant]; /// HelpCommand := 'help'; /// FileExCommand := 'fileEx'; /// FilesCommand := 'files'; /// ClassCommand := 'class' AnyString | 'Class'; /// GCommand := 'g' [Ident]; /// FilePath := AnyString; /// ArgList := (ExtraArgList) ' ' [ArgList]; /// ExtraArgList := AnyString [, ExtraArgList]; /// AnyString := *^(' ' | '\t'); /// Constant := {0-9}; /// Ident := a-zA-Z{a-zA-Z0-9}; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/MetaParser.h:398,undo,undoCommand,398,interpreter/cling/include/cling/MetaProcessor/MetaParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/MetaProcessor/MetaParser.h,3,['undo'],"['undo', 'undoCommand']"
Usability,/// Common base class for all memory intrinsics. Simply provides; /// common methods.; /// Written as CRTP to avoid a common base class amongst the; /// three atomicity hierarchies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:49,Simpl,Simply,49,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['Simpl'],['Simply']
Usability,/// Common base class for all memory transfer intrinsics. Simply provides; /// common methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:58,Simpl,Simply,58,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['Simpl'],['Simply']
Usability,/// Common base class for all memset intrinsics. Simply provides; /// common methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:49,Simpl,Simply,49,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['Simpl'],['Simply']
Usability,"/// Compare 2 BlockFrequency's with a small penalty for \p A.; /// In order to be conservative, we apply a X% penalty to account for; /// increased icache pressure and static heuristics. For small frequencies; /// we use only the numerators to improve accuracy. For simplicity, we assume the; /// penalty is less than 100%; /// TODO(iteratee): Use 64-bit fixed point edge frequencies everywhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:266,simpl,simplicity,266,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['simpl'],['simplicity']
Usability,"/// Compares each of the corresponding scalar double-precision values of; /// two 128-bit vectors of [2 x double], using the operation specified by the; /// immediate integer operand.; ///; /// If the result is true, all 64 bits of the destination vector are set;; /// otherwise they are cleared.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// __m128d _mm_cmp_sd(__m128d a, __m128d b, const int c);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VCMPSD </c> instruction.; ///; /// \param a; /// A 128-bit vector of [2 x double].; /// \param b; /// A 128-bit vector of [2 x double].; /// \param c; /// An immediate integer operand, with bits [4:0] specifying which comparison; /// operation to use: \n; /// 0x00: Equal (ordered, non-signaling) \n; /// 0x01: Less-than (ordered, signaling) \n; /// 0x02: Less-than-or-equal (ordered, signaling) \n; /// 0x03: Unordered (non-signaling) \n; /// 0x04: Not-equal (unordered, non-signaling) \n; /// 0x05: Not-less-than (unordered, signaling) \n; /// 0x06: Not-less-than-or-equal (unordered, signaling) \n; /// 0x07: Ordered (non-signaling) \n; /// 0x08: Equal (unordered, non-signaling) \n; /// 0x09: Not-greater-than-or-equal (unordered, signaling) \n; /// 0x0A: Not-greater-than (unordered, signaling) \n; /// 0x0B: False (ordered, non-signaling) \n; /// 0x0C: Not-equal (ordered, non-signaling) \n; /// 0x0D: Greater-than-or-equal (ordered, signaling) \n; /// 0x0E: Greater-than (ordered, signaling) \n; /// 0x0F: True (unordered, non-signaling) \n; /// 0x10: Equal (ordered, signaling) \n; /// 0x11: Less-than (ordered, non-signaling) \n; /// 0x12: Less-than-or-equal (ordered, non-signaling) \n; /// 0x13: Unordered (signaling) \n; /// 0x14: Not-equal (unordered, signaling) \n; /// 0x15: Not-less-than (unordered, non-signaling) \n; /// 0x16: Not-less-than-or-equal (unordered, non-signaling) \n; /// 0x17: Ordered (signaling) \n; /// 0x18: Equal (unordered, signaling) \n; /// 0x19: Not-greater-than-or-equal (unordered, non-si",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:288,clear,cleared,288,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,1,['clear'],['cleared']
Usability,"/// Compares each of the corresponding scalar values of two 128-bit; /// vectors of [4 x float], using the operation specified by the immediate; /// integer operand.; ///; /// If the result is true, all 32 bits of the destination vector are set;; /// otherwise they are cleared.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// __m128 _mm_cmp_ss(__m128 a, __m128 b, const int c);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VCMPSS </c> instruction.; ///; /// \param a; /// A 128-bit vector of [4 x float].; /// \param b; /// A 128-bit vector of [4 x float].; /// \param c; /// An immediate integer operand, with bits [4:0] specifying which comparison; /// operation to use: \n; /// 0x00: Equal (ordered, non-signaling) \n; /// 0x01: Less-than (ordered, signaling) \n; /// 0x02: Less-than-or-equal (ordered, signaling) \n; /// 0x03: Unordered (non-signaling) \n; /// 0x04: Not-equal (unordered, non-signaling) \n; /// 0x05: Not-less-than (unordered, signaling) \n; /// 0x06: Not-less-than-or-equal (unordered, signaling) \n; /// 0x07: Ordered (non-signaling) \n; /// 0x08: Equal (unordered, non-signaling) \n; /// 0x09: Not-greater-than-or-equal (unordered, signaling) \n; /// 0x0A: Not-greater-than (unordered, signaling) \n; /// 0x0B: False (ordered, non-signaling) \n; /// 0x0C: Not-equal (ordered, non-signaling) \n; /// 0x0D: Greater-than-or-equal (ordered, signaling) \n; /// 0x0E: Greater-than (ordered, signaling) \n; /// 0x0F: True (unordered, non-signaling) \n; /// 0x10: Equal (ordered, signaling) \n; /// 0x11: Less-than (ordered, non-signaling) \n; /// 0x12: Less-than-or-equal (ordered, non-signaling) \n; /// 0x13: Unordered (signaling) \n; /// 0x14: Not-equal (unordered, signaling) \n; /// 0x15: Not-less-than (unordered, non-signaling) \n; /// 0x16: Not-less-than-or-equal (unordered, non-signaling) \n; /// 0x17: Ordered (signaling) \n; /// 0x18: Equal (unordered, signaling) \n; /// 0x19: Not-greater-than-or-equal (unordered, non-signaling) \n; /// 0x1A: ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:270,clear,cleared,270,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,1,['clear'],['cleared']
Usability,"/// CompilerInstance - Helper class for managing a single instance of the Clang; /// compiler.; ///; /// The CompilerInstance serves two purposes:; /// (1) It manages the various objects which are necessary to run the compiler,; /// for example the preprocessor, the target information, and the AST; /// context.; /// (2) It provides utility routines for constructing and manipulating the; /// common Clang objects.; ///; /// The compiler instance generally owns the instance of all the objects that it; /// manages. However, clients can still share objects by manually setting the; /// object and retaking ownership prior to destroying the CompilerInstance.; ///; /// The compiler instance is intended to simplify clients, but not to lock them; /// in to the compiler instance for everything. When possible, utility functions; /// come in two forms; a short form that reuses the CompilerInstance objects,; /// and a long form that takes explicit instances of any required objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:706,simpl,simplify,706,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,1,['simpl'],['simplify']
Usability,/// Completely clear the SetVector,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:15,clear,clear,15,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,1,['clear'],['clear']
Usability,"/// Compute a layout for a struct containing the given fields, making a; /// best-effort attempt to minimize the amount of space required.; ///; /// Two features are supported which require a more careful solution; /// than the well-known ""sort by decreasing alignment"" solution:; ///; /// - Fields may be assigned a fixed offset in the layout. If there are; /// gaps among the fixed-offset fields, the algorithm may attempt; /// to allocate flexible-offset fields into those gaps. If that's; /// undesirable, the caller should ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:861,simpl,simplify,861,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,1,['simpl'],['simplify']
Usability,"/// Compute all the imports and exports for every module in the Index.; ///; /// \p ModuleToDefinedGVSummaries contains for each Module a map; /// (GUID -> Summary) for every global defined in the module.; ///; /// \p isPrevailing is a callback that will be called with a global value's GUID; /// and summary and should return whether the module corresponding to the; /// summary contains the linker-prevailing copy of that value.; ///; /// \p ImportLists will be populated with an entry for every Module we are; /// importing into. This entry is itself a map that can be passed to; /// FunctionImporter::importFunctions() above (see description there).; ///; /// \p ExportLists contains for each Module the set of globals (GUID) that will; /// be imported by another module, or referenced by such a function. I.e. this; /// is the set of globals that need to be promoted/renamed appropriately.; ///; /// The module identifier strings that are the keys of the above two maps; /// are owned by the in-memory ModuleSummaryIndex the importing decisions; /// are made from (the module path for each summary is owned by the index's; /// module path string table).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:148,GUID,GUID,148,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,3,['GUID'],['GUID']
Usability,/// Compute all the imports for the given module using the Index.; ///; /// \p isPrevailing is a callback that will be called with a global value's GUID; /// and summary and should return whether the module corresponding to the; /// summary contains the linker-prevailing copy of that value.; ///; /// \p ImportList will be populated with a map that can be passed to; /// FunctionImporter::importFunctions() above (see description there).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:148,GUID,GUID,148,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['GUID'],['GUID']
Usability,"/// Compute all the symbols that are ""dead"": i.e these that can't be reached; /// in the graph from any of the given symbols listed in; /// \p GUIDPreservedSymbols. Non-prevailing symbols are symbols without a; /// prevailing copy anywhere in IR and are normally dead, \p isPrevailing; /// predicate returns status of symbol.; /// Also update call edges for indirect calls to local functions added from; /// SamplePGO when needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:143,GUID,GUIDPreservedSymbols,143,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,1,['GUID'],['GUIDPreservedSymbols']
Usability,"/// Compute the minimum linkage given two linkages.; ///; /// The linkage can be interpreted as a pair formed by the formal linkage and; /// a boolean for external visibility. This is just what getFormalLinkage and; /// isExternallyVisible return. We want the minimum of both components. The; /// Linkage enum is defined in an order that makes this simple, we just need; /// special cases for when VisibleNoLinkage would lose the visible bit and; /// become NoLinkage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Linkage.h:349,simpl,simple,349,interpreter/llvm-project/clang/include/clang/Basic/Linkage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Linkage.h,1,['simpl'],['simple']
Usability,"/// Compute the result of ""n choose k"", the binomial coefficient. If an; /// intermediate computation overflows, Overflow will be set and the return will; /// be garbage. Overflow is not cleared on absence of overflow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:187,clear,cleared,187,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['clear'],['cleared']
Usability,"/// Compute whether each element of a shuffle is zeroable.; ///; /// A ""zeroable"" vector shuffle element is one which can be lowered to zero.; /// Either it is an undef element in the shuffle mask, the element of the input; /// referenced is undef, or the element of the input referenced is known to be; /// zero. Many x86 shuffles can zero lanes cheaply and we often want to handle; /// as many lanes with this technique as possible to simplify the remaining; /// shuffle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:437,simpl,simplify,437,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simplify']
Usability,"/// ComputePosition - Examine the given output buffer and figure out the new; /// position after output. This is safe to call multiple times on the same; /// buffer, as it records the most recently scanned character and resumes from; /// there when the buffer has not been flushed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:220,resume,resumes,220,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,1,['resume'],['resumes']
Usability,"/// Computes safety information for a loop checks loop body & header for; /// the possibility of may throw exception, it takes LoopSafetyInfo and loop; /// as argument. Updates safety information in LoopSafetyInfo argument.; /// Note: This is defined to clear and reinitialize an already initialized; /// LoopSafetyInfo. Some callers rely on this fact.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h:254,clear,clear,254,interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h,1,['clear'],['clear']
Usability,"/// Computes the multiplicative inverse of this APInt for a given modulo. The; /// iterative extended Euclidean algorithm is used to solve for this value,; /// however we simplify it to speed up calculating only the inverse, and take; /// advantage of div+rem calculations. We also use some tricks to avoid copying; /// (potentially large) APInts around.; /// WARNING: a value of '0' may be returned,; /// signifying that no multiplicative inverse exists!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:171,simpl,simplify,171,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['simpl'],['simplify']
Usability,/// Condition output from div_scale is usable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h:39,usab,usable,39,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,1,['usab'],['usable']
Usability,/// Conservatively clears subclassOptionalData after a reassociation or; /// commutation. We preserve fast-math flags when applicable as they can be; /// preserved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:19,clear,clears,19,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['clear'],['clears']
Usability,"/// ConstStmtVisitor - This class implements a simple visitor for Stmt; /// subclasses. Since Expr derives from Stmt, this also includes support for; /// visiting Exprs.; ///; /// This class preserves constness of Stmt pointers (see also StmtVisitor).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h:47,simpl,simple,47,interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,1,['simpl'],['simple']
Usability,/// Constrained versions of the binary floating point operators.; /// These will be lowered to the simple operators before final selection.; /// They are used to limit optimizations while the DAG is being; /// optimized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:99,simpl,simple,99,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['simpl'],['simple']
Usability,"/// Construct a macro expander from a set of macro definitions.; /// Macro definitions must be encoded as UTF-8.; ///; /// Each entry in \p Macros must conform to the following simple; /// macro-definition language:; /// <definition> ::= <id> <expansion> | <id> ""("" <params> "")"" <expansion>; /// <params> ::= <id-list> | """"; /// <id-list> ::= <id> | <id> "","" <params>; /// <expansion> ::= ""="" <tail> | <eof>; /// <tail> ::= <tok> <tail> | <eof>; ///; /// Macros that cannot be parsed will be silently discarded.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Macros.h:177,simpl,simple,177,interpreter/llvm-project/clang/lib/Format/Macros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Macros.h,1,['simpl'],['simple']
Usability,/// Construct a simple compile functor with the given target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:16,simpl,simple,16,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,1,['simpl'],['simple']
Usability,/// Construct an ObjectLinkingLayer. Takes ownership of the given; /// JITLinkMemoryManager. This method is a temporary hack to simplify; /// co-existence with RTDyldObjectLinkingLayer (which also owns its; /// allocators).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:128,simpl,simplify,128,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,1,['simpl'],['simplify']
Usability,"/// Construct the core LLVM function canonicalization and simplification; /// pipeline.; ///; /// This is a long pipeline and uses most of the per-function optimization; /// passes in LLVM to canonicalize and simplify the IR. It is suitable to run; /// repeatedly over the IR and is not expected to destroy important; /// information about the semantics of the IR.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:58,simpl,simplification,58,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,2,['simpl'],"['simplification', 'simplify']"
Usability,"/// Construct the core LLVM module canonicalization and simplification; /// pipeline.; ///; /// This pipeline focuses on canonicalizing and simplifying the entire module; /// of IR. Much like the function simplification pipeline above, it is; /// suitable to run repeatedly over the IR and is not expected to destroy; /// important information. It does, however, perform inlining and other; /// heuristic based simplifications that are not strictly reversible.; ///; /// Note that \p Level cannot be `O0` here. The pipelines produced are; /// only intended for use when attempting to optimize code. If frontends; /// require some transformations for semantic reasons, they should explicitly; /// build them.; ///; /// \p Phase indicates the current ThinLTO phase.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:56,simpl,simplification,56,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,4,['simpl'],"['simplification', 'simplifications', 'simplifying']"
Usability,"/// Construction context can be seen as a linked list of multiple layers.; /// Sometimes a single trigger is not enough to describe the construction; /// site. That's what causing us to have a chain of ""partial"" construction; /// context layers. Some examples:; /// - A constructor within in an aggregate initializer list within a variable; /// would have a construction context of the initializer list with; /// the parent construction context of a variable.; /// - A constructor for a temporary that needs to be both destroyed; /// and materialized into an elidable copy constructor would have a; /// construction context of a CXXBindTemporaryExpr with the parent; /// construction context of a MaterializeTemproraryExpr.; /// Not all of these are currently supported.; /// Layers are created gradually while traversing the AST, and layers that; /// represent the outmost AST nodes are built first, while the node that; /// immediately contains the constructor would be built last and capture the; /// previous layers as its parents. Construction context captures the last layer; /// (which has links to the previous layers) and classifies the seemingly; /// arbitrary chain of layers into one of the possible ways of constructing; /// an object in C++ for user-friendly experience.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:1259,user-friendly,user-friendly,1259,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,1,['user-friendly'],['user-friendly']
Usability,/// Constructor - Allocates space for the class decisions and clears them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86DisassemblerTables.h:62,clear,clears,62,interpreter/llvm-project/llvm/utils/TableGen/X86DisassemblerTables.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86DisassemblerTables.h,1,['clear'],['clears']
Usability,"/// Constructor for simple caches with RooAbsArg derived payload. A cache; /// made with this constructor is registered with its owner; /// and will receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:20,simpl,simple,20,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['simpl'],['simple']
Usability,"/// Constructor for simple caches without RooAbsArg payload. A cache; /// made with this constructor is not registered with its owner; /// and will not receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:20,simpl,simple,20,roofit/roofitcore/inc/RooCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h,1,['simpl'],['simple']
Usability,"/// Constructs an IncomingWFRHandler from a function object that is callable; /// as void(shared::WrapperFunctionResult). The function object will be called; /// directly. This should be used with care as it may block listener threads; /// in remote EPCs. It is only suitable for simple tasks (e.g. setting a; /// future), or for performing some quick analysis before dispatching ""real""; /// work as a Task.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h:280,simpl,simple,280,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ExecutorProcessControl.h,1,['simpl'],['simple']
Usability,"/// Consume a Error without doing anything. This method should be used; /// only where an error can be considered a reasonable and expected return; /// value.; ///; /// Uses of this method are potentially indicative of design problems: If it's; /// legitimate to do nothing while processing an ""error"", the error-producer; /// might be more clearly refactored to return an std::optional<T>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:341,clear,clearly,341,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['clear'],['clearly']
Usability,"/// Contains all the implemented transformations on CR logical operations.; /// For example, a binary CR logical can be used to split a block on its inputs,; /// a unary CR logical might be used to change the condition code on a; /// comparison feeding it. A nullary CR logical might simply be removable; /// if the user of the bit it [un]sets can be transformed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:284,simpl,simply,284,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,1,['simpl'],['simply']
Usability,/// Contains all variable-referring-expressions that refer; /// to local variables that are usable as constant expressions and; /// do not involve an odr-use (they may still need to be captured; /// if the enclosing full-expression is instantiation dependent).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:92,usab,usable,92,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['usab'],['usable']
Usability,/// Contains extra information for the name of a C++ deduction guide.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:63,guid,guide,63,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['guid'],['guide']
Usability,"/// Controls whether simplifications are allowed to constrain the range of; /// possible values for uses of undef. If it is false, simplifications are not; /// allowed to assume a particular value for a use of undef for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h:21,simpl,simplifications,21,interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h,2,['simpl'],['simplifications']
Usability,"/// Convert a loop into a loop with bottom test. It may; /// perform loop latch simplication as well if the flag RotationOnly; /// is false. The flag Threshold represents the size threshold of the loop; /// header. If the loop header's size exceeds the threshold, the loop rotation; /// will give up. The flag IsUtilMode controls the heuristic used in the; /// LoopRotation. If it is true, the profitability heuristic will be ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h:80,simpl,simplication,80,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopRotationUtils.h,1,['simpl'],['simplication']
Usability,"/// Convert a vector load intrinsic into a simple llvm load instruction.; /// This is beneficial when the underlying object being addressed comes; /// from a constant, since we get constant-folding for free.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:43,simpl,simple,43,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['simpl'],['simple']
Usability,"/// Convert an atomic store of a non-integral type to an integer store of the; /// equivalent bitwidth. We used to not support floating point or vector; /// atomics in the IR at all. The backends learned to deal with the bitcast; /// idiom because that was the only way of expressing the notion of a atomic; /// float or vector store. The long term plan is to teach each backend to; /// instruction select from the original atomic store, but as a migration; /// mechanism, we convert back to the old format which the backends understand.; /// Each backend will need individual work to recognize the new format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp:196,learn,learned,196,interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,1,['learn'],['learned']
Usability,/// Convert the ResumeInsts that are still present; /// into calls to the appropriate _Unwind_Resume function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp:16,Resume,ResumeInsts,16,interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp,1,['Resume'],['ResumeInsts']
Usability,"/// Convert to the given integer type.; ///; /// Convert to \c IntT using simple saturating arithmetic, truncating if; /// necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:74,simpl,simple,74,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,1,['simpl'],['simple']
Usability,"/// Converts a sequence of UnwrappedLines containing expanded macros into a; /// single UnwrappedLine containing the macro calls. This UnwrappedLine may be; /// broken into child lines, in a way that best conveys the structure of the; /// expanded code.; ///; /// In the simplest case, a spelled UnwrappedLine contains one macro, and after; /// expanding it we have one expanded UnwrappedLine. In general, macro; /// expansions can span UnwrappedLines, and multiple macros can contribute; /// tokens to the same line. We keep consuming expanded lines until:; /// * all expansions that started have finished (we're not chopping any macros; /// in half); /// * *and* we've reached the end of a *spelled* unwrapped line.; ///; /// A single UnwrappedLine represents this chunk of code.; ///; /// After this point, the state of the spelled/expanded stream is ""in sync""; /// (both at the start of an UnwrappedLine, with no macros open), so the; /// Reconstructor can be thrown away and parsing can continue.; ///; /// Given a mapping from the macro name identifier token in the macro call; /// to the tokens of the macro call, for example:; /// CLASSA -> CLASSA({public: void x();}); ///; /// When getting the formatted lines of the expansion via the \c addLine method; /// (each '->' specifies a call to \c addLine ):; /// -> class A {; /// -> public:; /// -> void x();; /// -> };; ///; /// Creates the tree of unwrapped lines containing the macro call tokens so that; /// the macro call tokens fit the semantic structure of the expanded formatted; /// lines:; /// -> CLASSA({; /// -> public:; /// -> void x();; /// -> })",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Macros.h:271,simpl,simplest,271,interpreter/llvm-project/clang/lib/Format/Macros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Macros.h,1,['simpl'],['simplest']
Usability,/// Converts the pointer to a string usable in diagnostics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:37,usab,usable,37,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,1,['usab'],['usable']
Usability,"/// Copies the 8-bit integers from a 128-bit integer vector to the; /// destination or clears 8-bit values in the destination, as specified by; /// the second source operand.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c VPSHUFB instruction.; ///; /// \param __a; /// A 128-bit integer vector containing the values to be copied.; /// \param __b; /// A 128-bit integer vector containing control bytes corresponding to; /// positions in the destination:; /// Bit 7: \n; /// 1: Clear the corresponding byte in the destination. \n; /// 0: Copy the selected source byte to the corresponding byte in the; /// destination. \n; /// Bits [6:4] Reserved. \n; /// Bits [3:0] select the source byte to be copied.; /// \returns A 128-bit integer vector containing the copied or cleared values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h:87,clear,clears,87,interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,3,"['Clear', 'clear']","['Clear', 'cleared', 'clears']"
Usability,"/// Copies the 8-bit integers from a 64-bit integer vector to the; /// destination or clears 8-bit values in the destination, as specified by; /// the second source operand.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c PSHUFB instruction.; ///; /// \param __a; /// A 64-bit integer vector containing the values to be copied.; /// \param __b; /// A 64-bit integer vector containing control bytes corresponding to; /// positions in the destination:; /// Bit 7: \n; /// 1: Clear the corresponding byte in the destination. \n; /// 0: Copy the selected source byte to the corresponding byte in the; /// destination. \n; /// Bits [3:0] select the source byte to be copied.; /// \returns A 64-bit integer vector containing the copied or cleared values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h:86,clear,clears,86,interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,3,"['Clear', 'clear']","['Clear', 'cleared', 'clears']"
Usability,"/// Copy the underlying value.; ///; /// This should get optimized down to a simple copy. We need to actually; /// construct the value, rather than calling memcpy, to satisfy strict; /// aliasing rules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h:77,simpl,simple,77,interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,1,['simpl'],['simple']
Usability,"/// Cost multiplier is a way to limit potentially exponential behavior; /// of loop-unswitch. Cost is multipied in proportion of 2^number of unswitch; /// candidates available. Also accounting for the number of ""sibling"" loops with; /// the idea to account for previous unswitches that already happened on this; /// cluster of loops. There was an attempt to keep this formula simple,; /// just enough to limit the worst case behavior. Even if it is not that simple; /// now it is still not an attempt to provide a detailed heuristic size; /// prediction.; ///; /// TODO: Make a proper accounting of ""explosion"" effect for all kinds of; /// unswitch candidates, making adequate predictions instead of wild guesses.; /// That requires knowing not just the number of ""remaining"" candidates but; /// also costs of unswitching for each of these candidates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:376,simpl,simple,376,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,2,['simpl'],['simple']
Usability,/// Count the number of simple (constant) return expressions in the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:24,simpl,simple,24,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,"/// Covers a name, an initializer and a part of the type outside declaration; /// specifiers. Examples are:; /// `*a` in `int *a`; /// `a[10]` in `int a[10]`; /// `*a = nullptr` in `int *a = nullptr`; /// Declarators can be unnamed too:; /// `**` in `new int**`; /// `* = nullptr` in `void foo(int* = nullptr)`; /// Most declarators you encounter are instances of SimpleDeclarator. They may; /// contain an inner declarator inside parentheses, we represent it as; /// ParenDeclarator. E.g.; /// `(*a)` in `int (*a) = 10`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h:364,Simpl,SimpleDeclarator,364,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,1,['Simpl'],['SimpleDeclarator']
Usability,/// Create a SimpleRemoteEPC using the given transport type and args.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h:13,Simpl,SimpleRemoteEPC,13,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,1,['Simpl'],['SimpleRemoteEPC']
Usability,"/// Create a copy of the thinlto import, mark it local, and redirect direct; /// calls to the copy. Only direct calls are replaced, so that e.g. indirect; /// call function pointer tests would use the global identity of the function.; ///; /// Currently, Value Profiling (""VP"") MD_prof data isn't updated to refer to the; /// clone's GUID (which will be different, because the name and linkage is; /// different), under the assumption that the last consumer of this data is; /// upstream the pipeline (e.g. ICP).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ElimAvailExtern.cpp:334,GUID,GUID,334,interpreter/llvm-project/llvm/lib/Transforms/IPO/ElimAvailExtern.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ElimAvailExtern.cpp,1,['GUID'],['GUID']
Usability,/// Create a declaration name that is a simple identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:40,simpl,simple,40,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['simpl'],['simple']
Usability,"/// Create a mapping from the value numbering to a different separate set of; /// numbers. This will serve as a guide for relating one candidate to another.; /// The canonical number gives use the ability identify which global value; /// number in one candidate relates to the global value number in the other.; ///; /// \param [in, out] CurrCand - The IRSimilarityCandidate to create a; /// canonical numbering for.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:112,guid,guide,112,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['guid'],['guide']
Usability,/// Create a new BinaryOperator representing a simple assignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp:47,simpl,simple,47,interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,1,['simpl'],['simple']
Usability,"/// Create a new phi node for the induction variable \p OrigPhi to resume; /// iteration count in the scalar epilogue, from where the vectorized loop; /// left off. \p Step is the SCEV-expanded induction step to use. In cases; /// where the loop skeleton is more complicated (i.e., epilogue vectorization); /// and the resume values can come from an additional bypass block, the \p; /// AdditionalBypass pair provides information about the bypass block and the; /// end value on the edge from bypass to this loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:67,resume,resume,67,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['resume'],['resume']
Usability,/// Create a new slot for the specified GUID,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:40,GUID,GUID,40,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,1,['GUID'],['GUID']
Usability,"/// Create a progress helper.; /// \param increment RDF callbacks are called every `n` events. Pass this `n` here.; /// \param totalFiles read total number of files in the RDF.; /// \param progressBarWidth Number of characters the progress bar will occupy.; /// \param printInterval Update every stats every `n` seconds.; /// \param useColors Use shell colour codes to colour the output. Automatically disabled when; /// we are not writing to a tty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:231,progress bar,progress bar,231,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,1,['progress bar'],['progress bar']
Usability,"/// Create a simple, modifiably lvalue",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:13,simpl,simple,13,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['simpl'],['simple']
Usability,/// Create all simple and struct types exposed by the runtime and remember; /// the llvm::PointerTypes of them for easy access later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:15,simpl,simple,15,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['simpl'],['simple']
Usability,"/// Create an OpenCL kernel for an enqueued block.; ///; /// The kernel has the same function type as the block invoke function. Its; /// name is the name of the block invoke function postfixed with ""_kernel"".; /// It simply calls the block invoke function then returns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp:218,simpl,simply,218,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp,1,['simpl'],['simply']
Usability,"/// Create an automaton.; /// \param Transitions The Transitions table as created by TableGen. Note that; /// because the action type differs per automaton, the; /// table type is templated as ArrayRef<InfoT>.; /// \param TranscriptionTable The TransitionInfo table as created by TableGen.; ///; /// Providing the TranscriptionTable argument as non-empty will enable the; /// use of transcription, which analyzes the possible paths in the original; /// NFA taken by the DFA. NOTE: This is substantially more work than simply; /// driving the DFA, so unless you require the getPaths() method leave this; /// empty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h:518,simpl,simply,518,interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Automaton.h,1,['simpl'],['simply']
Usability,"/// Create new phi nodes for the induction variables to resume iteration count; /// in the scalar epilogue, from where the vectorized loop left off.; /// In cases where the loop skeleton is more complicated (eg. epilogue; /// vectorization) and the resume values can come from an additional bypass; /// block, the \p AdditionalBypass pair provides information about the bypass; /// block and the end value on the edge from bypass to this loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:56,resume,resume,56,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['resume'],['resume']
Usability,"/// Creates a PseudoProbeSDNode with function GUID `Guid` and; /// the index of the block `Index` it is probing, as well as the attributes; /// `attr` of the probe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:46,GUID,GUID,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,2,"['GUID', 'Guid']","['GUID', 'Guid']"
Usability,"/// Customized printing of arguments of a RooRealSumFunc to more intuitively; /// reflect the contents of the product operator construction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealSumFunc.cxx:65,intuit,intuitively,65,roofit/roofitcore/src/RooRealSumFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealSumFunc.cxx,1,['intuit'],['intuitively']
Usability,"/// DataStreamBasicReader provides convenience implementations for many; /// BasicReader methods based on the assumption that the; /// ultimate reader implementation is based on a variable-length stream; /// of unstructured data (like Clang's module files). It is designed; /// to pair with DataStreamBasicWriter.; ///; /// This class can also act as a PropertyReader, implementing find(""...""); /// by simply forwarding to itself.; ///; /// Unimplemented methods:; /// readBool; /// readUInt32; /// readUInt64; /// readIdentifier; /// readSelector; /// readSourceLocation; /// readQualType; /// readStmtRef; /// readDeclRef",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AbstractBasicReader.h:402,simpl,simply,402,interpreter/llvm-project/clang/include/clang/AST/AbstractBasicReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AbstractBasicReader.h,1,['simpl'],['simply']
Usability,"/// DataStreamBasicWriter provides convenience implementations for many; /// BasicWriter methods based on the assumption that the; /// ultimate writer implementation is based on a variable-length stream; /// of unstructured data (like Clang's module files). It is designed; /// to pair with DataStreamBasicReader.; ///; /// This class can also act as a PropertyWriter, implementing find(""...""); /// by simply forwarding to itself.; ///; /// Unimplemented methods:; /// writeBool; /// writeUInt32; /// writeUInt64; /// writeIdentifier; /// writeSelector; /// writeSourceLocation; /// writeQualType; /// writeStmtRef; /// writeDeclRef",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AbstractBasicWriter.h:402,simpl,simply,402,interpreter/llvm-project/clang/include/clang/AST/AbstractBasicWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AbstractBasicWriter.h,1,['simpl'],['simply']
Usability,"/// Declarations for LLVM-IR types (simple, array, function and structure) are; /// generated below. Their names are defined and used in OpenMPKinds.def. Here; /// we provide the declarations, the initializeTypes function will provide the; /// values.; ///; ///{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:36,simpl,simple,36,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['simpl'],['simple']
Usability,/// Declare implicit deduction guides for a class template if we've; /// not already done so.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:31,guid,guides,31,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['guid'],['guides']
Usability,/// Deduction guide to construct a `MutableArrayRef` from a C array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct a `MutableArrayRef` from a `SmallVector`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct a `MutableArrayRef` from a `std::array`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct a `MutableArrayRef` from a `std::vector`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct a `MutableArrayRef` from a pointer and; /// length.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct an ArrayRef from a C array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct an ArrayRef from a SmallVector,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,2,['guid'],['guide']
Usability,/// Deduction guide to construct an ArrayRef from a pointer and length,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct an ArrayRef from a range,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct an ArrayRef from a std::array,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct an ArrayRef from a std::vector,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct an ArrayRef from an ArrayRef,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Deduction guide to construct an ArrayRef from an ArrayRef (const),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:14,guid,guide,14,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['guid'],['guide']
Usability,/// Default materializable callback; // Check for instructions that we can recreate on resume as opposed to spill; // the result into a coroutine frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:87,resume,resume,87,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['resume'],['resume']
Usability,"/// DefinedTracker - This struct is used while parsing expressions to keep track; /// of whether !defined(X) has been seen.; ///; /// With this simple scheme, we handle the basic forms:; /// !defined(X) and !defined X; /// but we also trivially handle (silly) stuff like:; /// !!!defined(X) and +!defined(X) and !+!+!defined(X) and !(defined(X)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp:144,simpl,simple,144,interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPExpressions.cpp,1,['simpl'],['simple']
Usability,"/// Definitions of declarations injected also into cling.; /// NOTE: this could also stay in a header #included here and into cling, but; /// for the sake of simplicity we just redeclare them here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/demo/cling-demo.cpp:158,simpl,simplicity,158,interpreter/cling/tools/demo/cling-demo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/demo/cling-demo.cpp,1,['simpl'],['simplicity']
Usability,"/// Describe which type of quotes should be used when quoting is necessary.; /// Some non-printable characters need to be double-quoted, while some others; /// are fine with simple-quoting, and some don't need any quoting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:174,simpl,simple-quoting,174,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['simpl'],['simple-quoting']
Usability,"/// Description of a source-code transformation.; //; // A *rewrite rule* describes a transformation of source code. A simple rule; // contains each of the following components:; //; // * Matcher: the pattern term, expressed as clang matchers (with Transformer; // extensions).; //; // * Edits: a set of Edits to the source code, described with ASTEdits.; //; // However, rules can also consist of (sub)rules, where the first that matches; // is applied and the rest are ignored. So, the above components together form; // a logical ""case"" and a rule is a sequence of cases.; //; // Rule cases have an additional, implicit, component: the parameters. These are; // portions of the pattern which are left unspecified, yet bound in the pattern; // so that we can reference them in the edits.; //; // The \c Transformer class can be used to apply the rewrite rule and obtain the; // corresponding replacements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:119,simpl,simple,119,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['simpl'],['simple']
Usability,/// Destination for the callee's resume.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:33,resume,resume,33,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['resume'],['resume']
Usability,"/// Determine if it is beneficial to fuse two loops.; ///; /// For now, this method simply returns true because we want to fuse as much; /// as possible (primarily to test the pass). This method will evolve, over; /// time, to add heuristics for profitability of fusion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:84,simpl,simply,84,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['simpl'],['simply']
Usability,"/// Determine if sign bit of this APInt is clear.; ///; /// This tests the high bit of this APInt to determine if it is clear.; ///; /// \returns true if this APInt has its sign bit clear, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:43,clear,clear,43,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,3,['clear'],['clear']
Usability,"/// Determine if the specified value can be computed in the specified wider type; /// and produce the same low bits. If not, return false.; ///; /// If this function returns true, it can also return a non-zero number of bits; /// (in BitsToClear) which indicates that the value it computes is correct for; /// the zero extend, but that the additional BitsToClear bits need to be zero'd; /// out. For example, to promote something like:; ///; /// %B = trunc i64 %A to i32; /// %C = lshr i32 %B, 8; /// %E = zext i32 %C to i64; ///; /// CanEvaluateZExtd for the 'lshr' will return true, and BitsToClear will be; /// set to 8 to indicate that the promoted value needs to have bits 24-31; /// cleared in addition to bits 32-63. Since an 'and' will be generated to; /// clear the top bits anyway, doing this has no extra cost.; ///; /// This function works on both vectors and scalars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:689,clear,cleared,689,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,2,['clear'],"['clear', 'cleared']"
Usability,"/// Determine if the value type is supported by FastISel.; ///; /// FastISel for AArch64 can handle more value types than are legal. This adds; /// simple value type such as i1, i8, and i16.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:148,simpl,simple,148,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['simpl'],['simple']
Usability,"/// Determine if this value is zero, i.e. all bits are clear.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:55,clear,clear,55,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['clear'],['clear']
Usability,"/// Determine the number of levels of enclosing template parameters. This is; /// only usable while parsing. Note that this does not include dependent; /// contexts in which no template parameters have yet been declared, such as; /// in a terse function template or generic lambda before the first 'auto' is; /// encountered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:87,usab,usable,87,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['usab'],['usable']
Usability,/// Determine the simplified type class of the given canonical type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:18,simpl,simplified,18,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['simpl'],['simplified']
Usability,/// Determine whether a given function template has a simple explicit specifier; /// or a non-value-dependent explicit-specification that evaluates to true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:54,simpl,simple,54,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['simpl'],['simple']
Usability,/// Determine whether a particular identifier might be the name in a C++1z; /// deduction-guide declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:90,guid,guide,90,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['guid'],['guide']
Usability,/// Determine whether the given type T is a simple-template-id type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:44,simpl,simple-template-id,44,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['simpl'],['simple-template-id']
Usability,"/// Determine whether the initializer of this variable is an integer constant; /// expression. For use in C++98, where this affects whether the variable is; /// usable in constant expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:161,usab,usable,161,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['usab'],['usable']
Usability,"/// Determine whether the parser is currently referring to a an; /// Objective-C message send, using a simplified heuristic to avoid overhead.; ///; /// This routine will only return true for a subset of valid message-send; /// expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:103,simpl,simplified,103,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['simpl'],['simplified']
Usability,/// Determine whether the token is a simple-type-specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h:37,simpl,simple-type-specifier,37,interpreter/llvm-project/clang/lib/Format/FormatToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h,1,['simpl'],['simple-type-specifier']
Usability,"/// Determine whether this temporary object is usable in constant; /// expressions, as specified in C++20 [expr.const]p4.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:47,usab,usable,47,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['usab'],['usable']
Usability,"/// Determine whether this variable has constant initialization.; ///; /// This is only set in two cases: when the language semantics require; /// constant initialization (globals in C and some globals in C++), and when; /// the variable is usable in constant expressions (constexpr, const int, and; /// reference variables in C++).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:241,usab,usable,241,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['usab'],['usable']
Usability,"/// Determine whether this variable's value might be usable in a; /// constant expression, according to the relevant language standard.; /// This only checks properties of the declaration, and does not check; /// whether the initializer is in fact a constant expression.; ///; /// This corresponds to C++20 [expr.const]p3's notion of a; /// ""potentially-constant"" variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:53,usab,usable,53,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['usab'],['usable']
Usability,"/// Determine whether we might be looking at the '<' template-argument-list '>'; /// of a template-id or simple-template-id, rather than a less-than comparison.; /// This will often fail and produce an ambiguity, but should never be wrong; /// if it returns True or False.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:105,simpl,simple-template-id,105,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['simpl'],['simple-template-id']
Usability,"/// Determine whether we're looking at something that might be a declarator; /// in a simple-declaration. If it can't possibly be a declarator, maybe; /// diagnose a missing semicolon after a prior tag definition in the decl; /// specifier.; ///; /// \return \c true if an error occurred and this can't be any kind of; /// declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:86,simpl,simple-declaration,86,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['simpl'],['simple-declaration']
Usability,/// Determines the spelling of simple keyword and contextual keyword; /// tokens like 'int' and 'dynamic_cast'. Returns NULL for other token kinds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:31,simpl,simple,31,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,1,['simpl'],['simple']
Usability,"/// Determines the spelling of simple punctuation tokens like; /// '!' or '%', and returns NULL for literal and annotation tokens.; ///; /// This routine only retrieves the ""simple"" spelling of the token,; /// and will not produce any alternative spellings (e.g., a; /// digraph). For the actual spelling of a given Token, use; /// Preprocessor::getSpelling().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:31,simpl,simple,31,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,2,['simpl'],['simple']
Usability,"/// Diagnose a declaration whose declarator-id has the given; /// nested-name-specifier.; ///; /// \param SS The nested-name-specifier of the declarator-id.; ///; /// \param DC The declaration context to which the nested-name-specifier; /// resolves.; ///; /// \param Name The name of the entity being declared.; ///; /// \param Loc The location of the name of the entity being declared.; ///; /// \param IsTemplateId Whether the name is a (simple-)template-id, and thus; /// we're declaring an explicit / partial specialization / instantiation.; ///; /// \returns true if we cannot safely recover from this error, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:441,simpl,simple,441,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['simpl'],['simple']
Usability,/// Diagnoses the current set of gathered accesses. This typically; /// happens at full expression level. The set is cleared after emitting the; /// diagnostics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:117,clear,cleared,117,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['clear'],['cleared']
Usability,"/// Disambiguates between a declaration in a condition, a; /// simple-declaration in an init-statement, and an expression for; /// a condition of a if/switch statement.; ///; /// condition:; /// expression; /// type-specifier-seq declarator '=' assignment-expression; /// [C++11] type-specifier-seq declarator '=' initializer-clause; /// [C++11] type-specifier-seq declarator braced-init-list; /// [GNU] type-specifier-seq declarator simple-asm-expr[opt] attributes[opt]; /// '=' assignment-expression; /// simple-declaration:; /// decl-specifier-seq init-declarator-list[opt] ';'; ///; /// Note that, unlike isCXXSimpleDeclaration, we must disambiguate all the way; /// to the ';' to disambiguate cases like 'int(x))' (an expression) from; /// 'int(x);' (a simple-declaration in an init-statement).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:63,simpl,simple-declaration,63,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,4,['simpl'],"['simple-asm-expr', 'simple-declaration']"
Usability,/// DoRewriteTest - A simple test for the TokenRewriter class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:22,simpl,simple,22,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,1,['simpl'],['simple']
Usability,"/// DocComment is a vector of RawComment::CommentLine.; ///; /// Each line represents one line of striped documentation comment,; /// with source range information. This simplifies calculating the source; /// location of a character in the doc comment for pointing back to the source; /// file.; /// e.g.; /// \code; /// /// This is a documentation comment; /// ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~' First line.; /// /// with multiple lines.; /// ^~~~~~~~~~~~~~~~~~~~~~~' Second line.; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:170,simpl,simplifies,170,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,1,['simpl'],['simplifies']
Usability,"/// Does this SU have a hazard within the current instruction group.; ///; /// The scheduler supports two modes of hazard recognition. The first is the; /// ScheduleHazardRecognizer API. It is a fully general hazard recognizer that; /// supports highly complicated in-order reservation tables; /// (ScoreboardHazardRecognizer) and arbitrary target-specific logic.; ///; /// The second is a streamlined mechanism that checks for hazards based on; /// simple counters that the scheduler itself maintains. It explicitly checks; /// for instruction dispatch limitations, including the number of micro-ops that; /// can dispatch per cycle.; ///; /// TODO: Also check whether the SU must start a new group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:450,simpl,simple,450,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,2,['simpl'],['simple']
Usability,"/// Does this attribute behave like a type qualifier?; ///; /// A type qualifier adjusts a type to provide specialized rules for; /// a specific object, like the standard const and volatile qualifiers.; /// This includes attributes controlling things like nullability,; /// address spaces, and ARC ownership. The value of the object is still; /// largely described by the modified type.; ///; /// In contrast, many type attributes ""rewrite"" their modified type to; /// produce a fundamentally different type, not necessarily related in any; /// formalizable way to the original type. For example, calling convention; /// and vector attributes are not simple type qualifiers.; ///; /// Type qualifiers are often, but not always, reflected in the canonical; /// type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:651,simpl,simple,651,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['simpl'],['simple']
Usability,/// Does this target require the clearing of high-order bits in a register; /// passed to the fp16 to fp conversion library function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:33,clear,clearing,33,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['clear'],['clearing']
Usability,/// EHResumeBlock - Unified block containing a call to llvm.eh.resume.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:63,resume,resume,63,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['resume'],['resume']
Usability,"/// Either a pointer to an AST node or the offset within the; /// external AST source where the AST node can be found.; ///; /// If the low bit is clear, a pointer to the AST node. If the low; /// bit is set, the upper 63 bits are the offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:147,clear,clear,147,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,1,['clear'],['clear']
Usability,"/// Eliminate an operation that consumes a simple IV and has no observable; /// side-effect given the range of IV values. IVOperand is guaranteed SCEVable,; /// but UseInst may not be.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:43,simpl,simple,43,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['simpl'],['simple']
Usability,"/// Eliminate two-edge cycles created by addContextEdges().; ///; /// Once all the context edges are in place, there are plenty of cases where; /// there's a single edge from a top-level statement to a subexpression,; /// followed by a single path note, and then a reverse edge to get back out to; /// the top level. If the statement is simple enough, the subexpression edges; /// just add noise and make it harder to understand what's going on.; ///; /// This function only removes edges in pairs, because removing only one edge; /// might leave other edges dangling.; ///; /// This will not remove edges in more complicated situations:; /// - if there is more than one ""hop"" leading to or from a subexpression.; /// - if there is an inlined call between the edges instead of a single event.; /// - if the whole statement is large enough that having subexpression arrows; /// might be helpful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:337,simpl,simple,337,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['simpl'],['simple']
Usability,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:454,simpl,simply,454,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['simpl'],['simply']
Usability,"/// Emit a code for reduction clause. Next code should be emitted for; /// reduction:; /// \code; ///; /// static kmp_critical_name lock = { 0 };; ///; /// void reduce_func(void *lhs[<n>], void *rhs[<n>]) {; /// ...; /// *(Type<i>*)lhs[i] = RedOp<i>(*(Type<i>*)lhs[i], *(Type<i>*)rhs[i]);; /// ...; /// }; ///; /// ...; /// void *RedList[<n>] = {&<RHSExprs>[0], ..., &<RHSExprs>[<n>-1]};; /// switch (__kmpc_reduce{_nowait}(<loc>, <gtid>, <n>, sizeof(RedList),; /// RedList, reduce_func, &<lock>)) {; /// case 1:; /// ...; /// <LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]);; /// ...; /// __kmpc_end_reduce{_nowait}(<loc>, <gtid>, &<lock>);; /// break;; /// case 2:; /// ...; /// Atomic(<LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]));; /// ...; /// break;; /// default:;; /// }; /// \endcode; ///; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.; /// \param Options List of options for reduction codegen:; /// WithNowait true if parent directive has also nowait clause, false; /// otherwise.; /// SimpleReduction Emit reduction operation only. Used for omp simd; /// directive on the host.; /// ReductionKind The kind of reduction to perform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1309,Simpl,SimpleReduction,1309,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['Simpl'],['SimpleReduction']
Usability,"/// Emit a code for reduction clause.; ///; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.; /// \param Options List of options for reduction codegen:; /// WithNowait true if parent directive has also nowait clause, false; /// otherwise.; /// SimpleReduction Emit reduction operation only. Used for omp simd; /// directive on the host.; /// ReductionKind The kind of reduction to perform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:534,Simpl,SimpleReduction,534,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['Simpl'],['SimpleReduction']
Usability,"/// Emit an implicit/explicit barrier for OpenMP threads.; /// \param Kind Directive for which this implicit barrier call must be; /// generated. Must be OMPD_barrier for explicit barrier generation.; /// \param EmitChecks true if need to emit checks for cancellation barriers.; /// \param ForceSimpleCall true simple barrier call must be emitted, false if; /// runtime class decides which one to emit (simple or with cancellation; /// checks).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:311,simpl,simple,311,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,['simpl'],['simple']
Usability,/// Emit an l-value for an assignment (simple or compound) of complex type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:39,simpl,simple,39,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,"/// Emit atomic update code for constructs: \a X = \a X \a BO \a E or; /// \a X = \a E \a BO \a E.; ///; /// \param X Value to be updated.; /// \param E Update value.; /// \param BO Binary operation for update operation.; /// \param IsXLHSInRHSPart true if \a X is LHS in RHS part of the update; /// expression, false otherwise.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param CommonGen Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \returns <true, OldAtomicValue> if simple 'atomicrmw' instruction was; /// generated, <false, RValue::get(nullptr)> otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:560,simpl,simple,560,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,"/// Emit code for the directive that does not require outlining.; ///; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param HasCancel true if region has inner cancel directive, false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:129,simpl,simple,129,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['simpl'],['simple']
Usability,"/// Emit reduction combiner. If the combiner is a simple expression emit it as; /// is, otherwise consider it as combiner of UDR decl and emit it as a call of; /// UDR combiner function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:50,simpl,simple,50,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['simpl'],['simple']
Usability,/// Emit simple code for OpenMP directives in Simd-only mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:9,simpl,simple,9,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,"/// Emit target-specific code that performs a memcpy.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.; ///; /// If AlwaysInline is true, the size is constant and the target should not; /// emit any calls and is strongly encouraged to attempt to emit inline code; /// even if it is beyond the usual threshold because this intrinsic is being; /// expanded in a place where calls are not feasible (e.g. within the prologue; /// for another call). If the target chooses to decline an AlwaysInline; /// request here, legalize will resort to using simple loads and stores.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:171,simpl,simple,171,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,2,['simpl'],['simple']
Usability,/// Emit target-specific code that performs a memmove.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:172,simpl,simple,172,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,1,['simpl'],['simple']
Usability,/// Emit target-specific code that performs a memset.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple stores and can be more; /// efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used. Note that if AlwaysInline is true the; /// function has to return a valid SDValue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:171,simpl,simple,171,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,1,['simpl'],['simple']
Usability,/// Emit the current diagnostic and clear the diagnostic state.; ///; /// \param Force Emit the diagnostic regardless of suppression settings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:36,clear,clear,36,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['clear'],['clear']
Usability,"/// Emit the language-specific data that __C_specific_handler expects. This; /// handler lives in the x64 Microsoft C runtime and allows catching or cleaning; /// up after faults with __try, __except, and __finally. The typeinfo values; /// are not really RTTI data, but pointers to filter functions that return an; /// integer (1, 0, or -1) indicating how to handle the exception. For __finally; /// blocks and other cleanups, the landing pad label is zero, and the filter; /// function is actually a cleanup handler with the same prototype. A catch-all; /// entry is modeled with a null filter function field and a non-zero landing; /// pad label.; ///; /// Possible filter function return values:; /// EXCEPTION_EXECUTE_HANDLER (1):; /// Jump to the landing pad label after cleanups.; /// EXCEPTION_CONTINUE_SEARCH (0):; /// Continue searching this table or continue unwinding.; /// EXCEPTION_CONTINUE_EXECUTION (-1):; /// Resume execution at the trapping PC.; ///; /// Inferred table structure:; /// struct Table {; /// int NumEntries;; /// struct Entry {; /// imagerel32 LabelStart; // Inclusive; /// imagerel32 LabelEnd; // Exclusive; /// imagerel32 FilterOrFinally; // One means catch-all.; /// imagerel32 LabelLPad; // Zero means __finally.; /// } Entries[NumEntries];; /// };",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp:926,Resume,Resume,926,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,1,['Resume'],['Resume']
Usability,"/// Emit the result of the given expression as an abstract constant,; /// asserting that it succeeded. This is only safe to do when the; /// expression is known to be a constant expression with either a fairly; /// simple type or a known simple form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:215,simpl,simple,215,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,2,['simpl'],['simple']
Usability,"/// Emit the user-defined mapper function. The code generation follows the; /// pattern in the example below.; /// \code; /// void .omp_mapper.<type_name>.<mapper_id>.(void *rt_mapper_handle,; /// void *base, void *begin,; /// int64_t size, int64_t type,; /// void *name = nullptr) {; /// // Allocate space for an array section first or add a base/begin for; /// // pointer dereference.; /// if ((size > 1 || (base != begin && maptype.IsPtrAndObj)) &&; /// !maptype.IsDelete); /// __tgt_push_mapper_component(rt_mapper_handle, base, begin,; /// size*sizeof(Ty), clearToFromMember(type));; /// // Map members.; /// for (unsigned i = 0; i < size; i++) {; /// // For each component specified by this mapper:; /// for (auto c : begin[i]->all_components) {; /// if (c.hasMapper()); /// (*c.Mapper())(rt_mapper_handle, c.arg_base, c.arg_begin, c.arg_size,; /// c.arg_type, c.arg_name);; /// else; /// __tgt_push_mapper_component(rt_mapper_handle, c.arg_base,; /// c.arg_begin, c.arg_size, c.arg_type,; /// c.arg_name);; /// }; /// }; /// // Delete the array section.; /// if (size > 1 && maptype.IsDelete); /// __tgt_push_mapper_component(rt_mapper_handle, base, begin,; /// size*sizeof(Ty), clearToFromMember(type));; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:562,clear,clearToFromMember,562,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['clear'],['clearToFromMember']
Usability,"/// Emit va_arg for a platform using the common void* representation,; /// where arguments are simply emitted in an array of slots on the stack.; ///; /// This version implements the core direct-value passing rules.; ///; /// \param SlotSize - The size and alignment of a stack slot.; /// Each argument will be allocated to a multiple of this number of; /// slots, and all the slots will be aligned to this value.; /// \param AllowHigherAlign - The slot alignment is not a cap;; /// an argument type with an alignment greater than the slot size; /// will be emitted on a higher-alignment address, potentially; /// leaving one or more empty slots behind as padding. If this; /// is false, the returned address might be less-aligned than; /// DirectAlign.; /// \param ForceRightAdjust - Default is false. On big-endian platform and; /// if the argument is smaller than a slot, set this flag will force; /// right-adjust the argument in its slot irrespective of the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h:95,simpl,simply,95,interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,1,['simpl'],['simply']
Usability,"/// Emit va_arg for a platform using the common void* representation,; /// where arguments are simply emitted in an array of slots on the stack.; ///; /// \param IsIndirect - Values of this type are passed indirectly.; /// \param ValueInfo - The size and alignment of this type, generally; /// computed with getContext().getTypeInfoInChars(ValueTy).; /// \param SlotSizeAndAlign - The size and alignment of a stack slot.; /// Each argument will be allocated to a multiple of this number of; /// slots, and all the slots will be aligned to this value.; /// \param AllowHigherAlign - The slot alignment is not a cap;; /// an argument type with an alignment greater than the slot size; /// will be emitted on a higher-alignment address, potentially; /// leaving one or more empty slots behind as padding.; /// \param ForceRightAdjust - Default is false. On big-endian platform and; /// if the argument is smaller than a slot, set this flag will force; /// right-adjust the argument in its slot irrespective of the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h:95,simpl,simply,95,interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,1,['simpl'],['simply']
Usability,"/// EmitAutoVarDecl - Emit code and set up an entry in LocalDeclMap for a; /// variable declaration with auto, register, or no storage class specifier.; /// These turn into simple stack objects, or GlobalValues depending on target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:173,simpl,simple,173,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['simpl'],['simple']
Usability,"/// EmitBranch - Emit a branch to the specified basic block from the current; /// insert block, taking care to avoid creation of branches from dummy; /// blocks. It is legal to call this function even if there is no current; /// insertion point.; ///; /// This function clears the current insertion point. The caller should follow; /// calls to this function with calls to Emit*Block prior to generation new; /// code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:270,clear,clears,270,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['clear'],['clears']
Usability,"/// EmitBranchOnBoolExpr - Emit a branch on a boolean condition (e.g. for an if; /// statement) to the specified blocks. Based on the condition, this might try; /// to simplify the codegen of the conditional based on the branch.; /// \param LH The value of the likelihood attribute on the True branch.; /// \param ConditionalOp Used by MC/DC code coverage to track the result of the; /// ConditionalOperator (ternary) through a recursive call for the operator's; /// LHS and RHS nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:168,simpl,simplify,168,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['simpl'],['simplify']
Usability,"/// EmitBranchOnBoolExpr - Emit a branch on a boolean condition (e.g. for an; /// if statement) to the specified blocks. Based on the condition, this might; /// try to simplify the codegen of the conditional based on the branch.; /// TrueCount should be the number of times we expect the condition to; /// evaluate to true based on PGO data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:168,simpl,simplify,168,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simplify']
Usability,/// EmitCtorList - Generates a global array of functions and priorities using; /// the given list and name. This array will have appending linkage and is; /// suitable for use as a LLVM constructor or destructor array. Clears Fns.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:219,Clear,Clears,219,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['Clear'],['Clears']
Usability,"/// EmitLValue - Emit code to compute a designator that specifies the location; /// of the expression.; ///; /// This can return one of two things: a simple address or a bitfield reference.; /// In either case, the LLVM Value* in the LValue structure is guaranteed to be; /// an LLVM pointer type.; ///; /// If this returns a bitfield reference, nothing about the pointee type of the; /// LLVM value is known: For example, it may not be a pointer to an integer.; ///; /// If this returns a normal address, and if the lvalue's C type is fixed size,; /// this method guarantees that the returned pointer type will point to an LLVM; /// type of the same size of the lvalue's type. If the lvalue has a variable; /// length type, this is not possible.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:150,simpl,simple,150,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['simpl'],['simple']
Usability,"/// EmitLValue - Emit code to compute a designator that specifies the location; /// of the expression.; ///; /// This can return one of two things: a simple address or a bitfield; /// reference. In either case, the LLVM Value* in the LValue structure is; /// guaranteed to be an LLVM pointer type.; ///; /// If this returns a bitfield reference, nothing about the pointee type of; /// the LLVM value is known: For example, it may not be a pointer to an; /// integer.; ///; /// If this returns a normal address, and if the lvalue's C type is fixed; /// size, this method guarantees that the returned pointer type will point to; /// an LLVM type of the same size of the lvalue's type. If the lvalue has a; /// variable length type, this is not possible.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:150,simpl,simple,150,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,"/// EmitLoadOfScalar - Load a scalar value from an address, taking; /// care to appropriately convert from the memory representation to; /// the LLVM value representation. The l-value must be a simple; /// l-value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:194,simpl,simple,194,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,"/// EmitPointerWithAlignment - Given an expression with a pointer type,; /// emit the value and compute our best estimate of the alignment of the; /// pointee.; ///; /// \param BaseInfo - If non-null, this will be initialized with; /// information about the source of the alignment and the may-alias; /// attribute. Note that this function will conservatively fall back on; /// the type when it doesn't recognize the expression and may-alias will; /// be set to false.; ///; /// One reasonable way to use this information is when there's a language; /// guarantee that the pointer must be aligned to some stricter value, and; /// we're simply trying to ensure that sufficiently obvious uses of under-; /// aligned objects don't get miscompiled; for example, a placement new; /// into the address of a local variable. In such a case, it's quite; /// reasonable to just ignore the returned alignment when it isn't from an; /// explicit source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:636,simpl,simply,636,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simply']
Usability,"/// EmitPrintInstruction - Generate the code for the ""printInstruction"" method; /// implementation. Destroys all instances of AsmWriterInst information, by; /// clearing the Instructions vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:161,clear,clearing,161,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,1,['clear'],['clearing']
Usability,"/// EmitSimpleStmt - Try to emit a ""simple"" statement which does not; /// necessarily require an insertion point or debug information; typically; /// because the statement amounts to a jump or a container of other; /// statements.; ///; /// \return True if the statement was handled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:36,simpl,simple,36,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,"/// EmitStmt - Emit the code for the statement \arg S. It is legal to call; /// this function even if there is no current insertion point.; ///; /// This function may clear the current insertion point; callers should use; /// EnsureInsertPoint if they wish to subsequently generate code without first; /// calling EmitBlock, EmitBranch, or EmitStmt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:167,clear,clear,167,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['clear'],['clear']
Usability,"/// EmitStoreOfScalar - Store a scalar value to an address, taking; /// care to appropriately convert from the memory representation to; /// the LLVM value representation. The l-value must be a simple; /// l-value. The isInit flag indicates whether this is an initialization.; /// If so, atomic qualifiers are ignored and the store is always non-atomic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:194,simpl,simple,194,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simple']
Usability,/// Emits a simple call (never an invoke) to the given no-arguments; /// runtime function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:12,simpl,simple,12,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['simpl'],['simple']
Usability,/// Emits a simple call (never an invoke) to the given runtime function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:12,simpl,simple,12,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['simpl'],['simple']
Usability,"/// Emits a try / catch statement. This function is intended to be called by; /// subclasses, and provides a generic mechanism for generating these, which; /// should be usable by all runtimes. The caller must provide the functions; /// to call when entering and exiting a \@catch() block, and the function; /// used to rethrow exceptions. If the begin and end catch functions are; /// NULL, then the function assumes that the EH personality function provides; /// the thrown object directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:170,usab,usable,170,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,1,['usab'],['usable']
Usability,"/// Emits an S_END, S_INLINESITE_END, or S_PROC_ID_END record. These records; /// are empty, so we emit them with a simpler assembly sequence that doesn't; /// involve labels.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:116,simpl,simpler,116,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,1,['simpl'],['simpler']
Usability,"/// Emits inlined function for the specified OpenMP parallel; // directive.; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:417,simpl,simple,417,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['simpl'],['simple']
Usability,"/// Emits inlined function for the specified OpenMP teams; // directive.; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:414,simpl,simple,414,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['simpl'],['simple']
Usability,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:471,simpl,simple,471,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['simpl'],['simple']
Usability,"/// Emits outlined function for the specified OpenMP parallel directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:413,simpl,simple,413,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['simpl'],['simple']
Usability,"/// Emits outlined function for the specified OpenMP teams directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:410,simpl,simple,410,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['simpl'],['simple']
Usability,/// Emitter methods for OpenMP directives.; ///; ///{; /// Generator for '#omp barrier'; ///; /// \param Loc The location where the barrier directive was encountered.; /// \param DK The kind of directive that caused the barrier.; /// \param ForceSimpleCall Flag to force a simple (=non-cancellation) barrier.; /// \param CheckCancelFlag Flag to indicate a cancel barrier return value; /// should be checked and acted upon.; ///; /// \returns The insertion point after the barrier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:273,simpl,simple,273,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['simpl'],['simple']
Usability,"/// Encodes a location in the source. The SourceManager can decode this; /// to get at the full include stack, line and column information.; ///; /// Technically, a source location is simply an offset into the manager's view; /// of the input source, which is all input buffers (including macro; /// expansions) concatenated in an effectively arbitrary order. The manager; /// actually maintains two blocks of input buffers. One, starting at offset; /// 0 and growing upwards, contains all buffers from this module. The other,; /// starting at the highest possible offset and growing downwards, contains; /// buffers of loaded modules.; ///; /// In addition, one bit of SourceLocation is used for quick access to the; /// information whether the location is in a file or a macro expansion.; ///; /// It is important that this type remains small. It is currently 32 bits wide.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h:184,simpl,simply,184,interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,1,['simpl'],['simply']
Usability,"/// EnsureInsertPoint - Ensure that an insertion point is defined so that; /// emitted IR has a place to go. Note that by definition, if this function; /// creates a block then that block is unreachable; callers may do better to; /// detect when no insertion point is defined and simply skip IR generation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:280,simpl,simply,280,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['simpl'],['simply']
Usability,/// Entries are stored into the StringMap and simply linked together through; /// the second element of this pair in order to keep track of insertion; /// order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h:46,simpl,simply,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h,1,['simpl'],['simply']
Usability,"/// EquivalenceClasses - This represents a collection of equivalence classes and; /// supports three efficient operations: insert an element into a class of its; /// own, union two classes, and find the class for a given element. In; /// addition to these modification methods, it is possible to iterate over all; /// of the equivalence classes and all of the elements in a class.; ///; /// This implementation is an efficient implementation that only stores one copy; /// of the element being indexed per entry in the set, and allows any arbitrary; /// type to be indexed (as long as it can be ordered with operator< or a; /// comparator is provided).; ///; /// Here is a simple example using integers:; ///; /// \code; /// EquivalenceClasses<int> EC;; /// EC.unionSets(1, 2); // insert 1, 2 into the same set; /// EC.insert(4); EC.insert(5); // insert 4, 5 into own sets; /// EC.unionSets(5, 1); // merge the set for 1 with 5's set.; ///; /// for (EquivalenceClasses<int>::iterator I = EC.begin(), E = EC.end();; /// I != E; ++I) { // Iterate over all of the equivalence sets.; /// if (!I->isLeader()) continue; // Ignore non-leader sets.; /// for (EquivalenceClasses<int>::member_iterator MI = EC.member_begin(I);; /// MI != EC.member_end(); ++MI) // Loop over members in this set.; /// cerr << *MI << "" ""; // Print member.; /// cerr << ""\n""; // Finish set.; /// }; /// \endcode; ///; /// This example prints:; /// 4; /// 5 1 2; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h:673,simpl,simple,673,interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/EquivalenceClasses.h,1,['simpl'],['simple']
Usability,"/// Equivalent to ::exit(), except when running inside a CrashRecoveryContext.; /// In that case, the control flow will resume after RunSafely(), like for a; /// crash, rather than exiting the current process.; /// Use \arg NoCleanup for calling _exit() instead of exit().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:120,resume,resume,120,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h,1,['resume'],['resume']
Usability,"/// Evaluates a given SVal by recursively evaluating and simplifying the; /// children SVals, then returns its maximal possible (integer) value. If the; /// constraint manager cannot provide a meaningful answer, this returns NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:57,simpl,simplifying,57,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['simpl'],['simplifying']
Usability,"/// Evaluates a given SVal by recursively evaluating and simplifying the; /// children SVals, then returns its minimal possible (integer) value. If the; /// constraint manager cannot provide a meaningful answer, this returns NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:57,simpl,simplifying,57,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['simpl'],['simplifying']
Usability,"/// Evaluates a given SVal by recursively evaluating and; /// simplifying the children SVals. If the SVal has only one possible; /// (integer) value, that value is returned. Otherwise, returns NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:62,simpl,simplifying,62,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['simpl'],['simplifying']
Usability,"/// Evaluates if the specified FP class test is better performed as the inverse; /// (i.e. fewer instructions should be required to lower it). An example is the; /// test ""inf|normal|subnormal|zero"", which is an inversion of ""nan"".; /// \param Test The test as specified in 'is_fpclass' intrinsic invocation.; /// \returns The inverted test, or fcNone, if inversion does not produce a; /// simpler test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h:390,simpl,simpler,390,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,1,['simpl'],['simpler']
Usability,"/// Every conversion starts with an empty working storage, as it is not; /// clear if this is a requirement of the YAML parser.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:77,clear,clear,77,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,1,['clear'],['clear']
Usability,/// Expand a CMP_SWAP pseudo-inst to an ldrex/strex loop as simply as; /// possible. This only gets used at -O0 so we don't care about efficiency of; /// the generated code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp:60,simpl,simply,60,interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,1,['simpl'],['simply']
Usability,"/// ExpandShiftWithKnownAmountBit - Try to determine whether we can simplify; /// this shift based on knowledge of the high bit of the shift amount. If we; /// can tell this, we know that it is >= 32 or < 32, without knowing the actual; /// shift amount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:68,simpl,simplify,68,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['simpl'],['simplify']
Usability,"/// Expander that simply annotates each scheduled instruction with a post-instr; /// symbol that can be consumed by the ModuloScheduleTest pass.; ///; /// The post-instr symbol is a way of annotating an instruction that can be; /// roundtripped in MIR. The syntax is:; /// MYINST %0, post-instr-symbol <mcsymbol Stage-1_Cycle-5>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:18,simpl,simply,18,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,1,['simpl'],['simply']
Usability,"/// Expands a pointer to the containing array, undoing narrowing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:47,undo,undoing,47,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,1,['undo'],['undoing']
Usability,"/// Exports all arrays in this RooVectorDataStore into a simple datastructure; /// to be used by RooFit internal export functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx:57,simpl,simple,57,roofit/roofitcore/src/RooVectorDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx,1,['simpl'],['simple']
Usability,/// Expose the underlying MapEntry to simplify packing in a PointerIntPair or; /// PointerUnion and allow construction in Optional.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:38,simpl,simplify,38,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,1,['simpl'],['simplify']
Usability,"/// Expression is a Null pointer constant built from a zero integer; /// expression that is not a simple, possibly parenthesized, zero literal.; /// C++ Core Issue 903 will classify these expressions as ""not pointers""; /// once it is adopted.; /// http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#903",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:98,simpl,simple,98,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['simpl'],['simple']
Usability,"/// ExternalASTSource implementation that merges information from several; /// ASTContexts.; ///; /// ExternalASTMerger maintains a vector of ASTImporters that it uses to import; /// (potentially incomplete) Decls and DeclContexts from the source ASTContexts; /// in response to ExternalASTSource API calls.; ///; /// When lookup occurs in the resulting imported DeclContexts, the original; /// DeclContexts need to be queried. Roughly, there are three cases here:; ///; /// - The DeclContext of origin can be found by simple name lookup. In this; /// case, no additional state is required.; ///; /// - The DeclContext of origin is different from what would be found by name; /// lookup. In this case, Origins contains an entry overriding lookup and; /// specifying the correct pair of DeclContext/ASTContext.; ///; /// - The DeclContext of origin was determined by another ExternalASTMerger.; /// (This is possible when the source ASTContext for one of the Importers has; /// its own ExternalASTMerger). The origin must be properly forwarded in this; /// case.; ///; /// ExternalASTMerger's job is to maintain the data structures necessary to; /// allow this. The data structures themselves can be extracted (read-only) and; /// copied for re-use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:519,simpl,simple,519,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,1,['simpl'],['simple']
Usability,"/// Extract branch weights attatched to an Instruction; ///; /// \param I The Instruction to extract weights from.; /// \param [out] Weights An output vector to fill with branch weights; /// \returns True if weights were extracted, False otherwise. When false Weights; /// will be cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h:281,clear,cleared,281,interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,1,['clear'],['cleared']
Usability,"/// Extract branch weights from MD_prof metadata; ///; /// \param ProfileData A pointer to an MDNode.; /// \param [out] Weights An output vector to fill with branch weights; /// \returns True if weights were extracted, False otherwise. When false Weights; /// will be cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h:268,clear,cleared,268,interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,1,['clear'],['cleared']
Usability,"/// Fast multiset implementation for objects that can be identified by small; /// unsigned keys.; ///; /// SparseMultiSet allocates memory proportional to the size of the key; /// universe, so it is not recommended for building composite data structures.; /// It is useful for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseMultiSet provides constant-time; /// fast clear() as fast as a vector. The find(), insert(), and erase(); /// operations are all constant time, and typically faster than a hash table.; /// The iteration order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:429,clear,clear,429,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,2,['clear'],['clear']
Usability,"/// FileOutputBuffer - This interface provides simple way to create an in-memory; /// buffer which will be written to a file. During the lifetime of these; /// objects, the content or existence of the specified file is undefined. That; /// is, creating an OutputBuffer for a file may immediately remove the file.; /// If the FileOutputBuffer is committed, the target file's content will become; /// the buffer content at the time of the commit. If the FileOutputBuffer is; /// not committed, the file will be deleted in the FileOutputBuffer destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h:47,simpl,simple,47,interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileOutputBuffer.h,1,['simpl'],['simple']
Usability,"/// FileRemover - This class is a simple object meant to be stack allocated.; /// If an exception is thrown from a region, the object removes the filename; /// specified (if deleteIt is true).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h:34,simpl,simple,34,interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileUtilities.h,1,['simpl'],['simple']
Usability,/// Fill the placeholders with values from predecessors and simplify them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:60,simpl,simplify,60,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['simpl'],['simplify']
Usability,"/// Filter out invalid ranges, ranges that don't fit into the window of; /// source lines we will print, and ranges from other files.; ///; /// For the remaining ranges, convert them to simple LineRange structs,; /// which only cover one line at a time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp:186,simpl,simple,186,interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/TextDiagnostic.cpp,1,['simpl'],['simple']
Usability,/// Finalizes the AST reader's state before writing an AST file to; /// disk.; ///; /// This operation may undo temporary state in the AST that should not be; /// emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:107,undo,undo,107,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['undo'],['undo']
Usability,"/// Find a DeclRefExpr in the given expression.; ///; /// In its most basic form (ShouldRetrieveFromComparisons == false),; /// this function can be simply reduced to the following question:; ///; /// - If expression E is used as a function argument, could we say; /// that DeclRefExpr nested in E is used as an argument?; ///; /// According to this rule, we can say that parens, casts and dereferencing; /// (dereferencing only applied to function pointers, but this is our case); /// can be skipped.; ///; /// When we should look into comparisons the question changes to:; ///; /// - If expression E is used as a condition, could we say that; /// DeclRefExpr is being checked?; ///; /// And even though, these are two different questions, they have quite a lot; /// in common. Actually, we can say that whatever expression answers; /// positively the first question also fits the second question as well.; ///; /// In addition, we skip binary operators == and !=, and unary opeartor !.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:149,simpl,simply,149,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['simpl'],['simply']
Usability,"/// Find and suggest a usable module for the given file, which is part of; /// the specified framework.; ///; /// \return \c true if the file can be used, \c false if we are not permitted to; /// find this file due to requirements from \p RequestingModule.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:23,usab,usable,23,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,1,['usab'],['usable']
Usability,"/// Find and suggest a usable module for the given file.; ///; /// \return \c true if the file can be used, \c false if we are not permitted to; /// find this file due to requirements from \p RequestingModule.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h:23,usab,usable,23,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearch.h,1,['usab'],['usable']
Usability,"/// Find matching pairs of integer div/rem ops (they have the same numerator,; /// denominator, and signedness). If they exist in different basic blocks, bring; /// them together by hoisting or replace the common division operation that is; /// implicit in the remainder:; /// X % Y <--> X - ((X / Y) * Y).; ///; /// We can largely ignore the normal safety and cost constraints on speculation; /// of these ops when we find a matching pair. This is because we are already; /// guaranteed that any exceptions and most cost are already incurred by the; /// first member of the pair.; ///; /// Note: This transform could be an oddball enhancement to EarlyCSE, GVN, or; /// SimplifyCFG, but it's split off on its own because it's different enough; /// that it doesn't quite match the stated objectives of those passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp:670,Simpl,SimplifyCFG,670,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,1,['Simpl'],['SimplifyCFG']
Usability,"/// Find program using shell lookup rules.; /// @param Program This is either an absolute path, relative path, or simple a; /// program name. Look in PATH for any programs that match. If no; /// extension is present, try all extensions in PATHEXT.; /// @return If ec == errc::success, The absolute path to the program. Otherwise; /// the return value is undefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:114,simpl,simple,114,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,1,['simpl'],['simple']
Usability,"/// Find the summary for global \p GUID in module \p ModuleId, or nullptr if; /// not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:35,GUID,GUID,35,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,"/// Find the use index of this operand. This is independent of the instruction's; /// def operands.; ///; /// Note that uses are not determined by the operand's isUse property, which; /// is simply the inverse of isDef. Here we consider any readsReg operand to be; /// a ""use"". The machine model allows an operand to be both a Def and Use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetSchedule.cpp:191,simpl,simply,191,interpreter/llvm-project/llvm/lib/CodeGen/TargetSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetSchedule.cpp,1,['simpl'],['simply']
Usability,"/// FindDominators - Calculate the dominator tree for the subset of the CFG; /// corresponding to the basic blocks on the BlockList. This uses the; /// algorithm from: ""A Simple, Fast Dominance Algorithm"" by Cooper, Harvey; /// and Kennedy, published in Software--Practice and Experience, 2001,; /// 4:1-10. Because the CFG subset does not include any edges leading into; /// blocks that define the value, the results are not the usual dominator; /// tree. The CFG subset has a single pseudo-entry node with edges to a set; /// of root nodes for blocks that define the value. The dominators for this; /// subset CFG are not the standard dominators but they are adequate for; /// placing PHIs within the subset CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterImpl.h:171,Simpl,Simple,171,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterImpl.h,1,['Simpl'],['Simple']
Usability,"/// Finds the smallest simple value type that is greater than or equal to; /// half the width of this EVT. If no simple value type can be found, an; /// extended integer value type of half the size (rounded up) is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:23,simpl,simple,23,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,2,['simpl'],['simple']
Usability,"/// Fix-its that *must* be applied before inserting the text for the; /// corresponding completion.; ///; /// By default, CodeCompletionBuilder only returns completions with empty; /// fix-its. Extra completions with non-empty fix-its should be explicitly; /// requested by setting CompletionOptions::IncludeFixIts.; ///; /// For the clients to be able to compute position of the cursor after; /// applying fix-its, the following conditions are guaranteed to hold for; /// RemoveRange of the stored fix-its:; /// - Ranges in the fix-its are guaranteed to never contain the completion; /// point (or identifier under completion point, if any) inside them, except; /// at the start or at the end of the range.; /// - If a fix-it range starts or ends with completion point (or starts or; /// ends after the identifier under completion point), it will contain at; /// least one character. It allows to unambiguously recompute completion; /// point after applying the fix-it.; ///; /// The intuition is that provided fix-its change code around the identifier; /// we complete, but are not allowed to touch the identifier itself or the; /// completion point. One example of completions with corrections are the ones; /// replacing '.' with '->' and vice versa:; ///; /// std::unique_ptr<std::vector<int>> vec_ptr;; /// In 'vec_ptr.^', one of the completions is 'push_back', it requires; /// replacing '.' with '->'.; /// In 'vec_ptr->^', one of the completions is 'release', it requires; /// replacing '->' with '.'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:985,intuit,intuition,985,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['intuit'],['intuition']
Usability,"/// Fixup any string and file references by updating any file indexes and; /// strings offsets in the InlineInfo parameter.; ///; /// When copying InlineInfo entries, we can simply make a copy of the object; /// and then fixup the files and strings for efficiency.; ///; /// \param SrcGC The source gsym creator to copy from.; /// \param II The inline info that contains file indexes and string offsets; /// that come from \a SrcGC. The entries will be updated by coping any files; /// and strings over into this object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:174,simpl,simply,174,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,1,['simpl'],['simply']
Usability,"/// Fixup the wrapped LCSSA phi node in the unique exit block. This simply; /// means we need to add the appropriate incoming value from the middle; /// block as exiting edges from the scalar epilogue loop (if present) are; /// already in place, and we exit the vector loop exclusively to the middle; /// block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:68,simpl,simply,68,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['simpl'],['simply']
Usability,"/// Flag indicating which LTO/ThinLTO phase the pass is invoked in.; ///; /// We need to know the LTO phase because for example in ThinLTOPrelink; /// phase, in annotation, we should not promote indirect calls. Instead,; /// we will mark GUIDs that needs to be annotated to the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp:238,GUID,GUIDs,238,interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,1,['GUID'],['GUIDs']
Usability,/// Fold input unicode character according the Simple unicode case folding; /// rules.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h:47,Simpl,Simple,47,interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Unicode.h,1,['Simpl'],['Simple']
Usability,"/// Fold the loop tail into the loop exit by speculating the loop tail; /// instructions. Typically, this is a single post-increment. In the case of a; /// simple 2-block loop, hoisting the increment can be much better than; /// duplicating the entire loop header. In the case of loops with early exits,; /// rotation will not work anyway, but simplifyLoopLatch will put the loop in; /// canonical form so downstream passes can handle it.; ///; /// I don't believe this invalidates SCEV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:156,simpl,simple,156,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,2,['simpl'],"['simple', 'simplifyLoopLatch']"
Usability,/// Folds SimpleDeclarator node (if present) and in case this is the last; /// declarator in the chain it also folds SimpleDeclaration node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:10,Simpl,SimpleDeclarator,10,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,2,['Simpl'],"['SimpleDeclaration', 'SimpleDeclarator']"
Usability,"/// For SM_Size mode, find a common dominator for all the back-copies for; /// the same ParentVNI and hoist the backcopies to the dominator BB.; /// For SM_Speed mode, if the common dominator is hot and it is not beneficial; /// to do the hoisting, simply remove the dominated backcopies for the same; /// ParentVNI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp:249,simpl,simply,249,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,1,['simpl'],['simply']
Usability,"/// For Verilog, put each port on its own line in module instantiations.; /// \code; /// true:; /// ffnand ff1(.q(),; /// .qbar(out1),; /// .clear(in1),; /// .preset(in2));; ///; /// false:; /// ffnand ff1(.q(), .qbar(out1), .clear(in1), .preset(in2));; /// \endcode; /// \version 17",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:141,clear,clear,141,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['clear'],['clear']
Usability,"/// For a binary operator with 2 phi operands, try to hoist the binary; /// operation before the phi. This can result in fewer instructions in; /// patterns where at least one set of phi operands simplifies.; /// Example:; /// BB3: binop (phi [X, BB1], [C1, BB2]), (phi [Y, BB1], [C2, BB2]); /// -->; /// BB1: BO = binop X, Y; /// BB3: phi [BO, BB1], [(binop C1, C2), BB2]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:196,simpl,simplifies,196,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['simpl'],['simplifies']
Usability,"/// For a given value or instruction, figure out what base ptr its derived from.; /// For gc objects, this is simply itself. On success, returns a value which is; /// the base pointer. (This is reliable and can be used for relocation.) On; /// failure, returns nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:110,simpl,simply,110,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['simpl'],['simply']
Usability,"/// For a simple ``noexcept`` there is no line break allowed, but when we; /// have a condition it is.; /// \code; /// void foo(int arg1,; /// double arg2) noexcept;; ///; /// void bar(int arg1, double arg2); /// noexcept(noexcept(baz(arg1)) &&; /// noexcept(baz(arg2)));; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,simpl,simple,10,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['simpl'],['simple']
Usability,"/// For all PatFragPatterns, add a new entry in PatternAlternatives for each; /// PatternList it contains. This is multiplicative, so if we have 2; /// PatFrags with 3 alternatives each, we get 2*3 permutations added to; /// PermutationsToEmit. The ""MaxPermutations"" field controls how many; /// permutations are allowed before an error is emitted and this function; /// returns false. This is a simple safeguard to prevent combination of; /// PatFrags from generating enormous amounts of rules.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:396,simpl,simple,396,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,1,['simpl'],['simple']
Usability,"/// For each 16-bit integer in the first source operand, perform one of; /// the following actions as specified by the second source operand.; ///; /// If the word in the second source is negative, calculate the two's; /// complement of the corresponding word in the first source, and write that; /// value to the destination. If the word in the second source is positive,; /// copy the corresponding word from the first source to the destination. If; /// the word in the second source is zero, clear the corresponding word in; /// the destination.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c PSIGNW instruction.; ///; /// \param __a; /// A 64-bit integer vector containing the values to be copied.; /// \param __b; /// A 64-bit integer vector containing control words corresponding to; /// positions in the destination.; /// \returns A 64-bit integer vector containing the resultant values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h:495,clear,clear,495,interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,1,['clear'],['clear']
Usability,"/// For each 16-bit integer in the first source operand, perform one of; /// the following actions as specified by the second source operand.; ///; /// If the word in the second source is negative, calculate the two's; /// complement of the corresponding word in the first source, and write that; /// value to the destination. If the word in the second source is positive,; /// copy the corresponding word from the first source to the destination. If; /// the word in the second source is zero, clear the corresponding word in; /// the destination.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c VPSIGNW instruction.; ///; /// \param __a; /// A 128-bit integer vector containing the values to be copied.; /// \param __b; /// A 128-bit integer vector containing control words corresponding to; /// positions in the destination.; /// \returns A 128-bit integer vector containing the resultant values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h:495,clear,clear,495,interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,1,['clear'],['clear']
Usability,"/// For each 32-bit integer in the first source operand, perform one of; /// the following actions as specified by the second source operand.; ///; /// If the doubleword in the second source is negative, calculate the two's; /// complement of the corresponding doubleword in the first source, and; /// write that value to the destination. If the doubleword in the second; /// source is positive, copy the corresponding doubleword from the first; /// source to the destination. If the doubleword in the second source is; /// zero, clear the corresponding doubleword in the destination.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c PSIGND instruction.; ///; /// \param __a; /// A 64-bit integer vector containing the values to be copied.; /// \param __b; /// A 64-bit integer vector containing two control doublewords corresponding; /// to positions in the destination.; /// \returns A 64-bit integer vector containing the resultant values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h:530,clear,clear,530,interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,1,['clear'],['clear']
Usability,"/// For each 32-bit integer in the first source operand, perform one of; /// the following actions as specified by the second source operand.; ///; /// If the doubleword in the second source is negative, calculate the two's; /// complement of the corresponding word in the first source, and write that; /// value to the destination. If the doubleword in the second source is; /// positive, copy the corresponding word from the first source to the; /// destination. If the doubleword in the second source is zero, clear the; /// corresponding word in the destination.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c VPSIGND instruction.; ///; /// \param __a; /// A 128-bit integer vector containing the values to be copied.; /// \param __b; /// A 128-bit integer vector containing control doublewords corresponding to; /// positions in the destination.; /// \returns A 128-bit integer vector containing the resultant values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h:513,clear,clear,513,interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,1,['clear'],['clear']
Usability,"/// For each 8-bit integer in the first source operand, perform one of; /// the following actions as specified by the second source operand.; ///; /// If the byte in the second source is negative, calculate the two's; /// complement of the corresponding byte in the first source, and write that; /// value to the destination. If the byte in the second source is positive,; /// copy the corresponding byte from the first source to the destination. If; /// the byte in the second source is zero, clear the corresponding byte in; /// the destination.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c PSIGNB instruction.; ///; /// \param __a; /// A 64-bit integer vector containing the values to be copied.; /// \param __b; /// A 64-bit integer vector containing control bytes corresponding to; /// positions in the destination.; /// \returns A 64-bit integer vector containing the resultant values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h:494,clear,clear,494,interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,1,['clear'],['clear']
Usability,"/// For each 8-bit integer in the first source operand, perform one of; /// the following actions as specified by the second source operand.; ///; /// If the byte in the second source is negative, calculate the two's; /// complement of the corresponding byte in the first source, and write that; /// value to the destination. If the byte in the second source is positive,; /// copy the corresponding byte from the first source to the destination. If; /// the byte in the second source is zero, clear the corresponding byte in; /// the destination.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c VPSIGNB instruction.; ///; /// \param __a; /// A 128-bit integer vector containing the values to be copied.; /// \param __b; /// A 128-bit integer vector containing control bytes corresponding to; /// positions in the destination.; /// \returns A 128-bit integer vector containing the resultant values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h:494,clear,clear,494,interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tmmintrin.h,1,['clear'],['clear']
Usability,"/// For each feature that (transitively) implies this feature, clear it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSubtargetInfo.cpp:63,clear,clear,63,interpreter/llvm-project/llvm/lib/MC/MCSubtargetInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSubtargetInfo.cpp,1,['clear'],['clear']
Usability,"/// For each tag symbol name, associate the corresponding; /// AsyncHandlerWrapperFunction with the address of that symbol. The; /// handler becomes callable from the executor using the ORC runtime; /// __orc_rt_jit_dispatch function and the given tag.; ///; /// Tag symbols will be looked up in JD using LookupKind::Static,; /// JITDylibLookupFlags::MatchAllSymbols (hidden tags will be found), and; /// LookupFlags::WeaklyReferencedSymbol. Missing tag definitions will not; /// cause an error, the handler will simply be dropped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:513,simpl,simply,513,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['simpl'],['simply']
Usability,"/// For simple types, ignore the mask and memcopy the values into the destination",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx:8,simpl,simple,8,tree/ntuple/v7/src/RField.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx,1,['simpl'],['simple']
Usability,"/// For simple use cases, survives without libRIO dependency",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx:8,simpl,simple,8,tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,1,['simpl'],['simple']
Usability,"/// For some targets, an LLVM struct type must be broken down into multiple; /// simple types, but the calling convention specifies that the entire struct; /// must be passed in a block of consecutive registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:81,simpl,simple,81,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['simpl'],['simple']
Usability,/// For the given set of PHI nodes (in the SimplificationTracker) try; /// to find their equivalents.; /// Returns false if this matching fails and creation of new Phi is disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:43,Simpl,SimplificationTracker,43,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['Simpl'],['SimplificationTracker']
Usability,"/// For the instruction sequence of store below, F and I values; /// are bundled together as an i64 value before being stored into memory.; /// Sometimes it is more efficent to generate separate stores for F and I,; /// which can remove the bitwise instructions or sink them to colder places.; ///; /// (store (or (zext (bitcast F to i32) to i64),; /// (shl (zext I to i64), 32)), addr) -->; /// (store F, addr) and (store I, addr+4); ///; /// Similarly, splitting for other merged store can also be beneficial, like:; /// For pair of {i32, i32}, i64 store --> two i32 stores.; /// For pair of {i32, i16}, i64 store --> two i32 stores.; /// For pair of {i16, i16}, i32 store --> two i16 stores.; /// For pair of {i16, i8}, i32 store --> two i16 stores.; /// For pair of {i8, i8}, i16 store --> two i8 stores.; ///; /// We allow each target to determine specifically which kind of splitting is; /// supported.; ///; /// The store patterns are commonly seen from the simple code snippet below; /// if only std::make_pair(...) is sroa transformed before inlined into hoo.; /// void goo(const std::pair<int, float> &);; /// hoo() {; /// ...; /// goo(std::make_pair(tmp, ftmp));; /// ...; /// }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:965,simpl,simple,965,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['simpl'],['simple']
Usability,"/// For the instruction sequence of store below, F and I values; /// are bundled together as an i64 value before being stored into memory.; /// Sometimes it is more efficient to generate separate stores for F and I,; /// which can remove the bitwise instructions or sink them to colder places.; ///; /// (store (or (zext (bitcast F to i32) to i64),; /// (shl (zext I to i64), 32)), addr) -->; /// (store F, addr) and (store I, addr+4); ///; /// Similarly, splitting for other merged store can also be beneficial, like:; /// For pair of {i32, i32}, i64 store --> two i32 stores.; /// For pair of {i32, i16}, i64 store --> two i32 stores.; /// For pair of {i16, i16}, i32 store --> two i16 stores.; /// For pair of {i16, i8}, i32 store --> two i16 stores.; /// For pair of {i8, i8}, i16 store --> two i8 stores.; ///; /// We allow each target to determine specifically which kind of splitting is; /// supported.; ///; /// The store patterns are commonly seen from the simple code snippet below; /// if only std::make_pair(...) is sroa transformed before inlined into hoo.; /// void goo(const std::pair<int, float> &);; /// hoo() {; /// ...; /// goo(std::make_pair(tmp, ftmp));; /// ...; /// }; ///; /// Although we already have similar splitting in DAG Combine, we duplicate; /// it in CodeGenPrepare to catch the case in which pattern is across; /// multiple BBs. The logic in DAG Combine is kept to catch case generated; /// during code expansion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:966,simpl,simple,966,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['simpl'],['simple']
Usability,"/// For the simplest cases, a C file stream can be used for writing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx:12,simpl,simplest,12,tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,1,['simpl'],['simplest']
Usability,"/// Formats the line, simply keeping all of the input's line breaking; /// decisions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp:22,simpl,simply,22,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,1,['simpl'],['simply']
Usability,"/// Forward the 'resume' instruction to the caller's landing pad block.; /// When the landing pad block has only one predecessor, this is a simple; /// branch. When there is more than one predecessor, we need to split the; /// landing pad block after the landingpad instruction and jump to there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:17,resume,resume,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,2,"['resume', 'simpl']","['resume', 'simple']"
Usability,"/// Forward the 'resume' instruction to the caller's landing pad block.; /// When the landing pad block has only one predecessor, this is; /// a simple branch. When there is more than one predecessor, we need to; /// split the landing pad block after the landingpad instruction and jump; /// to there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:17,resume,resume,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,2,"['resume', 'simpl']","['resume', 'simple']"
Usability,"/// Full match routine; ///; /// Fast implementation for the simple case of a named declaration at; /// namespace or RecordDecl scope.; /// It is slower than matchesNodeUnqualified, but faster than; /// matchesNodeFullSlow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:61,simpl,simple,61,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['simpl'],['simple']
Usability,/// Full match routine; ///; /// It generates the fully qualified name of the declaration (which is; /// expensive) before trying to match.; /// It is slower but simple and works on all cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:162,simpl,simple,162,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['simpl'],['simple']
Usability,"/// Function to fill tuples (TNtuple/TNtupleD) from; /// a simple ASCII data file. With auto and decltype - we can; /// get rid of DataType parameter :) (or with a simple typedef inside ntuple class).; /// An input file consists of non-empty lines (separated by newline-characters), possibly empty lines,; /// and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple.; /// Non-strict mode lets you to have newline-characters inside a tuple's row (as it worked; /// in ROOT prior to v5.3xxx).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TreeUtils.h:59,simpl,simple,59,tree/tree/inc/TreeUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TreeUtils.h,2,['simpl'],['simple']
Usability,/// GUID map iterators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:4,GUID,GUID,4,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,1,['GUID'],['GUID']
Usability,/// GUIDMap - The slot map for GUIDs used in the summary index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:4,GUID,GUIDMap,4,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,2,['GUID'],"['GUIDMap', 'GUIDs']"
Usability,"/// GUIDToFuncNameMap saves the mapping from GUID to the symbol name, for; /// all the function symbols defined or declared in current module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:4,GUID,GUIDToFuncNameMap,4,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,2,['GUID'],"['GUID', 'GUIDToFuncNameMap']"
Usability,/// Gather all the definitions dominating the start of BB into Result. This is; /// simply the defs introduced by every dominating basic block and the; /// function arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:84,simpl,simply,84,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,1,['simpl'],['simply']
Usability,/// Gather the terms of the expression tree for processing.; ///; /// This collects each addition and subtraction referenced by the counter into; /// a sequence that can be sorted and combined to build a simplified counter; /// expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:204,simpl,simplified,204,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['simpl'],['simplified']
Usability,/// Generate Phis for the specific block in the generated pipelined code.; /// This function looks at the Phis from the original code to guide the; /// creation of new Phis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:137,guid,guide,137,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['guid'],['guide']
Usability,/// Generate a DAG to grab 128-bits from a vector > 128 bits. This; /// sets things up to match to an AVX VEXTRACTF128 / VEXTRACTI128; /// or AVX-512 VEXTRACTF32x4 / VEXTRACTI32x4; /// instructions or a simple subregister reference. Idx is an index in the; /// 128 bits we want. It need not be aligned to a 128-bit boundary. That makes; /// lowering EXTRACT_VECTOR_ELT operations easier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:203,simpl,simple,203,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simple']
Usability,/// Generate a DAG to put 128-bits into a vector > 128 bits. This; /// sets things up to match to an AVX VINSERTF128/VINSERTI128 or; /// AVX-512 VINSERTF32x4/VINSERTI32x4 instructions or a; /// simple superregister reference. Idx is an index in the 128 bits; /// we want. It need not be aligned to a 128-bit boundary. That makes; /// lowering INSERT_VECTOR_ELT operations easier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:194,simpl,simple,194,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simple']
Usability,/// Generate a barrier runtime call.; ///; /// \param Loc The location at which the request originated and is fulfilled.; /// \param DK The directive which caused the barrier; /// \param ForceSimpleCall Flag to force a simple (=non-cancellation) barrier.; /// \param CheckCancelFlag Flag to indicate a cancel barrier return value; /// should be checked and acted upon.; ///; /// \returns The insertion point after the barrier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:219,simpl,simple,219,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['simpl'],['simple']
Usability,"/// Generate branch weight metadata for all branches in \p F.; ///; /// Branch weights are computed out of instruction samples using a; /// propagation heuristic. Propagation proceeds in 3 phases:; ///; /// 1- Assignment of block weights. All the basic blocks in the function; /// are initial assigned the same weight as their most frequently; /// executed instruction.; ///; /// 2- Creation of equivalence classes. Since samples may be missing from; /// blocks, we can fill in the gaps by setting the weights of all the; /// blocks in the same equivalence class to the same weight. To compute; /// the concept of equivalence, we use dominance and loop information.; /// Two blocks B1 and B2 are in the same equivalence class if B1; /// dominates B2, B2 post-dominates B1 and both are in the same loop.; ///; /// 3- Propagation of block weights into edges. This uses a simple; /// propagation heuristic. The following rules are applied to every; /// block BB in the CFG:; ///; /// - If BB has a single predecessor/successor, then the weight; /// of that edge is the weight of the block.; ///; /// - If all the edges are known except one, and the weight of the; /// block is already known, the weight of the unknown edge will; /// be the weight of the block minus the sum of all the known; /// edges. If the sum of all the known edges is larger than BB's weight,; /// we set the unknown edge weight to zero.; ///; /// - If there is a self-referential edge, and the weight of the block is; /// known, the weight for that edge is set to the weight of the block; /// minus the weight of the other incoming edges to that block (if; /// known).; ///; /// Since this propagation is not guaranteed to finalize for every CFG, we; /// only allow it to proceed for a limited number of iterations (controlled; /// by -sample-profile-max-propagate-iterations).; ///; /// FIXME: Try to replace this propagation heuristic with a scheme; /// that is guaranteed to finalize. A work-list approach similar to; /// the st",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h:869,simpl,simple,869,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseImpl.h,1,['simpl'],['simple']
Usability,"/// Generate s_waitcnt instruction to be placed before cur_Inst.; /// Instructions of a given type are returned in order,; /// but instructions of different types can complete out of order.; /// We rely on this in-order completion; /// and simply assign a score to the memory access instructions.; /// We keep track of the active ""score bracket"" to determine; /// if an access of a memory read requires an s_waitcnt; /// and if so what the value of each counter is.; /// The ""score bracket"" is bound by the lower bound and upper bound; /// scores (*_score_LB and *_score_ub respectively).; /// If FlushVmCnt is true, that means that we want to generate a s_waitcnt to; /// flush the vmcnt counter here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:240,simpl,simply,240,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['simpl'],['simply']
Usability,/// Generate the IR code for the vectorized loop captured in VPlan \p BestPlan; /// according to the best selected \p VF and \p UF.; ///; /// TODO: \p IsEpilogueVectorization is needed to avoid issues due to epilogue; /// vectorization re-using plans for both the main and epilogue vector loops.; /// It should be removed once the re-use issue has been fixed.; /// \p ExpandedSCEVs is passed during execution of the plan for epilogue loop; /// to re-use expansion results generated during main plan execution.; ///; /// Returns a mapping of SCEVs to their expanded IR values and a mapping for; /// the reduction resume values. Note that this is a temporary workaround; /// needed due to the current epilogue handling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h:612,resume,resume,612,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.h,1,['resume'],['resume']
Usability,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:1632,simpl,simpler,1632,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['simpl'],['simpler']
Usability,"/// Generates code to handle finally block type semantics: always runs; /// regardless of whether a thrown exception is passing through or the; /// parent function is simply exiting. In addition to printing some state; /// to stderr, this code will resume the exception handling--runs the; /// unwind resume block, if the exception has not been previously caught; /// by a catch clause, and will otherwise execute the end block (terminator; /// block). In addition this function creates the corresponding function's; /// stack storage for the exception pointer and catch flag status.; /// @param context llvm context; /// @param module code for module instance; /// @param builder builder instance; /// @param toAddTo parent function to add block to; /// @param blockName block name of new ""finally"" block.; /// @param functionId output id used for printing; /// @param terminatorBlock terminator ""end"" block; /// @param unwindResumeBlock unwind resume block; /// @param exceptionCaughtFlag reference exception caught/thrown status storage; /// @param exceptionStorage reference to exception pointer storage; /// @param caughtResultStorage reference to landingpad result storage; /// @returns newly created block",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:167,simpl,simply,167,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,4,"['resume', 'simpl']","['resume', 'simply']"
Usability,"/// Generator for `#omp task`; ///; /// \param Loc The location where the task construct was encountered.; /// \param AllocaIP The insertion point to be used for alloca instructions.; /// \param BodyGenCB Callback that will generate the region code.; /// \param Tied True if the task is tied, false if the task is untied.; /// \param Final i1 value which is `true` if the task is final, `false` if the; /// task is not final.; /// \param IfCondition i1 value. If it evaluates to `false`, an undeferred; /// task is generated, and the encountering thread must; /// suspend the current task region, for which execution; /// cannot be resumed until execution of the structured; /// block that is associated with the generated task is; /// completed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:632,resume,resumed,632,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['resume'],['resumed']
Usability,"/// Generic interface for matchers on an AST node of type T.; ///; /// Implement this if your matcher may need to inspect the children or; /// descendants of the node or bind matched nodes to names. If you are; /// writing a simple matcher that only inspects properties of the; /// current node and doesn't care about its children or descendants,; /// implement SingleNodeMatcherInterface instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:225,simpl,simple,225,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['simpl'],['simple']
Usability,"/// Generic simplifications for associative binary operations.; /// Returns the simpler value, or null if none was found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:12,simpl,simplifications,12,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['simpl'],"['simpler', 'simplifications']"
Usability,/// Get a 16-bit IEEE half value.; /// TODO: Add IEEE semantics to type - This currently returns a simple `scalar(16)`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h:99,simpl,simple,99,interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h,1,['simpl'],['simple']
Usability,"/// Get a canonical add expression, or something simpler if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:49,simpl,simpler,49,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['simpl'],['simpler']
Usability,"/// Get a canonical multiply expression, or something simpler if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:54,simpl,simpler,54,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['simpl'],['simpler']
Usability,"/// Get a canonical unsigned division expression, or something simpler if; /// possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:63,simpl,simpler,63,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['simpl'],['simpler']
Usability,"/// Get a canonical unsigned division expression, or something simpler if; /// possible. There is no representation for an exact udiv in SCEV IR, but we; /// can attempt to remove factors from the LHS and RHS. We can't do this when; /// it's not exact because the udiv may be clearing bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:63,simpl,simpler,63,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,"['clear', 'simpl']","['clearing', 'simpler']"
Usability,/// Get a color string for this node number. Simply round-robin selects; /// from a reasonable number of colors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:45,Simpl,Simply,45,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,2,['Simpl'],['Simply']
Usability,"/// Get a human-readable name for the declaration, even if it is one of the; /// special kinds of names (C++ constructor, Objective-C selector, etc).; ///; /// Creating this name requires expensive string manipulation, so it should; /// be called only when performance doesn't matter. For simple declarations,; /// getNameAsCString() should suffice.; //; // FIXME: This function should be renamed to indicate that it is not just an; // alternate form of getName(), and clients should move as appropriate.; //; // FIXME: Deprecated, move clients to getName().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:289,simpl,simple,289,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['simpl'],['simple']
Usability,"/// Get a pointer to a protocol object for the given declaration, emitting it if; /// it hasn't already been emitted in this translation unit. Note that the ABI; /// for emitting a protocol reference in code (e.g. for a protocol expression); /// in most runtimes is not as simple as just materializing a pointer to this; /// object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:273,simpl,simple,273,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,1,['simpl'],['simple']
Usability,"/// Get a reference to the ExecutionSession for this JITDylib.; ///; /// It is legal to call this method on a defunct JITDylib, however the result; /// will only usable if the ExecutionSession is still alive. If this JITDylib; /// is held by an error that may have torn down the JIT then the result; /// should not be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:162,usab,usable,162,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['usab'],['usable']
Usability,/// Get a scaled count for the minimum execution time of the scheduled; /// micro-ops that are ready to execute by getExecutedCount. Notice the; /// feedback loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:149,feedback,feedback,149,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['feedback'],['feedback']
Usability,/// Get a string that describes the type returned by getImmType() but is; /// usable as part of an identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:78,usab,usable,78,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['usab'],['usable']
Usability,"/// Get an access that keeps us from optimizing to the given phi.; ///; /// PausedSearches is an array of indices into the Paths array. Its incoming; /// value is the indices of searches that stopped at the last phi optimization; /// target. It's left in an unspecified state.; ///; /// If this returns std::nullopt, NewPaused is a vector of searches that; /// terminated at StopWhere. Otherwise, NewPaused is left in an unspecified; /// state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:76,Pause,PausedSearches,76,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['Pause'],['PausedSearches']
Usability,/// Get an add recurrence expression for the specified loop. Simplify the; /// expression as much as possible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:61,Simpl,Simplify,61,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['Simpl'],['Simplify']
Usability,"/// Get the NamedDecl through which this reference occurred.; ///; /// This Decl may be different from the ValueDecl actually referred to in the; /// presence of using declarations, etc. It always returns non-NULL, and may; /// simple return the ValueDecl when appropriate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:228,simpl,simple,228,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['simpl'],['simple']
Usability,"/// Get the actual, stored name of the declaration, which may be a special; /// name.; ///; /// Note that generally in diagnostics, the non-null \p NamedDecl* itself; /// should be sent into the diagnostic instead of using the result of; /// \p getDeclName().; ///; /// A \p DeclarationName in a diagnostic will just be streamed to the output,; /// which will directly result in a call to \p DeclarationName::print.; ///; /// A \p NamedDecl* in a diagnostic will also ultimately result in a call to; /// \p DeclarationName::print, but with two customisation points along the; /// way (\p getNameForDiagnostic and \p printName). These are used to print; /// the template arguments if any, and to provide a user-friendly name for; /// some entities (such as unnamed variables and anonymous records).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:705,user-friendly,user-friendly,705,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['user-friendly'],['user-friendly']
Usability,/// Get the address of a GUID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:25,GUID,GUID,25,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['GUID'],['GUID']
Usability,"/// Get the constructor from which this deduction guide was generated, if; /// this is an implicit deduction guide.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:50,guid,guide,50,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,2,['guid'],['guide']
Usability,/// Get the index of the first template parameter that was originally from the; /// innermost template-parameter-list. This is 0 except when we concatenate; /// the template parameter lists of a class template and a constructor template; /// when forming an implicit deduction guide.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:277,guid,guide,277,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['guid'],['guide']
Usability,/// Get the name of identifier for this declaration as a StringRef.; ///; /// This requires that the declaration have a name and that it be a simple; /// identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:142,simpl,simple,142,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['simpl'],['simple']
Usability,"/// Get the number of elements allocated. For a simple allocation of a single; /// element, this will return a constant 1 value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:48,simpl,simple,48,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['simpl'],['simple']
Usability,/// Get the template for which this guide performs deduction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:36,guid,guide,36,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['guid'],['guide']
Usability,"/// GetOrInsertNode - If there is an existing simple Node exactly; /// equal to the specified node, return it. Otherwise, insert 'N' and it; /// instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:46,simpl,simple,46,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,1,['simpl'],['simple']
Usability,"/// GetOrInsertNode - If there is an existing simple Node exactly; /// equal to the specified node, return it. Otherwise, insert 'N' and return; /// it instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:46,simpl,simple,46,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['simpl'],['simple']
Usability,"/// GetOrInsertNode - If there is an existing simple Node exactly; /// equal to the specified node, return it. Otherwise, insert 'N' and; /// return it instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:46,simpl,simple,46,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,2,['simpl'],['simple']
Usability,"/// Give a description that explains the actual argument value (where the; /// current ValueConstraint applies to) to the user. This function should be; /// called only when the current constraint is satisfied by the argument.; /// It should produce a more precise description than the constraint itself.; /// The actual value of the argument and the program state can be used to; /// make the description more precise. In the most simple case, if the; /// argument has a fixed known value this value can be printed into \p Out,; /// this is done by default.; /// The function should return true if a description was printed to \p Out,; /// otherwise false.; /// See StdLibraryFunctionsChecker::reportBug about how this function is; /// used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:432,simpl,simple,432,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['simpl'],['simple']
Usability,"/// Given a Clang driver command-line for a translation unit, gather the; /// modular dependencies and return the information needed for explicit build.; ///; /// \param AlreadySeen This stores modules which have previously been; /// reported. Use the same instance for all calls to this; /// function for a single \c DependencyScanningTool in a; /// single build. Use a different one for different tools,; /// and clear it between builds.; /// \param LookupModuleOutput This function is called to fill in; /// ""-fmodule-file="", ""-o"" and other output; /// arguments for dependencies.; ///; /// \returns a \c StringError with the diagnostic output if clang errors; /// occurred, \c TranslationUnitDeps otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h:415,clear,clear,415,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningTool.h,1,['clear'],['clear']
Usability,"/// Given a SELECT or a SELECT_CC node, where LHS and RHS are the two values; /// being selected between, see if we can simplify the select. Callers of this; /// should assume that TheSelect is deleted if this returns true. As such, they; /// should return the appropriate thing (e.g. the node) back to the top-level of; /// the DAG combiner loop to avoid it being looked at.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:120,simpl,simplify,120,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['simpl'],['simplify']
Usability,"/// Given a buildvector constant, return a new vector constant with each element; /// incremented or decremented. If incrementing or decrementing would result in; /// unsigned overflow or underflow or this is not a simple vector constant,; /// return an empty value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:215,simpl,simple,215,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simple']
Usability,"/// Given a constant index for a extractelement or insertelement instruction,; /// return it with the canonical type if it isn't already canonical. We; /// arbitrarily pick 64 bit as our canonical type. The actual bitwidth doesn't; /// matter, we just want a consistent type to simplify CSE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:278,simpl,simplify,278,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['simpl'],['simplify']
Usability,"/// Given a constrained FP intrinsic call, tries to compute its simplified; /// version. Returns a simplified result or null.; ///; /// This function provides an additional contract: it guarantees that if; /// simplification succeeds that the intrinsic is side effect free. As a result,; /// successful simplification can be used to delete the intrinsic not just; /// replace its result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:64,simpl,simplified,64,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,4,['simpl'],"['simplification', 'simplified']"
Usability,"/// Given a function info for a declaration, return the function info; /// for a call with the given arguments.; ///; /// Often this will be able to simply return the declaration info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:149,simpl,simply,149,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,1,['simpl'],['simply']
Usability,"/// Given a list of strings and code to execute when they match, output a; /// simple switch tree to classify the input string.; ///; /// If a match is found, the code in Matches[i].second is executed; control must; /// not exit this code fragment. If nothing matches, execution falls through.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/StringMatcher.h:79,simpl,simple,79,interpreter/llvm-project/llvm/include/llvm/TableGen/StringMatcher.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/StringMatcher.h,1,['simpl'],['simple']
Usability,"/// Given a predicate and two operands, return true if the comparison is true.; /// This is a helper for div/rem simplification where we return some other value; /// when we can prove a relationship between the operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:113,simpl,simplification,113,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplification']
Usability,"/// Given a pseudo-object reference, rebuild it without the opaque; /// values. Basically, undo the behavior of rebuildAndCaptureObject.; /// This should never operate in-place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp:91,undo,undo,91,interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,1,['undo'],['undo']
Usability,"/// Given a relocation_iterator for a non-scattered relocation, construct a; /// RelocationEntry and fill in the common fields. The 'Addend' field is *not*; /// filled in, since immediate encodings are highly target/opcode specific.; /// For targets/opcodes with simple, contiguous immediates (e.g. X86) the; /// memcpyAddend method can be used to read the immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldMachO.h:263,simpl,simple,263,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldMachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldMachO.h,1,['simpl'],['simple']
Usability,"/// Given a saved r-value produced by SaveRValue, perform the code; /// necessary to restore it to usability at the current insertion; /// point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:99,usab,usability,99,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,1,['usab'],['usability']
Usability,"/// Given an G_SDIV \p MI expressing a signed divide by constant, return an; /// expression that implements it by multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:208,Guid,Guide,208,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,1,['Guid'],['Guide']
Usability,"/// Given an G_UDIV \p MI expressing a divide by constant, return an; /// expression that implements it by multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:201,Guid,Guide,201,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,1,['Guid'],['Guide']
Usability,"/// Given an ISD::SDIV node expressing a divide by constant, return; /// a DAG expression to select that will generate the same value by multiplying; /// by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:236,Guid,Guide,236,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Guid'],['Guide']
Usability,"/// Given an ISD::SDIV node expressing a divide by constant,; /// return a DAG expression to select that will generate the same value by; /// multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:236,Guid,Guide,236,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['Guid'],['Guide']
Usability,"/// Given an ISD::UDIV node expressing a divide by constant, return a DAG; /// expression that will generate the same value by multiplying by a magic; /// number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:226,Guid,Guide,226,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Guid'],['Guide']
Usability,"/// Given an ISD::UDIV node expressing a divide by constant,; /// return a DAG expression to select that will generate the same value by; /// multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:236,Guid,Guide,236,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['Guid'],['Guide']
Usability,"/// Given costs for both strategies, return true if the scalar predication; /// lowering should be used for div/rem. This incorporates an override; /// option so it is not simply a cost comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:172,simpl,simply,172,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['simpl'],['simply']
Usability,"/// Given operands for the multiplication of a FMA, fold the result or return; /// null. In contrast to simplifyFMulInst, this function will not perform; /// simplifications whose unrounded results differ when rounded to the argument; /// type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:104,simpl,simplifyFMulInst,104,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,2,['simpl'],"['simplifications', 'simplifyFMulInst']"
Usability,"/// Given that expression S represents a pointer that would be dereferenced,; /// try to find a sub-expression from which the pointer came from.; /// This is used for tracking down origins of a null or undefined value:; /// ""this is null because that is null because that is null"" etc.; /// We wipe away field and element offsets because they merely add offsets.; /// We also wipe away all casts except lvalue-to-rvalue casts, because the; /// latter represent an actual pointer dereference; however, we remove; /// the final lvalue-to-rvalue cast before returning from this function; /// because it demonstrates more clearly from where the pointer rvalue was; /// loaded. Examples:; /// x->y.z ==> x (lvalue); /// foo()->y.z ==> foo() (rvalue)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:618,clear,clearly,618,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['clear'],['clearly']
Usability,"/// Given the set of return statements within a function body,; /// compute the variables that are subject to the named return value; /// optimization.; ///; /// Each of the variables that is subject to the named return value; /// optimization will be marked as NRVO variables in the AST, and any; /// return statement that has a marked NRVO variable as its NRVO candidate can; /// use the named return value optimization.; ///; /// This function applies a very simplistic algorithm for NRVO: if every return; /// statement in the scope of a variable has the same NRVO candidate, that; /// candidate is an NRVO variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:462,simpl,simplistic,462,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['simpl'],['simplistic']
Usability,"/// Given vector type, change the element type,; /// whilst keeping the old number of elements.; /// For non-vectors simply returns \p EltTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h:117,simpl,simply,117,interpreter/llvm-project/llvm/include/llvm/IR/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Type.h,1,['simpl'],['simply']
Usability,"/// GlobalValue - If we are tracking any values for the contents of a global; /// variable, we keep a mapping from the constant accessor to the element of; /// the global, to the currently known value. If the value becomes; /// overdefined, it's entry is simply removed from this map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp:255,simpl,simply,255,interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,1,['simpl'],['simply']
Usability,/// Go through all the nodes in the graph and collapse any two nodes; /// 'a' and 'b' if all of the following are true:; /// - the only edge from 'a' is a def-use edge to 'b' and; /// - the only edge to 'b' is a def-use edge from 'a' and; /// - there is no cyclic edge from 'b' to 'a' and; /// - all instructions in 'a' and 'b' belong to the same basic block and; /// - both 'a' and 'b' are simple (single or multi instruction) nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h:391,simpl,simple,391,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h,1,['simpl'],['simple']
Usability,"/// Grabs __declspec(uuid()) off a type, or returns 0 if we cannot resolve to; /// a single GUID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:92,GUID,GUID,92,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['GUID'],['GUID']
Usability,"/// Groups pointers such that a single memcheck is required; /// between two different groups. This will clear the CheckingGroups vector; /// and re-compute it. We will only group dependecies if \p UseDependencies; /// is true, otherwise we will create a separate group for each pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:105,clear,clear,105,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['clear'],['clear']
Usability,"/// Handle (SIMD arithmetic)-like intrinsics.; ///; /// Instrument intrinsics with any number of arguments of the same type,; /// equal to the return type. The type should be simple (no aggregates or; /// pointers; vectors are fine).; /// Caller guarantees that this intrinsic does not access memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:175,simpl,simple,175,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['simpl'],['simple']
Usability,"/// Handle a builtin simple-assignment or a call to a trivial assignment; /// operator whose left-hand side might involve a union member access. If it; /// does, implicitly start the lifetime of any accessed union elements per; /// C++20 [class.union]5.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:21,simpl,simple-assignment,21,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['simpl'],['simple-assignment']
Usability,"/// Handle a friend type declaration. This works in tandem with; /// ActOnTag.; ///; /// Notes on friend class templates:; ///; /// We generally treat friend class declarations as if they were; /// declaring a class. So, for example, the elaborated type specifier; /// in a friend declaration is required to obey the restrictions of a; /// class-head (i.e. no typedefs in the scope chain), template; /// parameters are required to match up with simple template-ids, &c.; /// However, unlike when declaring a template specialization, it's; /// okay to refer to a template specialization without an empty; /// template parameter declaration, e.g.; /// friend class A<T>::B<unsigned>;; /// We permit this as a special case; if there are any template; /// parameters present at all, require proper matching, i.e.; /// template <> template \<class T> friend class A<int>::B;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:445,simpl,simple,445,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['simpl'],['simple']
Usability,/// Handle all MS pragmas. Simply forwards the tokens after inserting; /// an annotation token.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParsePragma.cpp:27,Simpl,Simply,27,interpreter/llvm-project/clang/lib/Parse/ParsePragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParsePragma.cpp,1,['Simpl'],['Simply']
Usability,/// Handle icmp with constant (but not simple integer constant) RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:39,simpl,simple,39,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['simpl'],['simple']
Usability,/// Handle to alloca instruction to simplify method interfaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:36,simpl,simplify,36,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['simpl'],['simplify']
Usability,/// Handle to clear this analysis on deletion of values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h:14,clear,clear,14,interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h,1,['clear'],['clear']
Usability,"/// Handle vector load-like intrinsics.; ///; /// Instrument intrinsics that look like a simple SIMD load: reads memory,; /// has 1 pointer argument, returns a vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:89,simpl,simple,89,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['simpl'],['simple']
Usability,"/// Handle vector store-like intrinsics.; ///; /// Instrument intrinsics that look like a simple SIMD store: writes memory,; /// has 1 pointer argument and 1 vector argument, returns void.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:90,simpl,simple,90,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['simpl'],['simple']
Usability,"/// HandlePluralModifier - Handle the integer 'plural' modifier. This is used; /// for complex plural forms, or in languages where all plurals are complex.; /// The syntax is: %plural{cond1:form1|cond2:form2|:form3}, where condn are; /// conditions that are tested in order, the form corresponding to the first; /// that applies being emitted. The empty condition is always true, making the; /// last form a default case.; /// Conditions are simple boolean expressions, where n is the number argument.; /// Here are the rules.; /// condition := expression | empty; /// empty := -> always true; /// expression := numeric [',' expression] -> logical or; /// numeric := range -> true if n in range; /// | '%' number '=' range -> true if n % number in range; /// range := number; /// | '[' number ',' number ']' -> ranges are inclusive both ends; ///; /// Here are some examples from the GNU gettext manual written in this form:; /// English:; /// {1:form0|:form1}; /// Latvian:; /// {0:form2|%100=11,%10=0,%10=[2,9]:form1|:form0}; /// Gaeilge:; /// {1:form0|2:form1|:form2}; /// Romanian:; /// {1:form0|0,%100=[1,19]:form1|:form2}; /// Lithuanian:; /// {%10=0,%100=[10,19]:form2|%10=1:form0|:form1}; /// Russian (requires repeated form):; /// {%100=[11,14]:form2|%10=1:form0|%10=[2,4]:form1|:form2}; /// Slovak; /// {1:form0|[2,4]:form1|:form2}; /// Polish (requires repeated form):; /// {1:form0|%100=[10,20]:form2|%10=[2,4]:form1|:form2}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:442,simpl,simple,442,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,1,['simpl'],['simple']
Usability,"/// Handler for invalidation of the Module.; ///; /// If the proxy analysis itself is preserved, then we assume that the set of; /// SCCs in the Module hasn't changed. Thus any pointers to SCCs in the; /// CGSCCAnalysisManager are still valid, and we don't need to call \c clear; /// on the CGSCCAnalysisManager.; ///; /// Regardless of whether this analysis is marked as preserved, all of the; /// analyses in the \c CGSCCAnalysisManager are potentially invalidated based; /// on the set of preserved analyses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:273,clear,clear,273,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['clear'],['clear']
Usability,"/// Handler for invalidation of the outer IR unit, \c IRUnitT.; ///; /// If the proxy analysis itself is not preserved, we assume that the set of; /// inner IR objects contained in IRUnit may have changed. In this case,; /// we have to call \c clear() on the inner analysis manager, as it may now; /// have stale pointers to its inner IR objects.; ///; /// Regardless of whether the proxy analysis is marked as preserved, all of; /// the analyses in the inner analysis manager are potentially invalidated; /// based on the set of preserved analyses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:244,clear,clear,244,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['clear'],['clear']
Usability,"/// Handler for invalidation of the proxy for a particular function.; ///; /// If the proxy, \c LoopInfo, and associated analyses are preserved, this; /// will merely forward the invalidation event to any cached loop analysis; /// results for loops within this function.; ///; /// If the necessary loop infrastructure is not preserved, this will forcibly; /// clear all of the cached analysis results that are keyed on the \c; /// LoopInfo for this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h:360,clear,clear,360,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,1,['clear'],['clear']
Usability,"/// Harden a return instruction.; ///; /// Returns implicitly perform a load which we need to harden. Without hardening; /// this load, an attacker my speculatively write over the return address to; /// steer speculation of the return to an attacker controlled address. This is; /// called Spectre v1.1 or Bounds Check Bypass Store (BCBS) and is described in; /// this paper:; /// https://people.csail.mit.edu/vlk/spectre11.pdf; ///; /// We can harden this by introducing an LFENCE that will delay any load of the; /// return address until prior instructions have retired (and thus are not being; /// speculated), or we can harden the address used by the implicit load: the; /// stack pointer.; ///; /// If we are not using an LFENCE, hardening the stack pointer has an additional; /// benefit: it allows us to pass the predicate state accumulated in this; /// function back to the caller. In the absence of a BCBS attack on the return,; /// the caller will typically be resumed and speculatively executed due to the; /// Return Stack Buffer (RSB) prediction which is very accurate and has a high; /// priority. It is possible that some code from the caller will be executed; /// speculatively even during a BCBS-attacked return until the steering takes; /// effect. Whenever this happens, the caller can recover the (poisoned); /// predicate state from the stack pointer and continue to harden loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:971,resume,resumed,971,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['resume'],['resumed']
Usability,"/// Hash information about the presence of this extension into the; /// module hash.; ///; /// The module hash is used to distinguish different variants of a module that; /// are incompatible. If the presence, absence, or version of the module file; /// extension should force the creation of a separate set of module files,; /// override this method to combine that distinguishing information into the; /// module hash.; ///; /// The default implementation of this function simply does nothing, so the; /// presence/absence of this extension does not distinguish module files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h:475,simpl,simply,475,interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h,1,['simpl'],['simply']
Usability,"/// HashHMapKey - This is the 'well known' hash function required by the file; /// format, used to look up keys in the hash table. The hash table uses simple; /// linear probing based on this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp:151,simpl,simple,151,interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderMap.cpp,1,['simpl'],['simple']
Usability,"/// Hashes \p Value based on its opcode, types, and operand types.; /// Two IRInstructionData instances produce the same hash when they perform; /// the same operation.; ///; /// As a simple example, consider the following instructions.; ///; /// \code; /// %add1 = add i32 %x1, %y1; /// %add2 = add i32 %x2, %y2; ///; /// %sub = sub i32 %x1, %y1; ///; /// %add_i64 = add i64 %x2, %y2; /// \endcode; ///; /// Because the first two adds operate the same types, and are performing the; /// same action, they will be hashed to the same value.; ///; /// However, the subtraction instruction is not the same as an addition, and; /// will be hashed to a different value.; ///; /// Finally, the last add has a different type compared to the first two add; /// instructions, so it will also be hashed to a different value that any of; /// the previous instructions.; ///; /// \param [in] ID - The IRInstructionData instance to be hashed.; /// \returns A hash_value of the IRInstructionData.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:184,simpl,simple,184,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['simpl'],['simple']
Usability,/// Help to insert SDNodeFlags automatically in transforming. Use; /// RAII to save and resume flags in current scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:88,resume,resume,88,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['resume'],['resume']
Usability,"/// Helper class that determines the relationship between incoming values of a; /// phi in the control flow graph to determine where an incoming value can; /// simply be taken as a scalar lane mask as-is, and where it needs to be; /// merged with another, previously defined lane mask.; ///; /// The approach is as follows:; /// - Determine all basic blocks which, starting from the incoming blocks,; /// a wave may reach before entering the def block (the block containing the; /// phi).; /// - If an incoming block has no predecessors in this set, we can take the; /// incoming value as a scalar lane mask as-is.; /// -- A special case of this is when the def block has a self-loop.; /// - Otherwise, the incoming value needs to be merged with a previously; /// defined lane mask.; /// - If there is a path into the set of reachable blocks that does _not_ go; /// through an incoming block where we can take the scalar lane mask as-is,; /// we need to invent an available value for the SSAUpdater. Choices are; /// 0 and undef, with differing consequences for how to merge values etc.; ///; /// TODO: We could use region analysis to quickly skip over SESE regions during; /// the traversal.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerI1Copies.cpp:160,simpl,simply,160,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerI1Copies.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerI1Copies.cpp,1,['simpl'],['simply']
Usability,"/// Helper class to iterate through stack ids in both metadata (memprof MIB and; /// callsite) and the corresponding ThinLTO summary data structures; /// (CallsiteInfo and MIBInfo). This simplifies implementation of client code; /// which doesn't need to worry about whether we are operating with IR (Regular; /// LTO), or summary (ThinLTO).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h:187,simpl,simplifies,187,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryProfileInfo.h,1,['simpl'],['simplifies']
Usability,/// Helper class to simplify emission of cycle counts into optimization remarks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp:20,simpl,simplify,20,interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,1,['simpl'],['simplify']
Usability,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:493,simpl,simply,493,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,1,['simpl'],['simply']
Usability,"/// Helper for Errors used as out-parameters.; ///; /// This helper is for use with the Error-as-out-parameter idiom, where an error; /// is passed to a function or method by reference, rather than being returned.; /// In such cases it is helpful to set the checked bit on entry to the function; /// so that the error can be written to (unchecked Errors abort on assignment); /// and clear the checked bit on exit so that clients cannot accidentally forget; /// to check the result. This helper performs these actions automatically using; /// RAII:; ///; /// @code{.cpp}; /// Result foo(Error &Err) {; /// ErrorAsOutParameter ErrAsOutParam(&Err); // 'Checked' flag set; /// // <body of foo>; /// // <- 'Checked' flag auto-cleared when ErrAsOutParam is destructed.; /// }; /// @endcode; ///; /// ErrorAsOutParameter takes an Error* rather than Error& so that it can be; /// used with optional Errors (Error pointers that are allowed to be null). If; /// ErrorAsOutParameter took an Error reference, an instance would have to be; /// created inside every condition that verified that Error was non-null. By; /// taking an Error pointer we can just create one instance at the top of the; /// function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:384,clear,clear,384,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,['clear'],"['clear', 'cleared']"
Usability,"/// Helper function for findBasePointer - Will return a value which either a); /// defines the base pointer for the input, b) blocks the simple search; /// (i.e. a PHI or Select of two derived pointers), or c) involves a change; /// from pointer to vector type or back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:137,simpl,simple,137,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['simpl'],['simple']
Usability,/// Helper function for getDefaultFunctionAttributes. Builds a set of function; /// attributes which can be simply added to a function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:108,simpl,simply,108,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['simpl'],['simply']
Usability,/// Helper function for querying AAValueSimplify and updating candidate.; /// \param IRP The value position we are trying to unify with SimplifiedValue,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:136,Simpl,SimplifiedValue,136,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['Simpl'],['SimplifiedValue']
Usability,"/// Helper function for translateSimpleIntrinsic.; /// \return The generic opcode for \p IntrinsicID if \p IntrinsicID is a; /// simple intrinsic (ceil, fabs, etc.). Otherwise, returns; /// Intrinsic::not_intrinsic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:129,simpl,simple,129,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,1,['simpl'],['simple']
Usability,/// Helper function to test whether a shuffle mask could be; /// simplified by widening the elements being shuffled.; ///; /// Appends the mask for wider elements in WidenedMask if valid. Otherwise; /// leaves it in an unspecified state.; ///; /// NOTE: This must handle normal vector shuffle masks and *target* vector; /// shuffle masks. The latter have the special property of a '-2' representing; /// a zero-ed lane of a vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:65,simpl,simplified,65,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simplified']
Usability,"/// Helper routine of SimplifyDemandedUseBits. It computes Known; /// bits. It also tries to handle simplifications that can be done based on; /// DemandedMask, but without modifying the Instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:22,Simpl,SimplifyDemandedUseBits,22,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,2,"['Simpl', 'simpl']","['SimplifyDemandedUseBits', 'simplifications']"
Usability,"/// Helper routine of SimplifyDemandedUseBits. It computes KnownZero/KnownOne; /// bits. It also tries to handle simplifications that can be done based on; /// DemandedMask, but without modifying the Instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:22,Simpl,SimplifyDemandedUseBits,22,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,2,"['Simpl', 'simpl']","['SimplifyDemandedUseBits', 'simplifications']"
Usability,"/// Helper routine of SimplifyDemandedUseBits. It tries to simplify demanded; /// bit for ""r1 = shr x, c1; r2 = shl r1, c2"" instruction sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:22,Simpl,SimplifyDemandedUseBits,22,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,2,"['Simpl', 'simpl']","['SimplifyDemandedUseBits', 'simplify']"
Usability,"/// Helper routine of SimplifyDemandedUseBits. It tries to simplify; /// ""E1 = (X lsr C1) << C2"", where the C1 and C2 are constant, into; /// ""E2 = X << (C2 - C1)"" or ""E2 = X >> (C1 - C2)"", depending on the sign; /// of ""C2-C1"".; ///; /// Suppose E1 and E2 are generally different in bits S={bm, bm+1,; /// ..., bn}, without considering the specific value X is holding.; /// This transformation is legal iff one of following conditions is hold:; /// 1) All the bit in S are 0, in this case E1 == E2.; /// 2) We don't care those bits in S, per the input DemandedMask.; /// 3) Combination of 1) and 2). Some bits in S are 0, and we don't care the; /// rest bits.; ///; /// Currently we only test condition 2).; ///; /// As with SimplifyDemandedUseBits, it returns NULL if the simplification was; /// not successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:22,Simpl,SimplifyDemandedUseBits,22,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,4,"['Simpl', 'simpl']","['SimplifyDemandedUseBits', 'simplification', 'simplify']"
Usability,"/// Helper struct for trackAssignments, below. We don't use the similar; /// DebugVariable class because trackAssignments doesn't (yet?) understand; /// partial variables (fragment info) as input and want to make that clear and; /// explicit using types. In addition, eventually we will want to understand; /// expressions that modify the base address too, which a DebugVariable doesn't; /// capture.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:218,clear,clear,218,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,1,['clear'],['clear']
Usability,/// Helper struct to tie a value+context pair together with the scope for; /// which this is the simplified version.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:97,simpl,simplified,97,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['simpl'],['simplified']
Usability,"/// Helper wrapper around SimplifyDemandedBits, demanding all elements.; /// Adds Op back to the worklist upon success.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Simpl,SimplifyDemandedBits,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['Simpl'],['SimplifyDemandedBits']
Usability,/// Helper wrapper around SimplifyDemandedBits.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Simpl,SimplifyDemandedBits,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['Simpl'],['SimplifyDemandedBits']
Usability,/// Helper wrapper around SimplifyDemandedVectorElts.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Simpl,SimplifyDemandedVectorElts,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['Simpl'],['SimplifyDemandedVectorElts']
Usability,"/// Helper wrapper around SimplifyMultipleUseDemandedBits, demanding all; /// bits from only some vector elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Simpl,SimplifyMultipleUseDemandedBits,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['Simpl'],['SimplifyMultipleUseDemandedBits']
Usability,"/// Helper wrapper around SimplifyMultipleUseDemandedBits, demanding all; /// elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Simpl,SimplifyMultipleUseDemandedBits,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['Simpl'],['SimplifyMultipleUseDemandedBits']
Usability,"/// Helps avoid false dependencies on undef registers by updating the; /// machine instructions' undef operand to use a register that the instruction; /// is truly dependent on, or use a register with clearance higher than Pref.; /// Returns true if it was able to find a true dependency, thus not requiring; /// a dependency breaking instruction regardless of clearance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp:201,clear,clearance,201,interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BreakFalseDeps.cpp,2,['clear'],['clearance']
Usability,"/// Hierarchy of fields consisting of simple types and collections (sub trees)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx:38,simpl,simple,38,tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,1,['simpl'],['simple']
Usability,"/// Hoist back-copies to the complement interval. It tries to hoist all; /// the back-copies to one BB if it is beneficial, or else simply remove; /// redundant backcopies dominated by others.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:132,simpl,simply,132,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,1,['simpl'],['simply']
Usability,"/// Hold subclass data that can be dropped.; ///; /// This member is similar to SubclassData, however it is for holding; /// information which may be used to aid optimization, but which may be; /// cleared to zero without affecting conservative interpretation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:198,clear,cleared,198,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['clear'],['cleared']
Usability,"/// ID to identify each device compilation. For CUDA it is simply the; /// GPU arch string. For HIP it is either the GPU arch string or GPU; /// arch string plus feature strings delimited by a plus sign, e.g.; /// gfx906+xnack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:59,simpl,simply,59,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['simpl'],['simply']
Usability,"/// Ideally pick the PHI IV inserted by ScalarEvolutionExpander. As a fallback; /// any PHi from the loop header is usable, but may have less chance of; /// surviving subsequent transforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:116,usab,usable,116,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['usab'],['usable']
Usability,"/// Identify a debugger for ""tuning"" the debug info.; ///; /// The ""debugger tuning"" concept allows us to present a more intuitive; /// interface that unpacks into different sets of defaults for the various; /// individual feature-flag settings, that suit the preferences of the; /// various debuggers. However, it's worth remembering that debuggers are; /// not the only consumers of debug info, and some variations in DWARF might; /// better be treated as target/platform issues. Fundamentally,; /// o if the feature is useful (or not) to a particular debugger, regardless; /// of the target, that's a tuning decision;; /// o if the feature is useful (or not) on a particular platform, regardless; /// of the debugger, that's a target decision.; /// It's not impossible to see both factors in some specific case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:121,intuit,intuitive,121,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,1,['intuit'],['intuitive']
Usability,"/// Identify the type we can chose for a private copy of the underlying; /// argument. std::nullopt means it is not clear yet, nullptr means there is; /// none.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:116,clear,clear,116,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['clear'],['clear']
Usability,"/// If BB would be eligible for simplification by; /// TryToSimplifyUncondBranchFromEmptyBlock (i.e. it is empty and terminated; /// by an unconditional branch), look at the phi node for BB in the successor; /// block and see if the incoming value is equal to CaseValue. If so, return; /// the phi node, and set PhiIndex to BB's index in the phi node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:32,simpl,simplification,32,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['simpl'],['simplification']
Usability,"/// If IsSimpleKeyAllowed, create and push_back a new SimpleKey.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:54,Simpl,SimpleKey,54,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['Simpl'],['SimpleKey']
Usability,"/// If TI is known to be a terminator instruction and its block is known to; /// only have a single predecessor block, check to see if that predecessor is; /// also a value comparison with the same value, and if that comparison; /// determines the outcome of this comparison. If so, simplify TI. This does a; /// very limited form of jump threading.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:283,simpl,simplify,283,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['simpl'],['simplify']
Usability,"/// If \p V is assumed simplified, return it, if it is unclear yet,; /// return std::nullopt, otherwise return `nullptr`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:23,simpl,simplified,23,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplified']
Usability,"/// If \p V is assumed simplified, return it, if it is unclear yet,; /// return std::nullopt, otherwise return `nullptr`. Same as the public; /// version except that it can be used without recording dependences on any \p; /// AA.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:23,simpl,simplified,23,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplified']
Usability,"/// If a TFile container is written by a C stream (simple file), on dataset commit, the file header; /// and the TFile record need to be updated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx:51,simpl,simple,51,tree/ntuple/v7/src/RMiniFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx,1,['simpl'],['simple']
Usability,"/// If a load has multiple candidates associated (i.e. different; /// stores), it means that it could be forwarding from multiple stores; /// depending on control flow. Remove these candidates.; ///; /// Here, we rely on LAA to include the relevant loop-independent dependences.; /// LAA is known to omit these in the very simple case when the read and the; /// write within an alias set always takes place using the *same* pointer.; ///; /// However, we know that this is not the case here, i.e. we can rely on LAA; /// to provide us with loop-independent dependences for the cases we're; /// interested. Consider the case for example where a loop-independent; /// dependece S1->S2 invalidates the forwarding S3->S2.; ///; /// A[i] = ... (S1); /// ... = A[i] (S2); /// A[i+1] = ... (S3); ///; /// LAA will perform dependence analysis here because there are two; /// *different* pointers involved in the same alias set (&A[i] and &A[i+1]).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp:323,simpl,simple,323,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopLoadElimination.cpp,1,['simpl'],['simple']
Usability,"/// If a symbol has a Fragment, the section is implied, so we only need; /// one pointer.; /// The special AbsolutePseudoFragment value is for absolute symbols.; /// If this is a variable symbol, this caches the variable value's fragment.; /// FIXME: We might be able to simplify this by having the asm streamer create; /// dummy fragments.; /// If this is a section, then it gives the symbol is defined in. This is null; /// for undefined symbols.; ///; /// If this is a fragment, then it gives the fragment this symbol's value is; /// relative to, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:271,simpl,simplify,271,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,1,['simpl'],['simplify']
Usability,"/// If a vector select has an operand that is -1 or 0, try to simplify the; /// select to a bitwise logic operation.; /// TODO: Move to DAGCombiner, possibly using TargetLowering::hasAndNot()?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:62,simpl,simplify,62,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simplify']
Usability,"/// If an instruction is trivialized (dead), then the chain of users of that; /// instruction may need to be cleared of assumptions that can no longer be; /// guaranteed correct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp:109,clear,cleared,109,interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp,1,['clear'],['cleared']
Usability,"/// If called on unreachable code, the instruction may simplify to itself.; /// Make life easier for users by detecting that case here, and returning a; /// safe value instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:55,simpl,simplify,55,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,"/// If convert a simple (split, no rejoin) sub-CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp:17,simpl,simple,17,interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp,1,['simpl'],['simple']
Usability,"/// If is a TTY, clear the terminal screen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/Display.h:17,clear,clear,17,core/textinput/src/textinput/Display.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/Display.h,1,['clear'],['clear']
Usability,"/// If the \p State's next token is an r_brace closing a nested block,; /// format the nested block before it.; ///; /// Returns \c true if all children could be placed successfully and adapts; /// \p Penalty as well as \p State. If \p DryRun is false, also directly; /// creates changes using \c Whitespaces.; ///; /// The crucial idea here is that children always get formatted upon; /// encountering the closing brace right after the nested block. Now, if we; /// are currently trying to keep the ""}"" on the same line (i.e. \p NewLine is; /// \c false), the entire block has to be kept on the same line (which is only; /// possible if it fits on the line, only contains a single statement, etc.; ///; /// If \p NewLine is true, we format the nested block on separate lines, i.e.; /// break after the ""{"", format all lines with correct indentation and the put; /// the closing ""}"" on yet another new line.; ///; /// This enables us to keep the simple structure of the; /// \c UnwrappedLineFormatter, where we only have two options for each token:; /// break or don't break.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp:946,simpl,simple,946,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,1,['simpl'],['simple']
Usability,"/// If the given load, \p LI, is used only by trunc or trunc(lshr); /// operations, split it in the various pieces being extracted.; ///; /// This sort of thing is introduced by SROA.; /// This slicing takes care not to insert overlapping loads.; /// \pre LI is a simple load (i.e., not an atomic or volatile load).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:264,simpl,simple,264,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['simpl'],['simple']
Usability,"/// If the high bits of an 'and' operand are known zero, try setting the; /// high bits of an 'and' constant operand to produce a smaller encoding by; /// creating a small, sign-extended negative immediate rather than a large; /// positive one. This reverses a transform in SimplifyDemandedBits that; /// shrinks mask constants by clearing bits. There is also a possibility that; /// the 'and' mask can be made -1, so the 'and' itself is unnecessary. In that; /// case, just replace the 'and'. Return 'true' if the node is replaced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:274,Simpl,SimplifyDemandedBits,274,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,2,"['Simpl', 'clear']","['SimplifyDemandedBits', 'clearing']"
Usability,"/// If the specified pointer points to an object that we control, try to modify; /// the object's alignment to PrefAlign. Returns a minimum known alignment of; /// the value after the operation, which may be lower than PrefAlign.; ///; /// Increating value alignment isn't often possible though. If alignment is; /// important, a more reliable approach is to simply align all global variables; /// and allocation instructions to their preferred alignment from the beginning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:359,simpl,simply,359,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['simpl'],['simply']
Usability,"/// If the unknown expression U corresponds to a simple recurrence, return; /// a constant range which represents the entire recurrence. Note that; /// *add* recurrences with loop invariant steps aren't represented by; /// SCEVUnknowns and thus don't use this mechanism.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:49,simpl,simple,49,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['simpl'],['simple']
Usability,"/// If there is a current run, end it.; ///; /// This method collects various book-keeping required to clear and close; /// resources associated with the current run, but may also allocate some; /// for the next run.; ///; /// Calling \ref endRun before associating a run through \ref createRun leads; /// to undefined behaviour.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:103,clear,clear,103,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,1,['clear'],['clear']
Usability,"/// If there is a reserved call frame, the call frame pseudos can be; /// simplified. Having a FP, as in the default implementation, is not; /// sufficient here since we can't always use it. Use a more nuanced; /// condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h:74,simpl,simplified,74,interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h,1,['simpl'],['simplified']
Usability,"/// If there is any stack map data, create a stack map section and serialize; /// the map info into it. This clears the stack map data structures; /// afterwards.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:109,clear,clears,109,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,1,['clear'],['clears']
Usability,"/// If this OperandMatcher has not been assigned a TempTypeIdx yet, assigns it; /// one and adds a `RecordRegisterType` predicate to this matcher. If one has; /// already been assigned, simply returns it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:186,simpl,simply,186,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['simpl'],['simply']
Usability,"/// If this basic block is simple enough, and if a predecessor branches to us; /// and one of our successors, fold the block into the predecessor and use; /// logical operations to pick the right destination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:27,simpl,simple,27,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['simpl'],['simple']
Usability,"/// If this is a *dynamic* select (non-constant condition) and we can match; /// this node with one of the variable blend instructions, restructure the; /// condition so that blends can use the high (sign) bit of each element.; /// This function will also call SimplifyDemandedBits on already created; /// BLENDV to perform additional simplifications.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:261,Simpl,SimplifyDemandedBits,261,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['Simpl', 'simpl']","['SimplifyDemandedBits', 'simplifications']"
Usability,"/// If this name is the name of a C++ deduction guide, return the; /// template associated with that name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:48,guid,guide,48,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['guid'],['guide']
Usability,"/// If we are extracting a subvector of a vector select and the select condition; /// is composed of concatenated vectors, try to narrow the select width. This; /// is a common pattern for AVX1 integer code because 256-bit selects may be; /// legal, but there is almost no integer math/logic available for 256-bit.; /// This function should only be called with legal types (otherwise, the calls; /// to get simple value types will assert).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:407,simpl,simple,407,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simple']
Usability,"/// If we have a conditional branch as a predecessor of another block,; /// this function tries to simplify it. We know; /// that PBI and BI are both conditional branches, and BI is in one of the; /// successor blocks of PBI - PBI branches to BI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:99,simpl,simplify,99,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['simpl'],['simplify']
Usability,"/// If we have a select with an equality comparison, then we know the value in; /// one of the arms of the select. See if substituting this value into an arm; /// and simplifying the result yields the same value as the other arm.; ///; /// To make this transform safe, we must drop poison-generating flags; /// (nsw, etc) if we simplified to a binop because the select may be guarding; /// that poison from propagating. If the existing binop already had no; /// poison-generating flags, then this transform can be done by instsimplify.; ///; /// Consider:; /// %cmp = icmp eq i32 %x, 2147483647; /// %add = add nsw i32 %x, 1; /// %sel = select i1 %cmp, i32 -2147483648, i32 %add; ///; /// We can't replace %sel with %add unless we strip away the flags.; /// TODO: Wrapping flags could be preserved in some cases with better analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:167,simpl,simplifying,167,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,2,['simpl'],"['simplified', 'simplifying']"
Usability,"/// If we have a unary shuffle of a shuffle, see if it can be folded away; /// completely. This has the potential to lose undef knowledge because the first; /// shuffle may not have an undef mask element where the second one does. So; /// only call this after doing simplifications based on demanded elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:266,simpl,simplifications,266,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['simpl'],['simplifications']
Usability,"/// Implement SimplifyDemandedVectorElts for amdgcn buffer and image intrinsics.; ///; /// The result of simplifying amdgcn image and buffer store intrinsics is updating; /// definitions of the intrinsics vector argument, not Uses of the result like; /// image and buffer loads.; /// Note: This only supports non-TFE/LWE image intrinsic calls; those have; /// struct returns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp:14,Simpl,SimplifyDemandedVectorElts,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstCombineIntrinsic.cpp,2,"['Simpl', 'simpl']","['SimplifyDemandedVectorElts', 'simplifying']"
Usability,"/// Implement hashing for user-defined `struct`s.; ///; /// Any user-define `struct` can participate in hashing via `HashBuilder` by; /// providing a `addHash` templated function.; ///; /// ```; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const UserDefinedStruct &Value);; /// ```; ///; /// For example:; /// ```; /// struct SimpleStruct {; /// char c;; /// int i;; /// };; ///; /// template <typename HasherT, llvm::endianness Endianness>; /// void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const SimpleStruct &Value) {; /// HBuilder.add(Value.c);; /// HBuilder.add(Value.i);; /// }; /// ```; ///; /// To avoid endianness issues, specializations of `addHash` should; /// generally rely on exising `add`, `addRange`, and `addRangeElements`; /// functions. If directly using `update`, an implementation must correctly; /// handle endianness.; ///; /// ```; /// struct __attribute__ ((packed)) StructWithFastHash {; /// int I;; /// char C;; ///; /// // If possible, we want to hash both `I` and `C` in a single; /// // `update` call for performance concerns.; /// template <typename HasherT, llvm::endianness Endianness>; /// friend void addHash(HashBuilder<HasherT, Endianness> &HBuilder,; /// const StructWithFastHash &Value) {; /// if (Endianness == llvm::endianness::native) {; /// HBuilder.update(ArrayRef(; /// reinterpret_cast<const uint8_t *>(&Value), sizeof(Value)));; /// } else {; /// // Rely on existing `add` methods to handle endianness.; /// HBuilder.add(Value.I);; /// HBuilder.add(Value.C);; /// }; /// }; /// };; /// ```; ///; /// To avoid collisions, specialization of `addHash` for variable-size; /// types must take the size into account.; ///; /// For example:; /// ```; /// struct CustomContainer {; /// private:; /// size_t Size;; /// int Elements[100];; ///; /// public:; /// CustomContainer(size_t Size) : Size(Size) {; /// for (size_t I = 0; I != Size; ++I); /// Elements[I] = ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h:409,Simpl,SimpleStruct,409,interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/HashBuilder.h,2,['Simpl'],['SimpleStruct']
Usability,"/// Implementation of CodeView type stream merging.; ///; /// A CodeView type stream is a series of records that reference each other; /// through type indices. A type index is either ""simple"", meaning it is less; /// than 0x1000 and refers to a builtin type, or it is complex, meaning it; /// refers to a prior type record in the current stream. The type index of a; /// record is equal to the number of records before it in the stream plus; /// 0x1000.; ///; /// Type records are only allowed to use type indices smaller than their own, so; /// a type stream is effectively a topologically sorted DAG. Cycles occurring in; /// the type graph of the source program are resolved with forward declarations; /// of composite types. This class implements the following type stream merging; /// algorithm, which relies on this DAG structure:; ///; /// - Begin with a new empty stream, and a new empty hash table that maps from; /// type record contents to new type index.; /// - For each new type stream, maintain a map from source type index to; /// destination type index.; /// - For each record, copy it and rewrite its type indices to be valid in the; /// destination type stream.; /// - If the new type record is not already present in the destination stream; /// hash table, append it to the destination type stream, assign it the next; /// type index, and update the two hash tables.; /// - If the type record already exists in the destination stream, discard it; /// and update the type index map to forward the source type index to the; /// existing destination type index.; ///; /// As an additional complication, type stream merging actually produces two; /// streams: an item (or IPI) stream and a type stream, as this is what is; /// actually stored in the final PDB. We choose which records go where by; /// looking at the record kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp:185,simpl,simple,185,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp,1,['simpl'],['simple']
Usability,"/// Implementation of recursive simplification through an instruction's; /// uses.; ///; /// This is the common implementation of the recursive simplification routines.; /// If we have a pre-simplified value in 'SimpleV', that is forcibly used to; /// replace the instruction 'I'. Otherwise, we simply add 'I' to the list of; /// instructions to process and attempt to simplify it using; /// InstructionSimplify. Recursively visited users which could not be; /// simplified themselves are to the optional UnsimplifiedUsers set for; /// further processing by the caller.; ///; /// This routine returns 'true' only when *it* simplifies something. The passed; /// in simplified value does not count toward this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:32,simpl,simplification,32,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,9,"['Simpl', 'simpl']","['SimpleV', 'simplification', 'simplified', 'simplifies', 'simplify', 'simply']"
Usability,"/// Implements the simple state machine that the Lexer class uses to; /// detect files subject to the 'multiple-include' optimization.; ///; /// The public methods in this class are triggered by various; /// events that occur when a file is lexed, and after the entire file is lexed,; /// information about which macro (if any) controls the header is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h:19,simpl,simple,19,interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MultipleIncludeOpt.h,1,['simpl'],['simple']
Usability,"/// In C++98, whether the initializer is an ICE. This affects whether the; /// variable is usable in constant expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:91,usab,usable,91,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['usab'],['usable']
Usability,"/// In general, we create a field simply from the C++ type name. For untyped fields, however, we potentially need; /// access to sub fields, which is provided by the ntuple descriptor argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:34,simpl,simply,34,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['simpl'],['simply']
Usability,"/// In the case of a binary operation with a select instruction as an operand,; /// try to simplify the binop by seeing whether evaluating it on both branches; /// of the select results in the same value. Returns the common value if so,; /// otherwise returns null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:91,simpl,simplify,91,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,"/// In the case of a binary operation with an operand that is a PHI instruction,; /// try to simplify the binop by seeing whether evaluating it on the incoming; /// phi values yields the same result for every value. If so returns the common; /// value, otherwise returns null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:93,simpl,simplify,93,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,"/// In the case of a comparison with a PHI instruction, try to simplify the; /// comparison by seeing whether comparing with all of the incoming phi values; /// yields the same result every time. If so returns the common result,; /// otherwise returns null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:63,simpl,simplify,63,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,"/// In the case of a comparison with a select instruction, try to simplify the; /// comparison by seeing whether both branches of the select result in the same; /// value. Returns the common value if so, otherwise returns null.; /// For example, if we have:; /// %tmp = select i1 %cmp, i32 1, i32 2; /// %cmp1 = icmp sle i32 %tmp, 3; /// We can simplify %cmp1 to true, because both branches of select are; /// less than 3. We compose new comparison by substituting %tmp with both; /// branches of select and see if it can be simplified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:66,simpl,simplify,66,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,3,['simpl'],"['simplified', 'simplify']"
Usability,"/// Index of the current successor. For VPBasicBlock nodes, this simply is the; /// index for the successor array. For VPRegionBlock, SuccessorIdx == 0 is; /// used for the region's entry block, and SuccessorIdx - 1 are the indices; /// for the successor array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanCFG.h:65,simpl,simply,65,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanCFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanCFG.h,1,['simpl'],['simply']
Usability,"/// Indicate if the file has an ""indeterminate file position indicator"".; /// This can be set at a failing read or write or seek operation.; /// If it is set no more read or write is allowed.; /// This value is not dependent on the stream error flags:; /// The error flag may be cleared with `clearerr` but the file position; /// remains still indeterminate.; /// This value applies to all error states in ErrorState except FEOF.; /// An EOF+indeterminate state is the same as EOF state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp:279,clear,cleared,279,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp,2,['clear'],"['cleared', 'clearerr']"
Usability,"/// Indicates that we already know the formula is unsatisfiable.; /// During construction, we catch simple cases of conflicting unit-clauses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:100,simpl,simple,100,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['simpl'],['simple']
Usability,/// Information on the way a set of constraints was simplified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h:52,simpl,simplified,52,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,1,['simpl'],['simplified']
Usability,"/// Initial processing of memory accesses determined that we may need; /// to add memchecks. Perform the analysis to determine the necessary checks.; ///; /// Note that, this is different from isDependencyCheckNeeded. When we retry; /// memcheck analysis without dependency checking; /// (i.e. FoundNonConstantDistanceDependence), isDependencyCheckNeeded is; /// cleared while this remains set if we have potentially dependent accesses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:363,clear,cleared,363,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['clear'],['cleared']
Usability,/// Initial processing of memory accesses determined that we need to; /// perform dependency checking.; ///; /// Note that this can later be cleared if we retry memcheck analysis without; /// dependency checking (i.e. FoundNonConstantDistanceDependence).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:141,clear,cleared,141,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['clear'],['cleared']
Usability,/// Initialize and clear the set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegUnits.h:19,clear,clear,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegUnits.h,1,['clear'],['clear']
Usability,"/// Initialize the DAG and common scheduler state for a new; /// scheduling region. This does not actually create the DAG, only clears; /// it. The scheduling driver may call BuildSchedGraph multiple times per; /// scheduling region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:128,clear,clears,128,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['clear'],['clears']
Usability,/// Initializes this to state that every location in this; /// type is the given location.; ///; /// This method exists to provide a simple transition for code that; /// relies on location-less types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:133,simpl,simple,133,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['simpl'],['simple']
Usability,"/// Inlines functions marked as ""always_inline"".; ///; /// Note that this does not inline call sites marked as always_inline and does; /// not delete the functions even when all users are inlined. The normal; /// inliner should be used to handle call site inlining, this pass's goal is to; /// be the simplest possible pass to remove always_inline function definitions'; /// uses by inlining them. The \c GlobalDCE pass can be used to remove these; /// functions once all users are gone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/AlwaysInliner.h:301,simpl,simplest,301,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/AlwaysInliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/AlwaysInliner.h,1,['simpl'],['simplest']
Usability,/// Insert a simple single-register formula for the given expression into the; /// given use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:13,simpl,simple,13,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['simpl'],['simple']
Usability,"/// Insert an architecture-specific instruction to clear a register. If you; /// need to avoid sideeffects (e.g. avoid XOR on x86, which sets EFLAGS), set; /// \p AllowSideEffects to \p false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:51,clear,clear,51,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['clear'],['clear']
Usability,"/// Insert code in the prolog/epilog code when unrolling a loop with a; /// run-time trip-count.; ///; /// This method assumes that the loop unroll factor is total number; /// of loop bodies in the loop after unrolling. (Some folks refer; /// to the unroll factor as the number of *extra* copies added).; /// We assume also that the loop unroll factor is a power-of-two. So, after; /// unrolling the loop, the number of loop bodies executed is 2,; /// 4, 8, etc. Note - LLVM converts the if-then-sequence to a switch; /// instruction in SimplifyCFG.cpp. Then, the backend decides how code for; /// the switch instruction is generated.; ///; /// ***Prolog case***; /// extraiters = tripcount % loopfactor; /// if (extraiters == 0) jump Loop:; /// else jump Prol:; /// Prol: LoopBody;; /// extraiters -= 1 // Omitted if unroll factor is 2.; /// if (extraiters != 0) jump Prol: // Omitted if unroll factor is 2.; /// if (tripcount < loopfactor) jump End:; /// Loop:; /// ...; /// End:; ///; /// ***Epilog case***; /// extraiters = tripcount % loopfactor; /// if (tripcount < loopfactor) jump LoopExit:; /// unroll_iters = tripcount - extraiters; /// Loop: LoopBody; (executes unroll_iter times);; /// unroll_iter -= 1; /// if (unroll_iter != 0) jump Loop:; /// LoopExit:; /// if (extraiters == 0) jump EpilExit:; /// Epil: LoopBody; (executes extraiters times); /// extraiters -= 1 // Omitted if unroll factor is 2.; /// if (extraiters != 0) jump Epil: // Omitted if unroll factor is 2.; /// EpilExit:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp:537,Simpl,SimplifyCFG,537,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp,1,['Simpl'],['SimplifyCFG']
Usability,"/// Inserts an #include or #import directive of \p Header into the code.; /// If \p IsAngled is true, \p Header will be quoted with <> in the directive;; /// otherwise, it will be quoted with """".; ///; /// When searching for points to insert new header, this ignores #include's; /// after the #include block(s) in the beginning of a file to avoid inserting; /// headers into code sections where new #include's should not be added by; /// default. These code sections include:; /// - raw string literals (containing #include).; /// - #if blocks.; /// - Special #include's among declarations (e.g. functions).; ///; /// Returns a replacement that inserts the new header into a suitable #include; /// block of the same category. This respects the order of the existing; /// #includes in the block; if the existing #includes are not already sorted,; /// this will simply insert the #include in front of the first #include of the; /// same category in the code that should be sorted after \p IncludeName. If; /// \p IncludeName already exists (with exactly the same spelling), this; /// returns std::nullopt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/HeaderIncludes.h:860,simpl,simply,860,interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/HeaderIncludes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/HeaderIncludes.h,1,['simpl'],['simply']
Usability,/// Inst is an integer instruction that SimplifyDemandedBits knows about. See if; /// the instruction has any properties that allow us to simplify its operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:40,Simpl,SimplifyDemandedBits,40,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,4,"['Simpl', 'simpl']","['SimplifyDemandedBits', 'simplify']"
Usability,/// Instances of this class represent operands of the MCInst class.; /// This is a simple discriminated union.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInst.h:83,simpl,simple,83,interpreter/llvm-project/llvm/include/llvm/MC/MCInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInst.h,1,['simpl'],['simple']
Usability,/// InstructionWorklist - This is the worklist management logic for; /// InstCombine and other simplification passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:95,simpl,simplification,95,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,1,['simpl'],['simplification']
Usability,"/// Instructions that accept extend modifiers like UXTW expect the register; /// being extended to be a GPR32, but the incoming DAG might be acting on a; /// GPR64 (either via SEXT_INREG or AND). Extract the appropriate low bits if; /// this is the case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:51,UX,UXTW,51,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['UX'],['UXTW']
Usability,"/// Instructions which will become dead if we rewrite the alloca.; ///; /// Note that these are not separated by slice. This is because we expect an; /// alloca to be completely rewritten or not rewritten at all. If rewritten,; /// all these instructions can simply be removed and replaced with poison as; /// they come from outside of the allocated space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:259,simpl,simply,259,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['simpl'],['simply']
Usability,"/// Instrument llvm.memmove; ///; /// At this point we don't know if llvm.memmove will be inlined or not.; /// If we don't instrument it and it gets inlined,; /// our interceptor will not kick in and we will lose the memmove.; /// If we instrument the call here, but it does not get inlined,; /// we will memove the shadow twice: which is bad in case; /// of overlapping regions. So, we simply lower the intrinsic to a call.; ///; /// Similar situation exists for memcpy and memset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:387,simpl,simply,387,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['simpl'],['simply']
Usability,"/// Interesting information about a specific parameter that can't simply; /// be reflected in parameter's type. This is only used by FunctionProtoType; /// but is in FunctionType to make this class available during the; /// specification of the bases of FunctionProtoType.; ///; /// It makes sense to model language features this way when there's some; /// sort of parameter-specific override (such as an attribute) that; /// affects how the function is called. For example, the ARC ns_consumed; /// attribute changes whether a parameter is passed at +0 (the default); /// or +1 (ns_consumed). This must be reflected in the function type,; /// but isn't really a change to the parameter type.; ///; /// One serious disadvantage of modelling language features this way is; /// that they generally do not work with language features that attempt; /// to destructure types. For example, template argument deduction will; /// not be able to match a parameter declared as; /// T (*)(U); /// against an argument of type; /// void (*)(__attribute__((ns_consumed)) id); /// because the substitution of T=void, U=id into the former will; /// not produce the latter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:66,simpl,simply,66,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['simpl'],['simply']
Usability,/// Interface for visiting interesting IV users that are recognized but not; /// simplified by this utility.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:81,simpl,simplified,81,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,1,['simpl'],['simplified']
Usability,"/// Interface to connect the parser with the registry and more.; ///; /// The parser uses the Sema instance passed into; /// parseMatcherExpression() to handle all matcher tokens. The simplest; /// processor implementation would simply call into the registry to create; /// the matchers.; /// However, a more complex processor might decide to intercept the matcher; /// creation and do some extra work. For example, it could apply some; /// transformation to the matcher by adding some id() nodes, or could detect; /// specific matcher nodes for more efficient lookup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:184,simpl,simplest,184,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,2,['simpl'],"['simplest', 'simply']"
Usability,"/// Invoke a case on the derived class, inferring the type of the Case from; /// the first input of the given callable.; /// Note: This inference rules for this overload are very simple: strip; /// pointers and references.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TypeSwitch.h:179,simpl,simple,179,interpreter/llvm-project/llvm/include/llvm/ADT/TypeSwitch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TypeSwitch.h,1,['simpl'],['simple']
Usability,"/// Is destruction of this variable entirely suppressed? If so, the variable; /// need not have a usable destructor at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:98,usab,usable,98,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['usab'],['usable']
Usability,/// Is this a simple region?; ///; /// A region is simple if it has exactly one exit and one entry edge.; ///; /// @return True if the Region is simple.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:14,simpl,simple,14,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,3,['simpl'],['simple']
Usability,"/// Is this instruction potentially interesting for further simplification after; /// widening it's type? In other words, can the extend be safely hoisted out of; /// the loop with SCEV reducing the value to a recurrence on the same loop. If; /// so, return the extended recurrence and the kind of extension used. Otherwise; /// return {nullptr, ExtendKind::Unknown}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:60,simpl,simplification,60,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['simpl'],['simplification']
Usability,"/// IsBetterFallthrough - Return true if it would be clearly better to; /// fall-through to MBB1 than to fall through into MBB2. This has to return; /// a strict ordering, returning true for both (MBB1,MBB2) and (MBB2,MBB1) will; /// result in infinite loops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:53,clear,clearly,53,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,1,['clear'],['clearly']
Usability,/// It can be advantageous to detach complex constants from their uses to make; /// their generation cheaper. This hook allows targets to report when such; /// transformations might negatively effect the code generation of the; /// underlying operation. The motivating example is divides whereby hoisting; /// constants prevents the code generator's ability to transform them into; /// combinations of simpler operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:402,simpl,simpler,402,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['simpl'],['simpler']
Usability,/// Iterate over all symbols and try to simplify them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:40,simpl,simplify,40,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['simpl'],['simplify']
Usability,"/// Iteratively inline hot callsites of a function.; ///; /// Iteratively traverse all callsites of the function \p F, so as to; /// find out callsites with corresponding inline instances.; ///; /// For such callsites,; /// - If it is hot enough, inline the callsites and adds callsites of the callee; /// into the caller. If the call is an indirect call, first promote; /// it to direct call. Each indirect call is limited with a single target.; ///; /// - If a callsite is not inlined, merge the its profile to the outline; /// version (if --sample-profile-merge-inlinee is true), or scale the; /// counters of standalone function based on the profile of inlined; /// instances (if --sample-profile-merge-inlinee is false).; ///; /// Later passes may consume the updated profiles.; ///; /// \param F function to perform iterative inlining.; /// \param InlinedGUIDs a set to be updated to include all GUIDs that are; /// inlined in the profiled binary.; ///; /// \returns True if there is any inline happened.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp:902,GUID,GUIDs,902,interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,1,['GUID'],['GUIDs']
Usability,/// Iteratively perform simplification on a worklist of users of the; /// specified induction variable. This is the top-level driver that applies; /// all simplifications to users of an IV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:24,simpl,simplification,24,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,2,['simpl'],"['simplification', 'simplifications']"
Usability,"/// Iteratively perform simplification on a worklist of users; /// of the specified induction variable. Each successive simplification may push; /// more users which may themselves be candidates for simplification.; ///; /// This algorithm does not require IVUsers analysis. Instead, it simplifies; /// instructions in-place during analysis. Rather than rewriting induction; /// variables bottom-up from their users, it transforms a chain of IVUsers; /// top-down, updating the IR only when it encounters a clear optimization; /// opportunity.; ///; /// Once DisableIVRewrite is default, LSR will be the only client of IVUsers.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:24,simpl,simplification,24,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,5,"['clear', 'simpl']","['clear', 'simplification', 'simplifies']"
Usability,"/// Iterator for locations and the values they contain. Dereferencing; /// produces a struct/pair containing the LocIdx key for this location,; /// and a reference to the value currently stored. Simplifies the process; /// of seeking a particular location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:195,Simpl,Simplifies,195,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['Simpl'],['Simplifies']
Usability,/// Keep track of simplification of Phi nodes.; /// Accept the set of all phi nodes and erase phi node from this set; /// if it is simplified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:18,simpl,simplification,18,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,['simpl'],"['simplification', 'simplified']"
Usability,/// Keep track of the new value so that we can undo it by replacing; /// instances of the new value with the original value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:47,undo,undo,47,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['undo'],['undo']
Usability,/// Keep track of the values which map back (through function arguments) to; /// allocas on the caller stack which could be simplified through SROA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:124,simpl,simplified,124,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['simpl'],['simplified']
Usability,/// Keeps clearance information for all registers. Note that this; /// is different from the usual definition notion of liveness. The CPU; /// doesn't care whether or not we consider a register killed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:10,clear,clearance,10,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,1,['clear'],['clearance']
Usability,"/// Keeps track of the tokens for the currently lexed directive. Once a; /// directive is fully lexed and ""committed"" then the tokens get appended to; /// \p Tokens and \p CurDirToks is cleared for the next directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp:186,clear,cleared,186,interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,1,['clear'],['cleared']
Usability,"/// LLT is packed into 64 bits as follows:; /// isScalar : 1; /// isPointer : 1; /// isVector : 1; /// with 61 bits remaining for Kind-specific data, packed in bitfields; /// as described below. As there isn't a simple portable way to pack bits; /// into bitfields, here the different fields in the packed structure is; /// described in static const *Field variables. Each of these variables; /// is a 2-element array, with the first element describing the bitfield size; /// and the second element describing the bitfield offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h:212,simpl,simple,212,interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h,1,['simpl'],['simple']
Usability,"/// LLVM Basic Block Representation; ///; /// This represents a single basic block in LLVM. A basic block is simply a; /// container of instructions that execute sequentially. Basic blocks are Values; /// because they are referenced by instructions such as branches and switch; /// tables. The type of a BasicBlock is ""Type::LabelTy"" because the basic block; /// represents a label to which a branch can jump.; ///; /// A well formed basic block is formed of a list of non-terminating; /// instructions followed by a single terminator instruction. Terminator; /// instructions may not occur in the middle of basic blocks, and must terminate; /// the blocks. The BasicBlock class allows malformed basic blocks to occur; /// because it may be useful in the intermediate stage of constructing or; /// modifying a program. However, the verifier will ensure that basic blocks are; /// ""well formed"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:109,simpl,simply,109,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,1,['simpl'],['simply']
Usability,"/// LValue - This represents an lvalue references. Because C/C++ allow; /// bitfields, this is not a simple LLVM pointer, it may be a pointer plus a; /// bitrange.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:101,simpl,simple,101,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,1,['simpl'],['simple']
Usability,/// Language options used to parse the module map itself.; ///; /// These are always simple C language options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:85,simpl,simple,85,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['simpl'],['simple']
Usability,/// Legacy pass for lowering is.constant intrinsics out of the IR.; ///; /// When this pass is run over a function it converts is.constant intrinsics; /// into 'true' or 'false'. This complements the normal constant folding; /// to 'true' as part of Instruction Simplify passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerConstantIntrinsics.cpp:262,Simpl,Simplify,262,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerConstantIntrinsics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerConstantIntrinsics.cpp,1,['Simpl'],['Simplify']
Usability,"/// Legalize an instruction by splitting it into simpler parts, hopefully; /// understood by the target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:49,simpl,simpler,49,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,1,['simpl'],['simpler']
Usability,"/// LexTokenInternal - This implements a simple C family lexer. It is an; /// extremely performance critical piece of code. This assumes that the buffer; /// has a null character at the end of the file. This returns a preprocessing; /// token, not a normal token, as such, it is an internal interface. It assumes; /// that the Flags of result have been cleared before calling this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:41,simpl,simple,41,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,2,"['clear', 'simpl']","['cleared', 'simple']"
Usability,"/// Lexer - This provides a simple interface that turns a text buffer into a; /// stream of tokens. This provides no support for file reading or buffering,; /// or buffering/seeking of tokens, only forward lexing is supported. It relies; /// on the specified Preprocessor object to handle preprocessor directives, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:28,simpl,simple,28,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['simpl'],['simple']
Usability,"/// Like VMap, but maps only unsimplified instructions. Values in the map; /// may be dangling, it is only intended to be used via isSimplified(), to; /// check whether the main VMap mapping involves simplification or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:200,simpl,simplification,200,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,1,['simpl'],['simplification']
Usability,"/// Like \p simplifyInstruction but the operands of \p I are replaced with; /// \p NewOps. Returns a simplified value, or null if none was found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:12,simpl,simplifyInstruction,12,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,2,['simpl'],"['simplified', 'simplifyInstruction']"
Usability,"/// List of equivalence classes of atoms. For each equivalence class, the; /// original constraints imply that all atoms in it must be equivalent.; /// Simplification replaces all occurrences of atoms in an equivalence class; /// with a single representative atom from the class.; /// Does not contain equivalence classes with just one member or atoms; /// contained in `TrueAtoms` or `FalseAtoms`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h:152,Simpl,Simplification,152,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,1,['Simpl'],['Simplification']
Usability,"/// List of recently emitted OMPCanonicalLoops.; ///; /// Since OMPCanonicalLoops are nested inside other statements (in particular; /// CapturedStmt generated by OMPExecutableDirective and non-perfectly nested; /// loops), we cannot directly call OMPEmitOMPCanonicalLoop and receive its; /// llvm::CanonicalLoopInfo. Instead, we call EmitStmt and any; /// OMPEmitOMPCanonicalLoop called by it will add its CanonicalLoopInfo to; /// this stack when done. Entering a new loop requires clearing this list; it; /// either means we start parsing a new loop nest (in which case the previous; /// loop nest goes out of scope) or a second loop in the same level in which; /// case it would be ambiguous into which of the two (or more) loops the loop; /// nest would extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:484,clear,clearing,484,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['clear'],['clearing']
Usability,"/// List of type identifiers used by this function in llvm.type.test; /// intrinsics referenced by something other than an llvm.assume intrinsic,; /// represented as GUIDs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:166,GUID,GUIDs,166,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUIDs']
Usability,/// Load (or add) an immediate into a register.; ///; /// @param ImmValue The immediate to load.; /// @param DstReg The register that will hold the immediate.; /// @param SrcReg A register to add to the immediate or Mips::NoRegister; /// for a simple initialization.; /// @param Is32BitImm Is ImmValue 32-bit or 64-bit?; /// @param IsAddress True if the immediate represents an address. False if it; /// is an integer.; /// @param IDLoc Location of the immediate in the source file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:244,simpl,simple,244,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['simpl'],['simple']
Usability,/// Load and verify that a PCH file is usable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:39,usab,usable,39,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['usab'],['usable']
Usability,/// Loads are not emitted to the program immediately. We bunch them up and; /// then emit token factor nodes when possible. This allows us to get simple; /// disambiguation between loads without worrying about alias analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:146,simpl,simple,146,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,1,['simpl'],['simple']
Usability,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:161,simpl,simplify,161,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,5,['simpl'],"['simplified', 'simplify', 'simply']"
Usability,"/// Look at Op. At this point, we know that only the OriginalDemandedBits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning the; /// original and new nodes in Old and New. Otherwise, analyze the expression and; /// return a mask of Known bits for the expression (used to simplify the; /// caller). The Known bits may only be accurate for those bits in the; /// OriginalDemandedBits and OriginalDemandedElts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:164,simpl,simplify,164,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,3,['simpl'],"['simplified', 'simplify']"
Usability,"/// Look at Vector Op. At this point, we know that only the DemandedElts; /// elements of the result of Op are ever used downstream. If we can use; /// this information to simplify Op, create a new simplified DAG node and; /// return true, storing the original and new nodes in TLO.; /// Otherwise, analyze the expression and return a mask of KnownUndef and; /// KnownZero elements for the expression (used to simplify the caller).; /// The KnownUndef/Zero elements may only be accurate for those bits; /// in the DemandedMask.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:172,simpl,simplify,172,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,5,['simpl'],"['simplified', 'simplify', 'simply']"
Usability,"/// Looks through shuffles trying to reduce final number of shuffles in the; /// code. The function looks through the previously emitted shuffle; /// instructions and properly mark indices in mask as undef.; /// For example, given the code; /// \code; /// %s1 = shufflevector <2 x ty> %0, poison, <1, 0>; /// %s2 = shufflevector <2 x ty> %1, poison, <1, 0>; /// \endcode; /// and if need to emit shuffle of %s1 and %s2 with mask <1, 0, 3, 2>, it will; /// look through %s1 and %s2 and select vectors %0 and %1 with mask; /// <0, 1, 2, 3> for the shuffle.; /// If 2 operands are of different size, the smallest one will be resized and; /// the mask recalculated properly.; /// For example, given the code; /// \code; /// %s1 = shufflevector <2 x ty> %0, poison, <1, 0, 1, 0>; /// %s2 = shufflevector <2 x ty> %1, poison, <1, 0, 1, 0>; /// \endcode; /// and if need to emit shuffle of %s1 and %s2 with mask <1, 0, 5, 4>, it will; /// look through %s1 and %s2 and select vectors %0 and %1 with mask; /// <0, 1, 2, 3> for the shuffle.; /// So, it tries to transform permutations to simple vector merge, if; /// possible.; /// \param V The input vector which must be shuffled using the given \p Mask.; /// If the better candidate is found, \p V is set to this best candidate; /// vector.; /// \param Mask The input mask for the shuffle. If the best candidate is found; /// during looking-through-shuffles attempt, it is updated accordingly.; /// \param SinglePermute true if the shuffle operation is originally a; /// single-value-permutation. In this case the look-through-shuffles procedure; /// may look for resizing shuffles as the best candidates.; /// \return true if the shuffle results in the non-resizing identity shuffle; /// (and thus can be ignored), false - otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:1078,simpl,simple,1078,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['simpl'],['simple']
Usability,"/// Loop passes should use this method to indicate they have deleted a loop; /// from the nest.; ///; /// Note that this loop must either be the current loop or a subloop of the; /// current loop. This routine must be called prior to removing the loop from; /// the loop nest.; ///; /// If this is called for the current loop, in addition to clearing any; /// state, this routine will mark that the current loop should be skipped by; /// the rest of the pass management infrastructure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:342,clear,clearing,342,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,1,['clear'],['clearing']
Usability,/// Loop unroll pass that will support both full and partial unrolling.; /// It is a function pass to have access to function and module analyses.; /// It will also put loops into canonical form (simplified and LCSSA).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h:196,simpl,simplified,196,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopUnrollPass.h,1,['simpl'],['simplified']
Usability,"/// Lower a vector shuffle using the SHUFPS instruction.; ///; /// This is a helper routine dedicated to lowering vector shuffles using SHUFPS.; /// It makes no assumptions about whether this is the *best* lowering, it simply; /// uses it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:219,simpl,simply,219,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simply']
Usability,"/// LowerFormalArguments32 - V8 uses a very simple ABI, where all values are; /// passed in either one or two GPRs, including FP values. TODO: we should; /// pass FP values in FP registers for fastcc functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:44,simpl,simple,44,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,1,['simpl'],['simple']
Usability,"/// LowerIntrinsics - This pass rewrites calls to the llvm.gcread or; /// llvm.gcwrite intrinsics, replacing them with simple loads and stores as; /// directed by the GCStrategy. It also performs automatic root initialization; /// and custom intrinsic lowering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GCRootLowering.cpp:119,simpl,simple,119,interpreter/llvm-project/llvm/lib/CodeGen/GCRootLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GCRootLowering.cpp,1,['simpl'],['simple']
Usability,"/// LowerIntrinsics - This pass rewrites calls to the llvm.gcread or; /// llvm.gcwrite intrinsics, replacing them with simple loads and stores as; /// directed by the GCStrategy. It also performs automatic root initialization; /// and custom intrinsic lowering.; ///; /// This pass requires `CollectorMetadataAnalysis`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h:119,simpl,simple,119,interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,1,['simpl'],['simple']
Usability,"/// MCRegisterInfo base class - We assume that the target defines a static; /// array of MCRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///; /// Note this class is designed to be a base class of TargetRegisterInfo, which; /// is the interface used by codegen. However, specific targets *should never*; /// specialize this class. MCRegisterInfo should only contain getters to access; /// TableGen generated physical register data. It must not be extended with; /// virtual methods.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:194,simpl,simply,194,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['simpl'],['simply']
Usability,"/// MI is about to get destroyed (using narrow scalar). Internal data is; /// saved based on MI's address, clear it since it is no longer valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterBankInfo.h:107,clear,clear,107,interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterBankInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterBankInfo.h,1,['clear'],['clear']
Usability,/// Machine loop info used for guiding some heruistics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp:31,guid,guiding,31,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,1,['guid'],['guiding']
Usability,"/// Main generic intersect function.; /// It intersects all of the given range sets. If some of the given arguments; /// don't hold a range set (nullptr or std::nullopt), the function will skip; /// them.; ///; /// Available representations for the arguments are:; /// * RangeSet; /// * std::optional<RangeSet>; /// * RangeSet *; /// Pointer to a RangeSet is automatically assumed to be nullable and will get; /// checked as well as the optional version. If this behaviour is undesired,; /// please dereference the pointer in the call.; ///; /// Return type depends on the arguments' types. If we can be sure in compile; /// time that there will be a range set as a result, the returning type is; /// simply RangeSet, in other cases we have to back off to; /// std::optional<RangeSet>.; ///; /// Please, prefer optional range sets to raw pointers. If the last argument is; /// a raw pointer and all previous arguments are std::nullopt, it will cost one; /// additional check to convert RangeSet * into std::optional<RangeSet>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:701,simpl,simply,701,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['simpl'],['simply']
Usability,"/// Make an existing internal call edge within a single SCC into a ref; /// edge.; ///; /// Since SourceN and TargetN are part of a single SCC, this SCC may be; /// split up due to breaking a cycle in the call edges that formed it. If; /// that happens, then this routine will insert new SCCs into the postorder; /// list *before* the SCC of TargetN (previously the SCC of both). This; /// preserves postorder as the TargetN can reach all of the other nodes by; /// definition of previously being in a single SCC formed by the cycle from; /// SourceN to TargetN.; ///; /// The newly added SCCs are added *immediately* and contiguously; /// prior to the TargetN SCC and return the range covering the new SCCs in; /// the RefSCC's postorder sequence. You can directly iterate the returned; /// range to observe all of the new SCCs in postorder.; ///; /// Note that if SourceN and TargetN are in separate SCCs, the simpler; /// routine `switchTrivialInternalEdgeToRef` should be used instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:912,simpl,simpler,912,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['simpl'],['simpler']
Usability,/// Make sure all GlobalValues in this Module are fully read and clear the; /// Materializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:65,clear,clear,65,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['clear'],['clear']
Usability,"/// Manage the uniqued CXXDeductionGuideNameExtra, which contain; /// extra information for the name of a C++ deduction guide.; /// getCXXDeductionGuideName can be used to obtain a DeclarationName; /// from the corresponding template declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:120,guid,guide,120,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['guid'],['guide']
Usability,"/// Manages TObject-derived objects created in a PyROOT application; ///; /// This class is responsible to keep track of the creation of the objects; /// that need further memory management within ROOT. The `ClearProxiedObjects`; /// function is only called at PyROOT shutdown time. The `CallCppyyRecursiveRemove`; /// is called as part of the global list of cleanups object destruction.; ///; /// This class is intentionally not derived from TObject. See the; /// `PyROOT::RegulatorCleanup` class for more info.; ///; /// \note This class is not thread-safe on its own. We create one thread-local; /// object in PyROOTWrapper.cxx.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/TMemoryRegulator.h:208,Clear,ClearProxiedObjects,208,bindings/pyroot/pythonizations/src/TMemoryRegulator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/TMemoryRegulator.h,1,['Clear'],['ClearProxiedObjects']
Usability,"/// Map address space 7 to MVT::v5i32 because that's its in-memory; /// representation. This return value is vector-typed because there is no; /// MVT::i160 and it is not clear if one can be added. While this could; /// cause issues during codegen, these address space 7 pointers will be; /// rewritten away by then. Therefore, we can return MVT::v5i32 in order; /// to allow pre-codegen passes that query TargetTransformInfo, often for cost; /// modeling, to work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:171,clear,clear,171,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['clear'],['clear']
Usability,"/// Map from global value GUID to corresponding summary structures. Use a; /// std::map rather than a DenseMap so that pointers to the map's value_type; /// (which are used by ValueInfo) are not invalidated by insertion. Also it will; /// likely incur less overhead, as the value type is not very small and the size; /// of the map is unknown, resulting in inefficiencies due to repeated; /// insertions and resizing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:26,GUID,GUID,26,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,/// Map of a type GUID to type id string and summary (multimap used; /// in case of GUID conflicts).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:18,GUID,GUID,18,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,2,['GUID'],['GUID']
Usability,"/// Map of callee GUID considered for import into a given module to a pair; /// consisting of the largest threshold applied when deciding whether to; /// import it and, if we decided to import, a pointer to the summary instance; /// imported. If we decided not to import, the summary will be nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:18,GUID,GUID,18,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,1,['GUID'],['GUID']
Usability,"/// Map of global value GUID to its summary, used to identify values defined in; /// a particular module, and provide efficient access to their summary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:24,GUID,GUID,24,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,"/// Map that holds the correspondence between GUIDs in the summary index,; /// that came from indirect call profiles, and a value id generated by this; /// class to use in the VST and summary block records.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:46,GUID,GUIDs,46,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,2,['GUID'],['GUIDs']
Usability,/// Map that holds the correspondence between the GUID used in the combined; /// index and a value id generated by this class to use in references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:50,GUID,GUID,50,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['GUID'],['GUID']
Usability,/// Mapping from GUIDs to the corresponding MSGuidDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:17,GUID,GUIDs,17,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['GUID'],['GUIDs']
Usability,/// Mapping from extend bits to required operation:; /// shifter: 000 ==> uxtb; /// 001 ==> uxth; /// 010 ==> uxtw; /// 011 ==> uxtx; /// 100 ==> sxtb; /// 101 ==> sxth; /// 110 ==> sxtw; /// 111 ==> sxtx,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:74,ux,uxtb,74,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,4,['ux'],"['uxtb', 'uxth', 'uxtw', 'uxtx']"
Usability,"/// Mapping from original ID to GUID. If original ID can map to multiple; /// GUIDs, it will be mapped to 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:32,GUID,GUID,32,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,2,['GUID'],"['GUID', 'GUIDs']"
Usability,"/// Mapping from the already-imported declarations in the ""from""; /// context to the error status of the import of that declaration.; /// This map contains only the declarations that were not correctly; /// imported. The same declaration may or may not be included in; /// ImportedDecls. This map is updated continuously during imports and never; /// cleared (like ImportedDecls).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTImporter.h:351,clear,cleared,351,interpreter/llvm-project/clang/include/clang/AST/ASTImporter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTImporter.h,1,['clear'],['cleared']
Usability,"/// Mapping from the already-imported declarations in the ""to""; /// context to the error status of the import of that declaration.; /// This map contains only the declarations that were not correctly; /// imported. The same declaration may or may not be included in; /// ImportedFromDecls. This map is updated continuously during imports and; /// never cleared (like ImportedFromDecls).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTImporterSharedState.h:353,clear,cleared,353,interpreter/llvm-project/clang/include/clang/AST/ASTImporterSharedState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTImporterSharedState.h,1,['clear'],['cleared']
Usability,/// Mapping from type identifier GUIDs to type identifier and its summary; /// information. Produced by thin link.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:33,GUID,GUIDs,33,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUIDs']
Usability,"/// Mapping information for diagnostics.; ///; /// Mapping info is packed into four bits per diagnostic. The low three; /// bits are the mapping (an instance of diag::Severity), or zero if unset.; /// The high bit is set when the mapping was established as a user mapping.; /// If the high bit is clear, then the low bits are set to the default; /// value, and should be mapped with -pedantic, -Werror, etc.; ///; /// A new DiagState is created and kept around when diagnostic pragmas modify; /// the state so that we know what is the diagnostic state at any given; /// source location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:297,clear,clear,297,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['clear'],['clear']
Usability,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:559,usab,usable,559,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['usab'],['usable']
Usability,/// Marks (or clears) declaration as possibly loop counter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:14,clear,clears,14,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['clear'],['clears']
Usability,"/// Marks that the current location is not supposed to be reachable.; /// In !NDEBUG builds, prints the message and location info to stderr.; /// In NDEBUG builds, if the platform does not support a builtin unreachable; /// then we call an internal LLVM runtime function. Otherwise the behavior is; /// controlled by the CMake flag; /// -DLLVM_UNREACHABLE_OPTIMIZE; /// * When ""ON"" (default) llvm_unreachable() becomes an optimizer hint; /// that the current location is not supposed to be reachable: the hint; /// turns such code path into undefined behavior. On compilers that don't; /// support such hints, prints a reduced message instead and aborts the; /// program.; /// * When ""OFF"", a builtin_trap is emitted instead of an; // optimizer hint or printing a reduced message.; ///; /// Use this instead of assert(0). It conveys intent more clearly, suppresses; /// diagnostics for unreachable code paths, and allows compilers to omit; /// unnecessary code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:845,clear,clearly,845,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,1,['clear'],['clearly']
Usability,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:117,simpl,simplify,117,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['simpl'],['simplify']
Usability,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero. We use; /// this predicate to simplify operations downstream. Mask is known to be zero; /// for bits that V cannot have.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:101,simpl,simplify,101,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['simpl'],['simplify']
Usability,/// MaskedVectorIsZero - Return true if 'Op' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:112,simpl,simplify,112,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['simpl'],['simplify']
Usability,"/// Mass of a block.; ///; /// This class implements a sort of fixed-point fraction always between 0.0 and; /// 1.0. getMass() == std::numeric_limits<uint64_t>::max() indicates a value of; /// 1.0.; ///; /// Masses can be added and subtracted. Simple saturation arithmetic is used,; /// so arithmetic operations never overflow or underflow.; ///; /// Masses can be multiplied. Multiplication treats full mass as 1.0 and uses; /// an inexpensive floating-point algorithm that's off-by-one (almost, but not; /// quite, maximum precision).; ///; /// Masses can be scaled by \a BranchProbability at maximum precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:244,Simpl,Simple,244,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['Simpl'],['Simple']
Usability,"/// Match patterns that correspond to ""any-bits-set"" and ""all-bits-set"".; /// These will include a chain of 'or' or 'and'-shifted bits from a; /// common source value:; /// and (or (lshr X, C), ...), 1 --> (X & CMask) != 0; /// and (and (lshr X, C), ...), 1 --> (X & CMask) == CMask; /// Note: ""any-bits-clear"" and ""all-bits-clear"" are variations of these patterns; /// that differ only with a final 'not' of the result. We expect that final; /// 'not' to be folded with the compare that we create here (invert predicate).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp:304,clear,clear,304,interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,2,['clear'],['clear']
Usability,"/// Matcher descriptor for variadic functions.; ///; /// This class simply wraps a VariadicFunction with the right signature to export; /// it as a MatcherDescriptor.; /// This allows us to have one implementation of the interface for as many free; /// functions as we want, reducing the number of symbols and size of the; /// object file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:68,simpl,simply,68,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['simpl'],['simply']
Usability,"/// Matches AST nodes that have a parent that matches the provided; /// matcher.; ///; /// Given; /// \code; /// void f() { for (;;) { int x = 42; if (true) { int x = 43; } } }; /// \endcode; /// \c compoundStmt(hasParent(ifStmt())) matches ""{ int x = 43; }"".; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:270,Usab,Usable,270,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches AST nodes that have an ancestor that matches the provided; /// matcher.; ///; /// Given; /// \code; /// void f() { if (true) { int x = 42; } }; /// void g() { for (;;) { int x = 43; } }; /// \endcode; /// \c expr(integerLiteral(hasAncestor(ifStmt()))) matches \c 42, but not 43.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:301,Usab,Usable,301,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches AST nodes that have child AST nodes that match the; /// provided matcher.; ///; /// Example matches X, Y, Y::X, Z::Y, Z::Y::X; /// (matcher = cxxRecordDecl(forEach(cxxRecordDecl(hasName(""X""))); /// \code; /// class X {};; /// class Y { class X {}; }; // Matches Y, because Y::X is a class of name X; /// // inside Y.; /// class Z { class Y { class X {}; }; }; // Does not match Z.; /// \endcode; ///; /// ChildT must be an AST base type.; ///; /// As opposed to 'has', 'forEach' will cause a match for each result that; /// matches instead of only on the first one.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:588,Usab,Usable,588,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches AST nodes that have child AST nodes that match the; /// provided matcher.; ///; /// Example matches X, Y; /// (matcher = cxxRecordDecl(has(cxxRecordDecl(hasName(""X""))); /// \code; /// class X {}; // Matches X, because X::X is a class of name X inside X.; /// class Y { class X {}; };; /// class Z { class Y { class X {}; }; }; // Does not match Z.; /// \endcode; ///; /// ChildT must be an AST base type.; ///; /// Usable as: Any Matcher; /// Note that has is direct matcher, so it also matches things like implicit; /// casts and paren casts. If you are matching with expr then you should; /// probably consider using ignoringParenImpCasts like:; /// has(ignoringParenImpCasts(expr())).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:427,Usab,Usable,427,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches AST nodes that have descendant AST nodes that match the; /// provided matcher.; ///; /// Example matches X, A, A::X, B, B::C, B::C::X; /// (matcher = cxxRecordDecl(forEachDescendant(cxxRecordDecl(hasName(""X""))))); /// \code; /// class X {};; /// class A { class X {}; }; // Matches A, because A::X is a class of name; /// // X inside A.; /// class B { class C { class X {}; }; };; /// \endcode; ///; /// DescendantT must be an AST base type.; ///; /// As opposed to 'hasDescendant', 'forEachDescendant' will cause a match for; /// each result that matches instead of only on the first one.; ///; /// Note: Recursively combined ForEachDescendant can cause many matches:; /// cxxRecordDecl(forEachDescendant(cxxRecordDecl(; /// forEachDescendant(cxxRecordDecl()); /// ))); /// will match 10 times (plus injected class name matches) on:; /// \code; /// class A { class B { class C { class D { class E {}; }; }; }; };; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:950,Usab,Usable,950,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches AST nodes that have descendant AST nodes that match the; /// provided matcher.; ///; /// Example matches X, Y, Z; /// (matcher = cxxRecordDecl(hasDescendant(cxxRecordDecl(hasName(""X""))))); /// \code; /// class X {}; // Matches X, because X::X is a class of name X inside X.; /// class Y { class X {}; };; /// class Z { class Y { class X {}; }; };; /// \endcode; ///; /// DescendantT must be an AST base type.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:431,Usab,Usable,431,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches AST nodes that were expanded within files whose name is; /// partially matching a given regex.; ///; /// Example matches Y but not X; /// (matcher = cxxRecordDecl(isExpansionInFileMatching(""AST.*"")); /// \code; /// #include ""ASTMatcher.h""; /// class X {};; /// \endcode; /// ASTMatcher.h:; /// \code; /// class Y {};; /// \endcode; ///; /// Usable as: Matcher<Decl>, Matcher<Stmt>, Matcher<TypeLoc>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:353,Usab,Usable,353,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches AST nodes that were expanded within system-header-files.; ///; /// Example matches Y but not X; /// (matcher = cxxRecordDecl(isExpansionInSystemHeader()); /// \code; /// #include <SystemHeader.h>; /// class X {};; /// \endcode; /// SystemHeader.h:; /// \code; /// class Y {};; /// \endcode; ///; /// Usable as: Matcher<Decl>, Matcher<Stmt>, Matcher<TypeLoc>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:312,Usab,Usable,312,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches AST nodes that were expanded within the main-file.; ///; /// Example matches X but not Y; /// (matcher = cxxRecordDecl(isExpansionInMainFile()); /// \code; /// #include <Y.h>; /// class X {};; /// \endcode; /// Y.h:; /// \code; /// class Y {};; /// \endcode; ///; /// Usable as: Matcher<Decl>, Matcher<Stmt>, Matcher<TypeLoc>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:280,Usab,Usable,280,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches C++ classes that are directly or indirectly derived from a class; /// matching \c Base, or Objective-C classes that directly or indirectly; /// subclass a class matching \c Base.; ///; /// Note that a class is not considered to be derived from itself.; ///; /// Example matches Y, Z, C (Base == hasName(""X"")); /// \code; /// class X;; /// class Y : public X {}; // directly derived; /// class Z : public Y {}; // indirectly derived; /// typedef X A;; /// typedef A B;; /// class C : public B {}; // derived from a typedef of X; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""X"")):; /// \code; /// class Foo;; /// typedef Foo X;; /// class Bar : public Foo {}; // derived from a type that X is a typedef of; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""NSObject"")); /// \code; /// @interface NSObject @end; /// @interface Bar : NSObject @end; /// \endcode; ///; /// Usable as: Matcher<CXXRecordDecl>, Matcher<ObjCInterfaceDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:953,Usab,Usable,953,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches \c AutoType nodes where the deduced type is a specific type.; ///; /// Note: There is no \c TypeLoc for the deduced type and thus no; /// \c getDeducedLoc() matcher.; ///; /// Given; /// \code; /// auto a = 1;; /// auto b = 2.0;; /// \endcode; /// autoType(hasDeducedType(isInteger())); /// matches ""auto a""; ///; /// Usable as: Matcher<AutoType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:330,Usab,Usable,330,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches \c DecltypeType or \c UsingType nodes to find the underlying type.; ///; /// Given; /// \code; /// decltype(1) a = 1;; /// decltype(2.0) b = 2.0;; /// \endcode; /// decltypeType(hasUnderlyingType(isInteger())); /// matches the type of ""a""; ///; /// Usable as: Matcher<DecltypeType>, Matcher<UsingType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:261,Usab,Usable,261,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,/// Matches \c ParenType nodes where the inner type is a specific type.; ///; /// Given; /// \code; /// int (*ptr_to_array)[4];; /// int (*ptr_to_func)(int);; /// \endcode; ///; /// \c varDecl(hasType(pointsTo(parenType(innerType(functionType()))))) matches; /// \c ptr_to_func but not \c ptr_to_array.; ///; /// Usable as: Matcher<ParenType>,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:313,Usab,Usable,313,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches a node if the declaration associated with that node; /// matches the given matcher.; ///; /// The associated declaration is:; /// - for type nodes, the declaration of the underlying type; /// - for CallExpr, the declaration of the callee; /// - for MemberExpr, the declaration of the referenced member; /// - for CXXConstructExpr, the declaration of the constructor; /// - for CXXNewExpr, the declaration of the operator new; /// - for ObjCIvarExpr, the declaration of the ivar; ///; /// For type nodes, hasDeclaration will generally match the declaration of the; /// sugared type. Given; /// \code; /// class X {};; /// typedef X Y;; /// Y y;; /// \endcode; /// in varDecl(hasType(hasDeclaration(decl()))) the decl will match the; /// typedefDecl. A common use case is to match the underlying, desugared type.; /// This can be achieved by using the hasUnqualifiedDesugaredType matcher:; /// \code; /// varDecl(hasType(hasUnqualifiedDesugaredType(; /// recordType(hasDeclaration(decl()))))); /// \endcode; /// In this matcher, the decl will match the CXXRecordDecl of class X.; ///; /// Usable as: Matcher<AddrLabelExpr>, Matcher<CallExpr>,; /// Matcher<CXXConstructExpr>, Matcher<CXXNewExpr>, Matcher<DeclRefExpr>,; /// Matcher<EnumType>, Matcher<InjectedClassNameType>, Matcher<LabelStmt>,; /// Matcher<MemberExpr>, Matcher<QualType>, Matcher<RecordType>,; /// Matcher<TagType>, Matcher<TemplateSpecializationType>,; /// Matcher<TemplateTypeParmType>, Matcher<TypedefType>,; /// Matcher<UnresolvedUsingType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1099,Usab,Usable,1099,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches any node regardless of the submatcher.; ///; /// However, \c optionally will retain any bindings generated by the submatcher.; /// Useful when additional information which may or may not present about a main; /// matching node is desired.; ///; /// For example, in:; /// \code; /// class Foo {; /// int bar;; /// }; /// \endcode; /// The matcher:; /// \code; /// cxxRecordDecl(; /// optionally(has(; /// fieldDecl(hasName(""bar"")).bind(""var""); /// ))).bind(""record""); /// \endcode; /// will produce a result binding for both ""record"" and ""var"".; /// The matcher will produce a ""record"" binding for even if there is no data; /// member named ""bar"" in that class.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:683,Usab,Usable,683,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches any of the \p NodeMatchers with InnerMatchers nested within; ///; /// Given; /// \code; /// if (true);; /// for (; true; );; /// \endcode; /// with the matcher; /// \code; /// mapAnyOf(ifStmt, forStmt).with(; /// hasCondition(cxxBoolLiteralExpr(equals(true))); /// ).bind(""trueCond""); /// \endcode; /// matches the \c if and the \c for. It is equivalent to:; /// \code; /// auto trueCond = hasCondition(cxxBoolLiteralExpr(equals(true)));; /// anyOf(; /// ifStmt(trueCond).bind(""trueCond""),; /// forStmt(trueCond).bind(""trueCond""); /// );; /// \endcode; ///; /// The with() chain-call accepts zero or more matchers which are combined; /// as-if with allOf() in each of the node matchers.; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:704,Usab,Usable,704,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches arrays and C99 complex types that have a specific element; /// type.; ///; /// Given; /// \code; /// struct A {};; /// A a[7];; /// int b[7];; /// \endcode; /// arrayType(hasElementType(builtinType())); /// matches ""int b[7]""; ///; /// Usable as: Matcher<ArrayType>, Matcher<ComplexType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:248,Usab,Usable,248,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches atomic types with a specific value type.; ///; /// Given; /// \code; /// _Atomic(int) i;; /// _Atomic(float) f;; /// \endcode; /// atomicType(hasValueType(isInteger())); /// matches ""_Atomic(int) i""; ///; /// Usable as: Matcher<AtomicType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:221,Usab,Usable,221,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches constructor, conversion function, and deduction guide declarations; /// that have an explicit specifier if this explicit specifier is resolved to; /// true.; ///; /// Given; /// \code; /// template<bool b>; /// struct S {; /// S(int); // #1; /// explicit S(double); // #2; /// operator int(); // #3; /// explicit operator bool(); // #4; /// explicit(false) S(bool) // # 7; /// explicit(true) S(char) // # 8; /// explicit(b) S(S) // # 9; /// };; /// S(int) -> S<true> // #5; /// explicit S(double) -> S<false> // #6; /// \endcode; /// cxxConstructorDecl(isExplicit()) will match #2 and #8, but not #1, #7 or #9.; /// cxxConversionDecl(isExplicit()) will match #4, but not #3.; /// cxxDeductionGuideDecl(isExplicit()) will match #6, but not #5.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:60,guid,guide,60,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['guid'],['guide']
Usability,"/// Matches declarations of virtual methods and C++ base specifers that specify; /// virtual inheritance.; ///; /// Example:; /// \code; /// class A {; /// public:; /// virtual void x(); // matches x; /// };; /// \endcode; ///; /// Example:; /// \code; /// class Base {};; /// class DirectlyDerived : virtual Base {}; // matches Base; /// class IndirectlyDerived : DirectlyDerived, Base {}; // matches Base; /// \endcode; ///; /// Usable as: Matcher<CXXMethodDecl>, Matcher<CXXBaseSpecifier>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:431,Usab,Usable,431,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches explicit template specializations of function, class, or; /// static member variable template instantiations.; ///; /// Given; /// \code; /// template<typename T> void A(T t) { }; /// template<> void A(int N) { }; /// \endcode; /// functionDecl(isExplicitTemplateSpecialization()); /// matches the specialization A<int>().; ///; /// Usable as: Matcher<FunctionDecl>, Matcher<VarDecl>, Matcher<CXXRecordDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:345,Usab,Usable,345,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches if a declaration has a body attached.; ///; /// Example matches A, va, fa; /// \code; /// class A {};; /// class B; // Doesn't match, as it has no body.; /// int va;; /// extern int vb; // Doesn't match, as it doesn't define the variable.; /// void fa() {}; /// void fb(); // Doesn't match, as it has no body.; /// @interface X; /// - (void)ma; // Doesn't match, interface is declaration.; /// @end; /// @implementation X; /// - (void)ma {}; /// @end; /// \endcode; ///; /// Usable as: Matcher<TagDecl>, Matcher<VarDecl>, Matcher<FunctionDecl>,; /// Matcher<ObjCMethodDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:487,Usab,Usable,487,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches if a node refers to a declaration through a specific; /// using shadow declaration.; ///; /// Examples:; /// \code; /// namespace a { int f(); }; /// using a::f;; /// int x = f();; /// \endcode; /// declRefExpr(throughUsingDecl(anything())); /// matches \c f; ///; /// \code; /// namespace a { class X{}; }; /// using a::X;; /// X x;; /// \endcode; /// typeLoc(loc(usingType(throughUsingDecl(anything())))); /// matches \c X; ///; /// Usable as: Matcher<DeclRefExpr>, Matcher<UsingType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:447,Usab,Usable,447,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,/// Matches if all given matchers match.; ///; /// Usable as: Any Matcher,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:51,Usab,Usable,51,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches if any of the given matchers matches.; ///; /// Unlike \c anyOf, \c eachOf will generate a match result for each; /// matching submatcher.; ///; /// For example, in:; /// \code; /// class A { int a; int b; };; /// \endcode; /// The matcher:; /// \code; /// cxxRecordDecl(eachOf(has(fieldDecl(hasName(""a"")).bind(""v"")),; /// has(fieldDecl(hasName(""b"")).bind(""v"")))); /// \endcode; /// will generate two results binding ""v"", the first of which binds; /// the field declaration of \c a, the second the field declaration of; /// \c b.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:552,Usab,Usable,552,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,/// Matches if any of the given matchers matches.; ///; /// Usable as: Any Matcher,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:60,Usab,Usable,60,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches if the node or any descendant matches.; ///; /// Generates results for each match.; ///; /// For example, in:; /// \code; /// class A { class B {}; class C {}; };; /// \endcode; /// The matcher:; /// \code; /// cxxRecordDecl(hasName(""::A""),; /// findAll(cxxRecordDecl(isDefinition()).bind(""m""))); /// \endcode; /// will generate results for \c A, \c B and \c C.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:384,Usab,Usable,384,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches if the provided matcher does not match.; ///; /// Example matches Y (matcher = cxxRecordDecl(unless(hasName(""X"")))); /// \code; /// class X {};; /// class Y {};; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:197,Usab,Usable,197,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches if the type location of a node matches the inner matcher.; ///; /// Examples:; /// \code; /// int x;; /// \endcode; /// declaratorDecl(hasTypeLoc(loc(asString(""int"")))); /// matches int x; ///; /// \code; /// auto x = int(3);; /// \endcode; /// cxxTemporaryObjectExpr(hasTypeLoc(loc(asString(""int"")))); /// matches int(3); ///; /// \code; /// struct Foo { Foo(int, int); };; /// auto x = Foo(1, 2);; /// \endcode; /// cxxFunctionalCastExpr(hasTypeLoc(loc(asString(""struct Foo"")))); /// matches Foo(1, 2); ///; /// Usable as: Matcher<BlockDecl>, Matcher<CXXBaseSpecifier>,; /// Matcher<CXXCtorInitializer>, Matcher<CXXFunctionalCastExpr>,; /// Matcher<CXXNewExpr>, Matcher<CXXTemporaryObjectExpr>,; /// Matcher<CXXUnresolvedConstructExpr>,; /// Matcher<ClassTemplateSpecializationDecl>, Matcher<CompoundLiteralExpr>,; /// Matcher<DeclaratorDecl>, Matcher<ExplicitCastExpr>,; /// Matcher<ObjCPropertyDecl>, Matcher<TemplateArgumentLoc>,; /// Matcher<TypedefNameDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:526,Usab,Usable,526,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches literals that are equal to the given value of type ValueT.; ///; /// Given; /// \code; /// f('\0', false, 3.14, 42);; /// \endcode; /// characterLiteral(equals(0)); /// matches '\0'; /// cxxBoolLiteral(equals(false)) and cxxBoolLiteral(equals(0)); /// match false; /// floatLiteral(equals(3.14)) and floatLiteral(equals(314e-2)); /// match 3.14; /// integerLiteral(equals(42)); /// matches 42; ///; /// Note that you cannot directly match a negative numeric literal because the; /// minus sign is not part of the literal: It is a unary operator whose operand; /// is the positive numeric literal. Instead, you must use a unaryOperator(); /// matcher to match the minus sign:; ///; /// unaryOperator(hasOperatorName(""-""),; /// hasUnaryOperand(integerLiteral(equals(13)))); ///; /// Usable as: Matcher<CharacterLiteral>, Matcher<CXXBoolLiteralExpr>,; /// Matcher<FloatingLiteral>, Matcher<IntegerLiteral>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:793,Usab,Usable,793,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches overloaded operator names.; ///; /// Matches overloaded operator names specified in strings without the; /// ""operator"" prefix: e.g. ""<<"".; ///; /// Given:; /// \code; /// class A { int operator*(); };; /// const A &operator<<(const A &a, const A &b);; /// A a;; /// a << a; // <-- This matches; /// \endcode; ///; /// \c cxxOperatorCallExpr(hasOverloadedOperatorName(""<<""))) matches the; /// specified line and; /// \c cxxRecordDecl(hasMethod(hasOverloadedOperatorName(""*""))); /// matches the declaration of \c A.; ///; /// Usable as: Matcher<CXXOperatorCallExpr>, Matcher<FunctionDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:537,Usab,Usable,537,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Matches template instantiations of function, class, or static; /// member variable template instantiations.; ///; /// Given; /// \code; /// template <typename T> class X {}; class A {}; X<A> x;; /// \endcode; /// or; /// \code; /// template <typename T> class X {}; class A {}; template class X<A>;; /// \endcode; /// or; /// \code; /// template <typename T> class X {}; class A {}; extern template class X<A>;; /// \endcode; /// cxxRecordDecl(hasName(""::X""), isTemplateInstantiation()); /// matches the template instantiation of X<A>.; ///; /// But given; /// \code; /// template <typename T> class X {}; class A {};; /// template <> class X<A> {}; X<A> x;; /// \endcode; /// cxxRecordDecl(hasName(""::X""), isTemplateInstantiation()); /// does not match, as X<A> is an explicit template specialization.; ///; /// Usable as: Matcher<FunctionDecl>, Matcher<VarDecl>, Matcher<CXXRecordDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:817,Usab,Usable,817,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,/// Matches user-defined and implicitly generated deduction guide.; ///; /// Example matches the deduction guide.; /// \code; /// template<typename T>; /// class X { X(int) };; /// X(int) -> X<int>;; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:60,guid,guide,60,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['guid'],['guide']
Usability,"/// MaybeBindToTemporary - If the passed in expression has a record type with; /// a non-trivial destructor, this will return CXXBindTemporaryExpr. Otherwise; /// it simply returns the passed in expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:166,simpl,simply,166,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['simpl'],['simply']
Usability,"/// Measure the specified inline asm to determine an approximation of its; /// length.; /// Comments (which run till the next SeparatorString or newline) do not; /// count as an instruction.; /// Any other non-whitespace text is considered an instruction, with; /// multiple instructions separated by SeparatorString or newlines.; /// Variable-length instructions are not handled here; this function; /// may be overloaded in the target code to do that.; /// We implement a special case of the .space directive which takes only a; /// single integer argument in base 10 that is the size in bytes. This is a; /// restricted form of the GAS directive in that we only interpret; /// simple--i.e. not a logical or arithmetic expression--size values without; /// the optional fill value. This is primarily used for creating arbitrary; /// sized inline asm blocks for testing purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:680,simpl,simple--i,680,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,1,['simpl'],['simple--i']
Usability,/// MemRegionVisitor - this class implements a simple visitor for MemRegion; /// subclasses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h:47,simpl,simple,47,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,1,['simpl'],['simple']
Usability,"/// Merge 2 debug locations and apply it to the Instruction. If the; /// instruction is a CallIns, we need to traverse the inline chain to find; /// the common scope. This is not efficient for N-way merging as each time; /// you merge 2 iterations, you need to rebuild the hashmap to find the; /// common scope. However, we still choose this API because:; /// 1) Simplicity: it takes 2 locations instead of a list of locations.; /// 2) In worst case, it increases the complexity from O(N*I) to; /// O(2*N*I), where N is # of Instructions to merge, and I is the; /// maximum level of inline stack. So it is still linear.; /// 3) Merging of call instructions should be extremely rare in real; /// applications, thus the N-way merging should be in code path.; /// The DebugLoc attached to this instruction will be overwritten by the; /// merged DebugLoc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:363,Simpl,Simplicity,363,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['Simpl'],['Simplicity']
Usability,/// Merge \p Other into the currently assumed simplified value,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:46,simpl,simplified,46,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplified']
Usability,"/// Merge the two given lattice values. The interesting cases are merging two; /// FunctionSet values and a FunctionSet value with an Undefined value. For; /// these cases, we simply union the function sets. If the size of the union; /// is greater than the maximum functions we track, the merged value is; /// overdefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp:176,simpl,simply,176,interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,1,['simpl'],['simply']
Usability,/// Model the elimination of repeated loads that is expected to happen; /// whenever we simplify away the stores that would otherwise cause them to be; /// loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:88,simpl,simplify,88,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['simpl'],['simplify']
Usability,/// ModelUnderTrainingRunner - training mode implementation. It uses TFLite; /// to dynamically load and evaluate a TF SavedModel; /// (https://www.tensorflow.org/guide/saved_model) converted to TFLite. see; /// lib/Analysis/models/saved-model-to-tflite.py. Runtime performance is; /// sacrificed for ease of use while training.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ModelUnderTrainingRunner.h:163,guid,guide,163,interpreter/llvm-project/llvm/include/llvm/Analysis/ModelUnderTrainingRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ModelUnderTrainingRunner.h,1,['guid'],['guide']
Usability,/// Models a trivial copy or move constructor or trivial assignment operator; /// call with a simple bind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:94,simpl,simple,94,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['simpl'],['simple']
Usability,"/// Models arguments of a function call.; /// call-arguments:; /// delimited_list(expression, ','); /// Note: This construct is a simplification of the grammar rule for; /// `expression-list`, that is used in the definition of `call-expression`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h:130,simpl,simplification,130,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,1,['simpl'],['simplification']
Usability,/// Modifies the canonical loop a statically-scheduled workshare loop with a; /// user-specified chunk size.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in; /// the preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be inserted after the; /// loop.; /// \param ChunkSize The user-specified chunk size.; ///; /// \returns Point where to insert code after the workshare construct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:342,usab,usable,342,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['usab'],['usable']
Usability,"/// Modifies the canonical loop to be a dynamically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain, and then in each iteration; /// to update the loop counter.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param SchedType Type of scheduling to be passed to the init function.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param Chunk The size of loop chunk considered as a unit when; /// scheduling. If \p nullptr, defaults to 1.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:652,usab,usable,652,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['usab'],['usable']
Usability,"/// Modifies the canonical loop to be a statically-scheduled workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be inserted after; /// the loop.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:775,usab,usable,775,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['usab'],['usable']
Usability,"/// Modifies the canonical loop to be a statically-scheduled workshare loop; /// which is executed on the device; ///; /// This takes a \p CLI representing a canonical loop, such as the one; /// created by \see createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to call OpenMP device rtl function; /// which handles worksharing of loop body interations.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:705,usab,usable,705,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['usab'],['usable']
Usability,"/// Modifies the canonical loop to be a workshare loop.; ///; /// This takes a \p LoopInfo representing a canonical loop, such as the one; /// created by \p createCanonicalLoop and emits additional instructions to; /// turn it into a workshare loop. In particular, it calls to an OpenMP; /// runtime function in the preheader to obtain the loop bounds to be used in; /// the current thread, updates the relevant instructions in the canonical; /// loop and calls to an OpenMP runtime finalization function after the loop.; ///; /// The concrete transformation is done by applyStaticWorkshareLoop,; /// applyStaticChunkedWorkshareLoop, or applyDynamicWorkshareLoop, depending; /// on the value of \p SchedKind and \p ChunkSize.; ///; /// \param DL Debug location for instructions added for the; /// workshare-loop construct itself.; /// \param CLI A descriptor of the canonical loop to workshare.; /// \param AllocaIP An insertion point for Alloca instructions usable in the; /// preheader of the loop.; /// \param NeedsBarrier Indicates whether a barrier must be insterted after; /// the loop.; /// \param SchedKind Scheduling algorithm to use.; /// \param ChunkSize The chunk size for the inner loop.; /// \param HasSimdModifier Whether the simd modifier is present in the; /// schedule clause.; /// \param HasMonotonicModifier Whether the monotonic modifier is present in; /// the schedule clause.; /// \param HasNonmonotonicModifier Whether the nonmonotonic modifier is; /// present in the schedule clause.; /// \param HasOrderedClause Whether the (parameterless) ordered clause is; /// present.; /// \param LoopType Information about type of loop worksharing.; /// It corresponds to type of loop workshare OpenMP pragma.; ///; /// \returns Point where to insert code after the workshare construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:959,usab,usable,959,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['usab'],['usable']
Usability,"/// More limited version of SimplifyDemandedBits that can be used to ""look; /// through"" ops that don't contribute to the DemandedBits/DemandedElts -; /// bitwise ops etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:28,Simpl,SimplifyDemandedBits,28,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['Simpl'],['SimplifyDemandedBits']
Usability,"/// Most of the time transposes can be fused with matrix multiplies or can; /// be folded away via algebraic simplifications. This is the number of; /// transposes that we failed to make ""free"" via such optimizations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp:109,simpl,simplifications,109,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp,1,['simpl'],['simplifications']
Usability,"/// Move edges from a branch condition to a branch target; /// when the condition is simple.; ///; /// This restructures some of the work of addContextEdges. That function; /// creates edges this may destroy, but they work together to create a more; /// aesthetically set of edges around branches. After the call to; /// addContextEdges, we may have (1) an edge to the branch, (2) an edge from; /// the branch to the branch condition, and (3) an edge from the branch; /// condition to the branch target. We keep (1), but may wish to remove (2); /// and move the source of (3) to the branch if the branch condition is simple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:85,simpl,simple,85,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,2,['simpl'],['simple']
Usability,"/// Narrows PointerType (and similar) matchers to those where the; /// \c pointee matches a given matcher.; ///; /// Given; /// \code; /// int *a;; /// int const *b;; /// float const *f;; /// \endcode; /// pointerType(pointee(isConstQualified(), isInteger())); /// matches ""int const *b""; ///; /// Usable as: Matcher<BlockPointerType>, Matcher<MemberPointerType>,; /// Matcher<PointerType>, Matcher<ReferenceType>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:298,Usab,Usable,298,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// No overlap, simply keep this value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:16,simpl,simply,16,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['simpl'],['simply']
Usability,/// Nodes cannot simply be copied without violating tree invariants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h:17,simpl,simply,17,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h,1,['simpl'],['simply']
Usability,/// Normal class members are of more specific types and therefore; /// don't make it here. This function serves three purposes:; /// 1) instantiating function templates; /// 2) substituting friend and local function declarations; /// 3) substituting deduction guide declarations for nested class templates,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:260,guid,guide,260,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['guid'],['guide']
Usability,"/// Notify PhiValues that the cached information using V is no longer valid; ///; /// Whenever a phi has its operands modified the cached values for that phi; /// (and the phis that use that phi) become invalid. A user of PhiValues has; /// to notify it of this by calling invalidateValue on either the operand or; /// the phi, which will then clear the relevant cached information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h:344,clear,clear,344,interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PhiValues.h,1,['clear'],['clear']
Usability,"/// Number of bins of this histogram, excluding all overflow and underflow; /// bins. Simply the product of all axes' number of regular bins.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:86,Simpl,Simply,86,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['Simpl'],['Simply']
Usability,"/// Number of bins of this histogram, including all overflow and underflow; /// bins. Simply the product of all axes' total number of bins.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:86,Simpl,Simply,86,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['Simpl'],['Simply']
Usability,"/// Number of bytes of arguments this function has on the stack. If the callee; /// is expected to restore the argument stack this should be a multiple of 16,; /// all usable during a tail call.; ///; /// The alternative would forbid tail call optimisation in some cases: if we; /// want to transfer control from a function with 8-bytes of stack-argument; /// space to a function with 16-bytes then misalignment of this value would; /// make a stack adjustment necessary, which could not be undone by the; /// callee.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h:168,usab,usable,168,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.h,4,"['undo', 'usab']","['undone', 'usable']"
Usability,"/// Number of samples used from the profile.; ///; /// When a sampling record is used for the first time, the samples from; /// that record are added to this accumulator. Coverage is later computed; /// based on the total number of samples available in this function and; /// its callsites.; ///; /// Note that this accumulator tracks samples used from a single function; /// and all the inlined callsites. Strictly, we should have a map of counters; /// keyed by FunctionSamples pointers, but these stats are cleared after; /// every function, so we just need to keep a single counter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h:510,clear,cleared,510,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,1,['clear'],['cleared']
Usability,"/// ObjCList - This is a simple template class used to hold various lists of; /// decls etc, which is heavily used by the ObjC front-end. This only use case; /// this supports is setting the list all at once and then reading elements out; /// of it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,simpl,simple,25,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['simpl'],['simple']
Usability,/// Observe that the given method cannot be a key function.; /// Checks the key-function cache for the method's class and clears it; /// if matches the given declaration.; ///; /// This is used in ABIs where out-of-line definitions marked; /// inline are not considered to be key functions.; ///; /// \param method should be the declaration from the class definition,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:122,clear,clears,122,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['clear'],['clears']
Usability,"/// One can add additional datasets; /// These are simply added to the xml under a different name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/Channel.h:51,simpl,simply,51,roofit/histfactory/inc/RooStats/HistFactory/Channel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/Channel.h,1,['simpl'],['simply']
Usability,/// Only used by CXXDeductionGuideDecl. Indicates the kind; /// of the Deduction Guide that is implicitly generated; /// (used during overload resolution).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:81,Guid,Guide,81,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['Guid'],['Guide']
Usability,"/// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:136,simpl,simply,136,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['simpl'],['simply']
Usability,"/// Operands which will become dead if we rewrite the alloca.; ///; /// These are operands that in their particular use can be replaced with; /// poison when we rewrite the alloca. These show up in out-of-bounds inputs; /// to PHI nodes and the like. They aren't entirely dead (there might be; /// a GEP back into the bounds using it elsewhere) and nor is the PHI, but we; /// want to swap this particular input for poison to simplify the use lists of; /// the alloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:426,simpl,simplify,426,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['simpl'],['simplify']
Usability,"/// Opportunistically remove the callee from ReferencesToConsteval if we can.; /// It's OK if this fails; we'll also remove this in; /// HandleImmediateInvocations, but catching it here allows us to avoid; /// walking the AST looking for it in simple cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:244,simpl,simple,244,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['simpl'],['simple']
Usability,"/// Optimize a CCR definition used according to the condition code \p CC into; /// a simpler CCR value, potentially returning a new \p CC and replacing uses; /// of chain values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:85,simpl,simpler,85,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['simpl'],['simpler']
Usability,"/// Optimize an EFLAGS definition used according to the condition code \p CC; /// into a simpler EFLAGS value, potentially returning a new \p CC and replacing; /// uses of chain values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:89,simpl,simpler,89,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['simpl'],['simpler']
Usability,"/// Options for the built-in model, or empty to not apply them.; // FIXME: Remove this option once the framework supports composing analyses; // (at which point the built-in transfer functions can be simply a standalone; // analysis).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.h:200,simpl,simply,200,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.h,1,['simpl'],['simply']
Usability,/// Order may have elements assigned special value (size) which is out of; /// bounds. Such indices only appear on places which correspond to undef values; /// (see canReuseExtract for details) and used in order to avoid undef values; /// have effect on operands ordering.; /// The first loop below simply finds all unused indices and then the next loop; /// nest assigns these indices for undef values positions.; /// As an example below Order has two undef positions and they have assigned; /// values 3 and 7 respectively:; /// before: 6 9 5 4 9 2 1 0; /// after: 6 3 5 4 7 2 1 0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:299,simpl,simply,299,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['simpl'],['simply']
Usability,"/// Our current alias analysis API differentiates heavily between calls and; /// non-calls, and functions called on one usually assert on the other.; /// This class encapsulates the distinction to simplify other code that wants; /// ""Memory affecting instructions and related data"" to use as a key.; /// For example, this class is used as a densemap key in the use optimizer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:197,simpl,simplify,197,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['simpl'],['simplify']
Usability,"/// Overloaded to match the declaration of the expression's or value; /// declaration's type.; ///; /// In case of a value declaration (for example a variable declaration),; /// this resolves one layer of indirection. For example, in the value; /// declaration ""X x;"", cxxRecordDecl(hasName(""X"")) matches the declaration of; /// X, while varDecl(hasType(cxxRecordDecl(hasName(""X"")))) matches the; /// declaration of x.; ///; /// Example matches x (matcher = expr(hasType(cxxRecordDecl(hasName(""X""))))); /// and z (matcher = varDecl(hasType(cxxRecordDecl(hasName(""X""))))); /// and friend class X (matcher = friendDecl(hasType(""X"")); /// and public virtual X (matcher = cxxBaseSpecifier(hasType(; /// cxxRecordDecl(hasName(""X"")))); /// \code; /// class X {};; /// void y(X &x) { x; X z; }; /// class Y { friend class X; };; /// class Z : public virtual X {};; /// \endcode; ///; /// Example matches class Derived; /// (matcher = cxxRecordDecl(hasAnyBase(hasType(cxxRecordDecl(hasName(""Base"")))))); /// \code; /// class Base {};; /// class Derived : Base {};; /// \endcode; ///; /// Usable as: Matcher<Expr>, Matcher<FriendDecl>, Matcher<ValueDecl>,; /// Matcher<CXXBaseSpecifier>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1080,Usab,Usable,1080,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Usab'],['Usable']
Usability,"/// Override the execution seed with a fixed value.; ///; /// This hashing library uses a per-execution seed designed to change on each; /// run with high probability in order to ensure that the hash codes are not; /// attackable and to ensure that output which is intended to be stable does; /// not rely on the particulars of the hash codes produced.; ///; /// That said, there are use cases where it is important to be able to; /// reproduce *exactly* a specific behavior. To that end, we provide a function; /// which will forcibly set the seed to a fixed value. This must be done at the; /// start of the program, before any hashes are computed. Also, it cannot be; /// undone. This makes it thread-hostile and very hard to use outside of; /// immediately on start of a simple program designed for reproducible; /// behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:675,undo,undone,675,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,2,"['simpl', 'undo']","['simple', 'undone']"
Usability,/// Pair of physical register and lane mask.; /// This is not simply a std::pair typedef because the members should be named; /// clearly as they both have an integer type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h:62,simpl,simply,62,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBasicBlock.h,2,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"/// Parse 'declaration' after parsing 'declaration-specifiers; /// declarator'. This method parses the remainder of the declaration; /// (including any attributes or initializer, among other things) and; /// finalizes the declaration.; ///; /// init-declarator: [C99 6.7]; /// declarator; /// declarator '=' initializer; /// [GNU] declarator simple-asm-expr[opt] attributes[opt]; /// [GNU] declarator simple-asm-expr[opt] attributes[opt] '=' initializer; /// [C++] declarator initializer[opt]; ///; /// [C++] initializer:; /// [C++] '=' initializer-clause; /// [C++] '(' expression-list ')'; /// [C++0x] '=' 'default' [TODO]; /// [C++0x] '=' 'delete'; /// [C++0x] braced-init-list; ///; /// According to the standard grammar, =default and =delete are function; /// definitions, but that definitely doesn't fit with the parser here.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:342,simpl,simple-asm-expr,342,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,2,['simpl'],['simple-asm-expr']
Usability,"/// Parse a C++ pseudo-destructor expression after the base,; /// . or -> operator, and nested-name-specifier have already been; /// parsed. We're handling this fragment of the grammar:; ///; /// postfix-expression: [C++2a expr.post]; /// postfix-expression . template[opt] id-expression; /// postfix-expression -> template[opt] id-expression; ///; /// id-expression:; /// qualified-id; /// unqualified-id; ///; /// qualified-id:; /// nested-name-specifier template[opt] unqualified-id; ///; /// nested-name-specifier:; /// type-name ::; /// decltype-specifier :: FIXME: not implemented, but probably only; /// allowed in C++ grammar by accident; /// nested-name-specifier identifier ::; /// nested-name-specifier template[opt] simple-template-id ::; /// [...]; ///; /// unqualified-id:; /// ~ type-name; /// ~ decltype-specifier; /// [...]; ///; /// ... where the all but the last component of the nested-name-specifier; /// has already been parsed, and the base expression is not of a non-dependent; /// class type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:728,simpl,simple-template-id,728,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['simpl'],['simple-template-id']
Usability,"/// Parse a C++ unqualified-id (or a C identifier), which describes the; /// name of an entity.; ///; /// \code; /// unqualified-id: [C++ expr.prim.general]; /// identifier; /// operator-function-id; /// conversion-function-id; /// [C++0x] literal-operator-id [TODO]; /// ~ class-name; /// template-id; ///; /// \endcode; ///; /// \param SS The nested-name-specifier that preceded this unqualified-id. If; /// non-empty, then we are parsing the unqualified-id of a qualified-id.; ///; /// \param ObjectType if this unqualified-id occurs within a member access; /// expression, the type of the base object whose member is being accessed.; ///; /// \param ObjectHadErrors if this unqualified-id occurs within a member access; /// expression, indicates whether the original subexpressions had any errors.; /// When true, diagnostics for missing 'template' keyword will be supressed.; ///; /// \param EnteringContext whether we are entering the scope of the; /// nested-name-specifier.; ///; /// \param AllowDestructorName whether we allow parsing of a destructor name.; ///; /// \param AllowConstructorName whether we allow parsing a constructor name.; ///; /// \param AllowDeductionGuide whether we allow parsing a deduction guide name.; ///; /// \param Result on a successful parse, contains the parsed unqualified-id.; ///; /// \returns true if parsing fails, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:1223,guid,guide,1223,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['guid'],['guide']
Usability,/// Parse a simple identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/LayoutOverrideSource.cpp:12,simpl,simple,12,interpreter/llvm-project/clang/lib/Frontend/LayoutOverrideSource.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/LayoutOverrideSource.cpp,1,['simpl'],['simple']
Usability,/// Parse a version number.; ///; /// version:; /// simple-integer; /// simple-integer '.' simple-integer; /// simple-integer '_' simple-integer; /// simple-integer '.' simple-integer '.' simple-integer; /// simple-integer '_' simple-integer '_' simple-integer,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:52,simpl,simple-integer,52,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,11,['simpl'],['simple-integer']
Usability,"/// Parse an optional simple-asm-expr and attributes, and attach them to a; /// declarator. Returns true on an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:22,simpl,simple-asm-expr,22,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['simpl'],['simple-asm-expr']
Usability,"/// Parse global scope or nested-name-specifier if present.; ///; /// Parses a C++ global scope specifier ('::') or nested-name-specifier (which; /// may be preceded by '::'). Note that this routine will not parse ::new or; /// ::delete; it will just leave them in the token stream.; ///; /// '::'[opt] nested-name-specifier; /// '::'; ///; /// nested-name-specifier:; /// type-name '::'; /// namespace-name '::'; /// nested-name-specifier identifier '::'; /// nested-name-specifier 'template'[opt] simple-template-id '::'; ///; ///; /// \param SS the scope specifier that will be set to the parsed; /// nested-name-specifier (or empty); ///; /// \param ObjectType if this nested-name-specifier is being parsed following; /// the ""."" or ""->"" of a member access expression, this parameter provides the; /// type of the object whose members are being accessed.; ///; /// \param ObjectHadErrors if this unqualified-id occurs within a member access; /// expression, indicates whether the original subexpressions had any errors.; /// When true, diagnostics for missing 'template' keyword will be supressed.; ///; /// \param EnteringContext whether we will be entering into the context of; /// the nested-name-specifier after parsing it.; ///; /// \param MayBePseudoDestructor When non-NULL, points to a flag that; /// indicates whether this nested-name-specifier may be part of a; /// pseudo-destructor name. In this case, the flag will be set false; /// if we don't actually end up parsing a destructor name. Moreover,; /// if we do end up determining that we are parsing a destructor name,; /// the last component of the nested-name-specifier is not parsed as; /// part of the scope specifier.; ///; /// \param IsTypename If \c true, this nested-name-specifier is known to be; /// part of a type name. This is used to improve error recovery.; ///; /// \param LastII When non-NULL, points to an IdentifierInfo* that will be; /// filled in with the leading identifier in the last component of the; /// nest",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:499,simpl,simple-template-id,499,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['simpl'],['simple-template-id']
Usability,"/// Parse the receiver of an Objective-C++ message send.; ///; /// This routine parses the receiver of a message send in; /// Objective-C++ either as a type or as an expression. Note that this; /// routine must not be called to parse a send to 'super', since it; /// has no way to return such a result.; ///; /// \param IsExpr Whether the receiver was parsed as an expression.; ///; /// \param TypeOrExpr If the receiver was parsed as an expression (\c; /// IsExpr is true), the parsed expression. If the receiver was parsed; /// as a type (\c IsExpr is false), the parsed type.; ///; /// \returns True if an error occurred during parsing or semantic; /// analysis, in which case the arguments do not have valid; /// values. Otherwise, returns false for a successful parse.; ///; /// objc-receiver: [C++]; /// 'super' [not parsed here]; /// expression; /// simple-type-specifier; /// typename-specifier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:857,simpl,simple-type-specifier,857,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['simpl'],['simple-type-specifier']
Usability,"/// ParseBaseTypeSpecifier - Parse a C++ base-type-specifier which is either a; /// class name or decltype-specifier. Note that we only check that the result; /// names a type; semantic analysis will need to verify that the type names a; /// class. The result is either a type or null, depending on whether a type; /// name was found.; ///; /// base-type-specifier: [C++11 class.derived]; /// class-or-decltype; /// class-or-decltype: [C++11 class.derived]; /// nested-name-specifier[opt] class-name; /// decltype-specifier; /// class-name: [C++ class.name]; /// identifier; /// simple-template-id; ///; /// In C++98, instead of base-type-specifier, we have:; ///; /// ::[opt] nested-name-specifier[opt] class-name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:579,simpl,simple-template-id,579,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['simpl'],['simple-template-id']
Usability,"/// ParseCXXCondition - if/switch/while condition expression.; ///; /// condition:; /// expression; /// type-specifier-seq declarator '=' assignment-expression; /// [C++11] type-specifier-seq declarator '=' initializer-clause; /// [C++11] type-specifier-seq declarator braced-init-list; /// [Clang] type-specifier-seq ref-qualifier[opt] '[' identifier-list ']'; /// brace-or-equal-initializer; /// [GNU] type-specifier-seq declarator simple-asm-expr[opt] attributes[opt]; /// '=' assignment-expression; ///; /// In C++1z, a condition may in some contexts be preceded by an; /// optional init-statement. This function will parse that too.; ///; /// \param InitStmt If non-null, an init-statement is permitted, and if present; /// will be parsed and stored here.; ///; /// \param Loc The location of the start of the statement that requires this; /// condition, e.g., the ""for"" in a for loop.; ///; /// \param MissingOK Whether an empty condition is acceptable here. Otherwise; /// it is considered an error to be recovered from.; ///; /// \param FRI If non-null, a for range declaration is permitted, and if; /// present will be parsed and stored here, and a null result will be returned.; ///; /// \param EnterForConditionScope If true, enter a continue/break scope at the; /// appropriate moment for a 'for' loop.; ///; /// \returns The parsed condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:434,simpl,simple-asm-expr,434,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['simpl'],['simple-asm-expr']
Usability,"/// ParseCXXIdExpression - Handle id-expression.; ///; /// id-expression:; /// unqualified-id; /// qualified-id; ///; /// qualified-id:; /// '::'[opt] nested-name-specifier 'template'[opt] unqualified-id; /// '::' identifier; /// '::' operator-function-id; /// '::' template-id; ///; /// NOTE: The standard specifies that, for qualified-id, the parser does not; /// expect:; ///; /// '::' conversion-function-id; /// '::' '~' class-name; ///; /// This may cause a slight inconsistency on diagnostics:; ///; /// class C {};; /// namespace A {}; /// void f() {; /// :: A :: ~ C(); // Some Sema error about using destructor with a; /// // namespace.; /// :: ~ C(); // Some Parser error like 'unexpected ~'.; /// }; ///; /// We simplify the parser a bit and make it work like:; ///; /// qualified-id:; /// '::'[opt] nested-name-specifier 'template'[opt] unqualified-id; /// '::' unqualified-id; ///; /// That way Sema can handle and report similar errors for namespaces and the; /// global scope.; ///; /// The isAddressOfOperand parameter indicates that this id-expression is a; /// direct operand of the address-of operator. This is, besides member contexts,; /// the only place where a qualified-id naming a non-static class member may; /// appear.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:724,simpl,simplify,724,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['simpl'],['simplify']
Usability,/// ParseCXXSimpleTypeSpecifier - [C++ 7.1.5.2] Simple type specifiers.; /// This should only be called when the current token is known to be part of; /// simple-type-specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:48,Simpl,Simple,48,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,2,"['Simpl', 'simpl']","['Simple', 'simple-type-specifier']"
Usability,/// ParseCXXSimpleTypeSpecifier - [C++ 7.1.5.2] Simple type specifiers.; /// This should only be called when the current token is known to be part of; /// simple-type-specifier.; ///; /// simple-type-specifier:; /// '::'[opt] nested-name-specifier[opt] type-name; /// '::'[opt] nested-name-specifier 'template' simple-template-id [TODO]; /// char; /// wchar_t; /// bool; /// short; /// int; /// long; /// signed; /// unsigned; /// float; /// double; /// void; /// [GNU] typeof-specifier; /// [C++0x] auto [TODO]; ///; /// type-name:; /// class-name; /// enum-name; /// typedef-name; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:48,Simpl,Simple,48,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,4,"['Simpl', 'simpl']","['Simple', 'simple-template-id', 'simple-type-specifier']"
Usability,"/// ParseCXXTypeConstructExpression - Parse construction of a specified type.; /// Can be interpreted either as function-style casting (""int(x)""); /// or class type construction (""ClassType(x,y,z)""); /// or creation of a value-initialized type (""int()"").; /// See [C++ 5.2.3].; ///; /// postfix-expression: [C++ 5.2p1]; /// simple-type-specifier '(' expression-list[opt] ')'; /// [C++0x] simple-type-specifier braced-init-list; /// typename-specifier '(' expression-list[opt] ')'; /// [C++0x] typename-specifier braced-init-list; ///; /// In C++1z onwards, the type specifier can also be a template-name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:324,simpl,simple-type-specifier,324,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,2,['simpl'],['simple-type-specifier']
Usability,"/// ParseClassSpecifier - Parse a C++ class-specifier [C++ class] or; /// elaborated-type-specifier [C++ dcl.type.elab]; we can't tell which; /// until we reach the start of a definition or see a token that; /// cannot start a definition.; ///; /// class-specifier: [C++ class]; /// class-head '{' member-specification[opt] '}'; /// class-head '{' member-specification[opt] '}' attributes[opt]; /// class-head:; /// class-key identifier[opt] base-clause[opt]; /// class-key nested-name-specifier identifier base-clause[opt]; /// class-key nested-name-specifier[opt] simple-template-id; /// base-clause[opt]; /// [GNU] class-key attributes[opt] identifier[opt] base-clause[opt]; /// [GNU] class-key attributes[opt] nested-name-specifier; /// identifier base-clause[opt]; /// [GNU] class-key attributes[opt] nested-name-specifier[opt]; /// simple-template-id base-clause[opt]; /// class-key:; /// 'class'; /// 'struct'; /// 'union'; ///; /// elaborated-type-specifier: [C++ dcl.type.elab]; /// class-key ::[opt] nested-name-specifier[opt] identifier; /// class-key ::[opt] nested-name-specifier[opt] 'template'[opt]; /// simple-template-id; ///; /// Note that the C++ class-specifier and elaborated-type-specifier,; /// together, subsume the C99 struct-or-union-specifier:; ///; /// struct-or-union-specifier: [C99 6.7.2.1]; /// struct-or-union identifier[opt] '{' struct-contents '}'; /// struct-or-union identifier; /// [GNU] struct-or-union attributes[opt] identifier[opt] '{' struct-contents; /// '}' attributes[opt]; /// [GNU] struct-or-union attributes[opt] identifier; /// struct-or-union:; /// 'struct'; /// 'union'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:566,simpl,simple-template-id,566,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,3,['simpl'],['simple-template-id']
Usability,"/// ParseDeclaration - Parse a full 'declaration', which consists of; /// declaration-specifiers, some number of declarators, and a semicolon.; /// 'Context' should be a DeclaratorContext value. This returns the; /// location of the semicolon in DeclEnd.; ///; /// declaration: [C99 6.7]; /// block-declaration ->; /// simple-declaration; /// others [FIXME]; /// [C++] template-declaration; /// [C++] namespace-definition; /// [C++] using-directive; /// [C++] using-declaration; /// [C++11/C11] static_assert-declaration; /// others... [FIXME]; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:319,simpl,simple-declaration,319,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['simpl'],['simple-declaration']
Usability,"/// ParseDirectDeclarator; /// direct-declarator: [C99 6.7.5]; /// [C99] identifier; /// '(' declarator ')'; /// [GNU] '(' attributes declarator ')'; /// [C90] direct-declarator '[' constant-expression[opt] ']'; /// [C99] direct-declarator '[' type-qual-list[opt] assignment-expr[opt] ']'; /// [C99] direct-declarator '[' 'static' type-qual-list[opt] assign-expr ']'; /// [C99] direct-declarator '[' type-qual-list 'static' assignment-expr ']'; /// [C99] direct-declarator '[' type-qual-list[opt] '*' ']'; /// [C++11] direct-declarator '[' constant-expression[opt] ']'; /// attribute-specifier-seq[opt]; /// direct-declarator '(' parameter-type-list ')'; /// direct-declarator '(' identifier-list[opt] ')'; /// [GNU] direct-declarator '(' parameter-forward-declarations; /// parameter-type-list[opt] ')'; /// [C++] direct-declarator '(' parameter-declaration-clause ')'; /// cv-qualifier-seq[opt] exception-specification[opt]; /// [C++11] direct-declarator '(' parameter-declaration-clause ')'; /// attribute-specifier-seq[opt] cv-qualifier-seq[opt]; /// ref-qualifier[opt] exception-specification[opt]; /// [C++] declarator-id; /// [C++11] declarator-id attribute-specifier-seq[opt]; ///; /// declarator-id: [C++ 8]; /// '...'[opt] id-expression; /// '::'[opt] nested-name-specifier[opt] type-name; ///; /// id-expression: [C++ 5.1]; /// unqualified-id; /// qualified-id; ///; /// unqualified-id: [C++ 5.1]; /// identifier; /// operator-function-id; /// conversion-function-id; /// '~' class-name; /// template-id; ///; /// C++17 adds the following, which we also handle here:; ///; /// simple-declaration:; /// <decl-spec> '[' identifier-list ']' brace-or-equal-initializer ';'; ///; /// Note, any additional constructs added here may need corresponding changes; /// in isConstructorDeclarator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:1588,simpl,simple-declaration,1588,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['simpl'],['simple-declaration']
Usability,"/// ParseExternalDeclaration:; ///; /// The `Attrs` that are passed in are C++11 attributes and appertain to the; /// declaration.; ///; /// external-declaration: [C99 6.9], declaration: [C++ dcl.dcl]; /// function-definition; /// declaration; /// [GNU] asm-definition; /// [GNU] __extension__ external-declaration; /// [OBJC] objc-class-definition; /// [OBJC] objc-class-declaration; /// [OBJC] objc-alias-declaration; /// [OBJC] objc-protocol-definition; /// [OBJC] objc-method-definition; /// [OBJC] @end; /// [C++] linkage-specification; /// [GNU] asm-definition:; /// simple-asm-expr ';'; /// [C++11] empty-declaration; /// [C++11] attribute-declaration; ///; /// [C++11] empty-declaration:; /// ';'; ///; /// [C++0x/GNU] 'extern' 'template' declaration; ///; /// [C++20] module-import-declaration; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:573,simpl,simple-asm-expr,573,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['simpl'],['simple-asm-expr']
Usability,/// ParseForStatement; /// for-statement: [C99 6.8.5.3]; /// 'for' '(' expr[opt] ';' expr[opt] ';' expr[opt] ')' statement; /// 'for' '(' declaration expr[opt] ';' expr[opt] ')' statement; /// [C++] 'for' '(' for-init-statement condition[opt] ';' expression[opt] ')'; /// [C++] statement; /// [C++0x] 'for'; /// 'co_await'[opt] [Coroutines]; /// '(' for-range-declaration ':' for-range-initializer ')'; /// statement; /// [OBJC2] 'for' '(' declaration 'in' expr ')' statement; /// [OBJC2] 'for' '(' expr 'in' expr ')' statement; ///; /// [C++] for-init-statement:; /// [C++] expression-statement; /// [C++] simple-declaration; /// [C++23] alias-declaration; ///; /// [C++0x] for-range-declaration:; /// [C++0x] attribute-specifier-seq[opt] type-specifier-seq declarator; /// [C++0x] for-range-initializer:; /// [C++0x] expression; /// [C++0x] braced-init-list [TODO],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp:607,simpl,simple-declaration,607,interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,1,['simpl'],['simple-declaration']
Usability,"/// ParseLambdaExpression - Parse a C++11 lambda expression.; ///; /// lambda-expression:; /// lambda-introducer lambda-declarator compound-statement; /// lambda-introducer '<' template-parameter-list '>'; /// requires-clause[opt] lambda-declarator compound-statement; ///; /// lambda-introducer:; /// '[' lambda-capture[opt] ']'; ///; /// lambda-capture:; /// capture-default; /// capture-list; /// capture-default ',' capture-list; ///; /// capture-default:; /// '&'; /// '='; ///; /// capture-list:; /// capture; /// capture-list ',' capture; ///; /// capture:; /// simple-capture; /// init-capture [C++1y]; ///; /// simple-capture:; /// identifier; /// '&' identifier; /// 'this'; ///; /// init-capture: [C++1y]; /// identifier initializer; /// '&' identifier initializer; ///; /// lambda-declarator:; /// lambda-specifiers [C++23]; /// '(' parameter-declaration-clause ')' lambda-specifiers; /// requires-clause[opt]; ///; /// lambda-specifiers:; /// decl-specifier-seq[opt] noexcept-specifier[opt]; /// attribute-specifier-seq[opt] trailing-return-type[opt]; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:569,simpl,simple-capture,569,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,2,['simpl'],['simple-capture']
Usability,/// ParseRequiresExpression - Parse a C++2a requires-expression.; /// C++2a [expr.prim.req]p1; /// A requires-expression provides a concise way to express requirements on; /// template arguments. A requirement is one that can be checked by name; /// lookup (6.4) or by checking properties of types and expressions.; ///; /// requires-expression:; /// 'requires' requirement-parameter-list[opt] requirement-body; ///; /// requirement-parameter-list:; /// '(' parameter-declaration-clause[opt] ')'; ///; /// requirement-body:; /// '{' requirement-seq '}'; ///; /// requirement-seq:; /// requirement; /// requirement-seq requirement; ///; /// requirement:; /// simple-requirement; /// type-requirement; /// compound-requirement; /// nested-requirement,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:658,simpl,simple-requirement,658,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['simpl'],['simple-requirement']
Usability,/// ParseSimpleAsm; ///; /// [GNU] simple-asm-expr:; /// 'asm' '(' asm-string-literal ')'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:35,simpl,simple-asm-expr,35,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['simpl'],['simple-asm-expr']
Usability,"/// ParseSimpleExpressionList - A simple comma-separated list of expressions,; /// used for misc language extensions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:34,simpl,simple,34,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['simpl'],['simple']
Usability,"/// ParseSimpleExpressionList - A simple comma-separated list of expressions,; /// used for misc language extensions.; ///; /// \verbatim; /// simple-expression-list:; /// assignment-expression; /// simple-expression-list , assignment-expression; /// \endverbatim",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:34,simpl,simple,34,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,3,['simpl'],"['simple', 'simple-expression-list']"
Usability,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:83,Simpl,SimpleValue,83,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,24,['Simpl'],['SimpleValue']
Usability,/// ParseValue - Parse a TableGen value. This returns null on error.; ///; /// Value ::= SimpleValue ValueSuffix*; /// ValueSuffix ::= '{' BitList '}'; /// ValueSuffix ::= '[' SliceElements ']'; /// ValueSuffix ::= '.' ID; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:89,Simpl,SimpleValue,89,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['Simpl'],['SimpleValue']
Usability,/// Parser of parameters for SimplifyCFG pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:29,Simpl,SimplifyCFG,29,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,1,['Simpl'],['SimplifyCFG']
Usability,/// Parses a simple integer literal to get its numeric value. Floating; /// point literals and user defined literals are rejected. Used primarily to; /// handle pragmas that accept integer arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:13,simpl,simple,13,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['simpl'],['simple']
Usability,/// Parses simple clause of a kind \a Kind.; ///; /// \param Kind Kind of current clause.; /// \param ParseOnly true to skip the clause's semantic actions and return; /// nullptr.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:11,simpl,simple,11,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['simpl'],['simple']
Usability,/// Parses simple expression in parens for single-expression clauses of OpenMP; /// constructs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:11,simpl,simple,11,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['simpl'],['simple']
Usability,/// Parses simple expression in parens for single-expression clauses of OpenMP; /// constructs.; /// \param RLoc Returned location of right paren.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:11,simpl,simple,11,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,2,['simpl'],['simple']
Usability,"/// Parses simple list of variables.; ///; /// \param Kind Kind of the directive.; /// \param Callback Callback function to be called for the list elements.; /// \param AllowScopeSpecifier true, if the variables can have fully; /// qualified names.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:11,simpl,simple,11,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['simpl'],['simple']
Usability,"/// Parsing of declarative OpenMP directives.; ///; /// threadprivate-directive:; /// annot_pragma_openmp 'threadprivate' simple-variable-list; /// annot_pragma_openmp_end; ///; /// allocate-directive:; /// annot_pragma_openmp 'allocate' simple-variable-list [<clause>]; /// annot_pragma_openmp_end; ///; /// declare-reduction-directive:; /// annot_pragma_openmp 'declare' 'reduction' [...]; /// annot_pragma_openmp_end; ///; /// declare-mapper-directive:; /// annot_pragma_openmp 'declare' 'mapper' '(' [<mapper-identifer> ':']; /// <type> <var> ')' [<clause>[[,] <clause>] ... ]; /// annot_pragma_openmp_end; ///; /// declare-simd-directive:; /// annot_pragma_openmp 'declare simd' {<clause> [,]}; /// annot_pragma_openmp_end; /// <function declaration/definition>; ///; /// requires directive:; /// annot_pragma_openmp 'requires' <clause> [[[,] <clause>] ... ]; /// annot_pragma_openmp_end; ///; /// assumes directive:; /// annot_pragma_openmp 'assumes' <clause> [[[,] <clause>] ... ]; /// annot_pragma_openmp_end; /// or; /// annot_pragma_openmp 'begin assumes' <clause> [[[,] <clause>] ... ]; /// annot_pragma_openmp 'end assumes'; /// annot_pragma_openmp_end; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:122,simpl,simple-variable-list,122,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,2,['simpl'],['simple-variable-list']
Usability,"/// Parsing of declarative or executable OpenMP directives.; ///; /// threadprivate-directive:; /// annot_pragma_openmp 'threadprivate' simple-variable-list; /// annot_pragma_openmp_end; ///; /// allocate-directive:; /// annot_pragma_openmp 'allocate' simple-variable-list; /// annot_pragma_openmp_end; ///; /// declare-reduction-directive:; /// annot_pragma_openmp 'declare' 'reduction' '(' <reduction_id> ':'; /// <type> {',' <type>} ':' <expression> ')' ['initializer' '('; /// ('omp_priv' '=' <expression>|<function_call>) ')']; /// annot_pragma_openmp_end; ///; /// declare-mapper-directive:; /// annot_pragma_openmp 'declare' 'mapper' '(' [<mapper-identifer> ':']; /// <type> <var> ')' [<clause>[[,] <clause>] ... ]; /// annot_pragma_openmp_end; ///; /// executable-directive:; /// annot_pragma_openmp 'parallel' | 'simd' | 'for' | 'sections' |; /// 'section' | 'single' | 'master' | 'critical' [ '(' <name> ')' ] |; /// 'parallel for' | 'parallel sections' | 'parallel master' | 'task' |; /// 'taskyield' | 'barrier' | 'taskwait' | 'flush' | 'ordered' | 'error'; /// | 'atomic' | 'for simd' | 'parallel for simd' | 'target' | 'target; /// data' | 'taskgroup' | 'teams' | 'taskloop' | 'taskloop simd' |; /// 'master taskloop' | 'master taskloop simd' | 'parallel master; /// taskloop' | 'parallel master taskloop simd' | 'distribute' | 'target; /// enter data' | 'target exit data' | 'target parallel' | 'target; /// parallel for' | 'target update' | 'distribute parallel for' |; /// 'distribute paralle for simd' | 'distribute simd' | 'target parallel; /// for simd' | 'target simd' | 'teams distribute' | 'teams distribute; /// simd' | 'teams distribute parallel for simd' | 'teams distribute; /// parallel for' | 'target teams' | 'target teams distribute' | 'target; /// teams distribute parallel for' | 'target teams distribute parallel; /// for simd' | 'target teams distribute simd' | 'masked' |; /// 'parallel masked' {clause} annot_pragma_openmp_end; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:136,simpl,simple-variable-list,136,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,2,['simpl'],['simple-variable-list']
Usability,/// Parsing of simple OpenMP clauses like 'default' or 'proc_bind'.; ///; /// default-clause:; /// 'default' '(' 'none' | 'shared' | 'private' | 'firstprivate' ')'; ///; /// proc_bind-clause:; /// 'proc_bind' '(' 'master' | 'close' | 'spread' ')'; ///; /// bind-clause:; /// 'bind' '(' 'teams' | 'parallel' | 'thread' ')'; ///; /// update-clause:; /// 'update' '(' 'in' | 'out' | 'inout' | 'mutexinoutset' |; /// 'inoutset' ')'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:15,simpl,simple,15,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['simpl'],['simple']
Usability,/// Parsing of simple OpenMP clauses like 'default' or 'proc_bind'.; ///; /// default-clause:; /// 'default' '(' 'none' | 'shared' | 'private' | 'firstprivate' '); ///; /// proc_bind-clause:; /// 'proc_bind' '(' 'master' | 'close' | 'spread' '); ///; /// device_type-clause:; /// 'device_type' '(' 'host' | 'nohost' | 'any' )',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:15,simpl,simple,15,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['simpl'],['simple']
Usability,/// PassManagerImpl_New is the actual class. PassManager is just the; /// wraper to publish simple pass manager interface,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h:92,simpl,simple,92,interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LegacyPassManager.h,1,['simpl'],['simple']
Usability,"/// Peel off the first \p PeelCount iterations of loop \p L.; ///; /// Note that this does not peel them off as a single straight-line block.; /// Rather, each iteration is peeled off separately, and needs to check the; /// exit condition.; /// For loops that dynamically execute \p PeelCount iterations or less; /// this provides a benefit, since the peeled off iterations, which account; /// for the bulk of dynamic execution, can be further simplified by scalar; /// optimizations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopPeel.cpp:444,simpl,simplified,444,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopPeel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopPeel.cpp,1,['simpl'],['simplified']
Usability,"/// Per-region scheduling driver, called back from; /// PostMachineScheduler::runOnMachineFunction. This is a simplified driver; /// that does not consider liveness or register pressure. It is useful for; /// PostRA scheduling and potentially other custom schedulers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:110,simpl,simplified,110,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['simpl'],['simplified']
Usability,"/// Perform a full dependency query for an access to the QueryInst's; /// specified memory location, returning the set of instructions that either; /// define or clobber the value.; ///; /// Warning: For a volatile query instruction, the dependencies will be; /// accurate, and thus usable for reordering, but it is never legal to; /// remove the query instruction.; ///; /// This method assumes the pointer has a ""NonLocal"" dependency within; /// QueryInst's parent basic block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h:283,usab,usable,283,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryDependenceAnalysis.h,1,['usab'],['usable']
Usability,/// Perform a purely local form of PRE that looks for diamond; /// control flow patterns and attempts to perform simple PRE at the join point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:113,simpl,simple,113,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['simpl'],['simple']
Usability,/// Perform optimizations common to nodes that compute two values. LoOp and HiOp; /// give the opcodes for the two computations that are being performed. Return; /// true if a simplification was made.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:176,simpl,simplification,176,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['simpl'],['simplification']
Usability,"/// Perform simple partial redundancy elimination of the VSETVLI instructions; /// we're about to insert by looking for cases where we can PRE from the; /// beginning of one block to the end of one of its predecessors. Specifically,; /// this is geared to catch the common case of a fixed length vsetvl in a single; /// block loop when it could execute once in the preheader instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:12,simpl,simple,12,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['simpl'],['simple']
Usability,/// Perform simple self-diagnostic and assert if there is anything obviously; /// wrong with the actions set up.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:12,simpl,simple,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,1,['simpl'],['simple']
Usability,"/// Perform simplification of memcpy's. If we have memcpy A; /// which copies X to Y, and memcpy B which copies Y to Z, then we can rewrite; /// B to be a memcpy from X to Z (or potentially a memmove, depending on; /// circumstances). This allows later passes to remove the first memcpy; /// altogether.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:12,simpl,simplification,12,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['simpl'],['simplification']
Usability,"/// Perform some cleanup and simplifications on loops after unrolling. It is; /// useful to simplify the IV's in the new loop, as well as do a quick; /// simplify/dce pass of the instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp:29,simpl,simplifications,29,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp,3,['simpl'],"['simplifications', 'simplify']"
Usability,/// Performs Loop Inst Simplify Pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h:23,Simpl,Simplify,23,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,1,['Simpl'],['Simplify']
Usability,/// Performs a few simplifications for operators which are associative; /// or commutative.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:19,simpl,simplifications,19,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['simpl'],['simplifications']
Usability,/// Performs a simple check to see if From type can be converted to To type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h:15,simpl,simple,15,interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h,1,['simpl'],['simple']
Usability,/// Performs basic CFG simplifications to assist other loop passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h:23,simpl,simplifications,23,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,1,['simpl'],['simplifications']
Usability,"/// Pick the highest total weight pair of edges that can both be laid out.; /// The edges in \p Edges[0] are assumed to have a different destination than; /// the edges in \p Edges[1]. Simple counting shows that the best pair is either; /// the individual highest weight edges to the 2 different destinations, or in; /// case of a conflict, one of them should be replaced with a 2nd best edge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:185,Simpl,Simple,185,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['Simpl'],['Simple']
Usability,"/// Point debug users of \p From to \p To or salvage them. Use this function; /// only when replacing all uses of \p From with \p To, with a guarantee that; /// \p From is going to be deleted.; ///; /// Follow these rules to prevent use-before-def of \p To:; /// . If \p To is a linked Instruction, set \p DomPoint to \p To.; /// . If \p To is an unlinked Instruction, set \p DomPoint to the Instruction; /// \p To will be inserted after.; /// . If \p To is not an Instruction (e.g a Constant), the choice of; /// \p DomPoint is arbitrary. Pick \p From for simplicity.; ///; /// If a debug user cannot be preserved without reordering variable updates or; /// introducing a use-before-def, it is either salvaged (\ref salvageDebugInfo); /// or deleted. Returns true if any debug users were updated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:557,simpl,simplicity,557,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['simpl'],['simplicity']
Usability,"/// Populate a single value with data from the field. The memory location pointed to by to needs to be of the; /// fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is; /// to a single column and has no read callback.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:185,simpl,simple,185,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,2,['simpl'],['simple']
Usability,"/// Populate the edges of this node if necessary.; ///; /// The first time this is called it will populate the edges for this node; /// in the graph. It does this by scanning the underlying function, so once; /// this is done, any changes to that function must be explicitly reflected; /// in updates to the graph.; ///; /// \returns the populated \c EdgeSequence to simplify walking it.; ///; /// This will not update or re-scan anything if called repeatedly. Instead,; /// the edge sequence is cached and returned immediately on subsequent; /// calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:367,simpl,simplify,367,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['simpl'],['simplify']
Usability,"/// Populates vector Masks with processor resource masks.; ///; /// The number of bits set in a mask depends on the processor resource type.; /// Each processor resource mask has at least one bit set. For groups, the; /// number of bits set in the mask is equal to the cardinality of the group plus; /// one. Excluding the most significant bit, the remaining bits in the mask; /// identify processor resources that are part of the group.; ///; /// Example:; ///; /// ResourceA -- Mask: 0b001; /// ResourceB -- Mask: 0b010; /// ResourceAB -- Mask: 0b100 U (ResourceA::Mask | ResourceB::Mask) == 0b111; ///; /// ResourceAB is a processor resource group containing ResourceA and ResourceB.; /// Each resource mask uniquely identifies a resource; both ResourceA and; /// ResourceB only have one bit set.; /// ResourceAB is a group; excluding the most significant bit in the mask, the; /// remaining bits identify the composition of the group.; ///; /// Resource masks are used by the ResourceManager to solve set membership; /// problems with simple bit manipulation operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h:1039,simpl,simple,1039,interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Support.h,1,['simpl'],['simple']
Usability,"/// Post-promotion worklist.; ///; /// Sometimes we discover an alloca which has a high probability of becoming; /// viable for SROA after a round of promotion takes place. In those cases,; /// the alloca is enqueued here for re-processing.; ///; /// Note that we have to be very careful to clear allocas out of this list in; /// the event they are deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:291,clear,clear,291,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['clear'],['clear']
Usability,/// Potential simple keys.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:14,simpl,simple,14,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['simpl'],['simple']
Usability,"/// Potentially accept the current argument, returning a new Arg instance,; /// or 0 if the option does not accept this argument (or the argument is; /// missing values).; ///; /// If the option accepts the current argument, accept() sets; /// Index to the position where argument parsing should resume; /// (even if the argument is missing values).; ///; /// \p CurArg The argument to be matched. It may be shorter than the; /// underlying storage to represent a Joined argument.; /// \p GroupedShortOption If true, we are handling the fallback case of; /// parsing a prefix of the current argument as a short option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h:296,resume,resume,296,interpreter/llvm-project/llvm/include/llvm/Option/Option.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h,1,['resume'],['resume']
Usability,"/// PragmaPoisonHandler - ""\#pragma poison x"" marks x as not usable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp:61,usab,usable,61,interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Pragma.cpp,1,['usab'],['usable']
Usability,"/// Pre-split loads and stores to simplify rewriting.; ///; /// We want to break up the splittable load+store pairs as much as; /// possible. This is important to do as a preprocessing step, as once we; /// start rewriting the accesses to partitions of the alloca we lose the; /// necessary information to correctly split apart paired loads and stores; /// which both point into this alloca. The case to consider is something like; /// the following:; ///; /// %a = alloca [12 x i8]; /// %gep1 = getelementptr i8, ptr %a, i32 0; /// %gep2 = getelementptr i8, ptr %a, i32 4; /// %gep3 = getelementptr i8, ptr %a, i32 8; /// store float 0.0, ptr %gep1; /// store float 1.0, ptr %gep2; /// %v = load i64, ptr %gep1; /// store i64 %v, ptr %gep2; /// %f1 = load float, ptr %gep2; /// %f2 = load float, ptr %gep3; ///; /// Here we want to form 3 partitions of the alloca, each 4 bytes large, and; /// promote everything so we recover the 2 SSA values that should have been; /// there all along.; ///; /// \returns true if any changes are made.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:34,simpl,simplify,34,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['simpl'],['simplify']
Usability,/// Pretty-print the unqualified name of this declaration. Can be overloaded; /// by derived classes to provide a more user-friendly name when appropriate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:119,user-friendly,user-friendly,119,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['user-friendly'],['user-friendly']
Usability,"/// Print a progress bar of width `ProgressHelper::fBarWidth` if `fGetNEventsOfCurrentFile` is known.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFHelpers.cxx:12,progress bar,progress bar,12,tree/dataframe/src/RDFHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFHelpers.cxx,1,['progress bar'],['progress bar']
Usability,"/// Print statistics in JSON format. This does include all global timers (\see; /// Timer, TimerGroup). Note that the timers are cleared after printing and will; /// not be printed in human readable form or in a second call of; /// PrintStatisticsJSON().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:129,clear,cleared,129,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,1,['clear'],['cleared']
Usability,"/// Print the filename, with escaping or quoting that accommodates the three; /// most likely tools that use dependency files: GNU Make, BSD Make, and; /// NMake/Jom.; ///; /// BSD Make is the simplest case: It does no escaping at all. This means; /// characters that are normally delimiters, i.e. space and # (the comment; /// character) simply aren't supported in filenames.; ///; /// GNU Make does allow space and # in filenames, but to avoid being treated; /// as a delimiter or comment, these must be escaped with a backslash. Because; /// backslash is itself the escape character, if a backslash appears in a; /// filename, it should be escaped as well. (As a special case, $ is escaped; /// as $$, which is the normal Make way to handle the $ character.); /// For compatibility with BSD Make and historical practice, if GNU Make; /// un-escapes characters in a filename but doesn't find a match, it will; /// retry with the unmodified original string.; ///; /// GCC tries to accommodate both Make formats by escaping any space or #; /// characters in the original filename, but not escaping backslashes. The; /// apparent intent is so that filenames with backslashes will be handled; /// correctly by BSD Make, and by GNU Make in its fallback mode of using the; /// unmodified original string; filenames with # or space characters aren't; /// supported by BSD Make at all, but will be handled correctly by GNU Make; /// due to the escaping.; ///; /// A corner case that GCC gets only partly right is when the original filename; /// has a backslash immediately followed by space or #. GNU Make would expect; /// this backslash to be escaped; however GCC escapes the original backslash; /// only when followed by space, not #. It will therefore take a dependency; /// from a directive such as; /// #include ""a\ b\#c.h""; /// and emit it as; /// a\\\ b\\#c.h; /// which GNU Make will interpret as; /// a\ b\; /// followed by a comment. Failing to find this file, it will fall back to the; /// origi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp:193,simpl,simplest,193,interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/DependencyFile.cpp,2,['simpl'],"['simplest', 'simply']"
Usability,"/// Print the template name.; ///; /// \param OS the output stream to which the template name will be; /// printed.; ///; /// \param Qual print the (Qualified::None) simple name,; /// (Qualified::AsWritten) any written (possibly partial) qualifier, or; /// (Qualified::Fully) the fully qualified name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:166,simpl,simple,166,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['simpl'],['simple']
Usability,/// Print using the given \p DP a user-friendly message.; /// This is the default message that will be printed to the user.; /// It is used when the frontend does not directly take advantage; /// of the information contained in fields of the subclasses.; /// The printed message must not end with '.' nor start with a severity; /// keyword.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:34,user-friendly,user-friendly,34,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['user-friendly'],['user-friendly']
Usability,"/// Print value X of the argument in form "" (which is X)"",; /// if the value is a fixed known value, otherwise print nothing.; /// This is used as simple explanation of values if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:147,simpl,simple,147,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['simpl'],['simple']
Usability,"/// Process a single induction variable. First use the SCEVExpander to create a; /// wide induction variable that evaluates to the same recurrence as the; /// original narrow IV. Then use a worklist to forward traverse the narrow IV's; /// def-use chain. After widenIVUse has processed all interesting IV users, the; /// narrow IV will be isolated for removal by DeleteDeadPHIs.; ///; /// It would be simpler to delete uses as they are processed, but we must avoid; /// invalidating SCEV expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:401,simpl,simpler,401,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['simpl'],['simpler']
Usability,"/// Process any TypoExprs in the given Expr and its children,; /// generating diagnostics as appropriate and returning a new Expr if there; /// were typos that were all successfully corrected and ExprError if one or; /// more typos could not be corrected.; ///; /// \param E The Expr to check for TypoExprs.; ///; /// \param InitDecl A VarDecl to avoid because the Expr being corrected is its; /// initializer.; ///; /// \param RecoverUncorrectedTypos If true, when typo correction fails, it; /// will rebuild the given Expr with all TypoExprs degraded to RecoveryExprs.; ///; /// \param Filter A function applied to a newly rebuilt Expr to determine if; /// it is an acceptable/usable result from a single combination of typo; /// corrections. As long as the filter returns ExprError, different; /// combinations of corrections will be tried until all are exhausted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:679,usab,usable,679,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['usab'],['usable']
Usability,"/// Produce a merge of values in \p VRegs to define \p DstReg. Perform a merge; /// from the least common multiple type, and convert as appropriate to \p; /// DstReg.; ///; /// \p VRegs should each have type \p GCDTy. This type should be greatest; /// common divisor type of \p DstReg, \p NarrowTy, and an undetermined source; /// type.; ///; /// \p NarrowTy is the desired result merge source type. If the source value; /// needs to be widened to evenly cover \p DstReg, inserts high bits; /// corresponding to the extension opcode \p PadStrategy.; ///; /// \p VRegs will be cleared, and the result \p NarrowTy register pieces; /// will replace it. Returns The complete LCMTy that \p VRegs will cover when; /// merged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:576,clear,cleared,576,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,1,['clear'],['cleared']
Usability,"/// ProfitableToMerge - Check if two machine basic blocks have a common tail; /// and decide if it would be profitable to merge those tails. Return the; /// length of the common tail and iterators to the first common instruction; /// in each block.; /// MBB1, MBB2 The blocks to check; /// MinCommonTailLength Minimum size of tail block to be merged.; /// CommonTailLen Out parameter to record the size of the shared tail between; /// MBB1 and MBB2; /// I1, I2 Iterator references that will be changed to point to the first; /// instruction in the common tail shared by MBB1,MBB2; /// SuccBB A common successor of MBB1, MBB2 which are in a canonical form; /// relative to SuccBB; /// PredBB The layout predecessor of SuccBB, if any.; /// EHScopeMembership map from block to EH scope #.; /// AfterPlacement True if we are merging blocks after layout. Stricter; /// thresholds apply to prevent undoing tail-duplication.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:892,undo,undoing,892,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,1,['undo'],['undoing']
Usability,/// Provides a simple uniform namespace for tokens from all C languages.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:15,simpl,simple,15,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,1,['simpl'],['simple']
Usability,"/// Provides lookup on an on disk hash table.; ///; /// This needs an \c Info that handles reading values from the hash table's; /// payload and computes the hash for a given key. This should provide the; /// following interface:; ///; /// \code; /// class ExampleLookupInfo {; /// public:; /// typedef ExampleData data_type;; /// typedef ExampleInternalKey internal_key_type; // The stored key type.; /// typedef ExampleKey external_key_type; // The type to pass to find().; /// typedef uint32_t hash_value_type; // The type the hash function returns.; /// typedef uint32_t offset_type; // The type for offsets into the table.; ///; /// /// Compare two keys for equality.; /// static bool EqualKey(internal_key_type &Key1, internal_key_type &Key2);; /// /// Calculate the hash for the given key.; /// static hash_value_type ComputeHash(internal_key_type &IKey);; /// /// Translate from the semantic type of a key in the hash table to the; /// /// type that is actually stored and used for hashing and comparisons.; /// /// The internal and external types are often the same, in which case this; /// /// can simply return the passed in value.; /// static const internal_key_type &GetInternalKey(external_key_type &EKey);; /// /// Read the key and data length from Buffer, leaving it pointing at the; /// /// following byte.; /// static std::pair<offset_type, offset_type>; /// ReadKeyDataLength(const unsigned char *&Buffer);; /// /// Read the key from Buffer, given the KeyLen as reported from; /// /// ReadKeyDataLength.; /// const internal_key_type &ReadKey(const unsigned char *Buffer,; /// offset_type KeyLen);; /// /// Read the data for Key from Buffer, given the DataLen as reported from; /// /// ReadKeyDataLength.; /// data_type ReadData(StringRef Key, const unsigned char *Buffer,; /// offset_type DataLen);; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h:1108,simpl,simply,1108,interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OnDiskHashTable.h,1,['simpl'],['simply']
Usability,/// Provides the clearance - the number of instructions since the closest; /// reaching def instuction of PhysReg that reaches MI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:17,clear,clearance,17,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,1,['clear'],['clearance']
Usability,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:966,simpl,simple,966,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['simpl'],['simple']
Usability,/// Queue of tokens. This is required to queue up tokens while looking; /// for the end of a simple key. And for cases where a single character; /// can produce multiple tokens (e.g. BlockEnd).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:93,simpl,simple,93,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['simpl'],['simple']
Usability,"/// RET instructions and also instructions that indirect calls/jumps from memory; /// combine a load and a branch within a single instruction. To mitigate these; /// instructions against LVI, they must be decomposed into separate load and; /// branch instructions, with an LFENCE in between. For more details, see:; /// - X86LoadValueInjectionRetHardening.cpp; /// - X86LoadValueInjectionIndirectThunks.cpp; /// - https://software.intel.com/security-software-guidance/insights/deep-dive-load-value-injection; ///; /// Returns `true` if a mitigation was applied or warning was emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:459,guid,guidance,459,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['guid'],['guidance']
Usability,"/// RValue - This trivial value class is used to represent the result of an; /// expression that is evaluated. It can be one of three things: either a; /// simple LLVM SSA value, a pair of SSA values for complex numbers, or the; /// address of an aggregate value in memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:156,simpl,simple,156,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,1,['simpl'],['simple']
Usability,"/// Reader for the simple text based instrprof format.; ///; /// This format is a simple text format that's suitable for test data. Records; /// are separated by one or more blank lines, and record fields are separated by; /// new lines.; ///; /// Each record consists of a function name, a function hash, a number of; /// counters, and then each counter value, in that order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:19,simpl,simple,19,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,2,['simpl'],['simple']
Usability,/// Rebuild an expression which simply semantically wraps another; /// expression which it shares the type and value kind of.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:32,simpl,simply,32,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['simpl'],['simply']
Usability,"/// Record \p NewPred as a Machine predecessor to `Edge.second`, corresponding; /// to `Edge.first` at the IR level. This is used when IRTranslation creates; /// multiple MachineBasicBlocks for a given IR block and the CFG is no longer; /// represented simply by the IR-level CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:253,simpl,simply,253,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,1,['simpl'],['simply']
Usability,"/// Record code for the identifier table.; ///; /// The identifier table is a simple blob that contains; /// NULL-terminated strings for all of the identifiers; /// referenced by the AST file. The IDENTIFIER_OFFSET table; /// contains the mapping from identifier IDs to the characters; /// in this blob. Note that the starting offsets of all of the; /// identifiers are odd, so that, when the identifier offset; /// table is loaded in, we can use the low bit to distinguish; /// between offsets (for unresolved identifier IDs) and; /// IdentifierInfo pointers (for already-resolved identifier; /// IDs).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:78,simpl,simple,78,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['simpl'],['simple']
Usability,"/// Record the locations of the operands of the provided instruction in a; /// record keyed by the provided label. For instructions w/AnyReg calling; /// convention the return register is also recorded if requested. For; /// STACKMAP, and PATCHPOINT the label is expected to immediately *preceed*; /// lowering of the MI to MCInsts. For STATEPOINT, it expected to; /// immediately *follow*. It's not clear this difference was intentional,; /// but it exists today. ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:400,clear,clear,400,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,1,['clear'],['clear']
Usability,/// Recurse into GICombineGroup's and flatten the ruleset into a simple list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:65,simpl,simple,65,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,1,['simpl'],['simple']
Usability,"/// Recursively traverses all children, if the total sample count of the; /// corresponding function is no less than \p Threshold, add its corresponding; /// GUID to \p S. Also traverse the BodySamples to add hot CallTarget's GUID; /// to \p S.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:158,GUID,GUID,158,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,2,['GUID'],['GUID']
Usability,"/// Recursively traverses the expression calculating the origin of the requested; /// byte of the given value. Returns std::nullopt if the provider can't be; /// calculated.; ///; /// For all the values except the root of the expression, we verify that the; /// value has exactly one use and if not then return std::nullopt. This way if; /// the origin of the byte is returned it's guaranteed that the values which; /// contribute to the byte are not used outside of this expression.; /// However, there is a special case when dealing with vector loads -- we allow; /// more than one use if the load is a vector type. Since the values that; /// contribute to the byte ultimately come from the ExtractVectorElements of the; /// Load, we don't care if the Load has uses other than ExtractVectorElements,; /// because those operations are independent from the pattern to be combined.; /// For vector loads, we simply care that the ByteProviders are adjacent; /// positions of the same vector, and their index matches the byte that is being; /// provided. This is captured by the \p VectorIndex algorithm. \p VectorIndex; /// is the index used in an ExtractVectorElement, and \p StartingIndex is the; /// byte position we are trying to provide for the LoadCombine. If these do; /// not match, then we can not combine the vector loads. \p Index uses the; /// byte position we are trying to provide for and is matched against the; /// shl and load size. The \p Index algorithm ensures the requested byte is; /// provided for by the pattern, and the pattern does not over provide bytes.; ///; ///; /// The supported LoadCombine pattern for vector loads is as follows; /// or; /// / \; /// or shl; /// / \ |; /// or shl zext; /// / \ | |; /// shl zext zext EVE*; /// | | | |; /// zext EVE* EVE* LOAD; /// | | |; /// EVE* LOAD LOAD; /// |; /// LOAD; ///; /// *ExtractVectorElement",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:907,simpl,simply,907,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['simpl'],['simply']
Usability,"/// Reduce cast expression by removing redundant intermediate casts.; /// E.g.; /// - (char)(short)(int x) -> (char)(int x); /// - (int)(int x) -> int x; ///; /// \param V -- SymbolVal, which pressumably contains SymbolCast or any symbol; /// that is applicable for cast operation.; /// \param CastTy -- QualType, which `V` shall be cast to.; /// \return SVal with simplified cast expression.; /// \note: Currently only support integral casts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SValBuilder.cpp:365,simpl,simplified,365,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SValBuilder.cpp,1,['simpl'],['simplified']
Usability,"/// ReduceCrashingBlocks reducer - This works by setting the terminators of; /// all terminators except the specified basic blocks to a 'ret' instruction,; /// then running the simplifycfg pass. This has the effect of chopping up; /// the CFG really fast which can reduce large functions quickly.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:177,simpl,simplifycfg,177,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['simpl'],['simplifycfg']
Usability,"/// ReduceCrashingConditionals reducer - This works by changing; /// conditional branches to unconditional ones, then simplifying the CFG; /// This has the effect of chopping up the CFG really fast which can reduce; /// large functions quickly.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:118,simpl,simplifying,118,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['simpl'],['simplifying']
Usability,"/// Register \p CB as a simplification callback.; /// Similar to \p registerSimplificationCallback, the call back will be called; /// first when we simplify a global variable \p GV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,simpl,simplification,24,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['simpl'],"['simplification', 'simplify']"
Usability,"/// Register \p CB as a simplification callback.; /// `Attributor::getAssumedSimplified` will use these callbacks before; /// we it will ask `AAValueSimplify`. It is important to ensure this; /// is called before `identifyDefaultAbstractAttributes`, assuming the; /// latter is called at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,simpl,simplification,24,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplification']
Usability,/// Register a callback for a default optimizer pipeline extension point.; ///; /// This extension point allows adding optimization right after passes that do; /// basic simplification of the input IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:170,simpl,simplification,170,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['simpl'],['simplification']
Usability,/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding CallGraphSCC passes at the end of the; /// main CallGraphSCC passes and before any function simplification passes run; /// by CGPassManager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:215,simpl,simplification,215,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['simpl'],['simplification']
Usability,"/// Register a callback for a default optimizer pipeline extension; /// point; ///; /// This extension point allows adding late loop canonicalization and; /// simplification passes. This is the last point in the loop optimization; /// pipeline before loop deletion. Each pass added; /// here must be an instance of LoopPass.; /// This is the place to add passes that can remove loops, such as target-; /// specific loop idiom recognition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:159,simpl,simplification,159,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['simpl'],['simplification']
Usability,"/// Register a new sample for completion statistics.; /// \see ROOT::RDF::RInterface::DefinePerSample().; /// The *id.AsString()* refers to the name of the currently processed file.; /// The idea is to populate the event entries in the *fSampleNameToEventEntries* map; /// by selecting the greater of the two values:; /// *id.EntryRange().second* which is the upper event entry range of the processed sample; /// and the current value of the event entries in the *fSampleNameToEventEntries* map.; /// In the single threaded case, the two numbers are the same as the entry range corresponds; /// to the number of events in an individual file (each sample is simply a single file).; /// In the multithreaded case, the idea is to accumulate the higher event entry value until; /// the total number of events in a given file is reached.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:657,simpl,simply,657,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,1,['simpl'],['simply']
Usability,"/// Registers a function to be called in a ""one-shot"" manner when a pipe; /// signal is delivered to the process (i.e., on a failed write to a pipe).; /// After the pipe signal is handled once, the handler is unregistered.; ///; /// The LLVM signal handling code will not install any handler for the pipe; /// signal unless one is provided with this API (see \ref; /// DefaultOneShotPipeSignalHandler). This handler must be provided before; /// any other LLVM signal handlers are installed: the \ref InitLLVM; /// constructor has a flag that can simplify this setup.; ///; /// Note that the handler is not allowed to call any non-reentrant; /// functions. A null handler pointer disables the current installed; /// function. Note also that the handler may be executed on a; /// different thread on some platforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h:546,simpl,simplify,546,interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Signals.h,1,['simpl'],['simplify']
Usability,"/// Remove a MemoryAccess from MemorySSA, including updating all; /// definitions and uses.; /// This should be called when a memory instruction that has a MemoryAccess; /// associated with it is erased from the program. For example, if a store or; /// load is simply erased (not replaced), removeMemoryAccess should be called; /// on the MemoryAccess for that store/load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h:261,simpl,simply,261,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,1,['simpl'],['simply']
Usability,"/// Remove all MemoryAcceses in a set of BasicBlocks about to be deleted.; /// Assumption we make here: all uses of deleted defs and phi must either; /// occur in blocks about to be deleted (thus will be deleted as well), or; /// they occur in phis that will simply lose an incoming value.; /// Deleted blocks still have successor info, but their predecessor edges and; /// Phi nodes may already be updated. Instructions in DeadBlocks should be; /// deleted after this call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h:259,simpl,simply,259,interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemorySSAUpdater.h,1,['simpl'],['simply']
Usability,"/// Remove all nodes from the list like clear(), but do not call; /// removeNodeFromList() or deleteNode().; ///; /// This should only be used immediately before freeing nodes in bulk to; /// avoid traversing the list and bringing all the nodes into cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:40,clear,clear,40,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,1,['clear'],['clear']
Usability,/// Remove all simple keys on FlowLevel \a Level.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:15,simpl,simple,15,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['simpl'],['simple']
Usability,/// Remove all uses and clear node vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:24,clear,clear,24,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['clear'],['clear']
Usability,/// Remove instructions that simplify.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InstSimplifyPass.cpp:29,simpl,simplify,29,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InstSimplifyPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InstSimplifyPass.cpp,1,['simpl'],['simplify']
Usability,/// Remove simple keys that can no longer be valid simple keys.; ///; /// Invalid simple keys are not on the current line or are further than 1024; /// columns back.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:11,simpl,simple,11,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,3,['simpl'],['simple']
Usability,/// Removes all elements and clears the collection.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:29,clear,clears,29,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['clear'],['clears']
Usability,"/// Removes the given JITDylibs from the ExecutionSession.; ///; /// This method clears all resources held for the JITDylibs, puts them in the; /// closed state, and clears all references to them that are held by the; /// ExecutionSession or other JITDylibs. No further code can be added to the; /// removed JITDylibs, and the JITDylib objects will be freed once any; /// remaining JITDylibSPs pointing to them are destroyed.; ///; /// This method does *not* run static destructors for code contained in the; /// JITDylibs, and each JITDylib can only be removed once.; ///; /// JITDylibs will be removed in the order given. Teardown is usually; /// independent for each JITDylib, but not always. In particular, where the; /// ORC runtime is used it is expected that teardown off all JITDylibs will; /// depend on it, so the JITDylib containing the ORC runtime must be removed; /// last. If the client has introduced any other dependencies they should be; /// accounted for in the removal order too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:81,clear,clears,81,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,2,['clear'],['clears']
Usability,"/// Removing duplicate PHI operands to leave the PHI in a canonical and; /// predictable form.; ///; /// FIXME: It's really frustrating that we have to do this, but SSA-form in MIR; /// isn't what you might expect. We may have multiple entries in PHI nodes for; /// a single predecessor. This makes CFG-updating extremely complex, so here we; /// simplify all PHI nodes to a model even simpler than the IR's model: exactly; /// one entry per predecessor, regardless of how many edges there are.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:347,simpl,simplify,347,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,2,['simpl'],"['simpler', 'simplify']"
Usability,"/// Reorders the given \p Order according to the given \p Mask. \p Order - is; /// the original order of the scalars. Procedure transforms the provided order; /// in accordance with the given \p Mask. If the resulting \p Order is just an; /// identity order, \p Order is cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:271,clear,cleared,271,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['clear'],['cleared']
Usability,"/// Replace G with a simple tail call to bitcast(F). Also (unless; /// MergeFunctionsPDI holds) replace direct uses of G with bitcast(F),; /// delete G.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp:21,simpl,simple,21,interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MergeFunctions.cpp,1,['simpl'],['simple']
Usability,"/// Replace all uses of 'I' with 'SimpleV' and simplify the uses recursively.; ///; /// This first performs a normal RAUW of I with SimpleV. It then recursively; /// attempts to simplify those users updated by the operation. The 'I'; /// instruction must not be equal to the simplified value 'SimpleV'.; /// If UnsimplifiedUsers is provided, instructions that could not be simplified; /// are added to it.; ///; /// The function returns true if any simplifications were performed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:34,Simpl,SimpleV,34,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,8,"['Simpl', 'simpl']","['SimpleV', 'simplifications', 'simplified', 'simplify']"
Usability,"/// Replace csincr-branch sequence by simple conditional branch; ///; /// Examples:; /// 1. \code; /// csinc w9, wzr, wzr, <condition code>; /// tbnz w9, #0, 0x44; /// \endcode; /// to; /// \code; /// b.<inverted condition code>; /// \endcode; ///; /// 2. \code; /// csinc w9, wzr, wzr, <condition code>; /// tbz w9, #0, 0x44; /// \endcode; /// to; /// \code; /// b.<condition code>; /// \endcode; ///; /// Replace compare and branch sequence by TBZ/TBNZ instruction when the; /// compare's constant operand is power of 2.; ///; /// Examples:; /// \code; /// and w8, w8, #0x400; /// cbnz w8, L1; /// \endcode; /// to; /// \code; /// tbnz w8, #10, L1; /// \endcode; ///; /// \param MI Conditional Branch; /// \return True when the simple conditional branch is generated; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:38,simpl,simple,38,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,2,['simpl'],['simple']
Usability,/// Replace resumes that are not reachable from a cleanup landing pad with; /// unreachable and then simplify those blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp:12,resume,resumes,12,interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp,2,"['resume', 'simpl']","['resumes', 'simplify']"
Usability,"/// Replace the tokens that form a simple-template-id with an; /// annotation token containing the complete template-id.; ///; /// The first token in the stream must be the name of a template that; /// is followed by a '<'. This routine will parse the complete; /// simple-template-id and replace the tokens with a single annotation; /// token with one of two different kinds: if the template-id names a; /// type (and \p AllowTypeAnnotation is true), the annotation token is; /// a type annotation that includes the optional nested-name-specifier; /// (\p SS). Otherwise, the annotation token is a template-id; /// annotation that does not include the optional; /// nested-name-specifier.; ///; /// \param Template the declaration of the template named by the first; /// token (an identifier), as returned from \c Action::isTemplateName().; ///; /// \param TNK the kind of template that \p Template; /// refers to, as returned from \c Action::isTemplateName().; ///; /// \param SS if non-NULL, the nested-name-specifier that precedes; /// this template name.; ///; /// \param TemplateKWLoc if valid, specifies that this template-id; /// annotation was preceded by the 'template' keyword and gives the; /// location of that keyword. If invalid (the default), then this; /// template-id was not preceded by a 'template' keyword.; ///; /// \param AllowTypeAnnotation if true (the default), then a; /// simple-template-id that refers to a class template, template; /// template parameter, or other template that produces a type will be; /// replaced with a type annotation token. Otherwise, the; /// simple-template-id is always replaced with a template-id; /// annotation token.; ///; /// \param TypeConstraint if true, then this is actually a type-constraint,; /// meaning that the template argument list can be omitted (and the template in; /// question must be a concept).; ///; /// If an unrecoverable parse error occurs and no annotation token can be; /// formed, this function returns true.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp:35,simpl,simple-template-id,35,interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,4,['simpl'],['simple-template-id']
Usability,/// Replay inline advisor that uses optimization remarks from inlining of; /// previous build to guide current inlining. This is useful for inliner tuning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ReplayInlineAdvisor.h:97,guid,guide,97,interpreter/llvm-project/llvm/include/llvm/Analysis/ReplayInlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ReplayInlineAdvisor.h,1,['guid'],['guide']
Usability,"/// Representative of a block.; ///; /// This is a simple wrapper around an index into the reverse-post-order; /// traversal of the blocks.; ///; /// Unlike a block pointer, its order has meaning (location in the; /// topological sort) and it's class is the same regardless of block type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:51,simpl,simple,51,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['simpl'],['simple']
Usability,"/// Represents a C++ deduction guide declaration.; ///; /// \code; /// template<typename T> struct A { A(); A(T); };; /// A() -> A<int>;; /// \endcode; ///; /// In this example, there will be an explicit deduction guide from the; /// second line, and implicit deduction guide templates synthesized from; /// the constructors of \c A.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:31,guid,guide,31,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,3,['guid'],['guide']
Usability,"/// Represents a C++ template name within the type system.; ///; /// A C++ template name refers to a template within the C++ type; /// system. In most cases, a template name is simply a reference to a; /// class template, e.g.; ///; /// \code; /// template<typename T> class X { };; ///; /// X<int> xi;; /// \endcode; ///; /// Here, the 'X' in \c X<int> is a template name that refers to the; /// declaration of the class template X, above. Template names can; /// also refer to function templates, C++0x template aliases, etc.; ///; /// Some template names are dependent. For example, consider:; ///; /// \code; /// template<typename MetaFun, typename T1, typename T2> struct apply2 {; /// typedef typename MetaFun::template apply<T1, T2>::type type;; /// };; /// \endcode; ///; /// Here, ""apply"" is treated as a template name within the typename; /// specifier in the typedef. ""apply"" is a nested template, and can; /// only be understood in the context of",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:177,simpl,simply,177,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['simpl'],['simply']
Usability,"/// Represents a C++2a __builtin_bit_cast(T, v) expression. Used to implement; /// std::bit_cast. These can sometimes be evaluated as part of a constant; /// expression, but otherwise CodeGen to a simple memcpy in general.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:197,simpl,simple,197,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['simpl'],['simple']
Usability,"/// Represents a JIT'd dynamic library.; ///; /// This class aims to mimic the behavior of a regular dylib or shared object,; /// but without requiring the contained program representations to be compiled; /// up-front. The JITDylib's content is defined by adding MaterializationUnits,; /// and contained MaterializationUnits will typically rely on the JITDylib's; /// links-against order to resolve external references (similar to a regular; /// dylib).; ///; /// The JITDylib object is a thin wrapper that references state held by the; /// ExecutionSession. JITDylibs can be removed, clearing this underlying state; /// and leaving the JITDylib object in a defunct state. In this state the; /// JITDylib's name is guaranteed to remain accessible. If the ExecutionSession; /// is still alive then other operations are callable but will return an Error; /// or null result (depending on the API). It is illegal to call any operation; /// other than getName on a JITDylib after the ExecutionSession has been torn; /// down.; ///; /// JITDylibs cannot be moved or copied. Their address is stable, and useful as; /// a key in some JIT data structures.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:586,clear,clearing,586,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['clear'],['clearing']
Usability,"/// Represents a read-only view of a CodeView string table. This is a very; /// simple flat buffer consisting of null-terminated strings, where strings; /// are retrieved by their offset in the buffer. DebugStringTableSubsectionRef; /// does not own the underlying storage for the buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h:80,simpl,simple,80,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h,1,['simpl'],['simple']
Usability,"/// Represents a simple identification of a weak object.; ///; /// Part of the implementation of -Wrepeated-use-of-weak.; ///; /// This is used to determine if two weak accesses refer to the same object.; /// Here are some examples of how various accesses are ""profiled"":; ///; /// Access Expression | ""Base"" Decl | ""Property"" Decl; /// :---------------: | :-----------------: | :------------------------------:; /// self.property | self (VarDecl) | property (ObjCPropertyDecl); /// self.implicitProp | self (VarDecl) | -implicitProp (ObjCMethodDecl); /// self->ivar.prop | ivar (ObjCIvarDecl) | prop (ObjCPropertyDecl); /// cxxObj.obj.prop | obj (FieldDecl) | prop (ObjCPropertyDecl); /// [self foo].prop | 0 (unknown) | prop (ObjCPropertyDecl); /// self.prop1.prop2 | prop1 (ObjCPropertyDecl) | prop2 (ObjCPropertyDecl); /// MyClass.prop | MyClass (ObjCInterfaceDecl) | -prop (ObjCMethodDecl); /// MyClass.foo.prop | +foo (ObjCMethodDecl) | -prop (ObjCPropertyDecl); /// weakVar | 0 (known) | weakVar (VarDecl); /// self->weakIvar | self (VarDecl) | weakIvar (ObjCIvarDecl); ///; /// Objects are identified with only two Decls to make it reasonably fast to; /// compare them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:17,simpl,simple,17,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['simpl'],['simple']
Usability,"/// Represents a source-level, intra-procedural CFG that represents the; /// control-flow of a Stmt. The Stmt can represent an entire function body,; /// or a single expression. A CFG will always contain one empty block that; /// represents the Exit point of the CFG. A CFG will also contain a designated; /// Entry block. The CFG solely represents control-flow; it consists of; /// CFGBlocks which are simply containers of Stmt*'s in the AST the CFG; /// was constructed from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:403,simpl,simply,403,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['simpl'],['simply']
Usability,"/// Represents a temporary object that is being immediately returned from a; /// function by value, eg. return t; or return T(123); in C++17.; /// In C++17 there is not going to be an elidable copy constructor at the; /// return site. However, the usual temporary-related bureaucracy (CXXBindTemporaryExpr,; /// MaterializeTemporaryExpr) is normally located in the caller function's AST.; /// Note that if the object has trivial destructor, then this code is; /// indistinguishable from a simple returned value constructor on the AST level;; /// in this case we provide a simple returned value construction context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:489,simpl,simple,489,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,2,['simpl'],['simple']
Usability,"/// Represents an expression that might suspend coroutine execution;; /// either a co_await or co_yield expression.; ///; /// Evaluation of this expression first evaluates its 'ready' expression. If; /// that returns 'false':; /// -- execution of the coroutine is suspended; /// -- the 'suspend' expression is evaluated; /// -- if the 'suspend' expression returns 'false', the coroutine is; /// resumed; /// -- otherwise, control passes back to the resumer.; /// If the coroutine is not suspended, or when it is resumed, the 'resume'; /// expression is evaluated, and its result is the result of the overall; /// expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:395,resume,resumed,395,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,4,['resume'],"['resume', 'resumed', 'resumer']"
Usability,"/// Represents construction into a field or a base class within a bigger object; /// via a constructor initializer, with a single constructor, eg.; /// T(): field(Field(123)) { ... }. Such construction context may only appear; /// in C++17 because previously it was split into a temporary object constructor; /// and an elidable simple constructor-initializer copy-constructor and we were; /// producing separate construction contexts for these constructors. In C++17; /// we have a single construction context that combines both. Note that if the; /// object has trivial destructor, then this code is indistinguishable from; /// a simple constructor-initializer constructor on the AST level; in this case; /// we provide a simple constructor-initializer construction context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:329,simpl,simple,329,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,3,['simpl'],['simple']
Usability,"/// Represents construction into a simple local variable, eg. T var(123);.; /// If a variable has an initializer, eg. T var = makeT();, then the final; /// elidable copy-constructor from makeT() into var would also be a simple; /// variable constructor handled by this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:35,simpl,simple,35,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,2,['simpl'],['simple']
Usability,"/// Represents construction into a simple variable with an initializer syntax,; /// with a single constructor, eg. T var = makeT();. Such construction context; /// may only appear in C++17 because previously it was split into a temporary; /// object constructor and an elidable simple variable copy-constructor and; /// we were producing separate construction contexts for these constructors.; /// In C++17 we have a single construction context that combines both.; /// Note that if the object has trivial destructor, then this code is; /// indistinguishable from a simple variable constructor on the AST level;; /// in this case we provide a simple variable construction context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:35,simpl,simple,35,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,4,['simpl'],['simple']
Usability,"/// Represents either an error or a value T.; ///; /// ErrorOr<T> is a pointer-like class that represents the result of an; /// operation. The result is either an error, or a value of type T. This is; /// designed to emulate the usage of returning a pointer where nullptr indicates; /// failure. However instead of just knowing that the operation failed, we also; /// have an error_code and optional user data that describes why it failed.; ///; /// It is used like the following.; /// \code; /// ErrorOr<Buffer> getBuffer();; ///; /// auto buffer = getBuffer();; /// if (error_code ec = buffer.getError()); /// return ec;; /// buffer->write(""adena"");; /// \endcode; ///; ///; /// Implicit conversion to bool returns true if there is a usable value. The; /// unary * and -> operators provide pointer like access to the value. Accessing; /// the value when there is an error has undefined behavior.; ///; /// When T is a reference type the behavior is slightly different. The reference; /// is held in a std::reference_wrapper<std::remove_reference<T>::type>, and; /// there is special handling to make operator -> work as if T was not a; /// reference.; ///; /// T cannot be a rvalue reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h:736,usab,usable,736,interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorOr.h,1,['usab'],['usable']
Usability,/// Represents either; /// * a condition that holds on entry to a block (=condition fact); /// * an assume (=assume fact); /// * a use of a compare instruction to simplify.; /// It also tracks the Dominator DFS in and out numbers for each entry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:163,simpl,simplify,163,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['simpl'],['simplify']
Usability,/// Reset a register value to zero / empty. Needed to replicate the; /// VarLoc implementation where a copy to/from a register effectively; /// clears the contents of the source register. (Values can only have one; /// machine location in VarLocBasedImpl).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:144,clear,clears,144,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['clear'],['clears']
Usability,/// Reset all flags to cleared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h:23,clear,cleared,23,interpreter/llvm-project/clang/include/clang/Lex/Token.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Token.h,1,['clear'],['cleared']
Usability,"/// Reset the pointer info, clearing all state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h:28,clear,clearing,28,interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,1,['clear'],['clearing']
Usability,/// Reset the state of Unsafe and clear ToFreze if set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp:34,clear,clear,34,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,1,['clear'],['clear']
Usability,"/// Retrieve the ""canonical"" template argument.; ///; /// The canonical template argument is the simplest template argument; /// (which may be a type, value, expression, or declaration) that; /// expresses the value of the argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:97,simpl,simplest,97,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['simpl'],['simplest']
Usability,"/// Retrieve the IdentifierInfo * stored in this declaration name,; /// or null if this declaration name isn't a simple identifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:113,simpl,simple,113,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['simpl'],['simple']
Usability,"/// Retrieves the ""canonical"" template name that refers to a; /// given template.; ///; /// The canonical template name is the simplest expression that can; /// be used to refer to a given template. For most templates, this; /// expression is just the template declaration itself. For example,; /// the template std::vector can be referred to via a variety of; /// names---std::vector, \::std::vector, vector (if vector is in; /// scope), etc.---but all of these names map down to the same; /// TemplateDecl, which is used to form the canonical template name.; ///; /// Dependent template names are more interesting. Here, the; /// template name could be something like T::template apply or; /// std::allocator<T>::template rebind, where the nested name; /// specifier itself is dependent. In this case, the canonical; /// template name uses the shortest form of the dependent; /// nested-name-specifier, which itself contains all canonical; /// types, values, and templates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:127,simpl,simplest,127,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['simpl'],['simplest']
Usability,/// Return \p std::nullopt if there is no call back registered for \p GV or; /// the call back is still not sure if \p GV can be simplified. Return \p; /// nullptr if \p GV can't be simplified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:129,simpl,simplified,129,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['simpl'],['simplified']
Usability,"/// Return a CodeSegAttr from a containing class. The Microsoft docs say; /// when __declspec(code_seg) ""is applied to a class, all member functions of; /// the class and nested classes -- this includes compiler-generated special; /// member functions -- are put in the specified segment.""; /// The actual behavior is a little more complicated. The Microsoft compiler; /// won't check outer classes if there is an active value from #pragma code_seg.; /// The CodeSeg is always applied from the direct parent but only from outer; /// classes when the #pragma code_seg stack is empty. See:; /// https://reviews.llvm.org/D22931, the Microsoft feedback page is no longer; /// available since MS has removed the page.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:640,feedback,feedback,640,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['feedback'],['feedback']
Usability,"/// Return a ValueInfo for GUID if it exists, otherwise return ValueInfo().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:27,GUID,GUID,27,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,/// Return a ValueInfo for \p GUID setting value \p Name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:30,GUID,GUID,30,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,/// Return a ValueInfo for \p GUID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:30,GUID,GUID,30,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,/// Return a declaration for the global GUID object representing the given; /// GUID value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:40,GUID,GUID,40,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,2,['GUID'],['GUID']
Usability,"/// Return a known range for the associated value at a program point \p CtxI.; /// If \p I is nullptr, simply return a known range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:103,simpl,simply,103,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simply']
Usability,"/// Return a number greater or equal to the total number of entries in the; /// dataset.; ///; /// \note If you are interested in the total number of entries in a TChain,; /// this function will give that number once the last file of the chain; /// is opened. In general, using this instead of GetEntries will avoid; /// opening all files in the chain which could be very costly for very; /// large number of files stored at a remote location.; ///; /// The logic depends on whether the dataset is a TTree or a TChain. In the; /// first case, it simply returns the total number of entries in the tree. In; /// the latter case, it depends on which point of the processing of the chain; /// this function is called. During most of the chain processing, this; /// function will return TTree::kMaxEntries. When the chain arrives at the; /// last file, then the function will return the accumulated total number of; /// entries in the whole chain. A notable use case where this function; /// becomes quite useful is when writing the following for loop to traverse; /// the entries in the dataset:; ///; /// \code{.cpp}; /// for(Long64_t ievent = 0; ievent < dataset.GetEntriesFast(); ievent++) {; /// // Do something with the event in the dataset; /// }; /// \endcode; ///; /// In the example above, independently on whether the dataset is a TTree or; /// a TChain, the GetEntriesFast call will provide the correct stopping; /// condition for the loop (i.e. the total number of entries). In the TChain; /// case, calling GetEntries instead would open all the files in the chain; /// upfront which could be costly.; ///; /// The functionality offered by this method can also be seen when used in; /// conjunction with LoadTree. For a call like <tt> LoadTree(ievent) </tt>,; /// the condition <tt> ievent < dataset.GetEntriesFast() </tt> is only; /// satisfied if \p ievent is strictly smaller than the total number of; /// entries in the dataset. In fact, even when the dataset is a TChain, the; /// first t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h:546,simpl,simply,546,tree/tree/inc/TTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTree.h,1,['simpl'],['simply']
Usability,/// Return a simple string representation of the chain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:13,simpl,simple,13,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['simpl'],['simple']
Usability,"/// Return a variant of Val with float type.; /// Currently this works in two cases: If Val is an FPExtension of a float; /// value to something bigger, simply return the operand.; /// If Val is a ConstantFP but can be converted to a float ConstantFP without; /// loss of precision do so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:153,simpl,simply,153,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,1,['simpl'],['simply']
Usability,"/// Return an approximation of this SCEV expression's ""base"", or NULL for any; /// constant. Returning the expression itself is conservative. Returning a; /// deeper subexpression is more precise and valid as long as it isn't less; /// complex than another subexpression. For expressions involving multiple; /// unscaled values, we need to return the pointer-type SCEVUnknown. This avoids; /// forming chains across objects, such as: PrevOper==a[i], IVOper==b[i],; /// IVInc==b-a.; ///; /// Since SCEVUnknown is the rightmost type, and pointers are the rightmost; /// SCEVUnknown, we simply return the rightmost SCEV operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:584,simpl,simply,584,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['simpl'],['simply']
Usability,"/// Return an assumed range for the associated value a program point \p CtxI.; /// If \p I is nullptr, simply return an assumed range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:103,simpl,simply,103,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simply']
Usability,"/// Return an assumed simplified value if a single candidate is found. If; /// there cannot be one, return original value. If it is not clear yet, return; /// std::nullopt.; ///; /// Use `Attributor::getAssumedSimplified` for value simplification.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:22,simpl,simplified,22,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,3,"['clear', 'simpl']","['clear', 'simplification', 'simplified']"
Usability,"/// Return an assumed unique ICV value if a single candidate is found. If; /// there cannot be one, return a nullptr. If it is not clear yet, return; /// std::nullopt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:131,clear,clear,131,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['clear'],['clear']
Usability,"/// Return an expression for LHS /s RHS, if it can be determined and if the; /// remainder is known to be zero, or null otherwise. If IgnoreSignificantBits; /// is true, expressions like (X * Y) /s Y are simplified to X, ignoring that; /// the multiplication may overflow, which is useful when the result will be; /// used in a context where the most significant bits are ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:204,simpl,simplified,204,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['simpl'],['simplified']
Usability,"/// Return error contained inside this Cursor, if any. Clears the internal; /// Cursor state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:55,Clear,Clears,55,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['Clear'],['Clears']
Usability,"/// Return metadata containing the entry \p Count for a function, a boolean; /// \Synthetic indicating whether the counts were synthetized, and the; /// GUIDs stored in \p Imports that need to be imported for sample PGO, to; /// enable the same inlines as the profiled optimized binary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:153,GUID,GUIDs,153,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,1,['GUID'],['GUIDs']
Usability,"/// Return nonnull value if V is free to invert under the condition of; /// WillInvertAllUses.; /// If Builder is nonnull, it will return a simplified ~V.; /// If Builder is null, it will return an arbitrary nonnull value (not; /// dereferenceable).; /// If the inversion will consume instructions, `DoesConsume` will be set to; /// true. Otherwise it will be false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:140,simpl,simplified,140,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,1,['simpl'],['simplified']
Usability,/// Return the GUID for \p OriginalId in the OidGuidMap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:15,GUID,GUID,15,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,"/// Return the GUID of the context's name. If the context is already using; /// MD5, don't hash it again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:15,GUID,GUID,15,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,1,['GUID'],['GUID']
Usability,/// Return the SimpleValueType held in the specified simple EVT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:15,Simpl,SimpleValueType,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,2,"['Simpl', 'simpl']","['SimpleValueType', 'simple']"
Usability,/// Return the builtin name for the __builtin___clear_cache intrinsic; /// Default is to invoke the clear cache library call,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:100,clear,clear,100,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['clear'],['clear']
Usability,/// Return the cost of spilling clearing out PhysReg and aliases so it is free; /// for allocation. Returns 0 when PhysReg is free or disabled with all aliases; /// disabled - it can be allocated directly.; /// \returns spillImpossible when PhysReg or an alias can't be spilled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp:32,clear,clearing,32,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,1,['clear'],['clearing']
Usability,/// Return the entries from a DenseMap in a deterministic sorted orer.; /// Clears the map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h:76,Clear,Clears,76,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,1,['Clear'],['Clears']
Usability,"/// Return the exact trip count for this loop if we exit through ExitingBlock.; /// '0' is used to represent an unknown or non-constant trip count. Note; /// that a trip count is simply one more than the backedge taken count for; /// the same exit.; /// This ""trip count"" assumes that control exits via ExitingBlock. More; /// precisely, it is the number of times that control will reach ExitingBlock; /// before taking the branch. For loops with multiple exits, it may not be; /// the number times that the loop header executes if the loop exits; /// prematurely via another branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:179,simpl,simply,179,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['simpl'],['simply']
Usability,"/// Return the exception object from the value passed into; /// the 'resume' instruction (typically an aggregate). Clean up any dead; /// instructions, including the 'resume' instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp:69,resume,resume,69,interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DwarfEHPrepare.cpp,2,['resume'],['resume']
Usability,"/// Return the loop guard branch, if it exists.; ///; /// This currently only works on simplified loop, as it requires a preheader; /// and a latch to identify the guard. It will work on loops of the form:; /// \code; /// GuardBB:; /// br cond1, Preheader, ExitSucc <== GuardBranch; /// Preheader:; /// br Header; /// Header:; /// ...; /// br Latch; /// Latch:; /// br cond2, Header, ExitBlock; /// ExitBlock:; /// br ExitSucc; /// ExitSucc:; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:87,simpl,simplified,87,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['simpl'],['simplified']
Usability,"/// Return the minimum clearance before an instruction that reads an; /// unused register.; ///; /// For example, AVX instructions may copy part of a register operand into; /// the unused high bits of the destination register.; ///; /// vcvtsi2sdq %rax, undef %xmm0, %xmm14; ///; /// In the code above, vcvtsi2sdq copies %xmm0[127:64] into %xmm14 creating a; /// false dependence on any previous write to %xmm0.; ///; /// This hook works similarly to getPartialRegUpdateClearance, except that it; /// does not take an operand index. Instead sets \p OpNum to the index of the; /// unused register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:23,clear,clearance,23,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['clear'],['clearance']
Usability,"/// Return the nearest parent loop among this block's successors. If a successor; /// is a subloop header, consider its parent to be the nearest parent of the; /// subloop's exits.; ///; /// For subloop blocks, simply update SubloopParents and return NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp:211,simpl,simply,211,interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp,1,['simpl'],['simply']
Usability,/// Return the simple ValueType of the referenced return value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:15,simpl,simple,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['simpl'],['simple']
Usability,/// Return the total number of CFGBlocks within the CFG This is simply a; /// renaming of the getNumBlockIDs(). This is necessary because the dominator; /// implementation needs such an interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:64,simpl,simply,64,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['simpl'],['simply']
Usability,/// Return the type of a specified result as a simple type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:47,simpl,simple,47,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['simpl'],['simple']
Usability,/// Return the type of the mask type suitable for masking the provided; /// vector type. This is simply an i1 element type vector of the same; /// (possibly scalable) length.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:97,simpl,simply,97,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['simpl'],['simply']
Usability,"/// Return the type we can choose for a private copy of the underlying; /// value. std::nullopt means it is not clear yet, nullptr means there is; /// none.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:112,clear,clear,112,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['clear'],['clear']
Usability,"/// Return the types for a coerce-and-expand operation.; ///; /// The first type matches the memory layout of the data that's been; /// added to this structure, including explicit [N x i8] arrays for any; /// internal padding.; ///; /// The second type removes any internal padding members and, if only; /// one element remains, is simply that element type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h:332,simpl,simply,332,interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h,1,['simpl'],['simply']
Usability,"/// Return true for instructions that can be folded as memory operands; /// in other instructions. The most common use for this is instructions that; /// are simple loads from memory that don't modify the loaded value in any; /// way, but it can also be used for instructions that can be expressed as; /// constant-pool loads, such as V_SETALLONES on x86, to allow them to be; /// folded when it is beneficial. This should only be set on instructions; /// that return a value in their only virtual register definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:158,simpl,simple,158,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,1,['simpl'],['simple']
Usability,"/// Return true for instructions that can be folded as; /// memory operands in other instructions. The most common use for this; /// is instructions that are simple loads from memory that don't modify; /// the loaded value in any way, but it can also be used for instructions; /// that can be expressed as constant-pool loads, such as V_SETALLONES; /// on x86, to allow them to be folded when it is beneficial.; /// This should only be set on instructions that return a value in their; /// only virtual register definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:158,simpl,simple,158,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['simpl'],['simple']
Usability,/// Return true if 'Op & Mask' is known to be zero in DemandedElts. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:98,simpl,simplify,98,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['simpl'],['simplify']
Usability,/// Return true if 'Op & Mask' is known to be zero. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:82,simpl,simplify,82,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['simpl'],['simplify']
Usability,/// Return true if 'Op' is known to be zero in DemandedElts. We; /// use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:91,simpl,simplify,91,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['simpl'],['simplify']
Usability,"/// Return true if 'V & Mask' is known to be zero. We use this predicate to; /// simplify operations downstream. Mask is known to be zero for bits that V; /// cannot have.; ///; /// This function is defined on values with integer type, values with pointer; /// type, and vectors of integers. In the case; /// where V is a vector, the mask, known zero, and known one values are the; /// same width as the vector element, and the bit is set only if it is true; /// for all of the elements in the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:81,simpl,simplify,81,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['simpl'],['simplify']
Usability,"/// Return true if IVU is a ""simple"" arithmetic operation.; /// This is used for narrowing the search space for DAGRoots; only arithmetic; /// and GEPs can be part of a DAGRoot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:29,simpl,simple,29,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['simpl'],['simple']
Usability,/// Return true if MI is a G_ADD which can be simplified to a G_SUB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:46,simpl,simplified,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,1,['simpl'],['simplified']
Usability,"/// Return true if MI is likely to be usable as a memory operation by the; /// implicit null check optimization.; ///; /// This is a ""best effort"" heuristic, and should not be relied upon for; /// correctness. This returning true does not guarantee that the implicit null; /// check optimization is legal over MI, and this returning false does not; /// guarantee MI cannot possibly be used to do a null check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:38,usab,usable,38,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['usab'],['usable']
Usability,"/// Return true if a select of constants (select Cond, C1, C2) should be; /// transformed into simple math ops with the condition value. For example:; /// select Cond, C1, C1-1 --> add (zext Cond), C1-1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:95,simpl,simple,95,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['simpl'],['simple']
Usability,/// Return true if all loops in the loop nest are in simplify form.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopNestAnalysis.h:53,simpl,simplify,53,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopNestAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopNestAnalysis.h,1,['simpl'],['simplify']
Usability,"/// Return true if an STP can be added to this block without increasing the; /// critical resource height. STP is good to form in Ld/St limited blocks and; /// bad to form in float-point limited blocks. This is true independent of the; /// critical path. If the critical path is longer than the resource height, the; /// extra vector ops can limit physreg renaming. Otherwise, it could simply; /// oversaturate the vector units.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64StorePairSuppress.cpp:386,simpl,simply,386,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64StorePairSuppress.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64StorePairSuppress.cpp,1,['simpl'],['simply']
Usability,"/// Return true if graph simplification step is requested, and false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h:25,simpl,simplification,25,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h,1,['simpl'],['simplification']
Usability,/// Return true if it is profitable to transform an integer; /// multiplication-by-constant into simpler operations like shifts and adds.; /// This may be true if the target does not directly support the; /// multiplication operation for the specified type or the sequence of simpler; /// ops is faster than the multiply.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:97,simpl,simpler,97,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['simpl'],['simpler']
Usability,"/// Return true if it's significantly cheaper to shift a vector by a uniform; /// scalar than by an amount which will vary across each lane. On x86 before; /// AVX2 for example, there is a ""psllw"" instruction for the former case, but; /// no simple instruction for a general ""a << b"" operation on vectors.; /// This should also apply to lowering for vector funnel shifts (rotates).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:242,simpl,simple,242,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['simpl'],['simple']
Usability,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:299,undo,undone,299,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['undo'],['undone']
Usability,"/// Return true if the induction variable can underflow in the first iteration.; /// An example, is an initial unsigned value that is 0 and is decrement in the; /// first itertion of a do-while loop. In this case, we cannot generate a; /// hardware loop because the endloop instruction does not decrement the loop; /// counter if it is <= 1. We only need to perform this analysis if the; /// initial value is a register.; ///; /// This function assumes the initial value may underfow unless proven; /// otherwise. If the type is signed, then we don't care because signed; /// underflow is undefined. We attempt to prove the initial value is not; /// zero by perfoming a crude analysis of the loop counter. This function; /// checks if the initial value is used in any comparison prior to the loop; /// and, if so, assumes the comparison is a range check. This is inexact,; /// but will catch the simple cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:896,simpl,simple,896,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['simpl'],['simple']
Usability,/// Return true if the sign bit of Op is known to be zero.; /// We use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:89,simpl,simplify,89,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['simpl'],['simplify']
Usability,/// Return true if the specified constant can be handled by the code generator.; /// We don't want to generate something like:; /// void *X = &X/42;; /// because the code generator doesn't have a relocation that can handle that.; ///; /// This function should be called if C was not found (but just got inserted); /// in SimpleConstants to avoid having to rescan the same constants all the; /// time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Evaluator.cpp:321,Simpl,SimpleConstants,321,interpreter/llvm-project/llvm/lib/Transforms/Utils/Evaluator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Evaluator.cpp,1,['Simpl'],['SimpleConstants']
Usability,/// Return true if the specified operation is illegal on this target or; /// unlikely to be made legal with custom lowering. This is used to help guide; /// high-level lowering decisions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:146,guid,guide,146,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['guid'],['guide']
Usability,/// Return true if the specified operation is legal on this target or can be; /// made legal using promotion. This is used to help guide high-level lowering; /// decisions. LegalOnly is an optional convenience for code paths traversed; /// pre and post legalisation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:131,guid,guide,131,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['guid'],['guide']
Usability,/// Return true if the specified operation is legal on this target or can be; /// made legal with custom lowering or using promotion. This is used to help; /// guide high-level lowering decisions. LegalOnly is an optional convenience; /// for code paths traversed pre and post legalisation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:160,guid,guide,160,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['guid'],['guide']
Usability,/// Return true if the specified operation is legal on this target or can be; /// made legal with custom lowering. This is used to help guide high-level; /// lowering decisions. LegalOnly is an optional convenience for code paths; /// traversed pre and post legalisation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:136,guid,guide,136,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['guid'],['guide']
Usability,/// Return true if the target has a bitwise and-not operation:; /// X = ~A & B; /// This can be used to simplify select or other instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:104,simpl,simplify,104,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['simpl'],['simplify']
Usability,/// Return true if the target supports simplifying demanded vector elements by; /// converting them to undefs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:39,simpl,simplifying,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['simpl'],['simplifying']
Usability,/// Return true if the two nodes \pSrc and \pTgt are both simple nodes and; /// the consecutive instructions after merging belong to the same basic block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h:58,simpl,simple,58,interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DDG.h,1,['simpl'],['simple']
Usability,/// Return true if there is a simplification callback for \p GV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:30,simpl,simplification,30,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplification']
Usability,/// Return true if there is a simplification callback for \p IRP.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:30,simpl,simplification,30,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplification']
Usability,"/// Return true if this block should be vacated by the coalescer to eliminate; /// branches. The important cases to handle in the coalescer are critical edges; /// split during phi elimination which contain only copies. Simple blocks that; /// contain non-branches should also be vacated, but this can be handled by an; /// earlier pass similar to early if-conversion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:220,Simpl,Simple,220,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['Simpl'],['Simple']
Usability,"/// Return true if this instruction could possibly modify memory.; /// Instructions with this flag set are not necessarily simple store; /// instructions, they may store a modified value based on their operands, or; /// may not actually modify anything, for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:123,simpl,simple,123,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,2,['simpl'],['simple']
Usability,/// Return true if this instruction generates a simple SCEV; /// expression in terms of that IV.; ///; /// This is similar to IVUsers' isInteresting() but processes each instruction; /// non-recursively when the operand is already known to be a simpleIVUser.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:48,simpl,simple,48,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,2,['simpl'],"['simple', 'simpleIVUser']"
Usability,"/// Return true if this is a floating-point store smaller than the V reg. On; /// cyclone, these require a vector shuffle before storing a pair.; /// Ideally we would call getMatchingPairOpcode() and have the machine model; /// tell us if it's profitable with no cpu knowledge here.; ///; /// FIXME: We plan to develop a decent Target abstraction for simple loads and; /// stores. Until then use a nasty switch similar to AArch64LoadStoreOptimizer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64StorePairSuppress.cpp:351,simpl,simple,351,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64StorePairSuppress.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64StorePairSuppress.cpp,1,['simpl'],['simple']
Usability,/// Return true if this is a simple legal type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:29,simpl,simple,29,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,1,['simpl'],['simple']
Usability,/// Return true if this is a valid ASCII identifier.; ///; /// Note that this is a very simple check; it does not accept UCNs as valid; /// identifier characters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CharInfo.h:88,simpl,simple,88,interpreter/llvm-project/clang/include/clang/Basic/CharInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CharInfo.h,1,['simpl'],['simple']
Usability,/// Return true if this is a valid simple valuetype.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:35,simpl,simple,35,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,1,['simpl'],['simple']
Usability,/// Return true if this node is so simple that we should just print it inline; /// if it appears as an operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp:35,simpl,simple,35,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp,1,['simpl'],['simple']
Usability,"/// Return true if this shuffle mask is a transpose mask.; /// Transpose vector masks transpose a 2xn matrix. They read corresponding; /// even- or odd-numbered vector elements from two n-dimensional source; /// vectors and write each result into consecutive elements of an; /// n-dimensional destination vector. Two shuffles are necessary to complete; /// the transpose, one for the even elements and another for the odd elements.; /// This description closely follows how the TRN1 and TRN2 AArch64; /// instructions operate.; ///; /// For example, a simple 2x2 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b >; /// m1 = < c, d >; ///; /// ; Transposed matrix; /// t0 = < a, c > = shufflevector m0, m1, < 0, 2 >; /// t1 = < b, d > = shufflevector m0, m1, < 1, 3 >; ///; /// For matrices having greater than n columns, the resulting nx2 transposed; /// matrix is stored in two result vectors such that one vector contains; /// interleaved elements from all the even-numbered rows and the other vector; /// contains interleaved elements from all the odd-numbered rows. For example,; /// a 2x4 matrix can be transposed with:; ///; /// ; Original matrix; /// m0 = < a, b, c, d >; /// m1 = < e, f, g, h >; ///; /// ; Transposed matrix; /// t0 = < a, e, c, g > = shufflevector m0, m1 < 0, 4, 2, 6 >; /// t1 = < b, f, d, h > = shufflevector m0, m1 < 1, 5, 3, 7 >",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:552,simpl,simple,552,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['simpl'],['simple']
Usability,/// Return true if we can simplify X / Y to 0. Remainder can adapt that answer; /// to simplify X % Y to X.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:26,simpl,simplify,26,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['simpl'],['simplify']
Usability,"/// Return true if we can simplify two logical (either left or right) shifts; /// that have constant shift amounts: OuterShift (InnerShift X, C1), C2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:26,simpl,simplify,26,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['simpl'],['simplify']
Usability,"/// Return true iff the loop is; /// - in simplify rotated form, and; /// - guarded by a loop guard branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:42,simpl,simplify,42,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['simpl'],['simplify']
Usability,"/// Return whether the location is computed on the expression stack, meaning; /// it cannot be a simple register location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:97,simpl,simple,97,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['simpl'],['simple']
Usability,/// Returns a format style complying with Chromium's style guide:; /// http://www.chromium.org/developers/coding-style.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:59,guid,guide,59,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['guid'],['guide']
Usability,/// Returns a format style complying with Microsoft style guide:; /// https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2017,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:58,guid,guide,58,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['guid'],['guide']
Usability,/// Returns a format style complying with Mozilla's style guide:; /// https://firefox-source-docs.mozilla.org/code-quality/coding-style/index.html.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:58,guid,guide,58,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['guid'],['guide']
Usability,/// Returns a format style complying with Webkit's style guide:; /// http://www.webkit.org/coding/coding-style.html,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:57,guid,guide,57,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['guid'],['guide']
Usability,/// Returns a format style complying with one of Google's style guides:; /// http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml.; /// http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml.; /// https://developers.google.com/protocol-buffers/docs/style.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:64,guid,guides,64,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['guid'],['guides']
Usability,/// Returns a pass that clears pipeline hazards.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:24,clear,clears,24,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,1,['clear'],['clears']
Usability,/// Returns a simple string representation of each error.; ///; /// Each error only shows the error message without any context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:14,simpl,simple,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,1,['simpl'],['simple']
Usability,"/// Returns a stable mangling for the type specified for use in the name; /// mangling scheme used by 'any' types in intrinsic signatures. The mangling; /// of named types is simply their name. Manglings for unnamed types consist; /// of a prefix ('p' for pointers, 'a' for arrays, 'f_' for functions); /// combined with the mangling of their component types. A vararg function; /// type will have a suffix of 'vararg'. Since function types can contain; /// other function types, we close a function type mangling with suffix 'f'; /// which can't be confused with it's prefix. This ensures we don't have; /// collisions between two unrelated function types. Otherwise, you might; /// parse ffXX as f(fXX) or f(fX)X. (X is a placeholder for any other type.); /// The HasUnnamedType boolean is set if an unnamed type was encountered,; /// indicating that extra care must be taken to ensure a unique name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Function.cpp:175,simpl,simply,175,interpreter/llvm-project/llvm/lib/IR/Function.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Function.cpp,1,['simpl'],['simply']
Usability,"/// Returns a vector of all BB address maps in the object file. When; /// `TextSectionIndex` is specified, only returns the BB address maps; /// corresponding to the section with that index. When `PGOAnalyses`is; /// specified (PGOAnalyses is not nullptr), the vector is cleared then filled; /// with extra PGO data. `PGOAnalyses` will always be the same length as the; /// return value when it is requested assuming no error occurs. Upon failure,; /// `PGOAnalyses` will be emptied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:271,clear,cleared,271,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,1,['clear'],['cleared']
Usability,/// Returns subprogram DIE with address range encompassing the provided; /// address. The pointer is alive as long as parsed compile unit DIEs are not; /// cleared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:156,clear,cleared,156,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,1,['clear'],['cleared']
Usability,"/// Returns the ""raw"" SVal bound to LV before any value simplfication.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:56,simpl,simplfication,56,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,1,['simpl'],['simplfication']
Usability,"/// Returns the current insert point, clearing it in the process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:38,clear,clearing,38,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['clear'],['clearing']
Usability,/// Returns the distance between the pointers \p PtrA and \p PtrB iff they are; /// compatible and it is possible to calculate the distance between them. This; /// is a simple API that does not depend on the analysis pass.; /// \param StrictCheck Ensure that the calculated distance matches the; /// type-based one after all the bitcasts removal in the provided pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:169,simpl,simple,169,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['simpl'],['simple']
Usability,"/// Returns the exact trip count of the loop if we can compute it, and; /// the result is a small constant. '0' is used to represent an unknown; /// or non-constant trip count. Note that a trip count is simply one more; /// than the backedge taken count for the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:203,simpl,simply,203,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['simpl'],['simply']
Usability,"/// Returns the hash of the original name, it is identical to the GUID for; /// externally visible symbols, but not for local ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:66,GUID,GUID,66,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,"/// Returns the largest constant divisor of the trip count of this loop as a; /// normal unsigned value, if possible. This means that the actual trip count is; /// always a multiple of the returned value (don't forget the trip count could; /// very well be zero as well!).; ///; /// Returns 1 if the trip count is unknown or not guaranteed to be the; /// multiple of a constant (which is also the case if the trip count is simply; /// constant, use getSmallConstantTripCount for that case), Will also return 1; /// if the trip count is very large (>= 2^32).; ///; /// As explained in the comments for getSmallConstantTripCount, this assumes; /// that control exits the loop via ExitingBlock.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:423,simpl,simply,423,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['simpl'],['simply']
Usability,"/// Returns the list of type identifiers used by this function in; /// llvm.type.test intrinsics other than by an llvm.assume intrinsic,; /// represented as GUIDs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:157,GUID,GUIDs,157,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUIDs']
Usability,"/// Returns the location of the result object for a record-type prvalue.; ///; /// In C++, prvalues of record type serve only a limited purpose: They can; /// only be used to initialize a result object (e.g. a variable or a; /// temporary). This function returns the location of that result object.; ///; /// When creating a prvalue of record type, we already need the storage; /// location of the result object to pass in `this`, even though prvalues are; /// otherwise not associated with storage locations.; ///; /// FIXME: Currently, this simply returns a stable storage location for `E`,; /// but this doesn't do the right thing in scenarios like the following:; /// ```; /// MyClass c = some_condition()? MyClass(foo) : MyClass(bar);; /// ```; /// Here, `MyClass(foo)` and `MyClass(bar)` will have two different storage; /// locations, when in fact their storage locations should be the same.; /// Eventually, we want to propagate storage locations from result objects; /// down to the prvalues that initialize them, similar to the way that this is; /// done in Clang's CodeGen.; ///; /// Requirements:; /// `E` must be a prvalue of record type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:543,simpl,simply,543,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['simpl'],['simply']
Usability,/// Returns the minimum size of a nop in bytes on this target. The assembler; /// will use this to emit excess padding in situations where the padding; /// required for simple alignment would be less than the minimum nop size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kAsmBackend.cpp:169,simpl,simple,169,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kAsmBackend.cpp,1,['simpl'],['simple']
Usability,/// Returns the name of a C++ deduction guide for the given template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:40,guid,guide,40,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['guid'],['guide']
Usability,"/// Returns the name of the callee, if its name is a simple identifier.; ///; /// Note that this will fail for Objective-C methods, blocks, and C++; /// overloaded operators. The former is named by a Selector rather than a; /// simple identifier, and the latter two do not have names.; // FIXME: Move this down to AnyFunctionCall once checkers have more; // precise callbacks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:53,simpl,simple,53,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,2,['simpl'],['simple']
Usability,/// Returns the offset in parts to which this frame offset can be; /// decomposed for the purpose of describing a frame offset.; /// For non-scalable offsets this is simply its byte size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:166,simpl,simply,166,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['simpl'],['simply']
Usability,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:34,clear,clearance,34,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,2,['clear'],['clearance']
Usability,/// Returns the program status and control \c RFLAGS register with the \c VM; /// and \c RF flags cleared.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the \c PUSHFQ + \c POP instruction sequence.; ///; /// \returns The 64-bit value of the RFLAGS register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h:98,clear,cleared,98,interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/ia32intrin.h,1,['clear'],['cleared']
Usability,"/// Returns the set of GUIDs that needs to be imported to the function for; /// sample PGO, to enable the same inlines as the profiled optimized binary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:23,GUID,GUIDs,23,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h,1,['GUID'],['GUIDs']
Usability,"/// Returns the size of the trailing data, if an object were; /// allocated with the given counts (The counts are in the same order; /// as the template arguments). This does not include the size of the; /// base object. The template arguments must be the same as those; /// used in the class; they are supplied here redundantly only so; /// that it's clear what the counts are counting in callers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:352,clear,clear,352,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,1,['clear'],['clear']
Usability,"/// Returns the state with bindings for the given regions; /// cleared from the store.; ///; /// Optionally invalidates global regions as well.; ///; /// \param Regions the set of regions to be invalidated.; /// \param E the expression that caused the invalidation.; /// \param BlockCount The number of times the current basic block has been; // visited.; /// \param CausesPointerEscape the flag is set to true when; /// the invalidation entails escape of a symbol (representing a; /// pointer). For example, due to it being passed as an argument in a; /// call.; /// \param IS the set of invalidated symbols.; /// \param Call if non-null, the invalidated regions represent parameters to; /// the call and should be considered directly invalidated.; /// \param ITraits information about special handling for a particular; /// region/symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:63,clear,cleared,63,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,1,['clear'],['cleared']
Usability,/// Returns the string's reference. In most cases it is better to simply use; /// the underlying std::string directly.; /// TODO: Consider removing this API.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:66,simpl,simply,66,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['simpl'],['simply']
Usability,"/// Returns true if MI is a dependency breaking zero-idiom for the given; /// subtarget.; ///; /// Mask is used to identify input operands that have their dependency; /// broken. Each bit of the mask is associated with a specific input operand.; /// Bits associated with explicit input operands are laid out first in the; /// mask; implicit operands come after explicit operands.; /// ; /// Dependencies are broken only for operands that have their corresponding bit; /// set. Operands that have their bit cleared, or that don't have a; /// corresponding bit in the mask don't have their dependency broken. Note; /// that Mask may not be big enough to describe all operands. The assumption; /// for operands that don't have a correspondent bit in the mask is that those; /// are still data dependent.; /// ; /// The only exception to the rule is for when Mask has all zeroes.; /// A zero mask means: dependencies are broken for all explicit register; /// operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:506,clear,cleared,506,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,1,['clear'],['cleared']
Usability,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:399,clear,cleared,399,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,1,['clear'],['cleared']
Usability,"/// Returns true if N is a predecessor of any node in Worklist. This; /// helper keeps Visited and Worklist sets externally to allow unions; /// searches to be performed in parallel, caching of results across; /// queries and incremental addition to Worklist. Stops early if N is; /// found but will resume. Remember to clear Visited and Worklists; /// if DAG changes. MaxSteps gives a maximum number of nodes to visit before; /// giving up. The TopologicalPrune flag signals that positive NodeIds are; /// topologically ordered (Operands have strictly smaller node id) and search; /// can be pruned leveraging this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:300,resume,resume,300,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,2,"['clear', 'resume']","['clear', 'resume']"
Usability,/// Returns true if \c E is a simple literal or a reference expression that; /// should not be extracted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp:30,simpl,simple,30,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp,1,['simpl'],['simple']
Usability,/// Returns true if \p D is the last declarator in a chain and is thus; /// reponsible for creating SimpleDeclaration for the whole chain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:100,Simpl,SimpleDeclaration,100,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,1,['Simpl'],['SimpleDeclaration']
Usability,"/// Returns true if at least one of the register writes performed by; /// \param Inst implicitly clears the upper portion of all super-registers.; ///; /// Example: on X86-64, a write to EAX implicitly clears the upper half of; /// RAX. Also (still on x86) an XMM write perfomed by an AVX 128-bit; /// instruction implicitly clears the upper portion of the correspondent; /// YMM register.; ///; /// This method also updates an APInt which is used as mask of register; /// writes. There is one bit for every explicit/implicit write performed by; /// the instruction. If a write implicitly clears its super-registers, then; /// the corresponding bit is set (vic. the corresponding bit is cleared).; ///; /// The first bits in the APint are related to explicit writes. The remaining; /// bits are related to implicit writes. The sequence of writes follows the; /// machine operand sequence. For implicit writes, the sequence is defined by; /// the MCInstrDesc.; ///; /// The assumption is that the bit-width of the APInt is correctly set by; /// the caller. The default implementation conservatively assumes that none of; /// the writes clears the upper portion of a super-register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:97,clear,clears,97,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,6,['clear'],"['cleared', 'clears']"
Usability,/// Returns true if the 'true' block (along with its predecessor) forms a valid; /// simple shape for ifcvt. It also returns the number of instructions that the; /// ifcvt would need to duplicate if performed in Dups.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp:85,simpl,simple,85,interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp,1,['simpl'],['simple']
Usability,/// Returns true if the memory operations \p A and \p B are consecutive.; /// This is a simple API that does not depend on the analysis pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:88,simpl,simple,88,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['simpl'],['simple']
Usability,/// Returns true if this region can be printed in a user-friendly way.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:52,user-friendly,user-friendly,52,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['user-friendly'],['user-friendly']
Usability,"/// Returns true iff the routine could find two commutable operands in the; /// given machine instruction with 3 vector inputs.; /// The 'SrcOpIdx1' and 'SrcOpIdx2' are INPUT and OUTPUT arguments. Their; /// input values can be re-defined in this method only if the input values; /// are not pre-defined, which is designated by the special value; /// 'CommuteAnyOperandIndex' assigned to it.; /// If both of indices are pre-defined and refer to some operands, then the; /// method simply returns true if the corresponding operands are commutable; /// and returns false otherwise.; ///; /// For example, calling this method this way:; /// unsigned Op1 = 1, Op2 = CommuteAnyOperandIndex;; /// findThreeSrcCommutedOpIndices(MI, Op1, Op2);; /// can be interpreted as a query asking to find an operand that would be; /// commutable with the operand#1.; ///; /// If IsIntrinsic is set, operand 1 will be ignored for commuting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:481,simpl,simply,481,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['simpl'],['simply']
Usability,"/// Returns true iff the routine could find two commutable operands in the; /// given machine instruction.; /// The 'SrcOpIdx1' and 'SrcOpIdx2' are INPUT and OUTPUT arguments. Their; /// input values can be re-defined in this method only if the input values; /// are not pre-defined, which is designated by the special value; /// 'CommuteAnyOperandIndex' assigned to it.; /// If both of indices are pre-defined and refer to some operands, then the; /// method simply returns true if the corresponding operands are commutable; /// and returns false otherwise.; ///; /// For example, calling this method this way:; /// unsigned Op1 = 1, Op2 = CommuteAnyOperandIndex;; /// findCommutedOpIndices(MI, Op1, Op2);; /// can be interpreted as a query asking to find an operand that would be; /// commutable with the operand#1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:460,simpl,simply,460,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['simpl'],['simply']
Usability,"/// Returns true iff the routine could find two commutable operands in the; /// given machine instruction.; /// The 'SrcOpIdx1' and 'SrcOpIdx2' are INPUT and OUTPUT arguments.; /// If any of the INPUT values is set to the special value; /// 'CommuteAnyOperandIndex' then the method arbitrarily picks a commutable; /// operand, then returns its index in the corresponding argument.; /// If both of INPUT values are set to 'CommuteAnyOperandIndex' then method; /// looks for 2 commutable operands.; /// If INPUT values refer to some operands of MI, then the method simply; /// returns true if the corresponding operands are commutable and returns; /// false otherwise.; ///; /// For example, calling this method this way:; /// unsigned Op1 = 1, Op2 = CommuteAnyOperandIndex;; /// findCommutedOpIndices(MI, Op1, Op2);; /// can be interpreted as a query asking to find an operand that would be; /// commutable with the operand#1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:563,simpl,simply,563,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['simpl'],['simply']
Usability,"/// Returns true on error, false on success. If true is returned then the error; /// message is copied to OutStr and cleared in the ExecutionEngine instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/ExecutionEngine.h:117,clear,cleared,117,interpreter/llvm-project/llvm/include/llvm-c/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm-c/ExecutionEngine.h,1,['clear'],['cleared']
Usability,/// Returns variable DIE for the address provided. The pointer is alive as; /// long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:121,clear,cleared,121,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,1,['clear'],['cleared']
Usability,/// Returns whether the given function is an empty C++ destructor and can; /// therefore be eliminated.; /// Note that we assume that other optimization passes have already simplified; /// the code so we simply check for 'ret'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:173,simpl,simplified,173,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,2,['simpl'],"['simplified', 'simply']"
Usability,/// Returns whether the pipeline is currently paused.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h:46,pause,paused,46,interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Pipeline.h,1,['pause'],['paused']
Usability,/// Reverse the items in the PriorityWorklist.; ///; /// This does an in-place reversal. Other kinds of reverse aren't easy to; /// support in the face of the worklist semantics.; /// Completely clear the PriorityWorklist,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h:195,clear,clear,195,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityWorklist.h,1,['clear'],['clear']
Usability,"/// Rewrite the loop's terminating condition if it uses a max computation.; ///; /// This is a narrow solution to a specific, but acute, problem. For loops; /// like this:; ///; /// i = 0;; /// do {; /// p[i] = 0.0;; /// } while (++i < n);; ///; /// the trip count isn't just 'n', because 'n' might not be positive. And; /// unfortunately this can come up even for loops where the user didn't use; /// a C do-while loop. For example, seemingly well-behaved top-test loops; /// will commonly be lowered like this:; ///; /// if (n > 0) {; /// i = 0;; /// do {; /// p[i] = 0.0;; /// } while (++i < n);; /// }; ///; /// and then it's possible for subsequent optimization to obscure the if; /// test in such a way that indvars can't find it.; ///; /// When indvars can't find the if test in loops like this, it creates a; /// max expression, which allows it to give the loop a canonical; /// induction variable:; ///; /// i = 0;; /// max = n < 1 ? 1 : n;; /// do {; /// p[i] = 0.0;; /// } while (++i != max);; ///; /// Canonical induction variables are necessary because the loop passes; /// are designed around them. The most obvious example of this is the; /// LoopInfo analysis, which doesn't remember trip count values. It; /// expects to be able to rediscover the trip count each time it is; /// needed, and it does this using a simple analysis that only succeeds if; /// the loop has a canonical induction variable.; ///; /// However, when it comes time to generate code, the maximum operation; /// can be quite costly, especially if it's inside of an outer loop.; ///; /// This function solves this problem by detecting this type of loop and; /// rewriting their conditions from ICMP_NE back to ICMP_SLT, and deleting; /// the instructions for the maximum computation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:1329,simpl,simple,1329,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['simpl'],['simple']
Usability,/// Right-shifts each 16-bit integer element of a 64-bit integer vector; /// of [4 x i16] by the number of bits specified by a 32-bit integer.; ///; /// High-order bits are cleared. The 16-bit results are packed into a 64-bit; /// integer vector of [4 x i16].; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> PSRLW </c> instruction.; ///; /// \param __m; /// A 64-bit integer vector of [4 x i16].; /// \param __count; /// A 32-bit integer value.; /// \returns A 64-bit integer vector of [4 x i16] containing the right-shifted; /// values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h:173,clear,cleared,173,interpreter/llvm-project/clang/lib/Headers/mmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h,1,['clear'],['cleared']
Usability,"/// Right-shifts each 16-bit integer element of the first parameter,; /// which is a 64-bit integer vector of [4 x i16], by the number of bits; /// specified by the second parameter, which is a 64-bit integer.; ///; /// High-order bits are cleared. The 16-bit results are packed into a 64-bit; /// integer vector of [4 x i16].; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> PSRLW </c> instruction.; ///; /// \param __m; /// A 64-bit integer vector of [4 x i16].; /// \param __count; /// A 64-bit integer vector interpreted as a single 64-bit integer.; /// \returns A 64-bit integer vector of [4 x i16] containing the right-shifted; /// values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h:240,clear,cleared,240,interpreter/llvm-project/clang/lib/Headers/mmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h,1,['clear'],['cleared']
Usability,/// Right-shifts each 32-bit integer element of a 64-bit integer vector; /// of [2 x i32] by the number of bits specified by a 32-bit integer.; ///; /// High-order bits are cleared. The 32-bit results are packed into a 64-bit; /// integer vector of [2 x i32].; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> PSRLD </c> instruction.; ///; /// \param __m; /// A 64-bit integer vector of [2 x i32].; /// \param __count; /// A 32-bit integer value.; /// \returns A 64-bit integer vector of [2 x i32] containing the right-shifted; /// values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h:173,clear,cleared,173,interpreter/llvm-project/clang/lib/Headers/mmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h,1,['clear'],['cleared']
Usability,"/// Right-shifts each 32-bit integer element of the first parameter,; /// which is a 64-bit integer vector of [2 x i32], by the number of bits; /// specified by the second parameter, which is a 64-bit integer.; ///; /// High-order bits are cleared. The 32-bit results are packed into a 64-bit; /// integer vector of [2 x i32].; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> PSRLD </c> instruction.; ///; /// \param __m; /// A 64-bit integer vector of [2 x i32].; /// \param __count; /// A 64-bit integer vector interpreted as a single 64-bit integer.; /// \returns A 64-bit integer vector of [2 x i32] containing the right-shifted; /// values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h:240,clear,cleared,240,interpreter/llvm-project/clang/lib/Headers/mmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h,1,['clear'],['cleared']
Usability,/// Right-shifts the first 64-bit integer parameter by the number of bits; /// specified by the second 64-bit integer parameter.; ///; /// High-order bits are cleared.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> PSRLQ </c> instruction.; ///; /// \param __m; /// A 64-bit integer vector interpreted as a single 64-bit integer.; /// \param __count; /// A 64-bit integer vector interpreted as a single 64-bit integer.; /// \returns A 64-bit integer vector containing the right-shifted value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h:159,clear,cleared,159,interpreter/llvm-project/clang/lib/Headers/mmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h,1,['clear'],['cleared']
Usability,"/// Right-shifts the first parameter, which is a 64-bit integer, by the; /// number of bits specified by the second parameter, which is a 32-bit; /// integer.; ///; /// High-order bits are cleared.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> PSRLQ </c> instruction.; ///; /// \param __m; /// A 64-bit integer vector interpreted as a single 64-bit integer.; /// \param __count; /// A 32-bit integer value.; /// \returns A 64-bit integer vector containing the right-shifted value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h:189,clear,cleared,189,interpreter/llvm-project/clang/lib/Headers/mmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/mmintrin.h,1,['clear'],['cleared']
Usability,"/// Rotate loop LP. Return true if the loop is rotated.; ///; /// \param SimplifiedLatch is true if the latch was just folded into the final; /// loop exit. In this case we may want to rotate even though the new latch is; /// now an exiting branch. This rotation would have happened had the latch not; /// been simplified. However, if SimplifiedLatch is false, then we avoid; /// rotating loops in which the latch exits to avoid excessive or endless; /// rotation. LoopRotate should be repeatable and converge to a canonical; /// form. This property is satisfied because simplifying the loop latch can only; /// happen once across multiple invocations of the LoopRotate pass.; ///; /// If -loop-rotate-multi is enabled we can do multiple rotations in one go; /// so to reach a suitable (non-deoptimizing) exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:73,Simpl,SimplifiedLatch,73,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,4,"['Simpl', 'simpl']","['SimplifiedLatch', 'simplified', 'simplifying']"
Usability,"/// Rotate right via carry, carry gets cleared beforehand by clrc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h:39,clear,cleared,39,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h,1,['clear'],['cleared']
Usability,"/// Run checkers for debug-printing a ProgramState.; ///; /// Unlike most other callbacks, any checker can simply implement the virtual; /// method CheckerBase::printState if it has custom data to print.; ///; /// \param Out The output stream; /// \param State The state being printed; /// \param NL The preferred representation of a newline.; /// \param Space The preferred space between the left side and the message.; /// \param IsDot Whether the message will be printed in 'dot' format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h:107,simpl,simply,107,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/CheckerManager.h,1,['simpl'],['simply']
Usability,"/// Run finalize actions.; ///; /// If any finalize action fails then the corresponding dealloc actions will be; /// run in reverse order (not including the deallocation action for the failed; /// finalize action), and the error for the failing action will be returned.; ///; /// If all finalize actions succeed then a vector of deallocation actions will; /// be returned. The dealloc actions should be run by calling; /// runDeallocationActions. If this function succeeds then the AA argument will; /// be cleared before the function returns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h:507,clear,cleared,507,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/AllocationActions.h,1,['clear'],['cleared']
Usability,"/// Run instruction simplification across each instruction in the function.; ///; /// Instruction simplification has useful constraints in some contexts:; /// - It will never introduce *new* instructions.; /// - There is no need to iterate to a fixed point.; ///; /// Many passes use instruction simplification as a library facility, but it may; /// also be useful (in tests and other contexts) to have access to this very; /// restricted transform at a pass granularity. However, for a much more; /// powerful and comprehensive peephole optimization engine, see the; /// `instcombine` pass instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:20,simpl,simplification,20,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,3,['simpl'],['simplification']
Usability,"/// Run the analyzer's garbage collection - remove dead symbols and; /// bindings from the state.; ///; /// Checkers can participate in this process with two callbacks:; /// \c checkLiveSymbols and \c checkDeadSymbols. See the CheckerDocumentation; /// class for more information.; ///; /// \param Node The predecessor node, from which the processing should start.; /// \param Out The returned set of output nodes.; /// \param ReferenceStmt The statement which is about to be processed.; /// Everything needed for this statement should be considered live.; /// A null statement means that everything in child LocationContexts; /// is dead.; /// \param LC The location context of the \p ReferenceStmt. A null location; /// context means that we have reached the end of analysis and that; /// all statements and local variables should be considered dead.; /// \param DiagnosticStmt Used as a location for any warnings that should; /// occur while removing the dead (e.g. leaks). By default, the; /// \p ReferenceStmt is used.; /// \param K Denotes whether this is a pre- or post-statement purge. This; /// must only be ProgramPoint::PostStmtPurgeDeadSymbolsKind if an; /// entire location context is being cleared, in which case the; /// \p ReferenceStmt must either be a ReturnStmt or \c NULL. Otherwise,; /// it must be ProgramPoint::PreStmtPurgeDeadSymbolsKind (the default); /// and \p ReferenceStmt must be valid (non-null).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:1204,clear,cleared,1204,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['clear'],['cleared']
Usability,"/// Run the pass over the function.; ///; /// This will lower all remaining 'objectsize' and 'is.constant'`; /// intrinsic calls in this function, even when the argument has no known; /// size or is not a constant respectively. The resulting constant is; /// propagated and conditional branches are resolved where possible.; /// This complements the Instruction Simplification and; /// Instruction Combination passes of the optimized pass chain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h:362,Simpl,Simplification,362,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LowerConstantIntrinsics.h,1,['Simpl'],['Simplification']
Usability,/// SValVisitor - this class implements a simple visitor for SVal; /// subclasses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h:42,simpl,simple,42,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,1,['simpl'],['simple']
Usability,/// Save EFLAGS into the returned GPR. This can in turn be restored with; /// `restoreEFLAGS`.; ///; /// Note that LLVM can only lower very simple patterns of saved and restored; /// EFLAGS registers. The restore should always be within the same basic block; /// as the save so that no PHI nodes are inserted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:140,simpl,simple,140,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['simpl'],['simple']
Usability,"/// Scan the specified basic block and try to simplify any instructions in it; /// and recursively delete dead instructions.; ///; /// This returns true if it changed the code, note that it can delete; /// instructions in other blocks as well in this block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:46,simpl,simplify,46,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['simpl'],['simplify']
Usability,"/// Scan the use-list of GV checking to make sure that there are no complex uses; /// of GV. We permit simple things like dereferencing the pointer, but not; /// storing through the address, unless it is to the specified global.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:103,simpl,simple,103,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['simpl'],['simple']
Usability,/// ScheduleDAGMI is an implementation of ScheduleDAGInstrs that simply; /// schedules machine instructions according to the given MachineSchedStrategy; /// without much extra book-keeping. This is the common functionality between; /// PreRA and PostRA MachineScheduler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:65,simpl,simply,65,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,1,['simpl'],['simply']
Usability,/// ScopedFatalErrorHandler - This is a simple helper class which just; /// calls install_fatal_error_handler in its constructor and; /// remove_fatal_error_handler in its destructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h:40,simpl,simple,40,interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ErrorHandling.h,1,['simpl'],['simple']
Usability,"/// ScratchBuffer - This class exposes a simple interface for the dynamic; /// construction of tokens. This is used for builtin macros (e.g. __LINE__) as; /// well as token pasting, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h:41,simpl,simple,41,interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ScratchBuffer.h,1,['simpl'],['simple']
Usability,"/// SectionKind - This is a simple POD value that classifies the properties of; /// a section. A section is classified into the deepest possible; /// classification, and then the target maps them onto their sections based on; /// what capabilities they have.; ///; /// The comments below describe these as if they were an inheritance hierarchy; /// in order to explain the predicates below.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h:28,simpl,simple,28,interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,1,['simpl'],['simple']
Usability,/// See AbstractState::isValidState(); /// NOTE: For now we simply pretend that the worst possible state is invalid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:60,simpl,simply,60,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simply']
Usability,"/// See if V simplifies when its operand Op is replaced with RepOp. If not,; /// return null.; /// AllowRefinement specifies whether the simplification can be a refinement; /// (e.g. 0 instead of poison), or whether it needs to be strictly identical.; /// Op and RepOp can be assumed to not be poison when determining refinement.; ///; /// If DropFlags is passed, then the replacement result is only valid if; /// poison-generating flags/metadata on those instructions are dropped. This; /// is only useful in conjunction with AllowRefinement=false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:13,simpl,simplifies,13,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,2,['simpl'],"['simplification', 'simplifies']"
Usability,"/// See if the given AnalysisDeclContext is built for a function that we; /// should always inline simply because it's small enough.; /// Apart from ""small"" functions, we also have ""large"" functions; /// (cf. isLarge()), some of which are huge (cf. isHuge()), and we classify; /// the remaining functions as ""medium"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:99,simpl,simply,99,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['simpl'],['simply']
Usability,"/// See if we can compute a simplified version of this instruction. If not,; /// return null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:28,simpl,simplified,28,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,1,['simpl'],['simplified']
Usability,"/// See if we can compute a simplified version of this instruction.; /// If not, this returns null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:28,simpl,simplified,28,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplified']
Usability,/// See the comment of ClearDSOLocalOnDeclarations in; /// Utils/FunctionImportUtils.h.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:23,Clear,ClearDSOLocalOnDeclarations,23,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,1,['Clear'],['ClearDSOLocalOnDeclarations']
Usability,"/// SelectArithUXTXRegister - Select a ""UXTX register"" operand. This; /// operand is refered by the instructions have SP operand",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:40,UX,UXTX,40,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['UX'],['UXTX']
Usability,/// Send a SimpleRemoteEPC message.; ///; /// This function may be called concurrently. Subclasses should implement; /// locking if required for the underlying transport.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:11,Simpl,SimpleRemoteEPC,11,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,1,['Simpl'],['SimpleRemoteEPC']
Usability,"/// Serialize the \c names field of a symbol as specified by the Symbol Graph; /// format.; ///; /// The Symbol Graph names field contains multiple representations of a symbol; /// that can be used for different applications:; /// - \c title : The simple declared name of the symbol;; /// - \c subHeading : An array of declaration fragments that provides tags,; /// and potentially more tokens (for example the \c +/- symbol for; /// Objective-C methods). Can be used as sub-headings for documentation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp:248,simpl,simple,248,interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp,1,['simpl'],['simple']
Usability,"/// Serialize the linked remarks to the stream \p OS, using the format \p; /// RemarkFormat.; /// This clears internal state such as the string table.; /// Note: this implies that the serialization mode is standalone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h:103,clear,clears,103,interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/RemarkLinker.h,1,['clear'],['clears']
Usability,"/// Set a CompileFunctionCreator.; ///; /// If this method is not called, a default creation function wil be used; /// that will construct a basic IR compile function that is compatible with; /// the selected number of threads (SimpleCompiler for '0' compile threads,; /// ConcurrentIRCompiler otherwise).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:228,Simpl,SimpleCompiler,228,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,1,['Simpl'],['SimpleCompiler']
Usability,"/// Set errno state for the common case when a standard function indicates; /// failure only by \c errno. Sets \c ErrnoCheckState to \c MustBeChecked, and; /// invalidates the errno region (clear of previous value).; /// \arg \c InvalE Expression that causes invalidation of \c errno.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h:190,clear,clear,190,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h,1,['clear'],['clear']
Usability,/// Set flags for a non-recurrence without clearing previously set flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h:43,clear,clearing,43,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h,2,['clear'],['clearing']
Usability,"/// Set flags for a recurrence without clearing any previously set flags.; /// For AddRec, either NUW or NSW implies NW. Keep track of this fact here; /// to make it easier to propagate flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h:39,clear,clearing,39,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h,1,['clear'],['clearing']
Usability,/// Set of functions to import from a source module. Each entry is a set; /// containing all the GUIDs of all functions to import for a source module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:97,GUID,GUIDs,97,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,1,['GUID'],['GUIDs']
Usability,"/// Set or clear all fast-math-flags on this instruction, which must be an; /// operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,/// Set or clear entries in \p Features that are implied to be enabled/disabled; /// by the provided \p Feature.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/X86TargetParser.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/TargetParser/X86TargetParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/X86TargetParser.h,1,['clear'],['clear']
Usability,"/// Set or clear the allow-contract flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the allow-reciprocal flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the approximate-math-functions flag on this instruction,; /// which must be an operator which supports this flag. See LangRef.html for; /// the meaning of this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the exact flag on this instruction, which must be an operator; /// which supports this flag. See LangRef.html for the meaning of this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,/// Set or clear the inbounds flag on this GEP instruction.; /// See LangRef.html for the meaning of inbounds on a getelementptr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['clear'],['clear']
Usability,/// Set or clear the isBuiltinMacro flag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h:11,clear,clear,11,interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/MacroInfo.h,1,['clear'],['clear']
Usability,"/// Set or clear the nneg flag on this instruction, which must be a zext; /// instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the no-infs flag on this instruction, which must be an; /// operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the no-nans flag on this instruction, which must be an; /// operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the no-signed-zeros flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the nsw flag on this instruction, which must be an operator; /// which supports this flag. See LangRef.html for the meaning of this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the nuw flag on this instruction, which must be an operator; /// which supports this flag. See LangRef.html for the meaning of this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set or clear the reassociation flag on this instruction, which must be; /// an operator which supports this flag. See LangRef.html for the meaning of; /// this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:11,clear,clear,11,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Set the StartAfter, StartBefore and StopAfter passes to allow running only; /// a portion of the normal code-gen pass sequence.; ///; /// If the StartAfter and StartBefore pass ID is zero, then compilation will; /// begin at the normal point; otherwise, clear the Started flag to indicate; /// that passes should not be added until the starting pass is seen. If the; /// Stop pass ID is zero, then compilation will continue to the end.; ///; /// This function expects that at least one of the StartAfter or the; /// StartBefore pass IDs is null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:258,clear,clear,258,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,1,['clear'],['clear']
Usability,"/// Set the entry count for this function.; ///; /// Entry count is the number of times this function was executed based on; /// pgo data. \p Imports points to a set of GUIDs that needs to; /// be imported by the function for sample PGO, to enable the same inlines as; /// the profiled optimized binary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:169,GUID,GUIDs,169,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h,1,['GUID'],['GUIDs']
Usability,/// Set the name of the function and clear the current context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:37,clear,clear,37,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,1,['clear'],['clear']
Usability,"/// Set these 2 clearly OOB, to make sure we set them later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp:16,clear,clearly,16,interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,1,['clear'],['clearly']
Usability,"/// Set to true (only applicatable to ELF -fpic) if dso_local should be; /// dropped for a declaration.; ///; /// On ELF, the assembler is conservative and assumes a global default; /// visibility symbol can be interposable. No direct access relocation is; /// allowed, if the definition is not in the translation unit, even if the; /// definition is available in the linkage unit. Thus we need to clear; /// dso_local to disable direct access.; ///; /// This flag should not be set for -fno-pic or -fpie, which would; /// unnecessarily disable direct access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:398,clear,clear,398,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,1,['clear'],['clear']
Usability,"/// Set up a simple workspace for later tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:13,simpl,simple,13,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,1,['simpl'],['simple']
Usability,"/// Set/clear additional feature bits, including all other bits they imply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h:8,clear,clear,8,interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSubtargetInfo.h,1,['clear'],['clear']
Usability,"/// Sets of analyses required and preserved by a pass; // TODO: It's not clear that SmallVector is an appropriate data structure for; // this usecase. The sizes were picked to minimize wasted space, but are; // otherwise fairly meaningless.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:73,clear,clear,73,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,1,['clear'],['clear']
Usability,"/// Should the result of an assignment be the formal result of the; /// setter call or the value that was passed to the setter?; ///; /// Different pseudo-object language features use different language rules; /// for this.; /// The default is to use the set value. Currently, this affects the; /// behavior of simple assignments, compound assignments, and prefix; /// increment and decrement.; /// Postfix increment and decrement always use the getter result as the; /// expression result.; ///; /// If this method returns true, and the set value isn't capturable for; /// some reason, the result of the expression will be void.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp:311,simpl,simple,311,interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,1,['simpl'],['simple']
Usability,/// SignBitIsZero - Return true if the sign bit of Op is known to be zero. We; /// use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:105,simpl,simplify,105,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['simpl'],['simplify']
Usability,/// Simple MachO header graph builder.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,2,['Simpl'],['Simple']
Usability,/// Simple and conservative implementation of LoopSafetyInfo that can give; /// false-positive answers to its queries in order to avoid complicated; /// analysis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MustExecute.h,1,['Simpl'],['Simple']
Usability,"/// Simple arithmetic binary operations, e.g. +, -, etc.; /// These operations have no side effects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['Simpl'],['Simple']
Usability,"/// Simple arithmetic unary operations, e.g. negate and not.; /// These operations have no side-effects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['Simpl'],['Simple']
Usability,/// Simple binary floating point operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['Simpl'],['Simple']
Usability,"/// Simple callback implementation. Marshaller and function are provided.; ///; /// This class wraps a function of arbitrary signature and a marshaller; /// function into a MatcherDescriptor.; /// The marshaller is in charge of taking the VariantValue arguments, checking; /// their types, unpacking them and calling the underlying function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['Simpl'],['Simple']
Usability,/// Simple check if we can CSE (we have the CSEInfo) or if this Opcode is; /// safe to CSE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,1,['Simpl'],['Simple']
Usability,/// Simple class containing the result of Sema::CorrectTypo,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,1,['Simpl'],['Simple']
Usability,"/// Simple collection proxy for `StructUsingCollectionProxy<T>`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/SimpleCollectionProxy.hxx:4,Simpl,Simple,4,tree/ntuple/v7/test/SimpleCollectionProxy.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/SimpleCollectionProxy.hxx,1,['Simpl'],['Simple']
Usability,"/// Simple compile functor: Takes a single IR module and returns an ObjectFile.; /// This compiler supports a single compilation thread and LLVMContext only.; /// For multithreaded compilation, use ConcurrentIRCompiler below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/CompileUtils.h,1,['Simpl'],['Simple']
Usability,/// Simple constructor for string literals made from one token.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['Simpl'],['Simple']
Usability,"/// Simple conversion between integer and floating point types.; ///; /// Used when handling the OpenCL conditional operator where the; /// condition is a vector while the other operands are scalar.; ///; /// OpenCL v1.1 s6.3.i and s6.11.6 together require that the scalar; /// types are either integer or floating type. Between the two; /// operands, the type with the higher rank is defined as the ""result; /// type"". The other operand needs to be promoted to the same type. No; /// other type promotion is allowed. We cannot use; /// UsualArithmeticConversions() for this purpose, since it always; /// promotes promotable types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Simpl'],['Simple']
Usability,/// Simple diagnostic handler that prints diagnostics to standard error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesYAMLCompiler.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/APINotes/APINotesYAMLCompiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesYAMLCompiler.cpp,1,['Simpl'],['Simple']
Usability,/// Simple enum to distinguish read/write/read-write accesses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['Simpl'],['Simple']
Usability,"/// Simple getters, see the corresponding members for details.; ///{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['Simpl'],['Simple']
Usability,/// Simple helper function to map a BundleOpInfo to an; /// OperandBundleUse.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['Simpl'],['Simple']
Usability,/// Simple in-memory representation of a document of msgpack objects with; /// ability to find and create array and map elements. Does not currently cope; /// with any extension types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['Simpl'],['Simple']
Usability,/// Simple integer binary arithmetic operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['Simpl'],['Simple']
Usability,/// Simple iterator that traverses the template arguments in a; /// container that provides a \c getArgLoc() member function.; ///; /// This iterator is intended to be used with the iterator form of; /// \c TreeTransform<Derived>::TransformTemplateArguments().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['Simpl'],['Simple']
Usability,"/// Simple lookup for a SourceLocation (specifically one denoting the hash in; /// an inclusion directive) in the map of inclusion information, FileChanges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,1,['Simpl'],['Simple']
Usability,/// Simple lookup for a SourceLocation (specifically one denoting the hash in; /// an inclusion directive) in the map of module entry information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,1,['Simpl'],['Simple']
Usability,/// Simple lookup for a SourceLocation (specifically one denoting the hash in; /// an inclusion directive) in the map of module inclusion information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/InclusionRewriter.cpp,1,['Simpl'],['Simple']
Usability,/// Simple memory allocation for ScheduleData.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4,Simpl,Simple,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Simpl'],['Simple']
Usability,"/// Simple on-disk locators consisting of a 64-bit offset use variant type `uint64_t`; extended locators have; /// `fPosition.index()` > 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:4,Simpl,Simple,4,tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,1,['Simpl'],['Simple']
Usability,/// Simple page-based allocator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h,2,['Simpl'],['Simple']
Usability,/// Simple pass that canonicalizes aliases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CanonicalizeAliases.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CanonicalizeAliases.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CanonicalizeAliases.h,1,['Simpl'],['Simple']
Usability,/// Simple pass that provides a name to every anonymous globals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/NameAnonGlobals.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/NameAnonGlobals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/NameAnonGlobals.h,1,['Simpl'],['Simple']
Usability,"/// Simple precedence-based parser for binary/ternary operators.; ///; /// Note: we diverge from the C99 grammar when parsing the assignment-expression; /// production. C99 specifies that the LHS of an assignment operator should be; /// parsed as a unary-expression, but consistency dictates that it be a; /// conditional-expession. In practice, the important thing here is that the; /// LHS of an assignment has to be an l-value, which productions between; /// unary-expression and conditional-expression don't produce. Because we want; /// consistency, we parse the LHS as a conditional-expression, then check for; /// l-value-ness in semantic analysis stages.; ///; /// \verbatim; /// pm-expression: [C++ 5.5]; /// cast-expression; /// pm-expression '.*' cast-expression; /// pm-expression '->*' cast-expression; ///; /// multiplicative-expression: [C99 6.5.5]; /// Note: in C++, apply pm-expression instead of cast-expression; /// cast-expression; /// multiplicative-expression '*' cast-expression; /// multiplicative-expression '/' cast-expression; /// multiplicative-expression '%' cast-expression; ///; /// additive-expression: [C99 6.5.6]; /// multiplicative-expression; /// additive-expression '+' multiplicative-expression; /// additive-expression '-' multiplicative-expression; ///; /// shift-expression: [C99 6.5.7]; /// additive-expression; /// shift-expression '<<' additive-expression; /// shift-expression '>>' additive-expression; ///; /// compare-expression: [C++20 expr.spaceship]; /// shift-expression; /// compare-expression '<=>' shift-expression; ///; /// relational-expression: [C99 6.5.8]; /// compare-expression; /// relational-expression '<' compare-expression; /// relational-expression '>' compare-expression; /// relational-expression '<=' compare-expression; /// relational-expression '>=' compare-expression; ///; /// equality-expression: [C99 6.5.9]; /// relational-expression; /// equality-expression '==' relational-expression; /// equality-expression '!=' relationa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['Simpl'],['Simple']
Usability,/// Simple predicate for targets where !Resolved implies requiring relaxation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h,2,['Simpl'],['Simple']
Usability,"/// Simple predicate used by the default RankCandidate to; /// determine whether to return an edit distance of 0 or InvalidDistance.; /// This can be overridden by validators that only need to determine if a; /// candidate is viable, without ranking potentially viable candidates.; /// Only ValidateCandidate or RankCandidate need to be overridden by a; /// callback wishing to check the viability of correction candidates.; /// The default predicate always returns true if the candidate is not a type; /// name or keyword, true for types if WantTypeSpecifiers is true, and true; /// for keywords if WantTypeSpecifiers, WantExpressionKeywords,; /// WantCXXNamedCasts, WantRemainingKeywords, or WantObjCSuper is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,1,['Simpl'],['Simple']
Usability,"/// Simple representation of a scaled number.; ///; /// ScaledNumber is a number represented by digits and a scale. It uses simple; /// saturation arithmetic and every operation is well-defined for every value.; /// It's somewhat similar in behaviour to a soft-float, but is *not* a; /// replacement for one. If you're doing numerics, look at \a APFloat instead.; /// Nevertheless, we've found these semantics useful for modelling certain cost; /// metrics.; ///; /// The number is split into a signed scale and unsigned digits. The number; /// represented is \c getDigits()*2^getScale(). In this way, the digits are; /// much like the mantissa in the x87 long double, but there is no canonical; /// form so the same number can be represented by many bit representations.; ///; /// ScaledNumber is templated on the underlying integer type for digits, which; /// is expected to be unsigned.; ///; /// Unlike APFloat, ScaledNumber does not model architecture floating point; /// behaviour -- while this might make it a little faster and easier to reason; /// about, it certainly makes it more dangerous for general numerics.; ///; /// ScaledNumber is totally ordered. However, there is no canonical form, so; /// there are multiple representations of most scalars. E.g.:; ///; /// ScaledNumber(8u, 0) == ScaledNumber(4u, 1); /// ScaledNumber(4u, 1) == ScaledNumber(2u, 2); /// ScaledNumber(2u, 2) == ScaledNumber(1u, 3); ///; /// ScaledNumber implements most arithmetic operations. Precision is kept; /// where possible. Uses simple saturation arithmetic, so that operations; /// saturate to 0.0 or getLargest() rather than under or overflowing. It has; /// some extra arithmetic for unit inversion. 0.0/0.0 is defined to be 0.0.; /// Any other division by 0.0 is defined to be getLargest().; ///; /// As a convenience for modifying the exponent, left and right shifting are; /// both implemented, and both interpret negative shifts as positive shifts in; /// the opposite direction.; ///; /// Scales ar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,/// Simple state for a set.; ///; /// This represents a state containing a set of values. The interface supports; /// modelling sets that contain all possible elements. The state's internal; /// value is modified using union or intersection operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['Simpl'],['Simple']
Usability,"/// Simple state with integers encoding.; ///; /// The interface ensures that the assumed bits are always a subset of the known; /// bits. Users can only add known bits and, except through adding known bits,; /// they can only remove assumed bits. This should guarantee monotonicity and; /// thereby the existence of a fixpoint (if used correctly). The fixpoint is; /// reached when the assumed and known state/bits are equal. Users can; /// force/inidicate a fixpoint. If an optimistic one is indicated, the known; /// state will catch up with the assumed one, for a pessimistic fixpoint it is; /// the other way around.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['Simpl'],['Simple']
Usability,/// Simple struct used to hold a Register value and the instruction which; /// defines it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,1,['Simpl'],['Simple']
Usability,/// Simple struct used to hold a constant integer value and a virtual; /// register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,1,['Simpl'],['Simple']
Usability,/// Simple structure to hold information for one token from the parser.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,1,['Simpl'],['Simple']
Usability,/// Simple template class for restricting typo correction candidates; /// to ones having a single Decl* of the given type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/TypoCorrection.h,1,['Simpl'],['Simple']
Usability,/// Simple tokenizer for the parser.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,1,['Simpl'],['Simple']
Usability,/// Simple trait class that provides a mapping between BPI passes and the; /// corresponding BPInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyBranchProbabilityInfo.h,1,['Simpl'],['Simple']
Usability,"/// Simple tree structure with alternating half splitting nodes; /// @details Simple tree structure; /// - Tree to incrementally add points to the structure.; /// - Get the nearest point to a given input.; /// - Does not check for duplicates, expect unique points.; /// @tparam TCoordType type used for storing point coordinate.; /// @tparam NumVerticesInLeaf The number of points per leaf.; /// @tparam InitialStackDepth initial size of stack depth for nearest query.; /// Should be at least 1.; /// @tparam StackDepthIncrement increment of stack depth for nearest query when; /// stack depth is reached.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:4,Simpl,Simple,4,math/mathcore/src/CDT/KDTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h,2,['Simpl'],['Simple']
Usability,"/// Simple utility function that appends a \p New string to the given; /// \p Old string, using the \p Buffer for storage.; ///; /// \param Old The string to which we are appending. This parameter will be; /// updated to reflect the complete string.; ///; ///; /// \param New The string to append to \p Old.; ///; /// \param Buffer A buffer that stores the actual, concatenated string. It will; /// be used if the old string is already-non-empty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndexCodeCompletion.cpp,1,['Simpl'],['Simple']
Usability,/// Simple wrapper around getFloatTypeSemantics() to make code a; /// little shorter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,1,['Simpl'],['Simple']
Usability,"/// Simple wrapper around std::function<void(raw_ostream&)>.; /// This class is useful to construct print helpers for raw_ostream.; ///; /// Example:; /// Printable printRegister(unsigned Register) {; /// return Printable([Register](raw_ostream &OS) {; /// OS << getRegisterName(Register);; /// });; /// }; /// ... OS << printRegister(Register); ...; ///; /// Implementation note: Ideally this would just be a typedef, but doing so; /// leads to operator << being ambiguous as function has matching constructors; /// in some STL versions. I have seen the problem on gcc 4.6 libstdc++ and; /// microsoft STL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Printable.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Support/Printable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Printable.h,1,['Simpl'],['Simple']
Usability,/// Simple wrapper class for chaining callbacks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/PPCallbacks.h,1,['Simpl'],['Simple']
Usability,/// Simple wrapper class for chaining listeners.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['Simpl'],['Simple']
Usability,/// Simple wrapper for a single bit (boolean) state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['Simpl'],['Simple']
Usability,/// Simple wrapper for toolchain detector with costly initialization. This; /// delays the creation of the actual detector until its first usage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h:4,Simpl,Simple,4,interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/LazyDetector.h,1,['Simpl'],['Simple']
Usability,"/// Simple wrapper observer that takes several observers, and calls; /// each one for each event. If there are multiple observers (say CSE,; /// Legalizer, Combiner), it's sufficient to register this to the machine; /// function as the delegate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,1,['Simpl'],['Simple']
Usability,/// Simple wrapper that does the following.; /// 1) Lazily evaluate the MachineFunction to compute CSEable instructions.; /// 2) Allows configuration of which instructions are CSEd through CSEConfig; /// object. Provides a method called get which takes a CSEConfig object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:4,Simpl,Simple,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,1,['Simpl'],['Simple']
Usability,/// SimpleSummaries - Used for uniquing summaries that don't have special; /// effects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h:4,Simpl,SimpleSummaries,4,interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/RetainSummaryManager.h,1,['Simpl'],['SimpleSummaries']
Usability,/// SimpleValueType Iteration; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:4,Simpl,SimpleValueType,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,1,['Simpl'],['SimpleValueType']
Usability,/// Simpler version for clients that don't want an open file. An empty; /// file will still be created.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Simpl,Simpler,4,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,2,['Simpl'],['Simpler']
Usability,/// Simpler version of equivalent for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Simpl,Simpler,4,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['Simpl'],['Simpler']
Usability,/// Simpler version of is_directory for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Simpl,Simpler,4,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['Simpl'],['Simpler']
Usability,/// Simpler version of is_local accepting an open file descriptor for; /// clients that don't need to differentiate between an error and false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Simpl,Simpler,4,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['Simpl'],['Simpler']
Usability,/// Simpler version of is_local for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Simpl,Simpler,4,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['Simpl'],['Simpler']
Usability,/// Simpler version of is_regular_file for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Simpl,Simpler,4,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['Simpl'],['Simpler']
Usability,/// Simpler version of is_symlink_file for clients that don't need to; /// differentiate between an error and false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Simpl,Simpler,4,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['Simpl'],['Simpler']
Usability,/// Simpler version that sets both file modification and access time to the same; /// time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:4,Simpl,Simpler,4,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['Simpl'],['Simpler']
Usability,"/// Simplified kind of \c CommentDecl, see \c DeclKind enum.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Comment.h:4,Simpl,Simplified,4,interpreter/llvm-project/clang/include/clang/AST/Comment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Comment.h,1,['Simpl'],['Simplified']
Usability,"/// Simplified version of the above ""extendInBlock"", which assumes that; /// no register lanes are undefined by <def,read-undef> operands.; /// If this range is live before @p Use in the basic block that starts; /// at @p StartIdx, extend it to be live up to @p Use, and return the; /// value. If there is no segment before @p Use, return nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h:4,Simpl,Simplified,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,1,['Simpl'],['Simplified']
Usability,"/// Simplifies a set of constraints (implicitly connected by ""and"") in a way; /// that does not change satisfiability of the constraints. This does _not_ mean; /// that the set of solutions is the same before and after simplification.; /// `Info`, if non-null, will be populated with information about the; /// simplifications that were made to the formula (e.g. to display to the user).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h:4,Simpl,Simplifies,4,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,3,"['Simpl', 'simpl']","['Simplifies', 'simplification', 'simplifications']"
Usability,/// Simplifies the given expression tree; /// by getting rid of algebraically redundant operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:4,Simpl,Simplifies,4,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['Simpl'],['Simplifies']
Usability,"/// Simplify FOO $imm, %{al,ax,eax,rax} to FOO $imm, for instruction with; /// a short fixed-register form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp,1,['Simpl'],['Simplify']
Usability,"/// Simplify LHS and RHS in a comparison with predicate Pred. Return true; /// iff any changes were made. If the operands are provably equal or; /// unequal, LHS and RHS are set to the same value and Pred is set to either; /// ICMP_EQ or ICMP_NE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['Simpl'],['Simplify']
Usability,/// Simplify \p I if its operands are constants and update SimplifiedValues.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,2,['Simpl'],"['SimplifiedValues', 'Simplify']"
Usability,/// Simplify ``Addr`` given that the top byte of it is ignored by HW during; /// address translation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['Simpl'],['Simplify']
Usability,"/// Simplify a switch instruction by removing cases which can never fire. If the; /// uselessness of a case could be determined locally then constant propagation; /// would already have figured it out. Instead, walk the predecessors and; /// statically evaluate cases based on information available on that edge. Cases; /// that cannot fire no matter what the incoming edge can safely be removed. If; /// a case fires on every incoming edge then the entire switch can be removed; /// and replaced with a branch to the case destination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,1,['Simpl'],['Simplify']
Usability,/// Simplify an expression of the form (N0 cond N1) ? N2 : N3; /// where 'cond' is the comparison specified by CC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Simpl'],['Simplify']
Usability,/// Simplify any inverted conditions that were built by buildConditions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,1,['Simpl'],['Simplify']
Usability,/// Simplify comparison with false branch of select,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['Simpl'],['Simplify']
Usability,/// Simplify comparison with true branch of select,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['Simpl'],['Simplify']
Usability,"/// Simplify comparison with true or false branch of select:; /// %sel = select i1 %cond, i32 %tv, i32 %fv; /// %cmp = icmp sle i32 %sel, %rhs; /// Compose new comparison by substituting %sel with either %tv or %fv; /// and see if it simplifies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,"['Simpl', 'simpl']","['Simplify', 'simplifies']"
Usability,"/// Simplify each loop in a loop nest recursively.; ///; /// This takes a potentially un-simplified loop L (and its children) and turns; /// it into a simplified loop nest with preheaders and single backedges. It will; /// update \c DominatorTree, \c LoopInfo, \c ScalarEvolution and \c MemorySSA; /// analyses if they're non-null, and LCSSA if \c PreserveLCSSA is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,3,"['Simpl', 'simpl']","['Simplify', 'simplified']"
Usability,/// Simplify instructions that use this induction variable; /// by using ScalarEvolution to analyze the IV's recurrence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['Simpl'],['Simplify']
Usability,/// Simplify one loop and queue further loops for simplification.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp,2,"['Simpl', 'simpl']","['Simplify', 'simplification']"
Usability,"/// Simplify symbolic expressions within a given SVal. Return an SVal; /// that represents the same value, but is hopefully easier to work with; /// than the original SVal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h:4,Simpl,Simplify,4,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h,1,['Simpl'],['Simplify']
Usability,"/// Simplify the CFG without completely destroying it.; /// This is not well defined, but basically comes down to ""try to eliminate; /// unreachable blocks and constant fold terminators without deciding that; /// certain undefined behavior cuts off the program at the legs"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['Simpl'],['Simplify']
Usability,"/// Simplify the waitcnt, in the sense of removing redundant counts, and return; /// whether a waitcnt instruction is needed at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['Simpl'],['Simplify']
Usability,/// Simplify things like MOV32rm to MOV32o32a.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86EncodingOptimization.cpp,1,['Simpl'],['Simplify']
Usability,/// Simplify users of induction variables within this; /// loop. This does not actually change or add IVs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:4,Simpl,Simplify,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['Simpl'],['Simplify']
Usability,/// SimplifyCFG reducer - This works by calling SimplifyCFG on each basic block; /// in the program.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:4,Simpl,SimplifyCFG,4,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,2,['Simpl'],['SimplifyCFG']
Usability,"/// SimplifyForwardingBlocks - If the given basic block is only a branch to; /// another basic block, simplify it. This assumes that no other code could; /// potentially reference the basic block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Simpl,SimplifyForwardingBlocks,4,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,"['Simpl', 'simpl']","['SimplifyForwardingBlocks', 'simplify']"
Usability,/// SimplifyIVUsers helper for eliminating useless remainder operations; /// operating on an induction variable or replacing srem by urem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:4,Simpl,SimplifyIVUsers,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['Simpl'],['SimplifyIVUsers']
Usability,/// SimplifyIVUsers helper for eliminating useless; /// comparisons against an induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:4,Simpl,SimplifyIVUsers,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['Simpl'],['SimplifyIVUsers']
Usability,"/// SimplifyInstructionsInBlock - Scan the specified basic block and try to; /// simplify any instructions in it and recursively delete dead instructions.; ///; /// This returns true if it changed the code, note that it can delete; /// instructions in other blocks as well in this block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:4,Simpl,SimplifyInstructionsInBlock,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,2,"['Simpl', 'simpl']","['SimplifyInstructionsInBlock', 'simplify']"
Usability,/// SimplifyLoopIVs - Simplify users of induction variables within this; /// loop. This does not actually change or add IVs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:4,Simpl,SimplifyLoopIVs,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,2,['Simpl'],"['Simplify', 'SimplifyLoopIVs']"
Usability,/// SimplifyQuery for simplifyInstruction utility.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:4,Simpl,SimplifyQuery,4,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,"['Simpl', 'simpl']","['SimplifyQuery', 'simplifyInstruction']"
Usability,/// SimplifyTree - See if we can simplify this tree to eliminate something that; /// will never match in favor of something obvious that will. This is here; /// strictly as a convenience to target authors because it allows them to write; /// more type generic things and have useless type casts fold away.; ///; /// This returns true if any change is made.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:4,Simpl,SimplifyTree,4,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,2,"['Simpl', 'simpl']","['SimplifyTree', 'simplify']"
Usability,/// Simplistic combination of 32-bit hash values into 32-bit hash values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h:4,Simpl,Simplistic,4,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMapInfo.h,1,['Simpl'],['Simplistic']
Usability,/// Simply returns the buffer contained in Buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h:4,Simpl,Simply,4,interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/PCHContainerOperations.h,1,['Simpl'],['Simply']
Usability,"/// Sink the given CmpInst into user blocks to reduce the number of virtual; /// registers that must be created and coalesced. This is a clear win except on; /// targets with multiple condition code registers (PowerPC), where it might; /// lose; some adjustment may be wanted there.; ///; /// Return true if any changes are made.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:137,clear,clear,137,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['clear'],['clear']
Usability,/// SkipMalformedDecl - Read tokens until we get to some likely good stopping; /// point for skipping past a simple-declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:109,simpl,simple-declaration,109,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['simpl'],['simple-declaration']
Usability,"/// SmallPtrSetImplBase - This is the common code shared among all the; /// SmallPtrSet<>'s, which is almost everything. SmallPtrSet has two modes, one; /// for small and one for large sets.; ///; /// Small sets use an array of pointers allocated in the SmallPtrSet object,; /// which is treated as a simple array of pointers. When a pointer is added to; /// the set, the array is scanned to see if the element already exists, if not; /// the element is 'pushed back' onto the array. If we run out of space in the; /// array, we grow into the 'large set' case. SmallSet should be used when the; /// sets are often small. In this case, no memory allocation is used, and only; /// light-weight and cache-efficient scanning is used.; ///; /// Large sets use a classic exponentially-probed hash table. Empty buckets are; /// represented with an illegal pointer value (-1) to allow null pointers to be; /// inserted. Tombstones are represented with another illegal pointer value; /// (-2), to allow deletion. The hash table is resized when the table is 3/4 or; /// more. When this happens, the table is doubled in size.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:301,simpl,simple,301,interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h,1,['simpl'],['simple']
Usability,"/// Some comparisons can be simplified.; /// In this case, we are looking for comparisons that look like; /// a check for a lossy signed truncation.; /// Folds: (MaskedBits is a constant.); /// ((%x << MaskedBits) a>> MaskedBits) SrcPred %x; /// Into:; /// (add %x, (1 << (KeptBits-1))) DstPred (1 << KeptBits); /// Where KeptBits = bitwidth(%x) - MaskedBits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:28,simpl,simplified,28,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['simpl'],['simplified']
Usability,"/// Some comparisons can be simplified.; /// In this case, we are looking for comparisons that look like; /// a check for a lossy truncation.; /// Folds:; /// icmp SrcPred (x & Mask), x to icmp DstPred x, Mask; /// Where Mask is some pattern that produces all-ones in low bits:; /// (-1 >> y); /// ((-1 << y) >> y) <- non-canonical, has extra uses; /// ~(-1 << y); /// ((1 << y) + (-1)) <- non-canonical, has extra uses; /// The Mask can be a constant, too.; /// For some predicates, the operands are commutative.; /// For others, x can only be on a specific side.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:28,simpl,simplified,28,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['simpl'],['simplified']
Usability,"/// SparseSet - Fast set implementation for objects that can be identified by; /// small unsigned keys.; ///; /// SparseSet allocates memory proportional to the size of the key universe, so; /// it is not recommended for building composite data structures. It is useful; /// for algorithms that require a single set with fast operations.; ///; /// Compared to DenseSet and DenseMap, SparseSet provides constant-time fast; /// clear() and iteration as fast as a vector. The find(), insert(), and; /// erase() operations are all constant time, and typically faster than a hash; /// table. The iteration order doesn't depend on numerical key values, it only; /// depends on the order of insert() and erase() operations. When no elements; /// have been erased, the iteration order is the insertion order.; ///; /// Compared to BitVector, SparseSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast; /// iteration independent on the size of the universe.; ///; /// SparseSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT; /// template parameter provides a space/speed tradeoff for sets holding many; /// elements.; ///; /// When SparseT is uint32_t, find() only touches 2 cache lines, but the sparse; /// array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 2+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:426,clear,clear,426,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,2,['clear'],['clear']
Usability,"/// SparseSetValTraits - Objects in a SparseSet are identified by keys that can; /// be uniquely converted to a small integer less than the set's universe. This; /// class allows the set to hold values that differ from the set's key type as; /// long as an index can still be derived from the value. SparseSet never; /// directly compares ValueT, only their indices, so it can map keys to; /// arbitrary values. SparseSetValTraits computes the index from the value; /// object. To compute the index from a key, SparseSet uses a separate; /// KeyFunctorT template argument.; ///; /// A simple type declaration, SparseSet<Type>, handles these cases:; /// - unsigned key, identity index, identity value; /// - unsigned key, identity index, fat value providing getSparseSetIndex(); ///; /// The type declaration SparseSet<Type, UnaryFunction> handles:; /// - unsigned key, remapped index, identity value (virtual registers); /// - pointer key, pointer-derived index, identity value (node+ID); /// - pointer key, pointer-derived index, fat value with getSparseSetIndex(); ///; /// Only other, unexpected cases require specializing SparseSetValTraits.; ///; /// For best results, ValueT should not require a destructor.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:585,simpl,simple,585,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,1,['simpl'],['simple']
Usability,"/// Specialized YAMLIO scalar type for representing a binary blob.; ///; /// A typical use case would be to represent the content of a section in a; /// binary file.; /// This class has custom YAMLIO traits for convenient reading and writing.; /// It renders as a string of hex digits in a YAML file.; /// For example, it might render as `DEADBEEFCAFEBABE` (YAML does not; /// require the quotation marks, so for simplicity when outputting they are; /// omitted).; /// When reading, any string whose content is an even number of hex digits; /// will be accepted.; /// For example, all of the following are acceptable:; /// `DEADBEEF`, `""DeADbEeF""`, `""\x44EADBEEF""` (Note: '\x44' == 'D'); ///; /// A significant advantage of using this class is that it never allocates; /// temporary strings or buffers for any of its functionality.; ///; /// Example:; ///; /// The YAML mapping:; /// \code; /// Foo: DEADBEEFCAFEBABE; /// \endcode; ///; /// Could be modeled in YAMLIO by the struct:; /// \code; /// struct FooHolder {; /// BinaryRef Foo;; /// };; /// namespace llvm {; /// namespace yaml {; /// template <>; /// struct MappingTraits<FooHolder> {; /// static void mapping(IO &IO, FooHolder &FH) {; /// IO.mapRequired(""Foo"", FH.Foo);; /// }; /// };; /// } // end namespace yaml; /// } // end namespace llvm; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h:413,simpl,simplicity,413,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/YAML.h,1,['simpl'],['simplicity']
Usability,/// Specify that this unqualified-id was parsed as a template-name for; /// a deduction-guide.; ///; /// \param Template The parsed template-name.; /// \param TemplateLoc The location of the parsed template-name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:88,guid,guide,88,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['guid'],['guide']
Usability,"/// Specify the point at which code-completion will be performed.; ///; /// \param File the file in which code completion should occur. If; /// this file is included multiple times, code-completion will; /// perform completion the first time it is included. If NULL, this; /// function clears out the code-completion point.; ///; /// \param Line the line at which code completion should occur; /// (1-based).; ///; /// \param Column the column at which code completion should occur; /// (1-based).; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:286,clear,clears,286,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['clear'],['clears']
Usability,"/// Speculate a conditional basic block flattening the CFG.; ///; /// Note that this is a very risky transform currently. Speculating; /// instructions like this is most often not desirable. Instead, there is an MI; /// pass which can do it with full awareness of the resource constraints.; /// However, some cases are ""obvious"" and we should do directly. An example of; /// this is speculating a single, reasonably cheap instruction.; ///; /// There is only one distinct advantage to flattening the CFG at the IR level:; /// it makes very common but simplistic optimizations such as are common in; /// instcombine and the DAG combiner more powerful by removing CFG edges and; /// modeling their effects with easier to reason about SSA value graphs.; ///; ///; /// An illustration of this transform is turning this IR:; /// \code; /// BB:; /// %cmp = icmp ult %x, %y; /// br i1 %cmp, label %EndBB, label %ThenBB; /// ThenBB:; /// %sub = sub %x, %y; /// br label BB2; /// EndBB:; /// %phi = phi [ %sub, %ThenBB ], [ 0, %EndBB ]; /// ...; /// \endcode; ///; /// Into this IR:; /// \code; /// BB:; /// %cmp = icmp ult %x, %y; /// %sub = sub %x, %y; /// %cond = select i1 %cmp, 0, %sub; /// ...; /// \endcode; ///; /// \returns true if the conditional block is removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:551,simpl,simplistic,551,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['simpl'],['simplistic']
Usability,"/// SplitCriticalEdge is guaranteed to preserve loop-simplify form if LI is; /// provided. If it cannot be preserved, no splitting will take place. If it; /// is not set, preserve loop-simplify form if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:53,simpl,simplify,53,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,2,['simpl'],['simplify']
Usability,"/// Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source.; /// Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...).; /// The jitting phase is skipped if the `jit` parameter is `false` (unsafe, use with care).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx:186,clear,clear,186,tree/dataframe/src/RLoopManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RLoopManager.cxx,1,['clear'],['clear']
Usability,"/// Start timing the overall backend. If the backend itself starts a timer,; /// then this timer is cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:100,clear,cleared,100,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['clear'],['cleared']
Usability,"/// StmtVisitor - This class implements a simple visitor for Stmt subclasses.; /// Since Expr derives from Stmt, this also includes support for visiting Exprs.; ///; /// This class does not preserve constness of Stmt pointers (see also; /// ConstStmtVisitor).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h:42,simpl,simple,42,interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,1,['simpl'],['simple']
Usability,"/// StmtVisitorBase - This class implements a simple visitor for Stmt; /// subclasses. Since Expr derives from Stmt, this also includes support for; /// visiting Exprs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h:46,simpl,simple,46,interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,1,['simpl'],['simple']
Usability,"/// Store a set of either DeclRefExprs or MemberExprs that contain a reference; /// to a variable (constant) that may or may not be odr-used in this Expr, and; /// we won't know until all lvalue-to-rvalue and discarded value conversions; /// have been applied to all subexpressions of the enclosing full expression.; /// This is cleared at the end of each full expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:329,clear,cleared,329,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['clear'],['cleared']
Usability,/// Stores the given Name/GUID and associated summary into the Index.; /// Also updates any forward references to the associated entry ID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:26,GUID,GUID,26,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['GUID'],['GUID']
Usability,/// Stores token information for comparing actual tokens with; /// predefined values. Only handles simple tokens and identifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:99,simpl,simple,99,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['simpl'],['simple']
Usability,/// Strip parentheses and simplistic logical-NOT operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:26,simpl,simplistic,26,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['simpl'],['simplistic']
Usability,/// Struct that holds a reference to a particular GUID in a global value; /// summary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:50,GUID,GUID,50,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['GUID'],['GUID']
Usability,"/// Sub field deleter or nullptr for simple fields",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldSequenceContainer.hxx:37,simpl,simple,37,tree/ntuple/v7/inc/ROOT/RField/RFieldSequenceContainer.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldSequenceContainer.hxx,1,['simpl'],['simple']
Usability,/// Subscript - This private struct represents a pair of subscripts from; /// a pair of potentially multi-dimensional array references. We use a; /// vector of them to guide subscript partitioning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:168,guid,guide,168,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['guid'],['guide']
Usability,"/// SuperClasses - The super classes of this class. Note that for simplicities; /// sake user operands only record their immediate super class, while register; /// operands include all superclasses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:66,simpl,simplicities,66,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['simpl'],['simplicities']
Usability,/// SymExprVisitor - this class implements a simple visitor for SymExpr; /// subclasses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h:45,simpl,simple,45,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h,1,['simpl'],['simple']
Usability,"/// TMVA::RSofieReader class for reading external Machine Learning models; /// in ONNX files, Keras .h5 files or PyTorch .pt files; /// and performing the inference using SOFIE; /// It is reccomended to use ONNX if possible since there is a larger support for; /// model operators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx:58,Learn,Learning,58,tmva/tmva/inc/TMVA/RSofieReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RSofieReader.hxx,1,['Learn'],['Learning']
Usability,/// Tag that can use a checker name as a message provider; /// (see SimpleProgramPointTag).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h:68,Simpl,SimpleProgramPointTag,68,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/Checker.h,1,['Simpl'],['SimpleProgramPointTag']
Usability,"/// Takes the read lock for the descriptor. Multiple threads can take the lock concurrently.; /// The underlying `std::shared_mutex`, however, is neither read nor write recursive:; /// within one thread, only one lock (shared or exclusive) must be acquired at the same time. This requires special; /// care in sections protected by `GetSharedDescriptorGuard()` and `GetExclDescriptorGuard()` especially to avoid; /// that the locks are acquired indirectly (e.g. by a call to `GetNEntries()`). As a general guideline, no other; /// method of the page source should be called (directly or indirectly) in a guarded section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:506,guid,guideline,506,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['guid'],['guideline']
Usability,"/// TargetConstant* - Like Constant*, but the DAG does not do any folding,; /// simplification, or lowering of the constant. They are used for constants; /// which are known to fit in the immediate fields of their users, or for; /// carrying magic numbers which are not values which need to be; /// materialized in registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:80,simpl,simplification,80,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['simpl'],['simplification']
Usability,"/// TargetRegisterInfo base class - We assume that the target defines a static; /// array of TargetRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:202,simpl,simply,202,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['simpl'],['simply']
Usability,"/// Template specialization to give SSAUpdater access to CFG and value; /// information. SSAUpdater calls methods in these traits, passing in the; /// LDVSSAUpdater object, to learn about blocks and the values they define.; /// It also provides methods to create PHI nodes and track them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:176,learn,learn,176,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['learn'],['learn']
Usability,"/// TensorSpec encapsulates the specification of a tensor: its dimensions, or; /// ""shape"" (row-major), its type (see TensorSpec::getDataType specializations; /// for supported types), its name and port (see ""TensorFlow: Large-Scale; /// Machine Learning on Heterogeneous Distributed Systems"", section 4.2, para 2:; /// https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45166.pdf); ///; /// Note that the design is motivated by Tensorflow, but it is not intended to; /// be Tensorflow-specific.; ///; /// Known tensor types. The left part is the C type, the; /// right is a name we can use to identify the type (to implement TensorSpec; /// equality checks), and to use, if needed, when mapping to an underlying; /// evaluator's type system. The main requirement is that the C type we use has; /// the same size and encoding (e.g. endian-ness) as the one used by the; /// evaluator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TensorSpec.h:246,Learn,Learning,246,interpreter/llvm-project/llvm/include/llvm/Analysis/TensorSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TensorSpec.h,1,['Learn'],['Learning']
Usability,"/// Tentatively parse an init-declarator-list in order to disambiguate it from; /// an expression.; ///; /// init-declarator-list:; /// init-declarator; /// init-declarator-list ',' init-declarator; ///; /// init-declarator:; /// declarator initializer[opt]; /// [GNU] declarator simple-asm-expr[opt] attributes[opt] initializer[opt]; ///; /// initializer:; /// brace-or-equal-initializer; /// '(' expression-list ')'; ///; /// brace-or-equal-initializer:; /// '=' initializer-clause; /// [C++11] braced-init-list; ///; /// initializer-clause:; /// assignment-expression; /// braced-init-list; ///; /// braced-init-list:; /// '{' initializer-list ','[opt] '}'; /// '{' '}'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:280,simpl,simple-asm-expr,280,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['simpl'],['simple-asm-expr']
Usability,"/// Terminate the current block by emitting a branch which might leave; /// the current cleanup-protected scope. The target scope may not yet; /// be known, in which case this will require a fixup.; ///; /// As a side-effect, this method clears the insertion point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:238,clear,clears,238,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,1,['clear'],['clears']
Usability,"/// Ternary decode status. Most backends will just use Fail and; /// Success, however some have a concept of an instruction with; /// understandable semantics but which is architecturally; /// incorrect. An example of this is ARM UNPREDICTABLE instructions; /// which are disassemblable but cause undefined behaviour.; ///; /// Because it makes sense to disassemble these instructions, there; /// is a ""soft fail"" failure mode that indicates the MCInst& is; /// valid but architecturally incorrect.; ///; /// The enum numbers are deliberately chosen such that reduction; /// from Success->SoftFail ->Fail can be done with a simple; /// bitwise-AND:; ///; /// LEFT & TOP = | Success Unpredictable Fail; /// --------------+-----------------------------------; /// Success | Success Unpredictable Fail; /// Unpredictable | Unpredictable Unpredictable Fail; /// Fail | Fail Fail Fail; ///; /// An easy way of encoding this is as 0b11, 0b01, 0b00 for; /// Success, SoftFail, Fail respectively.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h:624,simpl,simple,624,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h,1,['simpl'],['simple']
Usability,/// Test if V is always a pointer to allocated and suitably aligned memory for; /// a simple load or store.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:86,simpl,simple,86,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['simpl'],['simple']
Usability,/// Test if the given EVT is extended (as opposed to being simple).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:59,simpl,simple,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['simpl'],['simple']
Usability,/// Test if the given EVT is simple (as opposed to being extended).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:29,simpl,simple,29,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['simpl'],['simple']
Usability,/// Test if this operation may be simplified with reassociative transforms.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h:34,simpl,simplified,34,interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Operator.h,1,['simpl'],['simplified']
Usability,"/// Test whether calls to a function lower to actual program function; /// calls.; ///; /// The idea is to test whether the program is likely to require a 'call'; /// instruction or equivalent in order to call the given function.; ///; /// FIXME: It's not clear that this is a good or useful query API. Client's; /// should probably move to simpler cost metrics using the above.; /// Alternatively, we could split the cost interface into distinct code-size; /// and execution-speed costs. This would allow modelling the core of this; /// query more accurately as a call is a single small instruction, but; /// incurs significant execution cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:256,clear,clear,256,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,2,"['clear', 'simpl']","['clear', 'simpler']"
Usability,"/// Test whether the condition described by Pred, LHS, and RHS is true.; /// Use only simple non-recursive types of checks, such as range analysis etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:86,simpl,simple,86,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['simpl'],['simple']
Usability,/// Test whether the edge is null.; ///; /// This happens when an edge has been deleted. We leave the edge objects; /// around but clear them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:131,clear,clear,131,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['clear'],['clear']
Usability,"/// The ""resume-switch"" lowering, where there are separate resume and; /// destroy functions that are shared between all suspend points. The; /// coroutine frame implicitly stores the resume and destroy functions,; /// the current index, and any promise value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInternal.h:9,resume,resume-switch,9,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInternal.h,3,['resume'],"['resume', 'resume-switch']"
Usability,"/// The ( starting an argument list of a macro definition has just been read.; /// Lex the rest of the parameters and the closing ), updating \p MI with; /// what we learn and saving in \p LastTok the last token read.; /// Return true if an error occurs parsing the arg list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:166,learn,learn,166,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['learn'],['learn']
Usability,/// The BinaryHolder class is responsible for creating and owning; /// ObjectFiles and their underlying MemoryBuffers. It differs from a simple; /// OwningBinary in that it handles accessing and caching of archives and its; /// members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h:137,simpl,simple,137,interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/BinaryHolder.h,1,['simpl'],['simple']
Usability,/// The DWARF address class. Taken from; /// https://docs.nvidia.com/cuda/archive/10.0/ptx-writers-guide-to-interoperability/index.html#cuda-specific-dwarf,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h:99,guid,guide-to-interoperability,99,interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h,1,['guid'],['guide-to-interoperability']
Usability,"/// The MVT::SimpleValueType for each parameter type. Note that this list is; /// only populated when in the context of a target .td file. When building; /// Intrinsics.td, this isn't available, because we don't know the target; /// pointer size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:13,Simpl,SimpleValueType,13,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,1,['Simpl'],['SimpleValueType']
Usability,"/// The MVT::SimpleValueType for each return type. Note that this list is; /// only populated when in the context of a target .td file. When building; /// Intrinsics.td, this isn't available, because we don't know the target; /// pointer size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:13,Simpl,SimpleValueType,13,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,1,['Simpl'],['SimpleValueType']
Usability,"/// The PhiNodes we're adding.; ///; /// That map is used to simplify some Phi nodes as we iterate over it, so; /// it should have deterministic iterators. We could use a MapVector, but; /// since we already maintain a map from BasicBlock* to a stable numbering; /// (BBNumbers), the DenseMap is more efficient (also supports removal).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:61,simpl,simplify,61,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['simpl'],['simplify']
Usability,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:567,Guid,Guide,567,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,2,['Guid'],['Guide']
Usability,"/// The \p MF_HUGE_HINT flag is used to indicate that the request for; /// a memory block should be satisfied with large pages if possible.; /// This is only a hint and small pages will be used as fallback.; ///; /// The presence or absence of this flag in the returned memory block; /// is (at least currently) *not* a reliable indicator that the memory; /// block will use or will not use large pages. On some systems a request; /// without this flag can be backed by large pages without this flag being; /// set, and on some other systems a request with this flag can fallback; /// to small pages without this flag being cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h:624,clear,cleared,624,interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Memory.h,1,['clear'],['cleared']
Usability,/// The ``FormatStyle`` is used to configure the formatting to follow; /// specific guidelines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:84,guid,guidelines,84,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['guid'],['guidelines']
Usability,/// The basic skeleton for building a simple or compound; /// assignment operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp:38,simpl,simple,38,interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,1,['simpl'],['simple']
Usability,/// The below iterator returns the GUID and associated summary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:35,GUID,GUID,35,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['GUID'],['GUID']
Usability,/// The buffer where parsing should resume upon instantiation completion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:36,resume,resume,36,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['resume'],['resume']
Usability,"/// The call site kernel info abstract attribute, basically, what can we say; /// about a call site with regards to the KernelInfoState. For now this simply; /// forwards the information from the callee.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:150,simpl,simply,150,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['simpl'],['simply']
Usability,"/// The callee value is tracked beyond a simple stripPointerCasts, so we allow; /// unknown callees.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:41,simpl,simple,41,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['simpl'],['simple']
Usability,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:121,simpl,simplified,121,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,1,['simpl'],['simplified']
Usability,"/// The constructor creates the underlying column objects and connects them to either a sink or a source.; /// If `isSimple` is `true`, the trait `kTraitMappable` is automatically set on construction. However, the; /// field might be demoted to non-simple if a post-read callback is set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:249,simpl,simple,249,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['simpl'],['simple']
Usability,"/// The current index stack. We use a simple unsigned stack because; /// we assume that placeholders will be relatively sparse in the; /// initializer, but we cache the index values we find just in case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:38,simpl,simple,38,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,1,['simpl'],['simple']
Usability,"/// The encoding to use when writing response files on Windows. Ignored on; /// other host OSes.; ///; /// Windows use cases: - GCC and Binutils on mingw only accept ANSI response; /// files encoded with the system current code page.; /// - MSVC's CL.exe and LINK.exe accept UTF16 on Windows.; /// - Clang accepts both UTF8 and UTF16.; ///; /// FIXME: When GNU tools learn how to parse UTF16 on Windows, we should; /// always use UTF16 for Windows, which is the Windows official encoding for; /// international characters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:367,learn,learn,367,interpreter/llvm-project/clang/include/clang/Driver/Job.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h,1,['learn'],['learn']
Usability,/// The execution count information starting at a point in a file.; ///; /// A sequence of CoverageSegments gives execution counts for a file in format; /// that's simple to iterate through for processing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:164,simpl,simple,164,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['simpl'],['simple']
Usability,"/// The fixpoint analysis framework that orchestrates the attribute deduction.; ///; /// The Attributor provides a general abstract analysis framework (guided; /// fixpoint iteration) as well as helper functions for the deduction of; /// (LLVM-IR) attributes. However, also other code properties can be deduced,; /// propagated, and ultimately manifested through the Attributor framework. This; /// is particularly useful if these properties interact with attributes and a; /// co-scheduled deduction allows to improve the solution. Even if not, thus if; /// attributes/properties are completely isolated, they should use the; /// Attributor framework to reduce the number of fixpoint iteration frameworks; /// in the code base. Note that the Attributor design makes sure that isolated; /// attributes are not impacted, in any way, by others derived at the same time; /// if there is no cross-reasoning performed.; ///; /// The public facing interface of the Attributor is kept simple and basically; /// allows abstract attributes to one thing, query abstract attributes; /// in-flight. There are two reasons to do this:; /// a) The optimistic state of one abstract attribute can justify an; /// optimistic state of another, allowing to framework to end up with an; /// optimistic (=best possible) fixpoint instead of one based solely on; /// information in the IR.; /// b) This avoids reimplementing various kinds of lookups, e.g., to check; /// for existing IR attributes, in favor of a single lookups interface; /// provided by an abstract attribute subclass.; ///; /// NOTE: The mechanics of adding a new ""concrete"" abstract attribute are; /// described in the file comment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:152,guid,guided,152,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,"['guid', 'simpl']","['guided', 'simple']"
Usability,"/// The flush() function will clear out the current state of the visitor, to; /// allow for explicitly flushing a block's records to the currently; /// recognized thread and process combination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/BlockIndexer.h:30,clear,clear,30,interpreter/llvm-project/llvm/include/llvm/XRay/BlockIndexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/BlockIndexer.h,1,['clear'],['clear']
Usability,"/// The given lookup names class member(s) and is not being used for; /// an address-of-member expression. Classify the type of access; /// according to whether it's possible that this reference names an; /// instance member. This is best-effort in dependent contexts; it is okay to; /// conservatively answer ""yes"", in which case some errors will simply; /// not be caught until template-instantiation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:348,simpl,simply,348,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['simpl'],['simply']
Usability,/// The identifier template name.; ///; /// Only valid when the bit on \c Qualifier is clear.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:87,clear,clear,87,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['clear'],['clear']
Usability,"/// The inliner pass for the new pass manager.; ///; /// This pass wires together the inlining utilities and the inline cost; /// analysis into a CGSCC pass. It considers every call in every function in; /// the SCC and tries to inline if profitable. It can be tuned with a number of; /// parameters to control what cost model is used and what tradeoffs are made; /// when making the decision.; ///; /// It should be noted that the legacy inliners do considerably more than this; /// inliner pass does. They provide logic for manually merging allocas, and; /// doing considerable DCE including the DCE of dead functions. This pass makes; /// every attempt to be simpler. DCE of functions requires complex reasoning; /// about comdat groups, etc. Instead, it is expected that other more focused; /// passes be composed to achieve the same end result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:662,simpl,simpler,662,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,1,['simpl'],['simpler']
Usability,"/// The internal representation of an iterator, which in this simple test only contains a pointer to an element",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/SimpleCollectionProxy.hxx:62,simpl,simple,62,tree/ntuple/v7/test/SimpleCollectionProxy.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/SimpleCollectionProxy.hxx,1,['simpl'],['simple']
Usability,"/// The kind is stored in the lower 3 bits of the value. For offsets, we; /// make use of the facts that classes can't be larger than 2^55 bytes,; /// so we store the offset in the lower part of the 61 bits that remain.; /// (The reason that we're not simply using a PointerIntPair here is that we; /// need the offsets to be 64-bit, even when on a 32-bit machine).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:252,simpl,simply,252,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,1,['simpl'],['simply']
Usability,"/// The kind of location in use for a variable, where Mem is the stack home,; /// Val is an SSA value or const, and None means that there is not one single; /// kind (either because there are multiple or because there is none; it may; /// prove useful to split this into two values in the future).; ///; /// LocKind is a join-semilattice with the partial order:; /// None > Mem, Val; ///; /// i.e.; /// join(Mem, Mem) = Mem; /// join(Val, Val) = Val; /// join(Mem, Val) = None; /// join(None, Mem) = None; /// join(None, Val) = None; /// join(None, None) = None; ///; /// Note: the order is not `None > Val > Mem` because we're using DIAssignID; /// to name assignments and are not tracking the actual stored values.; /// Therefore currently there's no way to ensure that Mem values and Val; /// values are the same. This could be a future extension, though it's not; /// clear that many additional locations would be recovered that way in; /// practice as the likelihood of this sitation arising naturally seems; /// incredibly low.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:872,clear,clear,872,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['clear'],['clear']
Usability,"/// The location of the bind info inside the binary is described by; /// LC_DYLD_INFO load command. Dyld binds an image during the loading process,; /// if the image requires any pointers to be initialized to symbols in other; /// images. The bind information is a stream of byte sized opcodes whose; /// symbolic names start with BIND_OPCODE_. Conceptually the bind information is; /// a table of tuples: <seg-index, seg-offset, type, symbol-library-ordinal,; /// symbol-name, addend> The opcodes are a compressed way to encode the table by; /// only encoding when a column changes. In addition simple patterns like for; /// runs of pointers initialized to the same value can be encoded in a few; /// bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:596,simpl,simple,596,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,1,['simpl'],['simple']
Usability,"/// The location of the lazy bind info inside the binary is described by; /// LC_DYLD_INFO load command. Some uses of external symbols do not need to be; /// bound immediately. Instead they can be lazily bound on first use. The; /// lazy_bind contains a stream of BIND opcodes to bind all lazy symbols. Normal; /// use is that dyld ignores the lazy_bind section when loading an image.; /// Instead the static linker arranged for the lazy pointer to initially point; /// to a helper function which pushes the offset into the lazy_bind area for the; /// symbol needing to be bound, then jumps to dyld which simply adds the offset; /// to lazy_bind_off to get the information on what to bind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:605,simpl,simply,605,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,1,['simpl'],['simply']
Usability,"/// The location of the rebase info inside the binary is described by; /// LC_DYLD_INFO load command. Dyld rebases an image whenever dyld loads it at; /// an address different from its preferred address. The rebase information is; /// a stream of byte sized opcodes whose symbolic names start with; /// REBASE_OPCODE_. Conceptually the rebase information is a table of tuples:; /// <seg-index, seg-offset, type>; /// The opcodes are a compressed way to encode the table by only; /// encoding when a column changes. In addition simple patterns; /// like ""every n'th offset for m times"" can be encoded in a few; /// bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:527,simpl,simple,527,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,1,['simpl'],['simple']
Usability,/// The location where parsing should resume upon instantiation completion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:38,resume,resume,38,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['resume'],['resume']
Usability,/// The lower 3 bits of the SimpleTy index into Nth 4bit set from the; /// 32-bit value and the upper 29 bits index into the second dimension of; /// the array to select what 32-bit value to use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:28,Simpl,SimpleTy,28,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['Simpl'],['SimpleTy']
Usability,"/// The lowest three bits of Ptr are used to express what kind of name; /// we're actually storing, using the values of StoredNameKind. Depending; /// on the kind of name this is, the upper bits of Ptr may have one; /// of several different meanings:; ///; /// StoredIdentifier - The name is a normal identifier, and Ptr is; /// a normal IdentifierInfo pointer.; ///; /// StoredObjCZeroArgSelector - The name is an Objective-C; /// selector with zero arguments, and Ptr is an IdentifierInfo; /// pointer pointing to the selector name.; ///; /// StoredObjCOneArgSelector - The name is an Objective-C selector; /// with one argument, and Ptr is an IdentifierInfo pointer; /// pointing to the selector name.; ///; /// StoredCXXConstructorName - The name of a C++ constructor,; /// Ptr points to a CXXSpecialNameExtra.; ///; /// StoredCXXDestructorName - The name of a C++ destructor,; /// Ptr points to a CXXSpecialNameExtra.; ///; /// StoredCXXConversionFunctionName - The name of a C++ conversion function,; /// Ptr points to a CXXSpecialNameExtra.; ///; /// StoredCXXOperatorName - The name of an overloaded C++ operator,; /// Ptr points to a CXXOperatorIdName.; ///; /// StoredDeclarationNameExtra - Ptr is actually a pointer to a; /// DeclarationNameExtra structure, whose first value will tell us; /// whether this is an Objective-C selector, C++ deduction guide,; /// C++ literal operator, or C++ using directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:1360,guid,guide,1360,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['guid'],['guide']
Usability,"/// The main entrypoint for the class, the function that tries to find the; /// clarification of how to explain which sub-path starts with a CFG edge; /// from Conditional to SuccWithoutCall.; ///; /// This means that this function has one precondition:; /// SuccWithoutCall should be a successor block for Conditional.; ///; /// Because clarification is not needed for non-trivial pairs of blocks; /// (i.e. SuccWithoutCall is not the only successor), it returns meaningful; /// results only for such cases. For this very reason, the parent basic; /// block, Conditional, is named that way, so it is clear what kind of; /// block is expected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:601,clear,clear,601,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['clear'],['clear']
Usability,/// The maximum number of arguments we can hold. We; /// currently only support up to 10 arguments (%0-%9).; ///; /// A single diagnostic with more than that almost certainly has to; /// be simplified anyway.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:190,simpl,simplified,190,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['simpl'],['simplified']
Usability,/// The maximum number of arguments we can hold.; ///; /// We currently only support up to 10 arguments (%0-%9). A single; /// diagnostic with more than that almost certainly has to be simplified; /// anyway.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:185,simpl,simplified,185,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['simpl'],['simplified']
Usability,"/// The names here all end in ""*"". If the simple type is a pointer type, we; /// return the whole name. Otherwise we lop off the last character in our; /// StringRef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeIndex.cpp:42,simpl,simple,42,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeIndex.cpp,1,['simpl'],['simple']
Usability,/// The nested name specifier that qualifies the template; /// name.; ///; /// The bit stored in this qualifier describes whether the \c Name field; /// is interpreted as an IdentifierInfo pointer (when clear) or as an; /// overloaded operator kind (when set).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:203,clear,clear,203,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,1,['clear'],['clear']
Usability,/// The next I+1 words do not contain a value of object pointer type.; /// This is simply an optimized version of BLOCK_LAYOUT_BYTES for; /// when the required skip quantity is a multiple of the pointer size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:83,simpl,simply,83,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['simpl'],['simply']
Usability,/// The operation itself must be expressed in terms of simpler actions on; /// this target. E.g. a SREM replaced by an SDIV and subtraction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:55,simpl,simpler,55,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,2,['simpl'],['simpler']
Usability,"/// The result of parsing/analyzing an expression, statement etc.; ///; /// It may be:; /// - usable: a valid pointer to the result object; /// - unset (null but valid): for constructs that may legitimately be absent; /// (for example, the condition of a for loop); /// - invalid: indicating an error; /// (no detail is provided, usually the error has already been diagnosed)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:94,usab,usable,94,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,1,['usab'],['usable']
Usability,"/// The select instruction visitor plays three roles specified; /// by the mode. In \c VM_counting mode, it simply counts the number of; /// select instructions. In \c VM_instrument mode, it inserts code to count; /// the number times TrueValue of select is taken. In \c VM_annotate mode,; /// it reads the profile data and annotate the select instruction with metadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:108,simpl,simply,108,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['simpl'],['simply']
Usability,"/// The set of values whose lattice has been invalidated.; /// Populated by resetLatticeValueFor(), cleared after resolving undefs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp:100,clear,cleared,100,interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,1,['clear'],['cleared']
Usability,/// The shared resume function for a switch lowering.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp:15,resume,resume,15,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,1,['resume'],['resume']
Usability,"/// The simplest user interface if the default entry that comes with the ntuple model is used.; /// \return The number of uncompressed bytes written.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx:8,simpl,simplest,8,tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx,1,['simpl'],['simplest']
Usability,/// The simplified type class for a non-macro completion result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:8,simpl,simplified,8,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['simpl'],['simplified']
Usability,"/// The specific integer value is used in a context where it is known to be; /// non-zero. If this allows us to simplify the computation, do so and return; /// the new operand, otherwise return null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp:112,simpl,simplify,112,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,1,['simpl'],['simplify']
Usability,"/// The specified value produces a vector with any number of elements.; /// This method analyzes which elements of the operand are poison and; /// returns that information in PoisonElts.; ///; /// DemandedElts contains the set of elements that are actually used by the; /// caller, and by default (AllowMultipleUsers equals false) the value is; /// simplified only if it has a single caller. If AllowMultipleUsers is set; /// to true, DemandedElts refers to the union of sets of elements that are; /// used by all callers.; ///; /// If the information about demanded elements can be used to simplify the; /// operation, the operation is simplified, then the resultant value is; /// returned. This returns null if no change was made.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:349,simpl,simplified,349,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,3,['simpl'],"['simplified', 'simplify']"
Usability,/// The template named by the deduction guide.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h:40,guid,guide,40,interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclarationName.h,1,['guid'],['guide']
Usability,/// The vector with all simplification callbacks for global variables; /// registered by outside AAs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,simpl,simplification,24,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplification']
Usability,/// The vector with all simplification callbacks registered by outside AAs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:24,simpl,simplification,24,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplification']
Usability,"/// There are several places where we need to know if a cast instruction; /// only deals with integer source and destination types. To simplify that; /// logic, this method is provided.; /// @returns true iff the cast has only integral typed operand and dest type.; /// Determine if this is an integer-only cast.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:135,simpl,simplify,135,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['simpl'],['simplify']
Usability,/// There are two ways to clear extreme bits (either low or high):; /// Mask: x & (-1 << y) (the instcombine canonical form); /// Shifts: x >> y << y; /// Return true if the variant with 2 variable shifts is preferred.; /// Return false if there is no preference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,clear,clear,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['clear'],['clear']
Usability,/// These are constants we have checked and know to be simple enough to live; /// in a static initializer of a global.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:55,simpl,simple,55,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,1,['simpl'],['simple']
Usability,"/// These are helper functions used to produce formatted output. They use; /// template type deduction to construct the appropriate instance of the; /// format_object class to simplify their construction.; ///; /// This is typically used like:; /// \code; /// OS << format(""%0.4f"", myfloat) << '\n';; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h:176,simpl,simplify,176,interpreter/llvm-project/llvm/include/llvm/Support/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Format.h,1,['simpl'],['simplify']
Usability,/// These are run on analyses that have been cleared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:45,clear,cleared,45,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,1,['clear'],['cleared']
Usability,/// These are simplifications common to SDiv and UDiv.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:14,simpl,simplifications,14,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplifications']
Usability,/// These are simplifications common to SRem and URem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:14,simpl,simplifications,14,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplifications']
Usability,"/// This CFG Deadness finds dead blocks and edges. Algorithm starts with a set; /// of blocks unreachable from entry then propagates deadness using foldable; /// conditional branches without modifying CFG. So GVN does but it changes CFG; /// by splitting critical edges. In most cases passes rely on SimplifyCFG to; /// clean up dead blocks, but in some cases, like verification or loop passes; /// it's not possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp:300,Simpl,SimplifyCFG,300,interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/SafepointIRVerifier.cpp,1,['Simpl'],['SimplifyCFG']
Usability,"/// This SDNode is used for PSEUDO_PROBE values, which are the function guid and; /// the index of the basic block being probed. A pseudo probe serves as a place; /// holder and will be removed at the end of compilation. It does not have any; /// operand because we do not want the instruction selection to deal with any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:72,guid,guid,72,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['guid'],['guid']
Usability,/// This class defines a simple visitor class that may be used for; /// various SCEV analysis purposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h:25,simpl,simple,25,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h,1,['simpl'],['simple']
Usability,/// This class implements a simple visitor for OMPClause; /// subclasses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:28,simpl,simple,28,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,"/// This class implements simplifications for calls to fortified library; /// functions (__st*cpy_chk, __memcpy_chk, __memmove_chk, __memset_chk), to,; /// when possible, replace them with their non-checking counterparts.; /// Other optimizations can also be done, but it's possible to disable them and; /// only simplify needless use of the checking versions (when the object size; /// is unknown) by passing true for OnlyLowerUnknownSize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:26,simpl,simplifications,26,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,2,['simpl'],"['simplifications', 'simplify']"
Usability,/// This class is a simple list of T structures. It keeps elements as; /// pre-allocated groups to save memory for each element's next pointer.; /// It allocates internal data using specified per-thread BumpPtrAllocator.; /// Method add() can be called asynchronously.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/ArrayList.h:20,simpl,simple,20,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/ArrayList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/ArrayList.h,1,['simpl'],['simple']
Usability,"/// This class is a wrapper over an AAResults, and it is intended to be used; /// only when there are no IR changes inbetween queries. BatchAAResults is; /// reusing the same `AAQueryInfo` to preserve the state across queries,; /// esentially making AA work in ""batch mode"". The internal state cannot be; /// cleared, so to go ""out-of-batch-mode"", the user must either use AAResults,; /// or create a new BatchAAResults.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:309,clear,cleared,309,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['clear'],['cleared']
Usability,"/// This class provides the basic blocks traversal order used by passes like; /// ReachingDefAnalysis and ExecutionDomainFix.; /// It identifies basic blocks that are part of loops and should to be visited; /// twice and returns efficient traversal order for all the blocks.; ///; /// We want to visit every instruction in every basic block in order to update; /// it's execution domain or collect clearance information. However, for the; /// clearance calculation, we need to know clearances from all predecessors; /// (including any backedges), therfore we need to visit some blocks twice.; /// As an example, consider the following loop.; ///; ///; /// PH -> A -> B (xmm<Undef> -> xmm<Def>) -> C -> D -> EXIT; /// ^ |; /// +----------------------------------+; ///; /// The iteration order this pass will return is as follows:; /// Optimized: PH A B C A' B' C' D; ///; /// The basic block order is constructed as follows:; /// Once we finish processing some block, we update the counters in MBBInfos; /// and re-process any successors that are now 'done'.; /// We call a block that is ready for its final round of processing `done`; /// (isBlockDone), e.g. when all predecessor information is known.; ///; /// Note that a naive traversal order would be to do two complete passes over; /// all basic blocks/instructions, the first for recording clearances, the; /// second for updating clearance based on backedges.; /// However, for functions without backedges, or functions with a lot of; /// straight-line code, and a small loop, that would be a lot of unnecessary; /// work (since only the BBs that are part of the loop require two passes).; ///; /// E.g., the naive iteration order for the above exmple is as follows:; /// Naive: PH A B C D A' B' C' D'; ///; /// In the optimized approach we avoid processing D twice, because we; /// can entirely process the predecessors before getting to D.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LoopTraversal.h:398,clear,clearance,398,interpreter/llvm-project/llvm/include/llvm/CodeGen/LoopTraversal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LoopTraversal.h,5,['clear'],"['clearance', 'clearances']"
Usability,"/// This class provides transaction based operation on the IR.; /// Every change made through this class is recorded in the internal state and; /// can be undone (rollback) until commit is called.; /// CGP does not check if instructions could be speculatively executed when; /// moved. Preserving the original location would pessimize the debugging; /// experience, as well as negatively impact the quality of sample PGO.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:155,undo,undone,155,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['undo'],['undone']
Usability,"/// This class represents the internal implementation of the RecordKeeper.; /// It contains all of the contextual static state of the Record classes. It is; /// kept out-of-line to simplify dependencies, and also make it easier for; /// internal classes to access the uniquer state of the keeper.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:181,simpl,simplify,181,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['simpl'],['simplify']
Usability,"/// This constant requires no relocations. That is, it holds simple; /// constants (like integrals).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:61,simpl,simple,61,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,1,['simpl'],['simple']
Usability,"/// This folding set used for two purposes:; /// 1. Given information about a node we want to create, look up the unique; /// instance of the node in the set. If the node already exists, return; /// it, otherwise return the bucket it should be inserted into.; /// 2. Given a node that has already been created, remove it from the set.; ///; /// This class is implemented as a single-link chained hash table, where the; /// ""buckets"" are actually the nodes themselves (the next pointer is in the; /// node). The last node points back to the bucket to simplify node removal.; ///; /// Any node that is to be included in the folding set must be a subclass of; /// FoldingSetNode. The node class must also define a Profile method used to; /// establish the unique bits of data for the node. The Profile method is; /// passed a FoldingSetNodeID object which is used to gather the bits. Just; /// call one of the Add* functions defined in the FoldingSetBase::NodeID class.; /// NOTE: That the folding set does not own the nodes and it is the; /// responsibility of the user to dispose of the nodes.; ///; /// Eg.; /// class MyNode : public FoldingSetNode {; /// private:; /// std::string Name;; /// unsigned Value;; /// public:; /// MyNode(const char *N, unsigned V) : Name(N), Value(V) {}; /// ...; /// void Profile(FoldingSetNodeID &ID) const {; /// ID.AddString(Name);; /// ID.AddInteger(Value);; /// }; /// ...; /// };; ///; /// To define the folding set itself use the FoldingSet template;; ///; /// Eg.; /// FoldingSet<MyNode> MyFoldingSet;; ///; /// Four public methods are available to manipulate the folding set;; ///; /// 1) If you have an existing node that you want add to the set but unsure; /// that the node might already exist then call;; ///; /// MyNode *M = MyFoldingSet.GetOrInsertNode(N);; ///; /// If The result is equal to the input then the node has been inserted.; /// Otherwise, the result is the node existing in the folding set, and the; /// input can be discarded (use the result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:550,simpl,simplify,550,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,1,['simpl'],['simplify']
Usability,"/// This form of SimplifyDemandedBits simplifies the specified instruction; /// operand if possible, updating it in place. It returns true if it made any; /// change and false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:17,Simpl,SimplifyDemandedBits,17,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,2,"['Simpl', 'simpl']","['SimplifyDemandedBits', 'simplifies']"
Usability,"/// This function attempts to replace V with a simpler value based on the; /// demanded bits. When this function is called, it is known that only the bits; /// set in DemandedMask of the result of V are ever used downstream.; /// Consequently, depending on the mask and V, it may be possible to replace V; /// with a constant or one of its operands. In such cases, this function does; /// the replacement and returns true. In all other cases, it returns false after; /// analyzing the expression and setting KnownOne and known to be one in the; /// expression. Known.Zero contains all the bits that are known to be zero in; /// the expression. These are provided to potentially allow the caller (which; /// might recursively be SimplifyDemandedBits itself) to simplify the; /// expression.; /// Known.One and Known.Zero always follow the invariant that:; /// Known.One & Known.Zero == 0.; /// That is, a bit can't be both 1 and 0. The bits in Known.One and Known.Zero; /// are accurate even for bits not in DemandedMask. Note; /// also that the bitwidth of V, DemandedMask, Known.Zero and Known.One must all; /// be the same.; ///; /// This returns null if it did not change anything and it permits no; /// simplification. This returns V itself if it did some simplification of V's; /// operands based on the information about what bits are demanded. This returns; /// some other non-null value if it found out that V is equal to another value; /// in the context where the specified bits are demanded, but not for all users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:47,simpl,simpler,47,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,5,"['Simpl', 'simpl']","['SimplifyDemandedBits', 'simpler', 'simplification', 'simplify']"
Usability,"/// This function determines if there is anything we can decide about the two; /// constants provided. This doesn't need to handle simple things like integer; /// comparisons, but should instead handle ConstantExprs and GlobalValues.; /// If we can determine that the two constants have a particular relation to; /// each other, we should return the corresponding ICmp predicate, otherwise; /// return ICmpInst::BAD_ICMP_PREDICATE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp:131,simpl,simple,131,interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,1,['simpl'],['simple']
Usability,/// This function expands pseudos which affects control flow.; /// It is done in separate pass to simplify blocks navigation in main; /// pass(calling ExpandMBB).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp:98,simpl,simplify,98,interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp,1,['simpl'],['simplify']
Usability,/// This function is called when we have proved that a SETCC node can be replaced; /// by subtraction (and other supporting instructions) so that the result of; /// comparison is kept in a GPR instead of CR. This function is purely for; /// codegen purposes and has some flags to guide the codegen process.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:280,guid,guide,280,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['guid'],['guide']
Usability,"/// This function is used to do simplification of a CFG. For example, it; /// adjusts branches to branches to eliminate the extra hop, it eliminates; /// unreachable basic blocks, and does other peephole optimization of the CFG.; /// It returns true if a modification was made, possibly deleting the basic; /// block that was pointed to. LoopHeaders is an optional input parameter; /// providing the set of loop headers that SimplifyCFG should not eliminate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:32,simpl,simplification,32,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,2,"['Simpl', 'simpl']","['SimplifyCFG', 'simplification']"
Usability,"/// This function returns an estimate for VL to be used in VL based terms; /// of the cost model. For fixed length vectors, this is simply the; /// vector length. For scalable vectors, we return results consistent; /// with getVScaleForTuning under the assumption that clients are also; /// using that when comparing costs between scalar and vector representation.; /// This does unfortunately mean that we can both undershoot and overshot; /// the true cost significantly if getVScaleForTuning is wildly off for the; /// actual target hardware.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.h:132,simpl,simply,132,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.h,1,['simpl'],['simply']
Usability,/// This function undoes the restore point split done earlier.; ///; /// DirtyPreds: All predecessors of \p NMBB that are ReachableByDirty.; ///; /// Restore point was split and the change needs to be unrolled. Make necessary; /// changes to reset restore point from \p NMBB to \p MBB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp:18,undo,undoes,18,interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShrinkWrap.cpp,1,['undo'],['undoes']
Usability,/// This helper function of SimplifySetCC tries to optimize the comparison when; /// either operand of the SetCC node is a bitwise-and instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:28,Simpl,SimplifySetCC,28,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['Simpl'],['SimplifySetCC']
Usability,"/// This implements an analogous, but entirely distinct transform from the main; /// loop predication transform. This one is phrased in terms of using a; /// widenable branch *outside* the loop to allow us to simplify loop exits in a; /// following loop. This is close in spirit to the IndVarSimplify transform; /// of the same name, but is materially different widening loosens legality; /// sharply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp:209,simpl,simplify,209,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,1,['simpl'],['simplify']
Usability,"/// This is a bitvector that contains two bits for each simple value type,; /// where the two bits correspond to the LegalizeAction enum from; /// TargetLowering. This can be queried with ""getTypeAction(VT)"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:56,simpl,simple,56,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,1,['simpl'],['simple']
Usability,"/// This is a more granular function that simply checks an intrinsic function; /// for upgrading, and returns true if it requires upgrading. It may return; /// null in NewFn if the all calls to the original intrinsic function; /// should be transformed to non-function-call instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:42,simpl,simply,42,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,1,['simpl'],['simply']
Usability,/// This is a simple alias analysis implementation that uses knowledge; /// of ARC constructs to answer queries.; ///; /// TODO: This class could be generalized to know about other ObjC-specific; /// tricks. Such as knowing that ivars in the non-fragile ABI are non-aliasing; /// even though their offsets are dynamic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAliasAnalysis.h:14,simpl,simple,14,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAliasAnalysis.h,1,['simpl'],['simple']
Usability,"/// This is a simple memory manager which implements the methods called by; /// the RuntimeDyld class to allocate memory for section-based loading of; /// objects, usually those generated by the MCJIT execution engine.; ///; /// This memory manager allocates all section memory as read-write. The; /// RuntimeDyld will copy JITed section memory into these allocated blocks; /// and perform any necessary linking and relocations.; ///; /// Any client using this memory manager MUST ensure that section-specific; /// page permissions have been applied before attempting to execute functions; /// in the JITed object. Permissions can be applied either by calling; /// MCJIT::finalizeObject or by calling SectionMemoryManager::finalizeMemory; /// directly. Clients of MCJIT should call MCJIT::finalizeObject.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h:14,simpl,simple,14,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.h,1,['simpl'],['simple']
Usability,/// This is a simple wrapper around an MDNode which provides a higher-level; /// interface by hiding the details of how alias analysis information is encoded; /// in its operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:14,simpl,simple,14,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,2,['simpl'],['simple']
Usability,/// This is a stub for TargetLowering::SimplifySetCC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Simpl,SimplifySetCC,39,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Simpl'],['SimplifySetCC']
Usability,"/// This is a utility for simplifying induction variables; /// based on ScalarEvolution. It is the primary instrument of the; /// IndvarSimplify pass, but it may also be directly invoked to cleanup after; /// other loop passes that preserve SCEV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:26,simpl,simplifying,26,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['simpl'],['simplifying']
Usability,/// This is actually not an error but a marker to indicate that; /// the instruction stream is paused.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h:95,pause,paused,95,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/Stage.h,1,['pause'],['paused']
Usability,"/// This is an approximation of reciprocal throughput of a math/logic op.; /// A higher cost indicates less expected throughput.; /// From Agner Fog's guides, reciprocal throughput is ""the average number of; /// clock cycles per instruction when the instructions are not part of a; /// limiting dependency chain.""; /// Therefore, costs should be scaled to account for multiple execution units; /// on the target that can process this type of instruction. For example, if; /// there are 5 scalar integer units and 2 vector integer units that can; /// calculate an 'add' in a single cycle, this model should indicate that the; /// cost of the vector add instruction is 2.5 times the cost of the scalar; /// add instruction.; /// \p Args is an optional argument which holds the instruction operands; /// values so the TTI can analyze those values searching for special; /// cases or optimizations based on those values.; /// \p CxtI is the optional original context instruction, if one exists, to; /// provide even more information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:151,guid,guides,151,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['guid'],['guides']
Usability,"/// This is an important base class in LLVM. It provides the common facilities; /// of all constant values in an LLVM program. A constant is a value that is; /// immutable at runtime. Functions are constants because their address is; /// immutable. Same with global variables.; ///; /// All constants share the capabilities provided in this class. All constants; /// can have a null value. They can have an operand list. Constants can be; /// simple (integer and floating point values), complex (arrays and structures),; /// or expression based (computations yielding a constant value composed of; /// only certain operators and other constant values).; ///; /// Note that Constants are immutable (once created they never change); /// and are fully shared by structural equivalence. This means that two; /// structurally equivalent constants will always have the same address.; /// Constants are created on demand as needed and never deleted: thus clients; /// don't have to worry about the lifetime of the objects.; /// LLVM Constant Representation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:443,simpl,simple,443,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,1,['simpl'],['simple']
Usability,"/// This is called when we find an icmp instruction; /// (a seteq/setne with a constant) as the only instruction in a; /// block that ends with an uncond branch. We are looking for a very specific; /// pattern that occurs when ""A == 1 || A == 2 || A == 3"" gets simplified. In; /// this case, we merge the first two ""or's of icmp"" into a switch, but then the; /// default value goes to an uncond block with a seteq in it, we get something; /// like:; ///; /// switch i8 %A, label %DEFAULT [ i8 1, label %end i8 2, label %end ]; /// DEFAULT:; /// %tmp = icmp eq i8 %A, 92; /// br label %end; /// end:; /// ... = phi i1 [ true, %entry ], [ %tmp, %DEFAULT ], [ true, %entry ]; ///; /// We prefer to split the edge to 'end' so that there is a true/false entry to; /// the PHI, merging the third icmp into the switch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:261,simpl,simplified,261,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['simpl'],['simplified']
Usability,"/// This is called when we see this pattern:; /// cmp pred (load (gep GV, ...)), cmpcst; /// where GV is a global variable with a constant initializer. Try to simplify; /// this into some simple computation that does not need the load. For example; /// we can optimize ""icmp eq (load (gep ""foo"", 0, i)), 0"" into ""icmp eq i, 3"".; ///; /// If AndCst is non-null, then the loaded value is masked with that constant; /// before doing the comparison. This handles cases like ""A[i]&4 == 0"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:159,simpl,simplify,159,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,2,['simpl'],"['simple', 'simplify']"
Usability,"/// This is mostly a copy of the existing FastISel GEP code, but we have to; /// duplicate it for AArch64, because otherwise we would bail out even for; /// simple cases. This is because the standard fastEmit functions don't cover; /// MUL at all and ADD is lowered very inefficientily.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:157,simpl,simple,157,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['simpl'],['simple']
Usability,/// This is the base abstract class for diagnostic reporting in; /// the backend.; /// The print method must be overloaded by the subclasses to print a; /// user-friendly message in the client of the backend (let us call it a; /// frontend).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:157,user-friendly,user-friendly,157,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['user-friendly'],['user-friendly']
Usability,"/// This is the hash of the name of the symbol in the original file. It is; /// identical to the GUID for global symbols, but differs for local since the; /// GUID includes the module level id in the hash.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:97,GUID,GUID,97,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,2,['GUID'],['GUID']
Usability,"/// This is the insert position that the current loop's induction variable; /// increment should be placed. In simple loops, this is the latch block's; /// terminator. But in more complicated cases, this is a position which will; /// dominate all the in-loop post-increment users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:111,simpl,simple,111,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['simpl'],['simple']
Usability,"/// This is true if this TokenLexer allocated the Tokens; /// array, and thus needs to free it when destroyed. For simple object-like; /// macros (for example) we just point into the token buffer of the macro; /// definition, we don't make a copy of it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h:115,simpl,simple,115,interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/TokenLexer.h,1,['simpl'],['simple']
Usability,"/// This is used to represent a portion of an LLVM function in a low-level; /// Data Dependence DAG representation suitable for instruction selection.; /// This DAG is constructed as the first step of instruction selection in order; /// to allow implementation of machine specific optimizations; /// and code simplifications.; ///; /// The representation used by the SelectionDAG is a target-independent; /// representation, which has some similarities to the GCC RTL representation,; /// but is significantly more simple, powerful, and is a graph form instead of a; /// linear form.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:309,simpl,simplifications,309,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,2,['simpl'],"['simple', 'simplifications']"
Usability,/// This method clears MayReadAnyGlobal bit added by GlobalsAAResult to return; /// the corresponding ModRefInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp:16,clear,clears,16,interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,1,['clear'],['clears']
Usability,/// This method clones the current Program and deletes the specified; /// instruction from the cloned module. It then runs a series of cleanup; /// passes (ADCE and SimplifyCFG) to eliminate any code which depends on the; /// value. The modified module is then returned.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:165,Simpl,SimplifyCFG,165,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['Simpl'],['SimplifyCFG']
Usability,"/// This method commutes the operands of the given machine instruction MI.; /// The operands to be commuted are specified by their indices OpIdx1 and; /// OpIdx2.; ///; /// If a target has any instructions that are commutable but require; /// converting to different instructions or making non-trivial changes; /// to commute them, this method can be overloaded to do that.; /// The default implementation simply swaps the commutable operands.; ///; /// If NewMI is false, MI is modified in place and returned; otherwise, a; /// new machine instruction is created and returned.; ///; /// Do not call this method for a non-commutable instruction.; /// Even though the instruction is commutable, the method may still; /// fail to commute the operands, null pointer is returned in such cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:406,simpl,simply,406,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['simpl'],['simply']
Usability,"/// This method is a wrapper to simplify add emission.; ///; /// First try to emit an add with an immediate operand using emitAddSub_ri. If; /// that fails, then try to materialize the immediate into a register and use; /// emitAddSub_rr instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:32,simpl,simplify,32,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['simpl'],['simplify']
Usability,"/// This performs a few simplifications for operators that are associative or; /// commutative:; ///; /// Commutative operators:; ///; /// 1. Order operands such that they are listed from right (least complex) to; /// left (most complex). This puts constants before unary operators before; /// binary operators.; ///; /// Associative operators:; ///; /// 2. Transform: ""(A op B) op C"" ==> ""A op (B op C)"" if ""B op C"" simplifies.; /// 3. Transform: ""A op (B op C)"" ==> ""(A op B) op C"" if ""A op B"" simplifies.; ///; /// Associative and commutative operators:; ///; /// 4. Transform: ""(A op B) op C"" ==> ""(C op A) op B"" if ""C op A"" simplifies.; /// 5. Transform: ""A op (B op C)"" ==> ""B op (C op A)"" if ""C op A"" simplifies.; /// 6. Transform: ""(A op C1) op (B op C2)"" ==> ""(A op B) op (C1 op C2)""; /// if C1 and C2 are constants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:24,simpl,simplifications,24,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,5,['simpl'],"['simplifications', 'simplifies']"
Usability,/// This represents 'allocator' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:230,simpl,simple,230,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'at' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error at(compilation); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'at' clause with kind 'complilation'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:193,simpl,simple,193,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'atomic_default_mem_order' clause in the '#pragma omp; /// requires' directive.; ///; /// \code; /// #pragma omp requires atomic_default_mem_order(seq_cst); /// \endcode; /// In this example directive '#pragma omp requires' has simple; /// atomic_default_mem_order' clause with kind 'seq_cst'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:248,simpl,simple,248,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'default' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp parallel default(shared); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'default'; /// clause with kind 'shared'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:203,simpl,simple,203,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'detach' clause in the '#pragma omp task' directive.; ///; /// \code; /// #pragma omp task detach(evt); /// \endcode; /// In this example directive '#pragma omp detach' has simple 'detach' clause; /// with the variable 'evt'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:193,simpl,simple,193,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'final' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp task final(a > 5); /// \endcode; /// In this example directive '#pragma omp task' has simple 'final'; /// clause with condition 'a > 5'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:190,simpl,simple,190,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'if' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp parallel if(parallel:a > 5); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'if' clause with; /// condition 'a > 5' and directive name modifier 'parallel'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:201,simpl,simple,201,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:216,simpl,simple,216,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'nocontext' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp dispatch nocontext(a > 5); /// \endcode; /// In this example directive '#pragma omp dispatch' has simple 'nocontext'; /// clause with condition 'a > 5'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:206,simpl,simple,206,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'novariants' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp dispatch novariants(a > 5); /// \endcode; /// In this example directive '#pragma omp dispatch' has simple 'novariants'; /// clause with condition 'a > 5'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:208,simpl,simple,208,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'num_threads' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp parallel num_threads(6); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'num_threads'; /// clause with number of threads '6'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:211,simpl,simple,211,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'order' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp simd order(concurrent); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'order'; /// clause with kind 'concurrent'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:199,simpl,simple,199,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'proc_bind' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp parallel proc_bind(master); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'proc_bind'; /// clause with kind 'master'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:212,simpl,simple,212,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'severity' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error severity(fatal); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'severity' clause with kind 'fatal'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:199,simpl,simple,199,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'simd' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp ordered simd; /// \endcode; /// In this example directive '#pragma omp ordered' has simple 'simd' clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:187,simpl,simple,187,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents 'threads' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp ordered threads; /// \endcode; /// In this example directive '#pragma omp ordered' has simple 'threads' clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:193,simpl,simple,193,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents a list of ValueType's that has been intern'd by; /// a SelectionDAG. Instances of this simple value class are returned by; /// SelectionDAG::getVTList(...).; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:107,simpl,simple,107,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['simpl'],['simple']
Usability,"/// This represents a position within a bitcode file, implemented on top of a; /// SimpleBitstreamCursor.; ///; /// Unlike iterators, BitstreamCursors are heavy-weight objects that should not; /// be passed by value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h:83,Simpl,SimpleBitstreamCursor,83,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h,1,['Simpl'],['SimpleBitstreamCursor']
Usability,"/// This represents a simple continuous liveness interval for a value.; /// The start point is inclusive, the end point exclusive. These intervals; /// are rendered as [start,end).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h:22,simpl,simple,22,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,1,['simpl'],['simple']
Usability,"/// This represents an ""assembler immediate"".; ///; /// In its most general form, this can hold "":Kind:(SymbolA - SymbolB +; /// imm64)"". Not all targets supports relocations of this general form, but we; /// need to represent this anyway.; ///; /// In general both SymbolA and SymbolB will also have a modifier; /// analogous to the top-level Kind. Current targets are not expected; /// to make use of both though. The choice comes down to whether; /// relocation modifiers apply to the closest symbol or the whole; /// expression.; ///; /// Note that this class must remain a simple POD value class, because we need; /// it to live in unions etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h:578,simpl,simple,578,interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCValue.h,1,['simpl'],['simple']
Usability,/// This represents the 'GUID' type from windows.h.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h:25,GUID,GUID,25,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h,1,['GUID'],['GUID']
Usability,/// This represents the 'align' clause in the '#pragma omp allocate'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc) align(8); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc' and align clause with; /// value of 8.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:244,simpl,simple,244,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['simpl'],['simple']
Usability,/// This represents the llvm.coro.async.resume instruction.; /// During lowering this is replaced by the resume function of a suspend point; /// (the continuation function).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInstr.h:40,resume,resume,40,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInstr.h,2,['resume'],['resume']
Usability,"/// This returns a ConstantFP, or a vector containing a splat of a ConstantFP,; /// for the specified value in the specified type. This should only be used; /// for simple constant values like 2.0/1.0 etc, that are known-valid both as; /// host double and as the target format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:165,simpl,simple,165,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,1,['simpl'],['simple']
Usability,/// This returns a reference to a raw_ostream which simply discards output.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:52,simpl,simply,52,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['simpl'],['simply']
Usability,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:33,simpl,simple,33,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,8,"['Simpl', 'simpl']","['Simple', 'SimpleKey', 'SimpleKeys', 'simple']"
Usability,"/// This struct provides an overload for CastInfo where From has simplify_type; /// defined. This simply forwards to the appropriate CastInfo with the; /// simplified type/value, so you don't have to implement both.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h:98,simpl,simply,98,interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,2,['simpl'],"['simplified', 'simply']"
Usability,"/// This tries to simplify binary operations by factorizing out common terms; /// (e. g. ""(A*B)+(A*C)"" -> ""A*(B+C)"").",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:18,simpl,simplify,18,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,2,['simpl'],['simplify']
Usability,"/// This tries to simplify binary operations which some other binary operation; /// distributes over either by factorizing out common terms; /// (eg ""(A*B)+(A*C)"" -> ""A*(B+C)"") or expanding out if this results in; /// simplifications (eg: ""A & (B | C) -> (A&B) | (A&C)"" if this is a win).; /// Returns the simplified value, or null if it didn't simplify.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:18,simpl,simplify,18,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,4,['simpl'],"['simplifications', 'simplified', 'simplify']"
Usability,"/// This works exactly like CloneFunctionInto,; /// except that it does some simple constant prop and DCE on the fly. The; /// effect of this is to copy significantly less code in cases where (for; /// example) a function call with constant arguments is inlined, and those; /// constant arguments cause a significant amount of code in the callee to be; /// dead. Since this doesn't produce an exact copy of the input, it can't be; /// used for things like CloneFunction or CloneModule.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp:77,simpl,simple,77,interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneFunction.cpp,1,['simpl'],['simple']
Usability,"/// This works exactly like CloneFunctionInto,; /// except that it does some simple constant prop and DCE on the fly. The; /// effect of this is to copy significantly less code in cases where (for; /// example) a function call with constant arguments is inlined, and those; /// constant arguments cause a significant amount of code in the callee to be; /// dead. Since this doesn't produce an exactly copy of the input, it can't be; /// used for things like CloneFunction or CloneModule.; ///; /// If ModuleLevelChanges is false, VMap contains no non-identity GlobalValue; /// mappings.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:77,simpl,simple,77,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,1,['simpl'],['simple']
Usability,"/// Thread-safe callback for RDataFrame.; /// It will record elapsed times and event statistics, and print a progress bar every n seconds (set by the; /// fPrintInterval). \param slot Ignored. \param value Ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:109,progress bar,progress bar,109,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,1,['progress bar'],['progress bar']
Usability,"/// ThreeDNow - This indicates that the instruction uses the; /// wacky 0x0F 0x0F prefix for 3DNow! instructions. The manual documents; /// this as having a 0x0F prefix with a 0x0F opcode, and each instruction; /// storing a classifier in the imm8 field. To simplify our implementation,; /// we handle this by storeing the classifier in the opcode field and using; /// this flag to indicate that the encoder should do the wacky 3DNow! thing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:258,simpl,simplify,258,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['simpl'],['simplify']
Usability,"/// Tile a loop nest.; ///; /// Tiles the loops of \p Loops by the tile sizes in \p TileSizes. Loops in; /// \p/ Loops must be perfectly nested, from outermost to innermost loop; /// (i.e. Loops.front() is the outermost loop). The trip count llvm::Value; /// of every loop and every tile sizes must be usable in the outermost; /// loop's preheader. This implies that the loop nest is rectangular.; ///; /// Example:; /// \code; /// for (int i = 0; i < 15; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 14; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After tiling with Loops={i,j} and TileSizes={5,7}, the loop is changed to; /// \code; /// for (int i1 = 0; i1 < 3; ++i1); /// for (int j1 = 0; j1 < 2; ++j1); /// for (int i2 = 0; i2 < 5; ++i2); /// for (int j2 = 0; j2 < 7; ++j2); /// body(i1*3+i2, j1*3+j2);; /// \endcode; ///; /// The returned vector are the loops {i1,j1,i2,j2}. The loops i1 and j1 are; /// referred to the floor, and the loops i2 and j2 are the tiles. Tiling also; /// handles non-constant trip counts, non-constant tile sizes and trip counts; /// that are not multiples of the tile size. In the latter case the tile loop; /// of the last floor-loop iteration will have fewer iterations than specified; /// as its tile size.; ///; ///; /// @param DL Debug location for instructions added by tiling, for; /// instance the floor- and tile trip count computation.; /// @param Loops Loops to tile. The CanonicalLoopInfo objects are; /// invalidated by this method, i.e. should not used after; /// tiling.; /// @param TileSizes For each loop in \p Loops, the tile size for that; /// dimensions.; ///; /// \returns A list of generated loops. Contains twice as many loops as the; /// input loop nest; the first half are the floor loops and the; /// second half are the tile loops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:302,usab,usable,302,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['usab'],['usable']
Usability,"/// To OS, print a vertical ellipsis (right-justified at LabelWidth) if it would; /// occupy less lines than ElidedLines, but print ElidedLines otherwise. Either; /// way, clear ElidedLines. Thus, if ElidedLines is empty, do nothing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:172,clear,clear,172,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,1,['clear'],['clear']
Usability,"/// To mitigate LVI, every instruction that performs a load can be followed by; /// an LFENCE instruction to squash any potential mis-speculation. There are; /// some instructions that require additional considerations, and may requre; /// manual mitigation. For more details, see:; /// https://software.intel.com/security-software-guidance/insights/deep-dive-load-value-injection; ///; /// Returns `true` if a mitigation was applied or warning was emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:332,guid,guidance,332,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['guid'],['guidance']
Usability,"/// Top-level MachineScheduler pass driver.; ///; /// Visit blocks in function order. Divide each block into scheduling regions; /// and visit them bottom-up. Visiting regions bottom-up is not required, but is; /// consistent with the DAG builder, which traverses the interior of the; /// scheduling regions bottom-up.; ///; /// This design avoids exposing scheduling boundaries to the DAG builder,; /// simplifying the DAG builder's support for ""special"" target instructions.; /// At the same time the design allows target schedulers to operate across; /// scheduling boundaries, for example to bundle the boundary instructions; /// without reordering them. This creates complexity, because the target; /// scheduler must update the RegionBegin and RegionEnd positions cached by; /// ScheduleDAGInstrs whenever adding or removing instructions. A much simpler; /// design would be to split blocks at scheduling boundaries, but LLVM has a; /// general bias against block splitting purely for implementation simplicity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:404,simpl,simplifying,404,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,3,['simpl'],"['simpler', 'simplicity', 'simplifying']"
Usability,"/// Trace the predicate state through a call.; ///; /// There are several layers of this needed to handle the full complexity of; /// calls.; ///; /// First, we need to send the predicate state into the called function. We do; /// this by merging it into the high bits of the stack pointer.; ///; /// For tail calls, this is all we need to do.; ///; /// For calls where we might return and resume the control flow, we need to; /// extract the predicate state from the high bits of the stack pointer after; /// control returns from the called function.; ///; /// We also need to verify that we intended to return to this location in the; /// code. An attacker might arrange for the processor to mispredict the return; /// to this valid but incorrect return address in the program rather than the; /// correct one. See the paper on this attack, called ""ret2spec"" by the; /// researchers, here:; /// https://christian-rossow.de/publications/ret2spec-ccs2018.pdf; ///; /// The way we verify that we returned to the correct location is by preserving; /// the expected return address across the call. One technique involves taking; /// advantage of the red-zone to load the return address from `8(%rsp)` where it; /// was left by the RET instruction when it popped `%rsp`. Alternatively, we can; /// directly save the address into a register that will be preserved across the; /// call. We compare this intended return address against the address; /// immediately following the call (the observed return address). If these; /// mismatch, we have detected misspeculation and can poison our predicate; /// state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:390,resume,resume,390,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['resume'],['resume']
Usability,"/// Trace the predicate state through each of the blocks in the function,; /// hardening everything necessary along the way.; ///; /// We call this routine once the initial predicate state has been established; /// for each basic block in the function in the SSA updater. This routine traces; /// it through the instructions within each basic block, and for non-returning; /// blocks informs the SSA updater about the final state that lives out of the; /// block. Along the way, it hardens any vulnerable instruction using the; /// currently valid predicate state. We have to do these two things together; /// because the SSA updater only works across blocks. Within a block, we track; /// the current predicate state directly and update it as it changes.; ///; /// This operates in two passes over each block. First, we analyze the loads in; /// the block to determine which strategy will be used to harden them: hardening; /// the address or hardening the loaded value when loaded into a register; /// amenable to hardening. We have to process these first because the two; /// strategies may interact -- later hardening may change what strategy we wish; /// to use. We also will analyze data dependencies between loads and avoid; /// hardening those loads that are data dependent on a load with a hardened; /// address. We also skip hardening loads already behind an LFENCE as that is; /// sufficient to harden them against misspeculation.; ///; /// Second, we actively trace the predicate state through the block, applying; /// the hardening steps we determined necessary in the first pass as we go.; ///; /// These two passes are applied to each basic block. We operate one block at a; /// time to simplify reasoning about reachability and sequencing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:1702,simpl,simplify,1702,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['simpl'],['simplify']
Usability,/// Tracks the last value id recorded in the GUIDToValueMap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:45,GUID,GUIDToValueMap,45,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,3,['GUID'],['GUIDToValueMap']
Usability,/// Transform a constructor declaration into a deduction guide.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:57,guid,guide,57,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['guid'],['guide']
Usability,"/// Transform a constructor template parameter into a deduction guide template; /// parameter, rebuilding any internal references to earlier parameters and; /// renumbering as we go.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:64,guid,guide,64,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['guid'],['guide']
Usability,/// Transform simple list of \p SI's cases into list of CaseRange's \p Cases.; /// \post \p Cases wouldn't contain references to \p SI's default BB.; /// \returns Number of \p SI's cases that do not reference \p SI's default BB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerSwitch.cpp:14,simpl,simple,14,interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerSwitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerSwitch.cpp,1,['simpl'],['simple']
Usability,"/// Transform to convert portions of a constructor declaration into the; /// corresponding deduction guide, per C++1z [over.match.class.deduct]p1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:101,guid,guide,101,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['guid'],['guide']
Usability,"/// Translate \p Func into its original name.; /// When profile doesn't use MD5, \p Func needs no translation.; /// When profile uses MD5, \p Func in current FunctionSamples; /// is actually GUID of the original function name. getFuncName will; /// translate \p Func in current FunctionSamples into its original name; /// by looking up in the function map GUIDToFuncNameMap.; /// If the original name doesn't exist in the map, return empty StringRef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h:191,GUID,GUID,191,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProf.h,2,['GUID'],"['GUID', 'GUIDToFuncNameMap']"
Usability,"/// Tree transform to ""extract"" a transformed type from a class template's; /// constructor to a deduction guide.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:107,guid,guide,107,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['guid'],['guide']
Usability,/// TreePredicateFn - This is an abstraction that represents the predicates on; /// a PatFrag node. This is a simple one-word wrapper around a pointer to; /// provide nice accessors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:110,simpl,simple,110,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['simpl'],['simple']
Usability,/// Tries to simplify add operations using the definition of remainder.; ///; /// The definition of remainder is X % C = X - (X / C ) * C. The add; /// expression X % C0 + (( X / C0 ) % C1) * C0 can be simplified to; /// X % (C0 * C1),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:13,simpl,simplify,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,2,['simpl'],"['simplified', 'simplify']"
Usability,"/// Tries to simplify binary operations which some other binary; /// operation distributes over.; ///; /// It does this by either by factorizing out common terms (eg ""(A*B)+(A*C)""; /// -> ""A*(B+C)"") or expanding out if this results in simplifications (eg: ""A; /// & (B | C) -> (A&B) | (A&C)"" if this is a win). Returns the simplified; /// value, or null if it didn't simplify.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:13,simpl,simplify,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,4,['simpl'],"['simplifications', 'simplified', 'simplify']"
Usability,"/// Tries to simplify binops of select and cast of the select condition.; ///; /// (Binop (cast C), (select C, T, F)); /// -> (select C, C0, C1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:13,simpl,simplify,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['simpl'],['simplify']
Usability,/// Tries to simplify operands to an integer instruction based on its; /// demanded bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:13,simpl,simplify,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['simpl'],['simplify']
Usability,"/// True if the index should be subtracted rather than added. We don't simply; /// negate the Scale, to avoid losing the NSW flag: X - INT_MIN*1 may be; /// non-wrapping, while X + INT_MIN*(-1) wraps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:71,simpl,simply,71,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['simpl'],['simply']
Usability,"/// Truncate using inreg zero extension (AND mask) and X86ISD::PACKUS.; /// e.g. trunc <8 x i32> X to <8 x i16> -->; /// MaskX = X & 0xffff (clear high bits to prevent saturation); /// packus (extract_subv MaskX, 0), (extract_subv MaskX, 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:141,clear,clear,141,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['clear'],['clear']
Usability,"/// Try to calculate the cost of performing strict (in-order) reductions,; /// which involves doing a sequence of floating point additions in lane; /// order, starting with an initial value. For example, consider a scalar; /// initial value 'InitVal' of type float and a vector of type <4 x float>:; ///; /// Vector = <float %v0, float %v1, float %v2, float %v3>; ///; /// %add1 = %InitVal + %v0; /// %add2 = %add1 + %v1; /// %add3 = %add2 + %v2; /// %add4 = %add3 + %v3; ///; /// As a simple estimate we can say the cost of such a reduction is 4 times; /// the cost of a scalar FP addition. We can only estimate the costs for; /// fixed-width vectors here because for scalable vectors we do not know the; /// runtime number of operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:486,simpl,simple,486,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['simpl'],['simple']
Usability,"/// Try to constrain Op so that it is usable by argument OpNum of the; /// provided MCInstrDesc. If this fails, create a new virtual register in the; /// correct class and COPY the value there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:38,usab,usable,38,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['usab'],['usable']
Usability,"/// Try to constrain Reg so that it is usable by argument OpIdx of the provided; /// MCInstrDesc \p II. If this fails, create a new virtual register in the; /// correct class and insert a COPY before \p InsertPt if it is a use or after; /// if it is a definition. In both cases, the function also updates the register; /// of RegMo.; /// This is equivalent to constrainOperandRegClass(..., RegClass, ...); /// with RegClass obtained from the MCInstrDesc. The debug location of \p; /// InsertPt is used for the new copy.; ///; /// \return The virtual register constrained to the right register class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:39,usab,usable,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,1,['usab'],['usable']
Usability,"/// Try to eliminate select instructions that test the returned flag of cmpxchg; /// instructions.; ///; /// If a select instruction tests the returned flag of a cmpxchg instruction and; /// selects between the returned value of the cmpxchg instruction its compare; /// operand, the result of the select will always be equal to its false value.; /// For example:; ///; /// %0 = cmpxchg i64* %ptr, i64 %compare, i64 %new_value seq_cst seq_cst; /// %1 = extractvalue { i64, i1 } %0, 1; /// %2 = extractvalue { i64, i1 } %0, 0; /// %3 = select i1 %1, i64 %compare, i64 %2; /// ret i64 %3; ///; /// The returned value of the cmpxchg instruction (%2) is the original value; /// located at %ptr prior to any update. If the cmpxchg operation succeeds, %2; /// must have been equal to %compare. Thus, the result of the select is always; /// equal to %2, and the code can be simplified to:; ///; /// %0 = cmpxchg i64* %ptr, i64 %compare, i64 %new_value seq_cst seq_cst; /// %1 = extractvalue { i64, i1 } %0, 0; /// ret i64 %1; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:866,simpl,simplified,866,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['simpl'],['simplified']
Usability,"/// Try to ensure that the alignment of \p V is at least \p PrefAlign bytes. If; /// the owning object can be modified and has an alignment less than \p; /// PrefAlign, it will be increased and \p PrefAlign returned. If the alignment; /// cannot be increased, the known alignment of the value is returned.; ///; /// It is not always possible to modify the alignment of the underlying object,; /// so if alignment is important, a more reliable approach is to simply align; /// all global variables and allocation instructions to their preferred; /// alignment from the beginning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:458,simpl,simply,458,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['simpl'],['simply']
Usability,"/// Try to fold icmp (binop), X or icmp X, (binop).; /// TODO: A large part of this logic is duplicated in InstSimplify's; /// simplifyICmpWithBinOp(). We should be able to share that and avoid the code; /// duplication.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:127,simpl,simplifyICmpWithBinOp,127,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['simpl'],['simplifyICmpWithBinOp']
Usability,"/// Try to fold instruction I into a constant. This works for; /// simple instructions such as binary operations where both operands are; /// constant or can be replaced by constants from the ConstantPool. Returns the; /// resulting constant on success, 0 otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:67,simpl,simple,67,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['simpl'],['simple']
Usability,/// Try to improve our exit conditions by converting condition from signed; /// to unsigned or rotating computation out of the loop.; /// (See inline comment about why this is duplicated from simplifyAndExtend),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:192,simpl,simplifyAndExtend,192,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['simpl'],['simplifyAndExtend']
Usability,"/// Try to optimize a sequence of instructions checking if an operation; /// on LHS and RHS overflows.; ///; /// If this overflow check is done via one of the overflow check intrinsics,; /// then CtxI has to be the call instruction calling that intrinsic. If this; /// overflow check is done by arithmetic followed by a compare, then CtxI has; /// to be the arithmetic instruction.; ///; /// If a simplification is possible, stores the simplified result of the; /// operation in OperationResult and result of the overflow check in; /// OverflowResult, and return true. If no simplification is possible,; /// returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:397,simpl,simplification,397,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,3,['simpl'],"['simplification', 'simplified']"
Usability,/// Try to parse the value of a defined preprocessor macro. We can only parse; /// simple expressions that consist of an optional minus sign token and then a; /// token for an integer. If we cannot parse the value then std::nullopt is; /// returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h:83,simpl,simple,83,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerHelpers.h,1,['simpl'],['simple']
Usability,/// Try to produce some number that indicates a function is getting smaller /; /// simpler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:83,simpl,simpler,83,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,1,['simpl'],['simpler']
Usability,"/// Try to propagate a guard from the current BB into one of its predecessors; /// in case if another branch of execution implies that the condition of this; /// guard is always true. Currently we only process the simplest case that; /// looks like:; ///; /// Start:; /// %cond = ...; /// br i1 %cond, label %T1, label %F1; /// T1:; /// br label %Merge; /// F1:; /// br label %Merge; /// Merge:; /// %condGuard = ...; /// call void(i1, ...) @llvm.experimental.guard( i1 %condGuard )[ ""deopt""() ]; ///; /// And cond either implies condGuard or !condGuard. In this case all the; /// instructions before the guard can be duplicated in both branches, and the; /// guard is then threaded to one of them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:214,simpl,simplest,214,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['simpl'],['simplest']
Usability,/// Try to replace a call instruction with a call to a bswap intrinsic. Return; /// false if the call is not a simple integer bswap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/IntrinsicLowering.h:111,simpl,simple,111,interpreter/llvm-project/llvm/include/llvm/CodeGen/IntrinsicLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/IntrinsicLowering.h,1,['simpl'],['simple']
Usability,"/// Try to replace shift/logic that tests if a bit is clear with mask + setcc.; /// For a target with a bit test, this is expected to become test + set and save; /// at least 1 instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:54,clear,clear,54,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['clear'],['clear']
Usability,"/// Try to simplify \p IRP and in the scope \p S. If successful, true is; /// returned and all potential values \p IRP can take are put into \p Values.; /// If the result in \p Values contains select or PHI instructions it means; /// those could not be simplified to a single value. Recursive calls with; /// these instructions will yield their respective potential values. If false; /// is returned no other information is valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:11,simpl,simplify,11,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,['simpl'],"['simplified', 'simplify']"
Usability,"/// Try to simplify a binary operator of form ""V op OtherOp"" where V is; /// ""(B0 opex B1)"" by distributing 'op' across 'opex' as; /// ""(B0 op OtherOp) opex (B1 op OtherOp)"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,"/// Try to simplify a call site.; ///; /// Takes a concrete function and callsite and tries to actually simplify it by; /// analyzing the arguments and call itself with instsimplify. Returns true if; /// it has simplified the callsite to some other entity (a constant), making it; /// free.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,3,['simpl'],"['simplified', 'simplify']"
Usability,"/// Try to simplify a call to llvm.is.constant.; ///; /// Duplicate the argument checking from CallAnalyzer::simplifyCallSite since; /// we expect calls of this specific intrinsic to be infrequent.; ///; /// FIXME: Given that we know CB's parent (F) caller; /// (CandidateCall->getParent()->getParent()), we might be able to determine; /// whether inlining F into F's caller would change how the call to; /// llvm.is.constant would evaluate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,2,['simpl'],"['simplify', 'simplifyCallSite']"
Usability,/// Try to simplify a floating-point binary operation into 1 of its operands; /// or a constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:11,simpl,simplify,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['simpl'],['simplify']
Usability,/// Try to simplify a given symbolic expression based on the constraints in; /// State. This is needed because the Environment bindings are not getting; /// updated when a new constraint is added to the State. If the symbol is; /// simplified to a non-symbol (e.g. to a constant) then the original symbol; /// is returned. We use this function in the family of assumeSymNE/EQ/LT/../GE; /// functions where we can work only with symbols. Use the other function; /// (simplifyToSVal) if you are interested in a simplification that may yield; /// a concrete constant value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:11,simpl,simplify,11,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,4,['simpl'],"['simplification', 'simplified', 'simplify', 'simplifyToSVal']"
Usability,"/// Try to simplify a given symbolic expression's associated `SVal` based on the; /// constraints in State. This is very similar to `simplify`, but this function; /// always returns the simplified SVal. The simplified SVal might be a single; /// constant (i.e. `ConcreteInt`).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:11,simpl,simplify,11,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,4,['simpl'],"['simplified', 'simplify']"
Usability,"/// Try to simplify a phi with constant incoming values that match the edge; /// values of a non-constant value on all other edges:; /// bb0:; /// %isnull = icmp eq i8* %x, null; /// br i1 %isnull, label %bb2, label %bb1; /// bb1:; /// br label %bb2; /// bb2:; /// %r = phi i8* [ %x, %bb1 ], [ null, %bb0 ]; /// -->; /// %r = %x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify a select instruction when its condition operand is a; /// floating-point comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify a select instruction when its condition operand is an; /// integer comparison where one operand of the compare is a constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify a select instruction when its condition operand is an; /// integer comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify a select instruction when its condition operand is an; /// integer equality comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify a select/vselect into 1 of its operands or a constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:11,simpl,simplify,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['simpl'],['simplify']
Usability,"/// Try to simplify a setcc built with the specified operands and cc. If it is; /// unable to simplify it, return a null SDValue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,simpl,simplify,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,4,['simpl'],['simplify']
Usability,/// Try to simplify a shift into 1 of its operands or a constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:11,simpl,simplify,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['simpl'],['simplify']
Usability,/// Try to simplify and/or of icmp with ctpop intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,"/// Try to simplify binary operator I.; ///; /// TODO: Probably it's worth to hoist the code for estimating the; /// simplifications effects to a separate class, since we have a very similar; /// code in InlineCost already.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,2,['simpl'],"['simplifications', 'simplify']"
Usability,"/// Try to simplify binops of form ""A op (B op' C)"" or the commuted variant by; /// distributing op over op'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify cast instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify cmp instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,1,['simpl'],['simplify']
Usability,"/// Try to simplify instruction \param I using its SCEV expression.; ///; /// The idea is that some AddRec expressions become constants, which then; /// could trigger folding of other instructions. However, that only happens; /// for expressions whose start value is also constant, which isn't always the; /// case. In another common and important case the start value is just some; /// address (i.e. SCEVUnknown) - in this case we compute the offset and save; /// it along with the base address instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopUnrollAnalyzer.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify recipe \p R.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,1,['simpl'],['simplify']
Usability,/// Try to simplify the recipes in \p Plan.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,1,['simpl'],['simplify']
Usability,"/// Try to simplify things like (A < INV_1 AND icmp A < INV_2) into (A <; /// min(INV_1, INV_2)), if INV_1 and INV_2 are both loop invariants and their; /// minimun can be computed outside of loop, and X is not a loop-invariant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['simpl'],['simplify']
Usability,"/// Try to simplify vector concatenation to an input value, undef, or build; /// vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:11,simpl,simplify,11,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['simpl'],['simplify']
Usability,"/// TryAnnotateTypeOrScopeToken - If the current token position is on a; /// typename (possibly qualified in C++) or a C++ scope specifier not followed; /// by a typename, TryAnnotateTypeOrScopeToken will replace one or more tokens; /// with a single annotation token representing the typename or C++ scope; /// respectively.; /// This simplifies handling of C++ scope specifiers and allows efficient; /// backtracking without the need to re-parse and resolve nested-names and; /// typenames.; /// It will mainly be called when we expect to treat identifiers as typenames; /// (if they are typenames). For example, in C we do not expect identifiers; /// inside expressions to be treated as typenames so it will not be called; /// for expressions in C.; /// The benefit for C/ObjC is that a typename will be annotated and; /// Actions.getTypeName will not be needed to be called again (e.g. getTypeName; /// will not be called twice, once to check whether we have a declaration; /// specifier, and another one to get the actual type inside; /// ParseDeclarationSpecifiers).; ///; /// This returns true if an error occurred.; ///; /// Note that this routine emits an error if you call it with ::new or ::delete; /// as the current tokens, so only call it in contexts where these are invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:336,simpl,simplifies,336,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,1,['simpl'],['simplifies']
Usability,/// Tuple of metadata.; ///; /// This is the simple \a MDNode arbitrary tuple. Nodes are uniqued by; /// default based on their operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:45,simpl,simple,45,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['simpl'],['simple']
Usability,"/// Turn the specified name into an 'LLVM name', which is either prefixed with %; /// (if the string only contains simple characters) or is surrounded with """"'s; /// (if it has special chars in it). Print it out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:115,simpl,simple,115,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,2,['simpl'],['simple']
Usability,"/// Types of operands to CFI instructions; /// In DWARF, this type is implicitly tied to a CFI instruction opcode and; /// thus this type doesn't need to be explictly written to the file (this is; /// not a DWARF encoding). The relationship of instrs to operand types can; /// be obtained from getOperandTypes() and is only used to simplify; /// instruction printing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:332,simpl,simplify,332,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,1,['simpl'],['simplify']
Usability,"/// Unassign VirtReg from its PhysReg.; /// Assuming that VirtReg was previously assigned to a PhysReg, this undoes; /// the assignment and updates VirtRegMap accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h:109,undo,undoes,109,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveRegMatrix.h,1,['undo'],['undoes']
Usability,"/// Undefines local variables (variables whose name does not start with a '$'; /// sign), i.e. removes them from GlobalVariableTable and from; /// GlobalNumericVariableTable and also clears the value of numeric; /// variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:183,clear,clears,183,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['clear'],['clears']
Usability,"/// Underlying constants for 'cost' values in this interface.; ///; /// Many APIs in this interface return a cost. This enum defines the; /// fundamental values that should be used to interpret (and produce) those; /// costs. The costs are returned as an int rather than a member of this; /// enumeration because it is expected that the cost of one IR instruction; /// may have a multiplicative factor to it or otherwise won't fit directly; /// into the enum. Moreover, it is common to sum or average costs which works; /// better as simple integral values. Thus this enum only provides constants.; /// Also note that the returned costs are signed integers to make it natural; /// to add, subtract, and test with zero (a common boundary condition). It is; /// not expected that 2^32 is a realistic cost to be modeling at any point.; ///; /// Note that these costs should usually reflect the intersection of code-size; /// cost and execution cost. A free instruction is typically one that folds; /// into another instruction. For example, reg-to-reg moves can often be; /// skipped by renaming the registers in the CPU, but they still are encoded; /// and thus wouldn't be considered 'free' here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:534,simpl,simple,534,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['simpl'],['simple']
Usability,/// Undo N previous incremental inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:4,Undo,Undo,4,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,1,['Undo'],['Undo']
Usability,/// Undo a previous pushUndelayed().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:4,Undo,Undo,4,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Undo'],['Undo']
Usability,/// Undo all the changes made after the given point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:4,Undo,Undo,4,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['Undo'],['Undo']
Usability,/// Undo the changed offset. This is needed if the instruction cannot be; /// added to the current packet due to a different instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp:4,Undo,Undo,4,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,1,['Undo'],['Undo']
Usability,"/// Undo the modification done by this action.; /// When this method is called, the IR must be in the same state as it was; /// before this action was applied.; /// \pre Undoing the action works if and only if the IR is in the exact same; /// state as it was directly after this action was applied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:4,Undo,Undo,4,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,['Undo'],"['Undo', 'Undoing']"
Usability,"/// Undoes the effect of `PackBits`. The bits that were truncated in the packed representation; /// are filled with zeroes.; /// `src` must be at least `MinBufSize(count, nDstBits)` bytes long.; /// `dst` must be at least `count * sizeofDst` bytes long.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx:4,Undo,Undoes,4,tree/ntuple/v7/src/RColumnElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx,1,['Undo'],['Undoes']
Usability,"/// Undoes the transformation performed by QuantizeReals() (assuming the same `count`, `min`, `max` and `nQuantBits`).; /// \return The number of unpacked values that were found to be out of range (0 means all values were in range).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx:4,Undo,Undoes,4,tree/ntuple/v7/src/RColumnElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx,1,['Undo'],['Undoes']
Usability,"/// Unswitch a trivial branch if the condition is loop invariant.; ///; /// This routine should only be called when loop code leading to the branch has; /// been validated as trivial (no side effects). This routine checks if the; /// condition is invariant and one of the successors is a loop exit. This; /// allows us to unswitch without duplicating the loop, making it trivial.; ///; /// If this routine fails to unswitch the branch it returns false.; ///; /// If the branch can be unswitched, this routine splits the preheader and; /// hoists the branch above that split. Preserves loop simplified form; /// (splitting the exit block as necessary). It simplifies the branch within; /// the loop to an unconditional branch but doesn't remove it entirely. Further; /// cleanup can be done with some simplifycfg like pass.; ///; /// If `SE` is not null, it will be updated based on the potential loop SCEVs; /// invalidated by this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:590,simpl,simplified,590,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,3,['simpl'],"['simplified', 'simplifies', 'simplifycfg']"
Usability,"/// Unswitch a trivial switch if the condition is loop invariant.; ///; /// This routine should only be called when loop code leading to the switch has; /// been validated as trivial (no side effects). This routine checks if the; /// condition is invariant and that at least one of the successors is a loop; /// exit. This allows us to unswitch without duplicating the loop, making it; /// trivial.; ///; /// If this routine fails to unswitch the switch it returns false.; ///; /// If the switch can be unswitched, this routine splits the preheader and; /// copies the switch above that split. If the default case is one of the; /// exiting cases, it copies the non-exiting cases and points them at the new; /// preheader. If the default case is not exiting, it copies the exiting cases; /// and points the default at the preheader. It preserves loop simplified form; /// (splitting the exit blocks as necessary). It simplifies the switch within; /// the loop by removing now-dead cases. If the default case is one of those; /// unswitched, it replaces its destination with a new basic block containing; /// only unreachable. Such basic blocks, while technically loop exits, are not; /// considered for unswitching so this is a stable transform and the same; /// switch will not be revisited. If after unswitching there is only a single; /// in-loop successor, the switch is further simplified to an unconditional; /// branch. Still more cleanup can be done with some simplifycfg like pass.; ///; /// If `SE` is not null, it will be updated based on the potential loop SCEVs; /// invalidated by this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:851,simpl,simplified,851,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,4,['simpl'],"['simplified', 'simplifies', 'simplifycfg']"
Usability,"/// UnwindOpcodeStreamer - The simple wrapper over SmallVector to emit bytes; /// with MSB to LSB per uint32_t ordering. For example, the first byte will; /// be placed in Vec[3], and the following bytes will be placed in 2, 1, 0,; /// 7, 6, 5, 4, 11, 10, 9, 8, and so on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMUnwindOpAsm.cpp:31,simpl,simple,31,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMUnwindOpAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMUnwindOpAsm.cpp,1,['simpl'],['simple']
Usability,"/// Update PHI nodes in this BasicBlock before removal of predecessor \p Pred.; /// Note that this function does not actually remove the predecessor.; ///; /// If \p KeepOneInputPHIs is true then don't remove PHIs that are left with; /// zero or one incoming values, and don't simplify PHIs with all incoming; /// values the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:277,simpl,simplify,277,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,1,['simpl'],['simplify']
Usability,"/// Update internal state with \p Inst at \p Addr.; ///; /// For some types of analyses, inspecting a single instruction is not; /// sufficient. Some examples are auipc/jalr pairs on RISC-V or adrp/ldr pairs; /// on AArch64. To support inspecting multiple instructions, targets may keep; /// track of an internal state while analysing instructions. Clients should; /// call updateState for every instruction which allows later calls to one of; /// the analysis functions to take previous instructions into account.; /// Whenever state becomes irrelevant (e.g., when starting to disassemble a; /// new function), clients should call resetState to clear it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h:646,clear,clear,646,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrAnalysis.h,1,['clear'],['clear']
Usability,"/// Update live intervals for instructions in a range of iterators. It is; /// intended for use after target hooks that may insert or remove; /// instructions, and is only efficient for a small number of instructions.; ///; /// OrigRegs is a vector of registers that were originally used by the; /// instructions in the range between the two iterators.; ///; /// Currently, the only changes that are supported are simple removal; /// and addition of uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h:414,simpl,simple,414,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h,1,['simpl'],['simple']
Usability,/// Update memory intrinsic uses that require more complex processing than; /// simple memory instructions. These require re-mangling and may have multiple; /// pointer operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp:80,simpl,simple,80,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp,1,['simpl'],['simple']
Usability,/// Update the LLVMContext ID-to-Instruction(s) mapping. If \p ID is nullptr; /// then clear the mapping for this instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h:87,clear,clear,87,interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instruction.h,1,['clear'],['clear']
Usability,"/// Use SparseSet as a SparseMap by relying on the fact that it never; /// compares ValueT's, only unsigned keys. This allows the set to be cleared; /// between scheduling regions in constant time as long as ValueT does not; /// require a destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:140,clear,cleared,140,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['clear'],['cleared']
Usability,/// Use TTI to check whether a GEP is free.; ///; /// Respects any simplified values known during the analysis of this callsite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:67,simpl,simplified,67,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['simpl'],['simplified']
Usability,/// Use a SparseMultiSet to track physical registers. Storage is only; /// allocated once for the pass. It can be cleared in constant time and reused; /// without any frees.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:114,clear,cleared,114,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,1,['clear'],['cleared']
Usability,/// Used to add runtime SCEV checks. Simplifies SCEV expressions and converts; /// them to a more usable form. All SCEV expressions during the analysis; /// should be re-written (and therefore simplified) according to PSE.; /// A user of LoopAccessAnalysis will need to emit the runtime checks; /// associated with this predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:37,Simpl,Simplifies,37,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,3,"['Simpl', 'simpl', 'usab']","['Simplifies', 'simplified', 'usable']"
Usability,"/// Used to implement to perform semantic checking on; /// attribute((section(""foo""))) specifiers.; ///; /// In this case, ""foo"" is passed in to be checked. If the section; /// specifier is invalid, return an Error that indicates the problem.; ///; /// This is a simple quality of implementation feature to catch errors; /// and give good diagnostics in cases when the assembler or code generator; /// would otherwise reject the section specifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:263,simpl,simple,263,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['simpl'],['simple']
Usability,"/// User-friendly dump.; ///; /// If \c M is provided, metadata nodes will be numbered canonically;; /// otherwise, pointer addresses are substituted.; ///; /// Note: this uses an explicit overload instead of default arguments so that; /// the nullptr version is easy to call from a debugger.; ///; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:4,User-friendly,User-friendly,4,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['User-friendly'],['User-friendly']
Usability,"/// Uses regular expressions to simplify flags used for multilib selection.; /// For example, we may wish both -mfloat-abi=soft and -mfloat-abi=softfp to; /// be treated as -mfloat-abi=soft.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h:32,simpl,simplify,32,interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Multilib.h,1,['simpl'],['simplify']
Usability,"/// Utility class for extracting code into a new function.; ///; /// This utility provides a simple interface for extracting some sequence of; /// code into its own function, replacing it with a call to that function. It; /// also provides various methods to query about the nature and result of; /// such a transformation.; ///; /// The rough algorithm used is:; /// 1) Find both the inputs and outputs for the extracted region.; /// 2) Pass the inputs as arguments, remapping them within the extracted; /// function to arguments.; /// 3) Add allocas for any scalar outputs, adding all of the outputs' allocas; /// as arguments, and inserting stores to the arguments for any scalars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h:93,simpl,simple,93,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeExtractor.h,1,['simpl'],['simple']
Usability,"/// Utility function for performing a given action on each lane of a vector; /// with \p EC elements. To simplify porting legacy code, this defaults to; /// unrolling the implied loop for non-scalable element counts, but this is; /// not considered to be part of the contract of this routine, and is; /// expected to change in the future. The callback takes as arguments an; /// IRBuilder whose insert point is correctly set for instantiating the; /// given index, and a value which is (at runtime) the index to access.; /// This index *may* be a constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:105,simpl,simplify,105,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,1,['simpl'],['simplify']
Usability,"/// Utility function for performing a given action on each lane of a vector; /// with \p EVL effective length. EVL is assumed > 0. To simplify porting legacy; /// code, this defaults to unrolling the implied loop for non-scalable element; /// counts, but this is not considered to be part of the contract of this; /// routine, and is expected to change in the future. The callback takes as; /// arguments an IRBuilder whose insert point is correctly set for instantiating; /// the given index, and a value which is (at runtime) the index to access. This; /// index *may* be a constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:134,simpl,simplify,134,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,1,['simpl'],['simplify']
Usability,"/// Utility that implements appending of loops onto a worklist given LoopInfo.; /// Calls the templated utility taking a Range of loops, handing it the Loops; /// in LoopInfo, iterated in reverse. This is because the loops are stored in; /// RPO w.r.t. the control flow graph in LoopInfo. For the purpose of unrolling,; /// loop deletion, and LICM, we largely want to work forward across the CFG so; /// that we visit defs before uses and can propagate simplifications from one; /// loop nest into the next. Calls appendReversedLoopsToWorklist with the; /// already reversed loops in LI.; /// FIXME: Consider changing the order in LoopInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:453,simpl,simplifications,453,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,1,['simpl'],['simplifications']
Usability,/// Utility to run a FrontendAction over a set of files.; ///; /// This class is written to be usable for command line utilities.; /// By default the class uses ClangSyntaxOnlyAdjuster to modify; /// command line arguments before the arguments are used to run; /// a frontend action. One could install an additional command line; /// arguments adjuster by calling the appendArgumentsAdjuster() method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h:95,usab,usable,95,interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Tooling.h,1,['usab'],['usable']
Usability,"/// V is an integer constant which only has a subset of its bytes used.; /// The bytes used are indicated by ByteStart (which is the first byte used,; /// counting from the least significant byte) and ByteSize, which is the number; /// of bytes used.; ///; /// This function analyzes the specified constant to see if the specified byte; /// range can be returned as a simplified constant. If so, the constant is; /// returned, otherwise null is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp:368,simpl,simplified,368,interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,1,['simpl'],['simplified']
Usability,"/// VFuncId; /// ::= 'vFuncId' ':' '(' (SummaryID | 'guid' ':' UInt64) ','; /// 'offset' ':' UInt64 ')'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:53,guid,guid,53,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['guid'],['guid']
Usability,/// VP Intrinsics whose vector operands are both splat values may be simplified; /// into the scalar version of the operation and the result splatted. This; /// can lead to scalarization down the line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp:69,simpl,simplified,69,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VectorCombine.cpp,1,['simpl'],['simplified']
Usability,/// Various options to guide the coverage renderer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/SourceCoverageView.h:23,guid,guide,23,interpreter/llvm-project/llvm/tools/llvm-cov/SourceCoverageView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/SourceCoverageView.h,1,['guid'],['guide']
Usability,"/// Verifies that `Start` is clobbered by `ClobberAt`, and that nothing; /// inbetween `Start` and `ClobberAt` can clobbers `Start`.; ///; /// This is meant to be as simple and self-contained as possible. Because it; /// uses no cache, etc., it can be relatively expensive.; ///; /// \param Start The MemoryAccess that we want to walk from.; /// \param ClobberAt A clobber for Start.; /// \param StartLoc The MemoryLocation for Start.; /// \param MSSA The MemorySSA instance that Start and ClobberAt belong to.; /// \param Query The UpwardsMemoryQuery we used for our search.; /// \param AA The AliasAnalysis we used for our search.; /// \param AllowImpreciseClobber Always false, unless we do relaxed verify.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:166,simpl,simple,166,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['simpl'],['simple']
Usability,"/// Verify that if we change the normalization set of a server to a RooAddPdf,; /// the projection caches in the RooAddPdf are cleared correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx:127,clear,cleared,127,roofit/roofitcore/test/testRooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx,1,['clear'],['cleared']
Usability,/// Verify that the given \p Subscript is 'well formed' (must be a simple add; /// recurrence).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:67,simpl,simple,67,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['simpl'],['simple']
Usability,"/// Visit each call, one at a time, and make simplifications without doing any; /// additional analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:45,simpl,simplifications,45,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['simpl'],['simplifications']
Usability,/// Visitor used to perform a simple type transformation that does not change; /// the semantics of the type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:30,simpl,simple,30,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['simpl'],['simple']
Usability,"/// Walk through \p MF and assign a register bank to every virtual register; /// that are still mapped to nothing.; /// The target needs to provide a RegisterBankInfo and in particular; /// override RegisterBankInfo::getInstrMapping.; ///; /// Simplified algo:; /// \code; /// RBI = MF.subtarget.getRegBankInfo(); /// MIRBuilder.setMF(MF); /// for each bb in MF; /// for each inst in bb; /// MIRBuilder.setInstr(inst); /// MappingCosts = RBI.getMapping(inst);; /// Idx = findIdxOfMinCost(MappingCosts); /// CurRegBank = MappingCosts[Idx].RegBank; /// MRI.setRegBank(inst.getOperand(0).getReg(), CurRegBank); /// for each argument in inst; /// if (CurRegBank != argument.RegBank); /// ArgReg = argument.getReg(); /// Tmp = MRI.createNewVirtual(MRI.getSize(ArgReg), CurRegBank); /// MIRBuilder.buildInstr(COPY, Tmp, ArgReg); /// inst.getOperand(argument.getOperandNo()).setReg(Tmp); /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:244,Simpl,Simplified,244,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,1,['Simpl'],['Simplified']
Usability,/// We are building deduction guides for a class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:30,guid,guides,30,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['guid'],['guides']
Usability,"/// We are substituting template parameters for (typically) other template; /// parameters in order to rewrite a declaration as a different declaration; /// (for example, when forming a deduction guide from a constructor).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:196,guid,guide,196,interpreter/llvm-project/clang/include/clang/Sema/Template.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h,1,['guid'],['guide']
Usability,"/// We are using one integer to represent the block we are branching to. Then at; /// each guard block, the predicate was calcuated using a simple `icmp eq`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:140,simpl,simple,140,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,1,['simpl'],['simple']
Usability,"/// We don't rely on operator== working on double values, as it returns true; /// for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values. The version with a double operand is retained; /// because it's so convenient to write isExactlyValue(2.0), but please use; /// it only for simple constants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:102,clear,clearly,102,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"/// We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.; /// We leave the version with the double argument here because it's just so; /// convenient to write ""2.0"" and the like. Without this function we'd; /// have to duplicate its logic everywhere it's called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:102,clear,clearly,102,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['clear'],['clearly']
Usability,"/// We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.; ///; /// We leave the version with the double argument here because it's just so; /// convenient to write ""2.0"" and the like. Without this function we'd; /// have to duplicate its logic everywhere it's called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:102,clear,clearly,102,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['clear'],['clearly']
Usability,"/// We have an expression of the form (A & C) | (B & D). Try to simplify this; /// to ""A' ? C : D"", where A' is a boolean or vector of booleans.; /// When InvertFalseVal is set to true, we try to match the pattern; /// where we have peeked through a 'not' op and A and B are the same:; /// (A & C) | ~(A | D) --> (A & C) | (~A & ~D) --> A' ? C : ~D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:64,simpl,simplify,64,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['simpl'],['simplify']
Usability,"/// We have mapping between value A and other value B where B was a field in; /// addressing mode represented by A. Also we have an original value C; /// representing an address we start with. Traversing from C through phi and; /// selects we ended up with A's in a map. This utility function tries to find; /// a value V which is a field in addressing mode C and traversing through phi; /// nodes and selects we will end up in corresponded values B in a map.; /// The utility will create a new Phi/Selects if needed.; // The simple example looks as follows:; // BB1:; // p1 = b1 + 40; // br cond BB2, BB3; // BB2:; // p2 = b2 + 40; // br BB3; // BB3:; // p = phi [p1, BB1], [p2, BB2]; // v = load p; // Map is; // p1 -> b1; // p2 -> b2; // Request is; // p -> ?; // The function tries to find or build phi [b1, BB1], [b2, BB2] in BB3.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:526,simpl,simple,526,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['simpl'],['simple']
Usability,"/// We know comparison with both branches of select can be simplified, but they; /// are not equal. This routine handles some logical simplifications.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:59,simpl,simplified,59,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['simpl'],"['simplifications', 'simplified']"
Usability,/// We need to check that all of the pointers in this list are disjoint; /// at runtime. Using std::unique_ptr to make using move ctor simpler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:135,simpl,simpler,135,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['simpl'],['simpler']
Usability,"/// We need to preserve static reachibility of all loop exit blocks (this is); /// required by loop pass manager. In order to do it, we make the following; /// trick:; ///; /// preheader:; /// <preheader code>; /// br label %loop_header; ///; /// loop_header:; /// ...; /// br i1 false, label %dead_exit, label %loop_block; /// ...; ///; /// We cannot simply remove edge from the loop to dead exit because in this; /// case dead_exit (and its successors) may become unreachable. To avoid that,; /// we insert the following fictive preheader:; ///; /// preheader:; /// <preheader code>; /// switch i32 0, label %preheader-split,; /// [i32 1, label %dead_exit_1],; /// [i32 2, label %dead_exit_2],; /// ...; /// [i32 N, label %dead_exit_N],; ///; /// preheader-split:; /// br label %loop_header; ///; /// loop_header:; /// ...; /// br i1 false, label %dead_exit_N, label %loop_block; /// ...; ///; /// Doing so, we preserve static reachibility of all dead exits and can later; /// remove edges from the loop to these blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp:352,simpl,simply,352,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp,1,['simpl'],['simply']
Usability,"/// We use a simple cost model for edit actions, which seems good enough.; /// Simple cost model for edit actions. This seems to make the matching; /// algorithm perform reasonably well.; /// The values range between 0 and 1, or infinity if this edit action should; /// always be avoided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/ASTDiff/ASTDiff.cpp:13,simpl,simple,13,interpreter/llvm-project/clang/lib/Tooling/ASTDiff/ASTDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/ASTDiff/ASTDiff.cpp,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"/// We've found that the (upward scanning) memory dependence of \p MemCpy is; /// \p MemSet. Try to simplify \p MemSet to only set the trailing bytes that; /// weren't copied over by \p MemCpy.; ///; /// In other words, transform:; /// \code; /// memset(dst, c, dst_size);; /// ...; /// memcpy(dst, src, src_size);; /// \endcode; /// into:; /// \code; /// ...; /// memset(dst + src_size, c, dst_size <= src_size ? 0 : dst_size - src_size);; /// memcpy(dst, src, src_size);; /// \endcode; ///; /// The memset is sunk to just before the memcpy to ensure that src_size is; /// present when emitting the simplified memset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:100,simpl,simplify,100,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,2,['simpl'],"['simplified', 'simplify']"
Usability,/// We've found that the (upward scanning) memory dependence of memcpy 'M' is; /// the memcpy 'MDep'. Try to simplify M to copy from MDep's input if we can.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:109,simpl,simplify,109,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['simpl'],['simplify']
Usability,"/// When adding a pass manager pass that has the same type as this pass; /// manager, simply move the passes over. This is because we don't have use; /// cases rely on executing nested pass managers. Doing this could reduce; /// implementation complexity and avoid potential invalidation issues that may; /// happen with nested pass managers of the same type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:86,simpl,simply,86,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['simpl'],['simply']
Usability,"/// When an instruction is simplified, add all users of the instruction to; /// the work lists because they might get more simplified now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,simpl,simplified,27,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['simpl'],['simplified']
Usability,"/// When an instruction is simplified, add all users of the instruction; /// to the work lists because they might get more simplified now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h:27,simpl,simplified,27,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/InstructionWorklist.h,2,['simpl'],['simplified']
Usability,"/// When dealing with dispatch schedules (e.g. dynamic, guided) we do not; /// consider the lower and upper bound expressions generated by the; /// worksharing loop support, but we use 0 and the iteration space size as; /// constants",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:56,guid,guided,56,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['guid'],['guided']
Usability,"/// When examining a basic block for complex deinterleaving, if it is a simple; /// one-block loop, then the only incoming block is 'Incoming' and the; /// 'BackEdge' block is the block itself.""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp:72,simpl,simple,72,interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ComplexDeinterleavingPass.cpp,1,['simpl'],['simple']
Usability,"/// When learning an eviction policy, extract score(reward) information,; /// otherwise this does nothing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:9,learn,learning,9,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,1,['learn'],['learning']
Usability,"/// When one formula uses a superset of the registers of another formula, it; /// won't help reduce register pressure (though it may not necessarily hurt; /// register pressure); remove it to simplify the system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:192,simpl,simplify,192,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['simpl'],['simplify']
Usability,"/// When the fitting function is linear (contains the `++` sign) or the fitting; /// function is a polynomial, a linear fitter is initialised.; /// To create a linear function, use the following syntax: linear parts; /// separated by `++` sign.; /// Example: to fit the parameters of the function `p0*x + p1*sin(x)`, you can create a; /// TF1 object as; ///; /// TF1 *f1 = new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; ///; /// For such a TF1 you don't have to set the initial conditions and the linear fitter is used.; /// Going via the linear fitter for functions, linear in parameters, gives a; /// considerable advantage in speed.; /// When using the linear fitting it is also possible to perform a robust fitting with the; /// Least Trimmed Square (LTS) regression algorithm, by using the fit option `ROB`.; /// See the tutorial `fitLinearRobust.C`.; ///; /// ### Notes on TGraph/TGraphErrors Fitting:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case, which takes several iterations; /// instead of 0 as in the linear case.; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate.; /// 3. The standard chi2 (least square) method without error in the coordinates (x) can; /// be forced by using option ""EX0""; /// 4. The linear fitter doesn't take into account the errors in x. When fitting a; /// TGraphErrors with a linear functions the errors in x will not be considered.; /// If errors in x are important, use option ""F"" for linear function fitting.; /// 5. When fitting a TGraph (i.e. no errors associated with each point),; /// a correction is applied to the errors on the parameters with the following; /// formula:; /// `parameter_error *= sqrt(chisquare/(ndf-1))`; ///; /// ### General Fitting documentation; ///; /// See in TH1::Fit for the documentation of; /// - [Fit Result](\ref HFitRes); /// - [Fit Status](\ref HFitStatus); /// - [Fit Statistics Box](\ref HFitStatB",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:5393,simpl,simple,5393,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['simpl'],['simple']
Usability,"/// When there isn't many bundles, we do a simple linear search.; /// Else fallback to a binary-search that use the fact that bundles usually; /// have similar number of argument to get faster convergence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:43,simpl,simple,43,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,1,['simpl'],['simple']
Usability,"/// When writing a subset of the index for distributed backends, client; /// provides a map of modules to the corresponding GUIDs/summaries to write.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:124,GUID,GUIDs,124,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['GUID'],['GUIDs']
Usability,"/// When zero, we're printing template args and '>' needs to be parenthesized.; /// Use a counter so we can simply increment inside parentheses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h:108,simpl,simply,108,interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Utility.h,1,['simpl'],['simply']
Usability,"/// Whether the node was created from the AST backed by the source code; /// rather than added later through mutation APIs or created with factory; /// functions.; /// When this flag is true, all subtrees are also original.; /// This flag is set to false on any modifications to the node or any of its; /// subtrees, even if this simply involves swapping existing subtrees.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h:330,simpl,simply,330,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h,1,['simpl'],['simply']
Usability,"/// Whether this variable is known to have constant initialization. This is; /// currently only computed in C++, for static / thread storage duration; /// variables that might have constant initialization and for variables that; /// are usable in constant expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:237,usab,usable,237,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['usab'],['usable']
Usability,"/// Whether we should try to optimize for size only.; /// Currently, this applies a dead simple heuristic: only consider globals; /// used in minsize functions for merging.; /// FIXME: This could learn about optsize, and be used in the cost model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalMerge.h:89,simpl,simple,89,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalMerge.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalMerge.h,2,"['learn', 'simpl']","['learn', 'simple']"
Usability,"/// While solving the dataflow for a function, we don't compute a result for; /// operations with an undef operand, to allow undef to be lowered to a; /// constant later. For example, constant folding of ""zext i8 undef to i16""; /// would result in ""i16 0"", and if undef is later lowered to ""i8 1"", then the; /// zext result would become ""i16 1"" and would result into an overdefined; /// lattice value once merged with the previous result. Not computing the; /// result of the zext (treating undef the same as unknown) allows us to handle; /// a later undef->constant lowering more optimally.; ///; /// However, if the operand remains undef when the solver returns, we do need; /// to assign some result to the instruction (otherwise we would treat it as; /// unreachable). For simplicity, we mark any instructions that are still; /// unknown as overdefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp:777,simpl,simplicity,777,interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,1,['simpl'],['simplicity']
Usability,"/// While we walk the loop instructions, we build up and maintain a mapping; /// of simplified values specific to this iteration. The idea is to propagate; /// any special information we have about loads that can be replaced with; /// constants after complete unrolling, and account for likely simplifications; /// post-unrolling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h:84,simpl,simplified,84,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopUnrollAnalyzer.h,2,['simpl'],"['simplifications', 'simplified']"
Usability,"/// While we walk the potentially-inlined instructions, we build up and; /// maintain a mapping of simplified values specific to this callsite. The; /// idea is to propagate any special information we have about arguments to; /// this call through the inlinable section of the function, and account for; /// likely simplifications post-inlining. The most important aspect we track; /// is CFG altering simplifications -- when we prove a basic block dead, that; /// can cause dramatic shifts in the cost of inlining a function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:99,simpl,simplified,99,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,3,['simpl'],"['simplifications', 'simplified']"
Usability,"/// Wipe the pad by clearing the list of primitives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RPadBase.hxx:20,clear,clearing,20,graf2d/gpadv7/inc/ROOT/RPadBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RPadBase.hxx,1,['clear'],['clearing']
Usability,/// Worklist of all of the nodes that need to be simplified.; ///; /// This must behave as a stack -- new nodes to process are pushed onto the; /// back and when processing we pop off of the back.; ///; /// The worklist will not contain duplicates but may contain null entries; /// due to nodes being deleted from the underlying DAG.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,simpl,simplified,49,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['simpl'],['simplified']
Usability,"/// Worklist of alloca instructions to simplify.; ///; /// Each alloca in the function is added to this. Each new alloca formed gets; /// added to it as well to recursively simplify unless that alloca can be; /// directly promoted. Finally, each time we rewrite a use of an alloca other; /// the one being actively rewritten, we add it back onto the list if not; /// already present to ensure it is re-visited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:39,simpl,simplify,39,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,['simpl'],['simplify']
Usability,"/// Wrapper for void* pointer.; /// \tparam PtrTy Either a pointer type like 'T*' or a type that behaves like; /// a pointer.; ///; /// This is a very simple POD type that wraps a pointer that the Parser; /// doesn't know about but that Sema or another client does. The PtrTy; /// template argument is used to make sure that ""Decl"" pointers are not; /// compatible with ""Type"" pointers for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h:151,simpl,simple,151,interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Ownership.h,1,['simpl'],['simple']
Usability,"/// Wrapper to unify ""old style"" CallGraph and ""new style"" LazyCallGraph. This; /// simplifies the interface and the call sites, e.g., new and old pass manager; /// passes can share the same code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h:84,simpl,simplifies,84,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CallGraphUpdater.h,1,['simpl'],['simplifies']
Usability,/// \brief A requires-expression requirement which queries the validity and; /// properties of an expression ('simple' and 'compound' requirements).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:111,simpl,simple,111,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,1,['simpl'],['simple']
Usability,"/// \brief A simple data-source implementation, for demo purposes.; ///; /// Constructing an RDataFrame as `RDataFrame(nEntries)` is a superior alternative.; /// If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source:; /// it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx:13,simpl,simple,13,tree/dataframe/inc/ROOT/RTrivialDS.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RTrivialDS.hxx,1,['simpl'],['simple']
Usability,"/// \brief Clears up the free store, when LifetimeHandler goes out of; /// scope.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/DynamicLookupLifetimeHandler.h:11,Clear,Clears,11,interpreter/cling/include/cling/Interpreter/DynamicLookupLifetimeHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/DynamicLookupLifetimeHandler.h,1,['Clear'],['Clears']
Usability,"/// \brief Construct a compound requirement whose expression was a; /// substitution failure. The requirement is not satisfied.; /// \param E the diagnostic emitted while instantiating the original; /// expression.; /// \param IsSimple whether this was a simple requirement in source.; /// \param NoexceptLoc the location of the noexcept keyword, if it was; /// specified, otherwise an empty location.; /// \param Req the requirement for the type of the checked expression (omit; /// if no requirement was specified).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:255,simpl,simple,255,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,1,['simpl'],['simple']
Usability,"/// \brief Construct a compound requirement.; /// \param E the expression which is checked by this requirement.; /// \param IsSimple whether this was a simple requirement in source.; /// \param NoexceptLoc the location of the noexcept keyword, if it was; /// specified, otherwise an empty location.; /// \param Req the requirement for the type of the checked expression.; /// \param Status the satisfaction status of this requirement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:152,simpl,simple,152,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,1,['simpl'],['simple']
Usability,"/// \brief Defines various target-specific GPU grid values that must be; /// consistent between host RTL (plugin), device RTL, and clang.; /// We can change grid values for a ""fat"" binary so that different; /// passes get the correct values when generating code for a; /// multi-target binary. Both amdgcn and nvptx values are stored in; /// this file. In the future, should there be differences between GPUs; /// of the same architecture, then simply make a different array and; /// use the new array name.; ///; /// Example usage in clang:; /// const unsigned slot_size =; /// ctx.GetTargetInfo().getGridValue().GV_Warp_Size;; ///; /// Example usage in libomptarget/deviceRTLs:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #ifdef __AMDGPU__; /// #define GRIDVAL AMDGPUGridValues; /// #else; /// #define GRIDVAL NVPTXGridValues; /// #endif; /// ... Then use this reference for GV_Warp_Size in the deviceRTL source.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget hsa plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL AMDGPUGridValues; /// ... Then use this reference to access GV_Warp_Size in the hsa plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///; /// Example usage in libomptarget cuda plugin:; /// #include ""llvm/Frontend/OpenMP/OMPGridValues.h""; /// #define GRIDVAL NVPTXGridValues; /// ... Then use this reference to access GV_Warp_Size in the cuda plugin.; /// llvm::omp::GRIDVAL().GV_Warp_Size; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h:445,simpl,simply,445,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPGridValues.h,1,['simpl'],['simply']
Usability,/// \brief Note that we are building deduction guides.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:47,guid,guides,47,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['guid'],['guides']
Usability,"/// \brief Parses a level, that is ???.; /// \param OpeningBrace Opening brace (\p nullptr if absent) of that level.; /// \param IfKind The \p if statement kind in the level.; /// \param IfLeftBrace The left brace of the \p if block in the level.; /// \returns true if a simple block of if/else/for/while, or false otherwise.; /// (A simple block has a single statement.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:271,simpl,simple,271,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,2,['simpl'],['simple']
Usability,"/// \brief Return a descriptor for the systematic variations registered in this branch of the computation graph.; ///; /// This is not an action nor a transformation, just a simple utility to; /// inspect the systematic variations that have been registered with Vary() up to this node.; /// When called on the root node, it returns an empty descriptor.; ///; /// ### Example usage:; /// ~~~{.cpp}; /// auto variations = d.GetVariations();; /// variations.Print();; /// ~~~; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RInterfaceBase.cxx:174,simpl,simple,174,tree/dataframe/src/RInterfaceBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RInterfaceBase.cxx,1,['simpl'],['simple']
Usability,"/// \brief Returns the names of the defined columns.; /// \return the container of the defined column names.; ///; /// This is not an action nor a transformation, just a simple utility to; /// get the columns names that have been defined up to the node.; /// If no column has been defined, e.g. on a root node, it returns an; /// empty collection.; ///; /// ### Example usage:; /// ~~~{.cpp}; /// auto defColNames = d.GetDefinedColumnNames();; /// // Print defined columns' names; /// for (auto &&defColName : defColNames) std::cout << defColName << std::endl;; /// ~~~; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RInterfaceBase.cxx:170,simpl,simple,170,tree/dataframe/src/RInterfaceBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RInterfaceBase.cxx,1,['simpl'],['simple']
Usability,"/// \c Inst uses or touches memory. Return an ID describing the memory state; /// at \c Inst such that if getMemoryUseOrder(I1) == getMemoryUseOrder(I2),; /// the exact same memory operations happen after I1 and I2.; ///; /// This is a very hard problem in general, so we use domain-specific; /// knowledge that we only ever check for equivalence between blocks sharing a; /// single immediate successor that is common, and when determining if I1 ==; /// I2 we will have already determined that next(I1) == next(I2). This; /// inductive property allows us to simply return the value number of the next; /// instruction that defines memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp:559,simpl,simply,559,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVNSink.cpp,1,['simpl'],['simply']
Usability,/// \class NodeBuilder; /// This is the simplest builder which generates nodes in the; /// ExplodedGraph.; ///; /// The main benefit of the builder is that it automatically tracks the; /// frontier nodes (or destination set). This is the set of nodes which should; /// be propagated to the next step / builder. They are the nodes which have been; /// added to the builder (either as the input node set or as the newly; /// constructed nodes) but did not have any outgoing transitions added.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h:40,simpl,simplest,40,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h,1,['simpl'],['simplest']
Usability,"/// \cond ROOFIT_INTERNAL; /*; * Project: RooFit; * Authors:; * Jonas Rembser, CERN 2021; * Emmanouil Michalainas, CERN 2021; *; * Copyright (c) 2021, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /**; \file RooNLLVarNew.cxx; \class RooNLLVarNew; \ingroup Roofitcore. This is a simple class designed to produce the nll values needed by the fitter.; This class calls functions from `RooBatchCompute` library to provide faster; computation times.; **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVarNew.cxx:434,simpl,simple,434,roofit/roofitcore/src/RooNLLVarNew.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVarNew.cxx,1,['simpl'],['simple']
Usability,"/// \endcond; /// Clear all defined category states.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:18,Clear,Clear,18,roofit/roofitcore/inc/RooCategory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h,1,['Clear'],['Clear']
Usability,"/// \f$CL_{s}\f$ is simply \f$CL_{s+b}/CL_{b}\f$ (not a method, but a quantity)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h:20,simpl,simply,20,roofit/roostats/inc/RooStats/HypoTestResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestResult.h,1,['simpl'],['simply']
Usability,"/// \file RAxis.cxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-08-06; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/src/RAxis.cxx:217,Feedback,Feedback,217,hist/histv7/src/RAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/src/RAxis.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RCluster.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2020-03-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RCluster.cxx:229,Feedback,Feedback,229,tree/ntuple/v7/src/RCluster.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RCluster.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RClusterPool.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2020-03-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RClusterPool.cxx:233,Feedback,Feedback,233,tree/ntuple/v7/src/RClusterPool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RClusterPool.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RColumn.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumn.cxx:228,Feedback,Feedback,228,tree/ntuple/v7/src/RColumn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumn.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RColumnElement.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-08-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.cxx:235,Feedback,Feedback,235,tree/ntuple/v7/src/RColumnElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RDaos.cxx; /// \ingroup NTuple ROOT7; /// \author Javier Lopez-Gomez <j.lopez@cern.ch>; /// \date 2020-11-14; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RDaos.cxx:232,Feedback,Feedback,232,tree/ntuple/v7/src/RDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RDaos.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RDirectory.cxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2020-12-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/src/RDirectory.cxx:226,Feedback,Feedback,226,core/base/v7/src/RDirectory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/src/RDirectory.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RError.cxx; /// \ingroup Base ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-12-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/src/RError.cxx:225,Feedback,Feedback,225,core/foundation/v7/src/RError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/src/RError.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RField.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-15; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx:227,Feedback,Feedback,227,tree/ntuple/v7/src/RField.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RFieldVisitor.cxx; /// \ingroup NTuple ROOT7; /// \author Simon Leisibach <simon.leisibach@gmail.com>; /// \date 2019-06-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RFieldVisitor.cxx:247,Feedback,Feedback,247,tree/ntuple/v7/src/RFieldVisitor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RFieldVisitor.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RHistDisplayItem.cxx; /// \ingroup HistDrawV7; /// \author Sergey Linev <s.linev@gsi.de>; /// \date 2020-06-25; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/src/RHistDisplayItem.cxx:234,Feedback,Feedback,234,hist/histdrawv7/src/RHistDisplayItem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/src/RHistDisplayItem.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RHistDraw7Provider.cxx; /// \ingroup rbrowser; /// \author Bertrand Bellenot <bertrand.bellenot@cern.ch>; /// \author Sergey Linev <S.Linev@gsi.de>; /// \date 2019-10-17; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RHistDraw7Provider.cxx:293,Feedback,Feedback,293,gui/browsable/src/RHistDraw7Provider.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/src/RHistDraw7Provider.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RHistDrawable.cxx; /// \ingroup HistDrawV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-09-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/src/RHistDrawable.cxx:229,Feedback,Feedback,229,hist/histdrawv7/src/RHistDrawable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/src/RHistDrawable.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RLogger.cxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-07; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RLogger.cxx:223,Feedback,Feedback,223,core/foundation/src/RLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RLogger.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RMiniFile.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-12-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx:230,Feedback,Feedback,230,tree/ntuple/v7/src/RMiniFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTuple.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2023-09-19; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTuple.cxx:228,Feedback,Feedback,228,tree/ntuple/v7/src/RNTuple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTuple.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleDS.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \author Enrico Guiraud <enrico.guiraud@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx:283,Feedback,Feedback,283,tree/dataframe/src/RNTupleDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleDS.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \author Enrico Guiraud <enrico.guiraud@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RNTupleDS.hxx:283,Feedback,Feedback,283,tree/dataframe/inc/ROOT/RNTupleDS.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RNTupleDS.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleDescriptor.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \author Javier Lopez-Gomez <javier.lopez.gomez@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptor.cxx:299,Feedback,Feedback,299,tree/ntuple/v7/src/RNTupleDescriptor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptor.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleDescriptorFmt.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-08-25; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptorFmt.cxx:241,Feedback,Feedback,241,tree/ntuple/v7/src/RNTupleDescriptorFmt.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleDescriptorFmt.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleFillContext.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleFillContext.cxx:239,Feedback,Feedback,239,tree/ntuple/v7/src/RNTupleFillContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleFillContext.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleImporter.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2022-11-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2022, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/src/RNTupleImporter.cxx:236,Feedback,Feedback,236,tree/ntupleutil/v7/src/RNTupleImporter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/src/RNTupleImporter.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleIndex.cxx; /// \ingroup NTuple ROOT7; /// \author Florine de Geus <florine.de.geus@cern.ch>; /// \date 2024-04-02; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleIndex.cxx:244,Feedback,Feedback,244,tree/ntuple/v7/src/RNTupleIndex.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleIndex.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleInspector.cxx; /// \ingroup NTuple ROOT7; /// \author Florine de Geus <florine.willemijn.de.geus@cern.ch>; /// \date 2023-01-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/src/RNTupleInspector.cxx:258,Feedback,Feedback,258,tree/ntupleutil/v7/src/RNTupleInspector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/src/RNTupleInspector.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleMerger.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>, Max Orok <maxwellorok@gmail.com>, Alaettin Serhan Mete <amete@anl.gov>,; /// Giacomo Parolini <giacomo.parolini@cern.ch>; /// \date 2020-07-08; /// \warning This is part of the ROOT 7 prototype! It will; /// change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleMerger.cxx:361,Feedback,Feedback,361,tree/ntuple/v7/src/RNTupleMerger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleMerger.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleMetrics.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-08-27; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleMetrics.cxx:235,Feedback,Feedback,235,tree/ntuple/v7/src/RNTupleMetrics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleMetrics.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleModel.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-15; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleModel.cxx:233,Feedback,Feedback,233,tree/ntuple/v7/src/RNTupleModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleModel.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleParallelWriter.cxx; /// \ingroup NTuple ROOT7; /// \author Jonas Hahnfeld <jonas.hahnfeld@cern.ch>; /// \date 2024-02-01; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleParallelWriter.cxx:251,Feedback,Feedback,251,tree/ntuple/v7/src/RNTupleParallelWriter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleParallelWriter.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleProcessor.cxx; /// \ingroup NTuple ROOT7; /// \author Florine de Geus <florine.de.geus@cern.ch>; /// \date 2024-03-26; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleProcessor.cxx:248,Feedback,Feedback,248,tree/ntuple/v7/src/RNTupleProcessor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleProcessor.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleReader.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-20; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleReader.cxx:234,Feedback,Feedback,234,tree/ntuple/v7/src/RNTupleReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleReader.cxx,2,['Feedback'],['Feedback']
Usability,"/// \file RNTupleSerialize.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \author Javier Lopez-Gomez <javier.lopez.gomez@cern.ch>; /// \date 2021-08-02; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleSerialize.cxx:298,Feedback,Feedback,298,tree/ntuple/v7/src/RNTupleSerialize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleSerialize.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleUtil.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch> & Max Orok <maxwellorok@gmail.com>; /// \date 2020-07-14; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleUtil.cxx:267,Feedback,Feedback,267,tree/ntuple/v7/src/RNTupleUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleUtil.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleView.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-10-28; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleView.cxx:232,Feedback,Feedback,232,tree/ntuple/v7/src/RNTupleView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleView.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RNTupleWriteOptions.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleWriteOptions.cxx:240,Feedback,Feedback,240,tree/ntuple/v7/src/RNTupleWriteOptions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleWriteOptions.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RAxis.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-03-23; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx:222,Feedback,Feedback,222,hist/histv7/inc/ROOT/RAxis.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RAxisConfig.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2020-02-05; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxisConfig.hxx:228,Feedback,Feedback,228,hist/histv7/inc/ROOT/RAxisConfig.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxisConfig.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RCluster.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2020-03-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RCluster.hxx:234,Feedback,Feedback,234,tree/ntuple/v7/inc/ROOT/RCluster.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RCluster.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RClusterPool.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2020-03-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RClusterPool.hxx:238,Feedback,Feedback,238,tree/ntuple/v7/inc/ROOT/RClusterPool.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RClusterPool.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RColumn.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RColumn.hxx:233,Feedback,Feedback,233,tree/ntuple/v7/inc/ROOT/RColumn.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RColumn.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RColumnElementBase.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RColumnElementBase.hxx:244,Feedback,Feedback,244,tree/ntuple/v7/inc/ROOT/RColumnElementBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RColumnElementBase.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RDaos.hxx; /// \ingroup NTuple ROOT7; /// \author Javier Lopez-Gomez <j.lopez@cern.ch>; /// \date 2020-11-14; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx:237,Feedback,Feedback,237,tree/ntuple/v7/inc/ROOT/RDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RDaos.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RDirectory.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-31; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx:231,Feedback,Feedback,231,core/base/v7/inc/ROOT/RDirectory.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectory.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RDirectoryEntry.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-31; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectoryEntry.hxx:236,Feedback,Feedback,236,core/base/v7/inc/ROOT/RDirectoryEntry.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RDirectoryEntry.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/REntry.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-07-19; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/REntry.hxx:232,Feedback,Feedback,232,tree/ntuple/v7/inc/ROOT/REntry.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/REntry.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RError.hxx; /// \ingroup Base ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-12-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx:230,Feedback,Feedback,230,core/foundation/v7/inc/ROOT/RError.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/inc/ROOT/RError.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RField.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField.hxx:232,Feedback,Feedback,232,tree/ntuple/v7/inc/ROOT/RField.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RField/Fundamental.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldFundamental.hxx:244,Feedback,Feedback,244,tree/ntuple/v7/inc/ROOT/RField/RFieldFundamental.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldFundamental.hxx,2,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RField/ProxiedCollection.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx:250,Feedback,Feedback,250,tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RField/STLMisc.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldSTLMisc.hxx:240,Feedback,Feedback,240,tree/ntuple/v7/inc/ROOT/RField/RFieldSTLMisc.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldSTLMisc.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RField/SequenceContainer.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldSequenceContainer.hxx:250,Feedback,Feedback,250,tree/ntuple/v7/inc/ROOT/RField/RFieldSequenceContainer.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldSequenceContainer.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RFieldBase.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:236,Feedback,Feedback,236,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RFieldVisitor.hxx; /// \ingroup NTuple ROOT7; /// \author Simon Leisibach <simon.satoshi.rene.leisibach@cern.ch>; /// \date 2019-06-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx:263,Feedback,Feedback,263,tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RFile.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-31; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2016, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx:226,Feedback,Feedback,226,io/io/v7/inc/ROOT/RFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/inc/ROOT/RFile.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RFit.hxx; /// \ingroup MathCore ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-09-06; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/v7/inc/ROOT/RFit.hxx:229,Feedback,Feedback,229,math/mathcore/v7/inc/ROOT/RFit.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/v7/inc/ROOT/RFit.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHist.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-03-23; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHist.hxx:222,Feedback,Feedback,222,hist/histv7/inc/ROOT/RHist.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHist.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistBinIter.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-08-07; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistBinIter.hxx:229,Feedback,Feedback,229,hist/histv7/inc/ROOT/RHistBinIter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistBinIter.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistBufferedFill.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-03; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistBufferedFill.hxx:234,Feedback,Feedback,234,hist/histv7/inc/ROOT/RHistBufferedFill.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistBufferedFill.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistConcurrentFill.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-03; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistConcurrentFill.hxx:236,Feedback,Feedback,236,hist/histv7/inc/ROOT/RHistConcurrentFill.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistConcurrentFill.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistData.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-06-14; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:226,Feedback,Feedback,226,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistDisplayItem.hxx; /// \ingroup HistDrawV7; /// \author Sergey Linev <s.linev@gsi.de>; /// \date 2020-06-25; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/inc/ROOT/RHistDisplayItem.hxx:239,Feedback,Feedback,239,hist/histdrawv7/inc/ROOT/RHistDisplayItem.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/inc/ROOT/RHistDisplayItem.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistDrawable.hxx; /// \ingroup HistDrawV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/inc/ROOT/RHistDrawable.hxx:234,Feedback,Feedback,234,hist/histdrawv7/inc/ROOT/RHistDrawable.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/inc/ROOT/RHistDrawable.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistImpl.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-03-23; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx:226,Feedback,Feedback,226,hist/histv7/inc/ROOT/RHistImpl.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistImpl.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistUtils.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2016-06-01; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2016, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistUtils.hxx:227,Feedback,Feedback,227,hist/histv7/inc/ROOT/RHistUtils.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistUtils.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RHistView.hxx; /// \ingroup HistV7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-08-06; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistView.hxx:226,Feedback,Feedback,226,hist/histv7/inc/ROOT/RHistView.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistView.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RIndexIter.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2016-01-19; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2016, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RIndexIter.hxx:231,Feedback,Feedback,231,core/base/v7/inc/ROOT/RIndexIter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/v7/inc/ROOT/RIndexIter.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RLogger.hxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-03-29; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx:228,Feedback,Feedback,228,core/foundation/inc/ROOT/RLogger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RLogger.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RMiniFile.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-12-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx:235,Feedback,Feedback,235,tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RMiniFile.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTuple.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2023-09-19; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTuple.hxx:233,Feedback,Feedback,233,tree/ntuple/v7/inc/ROOT/RNTuple.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTuple.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleDescriptor.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \author Javier Lopez-Gomez <javier.lopez.gomez@cern.ch>; /// \date 2018-07-19; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:304,Feedback,Feedback,304,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleFillContext.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx:244,Feedback,Feedback,244,tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillContext.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleFillStatus.hxx; /// \ingroup NTuple ROOT7; /// \author Jonas Hahnfeld <jonas.hahnfeld@cern.ch>; /// \date 2024-04-15; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillStatus.hxx:252,Feedback,Feedback,252,tree/ntuple/v7/inc/ROOT/RNTupleFillStatus.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleFillStatus.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleImporter.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2022-11-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2022, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx:241,Feedback,Feedback,241,tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleImtTaskScheduler.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-19; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleImtTaskScheduler.hxx:249,Feedback,Feedback,249,tree/ntuple/v7/inc/ROOT/RNTupleImtTaskScheduler.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleImtTaskScheduler.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleIndex.hxx; /// \ingroup NTuple ROOT7; /// \author Florine de Geus <florine.de.geus@cern.ch>; /// \date 2024-04-02; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx:249,Feedback,Feedback,249,tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleIndex.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleInspector.hxx; /// \ingroup NTuple ROOT7; /// \author Florine de Geus <florine.de.geus@cern.ch>; /// \date 2023-01-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx:253,Feedback,Feedback,253,tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/inc/ROOT/RNTupleInspector.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleMerger.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>, Max Orok <maxwellorok@gmail.com>, Alaettin Serhan Mete <amete@anl.gov>; /// \date 2020-07-08; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleMerger.hxx:311,Feedback,Feedback,311,tree/ntuple/v7/inc/ROOT/RNTupleMerger.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleMerger.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleMetrics.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-08-27; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleMetrics.hxx:240,Feedback,Feedback,240,tree/ntuple/v7/inc/ROOT/RNTupleMetrics.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleMetrics.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleModel.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx:238,Feedback,Feedback,238,tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleModel.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleParallelWriter.hxx; /// \ingroup NTuple ROOT7; /// \author Jonas Hahnfeld <jonas.hahnfeld@cern.ch>; /// \date 2024-02-01; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleParallelWriter.hxx:256,Feedback,Feedback,256,tree/ntuple/v7/inc/ROOT/RNTupleParallelWriter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleParallelWriter.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleProcessor.hxx; /// \ingroup NTuple ROOT7; /// \author Florine de Geus <florine.de.geus@cern.ch>; /// \date 2024-03-26; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx:253,Feedback,Feedback,253,tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleProcessor.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleReadOptions.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReadOptions.hxx:244,Feedback,Feedback,244,tree/ntuple/v7/inc/ROOT/RNTupleReadOptions.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReadOptions.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleReader.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-20; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx:239,Feedback,Feedback,239,tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleSerialize.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \author Javier Lopez-Gomez <javier.lopez.gomez@cern.ch>; /// \date 2021-08-02; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx:303,Feedback,Feedback,303,tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleSerialize.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleUtil.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:237,Feedback,Feedback,237,tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleView.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-05; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleView.hxx:237,Feedback,Feedback,237,tree/ntuple/v7/inc/ROOT/RNTupleView.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleView.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleWriteOptions.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx:245,Feedback,Feedback,245,tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptions.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleWriteOptionsDaos.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptionsDaos.hxx:249,Feedback,Feedback,249,tree/ntuple/v7/inc/ROOT/RNTupleWriteOptionsDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriteOptionsDaos.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleWriter.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2024-02-20; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx:239,Feedback,Feedback,239,tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleWriter.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RNTupleZip.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-11-21; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleZip.hxx:236,Feedback,Feedback,236,tree/ntuple/v7/inc/ROOT/RNTupleZip.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleZip.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPage.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPage.hxx:231,Feedback,Feedback,231,tree/ntuple/v7/inc/ROOT/RPage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPage.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPageAllocator.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-06-25; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageAllocator.hxx:240,Feedback,Feedback,240,tree/ntuple/v7/inc/ROOT/RPageAllocator.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageAllocator.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPageNullSink.hxx; /// \ingroup NTuple ROOT7; /// \author Jonas Hahnfeld <jonas.hahnfeld@cern.ch>; /// \date 2024-01-31; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2024, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageNullSink.hxx:248,Feedback,Feedback,248,tree/ntuple/v7/inc/ROOT/RPageNullSink.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageNullSink.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPagePool.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPagePool.hxx:235,Feedback,Feedback,235,tree/ntuple/v7/inc/ROOT/RPagePool.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPagePool.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPageSinkBuf.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \author Max Orok <maxwellorok@gmail.com>; /// \author Javier Lopez-Gomez <javier.lopez.gomez@cern.ch>; /// \date 2021-03-17; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageSinkBuf.hxx:345,Feedback,Feedback,345,tree/ntuple/v7/inc/ROOT/RPageSinkBuf.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageSinkBuf.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPageSourceFriends.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2020-08-10; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageSourceFriends.hxx:244,Feedback,Feedback,244,tree/ntuple/v7/inc/ROOT/RPageSourceFriends.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageSourceFriends.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPageStorage.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-07-19; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:238,Feedback,Feedback,238,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPageStorageDaos.hxx; /// \ingroup NTuple ROOT7; /// \author Javier Lopez-Gomez <j.lopez@cern.ch>; /// \date 2020-11-03; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx:248,Feedback,Feedback,248,tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file ROOT/RPageStorageFile.hxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-11-21; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorageFile.hxx:242,Feedback,Feedback,242,tree/ntuple/v7/inc/ROOT/RPageStorageFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorageFile.hxx,1,['Feedback'],['Feedback']
Usability,"/// \file RPage.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPage.cxx:226,Feedback,Feedback,226,tree/ntuple/v7/src/RPage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPage.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RPageAllocator.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-06-25; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageAllocator.cxx:235,Feedback,Feedback,235,tree/ntuple/v7/src/RPageAllocator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageAllocator.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RPagePool.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPagePool.cxx:230,Feedback,Feedback,230,tree/ntuple/v7/src/RPagePool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPagePool.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RPageSinkBuf.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \author Max Orok <maxwellorok@gmail.com>; /// \author Javier Lopez-Gomez <javier.lopez.gomez@cern.ch>; /// \date 2021-03-17; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageSinkBuf.cxx:340,Feedback,Feedback,340,tree/ntuple/v7/src/RPageSinkBuf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageSinkBuf.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RPageSourceFriends.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-08-10; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageSourceFriends.cxx:239,Feedback,Feedback,239,tree/ntuple/v7/src/RPageSourceFriends.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageSourceFriends.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RPageStorage.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2018-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorage.cxx:233,Feedback,Feedback,233,tree/ntuple/v7/src/RPageStorage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorage.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RPageStorageDaos.cxx; /// \ingroup NTuple ROOT7; /// \author Javier Lopez-Gomez <j.lopez@cern.ch>; /// \date 2020-11-03; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx:243,Feedback,Feedback,243,tree/ntuple/v7/src/RPageStorageDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file RPageStorageFile.cxx; /// \ingroup NTuple ROOT7; /// \author Jakob Blomer <jblomer@cern.ch>; /// \date 2019-11-25; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageFile.cxx:237,Feedback,Feedback,237,tree/ntuple/v7/src/RPageStorageFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageFile.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file gui_handler.cxx; // Author: Sergey Linev <S.Linev@gsi.de>; // Date: 2017-06-29; // Warning: This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/gui_handler.cxx:201,Feedback,Feedback,201,gui/cefdisplay/src/gui_handler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/gui_handler.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file histspeedtest.cxx; ///; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Axel Naumann <axel@cern.ch>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/speed/histspeedtest.cxx:146,Feedback,Feedback,146,hist/histv7/speed/histspeedtest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/speed/histspeedtest.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file libdaos_mock.cxx; /// \ingroup NTuple ROOT7; /// \author Javier Lopez-Gomez <j.lopez@cern.ch>; /// \date 2021-01-20; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx:239,Feedback,Feedback,239,tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/libdaos_mock/libdaos_mock.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file v7/src/RFile.cxx; /// \ingroup Base ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-07-31; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2016, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/src/RFile.cxx:228,Feedback,Feedback,228,io/io/v7/src/RFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/v7/src/RFile.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_legacy; ///; /// Selector to fill a simple ntuple; ///; /// \macro_code; ///; /// \author Gerardo Ganis (gerardo.ganis@cern.ch)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/ProofNtuple.h:69,simpl,simple,69,tutorials/proof/ProofNtuple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/ProofNtuple.h,1,['simpl'],['simple']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// Macro illustrating how to superimpose two histograms; /// with different scales on the RCanvas. It shows exactly same data; /// as in hist/twoscales.C macro, but with fully interactive graphics; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2021-07-05; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/th1_twoscales.cxx:438,Feedback,Feedback,438,tutorials/rcanvas/th1_twoscales.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/th1_twoscales.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and; /// and divide it in 9 sub-pads.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2015-03-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Axel Naumann <axel@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rpad.cxx:355,Feedback,Feedback,355,tutorials/rcanvas/rpad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rpad.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and; /// draw ROOT 7 boxes in it (RBox). It generates a set of boxes using the; /// ""normal"" coordinates' system.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2018-10-10; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Olivier Couet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rbox.cxx:431,Feedback,Feedback,431,tutorials/rcanvas/rbox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rbox.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and; /// draw ROOT 7 lines in it (RLine). It generates a set of lines using the; /// ""normal"" coordinates' system and changing the line color linearly from black; /// to red.; ///; /// \macro_code; ///; /// \date 2018-03-18; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \authors Olivier Couet, Iliana Betsou",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rline.cxx:461,Feedback,Feedback,461,tutorials/rcanvas/rline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rline.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas),; /// divide on sub-sub pads and draw histograms there; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2018-03-13; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/subpads.cxx:372,Feedback,Feedback,372,tutorials/rcanvas/subpads.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/subpads.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example demonstrates how to customize RLine object using RStyle; /// ""normal"" coordinates' system.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2019-10-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Iliana Betsou",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rstyle.cxx:355,Feedback,Feedback,355,tutorials/rcanvas/rstyle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rstyle.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example shows how to create a frame.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2020-02-20; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rframe.cxx:293,Feedback,Feedback,293,tutorials/rcanvas/rframe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rframe.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example shows how to use symlog scale on RAxis; /// See discussion on forum https://root-forum.cern.ch/t/symlog-scale-for-plotting/ for more details; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2021-05-26; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/symlog.cxx:405,Feedback,Feedback,405,tutorials/rcanvas/symlog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/symlog.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example shows the various line styles.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2018-03-18; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Iliana Betsou",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rline_style.cxx:295,Feedback,Feedback,295,tutorials/rcanvas/rline_style.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rline_style.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example shows the various line widths.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2018-03-18; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \authors Iliana Betsou, Sergey Linev",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rline_width.cxx:295,Feedback,Feedback,295,tutorials/rcanvas/rline_width.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rline_width.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT 7 example shows the various marker styles.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2018-03-18; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Iliana Betsou",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rmarker.cxx:297,Feedback,Feedback,297,tutorials/rcanvas/rmarker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rmarker.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This ROOT7 example demonstrates how to create a RCanvas and; /// draw several RAxis objects with different options.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2020-11-03; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <S.Linev@gsi.de>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/raxis.cxx:360,Feedback,Feedback,360,tutorials/rcanvas/raxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/raxis.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro demonstrate the text align attribute for RText.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2021-07-07; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rtext_align.cxx:303,Feedback,Feedback,303,tutorials/rcanvas/rtext_align.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rtext_align.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro demonstrate the text attributes for RText. Angle, size and color are; /// changed in a loop. The text alignment and the text font are fixed.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2017-10-17; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Olivier Couet <Olivier.Couet@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rtext_angle.cxx:396,Feedback,Feedback,396,tutorials/rcanvas/rtext_angle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rtext_angle.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro demonstrate usage of ROOT7 graphics from many threads; /// Three different canvases in three different threads are started and regularly updated.; /// Extra thread created in background and used to run http protocol, in/out websocket communications and process http; /// requests; /// Main application thread (CLING interactive session) remains fully functional; ///; /// \macro_code; ///; /// \date 2018-08-16; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rcanvas_mt.cxx:586,Feedback,Feedback,586,tutorials/rcanvas/rcanvas_mt.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rcanvas_mt.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro demonstrate usage of existing ROOT fonts for RText.; /// Also load of custom font is shown; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2021-07-07; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rtext_font.cxx:346,Feedback,Feedback,346,tutorials/rcanvas/rtext_font.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rtext_font.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro draw different variants of RPave on the RCanvas.; /// Also usage of custom font is demonstrated.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2020-06-18; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rpave.cxx:352,Feedback,Feedback,352,tutorials/rcanvas/rpave.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rpave.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro generates RH2D and draw it with different options in RCanvas; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2020-06-25; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2.cxx:316,Feedback,Feedback,316,tutorials/rcanvas/rh2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro generates a small RH3D, fills it with random values and; /// draw it in RCanvas, using configured web browser; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2020-06-18; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh3.cxx:365,Feedback,Feedback,365,tutorials/rcanvas/rh3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh3.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro generates a small V7 TH2D, fills it with random values and; /// draw it in a V7 canvas, using configured web browser; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2020-03-04; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_colz.cxx:372,Feedback,Feedback,372,tutorials/rcanvas/rh2_colz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_colz.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro generates really large RH1D histogram, fills it with predefined pattern and; /// draw it in a RCanvas, using Optmize() drawing mode; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2020-07-02; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_large.cxx:387,Feedback,Feedback,387,tutorials/rcanvas/rh1_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_large.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro generates really large RH2D histogram, fills it with predefined pattern and; /// draw it in a RCanvas, using Optmize() drawing mode; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2020-06-26; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_large.cxx:387,Feedback,Feedback,387,tutorials/rcanvas/rh2_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_large.cxx,2,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro generates two RH1D, fills them and draw in RCanvas.; /// Second histogram uses enables ""secondy"" attribute to draw separate Y axis on right side; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2021-05-17; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_twoscales.cxx:400,Feedback,Feedback,400,tutorials/rcanvas/rh1_twoscales.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_twoscales.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro generates two RH1D, fills them and draw with different options in RCanvas.; /// The canvas is display in the web browser; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2015-03-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \authors Axel Naumann <axel@cern.ch>, Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1.cxx:376,Feedback,Feedback,376,tutorials/rcanvas/rh1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro generates two TH1D objects and build RLegend; /// In addition use of auto colors are shown; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2019-10-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rlegend.cxx:346,Feedback,Feedback,346,tutorials/rcanvas/rlegend.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rlegend.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro shows how ROOT RCanvas::Update method is working.; /// One can do sync and/or async depending how important is that graphics is updated before next action will be performed; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2021-07-05; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rcanvas_update.cxx:428,Feedback,Feedback,428,tutorials/rcanvas/rcanvas_update.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rcanvas_update.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_rcanvas; ///; /// This macro shows how ROOT objects like TH1, TH2, TGraph can be drawn in RCanvas.; ///; /// \macro_image (rcanvas_js); /// \macro_code; ///; /// \date 2017-06-02; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \authors Axel Naumann <axel@cern.ch>, Sergey Linev <s.linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/tobject.cxx:325,Feedback,Feedback,325,tutorials/rcanvas/tobject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/tobject.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_v7; ///; /// \macro_code; ///; /// \date 2015-03-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Axel Naumann <axel@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/fitpanel.cxx:198,Feedback,Feedback,198,tutorials/v7/fitpanel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/fitpanel.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_v7; ///; /// \macro_code; ///; /// \date 2015-03-22; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Axel Naumann <axel@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/simple.cxx:198,Feedback,Feedback,198,tutorials/v7/simple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/simple.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_v7; ///; /// \macro_code; ///; /// \date 2015-07-08; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Axel Naumann <axel@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/perf.cxx:198,Feedback,Feedback,198,tutorials/v7/perf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/perf.cxx,2,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_v7; ///; /// \macro_code; ///; /// \date 2015-07-09; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Axel Naumann <axel@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/concurrentfill.cxx:198,Feedback,Feedback,198,tutorials/v7/concurrentfill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/concurrentfill.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_v7; ///; /// \macro_code; ///; /// \date 2015-08-08; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /// \author Axel Naumann <axel@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/histops.cxx:198,Feedback,Feedback,198,tutorials/v7/histops.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/histops.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_v7; ///; /// \macro_code; ///; /// \date 2019-04-11; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \authors Sergey Linev <S.Linev@gsi.de>, Iliana Betsou <Iliana.Betsou@cern.ch>; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/fitpanel6.cxx:198,Feedback,Feedback,198,tutorials/v7/fitpanel6.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/fitpanel6.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_v7; ///; /// \macro_code; ///; /// \date 2019-05-29; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \authors Bertrand Bellenot <Bertrand.Bellenot@cern.ch>, Sergey Linev <S.Linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; // macro must be here to let macro work on Windows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/browser.cxx:198,Feedback,Feedback,198,tutorials/v7/browser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/browser.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_v7; ///; /// \macro_code; ///; /// \date 2019-11-01; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome!; /// \author Sergey Linev <S.Linev@gsi.de>; /*************************************************************************; * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; // Show how RFileDialog can be used in sync and async modes; // Normally file dialogs will be used inside other widgets as ui5 dialogs; // By default, dialog starts in async mode - means macro immediately returns to command line; // To start OpenFile dialog in sync mode, call `root ""filedialog.cxx(1)"" -q`.; // Once file is selected, root execution will be stopped; // macro must be here to let macro work on Windows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/filedialog.cxx:198,Feedback,Feedback,198,tutorials/v7/filedialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/v7/filedialog.cxx,1,['Feedback'],['Feedback']
Usability,"/// \file; /// \ingroup tutorial_webcanv; /// User class with custom JavaScript painter in the web canvas.; ///; /// Custom class is just triangle which drawn on the frame with NDC coordinates; /// `triangle.mjs` provides JavaScript code for object painting and interactivity; /// It is also possible to use such ""simple"" class without loading of custom JS code,; /// but then it requires appropriate Paint() method and will miss interactivity in browser; ///; /// This macro must be executed with ACLiC like 'root --web triangle.cxx+'; ///; /// \macro_image (tcanvas_jsp); /// \macro_code; ///; /// \author Sergey Linev",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/triangle.cxx:314,simpl,simple,314,tutorials/webcanv/triangle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/triangle.cxx,1,['simpl'],['simple']
Usability,"/// \file; /// \ingroup tutorial_webgui; /// \ingroup webwidgets; /// Minimal server/client code for working with RWebWindow class.; ///; /// File webwindow.cxx shows how RWebWindow can be created and used; /// In webwindow.html simple client code is provided.; ///; /// \macro_code; ///; /// \author Sergey Linev",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/webwindow/webwindow.cxx:229,simpl,simple,229,tutorials/webgui/webwindow/webwindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/webwindow/webwindow.cxx,1,['simpl'],['simple']
Usability,"/// \file; /// \ingroup tutorial_webgui; /// \ingroup webwidgets; /// The tutorial demonstrates how three.js model for geometry can be created and displayed.; ///; /// In geom_threejs.cxx one uses RGeomDescription class from geometry viewer, which produces; /// JSON data with all necessary information. Then RWebWindow is started and this information provided.; /// In client.html one uses **build** function to create Object3D with geometry; /// Then such object placed in three.js scene and rendered. Also simple animation is implemented; ///; /// \macro_code; ///; /// \author Sergey Linev",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/geom/geom_threejs.cxx:509,simpl,simple,509,tutorials/webgui/geom/geom_threejs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/geom/geom_threejs.cxx,1,['simpl'],['simple']
Usability,"/// \file; /// \ingroup tutorial_webgui; /// \ingroup webwidgets; /// This macro demonstrates simple openui5 panel, shown with RWebWindow; ///; /// \macro_code; ///; /// \author Sergey Linev",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/panel/webpanel.cxx:94,simpl,simple,94,tutorials/webgui/panel/webpanel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/panel/webpanel.cxx,1,['simpl'],['simple']
Usability,/// \name Simple Queries; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h:10,Simpl,Simple,10,interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APFloat.h,1,['Simpl'],['Simple']
Usability,"/// \p returns true if \p U is the pointer operand of a memory instruction with; /// a single pointer operand that can have its address space changed by simply; /// mutating the use to a new value. If the memory instruction is volatile,; /// return true only if the target allows the memory instruction to be volatile; /// in the new address space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp:153,simpl,simply,153,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InferAddressSpaces.cpp,1,['simpl'],['simply']
Usability,"/// \return the target-provided register class ID for the provided type,; /// accounting for type promotion and other type-legalization techniques that; /// the target might apply. However, it specifically does not account for the; /// scalarization or splitting of vector types. Should a vector type require; /// scalarization or splitting into multiple underlying vector registers, that; /// type should be mapped to a register class containing no registers.; /// Specifically, this is designed to provide a simple, high-level view of the; /// register allocation later performed by the backend. These register classes; /// don't necessarily map onto the register classes used by the backend.; /// FIXME: It's not currently possible to determine how many registers; /// are used by the provided type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:510,simpl,simple,510,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['simpl'],['simple']
Usability,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:98,simpl,simplify,98,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,1,['simpl'],['simplify']
Usability,/// \return true if \p CD can be considered empty according to CUDA; /// (E.2.3.1 in CUDA 7.5 Programming guide).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:106,guid,guide,106,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['guid'],['guide']
Usability,/// \return true if the sign bit of Op is known to be zero. We use this; /// predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:90,simpl,simplify,90,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,1,['simpl'],['simplify']
Usability,/// \returns true if it is possible to simplify a select instruction \p MI; /// to a min/max instruction of some sort.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:39,simpl,simplify,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,1,['simpl'],['simplify']
Usability,"/// \verbatim; /// string-literal: [C++0x lex.string]; /// encoding-prefix "" [s-char-sequence] ""; /// encoding-prefix R raw-string; /// encoding-prefix:; /// u8; /// u; /// U; /// L; /// s-char-sequence:; /// s-char; /// s-char-sequence s-char; /// s-char:; /// any member of the source character set except the double-quote "",; /// backslash \, or new-line character; /// escape-sequence; /// universal-character-name; /// raw-string:; /// "" d-char-sequence ( r-char-sequence ) d-char-sequence ""; /// r-char-sequence:; /// r-char; /// r-char-sequence r-char; /// r-char:; /// any member of the source character set, except a right parenthesis ); /// followed by the initial d-char-sequence (which may be empty); /// followed by a double quote "".; /// d-char-sequence:; /// d-char; /// d-char-sequence d-char; /// d-char:; /// any member of the basic source character set except:; /// space, the left parenthesis (, the right parenthesis ),; /// the backslash \, and the control characters representing horizontal; /// tab, vertical tab, form feed, and newline.; /// escape-sequence: [C++0x lex.ccon]; /// simple-escape-sequence; /// octal-escape-sequence; /// hexadecimal-escape-sequence; /// simple-escape-sequence:; /// one of \' \"" \? \\ \a \b \f \n \r \t \v; /// octal-escape-sequence:; /// \ octal-digit; /// \ octal-digit octal-digit; /// \ octal-digit octal-digit octal-digit; /// hexadecimal-escape-sequence:; /// \x hexadecimal-digit; /// hexadecimal-escape-sequence hexadecimal-digit; /// universal-character-name:; /// \u hex-quad; /// \U hex-quad hex-quad; /// hex-quad:; /// hex-digit hex-digit hex-digit hex-digit; /// \endverbatim; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp:1106,simpl,simple-escape-sequence,1106,interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp,2,['simpl'],['simple-escape-sequence']
Usability,"/// \verbatim; /// user-defined-character-literal: [C++11 lex.ext]; /// character-literal ud-suffix; /// ud-suffix:; /// identifier; /// character-literal: [C++11 lex.ccon]; /// ' c-char-sequence '; /// u' c-char-sequence '; /// U' c-char-sequence '; /// L' c-char-sequence '; /// u8' c-char-sequence ' [C++1z lex.ccon]; /// c-char-sequence:; /// c-char; /// c-char-sequence c-char; /// c-char:; /// any member of the source character set except the single-quote ',; /// backslash \, or new-line character; /// escape-sequence; /// universal-character-name; /// escape-sequence:; /// simple-escape-sequence; /// octal-escape-sequence; /// hexadecimal-escape-sequence; /// simple-escape-sequence:; /// one of \' \"" \? \\ \a \b \f \n \r \t \v; /// octal-escape-sequence:; /// \ octal-digit; /// \ octal-digit octal-digit; /// \ octal-digit octal-digit octal-digit; /// hexadecimal-escape-sequence:; /// \x hexadecimal-digit; /// hexadecimal-escape-sequence hexadecimal-digit; /// universal-character-name: [C++11 lex.charset]; /// \u hex-quad; /// \U hex-quad hex-quad; /// hex-quad:; /// hex-digit hex-digit hex-digit hex-digit; /// \endverbatim; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp:584,simpl,simple-escape-sequence,584,interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/LiteralSupport.cpp,2,['simpl'],['simple-escape-sequence']
Usability,"/// \}; /// Clear all the members of this MachineFunction, but the ones used; /// to initialize again the MachineFunction.; /// More specifically, this deallocates all the dynamically allocated; /// objects and get rid of all the XXXInfo data structure, but keep; /// unchanged the references to Fn, Target, MMI, and FunctionNumber.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:12,Clear,Clear,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['Clear'],['Clear']
Usability,/// addFieldExpander - Add an expander for ClassName that simply evaluates; /// FieldName in the Record to get the set elements. That is all that is; /// needed for a class like:; ///; /// class Set<dag d> {; /// dag Elts = d;; /// }; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h:58,simpl,simply,58,interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/SetTheory.h,1,['simpl'],['simply']
Usability,"/// array_pod_sort - This sorts an array with the specified start and end; /// extent. This is just like std::sort, except that it calls qsort instead of; /// using an inlined template. qsort is slightly slower than std::sort, but; /// most sorts are not performance critical in LLVM and std::sort has to be; /// template instantiated for each type, leading to significant measured code; /// bloat. This function should generally be used instead of std::sort where; /// possible.; ///; /// This function assumes that you have simple POD-like types that can be; /// compared with std::less and can be moved with memcpy. If this isn't true,; /// you should use std::sort.; ///; /// NOTE: If qsort_r were portable, we could allow a custom comparator and; /// default to std::less.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:526,simpl,simple,526,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['simpl'],['simple']
Usability,"/// canSimplifyCallFramePseudos - If there is a reserved call frame, the; /// call frame pseudos can be simplified. Having a FP, as in the default; /// implementation, is not sufficient here since we can't always use it.; /// Use a more nuanced condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:104,simpl,simplified,104,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['simpl'],['simplified']
Usability,"/// canSimplifyCallFramePseudos - If there is a reserved call frame, the; /// call frame pseudos can be simplified. Unlike most targets, having a FP; /// is not sufficient here since we still may reference some objects via SP; /// even when FP is available in Thumb2 mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:104,simpl,simplified,104,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['simpl'],['simplified']
Usability,"/// canSimplifyCallFramePseudos - When possible, it's best to simplify the; /// call frame pseudo ops before doing frame index elimination. This is; /// possible only when frame index references between the pseudos won't; /// need adjusting for the call frame adjustments. Normally, that's true; /// if the function has a reserved call frame or a frame pointer. Some; /// targets (Thumb2, for example) may have more complicated criteria,; /// however, and can override this behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:62,simpl,simplify,62,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,1,['simpl'],['simplify']
Usability,"/// changeVectorFPCCToAArch64CC - Convert a DAG fp condition code to an AArch64; /// CC usable with the vector instructions. Fewer operations are available; /// without a real NZCV register, so we have to use less efficient combinations; /// to get the same effect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:88,usab,usable,88,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['usab'],['usable']
Usability,"/// checkForBadMacro; ///; /// With the support added for named parameters there may be code out there that; /// is transitioning from positional parameters. In versions of gas that did; /// not support named parameters they would be ignored on the macro definition.; /// But to support both styles of parameters this is not possible so if a macro; /// definition has named parameters but does not use them and has what appears; /// to be positional parameters, strings like $1, $2, ... and $n, then issue a; /// warning that the positional parameter found in body which have no effect.; /// Hoping the developer will either remove the named parameters from the macro; /// definition so the positional parameters get used if that was what was; /// intended or change the macro to use the named parameters. It is possible; /// this warning will trigger when the none of the named parameters are used; /// and the strings like $1 are infact to simply to be passed trough unchanged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:942,simpl,simply,942,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,1,['simpl'],['simply']
Usability,/// clear - Clear all classes so that grow() will assign a unique class to; /// every integer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntEqClasses.h,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,/// clear - Clear out all prior path information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/CXXInheritance.cpp:4,clear,clear,4,interpreter/llvm-project/clang/lib/AST/CXXInheritance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/CXXInheritance.cpp,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"/// clear - Clear out all the function-specific state. This returns this; /// FunctionLoweringInfo to an empty state, ready to be used for a; /// different function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"/// clear - Clear the accumulated profile, allowing this FoldingSetNodeID; /// object to be used to compute a new profile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,/// clear - Clears the set. This is a very fast constant time operation.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseSet.h,2,"['Clear', 'clear']","['Clears', 'clear']"
Usability,/// clear - Empty the cache.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:4,clear,clear,4,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['clear'],['clear']
Usability,/// clear - Erase all elements from the queue.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PriorityQueue.h,1,['clear'],['clear']
Usability,/// clear - Release all the tracked allocations to the allocator. The; /// recycler must be free of any tracked allocations before being; /// deleted; calling clear is one way to ensure this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Recycler.h,2,['clear'],['clear']
Usability,/// clear - Remove all entries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['clear'],['clear']
Usability,/// clear - Remove all information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PredIteratorCache.h,1,['clear'],['clear']
Usability,/// clear - Remove all nodes from the folding set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FoldingSet.h,2,['clear'],['clear']
Usability,/// clear - Remove all rope pieces from this leaf.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp:4,clear,clear,4,interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,1,['clear'],['clear']
Usability,/// clear - Removes all bits from the bitvector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,1,['clear'],['clear']
Usability,"/// clear - Reset per-query data, but preserve frequencies that only depend on; /// the CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp:4,clear,clear,4,interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp,1,['clear'],['clear']
Usability,"/// clear - Resets the pass. Any pass, which uses GCModuleInfo, should; /// call it in doFinalization().; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h:4,clear,clear,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,1,['clear'],['clear']
Usability,/// clear - clear all data structures so SplitAnalysis is ready to analyze a; /// new interval.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:4,clear,clear,4,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,2,['clear'],['clear']
Usability,"/// clear IsShown() flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RCanvas.hxx:4,clear,clear,4,graf2d/gpadv7/inc/ROOT/RCanvas.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RCanvas.hxx,1,['clear'],['clear']
Usability,"/// clear IsUpdated() flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RCanvas.hxx:4,clear,clear,4,graf2d/gpadv7/inc/ROOT/RCanvas.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RCanvas.hxx,1,['clear'],['clear']
Usability,"/// clear internal fit result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:4,clear,clear,4,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,1,['clear'],['clear']
Usability,"/// clear list of functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:4,clear,clear,4,math/mathmore/inc/Math/GSLMultiRootFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h,1,['clear'],['clear']
Usability,"/// clearAllGlobalMappings - Clear all global mappings and start over again,; /// for use in dynamic compilation scenarios to move globals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:4,clear,clearAllGlobalMappings,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,2,"['Clear', 'clear']","['Clear', 'clearAllGlobalMappings']"
Usability,"/// clearBitsInMask - Clear any bits in this vector that are set in Mask.; /// Don't resize. This computes ""*this &= ~Mask"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,clear,clearBitsInMask,4,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,2,"['Clear', 'clear']","['Clear', 'clearBitsInMask']"
Usability,"/// clearBitsNotInMask - Clear a bit in this vector for every '0' bit in Mask.; /// Don't resize. This computes ""*this &= Mask"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h:4,clear,clearBitsNotInMask,4,interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/BitVector.h,2,"['Clear', 'clear']","['Clear', 'clearBitsNotInMask']"
Usability,/// clearDIEs - Clear parsed DIEs to keep memory usage low.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:4,clear,clearDIEs,4,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,2,"['Clear', 'clear']","['Clear', 'clearDIEs']"
Usability,/// clearFlag - Clear a MI flag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,clear,clearFlag,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,2,"['Clear', 'clear']","['Clear', 'clearFlag']"
Usability,"/// clearGlobalMappingsFromModule - Clear all global mappings that came from a; /// particular module, because it has been removed from the JIT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:4,clear,clearGlobalMappingsFromModule,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,2,"['Clear', 'clear']","['Clear', 'clearGlobalMappingsFromModule']"
Usability,/// clearGraphAttrs - Clear all previously defined node graph attributes.; /// Intended to be used from a debugging tool (eg. gdb).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp:4,clear,clearGraphAttrs,4,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp,2,"['Clear', 'clear']","['Clear', 'clearGraphAttrs']"
Usability,"/// clearIsEmitted - Reset Emitted flag, for certain special cases where; /// SDDbgValue is emitted twice. DBG_INSTR_REF depends on this behaviour.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:4,clear,clearIsEmitted,4,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,1,['clear'],['clearIsEmitted']
Usability,/// clearKillFlags - Iterate over all the uses of the given register and; /// clear the kill flag from the MachineOperand. This function is used by; /// optimization passes which extend register lifetimes and need only; /// preserve conservative kill flag information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:4,clear,clearKillFlags,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,4,['clear'],"['clear', 'clearKillFlags']"
Usability,/// clearKillInfo - Clears kill flags on all operands.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp:4,clear,clearKillInfo,4,interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,2,"['Clear', 'clear']","['Clears', 'clearKillInfo']"
Usability,"/// clearMemConstraint - Similar to setMemConstraint(0), but without the; /// assertion checking that the constraint has not been set previously.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h:4,clear,clearMemConstraint,4,interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InlineAsm.h,1,['clear'],['clearMemConstraint']
Usability,"/// clearParent - Reset the parent pointer.; ///; /// The MachineOperand copy constructor also copies ParentMI, expecting the; /// original to be deleted. If a MachineOperand is ever stored outside a; /// MachineInstr, the parent pointer must be cleared.; ///; /// Never call clearParent() on an operand in a MachineInstr.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:4,clear,clearParent,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,3,['clear'],"['clearParent', 'cleared']"
Usability,/// clearVirtRegs - Remove all virtual registers (after physreg assignment).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:4,clear,clearVirtRegs,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,2,['clear'],['clearVirtRegs']
Usability,/// clears all virtual to physical register mappings,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:4,clear,clears,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,1,['clear'],['clears']
Usability,"/// clears the specified virtual register's, physical; /// register mapping",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:4,clear,clears,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,1,['clear'],['clears']
Usability,/// dump - A simple pretty printer of a CFG that outputs to stderr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:13,simpl,simple,13,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['simpl'],['simple']
Usability,/// dump - A simply pretty printer of a CFGBlock that outputs to stderr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:13,simpl,simply,13,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['simpl'],['simply']
Usability,/// emitEdge - Output an edge from a simple node into the graph...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:37,simpl,simple,37,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,1,['simpl'],['simple']
Usability,/// emitSimpleNode - Outputs a simple (non-record) node,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:31,simpl,simple,31,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,1,['simpl'],['simple']
Usability,"/// expandAddToGEP - Expand an addition expression with a pointer type into; /// a GEP instead of using ptrtoint+arithmetic+inttoptr. This helps; /// BasicAliasAnalysis and other passes analyze the result. See the rules; /// for getelementptr vs. inttoptr in; /// http://llvm.org/docs/LangRef.html#pointeraliasing; /// for details.; ///; /// Design note: The correctness of using getelementptr here depends on; /// ScalarEvolution not recognizing inttoptr and ptrtoint operators, as; /// they may introduce pointer arithmetic which may not be safely converted; /// into getelementptr.; ///; /// Design note: It might seem desirable for this function to be more; /// loop-aware. If some of the indices are loop-invariant while others; /// aren't, it might seem desirable to emit multiple GEPs, keeping the; /// loop-invariant portions of the overall computation outside the loop.; /// However, there are a few reasons this is not done here. Hoisting simple; /// arithmetic is a low-level optimization that often isn't very; /// important until late in the optimization process. In fact, passes; /// like InstructionCombining will combine GEPs, even if it means; /// pushing loop-invariant computation down into loops, so even if the; /// GEPs were split here, the work would quickly be undone. The; /// LoopStrengthReduction pass, which is usually run quite late (and; /// after the last InstructionCombining pass), takes care of hoisting; /// loop-invariant portions of expressions, after considering what; /// can be folded using target addressing modes.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:949,simpl,simple,949,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,2,"['simpl', 'undo']","['simple', 'undone']"
Usability,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object. This method has no effect for the interpreter.; ///; /// Returns true on success, false on failure. Error messages can be retrieved; /// by calling getError();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:65,usab,usable,65,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,2,['usab'],['usable']
Usability,"/// finalizeObject - ensure the module is fully processed and is usable.; ///; /// It is the user-level function for completing the process of making the; /// object usable for execution. It should be called after sections within an; /// object have been relocated using mapSectionAddress. When this method is; /// called the MCJIT execution engine will reapply relocations for a loaded; /// object.; /// Is it OK to finalize a set of modules, add modules and finalize again.; // FIXME: Do we really need both of these?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h:65,usab,usable,65,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,2,['usab'],['usable']
Usability,"/// findLoopHeaders - We do not want jump threading to turn proper loop; /// structures into irreducible loops. Doing this breaks up the loop nesting; /// hierarchy and pessimizes later transformations. To prevent this from; /// happening, we first have to find the loop headers. Here we approximate this; /// by finding targets of backedges in the CFG.; ///; /// Note that there definitely are cases when we want to allow threading of; /// edges across a loop header. For example, threading a jump from outside the; /// loop (the preheader) to an exit block of the loop is definitely profitable.; /// It is also almost always profitable to thread backedges from within the loop; /// to exit blocks, and is often profitable to thread backedges to other blocks; /// within the loop (forming a nested loop). This simple analysis is not rich; /// enough to track all of these properties and keep it up-to-date as the CFG; /// mutates, so we don't allow any of these transformations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:811,simpl,simple,811,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['simpl'],['simple']
Usability,"/// findValue - Look through bitcasts and simple memory reference patterns; /// to identify an equivalent, but more informative, value. If OffsetOk; /// is true, look through getelementptrs with non-zero offsets too.; ///; /// Most analysis passes don't require this logic, because instcombine; /// will simplify most of these kinds of things away. But it's a goal of; /// this Lint pass to be useful even on non-optimized IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp:42,simpl,simple,42,interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Lint.cpp,2,['simpl'],"['simple', 'simplify']"
Usability,"/// getDecltypeForExpr - Given an expr, will return the decltype for; /// that expression, according to the rules in C++11; /// [dcl.type.simple]p4 and C++11 [expr.lambda.prim]p18.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:138,simpl,simple,138,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['simpl'],['simple']
Usability,/// getExtendImm - Encode the extend type and amount for a load/store inst:; /// doshift: should the offset be scaled by the access size; /// shifter: 000 ==> uxtb; /// 001 ==> uxth; /// 010 ==> uxtw; /// 011 ==> uxtx; /// 100 ==> sxtb; /// 101 ==> sxth; /// 110 ==> sxtw; /// 111 ==> sxtx; /// {3-1} = shifter; /// {0} = doshift,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:159,ux,uxtb,159,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,4,['ux'],"['uxtb', 'uxth', 'uxtw', 'uxtx']"
Usability,/// getFrameIndexReference - Provide a base+offset reference to an FI slot for; /// debug info. It's the same as what we use for resolving the code-gen; /// references for now. FIXME: This can go wrong when references are; /// SP-relative and simple call frames aren't used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:243,simpl,simple,243,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,2,['simpl'],['simple']
Usability,"/// getIVIncOperand returns an induction variable increment's induction; /// variable operand.; ///; /// If allowScale is set, any type of GEP is allowed as long as the nonIV; /// operands dominate InsertPos.; ///; /// If allowScale is not set, ensure that a GEP increment conforms to one of the; /// simple patterns generated by getAddRecExprPHILiterally and; /// expandAddtoGEP. If the pattern isn't recognized, return NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:301,simpl,simple,301,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['simpl'],['simple']
Usability,/// getInlinedChainForAddress - fetches inlined chain for a given address.; /// Returns empty chain if there is no subprogram containing address. The; /// chain is valid as long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:214,clear,cleared,214,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,1,['clear'],['cleared']
Usability,"/// getKnownType - If the type constraints on this node imply a fixed type; /// (e.g. all stores return void, etc), then return it as an; /// MVT::SimpleValueType. Otherwise, return EEVT::Other.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:147,Simpl,SimpleValueType,147,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['Simpl'],['SimpleValueType']
Usability,"/// getKnownType - If the type constraints on this node imply a fixed type; /// (e.g. all stores return void, etc), then return it as an; /// MVT::SimpleValueType. Otherwise, return MVT::Other.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:147,Simpl,SimpleValueType,147,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['Simpl'],['SimpleValueType']
Usability,"/// getObjCEncodingForPropertyDecl - Return the encoded type for this; /// property declaration. If non-NULL, Container must be either an; /// ObjCCategoryImplDecl or ObjCImplementationDecl; it should only be; /// NULL when getting encodings for protocol properties.; /// Property attributes are stored as a comma-delimited C string. The simple; /// attributes readonly and bycopy are encoded as single characters. The; /// parametrized attributes, getter=name, setter=name, and ivar=name, are; /// encoded as single characters, followed by an identifier. Property types; /// are also encoded as a parametrized attribute. The characters used to encode; /// these attributes are defined by the following enumeration:; /// @code; /// enum PropertyAttributes {; /// kPropertyReadOnly = 'R', // property is read-only.; /// kPropertyBycopy = 'C', // property is a copy of the value last assigned; /// kPropertyByref = '&', // property is a reference to the value last assigned; /// kPropertyDynamic = 'D', // property is dynamic; /// kPropertyGetter = 'G', // followed by getter selector name; /// kPropertySetter = 'S', // followed by setter selector name; /// kPropertyInstanceVariable = 'V' // followed by instance variable name; /// kPropertyType = 'T' // followed by old-style type encoding.; /// kPropertyWeak = 'W' // 'weak' property; /// kPropertyStrong = 'P' // property GC'able; /// kPropertyNonAtomic = 'N' // property non-atomic; /// kPropertyOptional = '?' // property optional; /// };; /// @endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:338,simpl,simple,338,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['simpl'],['simple']
Usability,"/// getReferenceQualifiedType - Given an expr, will return the type for; /// that expression, as in [dcl.type.simple]p4 but without taking id-expressions; /// and class member access into account.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:110,simpl,simple,110,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['simpl'],['simple']
Usability,/// getRegisterVTs - Find the union of all possible SimpleValueTypes for the; /// specified physical register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:52,Simpl,SimpleValueTypes,52,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,1,['Simpl'],['SimpleValueTypes']
Usability,/// getValueType - Return the MVT::SimpleValueType that the specified TableGen; /// record corresponds to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:35,Simpl,SimpleValueType,35,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,2,['Simpl'],['SimpleValueType']
Usability,"/// handleTwoArgFP - Handle instructions like FADD and friends which are virtual; /// instructions which need to be simplified and possibly transformed.; ///; /// Result: ST(0) = fsub ST(0), ST(i); /// ST(i) = fsub ST(0), ST(i); /// ST(0) = fsubr ST(0), ST(i); /// ST(i) = fsubr ST(0), ST(i); ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:116,simpl,simplified,116,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['simpl'],['simplified']
Usability,/// hasGC/getGC/setGC/clearGC - The name of the garbage collection algorithm; /// to use during code generation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:22,clear,clearGC,22,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h,1,['clear'],['clearGC']
Usability,"/// helper method for clearing the cache",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h:22,clear,clearing,22,roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCImportanceSampler.h,2,['clear'],['clearing']
Usability,"/// hoistStep - Attempt to hoist a simple IV increment above InsertPos to make; /// it available to other uses in this loop. Recursively hoist any operands,; /// until we reach a value that dominates InsertPos.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:35,simpl,simple,35,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['simpl'],['simple']
Usability,"/// if the 'for' loop has a dispatch schedule (e.g. dynamic, guided) then; /// we need to use the LB and UB expressions generated by the worksharing; /// code generation support, whereas in non combined situations we would; /// just emit 0 and the LastIteration expression; /// This function is necessary due to the difference of the LB and UB; /// types for the RT emission routines for 'for_static_init' and; /// 'for_dispatch_init'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:61,guid,guided,61,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['guid'],['guided']
Usability,"/// invalidateRegions - Clears out the specified regions from the store,; /// marking their values as unknown. Depending on the store, this may also; /// invalidate additional regions that may have changed based on accessing; /// the given regions. Optionally, invalidates non-static globals as well.; /// \param[in] store The initial store; /// \param[in] Values The values to invalidate.; /// \param[in] E The current statement being evaluated. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Count The current block count. Used to conjure; /// symbols to mark the values of invalidated regions.; /// \param[in] Call The call expression which will be used to determine which; /// globals should get invalidated.; /// \param[in,out] IS A set to fill with any symbols that are no longer; /// accessible. Pass \c NULL if this information will not be used.; /// \param[in] ITraits Information about invalidation for a particular; /// region/symbol.; /// \param[in,out] InvalidatedTopLevel A vector to fill with regions; //// explicitly being invalidated. Pass \c NULL if this; /// information will not be used.; /// \param[in,out] Invalidated A vector to fill with any regions being; /// invalidated. This should include any regions explicitly invalidated; /// even if they do not currently have bindings. Pass \c NULL if this; /// information will not be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h:24,Clear,Clears,24,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Store.h,1,['Clear'],['Clears']
Usability,"/// is/setIsFutureCompatKeyword - Initialize information about whether or not; /// this language token is a keyword in a newer or proposed Standard. This; /// controls compatibility warnings, and is only true when not parsing the; /// corresponding Standard. Once a compatibility problem has been diagnosed; /// with this keyword, the flag will be cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:348,clear,cleared,348,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['clear'],['cleared']
Usability,"/// isCXXDeclarationStatement - C++-specialized function that disambiguates; /// between a declaration or an expression statement, when parsing function; /// bodies. Returns true for declaration, false for expression.; ///; /// declaration-statement:; /// block-declaration; ///; /// block-declaration:; /// simple-declaration; /// asm-definition; /// namespace-alias-definition; /// using-declaration; /// using-directive; /// [C++0x] static_assert-declaration; ///; /// asm-definition:; /// 'asm' '(' string-literal ')' ';'; ///; /// namespace-alias-definition:; /// 'namespace' identifier = qualified-namespace-specifier ';'; ///; /// using-declaration:; /// 'using' typename[opt] '::'[opt] nested-name-specifier; /// unqualified-id ';'; /// 'using' '::' unqualified-id ;; ///; /// using-directive:; /// 'using' 'namespace' '::'[opt] nested-name-specifier[opt]; /// namespace-name ';'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:308,simpl,simple-declaration,308,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['simpl'],['simple-declaration']
Usability,"/// isCXXSimpleDeclaration - C++-specialized function that disambiguates; /// between a simple-declaration or an expression-statement.; /// If during the disambiguation process a parsing error is encountered,; /// the function returns true to let the declaration parsing code handle it.; /// Returns false if the statement is disambiguated as expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:88,simpl,simple-declaration,88,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['simpl'],['simple-declaration']
Usability,"/// isCXXSimpleDeclaration - C++-specialized function that disambiguates; /// between a simple-declaration or an expression-statement.; /// If during the disambiguation process a parsing error is encountered,; /// the function returns true to let the declaration parsing code handle it.; /// Returns false if the statement is disambiguated as expression.; ///; /// simple-declaration:; /// decl-specifier-seq init-declarator-list[opt] ';'; /// decl-specifier-seq ref-qualifier[opt] '[' identifier-list ']'; /// brace-or-equal-initializer ';' [C++17]; ///; /// (if AllowForRangeDecl specified); /// for ( for-range-declaration : for-range-initializer ) statement; ///; /// for-range-declaration:; /// decl-specifier-seq declarator; /// decl-specifier-seq ref-qualifier[opt] '[' identifier-list ']'; ///; /// In any of the above cases there can be a preceding attribute-specifier-seq,; /// but the caller is expected to handle that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:88,simpl,simple-declaration,88,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,2,['simpl'],['simple-declaration']
Usability,"/// isFMAFasterThanFMulAndFAdd - Return true if an FMA operation is faster; /// than a pair of fmul and fadd instructions. fmuladd intrinsics will be; /// expanded to FMAs when this method returns true, otherwise fmuladd is; /// expanded to fmul + fadd.; ///; /// ARM supports both fused and unfused multiply-add operations; we already; /// lower a pair of fmul and fadd to the latter so it's not clear that there; /// would be a gain or that the gain would be worthwhile enough to risk; /// correctness bugs.; ///; /// For MVE, we set this to true as it helps simplify the need for some; /// patterns (and we don't have the non-fused floating point instruction).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:397,clear,clear,397,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,"['clear', 'simpl']","['clear', 'simplify']"
Usability,"/// isLegalAddressingMode - Return true if the addressing mode represented; /// by AM is legal for this target, for a load/store of the specified type.; /// Used to guide target specific optimizations, like loop strength reduction; /// (LoopStrengthReduce.cpp) and memory optimization for address mode; /// (CodeGenPrepare.cpp)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:165,guid,guide,165,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['guid'],['guide']
Usability,"/// isLegalAddressingMode - Return true if the addressing mode represented; /// by AM is legal for this target, for a load/store of the specified type; /// Used to guide target specific optimizations, like loop strength; /// reduction (LoopStrengthReduce.cpp) and memory optimization for; /// address mode (CodeGenPrepare.cpp)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.h:164,guid,guide,164,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.h,1,['guid'],['guide']
Usability,"/// isPotentialConstantExpr - Return true if this function's definition; /// might be usable in a constant expression in C++11, if it were marked; /// constexpr. Return false if the function can never produce a constant; /// expression, along with diagnostics describing why not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:86,usab,usable,86,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['usab'],['usable']
Usability,"/// isPotentialConstantExprUnevaluated - Return true if this expression might; /// be usable in a constant expression in C++11 in an unevaluated context, if; /// it were in function FD marked constexpr. Return false if the function can; /// never produce a constant expression, along with diagnostics describing; /// why not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:86,usab,usable,86,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['usab'],['usable']
Usability,"/// isSimpleArrayDecayOperand - If the specified expr is a simple decay from an; /// array to pointer, return the array subexpression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:59,simpl,simple,59,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['simpl'],['simple']
Usability,/// isSimplePredicateNode - Return true if this is a simple predicate that; /// operates on the node or its children without potential side effects or a; /// change of the current node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:53,simpl,simple,53,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,1,['simpl'],['simple']
Usability,/// isSimplePredicateOrRecordNode - Return true if this is a record node or; /// a simple predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:83,simpl,simple,83,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,1,['simpl'],['simple']
Usability,"/// isSimpleZero - If emitting this value will obviously just cause a store of; /// zero to memory, return true. This can return false if uncertain, so it just; /// handles simple cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:173,simpl,simple,173,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['simpl'],['simple']
Usability,"/// isValidAfterIdentifierInDeclaratorAfterDeclSpec - Return true if the; /// specified token is valid after the identifier in a declarator which; /// immediately follows the declspec. For example, these things are valid:; ///; /// int x [ 4]; // direct-declarator; /// int x ( int y); // direct-declarator; /// int(int x ) // direct-declarator; /// int x ; // simple-declaration; /// int x = 17; // init-declarator-list; /// int x , y; // init-declarator-list; /// int x __asm__ (""foo""); // init-declarator-list; /// int x : 4; // struct-declarator; /// int x { 5}; // C++'0x unified initializers; ///; /// This is not, because 'x' does not immediately follow the declspec (though; /// ')' happens to be valid anyway).; /// int (x); ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:361,simpl,simple-declaration,361,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['simpl'],['simple-declaration']
Usability,"/// json::OStream allows writing well-formed JSON without materializing; /// all structures as json::Value ahead of time.; /// It's faster, lower-level, and less safe than OS << json::Value.; /// It also allows emitting more constructs, such as comments.; ///; /// Only one ""top-level"" object can be written to a stream.; /// Simplest usage involves passing lambdas (Blocks) to fill in containers:; ///; /// json::OStream J(OS);; /// J.array([&]{; /// for (const Event &E : Events); /// J.object([&] {; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeArray(""participants"", [&] {; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// });; /// });; /// });; ///; /// This would produce JSON like:; ///; /// [; /// {; /// ""timestamp"": 19287398741,; /// ""participants"": [; /// ""King Kong"",; /// ""Miley Cyrus"",; /// ""Cleopatra""; /// ]; /// },; /// ...; /// ]; ///; /// The lower level begin/end methods (arrayBegin()) are more flexible but; /// care must be taken to pair them correctly:; ///; /// json::OStream J(OS);; // J.arrayBegin();; /// for (const Event &E : Events) {; /// J.objectBegin();; /// J.attribute(""timestamp"", int64_t(E.Time));; /// J.attributeBegin(""participants"");; /// for (const Participant &P : E.Participants); /// J.value(P.toString());; /// J.attributeEnd();; /// J.objectEnd();; /// }; /// J.arrayEnd();; ///; /// If the call sequence isn't valid JSON, asserts will fire in debug mode.; /// This can be mismatched begin()/end() pairs, trying to emit attributes inside; /// an array, and so on.; /// With asserts disabled, this is undefined behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h:326,Simpl,Simplest,326,interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/JSON.h,1,['Simpl'],['Simplest']
Usability,/// llvm_shutdown_obj - This is a simple helper class that calls; /// llvm_shutdown() when it is destroyed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:34,simpl,simple,34,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,1,['simpl'],['simple']
Usability,"/// lowerACCSpilling - Generate the code for spilling the accumulator register.; /// Similarly to other spills/reloads that use pseudo-ops, we do not actually; /// eliminate the FrameIndex here nor compute the stack offset. We simply; /// create a real instruction with an FI and rely on eliminateFrameIndex to; /// handle the FI elimination.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp:227,simpl,simply,227,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp,1,['simpl'],['simply']
Usability,/// markImmutable - Clears the mutable bits of a root and all of its; /// descendants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:20,Clear,Clears,20,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['Clear'],['Clears']
Usability,/// markedCachedDigest - Clears the NoCachedDigest flag for a tree.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:25,Clear,Clears,25,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['Clear'],['Clears']
Usability,/// parseDirectiveCFIStartProc; /// ::= .cfi_startproc [simple],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:56,simpl,simple,56,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,2,['simpl'],['simple']
Usability,"/// parseGVEntry; /// ::= 'gv' ':' '(' ('name' ':' STRINGCONSTANT | 'guid' ':' UInt64); /// [',' 'summaries' ':' Summary[',' Summary]* ]? ')'; /// Summary ::= '(' (FunctionSummary | VariableSummary | AliasSummary) ')'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:69,guid,guid,69,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['guid'],['guid']
Usability,/// parseResume; /// ::= 'resume' TypeAndValue,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:26,resume,resume,26,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['resume'],['resume']
Usability,"/// parseRotImm - Parse the shifter immediate operand for SXTB/UXTB family; /// of instructions. Legal values are:; /// ror #n 'n' in {0, 8, 16, 24}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:63,UX,UXTB,63,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['UX'],['UXTB']
Usability,"/// parseSysAlias - The IC, DC, AT, and TLBI instructions are simple aliases for; /// the SYS instruction. Parse them specially so that we create a SYS MCInst.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:62,simpl,simple,62,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['simpl'],['simple']
Usability,/// parseSyspAlias - The TLBIP instructions are simple aliases for; /// the SYSP instruction. Parse them specially so that we create a SYSP MCInst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:48,simpl,simple,48,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['simpl'],['simple']
Usability,"/// prepare - Reset state and prepare for a new spill placement computation.; /// @param RegBundles Bit vector to receive the edge bundles where the; /// variable should be kept in a register. Each bit; /// corresponds to an edge bundle, a set bit means the; /// variable should be kept in a register through the; /// bundle. A clear bit means the variable should be; /// spilled. This vector is retained.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.h:328,clear,clear,328,interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.h,1,['clear'],['clear']
Usability,/// print - A simple pretty printer of a CFG that outputs to an ostream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:14,simpl,simple,14,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['simpl'],['simple']
Usability,/// print - A simple pretty printer of a CFGBlock that outputs to an ostream.; /// Generally this will only be called from CFG::print.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:14,simpl,simple,14,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['simpl'],['simple']
Usability,/// printArgument - This member is called for every argument that is passed into; /// the function. Simply print it out,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:100,Simpl,Simply,100,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,1,['Simpl'],['Simply']
Usability,/// printTerminator - A simple pretty printer of the terminator of a CFGBlock.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:24,simpl,simple,24,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['simpl'],['simple']
Usability,/// processBranchOnPHI - We have an otherwise unthreadable conditional branch on; /// a PHI node (or freeze PHI) in the current block. See if there are any; /// simplifications we can do based on inputs to the phi node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:161,simpl,simplifications,161,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['simpl'],['simplifications']
Usability,/// processBranchOnXOR - We have an otherwise unthreadable conditional branch on; /// a xor instruction in the current block. See if there are any; /// simplifications we can do based on inputs to the xor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:152,simpl,simplifications,152,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['simpl'],['simplifications']
Usability,"/// propagate - Review the constraints, looking for opportunities; /// to simplify a subscript pair (Src and Dst).; /// Return true if some simplification occurs.; /// If the simplification isn't exact (that is, if it is conservative; /// in terms of dependence), set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:74,simpl,simplify,74,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,3,['simpl'],"['simplification', 'simplify']"
Usability,"/// propagateDistance - Attempt to propagate a distance; /// constraint into a subscript pair (Src and Dst).; /// Return true if some simplification occurs.; /// If the simplification isn't exact (that is, if it is conservative; /// in terms of dependence), set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:134,simpl,simplification,134,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['simpl'],['simplification']
Usability,"/// propagateLine - Attempt to propagate a line; /// constraint into a subscript pair (Src and Dst).; /// Return true if some simplification occurs.; /// If the simplification isn't exact (that is, if it is conservative; /// in terms of dependence), set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:126,simpl,simplification,126,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['simpl'],['simplification']
Usability,/// propagatePoint - Attempt to propagate a point; /// constraint into a subscript pair (Src and Dst).; /// Return true if some simplification occurs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:128,simpl,simplification,128,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['simpl'],['simplification']
Usability,/// raw_os_ostream - A raw_ostream that writes to an std::ostream. This is a; /// simple adaptor class. It does not check for output errors; clients should; /// use the underlying stream to detect errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h:82,simpl,simple,82,interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_os_ostream.h,1,['simpl'],['simple']
Usability,"/// removeMatchingExtensions - Examines a subscript pair.; /// If the source and destination are identically sign (or zero); /// extended, it strips off the extension in an effort to; /// simplify the actual analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:188,simpl,simplify,188,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['simpl'],['simplify']
Usability,/// reset - Clears all the entries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/UniqueVector.h:12,Clear,Clears,12,interpreter/llvm-project/llvm/include/llvm/ADT/UniqueVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/UniqueVector.h,1,['Clear'],['Clears']
Usability,"/// safe evaluation of log(x) with a protections against negative or zero argument to the log; /// smooth linear extrapolation below function values smaller than epsilon; /// (better than a simple cut-off)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h:190,simpl,simple,190,math/mathcore/inc/Math/Util.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h,1,['simpl'],['simple']
Usability,"/// set the confidence level for the interval. Simple interval is defined at construction time so this function; /// has no effect",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SimpleInterval.h:47,Simpl,Simple,47,roofit/roostats/inc/RooStats/SimpleInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/SimpleInterval.h,1,['Simpl'],['Simple']
Usability,/// setRoot - Clear the path and set a new root node.; /// @param Node New root node.; /// @param Size New root size.; /// @param Offset Offset into root node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:14,Clear,Clear,14,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['Clear'],['Clear']
Usability,"/// simple-declaration: [C99 6.7: declaration] [C++ 7p1: dcl.dcl]; /// declaration-specifiers init-declarator-list[opt] ';'; /// [C++11] attribute-specifier-seq decl-specifier-seq[opt]; /// init-declarator-list ';'; ///[C90/C++]init-declarator-list ';' [TODO]; /// [OMP] threadprivate-directive; /// [OMP] allocate-directive [TODO]; ///; /// for-range-declaration: [C++11 6.5p1: stmt.ranged]; /// attribute-specifier-seq[opt] type-specifier-seq declarator; ///; /// If RequireSemi is false, this does not check for a ';' at the end of the; /// declaration. If it is true, it checks for and eats it.; ///; /// If FRI is non-null, we might be parsing a for-range-declaration instead; /// of a simple-declaration. If we find that we are, we also parse the; /// for-range-initializer, and place it here.; ///; /// DeclSpecStart is used when decl-specifiers are parsed before parsing; /// the Declaration. The SourceLocation for this Decl is set to; /// DeclSpecStart if DeclSpecStart is non-null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:4,simpl,simple-declaration,4,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,2,['simpl'],['simple-declaration']
Usability,/// simple-declaration:; /// decl-specifier-seq init-declarator-list[opt] ';'; ///; /// (if AllowForRangeDecl specified); /// for ( for-range-declaration : for-range-initializer ) statement; /// for-range-declaration:; /// attribute-specifier-seqopt type-specifier-seq declarator; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:4,simpl,simple-declaration,4,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['simpl'],['simple-declaration']
Usability,/// simplify integer comparisons where at least one operand of the compare; /// matches an integer min/max idiom.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:4,simpl,simplify,4,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['simpl'],['simplify']
Usability,"/// simplifyPartiallyRedundantLoad - If LoadI is an obviously partially; /// redundant load instruction, eliminate it by replacing it with a PHI node.; /// This is an important optimization that encourages jump threading, and needs; /// to be run interlaced with other jump threading tasks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:4,simpl,simplifyPartiallyRedundantLoad,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['simpl'],['simplifyPartiallyRedundantLoad']
Usability,/// simplifyUsersOfIV - Simplify instructions that use this induction variable; /// by using ScalarEvolution to analyze the IV's recurrence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:4,simpl,simplifyUsersOfIV,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,2,"['Simpl', 'simpl']","['Simplify', 'simplifyUsersOfIV']"
Usability,/// tblgen'erated driver function for lowering simple MI->MC pseudo; /// instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.h:47,simpl,simple,47,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.h,1,['simpl'],['simple']
Usability,/// tblgen'erated driver function for lowering simple MI->MC; /// pseudo instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:47,simpl,simple,47,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,2,['simpl'],['simple']
Usability,/// tokenizeAsmString - Tokenize a simplified assembly string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:35,simpl,simplified,35,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['simpl'],['simplified']
Usability,"/// tryToUnfoldSelectInCurrBB - Look for PHI/Select or PHI/CMP/Select in the; /// same BB in the form; /// bb:; /// %p = phi [false, %bb1], [true, %bb2], [false, %bb3], [true, %bb4], ...; /// %s = select %p, trueval, falseval; ///; /// or; ///; /// bb:; /// %p = phi [0, %bb1], [1, %bb2], [0, %bb3], [1, %bb4], ...; /// %c = cmp %p, 0; /// %s = select %c, trueval, falseval; ///; /// And expand the select into a branch structure. This later enables; /// jump-threading over bb in this pass.; ///; /// Using the similar approach of SimplifyCFG::FoldCondBranchOnPHI(), unfold; /// select if the associated PHI has at least one constant. If the unfolded; /// select is not jump-threaded, it will be folded again in the later; /// optimizations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:532,Simpl,SimplifyCFG,532,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,1,['Simpl'],['SimplifyCFG']
Usability,"/// used by operator<<(); /// simplify to use apply(i,j)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/Expression.h:30,simpl,simplify,30,math/smatrix/inc/Math/Expression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/Expression.h,1,['simpl'],['simplify']
Usability,"///////////////////////////////////////////////////////////////////////////////////////////////; // Loss Function interface for boosted decision trees. Inherits from LossFunction; ///////////////////////////////////////////////////////////////////////////////////////////////; /* Must inherit LossFunction with the virtual keyword so that we only have to implement; * the LossFunction interface once.; *; * LossFunction; * / \; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Without the virtual keyword the two would point to their own LossFunction objects; * and SomeLossFunctionBDT would have to implement the virtual functions of LossFunction twice, once; * for each object. See diagram below.; *; * LossFunction LossFunction; * | |; *SomeLossFunction LossFunctionBDT; * \ /; * \ /; * SomeLossFunctionBDT; *; * Multiple inheritance is often frowned upon. To avoid this, We could make LossFunctionBDT separate; * from LossFunction but it really is a type of loss function.; * We could also put LossFunction into LossFunctionBDT. In either of these scenarios, if you are doing; * different regression methods and want to compare the Loss this makes it more convoluted.; * I think that multiple inheritance seems justified in this case, but we could change it if it's a problem.; * Usually it isn't a big deal with interfaces and this results in the simplest code in this case.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h:1380,simpl,simplest,1380,tmva/tmva/inc/TMVA/LossFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/LossFunction.h,1,['simpl'],['simplest']
Usability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Process disconnect event; /// Clear cache data and dependent connections",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomViewer.cxx:130,Clear,Clear,130,geom/webviewer/src/RGeomViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomViewer.cxx,1,['Clear'],['Clear']
Usability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Send generic progress message to the web window; /// Should show progress bar on client side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx:165,progress bar,progress bar,165,gui/browserv7/src/RBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowser.cxx,1,['progress bar'],['progress bar']
Usability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Set handle which will be cleared when connection is closed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RCanvas.cxx:125,clear,cleared,125,graf2d/gpadv7/src/RCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RCanvas.cxx,3,['clear'],['cleared']
Usability,"//////////////////////////////////////////////////////////////////////////////////////////////; /// Set handle which will be cleared when connection is closed; /// Must be called after window is shown",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomHierarchy.cxx:125,clear,cleared,125,geom/webviewer/src/RGeomHierarchy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomHierarchy.cxx,2,['clear'],['cleared']
Usability,"//////////////////////////////////////////////////////////////////////////////////////////; /// Check if provided hash, ntry parameters from the connection request could be accepted; /// \param hash - provided hash value which should match with HMAC hash for generated before connection key; /// \param ntry - connection attempt number provided together with request, must come in increasing order; /// \param remote - boolean flag indicating if request comming from remote (via real http),; /// for local displays like Qt5 or CEF simpler connection rules are applied; /// \param test_first_time - true if hash/ntry tested for the first time, false appears only with; /// websocket when connection accepted by server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:531,simpl,simpler,531,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['simpl'],['simpler']
Usability,"//////////////////////////////////////////////////////////////////////////////////////////; /// Clear all server locations; /// Does not change configuration of already running HTTP server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx:96,Clear,Clear,96,gui/webdisplay/src/RWebWindowsManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindowsManager.cxx,1,['Clear'],['Clear']
Usability,"//////////////////////////////////////////////////////////////////////////////////////////; /// Complete websocket send operation; /// Clear ""doing send"" flag and check if next operation has to be started",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:135,Clear,Clear,135,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['Clear'],['Clear']
Usability,"/////////////////////////////////////////////////////////////////////////////////////////; /// Calculate texture dimensions to hold nel elements with given alignment on x axis.; /// Static function.; ///; /// Implementation could be improved -- now it simply goes for near-square-root(size); /// dimensions that satisfy the alignment requirement. ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveRenderData.cxx:252,simpl,simply,252,graf3d/eve7/src/REveRenderData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveRenderData.cxx,1,['simpl'],['simply']
Usability,"///////////////////////////////////////////////////////////////////////////////////////; /// Add next custom operator to painting; /// Operations are separated by semicolons; /// Following operations are supported:; /// t - text; /// h - text coded into simple hex; /// r - rectangle; /// b - rectangular fill region; /// l - polyline; /// f - poly fill region; /// m - poly marker; /// z - line attributes; /// y - fill attributes; /// x - marker attributes; /// o - text attributes; /// After operation code optional arguments can be append like length of operation or coded text; /// Each operation may use data from binary float buffer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx:254,simpl,simple,254,gui/webgui6/src/TWebPainting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx,1,['simpl'],['simple']
Usability,"///////////////////////////////////////////////////////////////////////////////////////; /// Create text operation; /// If text include special symbols - use simple hex coding",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx:158,simpl,simple,158,gui/webgui6/src/TWebPainting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebPainting.cxx,1,['simpl'],['simple']
Usability,"///////////////////////////////////////////////////////////////////////////////////; /// Finds physical node containing the point using simple algorithm (for debugging)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx:136,simpl,simple,136,geom/geom/src/TGeoParallelWorld.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx,1,['simpl'],['simple']
Usability,"/////////////////////////////////////////////////////////////////////////////////; /// Set call-back function for data, received from the clients via websocket; ///; /// Function should have signature like void func(unsigned connid, const std::string &data); /// First argument identifies connection (unique for each window), second argument is received data; ///; /// At the moment when callback is assigned, RWebWindow working thread is detected.; /// If called not from main application thread, RWebWindow::Run() function must be regularly called from that thread.; ///; /// Most simple way to assign call-back - use of c++11 lambdas like:; /// ~~~ {.cpp}; /// auto win = RWebWindow::Create();; /// win->SetDefaultPage(""file:./page.htm"");; /// win->SetDataCallBack(; /// [](unsigned connid, const std::string &data) {; /// printf(""Conn:%u data:%s\n"", connid, data.c_str());; /// }; /// );; /// win->Show();; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:583,simpl,simple,583,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['simpl'],['simple']
Usability,"/////////////////////////////////////////////////////////////////////////////////; /// Set handle which is cleared when last active connection is closed; /// Typically can be used to destroy web-based widget at such moment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:107,clear,cleared,107,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /** \class TF1; \ingroup Functions; \brief 1-Dim function class. ## TF1: 1-Dim function class. A TF1 object is a 1-Dim function defined between a lower and upper limit.; The function may be a simple function based on a TFormula expression or a precompiled user function.; The function may have associated parameters.; TF1 graphics function is via the TH1 and TGraph drawing functions. The following types of functions can be created:. 1. [Expression using variable x and no parameters](\ref F1); 2. [Expression using variable x with parameters](\ref F2); 3. [Lambda Expression with variable x and parameters](\ref F3); 4. [A general C function with parameters](\ref F4); 5. [A general C++ function object (functor) with parameters](\ref F5); 6. [A member function with parameters of a general C++ class](\ref F6). \anchor F1; ### 1 - Expression using variable x and no parameters. #### Case 1: inline expression using standard C++ functions/operators. Begin_Macro(source); {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; End_Macro. #### Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters. Begin_Macro(source); {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }; End_Macro. #### Case 3: inline expression using a user defined CLING function by name. ~~~~{.cpp}; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; ~~~~. \anchor F2; ### 2 - Expression using variable x with parameters. #### Case 1: inline expression using standard C++ functions/operators. * Example a:. ~~~~{.cpp}; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; ~~~~. This creates a function of variable x with 2 parameters. The parameters must be initialized via:. ~~~~{.cpp}; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; ~~~~. Parameters may be given a name:. ~~~~{.cpp}; fa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:274,simpl,simple,274,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphBentErrors; \ingroup Graphs; A TGraphBentErrors is a TGraph with bent, asymmetric error bars. The TGraphBentErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:; Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with bent error bars"",200,10,700,500);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; auto gr = new TGraphBentErrors(n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphBentErrors default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx:435,Simpl,Simple,435,hist/hist/src/TGraphBentErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphBentErrors.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /** \class TGraphErrors; \ingroup Graphs; A TGraphErrors is a TGraph with error bars. The TGraphErrors painting is performed thanks to the TGraphPainter; class. All details about the various painting options are given in this class. The picture below gives an example:. Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetFillColor(42);; c1->SetGrid();; c1->GetFrame()->SetFillColor(21);; c1->GetFrame()->SetBorderSize(12);; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; End_Macro; */; ////////////////////////////////////////////////////////////////////////////////; /// TGraphErrors default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx:406,Simpl,Simple,406,hist/hist/src/TGraphErrors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphErrors.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// - Existing buffers are deleted; /// - Entries, max and min are reset; /// - TRefTable is cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchRef.cxx:175,clear,cleared,175,tree/tree/src/TBranchRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchRef.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// A convenience function, does not worry about the element in; /// the parent, simply moves elements from SRC[start] to SRC[stop]; /// into the current array.; /// This should never create a full node.; /// That is, it is not used anywhere where THIS could possibly be; /// near full.; /// Does NOT handle nofKeys.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx:163,simpl,simply,163,core/cont/src/TBtree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBtree.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// A wrapper function for the more complicated interface of MeasureChars.; /// Computes how much space the given simple string needs.; ///; /// The return value is the width (in pixels) of the given string.; ///; /// string -- String whose width will be computed.; /// numChars -- Number of characters to consider from string, or < 0 for; /// strlen().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx:196,simpl,simple,196,gui/gui/src/TGFont.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Activated when user click Redo button. Repeat last Undo action.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/src/TStructViewerGUI.cxx:137,Undo,Undo,137,graf3d/gviz3d/src/TStructViewerGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/src/TStructViewerGUI.cxx,1,['Undo'],['Undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Add a branch to the list of branches to be stored in the cache; /// this is to be used by user (thats why we pass the name of the branch).; /// It works in exactly the same way as TTree::SetBranchStatus so you; /// probably want to look over there for details about the use of bname; /// with regular expressions.; /// The branches are taken with respect to the Owner of this TTreeCache; /// (i.e. the original Tree); /// NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; /// Returns:; /// - 0 branch added or already included; /// - -1 on error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:567,learn,learning,567,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Add a track to the list of tracks. Use this for primaries only. For secondaries,; /// add them to the parent track. The method create objects that are registered; /// to the analysis manager but have to be cleaned-up by the user via ClearTracks().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:319,Clear,ClearTracks,319,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['Clear'],['ClearTracks']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; /// This make it possible to group complex actions together so an end user; /// can undo and redo them with one command. Execution of TQUndoManager::Undo(),; /// TQUndoManager::Redo() methods only invokes the top level command as a whole.; ///; /// Merge method is analogous to logical join operation.; ///; /// Note: Merge method invokes redo action.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:215,undo,undo,215,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Add command to the list of merged commands.; ///; /// Option string can contain substrings:; /// - ""compress"" - try to compress input command; /// - ""radd"" - execute redo action of input command; /// - ""uadd"" - execute undo action of input command",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:305,undo,undo,305,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Add object to feedback list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:100,feedback,feedback,100,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Alters the property for the specified window and causes the X server; /// to generate a PropertyNotify event on that window.; ///; /// \param [in] id the window whose property you want to change; /// \param [in] property specifies the property name; /// \param [in] type the type of the property; the X server does not; /// interpret the type but simply passes it back to; /// an application that might ask about the window; /// properties; /// \param [in] data the property data; /// \param [in] len the length of the specified data format",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:433,simpl,simply,433,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Appends text to the end of text entry, clears the selection; /// and moves the cursor to the end of the line.; /// If necessary the text is truncated to fit MaxLength().; /// See also GetText(), InsertText(), SetText(), RemoveText().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:125,clear,clears,125,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,1,['clear'],['clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Attempt to recover file if not correctly closed; ///; /// The function returns the number of keys that have been recovered.; /// If no keys can be recovered, the file will be declared Zombie by; /// the calling function. This function is automatically called when; /// opening a file.; /// If the file is open in read only mode, the file is not modified.; /// If open in update mode and the function finds something to recover,; /// a new directory header is written to the file. When opening the file gain; /// no message from Recover will be reported.; /// If keys have been recovered, the file is usable and you can safely; /// read the corresponding objects.; /// If the file is not usable (a zombie), you can test for this case; /// with code like:; ///; /// ~~~{.cpp}; /// TFile f(""myfile.root"");; /// if (f.IsZombie()) {<actions to take if file is unusable>}; /// ~~~; ///; /// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; /// You can test if the file has been recovered with; ///; /// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; ///; /// When writing TTrees to a file, it is important to save the Tree header; /// at regular intervals (see TTree::AutoSave). If a file containing a Tree; /// is recovered, the last Tree header written to the file will be used.; /// In this case all the entries in all the branches written before writing; /// the header are valid entries.; /// One can disable the automatic recovery procedure by setting; ///; /// TFile.Recover 0; ///; /// in the <em>system.rootrc</em> file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:686,usab,usable,686,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,2,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Attempts to improve on a good local minimum; ///; /// Attempts to improve on a good local minimum by finding a; /// better one. The quadratic part of FCN is removed by MNCALF; /// and this transformed function is minimised using the simplex; /// method from several random starting points.; ///; /// ref. -- Goldstein and Price, Math.Comp. 25, 569 (1971)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:319,simpl,simplex,319,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['simpl'],['simplex']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Build a legend from the graphical objects in the pad.; ///; /// A simple method to build automatically a TLegend from the primitives in a TPad.; ///; /// Only those deriving from TAttLine, TAttMarker and TAttFill are added, excluding; /// TPave and TFrame derived classes.; ///; /// \return The built TLegend; ///; /// \param[in] x1, y1, x2, y2 The TLegend coordinates; /// \param[in] title The legend title. By default it is "" ""; /// \param[in] option The TLegend option; ///; /// The caller program owns the returned TLegend.; ///; /// If the pad contains some TMultiGraph or THStack the individual; /// graphs or histograms in them are added to the TLegend.; ///; /// ### Automatic placement of the legend; /// If `x1` is equal to `x2` and `y1` is equal to `y2` the legend will be automatically; /// placed to avoid overlapping with the existing primitives already displayed.; /// `x1` is considered as the width of the legend and `y1` the height. By default; /// the legend is automatically placed with width = `x1`= `x2` = 0.3 and; /// height = `y1`= `y2` = 0.21.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:152,simpl,simple,152,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Build coefficients.; ///; /// ~~~ {.cpp}; /// subroutine cubspl ( tau, c, n, ibcbeg, ibcend ); /// from * a practical guide to splines * by c. de boor; /// ************************ input ***************************; /// n = number of data points. assumed to be .ge. 2.; /// (tau(i), c(1,i), i=1,...,n) = abscissae and ordinates of the; /// data points. tau is assumed to be strictly increasing.; /// ibcbeg, ibcend = boundary condition indicators, and; /// c(2,1), c(2,n) = boundary condition information. specifically,; /// ibcbeg = 0 means no boundary condition at tau(1) is given.; /// in this case, the not-a-knot condition is used, i.e. the; /// jump in the third derivative across tau(2) is forced to; /// zero, thus the first and the second cubic polynomial pieces; /// are made to coincide.); /// ibcbeg = 1 means that the slope at tau(1) is made to equal; /// c(2,1), supplied by input.; /// ibcbeg = 2 means that the second derivative at tau(1) is; /// made to equal c(2,1), supplied by input.; /// ibcend = 0, 1, or 2 has analogous meaning concerning the; /// boundary condition at tau(n), with the additional infor-; /// mation taken from c(2,n).; /// *********************** output **************************; /// c(j,i), j=1,...,4; i=1,...,l (= n-1) = the polynomial coefficients; /// of the cubic interpolating spline with interior knots (or; /// joints) tau(2), ..., tau(n-1). precisely, in the interval; /// (tau(i), tau(i+1)), the spline f is given by; /// f(x) = c(1,i)+h*(c(2,i)+h*(c(3,i)+h*c(4,i)/3.)/2.); /// where h = x - tau(i). the function program *ppvalu* may be; /// used to evaluate f or its derivatives from tau,c, l = n-1,; /// and k=4.; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:204,guid,guide,204,hist/hist/src/TSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx,1,['guid'],['guide']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// CONE shape ""simplified"" constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TCONE.cxx:98,simpl,simplified,98,graf3d/g3d/src/TCONE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TCONE.cxx,1,['simpl'],['simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Cache given RooAbsArgs with this tree: The tree is; /// given direct write access of the args internal cache; /// the args values is pre-calculated for all data points; /// in this data collection. Upon a get() call, the; /// internal cache of 'newVar' will be loaded with the; /// precalculated value and it's dirty flag will be cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:416,clear,cleared,416,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Cache given RooAbsArgs: The tree is; /// given direct write access of the args internal cache; /// the args values is pre-calculated for all data points; /// in this data collection. Upon a get() call, the; /// internal cache of 'newVar' will be loaded with the; /// precalculated value and it's dirty flag will be cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx:401,clear,cleared,401,roofit/roofitcore/src/RooVectorDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Calculate range and clear pad (canvas).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:106,clear,clear,106,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string. (static function); /// - For string: i = TString::Hash(string,nstring);; /// - For int: i = TString::Hash(&intword,sizeof(int));; /// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; ///; /// This employs two different hash functions, depending on ntxt:; /// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; /// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:426,simpl,simple,426,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Called only by MNSIMP (and MNIMPR) to add a new point; ///; /// and remove an old one from the current simplex, and get the; /// estimated distance to minimum.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:189,simpl,simplex,189,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['simpl'],['simplex']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Called when display lists have been destroyed externally and the; /// internal display-list data needs to be cleare.; /// Virtual from TGLLogicalShape.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveBoxSetGL.cxx:195,clear,cleare,195,graf3d/eve/src/TEveBoxSetGL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveBoxSetGL.cxx,1,['clear'],['cleare']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Carry out the fit of the given function to the given histograms.; ///; /// If option ""I"" is used, the fit function will be averaged over the; /// bin (the default is to evaluate it simply at the bin center).; ///; /// If option ""R"" is used, the fit range will be taken from the fit; /// function (the default is to use the entire histogram).; ///; /// If option ""S"" a TFitResult object is returned and it can be used to obtain; /// additional fit information, like covariance or correlation matrix.; ///; /// Note that all parameter values, limits, and step sizes are copied; /// from the input fit function f1 (so they should be set before calling; /// this method. This is particularly relevant for the step sizes, taken; /// to be the ""error"" set on input, as a null step size usually fixes the; /// corresponding parameter. That is protected against, but in such cases; /// an arbitrary starting step size will be used, and the reliability of; /// the fit should be questioned). If parameters are to be fixed, this; /// should be done by specifying non-null parameter limits, with lower; /// limits larger than upper limits.; ///; /// On output, f1 contains the fitted parameters and errors, as well as; /// the number of degrees of freedom, and the goodness-of-fit estimator; /// as given by S. Baker and R. Cousins, Nucl. Instr. Meth. A221 (1984) 437.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:267,simpl,simply,267,hist/hist/src/TBinomialEfficiencyFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Change the circular buffer size (used for the automatic mean calculation).; /// SetMeanValue is ignored if SetBufferSize is called with a greater-than-zero; /// argument. The mean value is then automatically calculated by using the sum; /// of values contained in the buffer divided by their count.; /// To disable automatic mean calculation, simply call SetBufferSize with a zero; /// argument",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGSpeedo.cxx:429,simpl,simply,429,gui/gui/src/TGSpeedo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGSpeedo.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Change the file; ///; /// When prefetching is enabled we also need to:; /// - make sure the async thread is not doing any work; /// - clear all blocks from prefetching and read list; /// - reset the file pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFilePrefetch.cxx:220,clear,clear,220,io/io/src/TFilePrefetch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFilePrefetch.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Check if expression is in the list of defined variables.; ///; /// This member function can be overloaded in derived classes; ///; /// If you overload this member function, you also HAVE TO; /// never call the constructor:; ///; /// ~~~ {.cpp}; /// TFormula::TFormula(const char *name,const char *expression); /// ~~~; ///; /// and write your own constructor; ///; /// ~~~ {.cpp}; /// MyClass::MyClass(const char *name,const char *expression) : TFormula(); /// ~~~; ///; /// which has to call the TFormula default constructor and whose implementation; /// should be similar to the implementation of the normal TFormula constructor; ///; /// This is necessary because the normal TFormula constructor call indirectly; /// the virtual member functions Analyze, DefaultString, DefaultValue; /// and DefaultVariable.; ///; /// The expected returns values are; /// - -2 : the name has been recognized but won't be usable; /// - -1 : the name has not been recognized; /// - >=0 : the name has been recognized, return the action parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:994,usab,usable,994,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Check if fit range is usable as plot range, i.e. it is neither; /// open ended, nor empty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:108,usab,usable,108,roofit/roofitcore/src/RooAbsRealLValue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx,1,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Check if name is in the list of Tree/Branch leaves.; ///; /// This member function redefines the function in ROOT::v5::TFormula; /// If a leaf has a name corresponding to the argument name, then; /// returns a new code.; ///; /// A TTreeFormula may contain more than one variable.; /// For each variable referenced, the pointers to the corresponding; /// branch and leaf is stored in the object arrays fBranches and fLeaves.; ///; /// name can be :; /// - Leaf_Name (simple variable or data member of a ClonesArray); /// - Branch_Name.Leaf_Name; /// - Branch_Name.Method_Name; /// - Leaf_Name[index]; /// - Branch_Name.Leaf_Name[index]; /// - Branch_Name.Leaf_Name[index1]; /// - Branch_Name.Leaf_Name[][index2]; /// - Branch_Name.Leaf_Name[index1][index2]; ///; /// New additions:; /// - Branch_Name.Leaf_Name[OtherLeaf_Name]; /// - Branch_Name.Datamember_Name; /// - '.' can be replaced by '->'; ///; /// and; /// - Branch_Name[index1].Leaf_Name[index2]; /// - Leaf_name[index].Action().OtherAction(param); /// - Leaf_name[index].Action()[val].OtherAction(param); ///; /// The expected returned values are; /// - -2 : the name has been recognized but won't be usable; /// - -1 : the name has not been recognized, or is too long, or tree does not exist.; /// - >=0 : the name has been recognized, return the internal code for this name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:553,simpl,simple,553,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,2,"['simpl', 'usab']","['simple', 'usable']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Check if visual is usable, if so set fVisual, fDepth, fColormap,; /// fBlackPixel and fWhitePixel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/TGX11.cxx:105,usab,usable,105,graf2d/x11/src/TGX11.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/TGX11.cxx,1,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Check whether or not the address described by the last 3 parameters; /// matches the content of the branch. If a Data Model Evolution conversion; /// is involved, reset the fInfo of the branch.; /// The return values are:; //; /// - kMissingBranch (-5) : Missing branch; /// - kInternalError (-4) : Internal error (could not find the type corresponding to a data type number); /// - kMissingCompiledCollectionProxy (-3) : Missing compiled collection proxy for a compiled collection; /// - kMismatch (-2) : Non-Class Pointer type given does not match the type expected by the branch; /// - kClassMismatch (-1) : Class Pointer type given does not match the type expected by the branch; /// - kMatch (0) : perfect match; /// - kMatchConversion (1) : match with (I/O) conversion; /// - kMatchConversionCollection (2) : match with (I/O) conversion of the content of a collection; /// - kMakeClass (3) : MakeClass mode so we can not check.; /// - kVoidPtr (4) : void* passed so no check was made.; /// - kNoCheck (5) : Underlying TBranch not yet available so no check was made.; /// In addition this can be multiplexed with the two bits:; /// - kNeedEnableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to be in Decomposed Object (aka MakeClass) mode.; /// - kNeedDisableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to not be in Decomposed Object (aka MakeClass) mode.; /// This bits can be masked out by using kDecomposedObjMask",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1291,usab,usable,1291,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,2,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear (disable) all packages in the current session.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Clear,Clear,86,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear DL cache and reset internal point array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveJetConeGL.cxx:86,Clear,Clear,86,graf3d/eve/src/TEveJetConeGL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveJetConeGL.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear DrawElementPtrVectors and optionally resize them so that; /// they don't take more space then required by all the elements in; /// the scene's draw-list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:86,Clear,Clear,86,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear DrawElementVector fVisibleElement and optionally resize it; /// so that it doesn't take more space then required by all the; /// elements in the scene's draw-list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:86,Clear,Clear,86,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear a line of text.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGText.cxx:86,Clear,Clear,86,gui/gui/src/TGText.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGText.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear a margin stack to reclaim memory. This routine just blindly; /// pops everything off the stack. Typically used when the screen is; /// cleared or the widget is deleted, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx:86,Clear,Clear,86,gui/guihtml/src/TGHtmlLayout.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx,2,"['Clear', 'clear']","['Clear', 'cleared']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear a single navigator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:86,Clear,Clear,86,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear a window area to the background color.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/GX11Gui.cxx:86,Clear,Clear,86,graf2d/x11/src/GX11Gui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/GX11Gui.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear a window area to the bakcground color.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:86,Clear,Clear,86,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear a wrap-around obstacle. The second option determines the; /// precise behavior.; ///; /// CLEAR_Left Clear all obstacles on the left.; ///; /// CLEAR_Right Clear all obstacles on the right.; ///; /// CLEAR_Both Clear all obstacles on both sides.; ///; /// CLEAR_First Clear only the first obstacle on either side.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx:86,Clear,Clear,86,gui/guihtml/src/TGHtmlLayout.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx,5,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all baskets' state arrays.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCacheUnzip.cxx:86,Clear,Clear,86,tree/tree/src/TTreeCacheUnzip.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCacheUnzip.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all cache elements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExpensiveObjectCache.cxx:86,Clear,Clear,86,roofit/roofitcore/src/RooExpensiveObjectCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExpensiveObjectCache.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all data members which depend on the unfolding results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:86,Clear,Clear,86,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all entries for all LODs for this drawable from the; /// display list cache but keeping the reserved ids from GL context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:86,Clear,Clear,86,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all entries in the table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:86,Clear,Clear,86,core/cont/src/TRefTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all entries in this legend, including the header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLegend.cxx:86,Clear,Clear,86,graf2d/graf/src/TLegend.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLegend.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all lines in this pavetext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TPaveText.cxx:86,Clear,Clear,86,graf2d/graf/src/TPaveText.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TPaveText.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all names and alias",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTVLVContainer.cxx:86,Clear,Clear,86,tree/treeviewer/src/TTVLVContainer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTVLVContainer.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all names and aliases for expression type items",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTVLVContainer.cxx:86,Clear,Clear,86,tree/treeviewer/src/TTVLVContainer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTVLVContainer.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all navigators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:86,Clear,Clear,86,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all pre-scaling information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjections.cxx:86,Clear,Clear,86,graf3d/eve/src/TEveProjections.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjections.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear all selection objects. Can make things easier for EVE when going to; /// the next event. Still, destruction os selected object should still work; /// correctly as long as it is executed within a change cycle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:86,Clear,Clear,86,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear any sections marked valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:86,Clear,Clear,86,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear cache element with given unique ID; /// Retrieve payload object of cache element with given unique ID",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExpensiveObjectCache.cxx:86,Clear,Clear,86,roofit/roofitcore/src/RooExpensiveObjectCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExpensiveObjectCache.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear cached information matching uri",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx:86,Clear,Clear,86,proof/proof/src/TDataSetManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDataSetManager.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear content of the list view.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx:86,Clear,Clear,86,gui/sessionviewer/src/TSessionDialogs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionDialogs.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear contents",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNormSetCache.cxx:86,Clear,Clear,86,roofit/roofitcore/src/RooNormSetCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNormSetCache.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear current window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:86,Clear,Clear,86,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear entries in the TRefTable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchRef.cxx:86,Clear,Clear,86,tree/tree/src/TBranchRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchRef.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear feedback list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:86,Clear,Clear,86,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,"['Clear', 'feedback']","['Clear', 'feedback']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear given vec and if it grew too large compared to the size of; /// shape-of-interest also resize it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:86,Clear,Clear,86,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear information shown in the status bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TRootGuiBuilder.cxx:86,Clear,Clear,86,gui/guibuilder/src/TRootGuiBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TRootGuiBuilder.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear input list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:86,Clear,Clear,86,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear input object list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx:86,Clear,Clear,86,proof/proof/src/TDSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TDSet.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear internal color array.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveRGBAPalette.cxx:86,Clear,Clear,86,graf3d/eve/src/TEveRGBAPalette.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveRGBAPalette.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear internal structures and variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:86,Clear,Clear,86,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear is not allowed in this class.; /// See TList::Clear for the intended behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TViewPubDataMembers.cxx:86,Clear,Clear,86,core/meta/src/TViewPubDataMembers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TViewPubDataMembers.cxx,4,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear list containing macro files passed as program arguments.; /// This method is called from TRint::Run() to ensure that the macro; /// files are only executed the first time Run() is called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:86,Clear,Clear,86,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear log window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:86,Clear,Clear,86,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear marked region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextView.cxx:86,Clear,Clear,86,gui/gui/src/TGTextView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextView.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear mouse-over state and emit mouse-over signals.; /// Current overlay element is also told the mouse has left.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLEventHandler.cxx:86,Clear,Clear,86,graf3d/gl/src/TGLEventHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLEventHandler.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear out the existing interest box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:86,Clear,Clear,86,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear resources for consecutive fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:86,Clear,Clear,86,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear screen",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx:86,Clear,Clear,86,hist/histpainter/src/TPainter3dAlgorithms.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TPainter3dAlgorithms.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear selection if not empty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx:86,Clear,Clear,86,graf3d/eve7/src/REveSelection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSelection.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear selection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:86,Clear,Clear,86,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear statistics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx:86,Clear,Clear,86,hist/hist/src/TProfile2Poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2Poly.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear string and make sure it has a capacity of nc.; /// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); /// elements are allocated if Fatal does not abort; /// \return Resulting allocated capacity (after clamping, if needed)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:86,Clear,Clear,86,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear string without changing its capacity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:86,Clear,Clear,86,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear text buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGText.cxx:86,Clear,Clear,86,gui/gui/src/TGText.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGText.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear text edit widget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEdit.cxx:86,Clear,Clear,86,gui/gui/src/TGTextEdit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEdit.cxx,3,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear text view widget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextView.cxx:86,Clear,Clear,86,gui/gui/src/TGTextView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextView.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the GenData cache as its content is not invariant under changes in; /// the mu vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMultiVarGaussian.cxx:86,Clear,Clear,86,roofit/roofitcore/src/RooMultiVarGaussian.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMultiVarGaussian.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the cache of GCs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:86,Clear,Clear,86,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the canvases",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:86,Clear,Clear,86,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Only use this routine when your objects don't; /// allocate memory since it will not call the object dtors.; /// However, if the class in the TClonesArray implements the function; /// Clear(Option_t *option) and if option = ""C"" the function Clear(); /// is called for all objects in the array. In the function Clear(), one; /// can delete objects or dynamic arrays allocated in the class.; /// This procedure is much faster than calling TClonesArray::Delete().; /// When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; /// are in turn cleared with the option ""xyz""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:86,Clear,Clear,86,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,5,"['Clear', 'clear']","['Clear', 'cleared']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the clones array. Use this routine when your objects allocate; /// memory (e.g. objects inheriting from TNamed or containing TStrings; /// allocate memory). If not you better use Clear() since if is faster.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:86,Clear,Clear,86,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the content of all items in the list view.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx:86,Clear,Clear,86,tree/treeviewer/src/TTreeViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the content of the dataset cache, if any (matching 'dataset', if defined).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:86,Clear,Clear,86,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the current gVirtualX window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:86,Clear,Clear,86,graf2d/gpad/src/TPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the current list of physical nodes, so that we can start over with a new list.; /// If MUSTDELETE is true, delete previous nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:86,Clear,Clear,86,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the current map of threads. This will be filled again by the calling; /// threads via ThreadId calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:86,Clear,Clear,86,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the data in Object. Notice, that's not possible to change; /// the dimension of the original data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx:86,Clear,Clear,86,hist/hist/src/TPrincipal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TPrincipal.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the emulated collection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:86,Clear,Clear,86,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the event stack",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/src/TPythia8Decayer.cxx:86,Clear,Clear,86,montecarlo/pythia8/src/TPythia8Decayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/src/TPythia8Decayer.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the formula setting expression to empty and reset the variables and; /// parameters containers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:86,Clear,Clear,86,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:86,Clear,Clear,86,hist/hist/src/THnBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the list of commands to be executed on each new event.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveEventManager.cxx:86,Clear,Clear,86,graf3d/eve/src/TEveEventManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveEventManager.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the list of environment variables passed to proofserv; /// on the master and slaves",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:86,Clear,Clear,86,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the list of overlaps.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:86,Clear,Clear,86,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the list of visible volumes; /// reset the kVisOnScreen bit for volumes previously in the list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoPainter.cxx:86,Clear,Clear,86,geom/geompainter/src/TGeoPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoPainter.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the named range.; /// \note This affects **all** copies of this category, because they are sharing; /// range definitions. This ensures that categories inside a dataset and their; /// counterparts on the outside will both see a modification of the range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:86,Clear,Clear,86,roofit/roofitcore/src/RooCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the orphanage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveManager.cxx:86,Clear,Clear,86,graf3d/eve/src/TEveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveManager.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the pixmap pix.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/TGX11.cxx:86,Clear,Clear,86,graf2d/x11/src/TGX11.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/x11/src/TGX11.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the quad-set and reset the basic parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveQuadSet.cxx:86,Clear,Clear,86,graf3d/eve/src/TEveQuadSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveQuadSet.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the shape of this volume from the list held by the current manager.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:86,Clear,Clear,86,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the stack of evaluation error messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Clear,Clear,86,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear the value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx:86,Clear,Clear,86,core/cont/src/TBits.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TBits.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear tracks and particles arrays",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx:86,Clear,Clear,86,test/RootShower/MyEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/MyEvent.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear view port and redraw content.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:86,Clear,Clear,86,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear view port and redraw full content",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:86,Clear,Clear,86,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear view.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGView.cxx:86,Clear,Clear,86,gui/gui/src/TGView.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGView.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear widget state flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TGedPatternSelect.cxx:86,Clear,Clear,86,gui/ged/src/TGedPatternSelect.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TGedPatternSelect.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:86,Clear,Clear,86,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clear-color was changed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerEditor.cxx:86,Clear,Clear-color,86,graf3d/gl/src/TGLViewerEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerEditor.cxx,1,['Clear'],['Clear-color']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears eve-frame associated with this window.; /// This is used in special case when the window is embedded in a foreign; /// GUI container and gets deleted from this side.; /// In particular, this happens when TRootBrowser closes a tab.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx:86,Clear,Clears,86,graf3d/eve/src/TEveWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears the JDL information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TGridJDL.cxx:86,Clear,Clears,86,net/net/src/TGridJDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TGridJDL.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears the contents of all bins in the histogram.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:86,Clear,Clears,86,hist/hist/src/TH2Poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears the entire area in the specified window and it is equivalent to; /// ClearArea(id, 0, 0, 0, 0)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:86,Clear,Clears,86,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,2,['Clear'],"['ClearArea', 'Clears']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears the entire area of the current window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx:86,Clear,Clears,86,core/base/src/TVirtualX.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualX.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears the existing ratio.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoElement.cxx:86,Clear,Clears,86,geom/geom/src/TGeoElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoElement.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears the id-array. If ids are owned the TObjects are deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TPointSet3D.cxx:86,Clear,Clears,86,graf3d/g3d/src/TPointSet3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TPointSet3D.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears up the text entry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:86,Clear,Clears,86,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clears windows in editor tab.; /// Unmap and withdraw currently shown frames and thus prepare for; /// construction of a new class layout or destruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TGedEditor.cxx:86,Clear,Clears,86,gui/ged/src/TGedEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TGedEditor.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Clip polygon using the Sutherland-Hodgman algorithm.; ///; /// \param[in] n Number of points in the polygon to; /// be clipped; /// \param[in] x,y Polygon x[n], y[n] do be clipped vertices; /// \param[in] xclipl,yclipb,xclipr,yclipt Clipping boundary; /// \param[out] nn Number of points in xc and yc; /// \param[out] xc,yc Clipped polygon vertices. The Int_t; /// returned by this function is; /// the number of points in the clipped; /// polygon. These vectors must; /// be allocated by the calling function.; /// A size of 2*n for each is; /// enough.; ///; /// Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; /// strategy: It solves a series of simple and identical problems that, when; /// combined, solve the overall problem. The simple problem is to clip a polygon; /// against a single infinite clip edge. Four clip edges, each defining one boundary; /// of the clip rectangle, successively clip a polygon against a clip rectangle.; ///; /// Steps of Sutherland-Hodgman's polygon-clipping algorithm:; ///; /// * Polygons can be clipped against each edge of the window one at a time.; /// Windows/edge intersections, if any, are easy to find since the X or Y coordinates; /// are already known.; /// * Vertices which are kept after clipping against one window edge are saved for; /// clipping against the remaining edges.; /// * Note that the number of vertices usually changes and will often increases.; ///; /// The clip boundary determines a visible and invisible region. The edges from; /// vertex i to vertex i+1 can be one of four types:; ///; /// * Case 1 : Wholly inside visible region - save endpoint; /// * Case 2 : Exit visible region - save the intersection; /// * Case 3 : Wholly outside visible region - save nothing; /// * Case 4 : Enter visible region - save intersection and endpoint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:766,simpl,simple,766,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Close undocked frame (called via WM close button).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx:92,undo,undocked,92,gui/gui/src/TGDockableFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx,1,['undo'],['undocked']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Compile input variables and selection expression.; ///; /// varexp is an expression of the general form e1:e2:e3; /// where e1,etc is a formula referencing a combination of the columns; ///; /// Example:; ///; /// varexp = x simplest case: draw a 1-Dim distribution of column named x; /// = sqrt(x) : draw distribution of sqrt(x); /// = x*y/z; /// = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); ///; /// selection is an expression with a combination of the columns; ///; /// Example:; ///; /// selection = ""x<y && sqrt(z)>3.2""; ///; /// in a selection all the C++ operators are authorized; ///; /// Return false if any of the variable is not compilable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx:311,simpl,simplest,311,tree/treeplayer/src/TSelectorDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx,1,['simpl'],['simplest']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Compute distance from point px,py to a line.; ///; /// Compute the closest distance of approach from point px,py to elements; /// of a histogram.; /// The distance is computed in pixels units.; ///; /// #### Algorithm:; /// Currently, this simple model computes the distance from the mouse; /// to the histogram contour only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:326,simpl,simple,326,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Compute the distance from the point px,py to a line.; ///; /// Compute the closest distance of approach from point px,py to elements of; /// an histogram. The distance is computed in pixels units.; ///; /// Algorithm: Currently, this simple model computes the distance from the mouse; /// to the histogram contour only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:320,simpl,simple,320,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Compute the interval. By Default a central interval is computed; /// and the result is a SimpleInterval object.; ///; /// Using the method (to be called before SetInterval) SetLeftSideTailFraction the user can choose the type of interval.; /// By default the returned interval is a central interval with the confidence level specified; /// previously in the constructor ( LeftSideTailFraction = 0.5).; /// - For lower limit use SetLeftSideTailFraction = 1; /// - For upper limit use SetLeftSideTailFraction = 0; /// - for shortest intervals use SetLeftSideTailFraction = -1 or call the method SetShortestInterval(); ///; /// NOTE: The BayesianCalculator covers only the case with one; /// single parameter of interest; ///; /// NOTE: User takes ownership of the returned object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:175,Simpl,SimpleInterval,175,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['Simpl'],['SimpleInterval']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Computes the amount of screen space needed to display a multi-line,; /// justified string of text. Records all the measurements that were done; /// to determine to size and positioning of the individual lines of text;; /// this information can be used by the TGTextLayout::DrawText() procedure; /// to display the text quickly (without remeasuring it).; ///; /// This procedure is useful for simple widgets that want to display; /// single-font, multi-line text and want TGFont to handle the details.; ///; /// The return value is a TGTextLayout token that holds the measurement; /// information for the given string. The token is only valid for the given; /// string. If the string is freed, the token is no longer valid and must; /// also be deleted.; ///; /// The dimensions of the screen area needed to display the text are stored; /// in *width and *height.; ///; /// string -- String whose dimensions are to be computed.; /// numChars -- Number of characters to consider from string, or < 0 for; /// strlen().; /// wrapLength -- Longest permissible line length, in pixels. <= 0 means no; /// automatic wrapping: just let lines get as long as needed.; /// justify -- How to justify lines.; /// flags -- Flag bits OR-ed together. kTextIgnoreTabs means that tab; /// characters should not be expanded. kTextIgnoreNewlines; /// means that newline characters should not cause a line break.; /// width -- Filled with width of string.; /// height -- Filled with height of string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx:478,simpl,simple,478,gui/gui/src/TGFont.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Configuration of guides GUI called from SetModel().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerEditor.cxx:103,guid,guides,103,graf3d/gl/src/TGLViewerEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerEditor.cxx,1,['guid'],['guides']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; /// all cache elements will be cleared when a server redirect is intercepted by the cache manager.; /// This is the default strategy and should only be overridden when you really understand; /// what you're doing as properly implementing server redirect in cache elements can get very; /// complicated, especially if there are (cyclical) reference back to the owning object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooObjCacheManager.cxx:142,clear,clearCacheOnServerRedirect,142,roofit/roofitcore/src/RooObjCacheManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooObjCacheManager.cxx,2,['clear'],"['clearCacheOnServerRedirect', 'cleared']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. clname - class name.; /// 2. obj - an object; /// 3. redo - method or function to do/redo operation; /// 4. undo - method or function to undo operation; ///; /// Comments:; /// - if either clname or obj is NULL that means that redo/undo is function; /// - to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; /// undo method can be same as redo one. In that case undo parameter; /// can be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:243,undo,undo,243,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,6,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Constructor.; ///; /// Input parameters:; /// 1. obj - an object; /// 2. redo - method or function to do/redo operation; /// 3. undo - method or function to undo operation; ///; /// Comments:; /// to specify default arguments for redo/undo method/function; /// '=' must precede to argument value.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; /// ~~~; ///; /// undo method can be same as redo one. In that case ""undo""; /// can parameter be omitted.; ///; /// Example:; /// ~~~ {.cpp}; /// TQCommand(gPad, ""SetFillStyle(Style_t)"");; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:214,undo,undo,214,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,5,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Continues previously paused replaying",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:107,pause,paused,107,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,1,['pause'],['paused']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Converts Geant3 particle codes to PDG convention. (Geant4 uses; /// PDG convention already); /// Source: BaBar User Guide, Neil I. Geddes,; ///; /// see <A href=""http://www.slac.stanford.edu/BFROOT/www/Computing/Environment/NewUser/htmlbug/node51.html""> Conversion table</A>; ///; /// with some fixes by PB, marked with (PB) below. Checked against; /// PDG listings from 2000.; ///; /// Paul Balm, Nov 19, 2001",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TDatabasePDG.cxx:202,Guid,Guide,202,montecarlo/eg/src/TDatabasePDG.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/eg/src/TDatabasePDG.cxx,1,['Guid'],['Guide']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Copy track parameters from t. Track-propagator is set, too.; /// PathMarks are cleared - you can copy them via SetPathMarks(t).; /// If track 't' is locked, you should probably clone its points; /// over - use REvePointSet::ClonePoints(t);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveTrack.cxx:165,clear,cleared,165,graf3d/eve7/src/REveTrack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveTrack.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Copy track parameters from t. Track-propagator is set, too.; /// PathMarks are cleared - you can copy them via SetPathMarks(t).; /// If track 't' is locked, you should probably clone its points; /// over - use TEvePointSet::ClonePoints(t);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTrack.cxx:165,clear,cleared,165,graf3d/eve/src/TEveTrack.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTrack.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create ""Guides"" tab.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerEditor.cxx:94,Guid,Guides,94,graf3d/gl/src/TGLViewerEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewerEditor.cxx,1,['Guid'],['Guides']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create a RooFit PDF that makes `ftor` usable as a PDF in RooFit.; /// \param name Name of the object.; /// \param title Title (e.g. for plotting); /// \param ftor Functor instance to be evaluated and normalised.; /// \param v RooFit variables to be passed to the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooFunctorBinding.cxx:124,usab,usable,124,roofit/roofit/src/RooFunctorBinding.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooFunctorBinding.cxx,1,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create a RooFit function that makes `ftor` usable in RooFit.; /// \param name Name of the object.; /// \param title Title (e.g. for plotting); /// \param ftor Functor instance to be evaluated.; /// \param v RooFit variables to be passed to the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooFunctorBinding.cxx:129,usab,usable,129,roofit/roofit/src/RooFunctorBinding.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooFunctorBinding.cxx,1,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create a RooPlot of the pull distribution for the given; /// parameter. The range lo-hi is plotted in nbins. If fitGauss is; /// set, an unbinned ML fit of the distribution to a Gaussian p.d.f; /// is performed. The fit result is overlaid on the returned RooPlot; /// and a box with the fitted mean and sigma is added.; ///; /// If the parameters of the models for generation and fit differ, simple heuristics are used to find the; /// corresponding parameters:; /// - Parameters have the same name: They will be used to compute pulls.; /// - Parameters have different names: The position of the fit parameter in the set of fit parameters will be; /// computed. The parameter at the same position in the set of generator parameters will be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx:478,simpl,simple,478,roofit/roofitcore/src/RooMCStudy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCStudy.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create a function which returns binewise-values; /// This class contains N RooAbsReals's, one for each; /// bin from the given RooRealVar.; ///; /// The value of the function in the ith bin is; /// given by:; ///; /// F(i) = gamma_i * nominal(i); ///; /// Where the nominal values are simply fixed; /// numbers (default = 1.0 for all i)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx:371,simpl,simply,371,roofit/histfactory/src/ParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create a kd-tree from the provided data array. This function only sets the data,; /// call Build() to build the tree!!!; /// Parameters:; /// - npoints - total number of points. Adding points after the tree is built is not supported; /// - ndim - number of dimensions; /// - bsize - maximal number of points in the terminal nodes; /// - data - the data array; ///; /// The data should be placed columnwise (like in a TTree).; /// The columnwise orientation is chosen to simplify the usage together with TTree::GetV1() like functions.; /// An example of filling such an array for a 2d case:; /// Double_t **data = new Double_t*[2];; /// data[0] = new Double_t[npoints];; /// data[1] = new Double_t[npoints];; /// for (Int_t i=0; i<npoints; i++){; /// data[0][i]=gRandom->Uniform(-1, 1); //fill the x-coordinate; /// data[1][i]=gRandom->Uniform(-1, 1); //fill the y-coordinate; /// }; ///; /// By default, the kd-tree doesn't own the data. If you want the kd-tree to delete the data array, call; /// kdtree->SetOwner(kTRUE).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:556,simpl,simplify,556,math/mathcore/src/TKDTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx,1,['simpl'],['simplify']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create a new TTree Branch.; ///; /// This Branch constructor is provided to support non-objects in; /// a Tree. The variables described in leaflist may be simple; /// variables or structures. // See the two following; /// constructors for writing objects in a Tree.; ///; /// By default the branch buffers are stored in the same file as the Tree.; /// use TBranch::SetFile to specify a different file; ///; /// * address is the address of the first item of a structure.; /// * leaflist is the concatenation of all the variable names and types; /// separated by a colon character :; /// The variable name and the variable type are separated by a slash (/).; /// The variable type may be 0,1 or 2 characters. If no type is given,; /// the type of the variable is assumed to be the same as the previous; /// variable. If the first variable does not have a type, it is assumed; /// of type F by default. The list of currently supported types is given below:; /// - `C` : a character string terminated by the 0 character; /// - `B` : an 8 bit signed integer (`Char_t`); Treated as a character when in an array.; /// - `b` : an 8 bit unsigned integer (`UChar_t`); /// - `S` : a 16 bit signed integer (`Short_t`); /// - `s` : a 16 bit unsigned integer (`UShort_t`); /// - `I` : a 32 bit signed integer (`Int_t`); /// - `i` : a 32 bit unsigned integer (`UInt_t`); /// - `F` : a 32 bit floating point (`Float_t`); /// - `f` : a 24 bit floating point with truncated mantissa (`Float16_t`); /// - `D` : a 64 bit floating point (`Double_t`); /// - `d` : a 24 bit truncated floating point (`Double32_t`); /// - `L` : a 64 bit signed integer (`Long64_t`); /// - `l` : a 64 bit unsigned integer (`ULong64_t`); /// - `G` : a long signed integer, stored as 64 bit (`Long_t`); /// - `g` : a long unsigned integer, stored as 64 bit (`ULong_t`); /// - `O` : [the letter `o`, not a zero] a boolean (`bool`); ///; /// Arrays of values ar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:241,simpl,simple,241,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create or simply read branches from an input stream.; ///; /// \see reference information for TTree::ReadFile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:96,simpl,simply,96,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create or simply read branches from filename.; ///; /// if branchDescriptor = """" (default), it is assumed that the Tree descriptor; /// is given in the first line of the file with a syntax like; /// ~~~ {.cpp}; /// A/D:Table[2]/F:Ntracks/I:astring/C; /// ~~~; /// otherwise branchDescriptor must be specified with the above syntax.; ///; /// - If the type of the first variable is not specified, it is assumed to be ""/F""; /// - If the type of any other variable is not specified, the type of the previous; /// variable is assumed. eg; /// - `x:y:z` (all variables are assumed of type ""F""); /// - `x/D:y:z` (all variables are of type ""D""); /// - `x:y/D:z` (x is type ""F"", y and z of type ""D""); ///; /// delimiter allows for the use of another delimiter besides whitespace.; /// This provides support for direct import of common data file formats; /// like csv. If delimiter != ' ' and branchDescriptor == """", then the; /// branch description is taken from the first line in the file, but; /// delimiter is used for the branch names tokenization rather than ':'.; /// Note however that if the values in the first line do not use the; /// /[type] syntax, all variables are assumed to be of type ""F"".; /// If the filename ends with extensions .csv or .CSV and a delimiter is; /// not specified (besides ' '), the delimiter is automatically set to ','.; ///; /// Lines in the input file starting with ""#"" are ignored. Leading whitespace; /// for each column data is skipped. Empty lines are skipped.; ///; /// A TBranch object is created for each variable in the expression.; /// The total number of rows read from the file is returned.; ///; /// ## FILLING a TTree WITH MULTIPLE INPUT TEXT FILES; ///; /// To fill a TTree with multiple input text files, proceed as indicated above; /// for the first input file and omit the second argument for subsequent calls; /// ~~~ {.cpp}; /// T.ReadFile(""file1.dat"",""branch descri",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:96,simpl,simply,96,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create progress bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:93,progress bar,progress bar,93,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create simple input dialog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TTreeInput.cxx:93,simpl,simple,93,gui/fitpanel/src/TTreeInput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TTreeInput.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create simple input dialog.; ///; /// It is important to know that the case where the constructor in; /// which all the variables are initialized to their default values is; /// only used for the TBrowser to inspect on the classes. For normal; /// use the only variable that should be free is options.; ///; /// Variables prompt, defval are the content of the input dialog while; /// retstr has to be initialized to a char[256]. In case these are not; /// initialized, they will show default values while retstr will be; /// automatically allocated by the dialog. However this will make; /// impossible to retrieve the value entered by the dialog.; ///; /// To see TGInputDialog in use see:; /// $ROOTSYS/tutorials/testInputDialog.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGInputDialog.cxx:93,simpl,simple,93,gui/gui/src/TGInputDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGInputDialog.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create the undocked (transient) frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx:97,undo,undocked,97,gui/gui/src/TGDockableFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx,1,['undo'],['undocked']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Create/destroy a named canvas for feedback",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:120,feedback,feedback,120,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// CreateWidget.; /// Static function called prior to widget construction,; /// I've extracted this code from ctors to make WIN32/X11; /// separation simpler and because of gInterpreter usage.; /// new, TGLContext can throw; /// std::bad_alloc and std::runtime_error. Before try block, the only; /// resource allocated is pointed by fWindowIndex (InitWindow cannot throw).; /// In try block (and after successful constraction); /// resources are controlled by std::auto_ptrs and dtor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLWidget.cxx:233,simpl,simpler,233,graf3d/gl/src/TGLWidget.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLWidget.cxx,1,['simpl'],['simpler']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Creates TSQLObjectData for specified object id and specified class; ///; /// Object data for each class can be stored in two different tables.; /// First table contains data in column-wise form for simple types like integer,; /// strings and so on when second table contains any other data which cannot; /// be converted into column-wise representation.; /// TSQLObjectData will contain results of the requests to both such tables for; /// concrete object id.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TBufferSQL2.cxx:284,simpl,simple,284,io/sql/src/TBufferSQL2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TBufferSQL2.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:144,intuit,intuitively,144,roofit/roofitcore/src/RooAddModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx,1,['intuit'],['intuitively']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:142,intuit,intuitively,142,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,1,['intuit'],['intuitively']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMappedCategory.cxx:150,intuit,intuitively,150,roofit/roofitcore/src/RooMappedCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMappedCategory.cxx,1,['intuit'],['intuitively']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx:146,intuit,intuitively,146,roofit/roofitcore/src/RooFFTConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx,2,['intuit'],['intuitively']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooProdPdf to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:143,intuit,intuitively,143,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['intuit'],['intuitively']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx:143,intuit,intuitively,143,roofit/roofitcore/src/RooProduct.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx,1,['intuit'],['intuitively']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; /// integration operation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx:148,intuit,intuitively,148,roofit/roofitcore/src/RooProjectedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx,2,['intuit'],['intuitively']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealSumPdf.cxx:146,intuit,intuitively,146,roofit/roofitcore/src/RooRealSumPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealSumPdf.cxx,1,['intuit'],['intuitively']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Default ctor. Create a TTimeStamp and set it to the current time; /// (as best possible). The nanosecond part is faked so that subsequent; /// calls simply add 1 to ensure that sequential calls are distinct; /// (and sortable).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:235,simpl,simply,235,core/base/src/TTimeStamp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Define the options (their key words) that can be set in the option string.; ///; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - SeparationType the separation criterion applied in the node splitting.; /// known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - nEventsMin: the minimum number of events in a node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method:; /// known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:767,simpl,simply,767,tmva/tmva/src/MethodDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Delete all input controls. This happens when the TGHtml widget; /// is cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlForm.cxx:157,clear,cleared,157,gui/guihtml/src/TGHtmlForm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlForm.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Delete all pad primitives.; ///; /// If the bit kClearAfterCR has been set for this pad, the Clear function; /// will execute only after having pressed a CarriageReturn; /// Set the bit with `mypad->SetBit(TPad::kClearAfterCR)`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:179,Clear,Clear,179,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Delete draw feedback object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:98,feedback,feedback,98,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Delete undocked frame. Puts back dockable frame in its original container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx:93,undo,undocked,93,gui/gui/src/TGDockableFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx,1,['undo'],['undocked']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Deselect element indicated by the entry and clear its; /// implied-selected set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveSelection.cxx:130,clear,clear,130,graf3d/eve/src/TEveSelection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveSelection.cxx,2,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Display feedback",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TDrawFeedback.cxx:94,feedback,feedback,94,proof/proofplayer/src/TDrawFeedback.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TDrawFeedback.cxx,2,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Display function,; /// - option ""d"" .. debug output; /// - anything else .. simply print URI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:162,simpl,simply,162,core/base/src/TUri.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Disposes of all objects and clears array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/gui/src/TToggleGroup.cxx:114,clear,clears,114,core/gui/src/TToggleGroup.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/gui/src/TToggleGroup.cxx,1,['clear'],['clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Draw a normalized copy of this histogram.; ///; /// A clone of this histogram is normalized to norm and drawn with option.; /// A pointer to the normalized histogram is returned.; /// The contents of the histogram copy are scaled such that the new; /// sum of weights (excluding under and overflow) is equal to norm.; /// Note that the returned normalized histogram is not added to the list; /// of histograms in the current directory in memory.; /// It is the user's responsibility to delete this histogram.; /// The kCanDelete bit is set for the returned object. If a pad containing; /// this copy is cleared, the histogram will be automatically deleted.; ///; /// See Draw for the list of options",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:689,clear,cleared,689,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Draw feedback creation proxy. When accessed via TProof avoids; /// link dependency on libProofPlayer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:91,feedback,feedback,91,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Draw horizontal progress bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:102,progress bar,progress bar,102,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Draw simple xyz-axes for given bounding-box.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:91,simpl,simple,91,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Draw this histogram with options.; ///; /// Histograms are drawn via the THistPainter class. Each histogram has; /// a pointer to its own painter (to be usable in a multithreaded program).; /// The same histogram can be drawn with different options in different pads.; /// When a histogram drawn in a pad is deleted, the histogram is; /// automatically removed from the pad or pads where it was drawn.; /// If a histogram is drawn in a pad, then filled again, the new status; /// of the histogram will be automatically shown in the pad next time; /// the pad is updated. One does not need to redraw the histogram.; /// To draw the current version of a histogram in a pad, one can use; /// `h->DrawCopy();`; /// This makes a clone of the histogram. Once the clone is drawn, the original; /// histogram may be modified or deleted without affecting the aspect of the; /// clone.; /// By default, TH1::Draw clears the current pad.; ///; /// One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; /// value for the maximum or the minimum scale on the plot.; ///; /// TH1::UseCurrentStyle can be used to change all histogram graphics; /// attributes to correspond to the current selected style.; /// This function must be called for each histogram.; /// In case one reads and draws many histograms from a file, one can force; /// the histograms to inherit automatically the current graphics style; /// by calling before gROOT->ForceStyle();; ///; /// See the THistPainter class for a description of all the drawing options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:239,usab,usable,239,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,"['clear', 'usab']","['clears', 'usable']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Draw vertical progress bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:100,progress bar,progress bar,100,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Draws the distribution (on the test sample) of the; /// impact on the network output of a small variation of; /// each input.; /// DrawDInputs() draws something that approximates the distribution of the; /// derivative of the NN w.r.t. each input. That quantity is recognized as; /// one of the measures to determine key quantities in the network.; ///; /// What is done is to vary one input around its nominal value and to see; /// how the NN changes. This is done for each entry in the sample and produces; /// a distribution.; ///; /// What you can learn from that is:; /// - is variable a really useful, or is my network insensitive to it ?; /// - is there any risk of big systematic ? Is the network extremely sensitive; /// to small variations of any of my inputs ?; ///; /// As you might understand, this is to be considered with care and can serve; /// as input for an ""educated guess"" when optimizing the network.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx:638,learn,learn,638,math/mlp/src/TMLPAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMLPAnalyzer.cxx,1,['learn'],['learn']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Emit Undocked() signal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGSplitFrame.cxx:91,Undo,Undocked,91,gui/gui/src/TGSplitFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGSplitFrame.cxx,2,['Undo'],['Undocked']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Emit pad Cleared signal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:95,Clear,Cleared,95,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['Clear'],['Cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Enable undocking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx:93,undo,undocking,93,gui/gui/src/TGDockableFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx,1,['undo'],['undocking']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Equal comparison. The commands are equal if they are; /// applied to the same object and have the same Redo/Undo actions; ///; /// More complicated commands might want to override this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:194,Undo,Undo,194,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['Undo'],['Undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Erase all HTML from this widget and clear the screen. This is; /// typically done before loading a new document.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:122,clear,clear,122,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate all test statistics, returning result and any detailed output.; /// PDF parameter values are saved in case they are modified by; /// TestStatistic::Evaluate (eg. SimpleLikelihoodRatioTestStat).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:257,Simpl,SimpleLikelihoodRatioTestStat,257,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate the class of the operation oper.; ///; /// If the 'value' in the requested operation is a simple pointer to an object,; /// this function returns the TClass corresponding to its type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:185,simpl,simple,185,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate the class of this treeformula.; ///; /// If the 'value' of this formula is a simple pointer to an object,; /// this function returns the TClass corresponding to its type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:172,simpl,simple,172,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Execute SIMPLEX. Changes in parameter values; /// and calculated errors are automatically; /// propagated back the RooRealVars representing; /// the floating parameters in the MINUIT operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:94,SIMPL,SIMPLEX,94,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['SIMPL'],['SIMPLEX']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Expand or shrink the array to n elements and create the clone; /// objects by calling their default ctor. If n is less than the current size; /// the array is shrunk but the allocated space is _not_ freed.; /// This routine is typically used to create a clonesarray into which; /// one can directly copy object data without going via the; /// ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; /// This is a simplified version of ExpandCreate used in the TTree mechanism.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:509,simpl,simplified,509,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['simpl'],['simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Extract from opt in optfb information about wanted feedback settings.; /// Feedback are removed from the input string opt.; /// If action == 0, set up feedback accordingly, if action == 1 clean related; /// feedback settings (using info in optfb, if available, or reparsing opt).; ///; /// Feedback requirements are in the form; ///; /// <previous_option>fb=name1,name2,name3,... <next_option>; /// <previous_option>feedback=name1,name2,name3,...;<next_option>; ///; /// The special name 'stats' triggers feedback about events and packets.; /// The separator from the next option is either a ' ' or a ';'.; /// Called interanally by TProof::Process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:137,feedback,feedback,137,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,7,"['Feedback', 'feedback']","['Feedback', 'feedback']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Extracts functors from formula, and put them in fFuncs.; /// Simple grammar:; /// - `<function>` := name(arg1,arg2...); /// - `<variable>` := name; /// - `<parameter>` := [number]; /// - `<name>` := String containing lower and upper letters, numbers, underscores; /// - `<number>` := Integer number; /// Operators are omitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:147,Simpl,Simple,147,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Feedback function connected to Feedback signal.; /// Used to update feedback histograms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:86,Feedback,Feedback,86,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,3,"['Feedback', 'feedback']","['Feedback', 'feedback']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Feedback signal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:86,Feedback,Feedback,86,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['Feedback'],['Feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Fill all branches.; ///; /// This function loops on all the branches of this tree. For; /// each branch, it copies to the branch buffer (basket) the current; /// values of the leaves data types. If a leaf is a simple data type,; /// a simple conversion to a machine independent format has to be done.; ///; /// This machine independent version of the data is copied into a; /// basket (each branch has its own basket). When a basket is full; /// (32k worth of data by default), it is then optionally compressed; /// and written to disk (this operation is also called committing or; /// 'flushing' the basket). The committed baskets are then; /// immediately removed from memory.; ///; /// The function returns the number of bytes committed to the; /// individual branches.; ///; /// If a write error occurs, the number of bytes returned is -1.; ///; /// If no data are written, because, e.g., the branch is disabled,; /// the number of bytes returned is 0.; ///; /// __The baskets are flushed and the Tree header saved at regular intervals__; ///; /// At regular intervals, when the amount of data written so far is; /// greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk.; /// This makes future reading faster as it guarantees that baskets belonging to nearby; /// entries will be on the same disk region.; /// When the first call to flush the baskets happen, we also take this opportunity; /// to optimize the baskets buffers.; /// We also check if the amount of data written is greater than fAutoSave (see SetAutoSave).; /// In this case we also write the Tree header. This makes the Tree recoverable up to this point; /// in case the program writing the Tree crashes.; /// The decisions to FlushBaskets and Auto Save can be made based either on the number; /// of bytes written (fAutoFlush and fAutoSave negative) or on the number of entries; /// written (fAutoFlush and fAutoSave po",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:296,simpl,simple,296,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Fill histogram following distribution in histogram h.; ///; /// @param h : Histogram pointer used for sampling random number; /// @param ntimes : number of times the histogram is filled; /// @param rng : (optional) Random number generator used for sampling; ///; /// The distribution contained in the histogram h (TH1) is integrated; /// over the channel contents for the bin range of this histogram.; /// It is normalized to 1.; ///; /// Getting one random number implies:; /// - Generating a random number between 0 and 1 (say r1); /// - Look in which bin in the normalized integral r1 corresponds to; /// - Fill histogram channel ntimes random numbers are generated; ///; /// SPECIAL CASE when the target histogram has the same binning as the source.; /// in this case we simply use a poisson distribution where; /// the mean value per bin = bincontent/integral.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:861,simpl,simply,861,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Fill scene-info with information needed for rendering, take into; /// account the render-context (viewer state, camera, clipping).; /// Usually called from TGLViewer before rendering a scene if some; /// moderately significant part of render-context has changed.; ///; /// Here we update the basic state (clear last-LOD, mark the time,; /// set global <-> scene transformation matrices) and potentially; /// study and refine the clipping planes based on scene bounding box.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLSceneBase.cxx:391,clear,clear,391,graf3d/gl/src/TGLSceneBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLSceneBase.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Fill the array stats from the contents of this histogram; /// The array stats must be correctly dimensioned in the calling program.; /// ~~~ {.cpp}; /// stats[0] = sumw; /// stats[1] = sumw2; /// stats[2] = sumwx; /// stats[3] = sumwx2; /// stats[4] = sumwy; /// stats[5] = sumwy2; /// stats[6] = sumwxy; /// ~~~; ///; /// If no axis-subranges are specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If sub-ranges are specified, the function recomputes these quantities; /// from the bin contents in the current axis ranges.; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined ranges (see TAxis::SetRange). By default the ranges include; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:491,simpl,simply,491,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Fill the array stats from the contents of this profile.; /// The array stats must be correctly dimensioned in the calling program.; ///; /// - stats[0] = sumw; /// - stats[1] = sumw2; /// - stats[2] = sumwx; /// - stats[3] = sumwx2; /// - stats[4] = sumwy; /// - stats[5] = sumwy2; /// - stats[6] = sumwxy; /// - stats[7] = sumwz; /// - stats[8] = sumwz2; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:531,simpl,simply,531,hist/hist/src/TProfile2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx,2,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Fix the size of the undocked frame so it cannot be changed via the WM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx:106,undo,undocked,106,gui/gui/src/TGDockableFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx,1,['undo'],['undocked']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, it is the callers; /// responsibility to insure that the object is returned to a known state,; /// usually by calling the Clear method on the TClonesArray.; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:419,Clear,Clear,419,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Get an object at index 'idx' that is guaranteed to have been constructed.; /// It might be either a freshly allocated object or one that had already been; /// allocated (and assumingly used). In the later case, the function Clear; /// will be called and passed the value of 'clear_options'; ///; /// Tests to see if the destructor has been called on the object.; /// If so, or if the object has never been constructed the class constructor is called using; /// New(). If not, return a pointer to the correct memory location.; /// This explicitly to deal with TObject classes that allocate memory; /// which will be reset (but not deallocated) in their Clear(); /// functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:310,Clear,Clear,310,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,2,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Get fProcessGUIDs' index of the TProcessID with GUID guid",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:134,GUID,GUID,134,core/cont/src/TRefTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx,2,"['GUID', 'guid']","['GUID', 'guid']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Get list of feedback objects. Connect a slot to this signal; /// to monitor the feedback object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:98,feedback,feedback,98,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Get selection level, needed for rendering selection and; /// highlight feedback.; /// This should go to TAtt3D.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveElement.cxx:157,feedback,feedback,157,graf3d/eve/src/TEveElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveElement.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Get the index for fProcessIDs, fAllocSize, etc given a PID.; /// Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx:188,GUID,GUID,188,core/cont/src/TRefTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TRefTable.cxx,2,['GUID'],['GUID']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Get the inverse rotation matrix (which is simply the transpose)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx:128,simpl,simply,128,geom/geom/src/TGeoMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Get the target data members of this rule as a simple string (i.e. the in memory data member).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx:132,simpl,simple,132,core/meta/src/TSchemaRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TSchemaRule.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Gets Bezier smoothing switch:; /// - bezier - determines Bezier interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:182,simpl,simple,182,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Gets display group mode and display mode:; /// -modeGroup - the following group modes might have been set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; /// -displayMode - display modes that might have been set: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:193,simpl,simple,193,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Global function which simplifies making connection in interpreted ROOT session; ///; /// ConnectCINT - connects to interpreter(CINT) command",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx:108,simpl,simplifies,108,core/base/src/TQObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQObject.cxx,1,['simpl'],['simplifies']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Handle feedback histograms configuration menu.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,feedback,feedback,93,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Handle selection clear event.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:103,clear,clear,103,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,2,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Horizontal progress bar constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:97,progress bar,progress bar,97,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// If clearOnRedirect is false, forward constant term optimization calls to; /// cache elements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooObjCacheManager.cxx:89,clear,clearOnRedirect,89,roofit/roofitcore/src/RooObjCacheManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooObjCacheManager.cxx,1,['clear'],['clearOnRedirect']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// If the content is a simple numerical value, return its type (see TDataType)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx:106,simpl,simple,106,io/io/src/TGenCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TGenCollectionProxy.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// If the element to browse (given by either parent of branch) contains; /// a collection (TClonesArray or something for which a TVirtualCollectionProxy; /// exists), we will add some special objects to the browser. For now there is; /// just one object ""@size"", returning the size of the collection (as in; /// std::list::size(), or TClonesArray::GetEntries()).; /// The objects we create are simply used to forward strings (like ""@size"") to; /// TTreeFormula via our Browse method. These strings are stored in fName.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx:477,simpl,simply,477,tree/tree/src/TBranchBrowsable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Imports the content of 'output' in the internal output list. Existing content; /// in the output list is discarded (unless found also in 'output').; /// In particular, if 'output' is nullptr or empty, reset the internal list.; /// On return, the content of 'output' is cleared to avoid double deletion issues.; /// (The caller is responsible of 'output' as container: its content is transferred; /// under the selector ownership).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TSelector.cxx:355,clear,cleared,355,tree/tree/src/TSelector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TSelector.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// In the solids section of the GDML file, an ellipsoid may be declared.; /// Unfortunately, the ellipsoid is not supported under ROOT so,; /// when the ellipsoid keyword is found, this function is called; /// to convert it to a simple box with similar dimensions, and the; /// dimensions required are taken and stored, these are then bound and; /// converted to type TGeoBBox and stored in fsolmap map using the name; /// as its key.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLParse.cxx:312,simpl,simple,312,geom/gdml/src/TGDMLParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLParse.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// In the solids section of the GDML file, an elliptical cone may be declared.; /// Unfortunately, the elliptical cone is not supported under ROOT so,; /// when the elcone keyword is found, this function is called; /// to convert it to a simple box with similar dimensions, and the; /// dimensions required are taken and stored, these are then bound and; /// converted to type TGeoBBox and stored in fsolmap map using the name; /// as its key.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLParse.cxx:321,simpl,simple,321,geom/gdml/src/TGDMLParse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLParse.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Inform context that pad deleted or will be deleted soon; /// Reference on that pad should be cleared",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPad.cxx:179,clear,cleared,179,core/base/src/TVirtualPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualPad.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Initialize parser parameters, such as, disactivate non-standards libxml1; /// features, on/off validation, clear error and warning messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TXMLParser.cxx:193,clear,clear,193,io/xmlparser/src/TXMLParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xmlparser/src/TXMLParser.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Inserts text at position pos, clears the selection and moves; /// the cursor to the end of the line.; /// If necessary the text is truncated to fit MaxLength().; /// See also GetText(), SetText(), AppendText(), RemoveText().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:116,clear,clears,116,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,1,['clear'],['clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Instantiates the neurons in input; /// Inputs are normalised and the type is set to kOff; /// (simple forward of the formula value)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:181,simpl,simple,181,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the TGraph data within a given (index) range.; /// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; /// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; /// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; /// with the first one. It is clear that the order of the point is essential in defining the polygon.; /// Also note that the segments should not intersect.; ///; /// NB:; /// - if last=-1 (default) last is set to the last point.; /// - if (first <0) the first point (0) is taken.; ///; /// ### Method:; ///; /// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; /// you have to deal with. The most evident solution would be to divide the polygon in triangles and; /// calculate the surface of them. But this can quickly become complicated as you will have to test; /// every segments of every triangles and check if they are intersecting with a current polygon's; /// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; ///; /// ### The solution (implemented by R.Brun); /// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; /// segments don't intersect.; /// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; /// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; /// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; ///; /// ### Sources; /// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; /// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:502,clear,clear,502,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Intercept server redirect calls. If clearOnRedirect was set, sterilize; /// the cache (i.e. keep the structure but delete all contents). If not; /// forward serverRedirect to cache elements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooObjCacheManager.cxx:122,clear,clearOnRedirect,122,roofit/roofitcore/src/RooObjCacheManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooObjCacheManager.cxx,1,['clear'],['clearOnRedirect']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Interface to TTreeCache to set the number of entries for the learning phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:147,learn,learning,147,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// It opens the online reference guide, generated with Doxygen, for the; /// chosen scope (class/namespace/struct) or member (method/function/; /// data member/enumeration/enumerator. If the user types incorrect value,; /// it will return an error or warning.; ///; /// \param[in] strippedClass the scope or scope::member",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:116,guid,guide,116,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['guid'],['guide']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Keep the same canvas size while docking/undocking toolbar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootCanvas.cxx:126,undo,undocking,126,gui/gui/src/TRootCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootCanvas.cxx,1,['undo'],['undocking']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Merge feedback lists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:92,feedback,feedback,92,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Minimization function for Graphs using a Chisquare method.; /// In case of a TGraphErrors object, ex, the error along x, is projected; /// along the y-direction by calculating the function at the points x-exlow and; /// x+exhigh.; ///; /// The chisquare is computed as the sum of the quantity below at each point:; ///; /// (y - f(x))**2; /// -----------------------------------; /// ey**2 + (0.5*(exl + exh)*f'(x))**2; ///; /// where x and y are the point coordinates and f'(x) is the derivative of function f(x).; /// This method to approximate the uncertainty in y because of the errors in x, is called; /// ""effective variance"" method.; /// The improvement, compared to the previously used method (f(x+ exhigh) - f(x-exlow))/2; /// is of (error of x)**2 order.; ///; /// NOTE:; ///; /// 1. By using the ""effective variance"" method a simple linear regression; /// becomes a non-linear case , which takes several iterations; /// instead of 0 as in the linear case .; ///; /// 2. The effective variance technique assumes that there is no correlation; /// between the x and y coordinate .; ///; /// In case the function lies below (above) the data point, ey is ey_low (ey_high).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:923,simpl,simple,923,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Minimization using the simplex method of Nelder and Mead; ///; /// Performs a minimization using the simplex method of Nelder; /// and Mead (ref. -- Comp. J. 7,308 (1965)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:109,simpl,simplex,109,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,2,['simpl'],['simplex']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Move past obstacles until a linewidth of reqWidth is obtained,; /// or until all obstacles are cleared.; ///; /// reqWidth - Requested line width; /// pX, pY, pW - The margins. See ComputeMargins()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx:181,clear,cleared,181,gui/guihtml/src/TGHtmlLayout.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// One-dimensional markov spectrum smoothing function; ///; /// This function calculates smoothed spectrum from source spectrum based on; /// Markov chain method. The result is placed in the array pointed by source; /// pointer. On successful completion it returns 0. On error it returns pointer; /// to the string describing error.; ///; /// #### Parameters:; ///; /// - source: pointer to the array of source spectrum; /// - ssize: length of source array; /// - averWindow: width of averaging smoothing window; ///; /// The goal of this function is the suppression of the statistical fluctuations.; /// The algorithm is based on discrete Markov chain, which has very simple; /// invariant distribution:; ///; /// \f[; /// U_2 = \frac{p_{1,2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1}...U_2U_1; /// \f]; /// \f$ U_1\f$ being defined from the normalization condition; /// \f$ \sum_{i=1}^{n} U_i=1\f$. \f$ n \f$ is the length of the smoothed spectrum and; /// \f[; /// p_{i,i\pm 1} = A_i\sum_{k=1}^{m} exp\left[ \frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; /// \f]; ///; /// #### Reference:; ///; /// 1. Z.K. Silagadze, A new algorithm for automatic photopeak searches.; /// NIM A 376 (1996), 451.; ///; /// ### Example 14 - script Smoothing.C; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Smoothing.C; /// End_Macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum.cxx:752,simpl,simple,752,hist/spectrum/src/TSpectrum.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Options to be set in the option string:; ///; /// - LearningRate <float> DNN learning rate parameter.; /// - DecayRate <float> Decay rate for learning parameter.; /// - TestRate <int> Period of validation set error computation.; /// - BatchSize <int> Number of event per batch.; ///; /// - ValidationSize <string> How many events to use for validation. ""0.2""; /// or ""20%"" indicates that a fifth of the; /// training data should be used. ""100""; /// indicates that 100 events should be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx:138,Learn,LearningRate,138,tmva/tmva/src/MethodDNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDNN.cxx,3,"['Learn', 'learn']","['LearningRate', 'learning']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple box.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:94,simpl,simple,94,graf2d/gpad/src/TPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple graph, without errors bars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:94,simpl,simple,94,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple line in normalized coordinates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:94,simpl,simple,94,graf2d/gpad/src/TPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Paint a simple line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:94,simpl,simple,94,graf2d/gpad/src/TPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Paints histogram according to preset parameters.; /// ### Visualization; /// #### Goal: to present 2-dimensional spectra in suitable visual form; /// This package has several display mode groups and display modes, which can be; /// employed for the presentation of 2-dimensional histograms; /// #### Display modes groups:; ///; /// - `kModeGroupSimple` - it covers simple display modes using one; /// color only; /// - `kModeGroupLight` - in this group the shading is carried out; /// according to the position of the fictive; /// light source; /// - `kModeGroupHeight` - in this group the shading is carried out; /// according to the channel contents; /// - `kModeGroupLightHeight` - combination of two previous shading; /// algorithms. One can control the weight; /// between both algorithms.; ///; /// #### Display modes:; ///; /// - `kDisplayModePoints, `; /// - `kDisplayModeGrid, `; /// - `kDisplayModeContours,`; /// - `kDisplayModeBars,`; /// - `kDisplayModeLinesX,`; /// - `kDisplayModeLinesY,`; /// - `kDisplayModeBarsX,`; /// - `kDisplayModeBarsY,`; /// - `kDisplayModeNeedles,`; /// - `kDisplayModeSurface,`; /// - `kDisplayModeTriangles.`; ///; /// one can combine the above given modes groups and display modes. The meaningful; /// combinations (denoted by x) are given in the next table.; ///; /// | | Simple | Light | Height | Light-Height |; /// |-----------|--------|-------|--------|--------------|; /// | Points | X | X | X | X |; /// | Grid | X | X | X | X |; /// | Contours | X | - | X | - |; /// | Bars | X | - | X | - |; /// | LinesX | X | X | X | X |; /// | LinesY | X | X | X | X |; /// | BarsX | X | - | X | - |; /// | BarsY | X | - | X | - |; /// | Needles | X | - | - | - |; /// | Surface | - | X | X | X |; /// | Triangles | X | X | X | X |; ///; /// #### Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); ///; /// This function controls the displa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:451,simpl,simple,451,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Pauses replaying",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:86,Pause,Pauses,86,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,2,['Pause'],['Pauses']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Perform additional local removal of el.; /// Called from RemoveElement() which does whole untangling.; /// Put into special function as framework-related handling of; /// element removal should really be common to all classes and; /// clearing of local structures happens in between removal; /// of list-tree-items and final removal.; /// If you override this, you should also override; /// RemoveElementsLocal().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveElement.cxx:321,clear,clearing,321,graf3d/eve/src/TEveElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveElement.cxx,2,['clear'],['clearing']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Perform an initial prefetch, attempting to read as much of the learning; /// phase baskets for all branches at once",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:149,learn,learning,149,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Performs undo action. Move cursor position backward in history stack",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:95,undo,undo,95,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Plot dataset on specified frame.; ///; /// By default:; /// - An unbinned dataset will use the default binning of the target frame.; /// - A binned dataset will retain its intrinsic binning.; ///; /// The following optional named arguments can be used to modify the behaviour:; /// \note Please follow the function links in the left column to learn about PyROOT specifics for a given option.; ///; /// <table>; ///; /// <tr><th> <th> Data representation options; /// <tr><td> RooFit::Asymmetry(const RooCategory& c); /// <td> Show the asymmetry of the data in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; /// Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1.; /// <tr><td> RooFit::Efficiency(const RooCategory& c); /// <td> Show the efficiency F(acc)/[F(acc)+F(rej)]. Category must have two states with indices 0 and 1; /// <tr><td> RooFit::DataError(Int_t); /// <td> Select the type of error drawn:; /// - `Auto(default)` results in Poisson for unweighted data and SumW2 for weighted data; /// - `Poisson` draws asymmetric Poisson confidence intervals.; /// - `SumW2` draws symmetric sum-of-weights error ( \f$ \left( \sum w \right)^2 / \sum\left(w^2\right) \f$ ); /// - `None` draws no error bars; /// <tr><td> RooFit::Binning(int nbins, double xlo, double xhi); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const RooAbsBinning&); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const char* name); /// <td> Use binning with specified name to draw dataset; /// <tr><td> RooFit::RefreshNorm(); /// <td> Force refreshing for PDF normalization information in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:429,learn,learn,429,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['learn'],['learn']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Pop all expired margins from the stack.; ///; /// An expired margin is one with a non-negative bottom parameter; /// that is less than the value ""y"". ""y"" is the Y-coordinate of; /// the top edge the next line of text to by positioned. What this; /// function does is check to see if we have cleared any obstacles; /// (an obstacle is an `<IMG ALIGN=left>` or `<IMG ALIGN=right>`); /// and expands the margins if we have.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx:377,clear,cleared,377,gui/guihtml/src/TGHtmlLayout.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Pop as many margins as necessary until the margin that was; /// created with ""tag"" is popped off. Update the layout context; /// to move past obstacles, if necessary.; ///; /// If there are some margins on the stack that contain non-negative; /// bottom fields, that means there are some obstacles that we have; /// not yet cleared. If these margins get popped off the stack,; /// then we have to be careful to advance the 'bottom' value so; /// that the next line of text will clear the obstacle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx:410,clear,cleared,410,gui/guihtml/src/TGHtmlLayout.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlLayout.cxx,2,['clear'],"['clear', 'cleared']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Print a progress bar on stderr. Used in batch mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:94,progress bar,progress bar,94,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Print cache statistics. Like:; ///; /// ~~~ {.cpp}; /// ******TreeCache statistics for file: cms2.root ******; /// Number of branches in the cache ...: 1093; /// Cache Efficiency ..................: 0.997372; /// Cache Efficiency Rel...............: 1.000000; /// Learn entries......................: 100; /// Reading............................: 72761843 bytes in 7 transactions; /// Readahead..........................: 256000 bytes with overhead = 0 bytes; /// Average transaction................: 10394.549000 Kbytes; /// Number of blocks in current cache..: 210, total size: 6280352; /// ~~~; ///; /// - if option = ""a"" the list of blocks in the cache is printed; /// see also class TTreePerfStats.; /// - if option contains 'cachedbranches', the list of branches being; /// cached is printed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:350,Learn,Learn,350,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['Learn'],['Learn']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Progress bar for clear data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:86,Progress bar,Progress bar,86,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,"['Progress bar', 'clear']","['Progress bar', 'clear']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile into a 1-D histogram along X; ///; /// The projection is always of the type TH1D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// otherwise (default) it will be equal to GetBinContent(bin); /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH1D using the 2-nd value as a weight.; /// This makes sense only for profile filled with weights =1. If not, the error of the; /// projected histogram obtained with this option will not be correct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:458,simpl,simply,458,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile2D into a 2-D histogram along X,Y.; ///; /// The projection is always of the type TH2D.; ///; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:463,simpl,simply,463,hist/hist/src/TProfile2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Project this profile3D into a 3-D histogram along X,Y,Z.; ///; /// The projection is always of the type TH3D.; ///; /// - if option ""E"" is specified, the errors are computed. (default); /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""E"" is specified the errors of the projected histogram are computed and set; /// to be equal to the errors of the profile.; /// Option ""E"" is defined as the default one in the header file.; /// - if option """" is specified the histogram errors are simply the sqrt of its content; /// - if option ""B"" is specified, the content of bin of the returned histogram; /// will be equal to the GetBinEntries(bin) of the profile,; /// - if option ""C=E"" the bin contents of the projection are set to the; /// bin errors of the profile; /// - if option ""W"" is specified the bin content of the projected histogram is set to the; /// product of the bin content of the profile and the entries.; /// With this option the returned histogram will be equivalent to the one obtained by; /// filling directly a TH2D using the 3-rd value as a weight.; /// This option makes sense only for profile filled with all weights =1.; /// When the profile is weighted (filled with weights different than 1) the; /// bin error of the projected histogram (obtained using this option ""W"") cannot be; /// correctly computed from the information stored in the profile. In that case the; /// obtained histogram contains as bin error square the weighted sum of the square of the; /// profiled observable (TProfile2D::fSumw2[bin] ); ///; /// Note that the axis range is not considered when doing the projection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:780,simpl,simply,780,hist/hist/src/TProfile3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Protected constructor to be used by classes deriving from TProof; /// (they have to call Init themselves and override StartSlaves; /// appropriately).; ///; /// This constructor simply closes any previous gProof and sets gProof; /// to this instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:264,simpl,simply,264,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Purge lowest key cycles in a directory.; ///; /// By default, only the highest cycle of a key is kept. Keys for which; /// the ""KEEP"" flag has been set are not removed. See TKey::Keep().; /// NOTE: This does not reduce the size of a TFile--; /// the space is simply freed up to be overwritten.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TDirectoryFile.cxx:345,simpl,simply,345,io/io/src/TDirectoryFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TDirectoryFile.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Read TArray object from buffer. Simplified version of; /// TBuffer::ReadObject (does not keep track of multiple; /// references to same array).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx:118,Simpl,Simplified,118,core/cont/src/TArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx,1,['Simpl'],['Simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Read TString object from buffer. Simplified version of; /// TBuffer::ReadObject (does not keep track of multiple; /// references to same string). We need to have it here; /// because TBuffer::ReadObject can only handle descendant; /// of TObject.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:119,Simpl,Simplified,119,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['Simpl'],['Simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Read a simple ascii input file describing vertices and triangles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTriangleSet.cxx:93,simpl,simple,93,graf3d/eve/src/TEveTriangleSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveTriangleSet.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Read configuration file and populate list of sessions; /// list of queries and list of packages.; /// Read and set also global options as feedback histos.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:224,feedback,feedback,224,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Recursively call the Clear function of this task and its subtasks.; /// The Clear function must be implemented for each derived class; /// to clear all data structures created by a previous execution of a task.; /// This function is automatically called by the CleanTasks function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:107,Clear,Clear,107,core/base/src/TTask.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx,3,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Recursively import elements and apply projection to the newly; /// imported objects.; ///; /// If ext_list is not 0 the new element is also added to the list.; /// This simplifies construction of complex views where projected; /// elements are distributed into several scenes for optimization of; /// updates and rendering.; ///; /// Returns the projected replica of el. Can be 0, if el and none of; /// its children are projectable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjectionManager.cxx:255,simpl,simplifies,255,graf3d/eve/src/TEveProjectionManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveProjectionManager.cxx,2,['simpl'],['simplifies']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Register value as a temporary, extending its lifetime to that of the; /// interpreter. This is needed for TCling's compatibility interfaces; /// returning long - the address of the temporary objects.; /// As such, ""simple"" types don't need to be stored; they are returned by; /// value; only pointers / references / objects need to be stored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:301,simpl,simple,301,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remember the recorder state that is paused",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:122,pause,paused,122,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,1,['pause'],['paused']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remove a branch to the list of branches to be stored in the cache; /// this is to be used by user (thats why we pass the name of the branch).; /// It works in exactly the same way as TTree::SetBranchStatus so you; /// probably want to look over there for details about the use of bname; /// with regular expressions.; /// The branches are taken with respect to the Owner of this TTreeCache; /// (i.e. the original Tree); /// NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; /// Returns:; /// - 0 branch dropped or not in cache; /// - -1 on error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:570,learn,learning,570,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remove all objects from the list. Does not delete the objects; /// unless the TList is the owner (set via SetOwner()) and option; /// ""nodelete"" is not set.; /// If option=""nodelete"" then don't delete any heap objects that were; /// marked with the kCanDelete bit, otherwise these objects will be; /// deleted (this option is used by THashTable::Clear()).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:432,Clear,Clear,432,core/cont/src/TList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remove all primitives from the canvas.; /// If option ""D"" is specified, direct sub-pads are cleared but not deleted.; /// This option is not recursive, i.e. pads in direct sub-pads are deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:178,clear,cleared,178,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remove all the content from the underflow and overflow bins, without changing the number of entries; /// After calling this method, every undeflow and overflow bins will have content 0.0; /// The Sumw2 is also cleared, since there is no more content in the bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:296,clear,cleared,296,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remove obj form the input data list; if obj is null (default), clear the; /// input data info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:149,clear,clear,149,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remove object from feedback list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:105,feedback,feedback,105,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remove package 'pack'; /// If 'pack' is null or empty all packages are cleared; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx:157,clear,cleared,157,proof/proof/src/TPackMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Remove tree with values of cached observables; /// and clear list of cached observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:141,clear,clear,141,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Removes text at the range, clears the selection and moves; /// the cursor to the end of the line.; /// See also GetText(), InsertText(), SetText(), AppendText().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:113,clear,clears,113,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,1,['clear'],['clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Reset a Branch after a Merge operation (drop data but keep customizations); /// TRefTable is cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchRef.cxx:179,clear,cleared,179,tree/tree/src/TBranchRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchRef.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Reset progress bar (i.e. set pos to 0).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:92,progress bar,progress bar,92,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Reset tasks state: breakpoints and execute flags; /// also invokes the Clear function of each task to clear all data; /// structures created by a previous execution of a task.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:157,Clear,Clear,157,core/base/src/TTask.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Resume a stopped stopwatch. The stopwatch continues counting from the last; /// Start() onwards (this is like the laptimer function).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStopwatch.cxx:86,Resume,Resume,86,core/base/src/TStopwatch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStopwatch.cxx,1,['Resume'],['Resume']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Resume execution at the current break point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx:86,Resume,Resume,86,core/base/src/TTask.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTask.cxx,1,['Resume'],['Resume']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Resume worker",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TCondor.cxx:86,Resume,Resume,86,proof/proof/src/TCondor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TCondor.cxx,1,['Resume'],['Resume']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Resumes replaying",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:86,Resume,Resumes,86,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,1,['Resume'],['Resumes']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return a command which is doing redo/undo action.; ///; /// This static method allows to set undo parameters dynamically, i.e.; /// during execution of Redo function.; ///; /// Example:; /// For redo actions like TGTextEdit::DelChar() it is not possible to; /// know ahead what character will be deleted.; /// To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; /// one needs to call TQCommand::SetUndoArgs(1, character) from; /// inside of TGTextEdit::DelChar() method, i.e.; /// ~~~ {.cpp}; /// TQCommand::GetCommand()->SetUndoArgs(1, somechar);; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:123,undo,undo,123,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,3,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return a pointer to the list containing user objects associated to this tree.; ///; /// The list is automatically created if it does not exist.; ///; /// WARNING: By default the TTree destructor will delete all objects added; /// to this list. If you do not want these objects to be deleted,; /// call:; ///; /// mytree->GetUserInfo()->Clear();; ///; /// before deleting the tree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:422,Clear,Clear,422,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return a reduced covariance matrix (Note that Vred _is_ a simple sub-matrix of V,; /// row/columns are ordered to matched the convention given in input argument 'params'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx:144,simpl,simple,144,roofit/roofitcore/src/RooFitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return a reduced covariance matrix, which is calculated as; /// \f[; /// V_\mathrm{red} = \bar{V_{22}} = V_{11} - V_{12} \cdot V_{22}^{-1} \cdot V_{21},; /// \f]; /// where \f$ V_{11},V_{12},V_{21},V_{22} \f$ represent a block decomposition of the covariance matrix into observables that; /// are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and \f$ \bar{V_{22}} \f$; /// is the Shur complement of \f$ V_{22} \f$, calculated as shown above.; ///; /// (Note that \f$ V_\mathrm{red} \f$ is *not* a simple sub-matrix of \f$ V \f$)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx:623,simpl,simple,623,roofit/roofitcore/src/RooFitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return a simple background value (estimate/truth) given the pre-specified model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:95,simpl,simple,95,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return feedback list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:93,feedback,feedback,93,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return the ""template prediction"" corresponding to the fit result (this is not; /// the same as the weighted sum of template distributions, as template statistical; /// uncertainties are taken into account).; /// Note that the name of this histogram will simply be the same as that of the; /// ""data"" histogram, prefixed with the string ""Fraction fit to hist: "".; /// Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; /// the class is deleted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:340,simpl,simply,340,hist/hist/src/TFractionFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return the error of the current weight.; /// @param[in] etype Switch between simple Poisson or sum-of-weights statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx:163,simpl,simple,163,roofit/roofitcore/src/RooVectorDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooVectorDataStore.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1167,learn,learn,1167,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['learn'],['learn']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of entries in the learning phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TEventIter.cxx:122,learn,learning,122,proof/proofplayer/src/TEventIter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TEventIter.cxx,2,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of logged evaluation errors since the last clearing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:147,clear,clearing,147,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['clear'],['clearing']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return true if size of this shape should be ignored when determining if; /// the object should be drawn. In this base-class we simply return state of; /// static flag fgIgnoreSizeForCameraInterest.; ///; /// Several sub-classes override this virtual function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:213,simpl,simply,213,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return true if the method call has been properly initialized and is; /// usable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TMethodCall.cxx:159,usab,usable,159,core/meta/src/TMethodCall.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TMethodCall.cxx,1,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Return true if we have access to a constructor usable for I/O. This is; /// typically the default constructor but can also be a constructor specifically; /// marked for I/O (for example a constructor taking a TRootIOCtor* as an; /// argument). In other words, if this routine returns true, TClass::New is; /// guarantee to succeed.; /// To know if the class described by this TClass has a default constructor; /// (public or not), use; /// \code{.cpp}; /// cl->GetProperty() & kClassHasDefaultCtor; /// \endcode; /// To know if the class described by this TClass has a public default; /// constructor use:; /// \code{.cpp}; /// gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:133,usab,usable,133,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['usab'],['usable']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns TDataMember pointed by this methodarg.; /// If you want to specify list of options or current value for your; /// MethodArg (i.e. it is used as initial values in argument-asking dialogs; /// popped up from context-meny),you can get this value from one of data; /// members of the class.; ///; /// The only restriction is, that this DataMember object must have its; /// Getter/Setter methods set-up correctly - for details look at TDataMember.; /// To learn how to specify the data member to which the argument should; /// ""point"", look at TMethod. This is TMethod which sets up fDataMember,; /// so it could work correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TMethodArg.cxx:545,learn,learn,545,core/meta/src/TMethodArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TMethodArg.cxx,1,['learn'],['learn']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns a number of sequential undo or redo operations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:117,undo,undo,117,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns a number of undo arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:106,undo,undo,106,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns a pointer to array of undo arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:116,undo,undo,116,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns an object for which undo redo actions are applied",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:114,undo,undo,114,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns command description.; /// By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:170,Undo,UndoName,170,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['Undo'],['UndoName']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns current value of leaf.; /// - if leaf is a simple type, i must be set to 0; /// - if leaf is an array, i is the array element number to be returned",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TLeafG.cxx:137,simpl,simple,137,tree/tree/src/TLeafG.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TLeafG.cxx,3,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns current value of leaf; /// - if leaf is a simple type, i must be set to 0; /// - if leaf is an array, i is the array element number to be returned",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TLeafG.cxx:136,simpl,simple,136,tree/tree/src/TLeafG.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TLeafG.cxx,3,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if Undo action is possible, kFALSE if it's not.; /// By default, only single trial undo action is possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,Undo,Undo,103,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if neither redo nor undo action specified",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:120,undo,undo,120,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE if undo action is possible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:103,undo,undo,103,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns kTRUE is command if Redo is the same as Undo function; /// and is the setter action.; ///; /// By default, all functions with names like ""SetXXX"" or ""setXXX""; /// considered as setters. Another type of setters are Move, Resize operations; ///; /// More complicated commands might want to override this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:134,Undo,Undo,134,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['Undo'],['Undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns the name of undo command",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:106,undo,undo,106,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if state has changed since last call with clearState=true.; /// If clearState is true, changeState flag will be cleared.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:141,clear,clearState,141,roofit/roofitcore/src/RooChangeTracker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx,3,['clear'],"['clearState', 'cleared']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Rotate using the x-convention (Landau and Lifshitz, Goldstein, &c) by; /// doing the explicit rotations. This is slightly less efficient than; /// directly applying the rotation, but makes the code much clearer. My; /// presumption is that this code is not going to be a speed bottle neck.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRotation.cxx:289,clear,clearer,289,math/physics/src/TRotation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRotation.cxx,1,['clear'],['clearer']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// SPHE shape ""simplified"" constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TSPHE.cxx:98,simpl,simplified,98,graf3d/g3d/src/TSPHE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TSPHE.cxx,1,['simpl'],['simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Save a horizontal progress bar as a C++ statement(s) on output stream out",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:104,progress bar,progress bar,104,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Save a vertical progress bar as a C++ statement(s) on output stream out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:102,progress bar,progress bar,102,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Save progress bar parameters as a C++ statement(s) on output stream out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:91,progress bar,progress bar,91,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Select this volume as matching an arbitrary criteria. The volume is added to; /// a static list and the flag TGeoVolume::kVolumeSelected is set. All flags need; /// to be reset at the end by calling the method with CLEAR=true. This will also clear; /// the list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:301,CLEAR,CLEAR,301,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,2,"['CLEAR', 'clear']","['CLEAR', 'clear']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Send feedback objects to client.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:91,feedback,feedback,91,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,2,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Send progress and feedback to client.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:104,feedback,feedback,104,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Separation Index: a simple Variance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx:106,simpl,simple,106,tmva/tmva/src/RegressionVariance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RegressionVariance.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set (default) or clear a named boolean attribute of this object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:103,clear,clear,103,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,2,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set Date/Time to current time as reported by the system.; /// No accounting for nanoseconds with std ANSI functions,; /// ns part faked so that subsequent calls simply add 1 to it; /// this ensures that calls within the same second come back; /// distinct (and sortable). Time is since Jan 1, 1970.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx:247,simpl,simply,247,core/base/src/TTimeStamp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TTimeStamp.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set branch addresses of passed tree equal to ours.; /// If undo is true, reset the branch addresses instead of copying them.; /// This ensures 'separation' of a cloned tree from its original.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:145,undo,undo,145,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set do/redo and undo parameters. The format is; /// SetArgs(number_of_params, redo_params, undo_params); ///; /// Example:; /// ~~~ {.cpp}; /// move_command->SetArgs(2, 100, 100, 200, 200);; /// ~~~; /// 2 params, (100,100) - do/redo position, (200,200) - undo position",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:102,undo,undo,102,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,2,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set draw feedback option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:95,feedback,feedback,95,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set feedback list (may not be used in this class).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:90,feedback,feedback,90,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set handle to window which will be cleared when connection is closed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/canvaspainter/src/RCanvasPainter.cxx:121,clear,cleared,121,gui/canvaspainter/src/RCanvasPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/canvaspainter/src/RCanvasPainter.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set min and max of progress bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:105,progress bar,progress bar,105,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set ownership.; /// If the folder is declared owner, when the folder is deleted, all; /// the objects added via TFolder::Add are deleted via TObject::Delete,; /// otherwise TObject::Clear is called.; ///; /// NOTE that folder ownership can be set:; /// - via TFolder::SetOwner; /// - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx:268,Clear,Clear,268,core/base/src/TFolder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TFolder.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set progress bar color via TGColorDialog.; /// This method is activated via context menu during guibuilding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldDragManager.cxx:90,progress bar,progress bar,90,gui/guibuilder/src/TGuiBldDragManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldDragManager.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set progress bar color.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:90,progress bar,progress bar,90,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,2,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set some values to our progress bars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:109,progress bar,progress bars,109,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['progress bar'],['progress bars']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set the state of guides (axes & reference markers) from arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewer.cxx:103,guid,guides,103,graf3d/gl/src/TGLViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewer.cxx,1,['guid'],['guides']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set undo parameters. The format is; /// SetUndoArgs(number_of_params, params); ///; /// Example:; /// ~~~ {.cpp}; /// move_command->SetUndoArgs(2, 200, 200);; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:90,undo,undo,90,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set up feedback (may not be used in this class).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:93,feedback,feedback,93,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set whether the learning period is started with a prefilling of the; /// cache and which type of prefilling is used.; /// The two value currently supported are:; /// - TTreeCache::kNoPrefill disable the prefilling; /// - TTreeCache::kAllBranches fill the cache with baskets from all branches.; /// The default prefilling behavior can be controlled by setting; /// TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:102,learn,learning,102,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set whether this collection is the owner (enable==true); /// of its content. If it is the owner of its contents,; /// these objects will be deleted whenever the collection itself; /// is deleted. The objects might also be deleted or destructed when Clear; /// is called (depending on the collection).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:335,Clear,Clear,335,core/cont/src/TCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set whether this map is the owner (enable==true); /// of its values. If it is the owner of its contents,; /// these objects will be deleted whenever the collection itself; /// is deleted. The objects might also be deleted or destructed when Clear; /// is called (depending on the collection).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx:327,Clear,Clear,327,core/cont/src/TMap.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TMap.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Set window name so it appear as title of the undock window.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx:131,undo,undock,131,gui/gui/src/TGDockableFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx,1,['undo'],['undock']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets Delta - used in stochastic minimisation; /// (look at the constructor for the complete description; /// of learning methods and parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:198,learn,learning,198,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets Epsilon - used in stochastic minimisation; /// (look at the constructor for the complete description; /// of learning methods and parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:200,learn,learning,200,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets Eta - used in stochastic minimisation; /// (look at the constructor for the complete description; /// of learning methods and parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:196,learn,learning,196,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets EtaDecay - Eta *= EtaDecay at each epoch; /// (look at the constructor for the complete description; /// of learning methods and parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:199,learn,learning,199,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets Tau - used in line search; /// (look at the constructor for the complete description; /// of learning methods and parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:184,learn,learning,184,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets display group mode and display mode:; /// - modeGroup - the following group modes can be set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; /// - displayMode - posible display modes are: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:185,simpl,simple,185,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets number of epochs between two resets of the; /// search direction to the steepest descent.; /// (look at the constructor for the complete description; /// of learning methods and parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:248,learn,learning,248,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets on/off Bezier smoothing:; /// - bezier - determines Bezier interpolation (applies only for simple; /// display modes group for grid, x_lines, y_lines display modes)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:182,simpl,simple,182,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets shading color algorithm:; /// - olorAlgorithm - applies only for rainbowed display modes; /// (rgb smooth algorithm, rgb modulo color component, cmy smooth algorithm,; /// - cmy modulo color component, cie smooth algorithm,; /// - cie modulo color component, yiq smooth algorithm,; /// - yiq modulo color component, hsv smooth algorithm,; /// - hsv modulo color component, it does not apply for simple display modes; /// algorithm group",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:486,simpl,simple,486,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets static scaling facor that allows simple guide axies to have label values; /// scaled relative to actual scene dimensions.; /// This is set to 1 in static initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewer.cxx:124,simpl,simple,124,graf3d/gl/src/TGLViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLViewer.cxx,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets text entry to text, clears the selection and moves; /// the cursor to the end of the line.; /// If necessary the text is truncated to fit MaxLength().; /// See also GetText().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:111,clear,clears,111,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,1,['clear'],['clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets the histogram containing all events; ///; /// The given histogram is cloned and stored internally as histogram containing; /// all events. The given histogram has to be consistent with the current; /// fPassedHistogram (see CheckConsistency(const TH1&,const TH1&)).; /// The method returns whether the fTotalHistogram has been replaced (true) or; /// not (false).; ///; /// Note: The list of associated functions fFunctions is cleared.; ///; /// Option:; /// - ""f"": force the replacement without checking the consistency; /// This can lead to inconsistent histograms and useless results; /// or unexpected behaviour. But sometimes it might be the only; /// way to change the histograms. If you use this option, you; /// should ensure that the fPassedHistogram is replaced by a; /// consistent one (with respect to rTotal) as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:518,clear,cleared,518,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets the histogram containing the passed events; ///; /// The given histogram is cloned and stored internally as histogram containing; /// the passed events. The given histogram has to be consistent with the current; /// fTotalHistogram (see CheckConsistency(const TH1&,const TH1&)).; /// The method returns whether the fPassedHistogram has been replaced (true) or; /// not (false).; ///; /// Note: The list of associated functions fFunctions is cleared.; ///; /// Option:; /// - ""f"": force the replacement without checking the consistency; /// This can lead to inconsistent histograms and useless results; /// or unexpected behaviour. But sometimes it might be the only; /// way to change the histograms. If you use this option, you; /// should ensure that the fTotalHistogram is replaced by a; /// consistent one (with respect to rPassed) as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx:532,clear,cleared,532,hist/hist/src/TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TEfficiency.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Sets the learning method.; /// Available methods are: kStochastic, kBatch,; /// kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; /// (look at the constructor for the complete description; /// of learning methods and parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:95,learn,learning,95,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,2,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Setup feedback.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:92,feedback,feedback,92,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Setup reporting of feedback objects and progress messages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:105,feedback,feedback,105,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Setup reporting of feedback objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:105,feedback,feedback,105,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,2,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Show items in feedback list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:100,feedback,feedback,100,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxyDirector.cxx:86,Simpl,Simple,86,tree/treeplayer/src/TBranchProxyDirector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxyDirector.cxx,2,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple constructor allow you to create either a standard progress; /// bar, or a more fancy progress bar (fancy means: double sized border,; /// white background and a bit wider to allow for text to be printed; /// in the bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx:86,Simpl,Simple,86,gui/gui/src/TGProgressBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGProgressBar.cxx,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple conversion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:86,Simpl,Simple,86,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple event.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPerfStats.cxx:86,Simpl,Simple,86,proof/proofplayer/src/TPerfStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPerfStats.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple kernel estimator. It returns the cell value 'cv',; /// corresponding to the event vector 'txvec' (in foam coordinates).; ///; /// Parameters:; ///; /// - foam - the pdefoam to search in; ///; /// - txvec - event vector in foam coordinates [0,1]; ///; /// - cv - cell value to estimate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelTrivial.cxx:86,Simpl,Simple,86,tmva/tmva/src/PDEFoamKernelTrivial.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamKernelTrivial.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple polynomial 1st degree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx:86,Simpl,Simple,86,proof/proofbench/src/TProofBench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple polynomial 2nd degree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx:86,Simpl,Simple,86,proof/proofbench/src/TProofBench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple recursive algorithm to find the permutations of; /// n natural numbers, not necessarily all distinct; /// adapted from CERNLIB routine PERMU.; /// The input array has to be initialised with a non descending; /// sequence. The method returns kFALSE when; /// all combinations are exhausted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:86,Simpl,Simple,86,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple test entry constructor. Notice TString argument comes before the; /// parent argument (to make this ctor different from the first one taking a; /// const char*).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:86,Simpl,Simple,86,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simple text entry constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx:86,Simpl,Simple,86,gui/gui/src/TGTextEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEntry.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Simply calls TSystem::ResetErrno().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TMemFile.cxx:86,Simpl,Simply,86,io/io/src/TMemFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TMemFile.cxx,1,['Simpl'],['Simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Slot connected to fAddSimple check box for drawing a simple histogram; /// without errors (== HIST draw option) in combination with some other; /// draw options. It draws an additional line on the top of the bins.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TH1Editor.cxx:139,simpl,simple,139,gui/ged/src/TH1Editor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TH1Editor.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Slot for adding an element. No undo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoMaterialEditor.cxx:117,undo,undo,117,geom/geombuilder/src/TGeoMaterialEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoMaterialEditor.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Slot for undoing all changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoMaterialEditor.cxx:95,undo,undoing,95,geom/geombuilder/src/TGeoMaterialEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoMaterialEditor.cxx,1,['undo'],['undoing']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Slot for undoing current operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoConeEditor.cxx:95,undo,undoing,95,geom/geombuilder/src/TGeoConeEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoConeEditor.cxx,1,['undo'],['undoing']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Slot for undoing last changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoMatrixEditor.cxx:95,undo,undoing,95,geom/geombuilder/src/TGeoMatrixEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoMatrixEditor.cxx,2,['undo'],['undoing']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Slot for undoing last operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoBBoxEditor.cxx:95,undo,undoing,95,geom/geombuilder/src/TGeoBBoxEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoBBoxEditor.cxx,19,['undo'],['undoing']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Smooth data with Super smoother.; /// Smooth the (x, y) values by Friedman's ``super smoother''.; ///; /// \param[in] grin graph for smoothing; /// \param[in] option specific options; /// \param[in] span the fraction of the observations in the span of the running lines; /// smoother, or 0 to choose this by leave-one-out cross-validation.; /// \param[in] bass controls the smoothness of the fitted curve.; /// Values of up to 10 indicate increasing smoothness.; /// \param[in] isPeriodic if TRUE, the x values are assumed to be in [0, 1]; /// and of period 1.; /// \param[in] w case weights; ///; /// Details:; ///; /// supsmu is a running lines smoother which chooses between three spans for; /// the lines. The running lines smoothers are symmetric, with k/2 data points; /// each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; /// 0.05 * n, where n is the number of data points. If span is specified,; /// a single smoother with span span * n is used.; ///; /// The best of the three smoothers is chosen by cross-validation for each; /// prediction. The best spans are then smoothed by a running lines smoother; /// and the final prediction chosen by linear interpolation.; ///; /// The FORTRAN code says: ``For small samples (n < 40) or if there are; /// substantial serial correlations between observations close in x - value,; /// then a prespecified fixed span smoother (span > 0) should be used.; /// Reasonable span values are 0.2 to 0.4.''; ///; /// References:; /// - Friedman, J. H. (1984) SMART User's Guide.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 1.; /// - Friedman, J. H. (1984) A variable span scatterplot smoother.; /// Laboratory for Computational Statistics,; /// Stanford University Technical Report No. 5.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx:1625,Guid,Guide,1625,hist/hist/src/TGraphSmooth.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphSmooth.cxx,1,['Guid'],['Guide']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Start of methods for the miss cache.; ////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Enable / disable the miss cache.; ///; /// The first time this is called on a TTreeCache object, the corresponding; /// data structures will be allocated. Subsequent enable / disables will; /// simply turn the functionality on/off.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:486,simpl,simply,486,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Starts Benchmark with the specified name.; ///; /// An independent timer (see class TStopwatch) is started.; /// The name of the benchmark is entered into the list of benchmarks.; /// Benchmark can be stopped via TBenchmark::Stop().; /// Results can be printed via TBenchmark::Print().; /// TBenchmark::Show() can be used to stop benchmark and print results.; /// If name is an already existing benchmark, timing will resume.; /// A summary of all benchmarks can be seen via TBenchmark::Summary().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:504,resume,resume,504,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['resume'],['resume']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Static function to set the number of entries to be used in learning mode; /// The default value for n is 10. n must be >= 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:145,learn,learning,145,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Stop feedback (may not be used in this class).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:91,feedback,feedback,91,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Stop feedback.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:91,feedback,feedback,91,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Stop reporting of feedback objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:104,feedback,feedback,104,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Stop the cache learning phase; ///; /// Returns:; /// - 0 learning phase stopped or not active; /// - -1 on error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:101,learn,learning,101,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,2,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Store feedback list (may not be used in this class).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:92,feedback,feedback,92,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Store feedback results from the specified slave.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:92,feedback,feedback,92,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,2,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Suspend or resume PROOF via Condor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofCondor.cxx:97,resume,resume,97,proof/proof/src/TProofCondor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofCondor.cxx,1,['resume'],['resume']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// TUBE shape ""simplified"" constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TTUBE.cxx:98,simpl,simplified,98,graf3d/g3d/src/TTUBE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TTUBE.cxx,1,['simpl'],['simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// TUBS shape ""simplified"" constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TTUBS.cxx:98,simpl,simplified,98,graf3d/g3d/src/TTUBS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/g3d/src/TTUBS.cxx,1,['simpl'],['simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Test package clearing, uploading, enabling, removal.; /// Use event.par as example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:99,clear,clearing,99,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['clear'],['clearing']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Test run for the H1 and Simple analysis in asynchronous mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:110,Simpl,Simple,110,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Test several styles of progress bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:109,progress bar,progress bar,109,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Text progress bar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoPainter.cxx:91,progress bar,progress bar,91,geom/geompainter/src/TGeoPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoPainter.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for; /// all events... later could be modified to use individual cost matrices for each; /// events as in the original paper...; ///; /// true_signal true_bkg; /// ----------------------------------; /// sel_signal | Css Ctb_ss Cxx.. in the range [0,1]; /// sel_bkg | Cts_sb Cbb; ///; /// and takes this into account when calculating the mis class. cost (former: error fraction):; ///; /// err = sum_events ( weight* y_true*y_sel * beta(event)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:125,simpl,simple,125,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The Process() function is called for each entry in the tree (or possibly; /// keyed object in the case of PROOF) to be processed. The entry argument; /// specifies which entry in the currently loaded tree is to be processed.; /// It can be passed to either TSelHist::GetEntry() or TBranch::GetEntry(); /// to read either all or the required parts of the data. When processing; /// keyed objects with PROOF, the object is already loaded and is available; /// via the fObject pointer.; ///; /// This function should contain the ""body"" of the analysis. It can contain; /// simple or elaborate selection criteria, run algorithms on the data; /// of the event and typically fill histograms.; ///; /// The processing can be stopped by calling Abort().; ///; /// Use fStatus to set the return value of TTree::Process().; ///; /// The return value is currently not used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelHist.cxx:656,simpl,simple,656,proof/proofbench/src/TSelHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelHist.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The Process() function is called for each entry in the tree (or possibly; /// keyed object in the case of PROOF) to be processed. The entry argument; /// specifies which entry in the currently loaded tree is to be processed.; /// It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); /// to read either all or the required parts of the data. When processing; /// keyed objects with PROOF, the object is already loaded and is available; /// via the fObject pointer.; ///; /// This function should contain the ""body"" of the analysis. It can contain; /// simple or elaborate selection criteria, run algorithms on the data; /// of the event and typically fill histograms.; ///; /// The processing can be stopped by calling Abort().; ///; /// Use fStatus to set the return value of TTree::Process().; ///; /// The return value is currently not used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorEntries.cxx:664,simpl,simple,664,tree/treeplayer/src/TSelectorEntries.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorEntries.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The Process() function is called for each entry in the tree (or possibly; /// keyed object in the case of PROOF) to be processed. The entry argument; /// specifies which entry in the currently loaded tree is to be processed.; /// It can be passed to either TTree::GetEntry() or TBranch::GetEntry(); /// to read either all or the required parts of the data. When processing; /// keyed objects with PROOF, the object is already loaded and is available; /// via the fObject pointer.; ///; /// This function should contain the ""body"" of the analysis. It can contain; /// simple or elaborate selection criteria, run algorithms on the data; /// of the event and typically fill histograms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelEvent.cxx:653,simpl,simple,653,proof/proofbench/src/TSelEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TSelEvent.cxx,3,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The Process() function is called for each entry in the tree (or possibly; /// keyed object in the case of PROOF) to be processed. The entry argument; /// specifies which entry in the currently loaded tree is to be processed.; /// It can be passed to either t01::GetEntry() or TBranch::GetEntry(); /// to read either all or the required parts of the data. When processing; /// keyed objects with PROOF, the object is already loaded and is available; /// via the fObject pointer.; ///; /// This function should contain the ""body"" of the analysis. It can contain; /// simple or elaborate selection criteria, run algorithms on the data; /// of the event and typically fill histograms.; ///; /// The processing can be stopped by calling Abort().; ///; /// Use fStatus to set the return value of TTree::Process().; ///; /// The return value is currently not used.; ///; /// WARNING when a selector is used with a TChain, you must use; /// the pointer to the current TTree to call GetEntry(entry).; /// The entry is always the local entry number in the current tree.; /// Assuming that fChain is the pointer to the TChain being processed,; /// use: `fChain->GetTree()->GetEntry(entry)`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TSelector.cxx:651,simpl,simple,651,tree/tree/src/TSelector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TSelector.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The fPSelStartBlock and fPSelEndBlock values have been changed.; /// This routine's job is to loop over all TGHtmlBlocks and either; /// set or clear the HTML_Selected bits in the .fFlags field; /// as appropriate. For every TGHtmlBlock where the bit changes,; /// mark that block for redrawing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:230,clear,clear,230,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The function generates a URL address for class or namespace (scopeName).; /// This is the URL to the online reference guide, generated by Doxygen.; /// With the enumeration ""EUrl"" we pick which case we need - the one for; /// class (kURLforClass) or the one for namespace (kURLforNameSpace).; ///; /// \param[in] scopeName the name of the class or the namespace; /// \param[in] scopeType the enumerator for class or namespace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:204,guid,guide,204,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['guid'],['guide']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The function generates a URL for ""dataMemberName"" defined in ""scopeName"".; /// It returns a TString with the URL used in the online reference guide,; /// generated with Doxygen. For data members the URL consist of 2 parts -; /// URL for ""scopeName"" and a part for ""dataMemberName"".; /// For enumerator, the URL could be separated into 3 parts - URL for; /// ""scopeName"", part for the enumeration and a part for the enumerator.; ///; /// \param[in] scopeName the name of the class/namespace/struct; /// \param[in] dataMemberName the name of the data member/enumerator; /// \param[in] dataMember pointer to the data member/enumerator; /// \param[in] scopeType enumerator to the scope type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:228,guid,guide,228,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['guid'],['guide']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The function lists useful commands ("".help"") or opens the online reference; /// guide, generated with Doxygen ("".help scope"" or "".help scope::member"").; /// \note You can use "".?"" as the short version of "".help""; /// \param[in] line command from the command line",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:166,guid,guide,166,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['guid'],['guide']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The name should be enough to explain the method.; /// The only additional comments is that the cache is cleaned before; /// the new learning phase.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:218,learn,learning,218,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The network is described by a simple string:; /// The input/output layers are defined by giving; /// the branch names separated by comas.; /// Hidden layers are just described by the number of neurons.; /// The layers are separated by colons.; ///; /// Ex: ""x,y:10:5:f""; ///; /// The output can be prepended by '@' if the variable has to be; /// normalized.; /// The output can be followed by '!' to use Softmax neurons for the; /// output layer only.; ///; /// Ex: ""x,y:10:5:c1,c2,c3!""; ///; /// Input and outputs are taken from the TTree given as second argument.; /// training and test are the two TEventLists defining events; /// to be used during the neural net training.; /// Both the TTree and the TEventLists can be defined in the constructor,; /// or later with the suited setter method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:116,simpl,simple,116,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// The network is described by a simple string:; /// The input/output layers are defined by giving; /// the branch names separated by comas.; /// Hidden layers are just described by the number of neurons.; /// The layers are separated by colons.; ///; /// Ex: ""x,y:10:5:f""; ///; /// The output can be prepended by '@' if the variable has to be; /// normalized.; /// The output can be followed by '!' to use Softmax neurons for the; /// output layer only.; ///; /// Ex: ""x,y:10:5:c1,c2,c3!""; ///; /// Input and outputs are taken from the TTree given as second argument.; /// training and test are two cuts (see TTreeFormula) defining events; /// to be used during the neural net training and testing.; ///; /// Example: ""Entry$%2"", ""(Entry$+1)%2"".; ///; /// Both the TTree and the cut can be defined in the constructor,; /// or later with the suited setter method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:116,simpl,simple,116,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This applies simple nor encryption with sa to the first 64 bytes; /// pw. Returns the hex of the result (max length 128).; /// This is foreseen for systms where crypt is not available; /// (on windows ...), to provide some protection of tokens.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:99,simpl,simple,99,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This function calculates generalized (mixed) transforms of different degrees; /// Function parameters:; /// - working_space-pointer to vector of transformed data; /// - zt_clear-flag to clear imaginary data before staring; /// - num-length of processed data; /// - degree-degree of transform (see manual); /// - type-type of mixed transform (see manual)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrumTransform.cxx:272,clear,clear,272,hist/spectrum/src/TSpectrumTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrumTransform.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This function calculates generalized (mixed) transforms of different degrees; ///; /// Function parameters:; /// - working_space-pointer to vector of transformed data; /// - zt_clear-flag to clear imaginary data before staring; /// - num-length of processed data; /// - degree-degree of transform (see manual); /// - type-type of mixed transform (see manual)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2Transform.cxx:277,clear,clear,277,hist/spectrum/src/TSpectrum2Transform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2Transform.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This function calculates smoothed spectrum from source spectrum; /// based on Markov chain method.; /// The result is placed in the array pointed by source pointer.; ///; /// Function parameters:; /// - source-pointer to the array of source spectrum; /// - ssizex-x length of source; /// - ssizey-y length of source; /// - averWindow-width of averaging smoothing window; ///; /// ### Smoothing; ///; /// Goal: Suppression of statistical fluctuations the algorithm is based on discrete; /// Markov chain, which has very simple invariant distribution; /// \f[; /// U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; /// \f]; /// \f$U_1\f$ being defined from the normalization condition \f$ \sum_{i=1}^{n} U_i = 1\f$; /// n is the length of the smoothed spectrum and; /// \f[; /// p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; /// \f]; /// is the probability of the change of the peak position from channel i to the channel i+1.; /// \f$A_i\f$ is the normalization constant so that\f$ p_{i,i-1}+p_{i,i+1}=1\f$ and m is a width; /// of smoothing window. We have extended this algorithm to two dimensions.; ///; /// #### Reference:; ///; /// [1] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451.; ///; /// ### Example 4 - Smooth.C; ///; /// Begin_Macro(source); /// ../../../tutorials/spectrum/Smooth.C; /// End_Macro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx:605,simpl,simple,605,hist/spectrum/src/TSpectrum2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This function calculates smoothed spectrum from source spectrum; /// based on Markov chain method.; /// The result is placed in the array pointed by spectrum pointer.; ///; /// Function parameters:; /// - source-pointer to the array of source spectrum; /// - working_space-pointer to the working array; /// - ssizex-x length of spectrum and working space arrays; /// - ssizey-y length of spectrum and working space arrays; /// - ssizey-z length of spectrum and working space arrays; /// - averWindow-width of averaging smoothing window; ///; /// ### Smoothing; ///; /// Goal: Suppression of statistical fluctuations; /// the algorithm is based on discrete Markov chain, which has very simple; /// invariant distribution; ///; /// \f[; /// U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; /// \f]; /// \f$U_1\f$ being defined from the normalization condition \f$ \sum_{i=1}^{n} U_i = 1\f$; /// n is the length of the smoothed spectrum and; /// \f[; /// p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; /// \f]; ///; /// is the probability of the change of the peak position from channel i to the channel i+1.; /// \f$A_i\f$ is the normalization constant so that\f$ p_{i,i-1}+p_{i,i+1}=1\f$ and m is a width; /// of smoothing window. We have extended this algorithm to three dimensions.; ///; /// #### Reference:; ///; /// [1] Z.K. Silagadze, A new; /// algorithm for automatic photo-peak searches. NIM A 376 (1996), 451-.; ///; /// ### Example 1 - script SmootMarkov3.c :; ///; /// \image html spectrum3_smoothing_image007.jpg Fig. 1 Original noisy spectrum.; /// \image html spectrum3_smoothing_image008.jpg Fig. 2 Smoothed spectrum with averaging window m=3.; ///; /// #### Script:; ///; /// Example to illustrate the Markov smoothing (class TSpectrum3).; /// To execute this example, do:; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum3.cxx:771,simpl,simple,771,hist/spectrum/src/TSpectrum3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum3.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This function defines a translation for each RooAbsReal based object that can be used; /// to express the class as simple C++ code. The function adds the code represented by; /// each class as an std::string (that is later concatenated with code strings from translate calls); /// to form the C++ code that AD tools can understand. Any class that wants to support AD, has to; /// implement this function.; ///; /// \param[in] ctx An object to manage auxiliary information for code-squashing. Also takes the; /// code string that this class outputs into the squashed code through the 'addToCodeBody' function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:201,simpl,simple,201,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This function does rendering of all stages, the shapes are; /// rendered in the following order: opaque, transparent,; /// selected-opaque, selected-transparent.; ///; /// GL-depth buffer is cleared after transparent shapes have been; /// rendered.; ///; /// This is never called from ROOT GL directly. Use it if you know; /// you are rendering a single scene.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLSceneBase.cxx:277,clear,cleared,277,graf3d/gl/src/TGLSceneBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLSceneBase.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This is ""simplification"" for function TCanvas::Connect with Highlighted; /// signal for specific slot.; ///; /// Slot has to be defined ""UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)""; /// all parameters of UserFunction are taken from TCanvas::Highlighted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:95,simpl,simplification,95,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['simpl'],['simplification']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This is a quite simple algorithm, using the fact, that after conversion many; /// subsequent vertices can have the same 'x' or 'y' coordinate and this part of; /// a polygon will look like a line on the screen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx:102,simpl,simple,102,graf2d/gpad/src/TPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPadPainter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This is a service method used by `THistPainter`; /// to paint 1D histograms. It is not used to paint TGraph.; ///; /// Input parameters:; ///; /// - npoints : Number of points in X or in Y.; /// - x[npoints] or x[0] : x coordinates or (xmin,xmax).; /// - y[npoints] or y[0] : y coordinates or (ymin,ymax).; /// - chopt : Option.; ///; /// The aspect of the histogram is done according to the value of the chopt.; ///; /// | Option | Description |; /// |--------|-----------------------------------------------------------------|; /// |""R"" | Graph is drawn horizontally, parallel to X axis. (default is vertically, parallel to Y axis).If option R is selected the user must give 2 values for Y (y[0]=YMIN and y[1]=YMAX) or N values for X, one for each channel. Otherwise the user must give, N values for Y, one for each channel or 2 values for X (x[0]=XMIN and x[1]=XMAX) |; /// |""L"" | A simple polyline between every points is drawn.|; /// |""H"" | An Histogram with equidistant bins is drawn as a polyline.|; /// |""F"" | An histogram with equidistant bins is drawn as a fill area. Contour is not drawn unless chopt='H' is also selected..|; /// |""N"" | Non equidistant bins (default is equidistant). If N is the number of channels array X and Y must be dimensioned as follow: If option R is not selected (default) then the user must give (N+1) values for X (limits of channels) or N values for Y, one for each channel. Otherwise the user must give (N+1) values for Y (limits of channels). or N values for X, one for each channel |; /// |""F1"" | Idem as 'F' except that fill area base line is the minimum of the pad instead of Y=0.|; /// |""F2"" | Draw a Fill area polyline connecting the center of bins|; /// |""C"" | A smooth Curve is drawn.|; /// |""*"" | A Star is plotted at the center of each bin.|; /// |""P"" | Idem with the current marker.|; /// |""P0"" | Idem with the current marker. Empty bins also drawn.|; /// |""B"" | A",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:972,simpl,simple,972,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This is simplified from TEllipse::PaintEllipse.; /// Draw this ellipse with new coordinates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGraphPolargram.cxx:94,simpl,simplified,94,graf2d/graf/src/TGraphPolargram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGraphPolargram.cxx,1,['simpl'],['simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This is the counterpart of StartLearningPhase() and can be used to stop; /// the learning phase. It's useful when the user knows exactly what branches; /// they are going to use.; /// For the moment it's just a call to FillBuffer() since that method; /// will create the buffer lists from the specified branches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:167,learn,learning,167,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// This will simply clear the cache",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:96,simpl,simply,96,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// To read a TObject* from the file.; ///; /// The object associated to this key is read from the file into memory; /// Once the key structure is read (via Streamer) the class identifier; /// of the object is known.; /// Using the class identifier we find the TClass object for this class.; /// A TClass object contains a full description (i.e. dictionary) of the; /// associated class. In particular the TClass object can create a new; /// object of the class type it describes. This new object now calls its; /// Streamer function to rebuilt itself.; ///; /// Use TKey::ReadObjectAny to read any object non-derived from TObject; ///; /// ### Note; /// A C style cast can only be used in the case where the final class; /// of this object derives from TObject as a first inheritance, otherwise; /// one must use a dynamic_cast.; ///; /// #### Example1: simplified case; /// ~~~{.cpp}; /// class MyClass : public TObject, public AnotherClass; /// ~~~; /// then on return, one get away with using:; /// ~~~{.cpp}; /// MyClass *obj = (MyClass*)key->ReadObj();; /// ~~~; ///; /// #### Example2: Usual case (recommended unless performance is critical); /// ~~~{.cpp}; /// MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; /// ~~~; /// which support also the more complex inheritance like:; /// ~~~{.cpp}; /// class MyClass : public AnotherClass, public TObject; /// ~~~; ///; /// Of course, `dynamic_cast<>` can also be used in the example 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TKey.cxx:937,simpl,simplified,937,io/io/src/TKey.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TKey.cxx,1,['simpl'],['simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Train the network.; /// nEpoch is the number of iterations.; /// option can contain:; /// - ""text"" (simple text output); /// - ""graph"" (evoluting graphical training curves); /// - ""update=X"" (step for the text/graph output update); /// - ""+"" will skip the randomisation and start from the previous values.; /// - ""current"" (draw in the current canvas); /// - ""minErrorTrain"" (stop when NN error on the training sample gets below minE; /// - ""minErrorTest"" (stop when NN error on the test sample gets below minE; /// All combinations are available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:186,simpl,simple,186,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Translate the arguments of genreflex into rootcling ones and forward them; /// to the RootCling function.; /// These are two typical genreflex and rootcling commandlines; /// 1) genreflex header1.h [header2.h ...] [options] [preprocessor options]; /// 2) rootcling [-v] [-v0-4] [-f] [out.cxx] [-s sharedlib.so] [-m pcmfilename]; /// header1.h[{+,-}][!] ..headerN.h[{+,-}][!] [{LinkDef.h,selectionRules.xml}]; /// The rules with which the arguments are translated are (1st column genreflex):; /// --debug -v4; /// --quiet -v0; /// -o ofile positional arg after -f; /// -s selection file Last argument of the call; /// --fail_on_warning Wrap ROOT::TMetaUtils::Warning and throw if selected; ///; /// New arguments:; /// -l --library targetLib name (new) -s targetLib name; /// -m pcmname (can be many -m) (new) -m pcmname (can be many -m); /// --rootmap -rmf (new); /// --rootmap-lib -rml (new); ///; /// genreflex options which rise warnings (feedback is desirable); /// --no_membertypedefs (it should be irrelevant); /// --no_templatetypedefs (it should be irrelevant); ///; /// genreflex options which are ignored (know for sure they are not needed); /// --pool, --dataonly; /// --interpreteronly; /// --gccxml{path,opt,post}; ///; ///; /// Exceptions; /// The --deep option of genreflex is passed as function parameter to rootcling; /// since it's not needed at the moment there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:1028,feedback,feedback,1028,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Turn rubberband feedback mode on or off.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:102,feedback,feedback,102,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Un-zoom the image to original size.; /// UnZoom() - performs undo for Zoom,Crop,Scale actions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:147,undo,undo,147,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['undo'],['undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Undo action is in progress",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:86,Undo,Undo,86,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['Undo'],['Undo']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// UndoButton Slot. Activated when user press Undo button. Restore last top node pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/src/TStructViewerGUI.cxx:86,Undo,UndoButton,86,graf3d/gviz3d/src/TStructViewerGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/src/TStructViewerGUI.cxx,2,['Undo'],"['Undo', 'UndoButton']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Undock container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx:86,Undo,Undock,86,gui/gui/src/TGDockableFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGDockableFrame.cxx,1,['Undo'],['Undock']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Undock the window - put it into a dedicated main-frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx:86,Undo,Undock,86,graf3d/eve/src/TEveWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx,1,['Undo'],['Undock']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Undock the window - put it into a dedicated main-frame.; /// The old window slot is destroyed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx:86,Undo,Undock,86,graf3d/eve/src/TEveWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx,1,['Undo'],['Undock']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Update feedback histograms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,feedback,feedback,93,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['feedback'],['feedback']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:93,progress bar,progress bar,93,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,2,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Update progress bar and status labels.; /// Use ""processed == total"" or ""processed < 0"" to indicate end of processing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx:93,progress bar,progress bar,93,gui/sessionviewer/src/TProofProgressDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressDialog.cxx,2,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/src/TStructViewerGUI.cxx:100,Clear,Clear,100,graf3d/gviz3d/src/TStructViewerGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/src/TStructViewerGUI.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Use the information in the TGTextLayout object to display a multi-line,; /// justified string of text.; ///; /// This procedure is useful for simple widgets that need to display; /// single-font, multi-line text and want TGFont to handle the details.; ///; /// dst -- Window or pixmap in which to draw.; /// gc -- Graphics context to use for drawing text.; /// x, y -- Upper-left hand corner of rectangle in which to draw; /// (pixels).; /// firstChar -- The index of the first character to draw from the given; /// text item. 0 specfies the beginning.; /// lastChar -- The index just after the last character to draw from the; /// given text item. A number < 0 means to draw all characters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx:228,simpl,simple,228,gui/gui/src/TGFont.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Use the information in the TGTextLayout object to display an underline; /// below an individual character. This procedure does not draw the text,; /// just the underline.; ///; /// This procedure is useful for simple widgets that need to display; /// single-font, multi-line text with an individual character underlined; /// and want TGFont to handle the details. To display larger amounts of; /// underlined text, construct and use an underlined font.; ///; /// dst -- Window or pixmap in which to draw.; /// gc -- Graphics context to use for drawing text.; /// x, y -- Upper-left hand corner of rectangle in which to draw; /// (pixels).; /// underline -- Index of the single character to underline, or -1 for; /// no underline.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx:296,simpl,simple,296,gui/gui/src/TGFont.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that constructs the set of; /// observables to project when plotting ourselves as function of; /// 'plotVar'. 'allVars' is the list of variables that must be; /// projected, but may contain variables that we do not depend on. If; /// 'silent' is cleared, warnings about inconsistent input parameters; /// will be printed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:362,clear,cleared,362,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// VSD Structures; ////////////////////////////////////////////////////////////////////////////////; // Basic structures for Reve VSD concept. Design criteria:; //; // * provide basic cross-referencing functionality;; //; // * small memory/disk footprint (floats / count on compression in; // split mode);; //; // * simple usage from tree selections;; //; // * placement in TClonesArray (composites are TObject derived);; //; // * minimal member-naming (impossible to make everybody happy).; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/inc/ROOT/REveVSDStructs.hxx:399,simpl,simple,399,graf3d/eve7/inc/ROOT/REveVSDStructs.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/inc/ROOT/REveVSDStructs.hxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Very simple test of the TGTextEdit widget.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:91,simpl,simple,91,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Virtual from TEveElement; here we simply append this scene to; /// the list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveScene.cxx:120,simpl,simply,120,graf3d/eve/src/TEveScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveScene.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Virtual function called before a window is undocked.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx:129,undo,undocked,129,graf3d/eve/src/TEveWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx,1,['undo'],['undocked']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Virtual function called before a window is undocked.; /// On mac we have to force recreation of gl-context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveViewer.cxx:129,undo,undocked,129,graf3d/eve/src/TEveViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveViewer.cxx,1,['undo'],['undocked']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Virtual function called from eve side when the frame should be; /// destroyed. This means we expect that fEveWindow is null.; ///; /// We simply call CloseWindow() on the main-frame which will in; /// turn generate the ""CloseWindow()"" signal.; /// This is then handled in MainFrameClosed().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx:224,simpl,simply,224,graf3d/eve/src/TEveWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveWindow.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Virtual method TEveElement::UnSelect.; /// Clear selected towers when deselected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveCaloData.cxx:129,Clear,Clear,129,graf3d/eve/src/TEveCaloData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveCaloData.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Virtual method called-back after a secondary selection hit; /// is recorded (see TGLViewer::HandleButton(), Ctrl-Button1).; /// The ptr argument holds the GL pick-record of the closest hit.; ///; /// This base-class implementation simply prints out the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx:317,simpl,simply,317,graf3d/gl/src/TGLLogicalShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLLogicalShape.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Virtual method that is called on any change in the dependent frames.; /// This implementation simply calls fPad Modified()/Update().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TGedEditor.cxx:180,simpl,simply,180,gui/ged/src/TGedEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TGedEditor.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// We assume that we have a simple type:; /// [const] typename[*&][const]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:111,simpl,simple,111,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// When obj is deleted, clear fFitObject if fFitObject = obj.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:107,clear,clear,107,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Write TArray object to buffer. Simplified version of; /// TBuffer::WriteObject (does not keep track of multiple; /// references to the same array).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx:117,Simpl,Simplified,117,core/cont/src/TArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TArray.cxx,1,['Simpl'],['Simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// Write TString object to buffer. Simplified version of; /// TBuffer::WriteObject (does not keep track of multiple; /// references to the same string). We need to have it here; /// because TBuffer::ReadObject can only handle descendant; /// of TObject",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx:118,Simpl,Simplified,118,core/base/src/TString.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TString.cxx,1,['Simpl'],['Simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// \brief Merge implementation of TStatistic; /// \param[in] in Other TStatistic objects to be added to the current one; ///; /// The function merges the statistics of all objects together to form a new one.; /// Merging quantities is done via simple addition for the following class data members:; /// - number of entries fN; /// - the sum of weights fW; /// - the sum of squared weights fW2; /// - the sum of (value*weight) fM; ///; /// The sum of squared (value*weight) pairs fM2 is updated using the same formula as in; /// TStatistic::Fill() function.; ///; /// The minimum(maximum) is updated by checking that the minimum(maximum) of; /// the next TStatistic object in the queue is either less(greater) than the current minimum(maximum).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:327,simpl,simple,327,math/mathcore/src/TStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// \brief Simple struct of the return value of GetStreamerInfoListImpl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TFile.h:93,Simpl,Simple,93,io/io/inc/TFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TFile.h,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// \class TLinearMinimizer; /// \see Minuit2 for a newer version of this class; ///; /// TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer; /// interface usingTLinearFitter. This class uses TLinearFitter to find directly; /// (by solving a system of linear equations) the minimum of a least-square; /// function which has a linear dependence in the fit parameters. This class is; /// not used directly, but via the ROOT::Fitter class, when calling the; /// LinearFit method. It is instantiates using the plug-in manager; /// (plug-in name is ""Linear"").; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:190,simpl,simple,190,math/minuit/src/TLinearMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// \class TMethodBrowsable; /// \ingroup tree; ///; /// This helper object allows the browsing of methods of objects stored in; /// branches. They will be depicted by a leaf (or a branch, in case the method; /// returns an object) with a red exclamation mark. Only a subset of all; /// methods will be shown in the browser (see IsMethodBrowsable for the; /// criteria a method has to satisfy).; ///; /// Obviously, methods are only available if the library is loaded which; /// contains the dictionary for the class to be browsed!; ///; /// If a branch contains a collection, TMethodBrowsable tries to find out; /// what the contained element is (it will only create methods for the; /// contained elements, but never for the collection). If it fails to extract; /// the type of the contained elements, or if there is no guarantee that the; /// type has any other common denominator than TObject (e.g. in the case of; /// a TObjArray, which can hold any object deriving from TObject) no methods; /// will be added.; ////////////////////////////////////////////////////////////////////////////////; /// Constructor.; /// Links a TBranchElement to a TMethod, allowing the TBrowser to; /// browse simple methods.; ///; /// The c'tor sets the name for a method ""Class::Method(params) const""; /// to ""Method(params)"", title to TMethod::GetPrototype",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx:1277,simpl,simple,1277,tree/tree/src/TBranchBrowsable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchBrowsable.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// \class TMinuitMinimizer; /// \see Minuit2 for a newer version of this class; /// TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface; /// using TMinuit. This class is normally instantiated using the plug-in manager; /// (plug-in with name Minuit or TMinuit).; /// In addition the user can choose the minimizer algorithm:; /// Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex); ////////////////////////////////////////////////////////////////////////////////; // initialize the static instances; // Implement a thread local static member",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:458,Simpl,Simplex,458,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,2,['Simpl'],['Simplex']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// adjust the path of links for source files, which are in src/, but need; /// to point to relpath (usually ""../""). Simply replaces ""=\""./"" by ""=\""../""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx:199,Simpl,Simply,199,html/src/TDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocOutput.cxx,1,['Simpl'],['Simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// algorithm adapted from code example in:; /// Marsaglia, G. and Tsang, W. W.; /// A Simple Method for Generating Gamma Variables; /// ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000; ///; /// The speed of this algorithm depends on the speed of generating normal variates.; /// The algorithm is limited to \f$ \gamma \geq 0 \f$ !",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooGamma.cxx:169,Simpl,Simple,169,roofit/roofit/src/RooGamma.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooGamma.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clear all cached pdf objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:86,clear,clear,86,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clear navigation history",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowserLite.cxx:86,clear,clear,86,gui/gui/src/TRootBrowserLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootBrowserLite.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clear nodes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx:86,clear,clear,86,tmva/tmva/src/BinarySearchTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/BinarySearchTree.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clear the cache obtained from the pdf used for speeding the toy and global observables generation; /// needs to be called every time the model pdf (fPdf) changes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:86,clear,clear,86,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clear the data for this matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx:86,clear,clear,86,geom/geom/src/TGeoMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clear the fields of this transformation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx:86,clear,clear,86,geom/geom/src/TGeoMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clear the nodes (their S/N, Nevents etc), just keep the structure of the tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx:86,clear,clear,86,tmva/tmva/src/DecisionTreeNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTreeNode.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:86,clear,clear,86,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clears all lists; /// except for user names and system include files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:86,clear,clears,86,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['clear'],['clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// clears and then rebuilds all lists; /// except for user names and system include files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:86,clear,clears,86,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['clear'],['clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// decay synapse weights; /// in last 10 epochs, lower learning rate even more to find a good minimum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:138,learn,learning,138,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - NCycles `<integer>` Number of training cycles (too many cycles could overtrain the network); /// - HiddenLayers `<string>` Layout of the hidden layers (nodes per layer); /// * specifications for each hidden layer are separated by comma; /// * for each layer the number of nodes can be either absolut (simply a number); /// or relative to the number of input nodes to the neural net (N); /// * there is always a single node in the output layer; ///; /// example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; /// layers 1,2,3,4, respectively",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:497,simpl,simply,497,tmva/tmva/src/MethodTMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// define the options (their key words) that can be set in the option string; ///; /// know options:; ///; /// - TrainingMethod `<string>` Training method; /// available values are:; /// - BP Back-Propagation `<default>`; /// - GA Genetic Algorithm (takes a LONG time); ///; /// - LearningRate `<float>` NN learning rate parameter; /// - DecayRate `<float>` Decay rate for learning parameter; /// - TestRate `<int>` Test for overtraining performed at each #%th epochs; ///; /// - BPMode `<string>` Back-propagation learning mode; /// available values are:; /// - sequential `<default>`; /// - batch; ///; /// - BatchSize `<int>` Batch size: number of events/batch, only set if in Batch Mode,; /// - -1 for BatchSize=number_of_events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:364,Learn,LearningRate,364,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,4,"['Learn', 'learn']","['LearningRate', 'learning']"
Usability,"////////////////////////////////////////////////////////////////////////////////; /// delete and clear all class members",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:97,clear,clear,97,tmva/tmva/src/MethodFDA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// delete/clear network",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:93,clear,clear,93,tmva/tmva/src/MethodANNBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// destroy/clear the network then read it back in from the weights file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:94,clear,clear,94,tmva/tmva/src/MethodANNBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// do the actual optimization using a simple scan method,; /// i.e. calculate the FOM for; /// different tuning paraemters and remember which one is; /// gave the best FOM",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:121,simpl,simple,121,tmva/tmva/src/OptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// draws a string in the progress bar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:108,progress bar,progress bar,108,tmva/tmva/src/Timer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// draws progress bar in color or B&W; /// caution:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx:92,progress bar,progress bar,92,tmva/tmva/src/Timer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Timer.cxx,1,['progress bar'],['progress bar']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// fill the array stats from the contents of this histogram; /// The array stats must be correctly dimensioned in the calling program.; ///; /// ~~~ {.cpp}; /// stats[0] = sumw; /// stats[1] = sumw2; /// stats[2] = sumwx; /// stats[3] = sumwx2; /// ~~~; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.; ///; /// IMPORTANT NOTE: This means that the returned statistics are context-dependent.; /// If TAxis::kAxisRange, the returned statistics are dependent on the binning;; /// otherwise, they are a copy of the histogram statistics computed at fill time,; /// which are unbinned by default (calling TH1::ResetStats forces them to use; /// binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; ///; /// Note that the mean value/StdDev is computed using the bins in the currently; /// defined range (see TAxis::SetRange). By default the range includes; /// all bins from 1 to nbins included, excluding underflows and overflows.; /// To force the underflows and overflows in the computation, one must; /// call the static function TH1::StatOverflows(kTRUE) before filling; /// the histogram.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:426,simpl,simply,426,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// fill the array stats from the contents of this profile.; ///; /// The array stats must be correctly dimensioned in the calling program.; ///; /// - stats[0] = sumw; /// - stats[1] = sumw2; /// - stats[2] = sumwx; /// - stats[3] = sumwx2; /// - stats[4] = sumwy; /// - stats[5] = sumwy2; /// - stats[6] = sumwxy; /// - stats[7] = sumwz; /// - stats[8] = sumwz2; /// - stats[9] = sumwxz; /// - stats[10]= sumwyz; /// - stats[11]= sumwt; /// - stats[12]= sumwt2; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:635,simpl,simply,635,hist/hist/src/TProfile3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// fill the array stats from the contents of this profile.; ///; /// The array stats must be correctly dimensioned in the calling program.; ///; /// - stats[0] = sumw; /// - stats[1] = sumw2; /// - stats[2] = sumwx; /// - stats[3] = sumwx2; /// - stats[4] = sumwy; /// - stats[5] = sumwy2; ///; /// If no axis-subrange is specified (via TAxis::SetRange), the array stats; /// is simply a copy of the statistics quantities computed at filling time.; /// If a sub-range is specified, the function recomputes these quantities; /// from the bin contents in the current axis range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:462,simpl,simply,462,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// formatted output of simple table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:106,simpl,simple,106,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// gives back true if the last ""steps"" steps have lead to an improvement of the; /// ""fitness"" of the ""individuals"" of at least ""improvement""; ///; /// this gives a simple measure of if the estimator of the MLP is; /// converging and no major improvement is to be expected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:248,simpl,simple,248,tmva/tmva/src/ConvergenceTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// gives back true if the last ""steps"" steps have lead to an improvement of the; /// ""fitness"" of the ""individuals"" of at least ""improvement""; ///; /// this gives a simple measure of if the fitness of the individuals is; /// converging and no major improvement is to be expected soon.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:248,simpl,simple,248,tmva/tmva/src/GeneticAlgorithm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// if the ""fitnessFunction"" is called multiple times for one set of; /// factors (because i.e. each event of a TTree has to be assessed with; /// each set of Factors proposed by the Genetic Algorithm) the value; /// of the current calculation has to be added(? or else) to the value; /// obtained up to now.; /// example: some chi-square is calculated for every event,; /// after every event the new chi-square (newValue) has to be simply; /// added to the oldValue.; ///; /// this function has to be overridden eventually; /// it might contain only the following return statement.; /// return oldValue + newValue;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx:515,simpl,simply,515,tmva/tmva/src/GeneticAlgorithm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GeneticAlgorithm.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// initialize learning rates of synapses, used only by back propagation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:97,learn,learning,97,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// performs TMlpANN training; /// available learning methods:; ///; /// - TMultiLayerPerceptron::kStochastic; /// - TMultiLayerPerceptron::kBatch; /// - TMultiLayerPerceptron::kSteepestDescent; /// - TMultiLayerPerceptron::kRibierePolak; /// - TMultiLayerPerceptron::kFletcherReeves; /// - TMultiLayerPerceptron::kBFGS; ///; /// TMultiLayerPerceptron wants test and training tree at once; /// so merge the training and testing trees from the MVA factory first:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:127,learn,learning,127,tmva/tmva/src/MethodTMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx,1,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// return functions name to read simple data type from xml file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx:116,simpl,simple,116,io/xml/src/TXMLPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// return simple data types for given TStreamerElement object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx:93,simpl,simple,93,io/xml/src/TXMLPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// returns name of simple data type for given data member",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx:102,simpl,simple,102,io/xml/src/TXMLPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// set rules; ///; /// first clear all",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:112,clear,clear,112,tmva/tmva/src/RuleEnsemble.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// set the integration type (possible type are) :; ///; /// - 1D integration ( used when only one nuisance and when the posterior is scanned):; /// adaptive , gauss, nonadaptive; /// - multidim:; /// - ADAPTIVE, adaptive numerical integration; /// The parameter numIters (settable with SetNumIters) is the max number of function calls.; /// It can be reduced to make the integration faster but it will be difficult to reach the required tolerance; /// - VEGAS MC integration method based on importance sampling - numIters is number of function calls; /// Extra Vegas parameter can be set using IntegratorMultiDimOptions class; /// - MISER MC integration method based on stratified sampling; /// See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; /// - PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters); ///; /// Extra integration types are:; ///; /// - TOYMC:; /// evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; /// integration, where the function is sampled according to the nuisance. It is convenient to use when all; /// the nuisance are uncorrelated and it is efficient to generate them; /// The toy are generated by default for each poi values; /// (this method has been proposed and provided by J.P Chou); /// - 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; /// each poi value. It can be convenient when the generation time is much larger than the evaluation time,; /// otherwise it is recommended to re-generate the toy for each poi scanned point of the posterior function; /// - ROOFIT:; /// use roofit default integration methods which will produce a nested integral (not recommended for more; /// than 1 nuisance parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:885,simpl,simple,885,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// simple constructors for 1 dimensional values (double)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx:86,simpl,simple,86,tmva/tmva/src/Volume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// simple constructors for 1 dimensional values (float)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx:86,simpl,simple,86,tmva/tmva/src/Volume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Volume.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// the simple constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:90,simpl,simple,90,tmva/tmva/src/Rule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; /// this function provides the ability to change the learning rate according to; /// the success of the last generations.; ///; /// Parameters:; ///; /// - int ofSteps : = if OF the number of STEPS given in this variable (ofSteps) the; /// rate of improvement has to be calculated; ///; /// using this function one can increase the stepSize of the mutation when we have; /// good success (to pass fast through the easy phase-space) and reduce the learning rate; /// if we are in a difficult ""territory"" of the phase-space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx:135,learn,learning,135,tmva/tmva/src/ConvergenceTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ConvergenceTest.cxx,2,['learn'],['learning']
Usability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Test Simple Canvas...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:173,Simpl,Simple,173,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Simpl'],['Simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Very simple test of the ROOT help dialog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:173,simpl,simple,173,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Execute MINUIT commands. MINImize, SIMplex, MIGrad and FUMili all; /// will call TFumili::Minimize method.; ///; /// For full command list see; /// MINUIT. Reference Manual. CERN Program Library Long Writeup D506.; ///; /// Improvement and errors calculation are not yet implemented as well; /// as Monte-Carlo seeking and minimization.; /// Contour commands are also unsupported.; ///; /// - command : command string; /// - args : array of arguments; /// - nargs : number of arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:126,SIMpl,SIMplex,126,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['SIMpl'],['SIMplex']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///; /// Note: This file assumes a certain structure on the input file. The structure; /// is as follows:; ///; /// - dataset (TDirectory); /// - ... some variables, plots ...; /// - Method_XXX (TDirectory); /// + XXX (TDirectory); /// * ... some plots ...; /// * MVA_Method_XXX_Test_#classname#; /// * MVA_Method_XXX_Train_#classname#; /// * ... some plots ...; /// - Method_YYY (TDirectory); /// + YYY (TDirectory); /// * ... some plots ...; /// * MVA_Method_YYY_Test_#classname#; /// * MVA_Method_YYY_Train_#classname#; /// * ... some plots ...; /// - TestTree (TTree); /// + ... data...; /// - TrainTree (TTree); /// + ... data...; ///; /// Keeping this in mind makes the main loop in getRocCurves easier to follow :); ///; ////////////////////////////////////////////////////////////////////////////////; /// Private class that simplify drawing plots combining information from; /// several methods.; ///; /// Each wrapper will manage a canvas and a legend and provide convenience; /// functions to add data to these. It also provides a save function for; /// saving an image representation to disk.; ///; /// Feel free to extend this class as you see fit. It is intended as a; /// convenience when showing multiclass roccurves, not a fully general tool.; ///; /// Usage:; /// auto p = new EfficiencyPlotWrapper(name, title, dataset, i):; /// for (TGraph * g : listOfGraphs) {; /// p->AddGraph(g);; /// p->AddLegendEntry(methodName);; /// }; /// p->save();; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/efficienciesMulticlass.cxx:915,simpl,simplify,915,tmva/tmvagui/src/efficienciesMulticlass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/efficienciesMulticlass.cxx,1,['simpl'],['simplify']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///Add new surface. Simplified version for ged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5DPainter.cxx:102,Simpl,Simplified,102,graf3d/gl/src/TGL5DPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5DPainter.cxx,1,['Simpl'],['Simplified']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///Calculate colors for vertices,; ///using one of 20 color themes.; ///-1 simple 'metal' surface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLParametric.cxx:157,simpl,simple,157,graf3d/gl/src/TGLParametric.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLParametric.cxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///Clear :)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx:85,Clear,Clear,85,graf3d/gl/src/TGLUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLUtil.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///Clear the current gl-context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLWidget.cxx:85,Clear,Clear,85,graf3d/gl/src/TGLWidget.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLWidget.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///Clears everything. Used in TH1::Fit and TGraph::Fit().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:85,Clear,Clears,85,math/minuit/src/TLinearFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx,1,['Clear'],['Clears']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///actions of select all/clear all button",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:107,clear,clear,107,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,2,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///clear the sscp matrix, used for covariance and mean calculation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRobustEstimator.cxx:85,clear,clear,85,math/physics/src/TRobustEstimator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRobustEstimator.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///creates a subset of htotal elements from ntotal elements; ///first, p+1 elements are drawn randomly(without repetitions); ///if their covariance matrix is singular, more elements are; ///added one by one, until their covariance matrix becomes regular; ///or it becomes clear that htotal observations lie on a hyperplane; ///If covariance matrix determinant!=0, distances of all ntotal elements; ///are calculated, using formula d_i=Sqrt((x_i-M)*S_inv*(x_i-M)), where; ///M is mean and S_inv is the inverse of the covariance matrix; ///htotal points with smallest distances are included in the returned subset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRobustEstimator.cxx:354,clear,clear,354,math/physics/src/TRobustEstimator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRobustEstimator.cxx,1,['clear'],['clear']
Usability,"////////////////////////////////////////////////////////////////////////////////; ///mgn is simply ignored, because ROOT's TVirtualX TGX11 are complete mess with; ///painting attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFontManager.cxx:92,simpl,simply,92,graf3d/gl/src/TGLFontManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFontManager.cxx,1,['simpl'],['simply']
Usability,"///////////////////////////////////////////////////////////////////////////////; /// Clear all respective values from drawable. Only defaults can be used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrAggregation.cxx:85,Clear,Clear,85,graf2d/gpadv7/src/RAttrAggregation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrAggregation.cxx,1,['Clear'],['Clear']
Usability,"///////////////////////////////////////////////////////////////////////////////; /// Clear internal data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrBase.cxx:85,Clear,Clear,85,graf2d/gpadv7/src/RAttrBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrBase.cxx,1,['Clear'],['Clear']
Usability,"///////////////////////////////////////////////////////////////////////////////; /// Clear value if any with specified name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrBase.cxx:85,Clear,Clear,85,graf2d/gpadv7/src/RAttrBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RAttrBase.cxx,1,['Clear'],['Clear']
Usability,"///////////////////////////////////////////////////////////////////////////////; //; // BAYESIAN SHORTEST INTERVAL - SIMPLE POISSON MODEL; //; // Test the Bayesian shortest interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // The reference interval limits are taken from the paper: ""Why isn't every; // physicist a Bayesian?"" by Robert D. Cousins.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:117,SIMPL,SIMPLE,117,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['SIMPL'],['SIMPLE']
Usability,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTESTINVERTER UPPER LIMIT - SIGNAL + BACKGROUND + EFFICIENCY MODEL; //; // Test the validity of the upper limit computed by the HypoTestInverter; // on a complex model distribution with signal, background and efficiency.; // Reference values and test values are both computed with the HypoTestInverter.; // As such, this test can only confirm if the HypoTestInverter has the same; // behaviour across different computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Signal + Background + Efficiency; // built in stressRooStats_models.cxx; //; /// Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig * eff + bkg; // confidenceLevel -> Confidence Level of the upper limit we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:787,Simpl,Simple,787,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['Simpl'],['Simple']
Usability,"///////////////////////////////////////////////////////////////////////////////; //; // HYPOTHESIS TEST CALCULATOR TEST - SIMULTANEOUS PDF MODEL; //; // This test evaluates the functionality of the HypoTestCalculator by; // calculating the significance of the signal on a simple Simultaneous Pdf; // model with two channels. Reference values and test values are both computed; // with the HypoTestCalculator. As such, this test can only confirm if the; // HypoTestCalculator has the same behaviour across different computing; // platforms or RooStats revisions.; //; // ModelConfig (explicit) : Simultaneous Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; //; // 06/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:272,simpl,simple,272,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"////////////////////////////////////////////////////////////////////////////; // //; // TTreeReader //; // //; // A simple interface for reading trees or chains. //; // //; // //; ////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReader.h:116,simpl,simple,116,tree/treeplayer/inc/TTreeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReader.h,2,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////; // //; // TTreeReaderValue //; // //; // A simple interface for reading data from trees or chains. //; // //; // //; ////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h:121,simpl,simple,121,tree/treeplayer/inc/TTreeReaderValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReaderValue.h,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////; // //; // TTreeReaderValueFast //; // //; // A simple interface for reading data from trees or chains. //; // //; // //; ////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/ROOT/TTreeReaderValueFast.hxx:125,simpl,simple,125,tree/treeplayer/inc/ROOT/TTreeReaderValueFast.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/ROOT/TTreeReaderValueFast.hxx,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////; // TFeldmanCousins; //; // class to calculate the CL upper limit using; // the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; //; // The default confidence interval calvculated using this method is 90%; // This is set either by having a default the constructor, or using the; // appropriate fraction when instantiating an object of this class (e.g. 0.9); //; // The simple extension to a gaussian resolution function bounded at zero; // has not been addressed as yet -> `time is of the essence' as they write; // on the wall of the maze in that classic game ...; //; // VARIABLES THAT CAN BE ALTERED; // -----------------------------; // => depending on your desired precision: The initial values of fMuMin,; // fMuMax, fMuStep and fNMax are those used in the PRD:; // fMuMin = 0.0; // fMuMax = 50.0; // fMuStep= 0.005; // but there is total flexibility in changing this should you desire.; //; // Author: Adrian Bevan, Liverpool University; //; // Copyright Liverpool University 2001 bevan@slac.stanford.edu; ///////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/inc/TFeldmanCousins.h:460,simpl,simple,460,math/physics/inc/TFeldmanCousins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/inc/TFeldmanCousins.h,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////////; /// We do not write to a database in the RDataSource and therefore can simply return an error for this callback",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx:149,simpl,simply,149,tree/dataframe/src/RSqliteDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx,2,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////////; /// \brief Add pretty printing pythonization; /// \param[in] self Always null, since this is a module function.; /// \param[in] args Pointer to a Python tuple object containing the arguments; /// received from Python.; ///; /// This function adds the following pythonizations to print the object more; /// user-friendly than cppyy by using the output of cling::printValue as the; /// return value of the special method __str__.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/GenericPyz.cxx:384,user-friendly,user-friendly,384,bindings/pyroot/pythonizations/src/GenericPyz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/src/GenericPyz.cxx,1,['user-friendly'],['user-friendly']
Usability,"////////////////////////////////////////////////////////////////////////////; /// \brief Clear a specific IO feature from this set.; /// \param[in] input_bits The specific feature to disable.; ///; /// Removes a feature from the `TIOFeatures` object; emits an Error message if; /// the IO feature is not supported by this version of ROOT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx:89,Clear,Clear,89,tree/tree/src/TIOFeatures.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TIOFeatures.cxx,2,['Clear'],['Clear']
Usability,"///////////////////////////////////////////////////////////////////////////; // //; // default general problem formulation: //; // //; // minimize c' x + ( 1/2 ) x' * Q x ; //; // subject to A x = b ; //; // clo <= C x <= cup ; //; // xlo <= x <= xup ; //; // //; // The general linear equality constraints must have either an upper //; // or lower bound, but need not have both bounds. The variables may have//; // no bounds; an upper bound; a lower bound or both an upper and lower //; // bound. //; // //; // However, for many (possibly most) QP's, the matrices in the //; // formulation have structure that may be exploited to solve the //; // problem more efficiently. This abstract problem formulation contains //; // a setup such that one can derive and add special formulations . //; // The optimality conditions of the simple QP defined above are //; // follows: //; // //; // rQ = c + Q * x - A' * y - C' * z = 0 //; // rA = A * x - b = 0 //; // rC = C * x - s - d = 0 //; // r3 = S * z = 0 //; // s, z >= 0 //; // //; // Where rQ, rA, rC and r3 newly defined quantities known as residual //; // vectors and x, y, z and s are variables of used in solution of the //; // QPs. //; // //; ///////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpProbBase.h:828,simpl,simple,828,math/quadp/inc/TQpProbBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpProbBase.h,1,['simpl'],['simple']
Usability,"///////////////////////////////////////////////////////////////////////////; // TGeoChecker - A simple checker generating random points inside a //; // geometry. Generates a tree of points on the surfaces corresponding //; // to the safety of each generated point //; // //; ///////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/inc/TGeoChecker.h:96,simpl,simple,96,geom/geompainter/inc/TGeoChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/inc/TGeoChecker.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // BinarySearchTree //; // //; // A simple Binary search tree including volume search method //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:119,simpl,simple,119,tmva/tmva/inc/TMVA/BinarySearchTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // EventTranslator class translates Cocoa events to 'ROOT's X11' events.//; // In 90% cases there is no direct mapping from Cocoa event to //; // X11 event: Cocoa events are more simple (from programmer's POV). //; // EventTranslator tries to emulate X11 behavior. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Events.h:262,simpl,simple,262,graf2d/cocoa/inc/X11Events.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/X11Events.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // Factory //; // //; // This is the main MVA steering class: it creates all MVA methods, //; // and guides them through the training, testing and evaluation //; // phases //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:184,guid,guides,184,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,1,['guid'],['guides']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // GiniIndexWithLaplace //; // //; // Implementation of the GiniIndex With Laplace correction //; // as separation criterion //; // //; // Large Gini Indices (maximum 0.5) mean , that the sample is well //; // mixed (same amount of signal and bkg) //; // bkg. Small Indices mean, well separated. //; // general definition: //; // Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 //; // Where: M is a sample of whatever N elements (events) //; // that belong to K different classes //; // c(k) is the number of elements that belong to class k //; // for just Signal and Background classes this boils down to: //; // The Laplace's correction to the probability distribution would //; // turn the c(1)/N into (c(1)+1)/(N+2) //; // using this the simple Gini Index for two classes //; // Gini(Sample) = 2s*b/(s+b)^2 //; // turns into //; // GiniLaplace(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h:840,simpl,simple,840,tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // MethodDL //; // //; // Method class for all Deep Learning Networks //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h:135,Learn,Learning,135,tmva/tmva/inc/TMVA/MethodDL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodDL.h,1,['Learn'],['Learning']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // MethodFDA //; // //; // Function discriminant analysis (FDA). This simple classifier //; // fits any user-defined TFormula (via option configuration string) to //; // the training data by requiring a formula response of 1 (0) to signal //; // (background) events. The parameter fitting is done via the abstract //; // class FitterBase, featuring Monte Carlo sampling, Genetic //; // Algorithm, Simulated Annealing, MINUIT and combinations of these. //; // //; // Can compute one-dimensional regression //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h:153,simpl,simple,153,tmva/tmva/inc/TMVA/MethodFDA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFDA.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // MethodHMatrix //; // //; // H-Matrix method, which is implemented as a simple comparison of //; // chi-squared estimators for signal and background, taking into //; // account the linear correlations between the input variables //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:157,simpl,simple,157,tmva/tmva/inc/TMVA/MethodHMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TColorGradient //; // //; // TColorGradient extends basic TColor. //; // Actually, this is not a simple color, but linear or radial gradient //; // for a filled area. By inheriting from TColor, gradients can be //; // placed inside gROOT's list of colors and use it in all TAttXXX //; // descendants without modifying any existing code. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:183,simpl,simple,183,core/base/inc/TColorGradient.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TDrawFeedback //; // //; // Utility class to draw objects in the feedback list during queries. //; // Draws histograms in separated canvases and user-defined objects via //; // Draw(). Users requiring advanced treatment should implement their //; // own version following this example. See also TStatsFeedback. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/inc/TDrawFeedback.h:151,feedback,feedback,151,proof/proofplayer/inc/TDrawFeedback.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/inc/TDrawFeedback.h,1,['feedback'],['feedback']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TGLMatrix //; // //; // 16 component (4x4) transform matrix - column MAJOR as per GL. //; // Provides limited support for adjusting the translation, scale and //; // rotation components. //; // //; // This is part of collection of simple utility classes for GL only in //; // TGLUtil.h/cxx. These provide const and non-const accessors Arr() & //; // CArr() to a GL compatible internal field - so can be used directly //; // with OpenGL C API calls - which TVector3 etc cannot (easily). //; // They are not intended to be fully featured just provide minimum //; // required. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h:317,simpl,simple,317,graf3d/gl/inc/TGLUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TGLPlane //; // //; // 3D plane class - of format Ax + By + Cz + D = 0 //; // //; // This is part of collection of simple utility classes for GL only in //; // TGLUtil.h/cxx. These provide const and non-const accessors Arr() & //; // CArr() to a GL compatible internal field - so can be used directly //; // with OpenGL C API calls - which TVector3 etc cannot (easily). //; // They are not intended to be fully featured just provide minimum //; // required. //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h:201,simpl,simple,201,graf3d/gl/inc/TGLUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLUtil.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TNtuple //; // //; // A simple tree with branches of floats. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TNtuple.h:110,simpl,simple,110,tree/tree/inc/TNtuple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TNtuple.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TNtupleD //; // //; // A simple tree with branches of doubles. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TNtupleD.h:111,simpl,simple,111,tree/tree/inc/TNtupleD.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TNtupleD.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TQCommand, TQUndoManager - support for multiple Undo/Redo operations //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:134,Undo,Undo,134,core/base/inc/TQCommand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h,1,['Undo'],['Undo']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TSimpleAnalysis //; // //; // A TSimpleAnalysis object creates histograms from a TChain. These //; // histograms are stored to an output file. The histogrammed //; // (TTreeFormula) expressions, their cuts, the input and output files //; // are configured through a simple config file that allows comments //; // starting with '#'. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TSimpleAnalysis.h:352,simpl,simple,352,tree/treeplayer/inc/TSimpleAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TSimpleAnalysis.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TStatsFeedback //; // //; // Utility class to display PROOF stats feedback histos during queries. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/inc/TStatsFeedback.h:152,feedback,feedback,152,proof/proofplayer/inc/TStatsFeedback.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/inc/TStatsFeedback.h,1,['feedback'],['feedback']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TThreadPool //; // This class implement a simple Thread Pool pattern. //; // So far it supports only one type of queue - FIFO //; // //; // Please see the tutorial ""tutorials/thread/threadPool.C"" for //; // more details on how to use TThreadPool. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TThreadPool.h:128,simpl,simple,128,core/thread/inc/TThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TThreadPool.h,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; // //; // TUUID //; // //; // This class defines a UUID (Universally Unique IDentifier), also //; // known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits //; // long, and if generated according to this algorithm, is either //; // guaranteed to be different from all other UUIDs/GUIDs generated //; // until 3400 A.D. or extremely likely to be different. UUIDs were //; // originally used in the Network Computing System (NCS) and //; // later in the Open Software Foundation's (OSF) Distributed Computing //; // Environment (DCE). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h:186,GUID,GUIDs,186,core/base/inc/TUUID.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TUUID.h,2,['GUID'],['GUIDs']
Usability,"//////////////////////////////////////////////////////////////////////////; /// Clear request; ///; /// normally called shortly before destructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpLongPollEngine.cxx:80,Clear,Clear,80,net/http/src/THttpLongPollEngine.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/THttpLongPollEngine.cxx,1,['Clear'],['Clear']
Usability,"//////////////////////////////////////////////////////////////////////////; /// Send a message with the specified code on the specified socket.; /// This standalone function can be used to send a code; /// on a given socket. It does not check whether the socket connection is; /// in a valid state. The message code can then be retrieved via MPRecv().\n; /// **Note:** only objects the headers of which have been parsed by; /// cling can be sent by MPSend(). User-defined types can be made available to; /// cling via a call like `gSystem->ProcessLine(""#include \""header.h\"""")`.; /// Pointer types are not supported (with the exception of const char*),; /// but the user can simply dereference the pointer and send the; /// pointed object instead.\n; /// **Note:** for readability, codes should be enumerated as in EMPCode.\n; /// \param s a pointer to a valid TSocket. No validity checks are performed\n; /// \param code the code to be sent; /// \return the number of bytes sent, as per TSocket::SendRaw",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/src/MPSendRecv.cxx:675,simpl,simply,675,core/multiproc/src/MPSendRecv.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/src/MPSendRecv.cxx,1,['simpl'],['simply']
Usability,"//////////////////////////////////////////////////////////////////////////; ///; /// \class ROOT::TProcessExecutor; /// \ingroup Parallelism; /// \brief This class provides a simple interface to execute the same task; /// multiple times in parallel, possibly with different arguments every; /// time.; ///; /// ###ROOT::TProcessExecutor::Map; /// This class inherits its interfaces from ROOT::TExecutor\n.; /// The two possible usages of the Map method are:\n; /// * Map(F func, unsigned nTimes): func is executed nTimes with no arguments; /// * Map(F func, T& args): func is executed on each element of the collection of arguments args; ///; /// For either signature, func is executed as many times as needed by a pool of; /// fNWorkers workers; the number of workers can be passed to the constructor; /// or set via SetNWorkers. It typically defaults to the number of cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included: ROOT::TProcessExecutor never; /// deletes what it returns, it simply forgets it.\n; /// **Note:** that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be; /// executed takes more than a few seconds, otherwise the overhead introduced; /// by Map will outrun the benefits of parallel execution on most machines.; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.; /// \endparblock; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/src/TProcessExecutor.cxx:175,simpl,simple,175,core/multiproc/src/TProcessExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/src/TProcessExecutor.cxx,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; ///; /// \class ROOT::TThreadExecutor; /// \ingroup Parallelism; /// \brief This class provides a simple interface to execute the same task; /// multiple times in parallel threads, possibly with different arguments every; /// time.; ///; /// ### ROOT::TThreadExecutor::Map; /// This class inherits its interfaces from ROOT::TExecutorCRTP\n, adapting them for multithreaded; /// parallelism and extends them supporting:; /// * Parallel `Foreach` operations.; /// * Custom task granularity and partial reduction, by specifying reduction function; /// and the number of chunks as extra parameters for the Map call. This is specially useful; /// to reduce the size of intermediate results when dealing with a sizeable number of elements; /// in the input data.; ///; /// The two possible usages of the Map method are:\n; /// * Map(F func, unsigned nTimes): func is executed nTimes with no arguments; /// * Map(F func, T& args): func is executed on each element of the collection of arguments args; ///; /// For either signature, func is executed as many times as needed by a pool of; /// nThreads threads, where nThreads typically defaults to the number of cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included: ROOT::TThreadExecutor never; /// deletes what it returns, it simply forgets it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.; /// \endparblock; /// **Note:** in ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx:174,simpl,simple,174,core/imt/src/TThreadExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx,1,['simpl'],['simple']
Usability,"//////////////////////////////////////////////////////////////////////////; ///; /// \class TMPClient; ///; /// Base class for multiprocess applications' clients. It provides a; /// simple interface to fork a ROOT session into server/worker sessions; /// and exchange messages with them. Multiprocessing applications can build; /// on TMPClient and TMPWorker: the class providing multiprocess; /// functionalities to users should inherit (possibly privately) from; /// TMPClient, and the workers executing tasks should inherit from TMPWorker.; ///; //////////////////////////////////////////////////////////////////////////; //////////////////////////////////////////////////////////////////////////; /// Class constructor.; /// \param nWorkers; /// \parblock; /// the number of children processes that will be created by; /// Fork, i.e. the number of workers that will be available after this call.; /// The default value (0) means that a number of workers equal to the number; /// of cores of the machine is going to be spawned. If that information is; /// not available, 2 workers are created instead.; /// \endparblock",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/src/TMPClient.cxx:182,simpl,simple,182,core/multiproc/src/TMPClient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/src/TMPClient.cxx,1,['simpl'],['simple']
Usability,"/////////////////////////////////////////////////////////////////////////; /// Clear internal objects cache",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowserData.cxx:79,Clear,Clear,79,gui/browserv7/src/RBrowserData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/src/RBrowserData.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////; // //; // XLDF parser, very simple implementation, used by GUI only. //; // //; ////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/XLFDParser.h:102,simpl,simple,102,graf2d/cocoa/inc/XLFDParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/XLFDParser.h,1,['simpl'],['simple']
Usability,"////////////////////////////////////////////////////////////////////////; /// Clear the resources",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:78,Clear,Clear,78,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['Clear'],['Clear']
Usability,"////////////////////////////////////////////////////////////////////////; /// Covariance contribution from uncorrelated uncertainties of the; /// response matrix; ///; /// \param[inout] ematrix covariance matrix histogram; /// \param[in] binMap mapping of histogram bins; /// \param[in] clearEmat if true, ematrix is cleared prior to adding; /// this covariance matrix contribution; ///; /// This method propagates the uncertainties of the response matrix; /// histogram, specified with the constructor, to the unfolding; /// result. It is assumed that the entries of that histogram are; /// bin-to-bin uncorrelated. In many cases this corresponds to the; /// ""Monte Carlo statistical uncertainties"".; /// <br/>; /// The array <b>binMap</b> is explained with the method GetOutput().; /// The flag <b>clearEmat</b> may be used to add covariance matrices from; /// several uncertainty sources.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:287,clear,clearEmat,287,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,3,['clear'],"['clearEmat', 'cleared']"
Usability,"////////////////////////////////////////////////////////////////////////; /// Get bin name of an outpt bin; ///; /// \param[in] iBinX bin number; ///; /// Return value: name of the bin; /// <br/>; /// For TUnfold and TUnfoldSys, this function simply returns the bin; /// number as a string. This function really only makes sense in the; /// context of TUnfoldDensity, where binnig schemes are implemented; /// using the class TUnfoldBinning, and non-trivial bin names are; /// returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:243,simpl,simply,243,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['simpl'],['simply']
Usability,"////////////////////////////////////////////////////////////////////////; /// add up an error matrix, also respecting the bin mapping; ///; /// \param[inout] ematrix error matrix histogram; /// \param[in] emat error matrix stored with internal mapping (member fXToHist); /// \param[in] binMap mapping of histogram bins; /// \param[in] doClear if true, ematrix is cleared prior to adding; /// elements of emat to it.; ///; /// the array <b>binMap</b> is explained with the method GetOutput(). The; /// matrix emat must have dimension NxN where N=fXToHist.size(); /// The flag <b>doClear</b> may be used to add covariance matrices from; /// several uncertainty sources.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:363,clear,cleared,363,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['clear'],['cleared']
Usability,"////////////////////////////////////////////////////////////////////////; /// covariance contribution from a systematic variation of the; /// response matrix; ///; /// \param[inout] ematrix covariance matrix histogram; /// \param[in] name identifier of the systematic variation; /// \param[in] binMap (default=nullptr) remapping of histogram bins; /// \param[in] clearEmat (default=true) if true, clear the histogram; /// prior to adding the covariance matrix contribution; ///; /// Returns the covariance matrix contribution from shifting the given; /// uncertainty source within one sigma; /// <br/>; /// the array <b>binMap</b> is explained with the method GetOutput().; /// The flag <b>clearEmat</b> may be used to add covariance matrices from; /// several uncertainty sources.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:363,clear,clearEmat,363,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,3,['clear'],"['clear', 'clearEmat']"
Usability,"////////////////////////////////////////////////////////////////////////; /// covariance contribution from background normalisation uncertainty; ///; /// \param[inout] ematrix output histogram; /// \param[in] source identifier of the background source; /// \param[in] binMap (default=nullptr) remapping of histogram bins; /// \param[in] clearEmat (default=true) if true, clear the histogram; /// prior to adding the covariance matrix contribution; ///; /// this method returns the uncertainties on the unfolding result; /// arising from the background source <b>source</b> and its normalisation; /// uncertainty. See method SubtractBackground() how to set the normalisation uncertainty; /// <br/>; /// the array <b>binMap</b> is explained with the method GetOutput().; /// The flag <b>clearEmat</b> may be used to add covariance matrices from; /// several uncertainty sources.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:337,clear,clearEmat,337,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,3,['clear'],"['clear', 'clearEmat']"
Usability,"////////////////////////////////////////////////////////////////////////; /// covariance contribution from background uncorrelated uncertainty; ///; /// \param[in] ematrix output histogram; /// \param[in] source identifier of the background source; /// \param[in] binMap (default=nullptr) remapping of histogram bins; /// \param[in] clearEmat (default=true) if true, clear the histogram; ///; /// this method returns the covariance contributions to the unfolding result; /// arising from the background source <b>source</b> and the uncorrelated; /// (background histogram uncertainties). Also see method SubtractBackground(); /// <br/>; /// the array <b>binMap</b> is explained with the method GetOutput().; /// The flag <b>clearEmat</b> may be used to add covariance matrices from; /// several uncertainty sources.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:333,clear,clearEmat,333,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,3,['clear'],"['clear', 'clearEmat']"
Usability,"////////////////////////////////////////////////////////////////////////; /// covariance matrix contribution from error on regularisation; /// parameter; ///; /// \param[inout] ematrix output histogram; /// \param[in] binMap (default=nullptr) remapping of histogram bins; /// \param[in] clearEmat (default=true) if true, clear the histogram; ///; /// this method returns the covariance contributions to the unfolding result; /// from the assigned uncertainty on the parameter tau, see method; /// SetTauError().; /// <br>; /// the array <b>binMap</b> is explained with the method GetOutput().; /// The flag <b>clearEmat</b> may be used to add covariance matrices from; /// several uncertainty sources.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:287,clear,clearEmat,287,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,3,['clear'],"['clear', 'clearEmat']"
Usability,"////////////////////////////////////////////////////////////////////////; /// covariance matrix contribution from input measurement uncertainties; ///; /// \param[inout] ematrix output histogram; /// \param[in] binMap (default=nullptr) remapping of histogram bins; /// \param[in] clearEmat (default=true) if true, clear the histogram; ///; /// this method returns the covariance contributions to the unfolding result; /// from the uncertainties or covariance of the input; /// data. In many cases, these are the ""statistical uncertainties"".; /// <br>; /// The array <b>binMap</b> is explained with the method GetOutput().; /// The flag <b>clearEmat</b> may be used to add covariance matrices from; /// several uncertainty sources.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:280,clear,clearEmat,280,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,3,['clear'],"['clear', 'clearEmat']"
Usability,"////////////////////////////////////////////////////////////////////////; /// get background into a histogram; ///; /// \param[inout] bgrHist target histogram, content and errors will be altered; /// \param[in] bgrSource (default=nullptr) name of backgrond source or zero; /// to add all sources of background; /// \param[in] binMap (default=nullptr) remap histogram bins; /// \param[in] includeError (default=3) include uncorrelated(1),; /// correlated (2) or both (3) sources of uncertainty in the; /// histogram errors; /// \param[in] clearHist (default=true) reset histogram before adding; /// up the specified background sources; ///; /// the array <b>binMap</b> is explained with the method GetOutput().; /// The flag <b>clearHist</b> may be used to add background from; /// several sources in successive calls to GetBackground().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:538,clear,clearHist,538,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['clear'],['clearHist']
Usability,"////////////////////////////////////////////////////////////////////////; /// propagate an error matrix on the input vector to the unfolding result; ///; /// \param[in] vyy input error matrix; /// \param[inout] ematrix histogram to be updated; /// \param[in] binMap mapping of histogram bins; /// \param[in] clearEmat if set, clear histogram before adding this; /// covariance contribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:308,clear,clearEmat,308,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,2,['clear'],"['clear', 'clearEmat']"
Usability,"////////////////////////////////////////////////////////////////////////; /// set up response matrix A, uncorrelated uncertainties of A,; /// regularisation scheme and binning schemes; ///; /// \param[in] hist_A matrix that describes the migrations; /// \param[in] histmap mapping of the histogram axes to the unfolding output; /// \param[in] regmode (default=kRegModeSize) global regularisation mode; /// \param[in] constraint (default=kEConstraintArea) type of constraint; /// \param[in] densityMode (default=kDensityModeBinWidthAndUser); /// regularisation scale factors to construct the matrix L; /// \param[in] outputBins (default=nullptr) binning scheme for truth (unfolding output); /// \param[in] inputBins (default=nullptr) binning scheme for measurement (unfolding; /// input); /// \param[in] regularisationDistribution (default=nullptr) selectin of; /// regularized distribution; /// \param[in] regularisationAxisSteering (default=nullptr) detailed; /// regularisation steeringfor selected distribution; ///; /// The parameters <b>hist_A, histmap, constraint</b> are; /// explained with the TUnfoldSys constructor.; /// <br/>; /// The parameters <b>outputBins,inputBins</b> set the binning; /// schemes. If these arguments are zero, simple binning schemes are; /// constructed which correspond to the axes of the histogram; /// <b>hist_A</b>.; /// <br/>; /// The parameters; /// <b>regmode, densityMode, regularisationDistribution, regularisationAxisSteering</b>; /// together control how the initial matrix L of regularisation conditions; /// is constructed. as explained in RegularizeDistribution().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx:1244,simpl,simple,1244,hist/unfold/src/TUnfoldDensity.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx,1,['simpl'],['simple']
Usability,"/////////////////////////////////////////////////////////////////////; /// Clear cached data, need to be clear when connection broken",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx:75,Clear,Clear,75,geom/webviewer/src/RGeomData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"/////////////////////////////////////////////////////////////////////; /// Clear geometry description",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx:75,Clear,Clear,75,geom/webviewer/src/RGeomData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx,1,['Clear'],['Clear']
Usability,"/////////////////////////////////////////////////////////////////////; /// Clear raw data. Will be rebuild when next connection will be established",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx:75,Clear,Clear,75,geom/webviewer/src/RGeomData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx,1,['Clear'],['Clear']
Usability,"///////////////////////////////////////////////////////////////////; // PauseButton - push button; // ExecuteEvent mehtod used to pause the game; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:72,Pause,PauseButton,72,test/Tetris.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx,4,"['Pause', 'pause']","['PauseButton', 'pause']"
Usability,"///////////////////////////////////////////////////////////////////; // ROOT implementation of the simple Tetris game; // Layout and some hints were taken from Qt /examples/tetris; //; // To run this game do the following:; // $ root; // root [0] gSystem.Load(""Tetris""); // root [1] Tetris t; // <play game>; // root [2] .q; //; // Other ROOT fun examples: Hello, Aclock ...; ///////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h:99,simpl,simple,99,test/Tetris.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.h,1,['simpl'],['simple']
Usability,"/////////////////////////////////////////////////////////; /// Clear list of patameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanelModel.cxx:63,Clear,Clear,63,gui/fitpanelv7/src/RFitPanelModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanelModel.cxx,1,['Clear'],['Clear']
Usability,"/////////////////////////////////////////////////; // //; // TextLine - wrapper class for a CoreText's //; // CTLine: hide all the API, calls, objects, //; // CoreFoundation objects required to draw //; // a simple line of text and be able to //; // calculate text metrics. //; // //; /////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/quartz/inc/QuartzText.h:208,simpl,simple,208,graf2d/quartz/inc/QuartzText.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/quartz/inc/QuartzText.h,1,['simpl'],['simple']
Usability,"/////////////////////////////////////; // for root; //////////////////////////////////; // simple Matrix vector op",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/matrix_op.h:91,simpl,simple,91,math/smatrix/test/matrix_op.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/matrix_op.h,1,['simpl'],['simple']
Usability,"////////////////////////; /// Create a new TTree BranchObject.; ///; /// Build a TBranchObject for an object of class classname.; /// addobj is the address of a pointer to an object of class classname.; /// IMPORTANT: classname must derive from TObject.; /// The class dictionary must be available (ClassDef in class header).; ///; /// This option requires access to the library where the corresponding class; /// is defined. Accessing one single data member in the object implies; /// reading the full object.; /// See the next Branch constructor for a more efficient storage; /// in case the entry consists of arrays of identical objects.; ///; /// By default the branch buffers are stored in the same file as the Tree.; /// use TBranch::SetFile to specify a different file; ///; /// IMPORTANT NOTE about branch names:; ///; /// And in general, in case two or more master branches contain subbranches; /// with identical names, one must add a ""."" (dot) character at the end; /// of the master branch name. This will force the name of the subbranches; /// to be of the form `master.subbranch` instead of simply `subbranch`.; /// This situation happens when the top level object; /// has two or more members referencing the same class.; /// For example, if a Tree has two branches B1 and B2 corresponding; /// to objects of the same class MyClass, one can do:; /// ~~~ {.cpp}; /// tree.Branch(""B1."",""MyClass"",&b1,8000,1);; /// tree.Branch(""B2."",""MyClass"",&b2,8000,1);; /// ~~~; /// if MyClass has 3 members a,b,c, the two instructions above will generate; /// subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c; ///; /// bufsize is the buffer size in bytes for this branch; /// The default value is 32000 bytes and should be ok for most cases.; /// You can specify a larger value (e.g. 256000) if your Tree is not split; /// and each entry is large (Megabytes); /// A small value for bufsize is optimum if you intend to access; /// the entries in the Tree randomly and your Tree is in split mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1161,simpl,simply,1161,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simply']
Usability,"//////////; ///; /// \class ROOT::TProcessExecutor; /// \ingroup Parallelism; /// \brief This class provides a simple interface to execute the same task; /// multiple times in parallel, possibly with different arguments every; /// time.; ///; /// ###ROOT::TProcessExecutor::Map; /// This class inherits its interfaces from ROOT::TExecutor\n.; /// The two possible usages of the Map method are:\n; /// * Map(F func, unsigned nTimes): func is executed nTimes with no arguments; /// * Map(F func, T& args): func is executed on each element of the collection of arguments args; ///; /// For either signature, func is executed as many times as needed by a pool of; /// fNWorkers workers; the number of workers can be passed to the constructor; /// or set via SetNWorkers. It typically defaults to the number of cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included: ROOT::TProcessExecutor never; /// deletes what it returns, it simply forgets it.\n; /// **Note:** that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be; /// executed takes more than a few seconds, otherwise the overhead introduced; /// by Map will outrun the benefits of parallel execution on most machines.; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.; /// \endparblock; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/src/TProcessExecutor.cxx:1162,simpl,simply,1162,core/multiproc/src/TProcessExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/src/TProcessExecutor.cxx,1,['simpl'],['simply']
Usability,"///; ///; /// \class ROOT::Internal::TExecutor; /// \brief This class implements the interface to execute the same task; /// multiple times, sequentially or in parallel depending on the execution policy passed; /// as a first parameter on construction, and possibly with different arguments every time.; ///; /// ###ROOT::Internal::TExecutor::Map; /// The two possible usages of the Map method are:\n; /// * `Map(F func, unsigned nTimes)`: func is executed nTimes with no arguments; /// * `Map(F func, T& args)`: func is executed on each element of the collection of arguments args; ///; /// For either signature, func is executed as many times as needed by a pool of; /// n workers; where n tipically defaults to the number of cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::::Internal::TExecutor never; /// deletes what it returns, it simply forgets it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func.; ///; /// ### ROOT::Internal::TExecutor::MapReduce; /// This set of methods behaves exactly like Map, but takes an additional; /// function as a third arg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TExecutor.cxx:1096,simpl,simply,1096,core/imt/src/TExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TExecutor.cxx,1,['simpl'],['simply']
Usability,"///< <b>""L""</b> A simple polyline through every point is drawn.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/inc/Hoption.h:18,simpl,simple,18,hist/histpainter/inc/Hoption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/inc/Hoption.h,1,['simpl'],['simple']
Usability,"///< Branch type; ///<; ///< Note on fType values:; ///< * -1 unsplit object with custom streamer at time of writing; ///< * 0 unsplit object with default streamer at time of writing; ///< OR simple data member of split object (fID==-1 for the former); ///< * 1 base class of a split object.; ///< * 2 class typed data member of a split object; ///< * 3 branch count of a split TClonesArray; ///< * 31 data member of the content of a split TClonesArray; ///< * 4 branch count of a split STL Collection.; ///< * 41 data member of the content of a split STL collection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBranchElement.h:192,simpl,simple,192,tree/tree/inc/TBranchElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TBranchElement.h,1,['simpl'],['simple']
Usability,"///< Clear after CR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h:5,Clear,Clear,5,graf2d/gpad/inc/TPad.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPad.h,1,['Clear'],['Clear']
Usability,"///< Clear obslist on sterilize?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h:5,Clear,Clear,5,roofit/roofitcore/inc/RooObjCacheManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h,1,['Clear'],['Clear']
Usability,"///< Convenience alias to simplify access to proxied type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:26,simpl,simplify,26,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,1,['simpl'],['simplify']
Usability,///< Disambiguated as a simple-declaration init-statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:24,simpl,simple-declaration,24,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['simpl'],['simple-declaration']
Usability,"///< Draw a simple histogram (==HIST draw option)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TH1Editor.h:12,simpl,simple,12,gui/ged/inc/TH1Editor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TH1Editor.h,1,['simpl'],['simple']
Usability,"///< Draw a simple histogram with default options",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TH1Editor.h:12,simpl,simple,12,gui/ged/inc/TH1Editor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TH1Editor.h,1,['simpl'],['simple']
Usability,"///< If std::nullopt, waits until; ///< child has terminated.; ///< If a value, this specifies the amount of time to wait for the child; ///< process. If the time expires, and \p Polling is false, the child is; ///< killed and this < function returns. If the time expires and \p; ///< Polling is true, the child is resumed.; ///<; ///< If zero, this function will perform a non-blocking; ///< wait on the child process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:315,resume,resumed,315,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h,1,['resume'],['resumed']
Usability,"///< Learning rate \f$\alpha\f$",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h:5,Learn,Learning,5,tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DLMinimizers.h,2,['Learn'],['Learning']
Usability,"///< Method cache for container accessors: clear container",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h:43,clear,clear,43,io/io/inc/TGenCollectionProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TGenCollectionProxy.h,1,['clear'],['clear']
Usability,///< No complex type; simple scalar variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h:22,simpl,simple,22,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,1,['simpl'],['simple']
Usability,"///< Progress bar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/inc/TTreeViewer.h:5,Progress bar,Progress bar,5,tree/treeviewer/inc/TTreeViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/inc/TTreeViewer.h,1,['Progress bar'],['Progress bar']
Usability,"///< Progress bar frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/inc/TTreeViewer.h:5,Progress bar,Progress bar,5,tree/treeviewer/inc/TTreeViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/inc/TTreeViewer.h,1,['Progress bar'],['Progress bar']
Usability,"///< Shape of the Graph (simple, smooth, bar)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TGraphEditor.h:25,simpl,simple,25,gui/ged/inc/TGraphEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TGraphEditor.h,2,['simpl'],['simple']
Usability,"///< The learning rate used for training.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h:9,learn,learning,9,tmva/tmva/inc/TMVA/DNN/Optimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Optimizer.h,1,['learn'],['learning']
Usability,"///< True when page must be cleared",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/inc/TPostScript.h:28,clear,cleared,28,graf2d/postscript/inc/TPostScript.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/inc/TPostScript.h,1,['clear'],['cleared']
Usability,"///< Used as destination buffer in the simple SealPage overload; /// Used in ReservePage to maintain the page buffer budget",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:39,simpl,simple,39,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['simpl'],['simple']
Usability,"///< Whether cache is in learning phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TMPWorkerTree.h:25,learn,learning,25,tree/treeplayer/inc/TMPWorkerTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TMPWorkerTree.h,1,['learn'],['learning']
Usability,"///< advance on the progress bar \param progress the new value \param text a label",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:20,progress bar,progress bar,20,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,1,['progress bar'],['progress bar']
Usability,"///< backprop learning mode (sequential or batch)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:14,learn,learning,14,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['learn'],['learning']
Usability,"///< backprop learning mode option string (sequential or batch)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:14,learn,learning,14,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['learn'],['learning']
Usability,"///< batch size, only matters if in batch learning mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:42,learn,learning,42,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['learn'],['learning']
Usability,"///< clear cascade submenu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TRootCanvas.h:5,clear,clear,5,gui/gui/inc/TRootCanvas.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TRootCanvas.h,1,['clear'],['clear']
Usability,"///< clear expression's entries; ///@}; ///@{; /// @name ListTree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/inc/TTreeViewer.h:5,clear,clear,5,tree/treeviewer/inc/TTreeViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/inc/TTreeViewer.h,1,['clear'],['clear']
Usability,"///< clear one layer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:5,clear,clear,5,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,1,['clear'],['clear']
Usability,"///< current limits for the progress bar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:28,progress bar,progress bar,28,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,2,['progress bar'],['progress bar']
Usability,"///< cut scan done with binary trees or simple event loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:40,simpl,simple,40,tmva/tmva/inc/TMVA/DecisionTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h,1,['simpl'],['simple']
Usability,"///< decay rate for above learning rate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:26,learn,learning,26,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['learn'],['learning']
Usability,"///< draw progress bar to indicate training evolution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:10,progress bar,progress bar,10,tmva/tmva/inc/TMVA/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h,1,['progress bar'],['progress bar']
Usability,"///< get the learning rate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:13,learn,learning,13,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,1,['learn'],['learning']
Usability,"///< internal parameter (learningRate)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:25,learn,learningRate,25,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,1,['learn'],['learningRate']
Usability,"///< learning rate for gradient boost;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:5,learn,learning,5,tmva/tmva/inc/TMVA/MethodBDT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h,1,['learn'],['learning']
Usability,"///< learning rate for synapse weight adjustments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:5,learn,learning,5,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['learn'],['learning']
Usability,"///< learning rate parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h:5,learn,learning,5,tmva/tmva/inc/TMVA/TSynapse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TSynapse.h,1,['learn'],['learning']
Usability,"///< list of palettes for undo and redo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/inc/TASPaletteEditor.h:26,undo,undo,26,graf2d/asimage/inc/TASPaletteEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/inc/TASPaletteEditor.h,1,['undo'],['undo']
Usability,"///< number of bins in progress bar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h:23,progress bar,progress bar,23,tmva/tmva/inc/TMVA/Timer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Timer.h,1,['progress bar'],['progress bar']
Usability,"///< number of entries used for learning mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTreeCache.h:32,learn,learning,32,tree/tree/inc/TTreeCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTreeCache.h,1,['learn'],['learning']
Usability,"///< number of linear terms; //; // Event indices for path/validation - TODO: should let the user decide; // Now it is just a simple one-fold cross validation.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:126,simpl,simple,126,tmva/tmva/inc/TMVA/RuleFitParams.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h,1,['simpl'],['simple']
Usability,"///< reset time (how often we clear hessian matrix); // back propagation variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:30,clear,clear,30,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['clear'],['clear']
Usability,"///< set simple poly-line between every graph point",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TGraphEditor.h:9,simpl,simple,9,gui/ged/inc/TGraphEditor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TGraphEditor.h,1,['simpl'],['simple']
Usability,"///< simple Gauss integration method with fixed rule",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AllIntegrationTypes.h:5,simpl,simple,5,math/mathcore/inc/Math/AllIntegrationTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/AllIntegrationTypes.h,1,['simpl'],['simple']
Usability,"///< simple weighted bidirectional connection between 2 neurons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/inc/TSynapse.h:5,simpl,simple,5,math/mlp/inc/TSynapse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/inc/TSynapse.h,1,['simpl'],['simple']
Usability,"///< start drawing the progress bar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:23,progress bar,progress bar,23,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,1,['progress bar'],['progress bar']
Usability,"///< the learning method (given via option string); // default initialisation called by all constructors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h:9,learn,learning,9,tmva/tmva/inc/TMVA/MethodTMlpANN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodTMlpANN.h,1,['learn'],['learning']
Usability,"///< undo manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGTextEdit.h:5,undo,undo,5,gui/gui/inc/TGTextEdit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/inc/TGTextEdit.h,1,['undo'],['undo']
Usability,"///<! (untouched) events used for learning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h:34,learn,learning,34,tmva/tmva/inc/TMVA/MethodKNN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodKNN.h,1,['learn'],['learning']
Usability,"///<! The Learning Method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/inc/TMultiLayerPerceptron.h:10,Learn,Learning,10,math/mlp/inc/TMultiLayerPerceptron.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/inc/TMultiLayerPerceptron.h,1,['Learn'],['Learning']
Usability,"///<! maximum value for the counter so far; // speed-control (gives back the learning speed = improvement-rate in the last N steps); // successList keeps track of the improvements to be able",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ConvergenceTest.h:77,learn,learning,77,tmva/tmva/inc/TMVA/ConvergenceTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ConvergenceTest.h,1,['learn'],['learning']
Usability,"///<! signal emitted when simple mouse click performed on the pad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h:26,simpl,simple,26,gui/webgui6/inc/TWebCanvas.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebCanvas.h,2,['simpl'],['simple']
Usability,"///<! true if cache is in learning mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTreeCache.h:26,learn,learning,26,tree/tree/inc/TTreeCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTreeCache.h,1,['learn'],['learning']
Usability,"///<! true if we are in the process of executing LearnPrefill; // These members hold cached data for missed branches when miss optimization; // is enabled. Pointers are only initialized if the miss cache is enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTreeCache.h:49,Learn,LearnPrefill,49,tree/tree/inc/TTreeCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTreeCache.h,1,['Learn'],['LearnPrefill']
Usability,"///<! used in the learning phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTreeCache.h:18,learn,learning,18,tree/tree/inc/TTreeCache.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TTreeCache.h,1,['learn'],['learning']
Usability,"///===- SimpleLoopUnswitch.cpp - Hoist loop-invariant control flow ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:8,Simpl,SimpleLoopUnswitch,8,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['Simpl'],['SimpleLoopUnswitch']
Usability,"///@{; /// \name Mutation API; ///; /// These methods provide the core API for updating the call graph in the; /// presence of (potentially still in-flight) DFS-found RefSCCs and SCCs.; ///; /// Note that these methods sometimes have complex runtimes, so be careful; /// how you call them.; /// Make an existing internal ref edge into a call edge.; ///; /// This may form a larger cycle and thus collapse SCCs into TargetN's SCC.; /// If that happens, the optional callback \p MergedCB will be invoked (if; /// provided) on the SCCs being merged away prior to actually performing; /// the merge. Note that this will never include the target SCC as that; /// will be the SCC functions are merged into to resolve the cycle. Once; /// this function returns, these merged SCCs are not in a valid state but; /// the pointers will remain valid until destruction of the parent graph; /// instance for the purpose of clearing cached information. This function; /// also returns 'true' if a cycle was formed and some SCCs merged away as; /// a convenience.; ///; /// After this operation, both SourceN's SCC and TargetN's SCC may move; /// position within this RefSCC's postorder list. Any SCCs merged are; /// merged into the TargetN's SCC in order to preserve reachability analyses; /// which took place on that SCC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h:909,clear,clearing,909,interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LazyCallGraph.h,1,['clear'],['clearing']
Usability,"///\brief A simple eraser class that removes already created AST Nodes.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/TransactionUnloader.h:12,simpl,simple,12,interpreter/cling/lib/Interpreter/TransactionUnloader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/TransactionUnloader.h,1,['simpl'],['simple']
Usability,"///\brief A type, value pair.; //; /// Type-safe value access and setting. Simple (built-in) casting is; /// available, but better extract the value using the template; /// parameter that matches the Value's type.; ///; /// The class represents a llvm::GenericValue with its corresponding; /// clang::QualType. Use-cases are expression evaluation, value printing; /// and parameters for function calls.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h:75,Simpl,Simple,75,interpreter/cling/include/cling/Interpreter/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Value.h,1,['Simpl'],['Simple']
Usability,"///\brief Class containing static utility functions looking up names. Very; /// useful for quick, simple lookups.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/AST.h:98,simpl,simple,98,interpreter/cling/include/cling/Utils/AST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/AST.h,1,['simpl'],['simple']
Usability,"///\brief Cleanup Parser state after a failed lookup.; ///; /// After a failed lookup we need to discard the remaining unparsed input,; /// restore the original state of the incremental parsing flag, clear any; /// pending diagnostics, restore the suppress diagnostics flag, and restore; /// the spell checking language options.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/ParserStateRAII.h:200,clear,clear,200,interpreter/cling/include/cling/Utils/ParserStateRAII.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/ParserStateRAII.h,1,['clear'],['clear']
Usability,"///\brief Clear the stored diagnostics; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/Diagnostics.h:10,Clear,Clear,10,interpreter/cling/include/cling/Utils/Diagnostics.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Utils/Diagnostics.h,1,['Clear'],['Clear']
Usability,"///\brief Clears all declarations in the transaction.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Transaction.h:10,Clear,Clears,10,interpreter/cling/include/cling/Interpreter/Transaction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Transaction.h,1,['Clear'],['Clears']
Usability,"///\brief Commits a transaction if it was complete. I.e pipes it; /// through the consumer chain, including codegen.; ///; ///\param[in] PRT - the transaction (ParseResultTransaction) to be; /// committed; ///\param[in] ClearDiagClient - Reset the DiagnosticsEngine client or not; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.h:220,Clear,ClearDiagClient,220,interpreter/cling/lib/Interpreter/IncrementalParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalParser.h,1,['Clear'],['ClearDiagClient']
Usability,"///\brief Dump various internal data.; ///; ///\param[in] what - which data to dump. 'undo', 'ast', 'asttree'; ///\param[in] filter - optional argument to filter data with.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h:86,undo,undo,86,interpreter/cling/include/cling/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/Interpreter.h,1,['undo'],['undo']
Usability,"///\brief Generates forward declarations for a Decl or Transaction; /// by implementing a DeclVisitor; ///; /// Important Points:; /// 1. Function arguments having an EnumConstant as a default value; /// are printed in the following way:; /// enum E {E_a, E_b};; /// void foo(E e = E_b){}; /// Generates:; /// enum E : unsigned int;; /// void foo(E e = E(1));; /// 1 is the integral value of E_b.; ///; /// 2. Decls, in general, are skipped when they depend on things; /// that were previously skipped.; /// The set of strings, m_IncompatibleNames facilitate this.; /// Examine the shouldSkip functions to see why specific types; /// are skipped.; ///; /// 3. Log file:; /// The name of the file depends on the name of the file where; /// the forward declarations are written.; /// So, fwd.h produces a corresponding fwd.h.skipped, when; /// output logging is enabled.; /// The log messages are written in the shouldSkip functions to; /// simplify the design.; ///; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ForwardDeclPrinter.h:939,simpl,simplify,939,interpreter/cling/lib/Interpreter/ForwardDeclPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ForwardDeclPrinter.h,1,['simpl'],['simplify']
Usability,"///\brief; /// Here we don't want to depend on the JIT runFunction, because of its; /// limitations, when it comes to return value handling. There it is; /// not clear who provides the storage and who cleans it up in a; /// platform independent way.; //; /// Depending on the type we need to synthesize a call to cling:; /// 0) void : do nothing;; /// 1) enum, integral, float, double, referece, pointer types :; /// call to cling::internal::setValueNoAlloc(...);; /// 2) object type (alloc on the stack) :; /// cling::internal::setValueWithAlloc; /// 2.1) constant arrays:; /// call to cling::runtime::internal::copyArray(...); ///; /// We need to synthesize later:; /// Wrapper has signature: void w(cling::Value V); /// case 1):; /// setValueNoAlloc(gCling, &SVR, lastExprTy, lastExpr()); /// case 2):; /// new (setValueWithAlloc(gCling, &SVR, lastExprTy)) (lastExpr); /// case 2.1):; /// copyArray(src, placement, N); ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.h:162,clear,clear,162,interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.h,1,['clear'],['clear']
Usability,"///\class TTreeReader::Iterator_t; /// Iterate through the entries of a TTree.; ///; /// This iterator drives the associated TTreeReader; its; /// dereferencing (and actually even the iteration) will; /// set the entry number represented by this iterator.; /// It does not really represent a data element; it simply; /// returns the entry number (or -1 once the end of the tree; /// is reached).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReader.h:309,simpl,simply,309,tree/treeplayer/inc/TTreeReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeReader.h,1,['simpl'],['simply']
Usability,"//; // - with file name as argument: //; // new TGRootIDE(""hsimple.C""); //; // - with a TMacro* as argument: //; // TMacro *macro = new TMacro(""hsimple.C""); //; // new TGRootIDE(macro); //; // //; // Basic Features: //; // //; // New Document //; // //; // To create a new blank document, select File menu / New, or click //; // the New toolbar button. It will create a new instance of //; // TGRootIDE. //; // //; // Open/Save File //; // //; // To open a file, select File menu / Open or click on the Open //; // toolbar button. This will bring up the standard File Dialog for //; // opening files. //; // If the current document has not been saved yet, you will be asked //; // either to save or abandon the changes. //; // To save the file using the same name, select File menu / Save or //; // the toolbar Save button. To change the file name use File menu / //; // Save As... or corresponding SaveAs button on the toolbar. //; // //; // Text Selection //; // //; // You can move the cursor by simply clicking on the desired location //; // with the left mouse button. To highlight some text, press the mouse //; // and drag the mouse while holding the left button pressed. //; // To select a word, double-click on it; //; // to select the text line - triple-click on it; //; // to select all do quadruple-click. //; // //; // Cut, Copy, Paste //; // //; // After selecting some text, you can cut or copy it to the clipboard. //; // A subsequent paste operation will insert the contents of the //; // clipboard at the current cursor location. //; // //; // Text Search //; // //; // The editor uses a standard Search dialog. You can specify a forward //; // or backward search direction starting from the current cursor //; // location according to the selection made of a case sensitive mode //; // or not. The last search can be repeated by pressing F3. //; // //; // Text Font //; // //; // You can change the text font by selecting Edit menu / Set Font. //; // The Font Dialog pops up and sho",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx:1880,simpl,simply,1880,test/RootIDE/TGRootIDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootIDE/TGRootIDE.cxx,1,['simpl'],['simply']
Usabilityest the validity of the confidence interval computed by the HypoTestInverter; // on a complex Poisson model distribution. Reference values and test values; // are both computed with the HypoTestInverter. As such, this test can only; // confirm if the HypoTestInverter has the same behaviour across different; // computing platforms or RooStats revisions.; //; // ModelConfig (explicit) : Poisson Product Model; // built in stressRooStats_models.cxx; //; // Input Parameters:; // calculatorType -> Frequentist, Hybrid or Asymptotic; // testStatType -> Profile Likelihood Ratio, Simple Likelihood Ratio, etc...; // obsValueX -> observed value ""x"" when measuring sig + bkg1; // obsValueY -> observed value ""y"" when measuring 2*sig*1.2^beta + bkg2; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:1302,Simpl,Simple,1302,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['Simpl'],['Simple']
Usabilityest the Bayesian central interval computed by the BayesianCalculator on a; // Poisson distribution, using different priors. The parameter of interest is; // the mean of the Poisson distribution, and there are no nuisance parameters.; // The priors used are:; // 1. constant / uniform; // 2. inverse of the mean; // 3. square root of the inverse of the mean; // 4. gamma distribution; // The posterior distribution is easily obtained analytically for these cases.; // Therefore, the reference interval limits will be computed analytically.; //; // ModelConfig (implicit) :; // Observable -> x; // Parameter of Interest -> mean; //; // Input Parameters:; // obsValue -> observed value in experiment; // confidenceLevel -> Confidence Level of the interval we are calculating; //; // 04/2012 - Ioan Gabriel Bucur; //; ///////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:687,SIMPL,SIMPLE,687,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['SIMPL'],['SIMPLE']
Usability,//; // Example types; //; /// This is our simplistic type info,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:42,simpl,simplistic,42,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['simpl'],['simplistic']
Usability,"//; // Here we don't want to depend on the JIT runFunction, because of its; // limitations, when it comes to return value handling. There it is; // not clear who provides the storage and who cleans it up in a; // platform independent way.; //; // Depending on the type we need to synthesize a call to cling:; // 0) void : set the value's type to void;; // 1) enum, integral, float, double, referece, pointer types :; // call to cling::internal::setValueNoAlloc(...);; // 2) object type (alloc on the stack) :; // cling::internal::setValueWithAlloc; // 2.1) constant arrays:; // call to cling::runtime::internal::copyArray(...); //; // We need to synthesize later:; // Wrapper has signature: void w(cling::Value SVR); // case 1):; // setValueNoAlloc(gCling, &SVR, lastExprTy, lastExpr()); // case 2):; // new (setValueWithAlloc(gCling, &SVR, lastExprTy)) (lastExpr); // case 2.1):; // copyArray(src, placement, size)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp:152,clear,clear,152,interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp,1,['clear'],['clear']
Usability,"//; /// \class ROOT::TExecutorCRTP; /// \brief This class defines an interface to execute the same task; /// multiple times, possibly in parallel and with different arguments every; /// time.; ///; /// ###ROOT::TExecutorCRTP<SubC>::Map; /// The two possible usages of the Map method are:\n; /// * `Map(F func, unsigned nTimes)`: func is executed nTimes with no arguments; /// * `Map(F func, T& args)`: func is executed on each element of the collection of arguments args; ///; /// The Map function forwards the call to MapImpl, to be implemented by the child classes.; ///; /// For either signature, func is executed as many times as needed by a pool of; /// n workers, where n typically defaults to the number of available cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included. ROOT::TExecutorCRTP derived classes; /// never delete what they return, they simply forget it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.\n; /// \endparblock; ///; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func. The ordering of the elements corresponds to the ordering of; /// the arguments.; ///; /// ### ROOT::TExecutorCRTP<SubC>::Reduce; /// These set of meth",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx:1108,simpl,simply,1108,core/base/inc/ROOT/TExecutorCRTP.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/TExecutorCRTP.hxx,1,['simpl'],['simply']
Usability,"//; //Radial gradient. Can be either ""simple"": you specify a center; //and radius in NDC coordinates (see comments about linear gradient; //and coordinate modes above), or ""extended"": you have two centers; //(start,end) and two radiuses (R1, R2) and interpolation between them;; //still start/end and radiuses are in NDC.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:38,simpl,simple,38,core/base/inc/TColorGradient.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h,1,['simpl'],['simple']
Usability,"//== APSIntType.h - Simple record of the type of APSInts --------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h:20,Simpl,Simple,20,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h,1,['Simpl'],['Simple']
Usability,"//== BasicObjCFoundationChecks.cpp - Simple Apple-Foundation checks -*- C++ -*--; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines BasicObjCFoundationChecks, a class that encapsulates; // a set of simple checks to run on Objective-C code using Apple's Foundation; // classes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BasicObjCFoundationChecks.cpp:37,Simpl,Simple,37,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BasicObjCFoundationChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/BasicObjCFoundationChecks.cpp,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"//== RangeConstraintManager.cpp - Manage range constraints.------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines RangeConstraintManager, a class that tracks simple; // equality and inequality constraints on symbolic values of ProgramState.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:445,simpl,simple,445,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['simpl'],['simple']
Usability,"//== RangedConstraintManager.h ----------------------------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Ranged constraint manager, built on SimpleConstraintManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:419,Simpl,SimpleConstraintManager,419,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,1,['Simpl'],['SimpleConstraintManager']
Usability,"//== SimpleConstraintManager.cpp --------------------------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines SimpleConstraintManager, a class that provides a; // simplified constraint manager interface, compared to ConstraintManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleConstraintManager.cpp:5,Simpl,SimpleConstraintManager,5,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleConstraintManager.cpp,3,"['Simpl', 'simpl']","['SimpleConstraintManager', 'simplified']"
Usability,"//== SimpleConstraintManager.h ----------------------------------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simplified constraint manager backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h:5,Simpl,SimpleConstraintManager,5,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h,2,['Simpl'],"['SimpleConstraintManager', 'Simplified']"
Usability,"//==- AliasAnalysis.cpp - Generic Alias Analysis Interface Implementation --==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the generic AliasAnalysis interface which is used as the; // common interface used by all clients and implementations of alias analysis.; //; // This file also implements the default version of the AliasAnalysis interface; // that is to be used when no other implementation is specified. This does some; // simple tests that detect obvious cases: two different global pointers cannot; // alias, a global cannot alias a malloc, two different mallocs cannot alias,; // etc.; //; // This alias analysis implementation really isn't very good for anything, but; // it is very fast, and makes a nice clean default implementation. Because it; // handles lots of little corner cases, other, more complex, alias analysis; // implementations may choose to rely on this pass to resolve these simple and; // easy cases.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:711,simpl,simple,711,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,2,['simpl'],['simple']
Usability,"//==- ConstantHoisting.h - Prepare code for expensive constants --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies expensive constants to hoist and coalesces them to; // better prepare it for SelectionDAG-based code generation. This works around; // the limitations of the basic-block-at-a-time approach.; //; // First it scans all instructions for integer constants and calculates its; // cost. If the constant can be folded into the instruction (the cost is; // TCC_Free) or the cost is just a simple operation (TCC_BASIC), then we don't; // consider it expensive and leave it alone. This is the default behavior and; // the default implementation of getIntImmCostInst will always return TCC_Free.; //; // If the cost is more than TCC_BASIC, then the integer constant can't be folded; // into the instruction and it might be beneficial to hoist the constant.; // Similar constants are coalesced to reduce register pressure and; // materialization code.; //; // When a constant is hoisted, it is also hidden behind a bitcast to force it to; // be live-out of the basic block. Otherwise the constant would be just; // duplicated and each basic block would have its own copy in the SelectionDAG.; // The SelectionDAG recognizes such constants as opaque and doesn't perform; // certain transformations on them, which would create a new expensive constant.; //; // This optimization is only applied to integer constants in instructions and; // simple (this means not nested) constant cast expressions. For example:; // %0 = load i64* inttoptr (i64 big_constant to i64*); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h:785,simpl,simple,785,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/ConstantHoisting.h,2,['simpl'],['simple']
Usability,"//==- MemProfContextDisambiguation.h - Context Disambiguation ----*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements support for context disambiguation of allocation calls for profile; // guided heap optimization using memprof metadata. See implementation file for; // details.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h:465,guid,guided,465,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h,1,['guid'],['guided']
Usability,"//==- RegisterUsageInfo.h - Register Usage Informartion Storage --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This pass is required to take advantage of the interprocedural register; /// allocation infrastructure.; ///; /// This pass is simple immutable pass which keeps RegMasks (calculated based on; /// actual register allocation) for functions in a module and provides simple; /// API to query this information.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h:518,simpl,simple,518,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h,2,['simpl'],['simple']
Usability,"//==- SystemZMachineScheduler.h - SystemZ Scheduler Interface ----*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // -------------------------- Post RA scheduling ---------------------------- //; // SystemZPostRASchedStrategy is a scheduling strategy which is plugged into; // the MachineScheduler. It has a sorted Available set of SUs and a pickNode(); // implementation that looks to optimize decoder grouping and balance the; // usage of processor resources. Scheduler states are saved for the end; // region of each MBB, so that a successor block can learn from it.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.h:821,learn,learn,821,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZMachineScheduler.h,1,['learn'],['learn']
Usability,"//==-- MemProfContextDisambiguation.cpp - Disambiguate contexts -------------=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements support for context disambiguation of allocation; // calls for profile guided heap optimization. Specifically, it uses Memprof; // profiles which indicate context specific allocation behavior (currently; // distinguishing cold vs hot memory allocations). Cloning is performed to; // expose the cold allocation call contexts, and the allocation calls are; // subsequently annotated with an attribute for later transformation.; //; // The transformations can be performed either directly on IR (regular LTO), or; // on a ThinLTO index (and later applied to the IR during the ThinLTO backend).; // Both types of LTO operate on a the same base graph representation, which; // uses CRTP to support either IR or Index formats.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:475,guid,guided,475,interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,1,['guid'],['guided']
Usability,"//==-- loop_proto_to_cxx_main.cpp - Driver for protobuf-C++ conversion -----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements a simple driver to print a C++ program from a protobuf with loops.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-cxx/loop_proto_to_cxx_main.cpp:396,simpl,simple,396,interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-cxx/loop_proto_to_cxx_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-cxx/loop_proto_to_cxx_main.cpp,1,['simpl'],['simple']
Usability,"//==-- loop_proto_to_llvm_main.cpp - Driver for protobuf-LLVM conversion----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements a simple driver to print a LLVM program from a protobuf with loops; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-llvm/loop_proto_to_llvm_main.cpp:396,simpl,simple,396,interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-llvm/loop_proto_to_llvm_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-llvm/loop_proto_to_llvm_main.cpp,1,['simpl'],['simple']
Usability,"//==-- proto_to_cxx_main.cpp - Driver for protobuf-C++ conversion ----------==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements a simple driver to print a C++ program from a protobuf.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-cxx/proto_to_cxx_main.cpp:396,simpl,simple,396,interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-cxx/proto_to_cxx_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-fuzzer/proto-to-cxx/proto_to_cxx_main.cpp,1,['simpl'],['simple']
Usability,"//==--- CodeGenABITypes.cpp - Convert Clang types to LLVM types for ABI ----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeGenABITypes is a simple interface for getting LLVM types for; // the parameters and the return value of a function given the Clang; // types.; //; // The class is implemented as a public wrapper around the private; // CodeGenTypes class in lib/CodeGen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp:404,simpl,simple,404,interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp,1,['simpl'],['simple']
Usability,"//==--- MachineLateInstrsCleanup.cpp - Late Instructions Cleanup Pass -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This simple pass removes any identical and redundant immediate or address; // loads to the same register. The immediate loads removed can originally be; // the result of rematerialization, while the addresses are redundant frame; // addressing anchor points created during Frame Indices elimination.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp:388,simpl,simple,388,interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLateInstrsCleanup.cpp,1,['simpl'],['simple']
Usability,"//==--- llvm/CodeGen/ReachingDefAnalysis.h - Reaching Def Analysis -*- C++ -*---==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Reaching Defs Analysis pass.; ///; /// This pass tracks for each instruction what is the ""closest"" reaching def of; /// a given register. It is used by BreakFalseDeps (for clearance calculation); /// and ExecutionDomainFix (for arbitrating conflicting domains).; ///; /// Note that this is different from the usual definition notion of liveness.; /// The CPU doesn't care whether or not we consider a register killed.; ///; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:566,clear,clearance,566,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,1,['clear'],['clearance']
Usability,"//==---- CodeGenABITypes.h - Convert Clang types to LLVM types for ABI -----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeGenABITypes is a simple interface for getting LLVM types for; // the parameters and the return value of a function given the Clang; // types.; //; // The class is implemented as a public wrapper around the private; // CodeGenTypes class in lib/CodeGen.; //; // It allows other clients, like LLDB, to determine the LLVM types that are; // actually used in function calls, which makes it possible to then determine; // the actual ABI locations (e.g. registers, stack locations, etc.) that; // these parameters are stored in.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:404,simpl,simple,404,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,1,['simpl'],['simple']
Usability,"//==---------------------------------------------------------------------==//; // Generic Data Map methods.; //==---------------------------------------------------------------------==//; //; // ProgramStateManager and ProgramState support a ""generic data map"" that allows; // different clients of ProgramState objects to embed arbitrary data within a; // ProgramState object. The generic data map is essentially an immutable map; // from a ""tag"" (that acts as the ""key"" for a client) and opaque values.; // Tags/keys and values are simply void* values. The typical way that clients; // generate unique tags are by taking the address of a static variable.; // Clients are responsible for ensuring that data values referred to by a; // the data pointer are immutable (and thus are essentially purely functional; // data).; //; // The templated methods below use the ProgramStateTrait<T> class; // to resolve keys into the GDM and to return data values to clients.; //; // Trait based GDM dispatch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:533,simpl,simply,533,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,1,['simpl'],['simply']
Usability,"//=== HexagonSplitConst32AndConst64.cpp - split CONST32/Const64 into HI/LO ===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // When the compiler is invoked with no small data, for instance, with the -G0; // command line option, then all CONST* opcodes should be broken down into; // appropriate LO and HI instructions. This splitting is done by this pass.; // The only reason this is not done in the DAG lowering itself is that there; // is no simple way of getting the register allocator to allot the same hard; // register to the result of LO and HI instructions. This pass is always; // scheduled after register allocation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSplitConst32AndConst64.cpp:700,simpl,simple,700,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSplitConst32AndConst64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSplitConst32AndConst64.cpp,1,['simpl'],['simple']
Usability,"//=== StdLibraryFunctionsChecker.cpp - Model standard functions -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This checker improves modeling of a few simple library functions.; //; // This checker provides a specification format - `Summary' - and; // contains descriptions of some library functions in this format. Each; // specification contains a list of branches for splitting the program state; // upon call, and range constraints on argument and return-value symbols that; // are satisfied on each branch. This spec can be expanded to include more; // items, like external effects of the function.; //; // The main difference between this approach and the body farms technique is; // in more explicit control over how many branches are produced. For example,; // consider standard C function `ispunct(int x)', which returns a non-zero value; // iff `x' is a punctuation character, that is, when `x' is in range; // ['!', '/'] [':', '@'] U ['[', '\`'] U ['{', '~'].; // `Summary' provides only two branches for this function. However,; // any attempt to describe this range with if-statements in the body farm; // would result in many more branches. Because each branch needs to be analyzed; // independently, this significantly reduces performance. Additionally,; // once we consider a branch on which `x' is in range, say, ['!', '/'],; // we assume that such branch is an important separate path through the program,; // which may lead to false positives because considering this particular path; // was not consciously intended, and therefore it might have been unreachable.; //; // This checker uses eval::Call for modeling pure functions (functions without; // side effets), for which their `Summary' is a precise model",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:423,simpl,simple,423,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['simpl'],['simple']
Usability,"//===- ADT/SCCIterator.h - Strongly Connected Comp. Iter. -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This builds on the llvm/ADT/GraphTraits.h file to find the strongly; /// connected components (SCCs) of a graph in O(N+E) time using Tarjan's DFS; /// algorithm.; ///; /// The SCC iterator has the important property that if a node in SCC S1 has an; /// edge to a node in SCC S2, then it visits S1 *after* S2.; ///; /// To visit S1 *before* S2, use the scc_iterator on the Inverse graph. (NOTE:; /// This requires some simple wrappers and is not supported yet.); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h:814,simpl,simple,814,interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SCCIterator.h,1,['simpl'],['simple']
Usability,"//===- AMDGPURewriteOutArgumentsPass.cpp - Create struct returns ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This pass attempts to replace out argument usage with a return of a; /// struct.; ///; /// We can support returning a lot of values directly in registers, but; /// idiomatic C code frequently uses a pointer argument to return a second value; /// rather than returning a struct by value. GPU stack access is also quite; /// painful, so we want to avoid that if possible. Passing a stack object; /// pointer to a function also requires an additional address expansion code; /// sequence to convert the pointer to be relative to the kernel's scratch wave; /// offset register since the callee doesn't know what stack frame the incoming; /// pointer is relative to.; ///; /// The goal is to try rewriting code that looks like this:; ///; /// int foo(int a, int b, int* out) {; /// *out = bar();; /// return a + b;; /// }; ///; /// into something like this:; ///; /// std::pair<int, int> foo(int a, int b) {; /// return std::pair(a + b, bar());; /// }; ///; /// Typically the incoming pointer is a simple alloca for a temporary variable; /// to use the API, which if replaced with a struct return will be easily SROA'd; /// out when the stub function we create is inlined; ///; /// This pass introduces the struct return, but leaves the unused pointer; /// arguments and introduces a new stub function calling the struct returning; /// body. DeadArgumentElimination should be run after this to clean these up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:1383,simpl,simple,1383,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,1,['simpl'],['simple']
Usability,"//===- ASTStructuralEquivalence.cpp ---------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implement StructuralEquivalenceContext class and helper functions; // for layout matching.; //; // The structural equivalence check could have been implemented as a parallel; // BFS on a pair of graphs. That must have been the original approach at the; // beginning.; // Let's consider this simple BFS algorithm from the `s` source:; // ```; // void bfs(Graph G, int s); // {; // Queue<Integer> queue = new Queue<Integer>();; // marked[s] = true; // Mark the source; // queue.enqueue(s); // and put it on the queue.; // while (!q.isEmpty()) {; // int v = queue.dequeue(); // Remove next vertex from the queue.; // for (int w : G.adj(v)); // if (!marked[w]) // For every unmarked adjacent vertex,; // {; // marked[w] = true;; // queue.enqueue(w);; // }; // }; // }; // ```; // Indeed, it has it's queue, which holds pairs of nodes, one from each graph,; // this is the `DeclsToCheck` member. `VisitedDecls` plays the role of the; // marking (`marked`) functionality above, we use it to check whether we've; // already seen a pair of nodes.; //; // We put in the elements into the queue only in the toplevel decl check; // function:; // ```; // static bool IsStructurallyEquivalent(StructuralEquivalenceContext &Context,; // Decl *D1, Decl *D2);; // ```; // The `while` loop where we iterate over the children is implemented in; // `Finish()`. And `Finish` is called only from the two **member** functions; // which check the equivalency of two Decls or two Types. ASTImporter (and; // other clients) call only these functions.; //; // The `static` implementation functions are called from `Finish`, these push",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp:684,simpl,simple,684,interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTStructuralEquivalence.cpp,1,['simpl'],['simple']
Usability,"//===- AggressiveInstCombine.h - AggressiveInstCombine pass -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// AggressiveInstCombiner - Combine expression patterns to form expressions; /// with fewer, simple instructions. This pass does not modify the CFG.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/AggressiveInstCombine/AggressiveInstCombine.h:486,simpl,simple,486,interpreter/llvm-project/llvm/include/llvm/Transforms/AggressiveInstCombine/AggressiveInstCombine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/AggressiveInstCombine/AggressiveInstCombine.h,1,['simpl'],['simple']
Usability,"//===- AliasAnalysisEvaluator.h - Alias Analysis Accuracy Evaluator -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a simple N^2 alias analysis accuracy evaluator. The; /// analysis result is a set of statistics of how many times the AA; /// infrastructure provides each kind of alias result and mod/ref result when; /// queried with all pairs of pointers in the function.; ///; /// It can be used to evaluate a change in an alias analysis implementation,; /// algorithm, or the AA pipeline infrastructure itself. It acts like a stable; /// and easily tested consumer of all AA information exposed.; ///; /// This is inspired and adapted from code by: Naveen Neelakantam, Francesco; /// Spadini, and Wojciech Stryjewski.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h:419,simpl,simple,419,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysisEvaluator.h,1,['simpl'],['simple']
Usability,"//===- Allocator.h - Simple memory allocation abstraction -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the BumpPtrAllocator interface. BumpPtrAllocator conforms; /// to the LLVM ""Allocator"" concept and is similar to MallocAllocator, but; /// objects cannot be deallocated. Their lifetime is tied to the lifetime of the; /// allocator.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h:21,Simpl,Simple,21,interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Allocator.h,1,['Simpl'],['Simple']
Usability,"//===- AllocatorBase.h - Simple memory allocation abstraction ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines MallocAllocator. MallocAllocator conforms to the LLVM; /// ""Allocator"" concept which consists of an Allocate method accepting a size; /// and alignment, and a Deallocate accepting a pointer and size. Further, the; /// LLVM ""Allocator"" concept has overloads of Allocate and Deallocate for; /// setting size and alignment based on the final type. These overloads are; /// typically provided by a base class template \c AllocatorBase.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AllocatorBase.h:25,Simpl,Simple,25,interpreter/llvm-project/llvm/include/llvm/Support/AllocatorBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AllocatorBase.h,1,['Simpl'],['Simple']
Usability,"//===- ArgumentPromotion.cpp - Promote by-reference arguments -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass promotes ""by reference"" arguments to be ""by value"" arguments. In; // practice, this means looking for internal functions that have pointer; // arguments. If it can prove, through the use of alias analysis, that an; // argument is *only* loaded, then it can pass the value into the function; // instead of the address of the value. This can cause recursive simplification; // of code and lead to the elimination of allocas (especially in C++ template; // code like the STL).; //; // This pass also handles aggregate arguments that are passed into a function,; // scalarizing them if the elements of the aggregate are only loaded. Note that; // by default it refuses to scalarize aggregates which would require passing in; // more than three operands to the function, because passing thousands of; // operands for a large array or structure is unprofitable! This limit can be; // configured or disabled, however.; //; // Note that this transformation could also be done for arguments that are only; // stored to (returning the value instead), but does not currently. This case; // would be best handled when and if LLVM begins supporting multiple return; // values from functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ArgumentPromotion.cpp:749,simpl,simplification,749,interpreter/llvm-project/llvm/lib/Transforms/IPO/ArgumentPromotion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/ArgumentPromotion.cpp,1,['simpl'],['simplification']
Usability,"//===- BTFContext.cpp ---------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of the BTFContext interface, this is used by; // llvm-objdump tool to print source code alongside disassembly.; // In fact, currently it is a simple wrapper for BTFParser instance.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFContext.cpp:538,simpl,simple,538,interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFContext.cpp,1,['simpl'],['simple']
Usability,"//===- BitTracker.cpp -----------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // SSA-based bit propagation.; //; // The purpose of this code is, for a given virtual register, to provide; // information about the value of each bit in the register. The values; // of bits are represented by the class BitValue, and take one of four; // cases: 0, 1, ""ref"" and ""bottom"". The 0 and 1 are rather clear, the; // ""ref"" value means that the bit is a copy of another bit (which itself; // cannot be a copy of yet another bit---such chains are not allowed).; // A ""ref"" value is associated with a BitRef structure, which indicates; // which virtual register, and which bit in that register is the origin; // of the value. For example, given an instruction; // %2 = ASL %1, 1; // assuming that nothing is known about bits of %1, bit 1 of %2; // will be a ""ref"" to (%1, 0). If there is a subsequent instruction; // %3 = ASL %2, 2; // then bit 3 of %3 will be a ""ref"" to (%1, 0) as well.; // The ""bottom"" case means that the bit's value cannot be determined,; // and that this virtual register actually defines it. The ""bottom"" case; // is discussed in detail in BitTracker.h. In fact, ""bottom"" is a ""ref; // to self"", so for the %1 above, the bit 0 of it will be a ""ref"" to; // (%1, 0), bit 1 will be a ""ref"" to (%1, 1), etc.; //; // The tracker implements the Wegman-Zadeck algorithm, originally developed; // for SSA-based constant propagation. Each register is represented as; // a sequence of bits, with the convention that bit 0 is the least signi-; // ficant bit. Each bit is propagated individually. The class RegisterCell; // implements the register's representation, and is also the subject of; // the latti",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp:688,clear,clear,688,interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp,1,['clear'],['clear']
Usability,"//===- BlockFrequencyImplInfo.cpp - Block Frequency Info Implementation ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Loops should be simplified before this analysis.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp:399,simpl,simplified,399,interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfoImpl.cpp,1,['simpl'],['simplified']
Usability,"//===- BlockFrequencyInfo.cpp - Block Frequency Analysis ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Loops should be simplified before this analysis.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfo.cpp:399,simpl,simplified,399,interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BlockFrequencyInfo.cpp,1,['simpl'],['simplified']
Usability,"//===- BlockFrequencyInfo.h - Block Frequency Analysis ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Loops should be simplified before this analysis.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfo.h:399,simpl,simplified,399,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfo.h,1,['simpl'],['simplified']
Usability,"//===- BranchProbabilityInfo.cpp - Branch Probability Analysis ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Loops should be simplified before this analysis.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp:399,simpl,simplified,399,interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,1,['simpl'],['simplified']
Usability,"//===- BugSuppression.h - Suppression interface -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines BugSuppression, a simple interface class encapsulating; // all user provided in-code suppressions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h:419,simpl,simple,419,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugSuppression.h,1,['simpl'],['simple']
Usability,"//===- CSKYConstantIslandPass.cpp - Emit PC Relative loads ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; //; // Loading constants inline is expensive on CSKY and it's in general better; // to place the constant nearby in code space and then it can be loaded with a; // simple 16/32 bit load instruction like lrw.; //; // The constants can be not just numbers but addresses of functions and labels.; // This can be particularly helpful in static relocation mode for embedded; // non-linux targets.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYConstantIslandPass.cpp:544,simpl,simple,544,interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/CSKYConstantIslandPass.cpp,1,['simpl'],['simple']
Usability,"//===- Caching.h - LLVM Local File Cache ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the CachedFileStream and the localCache function, which; // simplifies caching files on the local filesystem in a directory whose; // contents are managed by a CachePruningPolicy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Caching.h:461,simpl,simplifies,461,interpreter/llvm-project/llvm/include/llvm/Support/Caching.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Caching.h,1,['simpl'],['simplifies']
Usability,"//===- CanonicalizeAliases.cpp - ThinLTO Support: Canonicalize Aliases ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Currently this file implements partial alias canonicalization, to; // flatten chains of aliases (also done by GlobalOpt, but not on for; // O0 compiles). E.g.; // @a = alias i8, i8 *@b; // @b = alias i8, i8 *@g; //; // will be converted to:; // @a = alias i8, i8 *@g <-- @a is now an alias to base object @g; // @b = alias i8, i8 *@g; //; // Eventually this file will implement full alias canonicalization, so that; // all aliasees are private anonymous values. E.g.; // @a = alias i8, i8 *@g; // @g = global i8 0; //; // will be converted to:; // @0 = private global; // @a = alias i8, i8* @0; // @g = alias i8, i8* @0; //; // This simplifies optimization and ThinLTO linking of the original symbols.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CanonicalizeAliases.cpp:1016,simpl,simplifies,1016,interpreter/llvm-project/llvm/lib/Transforms/Utils/CanonicalizeAliases.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CanonicalizeAliases.cpp,1,['simpl'],['simplifies']
Usability,"//===- CodeGen/MachineInstrBuilder.h - Simplify creation of MIs --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes a function named BuildMI, which is useful for dramatically; // simplifying how MachineInstr's are created. It allows use of code like this:; //; // MIMetadata MIMD(MI); // Propagates DebugLoc and other metadata; // M = BuildMI(MBB, MI, MIMD, TII.get(X86::ADD8rr), Dst); // .addReg(argVal1); // .addReg(argVal2);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:39,Simpl,Simplify,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,2,"['Simpl', 'simpl']","['Simplify', 'simplifying']"
Usability,"//===- ConstantHoisting.cpp - Prepare code for expensive constants --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass identifies expensive constants to hoist and coalesces them to; // better prepare it for SelectionDAG-based code generation. This works around; // the limitations of the basic-block-at-a-time approach.; //; // First it scans all instructions for integer constants and calculates its; // cost. If the constant can be folded into the instruction (the cost is; // TCC_Free) or the cost is just a simple operation (TCC_BASIC), then we don't; // consider it expensive and leave it alone. This is the default behavior and; // the default implementation of getIntImmCostInst will always return TCC_Free.; //; // If the cost is more than TCC_BASIC, then the integer constant can't be folded; // into the instruction and it might be beneficial to hoist the constant.; // Similar constants are coalesced to reduce register pressure and; // materialization code.; //; // When a constant is hoisted, it is also hidden behind a bitcast to force it to; // be live-out of the basic block. Otherwise the constant would be just; // duplicated and each basic block would have its own copy in the SelectionDAG.; // The SelectionDAG recognizes such constants as opaque and doesn't perform; // certain transformations on them, which would create a new expensive constant.; //; // This optimization is only applied to integer constants in instructions and; // simple (this means not nested) constant cast expressions. For example:; // %0 = load i64* inttoptr (i64 big_constant to i64*); //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp:785,simpl,simple,785,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp,2,['simpl'],['simple']
Usability,"//===- CoroSplit.cpp - Converts a coroutine into a state machine ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This pass builds the coroutine frame and outlines resume and destroy parts; // of the coroutine into separate functions.; //; // We present a coroutine to an LLVM as an ordinary function with suspension; // points marked up with intrinsics. We let the optimizer party on the coroutine; // as a single function for as long as possible. Shortly before the coroutine is; // eligible to be inlined into its callers, we split up the coroutine into parts; // corresponding to an initial, resume and destroy invocations of the coroutine,; // add them to the current SCC and restart the IPO pipeline to optimize the; // coroutine subfunctions we extracted before proceeding to the caller of the; // coroutine.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp:429,resume,resume,429,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,2,['resume'],['resume']
Usability,"//===- CoroSplit.h - Converts a coroutine into a state machine -*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // This file declares the pass that builds the coroutine frame and outlines; // the resume and destroy parts of the coroutine into separate functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h:474,resume,resume,474,interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroSplit.h,1,['resume'],['resume']
Usability,"//===- DAGCombiner.cpp - Implement a DAG node combiner --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass combines dag nodes to form fewer, simpler DAG nodes. It can be run; // both before and after the DAG is legalized.; //; // This pass is not a substitute for the LLVM IR instcombine pass. This pass is; // primarily intended to handle simplification opportunities that are implicit; // in the LLVM IR and exposed by the various codegen lowering phases.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:427,simpl,simpler,427,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['simpl'],"['simpler', 'simplification']"
Usability,"//===- DataflowWorklist.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple and reusable worklist for flow-sensitive analyses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h:385,simpl,simple,385,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h,1,['simpl'],['simple']
Usability,"//===- DeadMachineInstructionElim.cpp - Remove dead machine instructions --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is an extremely simple MachineInstr-level dead-code-elimination pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DeadMachineInstructionElim.cpp:404,simpl,simple,404,interpreter/llvm-project/llvm/lib/CodeGen/DeadMachineInstructionElim.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/DeadMachineInstructionElim.cpp,1,['simpl'],['simple']
Usability,"//===- Dominators.cpp - Dominator Calculation -----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements simple dominator construction algorithms for finding; // forward dominators. Postdominators are available in libanalysis, but are not; // included in libvmcore, because it's not needed. Forward dominators are; // needed to support the Verifier pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Dominators.cpp:404,simpl,simple,404,interpreter/llvm-project/llvm/lib/IR/Dominators.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Dominators.cpp,1,['simpl'],['simple']
Usability,"//===- EPCGenericDylibManager.h -- Generic EPC Dylib management -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements dylib loading and searching by making calls to; // ExecutorProcessControl::callWrapper.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h:495,simpl,simplifies,495,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericDylibManager.h,1,['simpl'],['simplifies']
Usability,"//===- EPCGenericJITLinkMemoryManager.h - EPC-based mem manager -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements JITLinkMemoryManager by making remove calls via; // ExecutorProcessControl::callWrapperAsync.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h:501,simpl,simplifies,501,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericJITLinkMemoryManager.h,1,['simpl'],['simplifies']
Usability,"//===- EPCGenericMemoryAccess.h - Generic EPC MemoryAccess impl -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements ExecutorProcessControl::MemoryAccess by making calls to; // ExecutorProcessControl::callWrapperAsync.; //; // This simplifies the implementaton of new ExecutorProcessControl instances,; // as this implementation will always work (at the cost of some performance; // overhead for the calls).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h:509,simpl,simplifies,509,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/EPCGenericMemoryAccess.h,1,['simpl'],['simplifies']
Usability,"//===- EarlyCSE.cpp - Simple and fast CSE pass ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs a simple dominator tree walk that eliminates trivially; // redundant instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:22,Simpl,Simple,22,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"//===- EarlyCSE.h - Simple and fast CSE pass --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file provides the interface for a simple, fast CSE pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h:20,Simpl,Simple,20,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/EarlyCSE.h,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"//===- FunctionExtras.h - Function type erasure utilities -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides a collection of function (or more generally, callable); /// type erasure utilities supplementing those provided by the standard library; /// in `<function>`.; ///; /// It provides `unique_function`, which works like `std::function` but supports; /// move-only callable objects and const-qualification.; ///; /// Future plans:; /// - Add a `function` that provides ref-qualified support, which doesn't work; /// with `std::function`.; /// - Provide support for specifying multiple signatures to type erase callable; /// objects with an overload set, such as those produced by generic lambdas.; /// - Expand to include a copyable utility that directly replaces std::function; /// but brings the above improvements.; ///; /// Note that LLVM's utilities are greatly simplified by not supporting; /// allocators.; ///; /// If the standard library ever begins to provide comparable facilities we can; /// consider switching to those.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h:1172,simpl,simplified,1172,interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/FunctionExtras.h,1,['simpl'],['simplified']
Usability,"//===- GCDAntipatternChecker.cpp ---------------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines GCDAntipatternChecker which checks against a common; // antipattern when synchronous API is emulated from asynchronous callbacks; // using a semaphore:; //; // dispatch_semaphore_t sema = dispatch_semaphore_create(0);; //; // AnyCFunctionCall(^{; // // code…; // dispatch_semaphore_signal(sema);; // }); // dispatch_semaphore_wait(sema, *); //; // Such code is a common performance problem, due to inability of GCD to; // properly handle QoS when a combination of queues and semaphores is used.; // Good code would either use asynchronous API (when available), or perform; // the necessary action in asynchronous callback.; //; // Currently, the check is performed using a simple heuristical AST pattern; // matching.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GCDAntipatternChecker.cpp:1074,simpl,simple,1074,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GCDAntipatternChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GCDAntipatternChecker.cpp,1,['simpl'],['simple']
Usability,"//===- GCMetadata.h - Garbage collector metadata ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the GCFunctionInfo and GCModuleInfo classes, which are; // used as a communication channel from the target code generator to the target; // garbage collectors. This interface allows code generators and garbage; // collectors to be developed independently.; //; // The GCFunctionInfo class logs the data necessary to build a type accurate; // stack map. The code generator outputs:; //; // - Safe points as specified by the GCStrategy's NeededSafePoints.; // - Stack offsets for GC roots, as specified by calls to llvm.gcroot; //; // As a refinement, liveness analysis calculates the set of live roots at each; // safe point. Liveness analysis is not presently performed by the code; // generator, so all roots are assumed live.; //; // GCModuleInfo simply collects GCFunctionInfo instances for each Function as; // they are compiled. This accretion is necessary for collectors which must emit; // a stack map for the compilation unit as a whole. Therefore, GCFunctionInfo; // outlives the MachineFunction from which it is derived and must not refer to; // any code generator data structures.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h:1151,simpl,simply,1151,interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,1,['simpl'],['simply']
Usability,"//===- GCNMinRegStrategy.cpp ----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines and implements the class GCNMinRegScheduler, which; /// implements an experimental, simple scheduler whose main goal is to learn; /// ways about consuming less possible registers for a region.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNMinRegStrategy.cpp:498,simpl,simple,498,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNMinRegStrategy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNMinRegStrategy.cpp,2,"['learn', 'simpl']","['learn', 'simple']"
Usability,"//===- GUID.h ---------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h:7,GUID,GUID,7,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h,1,['GUID'],['GUID']
Usability,"//===- GVN.cpp - Eliminate redundant values and loads ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs global value numbering to eliminate fully redundant; // instructions. It also performs simple dead load elimination.; //; // Note that this pass does the value numbering itself; it does not use the; // ValueNumbering analysis passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:489,simpl,simple,489,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['simpl'],['simple']
Usability,"//===- GenericDomTreeConstruction.h - Dominator Calculation ------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Generic dominator tree construction - this file provides routines to; /// construct immediate dominator information for a flow-graph based on the; /// Semi-NCA algorithm described in this dissertation:; ///; /// [1] Linear-Time Algorithms for Dominators and Related Problems; /// Loukas Georgiadis, Princeton University, November 2005, pp. 21-23:; /// ftp://ftp.cs.princeton.edu/reports/2005/737.pdf; ///; /// Semi-NCA algorithm runs in O(n^2) worst-case time but usually slightly; /// faster than Simple Lengauer-Tarjan in practice.; ///; /// O(n^2) worst cases happen when the computation of nearest common ancestors; /// requires O(n) average time, which is very unlikely in real world. If this; /// ever turns out to be an issue, consider implementing a hybrid algorithm; /// that uses SLT to perform full constructions and SemiNCA for incremental; /// updates.; ///; /// The file uses the Depth Based Search algorithm to perform incremental; /// updates (insertion and deletions). The implemented algorithm is based on; /// this publication:; ///; /// [2] An Experimental Study of Dynamic Dominators; /// Loukas Georgiadis, et al., April 12 2016, pp. 5-7, 9-10:; /// https://arxiv.org/pdf/1604.02711.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:894,Simpl,Simple,894,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,1,['Simpl'],['Simple']
Usability,"//===- GlobalOpt.cpp - Optimize Global Variables --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:404,simpl,simple,404,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['simpl'],['simple']
Usability,"//===- GlobalOpt.h - Optimize Global Variables ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h:404,simpl,simple,404,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalOpt.h,1,['simpl'],['simple']
Usability,"//===- GlobalsModRef.cpp - Simple Mod/Ref Analysis for Globals ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This simple pass provides alias and mod/ref information for global values; // that do not have their address taken, and keeps track of whether functions; // read or write memory (are ""pure""). For this simple (but very common) case,; // we can provide pretty accurate and useful information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp:27,Simpl,Simple,27,interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,3,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"//===- GlobalsModRef.h - Simple Mod/Ref AA for Globals ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This is the interface for a simple mod/ref and alias analysis over globals.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h:25,Simpl,Simple,25,interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/GlobalsModRef.h,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"//===- HexagonPacketizer.cpp - VLIW packetizer ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a simple VLIW packetizer using DFA. The packetizer works on; // machine basic blocks. For each instruction I in BB, the packetizer consults; // the DFA to see if machine resources are available to execute I. If so, the; // packetizer checks if I depends on any instruction J in the current packet.; // If no dependency is found, I is added to current packet and machine resource; // is marked as taken. If any dependency is found, a target API call is made to; // prune the dependence.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp:401,simpl,simple,401,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,1,['simpl'],['simple']
Usability,"//===- HotnessThresholdParser.h - Parser for hotness threshold --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a simple parser to decode commandline option for; /// remarks hotness threshold that supports both int and a special 'auto' value.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h:419,simpl,simple,419,interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Remarks/HotnessThresholdParser.h,1,['simpl'],['simple']
Usability,"//===- IRBuilder.cpp - Builder for LLVM Instrs ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the IRBuilder class, which is used as a convenient way; // to create LLVM instructions with a consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp:513,simpl,simplified,513,interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,1,['simpl'],['simplified']
Usability,"//===- IRPrintingPasses.h - Passes to print out IR constructs ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines passes to print out IR in various granularities. The; /// PrintModulePass pass simply prints out the entire module when it is; /// executed. The PrintFunctionPass class is designed to be pipelined with; /// other FunctionPass's, and prints out the functions of the module as they; /// are processed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h:493,simpl,simply,493,interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IRPrinter/IRPrintingPasses.h,1,['simpl'],['simply']
Usability,"//===- IndVarSimplify.cpp - Induction Variable Elimination ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation analyzes and transforms the induction variables (and; // computations derived from them) into simpler forms suitable for subsequent; // analysis and transformation.; //; // If the trip count of a loop is computable, this pass also makes the following; // changes:; // 1. The exit condition for the loop is canonicalized to compare the; // induction value against the exit value. This turns loops like:; // 'for (i = 7; i*i < 1000; ++i)' into 'for (i = 0; i != 25; ++i)'; // 2. Any use outside of the loop of an expression derived from the indvar; // is changed to compute the derived value outside of the loop, eliminating; // the dependence on the exit value of the induction variable. If the only; // purpose of the loop is to compute the exit value of some derived; // expression, this transformation will make the loop dead.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:497,simpl,simpler,497,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['simpl'],['simpler']
Usability,"//===- IndVarSimplify.h - Induction Variable Simplification -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides the interface for the Induction Variable; // Simplification pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h:45,Simpl,Simplification,45,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/IndVarSimplify.h,2,['Simpl'],['Simplification']
Usability,"//===- InlineSizeEstimatorAnalysis.cpp - IR to native size from ML model --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements feature and label extraction for offline supervised learning; // of a IR to native size model.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineSizeEstimatorAnalysis.cpp:451,learn,learning,451,interpreter/llvm-project/llvm/lib/Analysis/InlineSizeEstimatorAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineSizeEstimatorAnalysis.cpp,1,['learn'],['learning']
Usability,"//===- InstCombineSimplifyDemanded.cpp ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains logic for simplifying instructions based on information; // about how they are used.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:412,simpl,simplifying,412,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['simpl'],['simplifying']
Usability,"//===- InstSimplifyPass.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// Defines passes for running instruction simplification across chunks of IR.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h:435,simpl,simplification,435,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/InstSimplifyPass.h,1,['simpl'],['simplification']
Usability,"//===- InstructionCombining.cpp - Combine multiple instructions -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // InstructionCombining - Combine instructions to form fewer, simple; // instructions. This pass does not modify the CFG. This pass is where; // algebraic simplification happens.; //; // This pass combines things like:; // %Y = add i32 %X, 1; // %Z = add i32 %Y, 1; // into:; // %Z = add i32 %X, 2; //; // This is a simple worklist driven algorithm.; //; // This pass guarantees that the following canonicalizations are performed on; // the program:; // 1. If a binary operator has a constant operand, it is moved to the RHS; // 2. Bitwise operators with constant operands are always grouped so that; // shifts are performed first, then or's, then and's, then xor's.; // 3. Compare instructions are converted from <,>,<=,>= to ==,!= if possible; // 4. All cmp instructions on boolean values are replaced with logical ops; // 5. add X, X is represented as (X*2) => (X << 1); // 6. Multiplies with a power-of-two constant argument are transformed into; // shifts.; // ... etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:442,simpl,simple,442,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,3,['simpl'],"['simple', 'simplification']"
Usability,"//===- InstructionSimplify.cpp - Fold instruction operands ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements routines for folding instructions into simpler forms; // that do not require creating new instructions. This does constant folding; // (""add i32 1, 1"" -> ""2"") but can also handle non-constant operands, either; // returning a constant (""and i32 %x, 0"" -> ""0"") or an already existing value; // (""and i32 %x, %x"" -> ""%x""). All operands are assumed to have already been; // simplified: This is usually true and assuming it simplifies the logic (if; // they have not been simplified then results are correct but maybe suboptimal).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:443,simpl,simpler,443,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,4,['simpl'],"['simpler', 'simplified', 'simplifies']"
Usability,"//===- Interpreter.cpp - Top-Level LLVM Interpreter Implementation --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the top-level functionality for the LLVM interpreter.; // This interpreter is designed to be a very simple, portable, inefficient; // interpreter.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Interpreter.cpp:504,simpl,simple,504,interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Interpreter.cpp,1,['simpl'],['simple']
Usability,"//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Contains a simple JIT definition for use in the kaleidoscope tutorials.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h:29,simpl,simple,29,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h,10,['simpl'],['simple']
Usability,"//===- KillTheDoctor - Prevent Dr. Watson from stopping tests ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program provides an extremely hacky way to stop Dr. Watson from starting; // due to unhandled exceptions in child processes.; //; // This simply starts the program named in the first positional argument with; // the arguments following it under a debugger. All this debugger does is catch; // any unhandled exceptions thrown in the child process and close the program; // (and hopefully tells someone about it).; //; // This also provides another really hacky method to prevent assert dialog boxes; // from popping up. When --no-user32 is passed, if any process loads user32.dll,; // we assume it is trying to call MessageBoxEx and terminate it. The proper way; // to do this would be to actually set a break point, but there's quite a bit; // of code involved to get the address of MessageBoxEx in the remote process's; // address space due to Address space layout randomization (ASLR). This can be; // added if it's ever actually needed.; //; // If the subprocess exits for any reason other than successful termination, -1; // is returned. If the process exits normally the value it returned is returned.; //; // I hate Windows.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:526,simpl,simply,526,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,1,['simpl'],['simply']
Usability,"//===- LCSSA.h - Loop-closed SSA transform Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms loops by placing phi nodes at the end of the loops for; // all values that are live across the loop boundary. For example, it turns; // the left into the right code:; //; // for (...) for (...); // if (c) if (c); // X1 = ... X1 = ...; // else else; // X2 = ... X2 = ...; // X3 = phi(X1, X2) X3 = phi(X1, X2); // ... = X3 + 4 X4 = phi(X3); // ... = X4 + 4; //; // This is still valid LLVM; the extra phi nodes are purely redundant, and will; // be trivially eliminated by InstCombine. The major benefit of this; // transformation is that it makes many other loop optimizations, such as; // LoopUnswitching, simpler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h:1010,simpl,simpler,1010,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LCSSA.h,1,['simpl'],['simpler']
Usability,"//===- LLVMPrintFunctionNames.cpp; //---------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Example clang plugin which simply prints the names of all the functions; // within the generated LLVM code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/LLVMPrintFunctionNames/LLVMPrintFunctionNames.cpp:417,simpl,simply,417,interpreter/llvm-project/clang/examples/LLVMPrintFunctionNames/LLVMPrintFunctionNames.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/LLVMPrintFunctionNames/LLVMPrintFunctionNames.cpp,1,['simpl'],['simply']
Usability,"//===- LoadStoreVectorizer.cpp - GPU Load & Store Vectorizer --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass merges loads/stores to/from sequential memory addresses into vector; // loads/stores. Although there's nothing GPU-specific in here, this pass is; // motivated by the microarchitectural quirks of nVidia and AMD GPUs.; //; // (For simplicity below we talk about loads only, but everything also applies; // to stores.); //; // This pass is intended to be run late in the pipeline, after other; // vectorization opportunities have been exploited. So the assumption here is; // that immediately following our new vector load we'll need to extract out the; // individual elements of the load, so we can operate on them individually.; //; // On CPUs this transformation is usually not beneficial, because extracting the; // elements of a vector register is expensive on most architectures. It's; // usually better just to load each element individually into its own scalar; // register.; //; // However, nVidia and AMD GPUs don't have proper vector registers. Instead, a; // ""vector load"" loads directly into a series of scalar registers. In effect,; // extracting the elements of the vector is free. It's therefore always; // beneficial to vectorize a sequence of loads on these architectures.; //; // Vectorizing (perhaps a better name might be ""coalescing"") loads can have; // large performance impacts on GPU kernels, and opportunities for vectorizing; // are common in GPU code. This pass tries very hard to find such; // opportunities; its runtime is quadratic in the number of loads in a BB.; //; // Some CPU architectures, such as ARM, have instructions that load into; // multiple scalar registers, simila",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp:623,simpl,simplicity,623,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp,1,['simpl'],['simplicity']
Usability,"//===- Loads.cpp - Local load analysis ------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines simple local analyses for load instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:401,simpl,simple,401,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['simpl'],['simple']
Usability,"//===- Loads.h - Local load analysis --------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares simple local analyses for load instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h:402,simpl,simple,402,interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Loads.h,1,['simpl'],['simple']
Usability,"//===- LoopAnalysisManager.h - Loop analysis management ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing per-loop analyses. These are; /// typically used as part of a loop pass pipeline over the loop nests of; /// a function.; ///; /// Loop analyses are allowed to make some simplifying assumptions:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; ///; /// The primary mechanism to provide these invariants is the loop pass manager,; /// but they can also be manually provided in order to reason about a loop from; /// outside of a dedicated pass manager.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h:608,simpl,simplifying,608,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,2,['simpl'],"['simplified', 'simplifying']"
Usability,"//===- LoopIdiomRecognize.cpp - Loop idiom recognition --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements an idiom recognizer that transforms simple loops into a; // non-loop form. In cases that this kicks in, it can be a significant; // performance win.; //; // If compiling for code size we avoid idiom recognition if the resulting; // code could be larger than the code for the original loop. One way this could; // happen is if the loop is not removable after idiom recognition due to the; // presence of non-idiom instructions. The initial implementation of the; // heuristics applies to idioms in multi-block loops.; //; //===----------------------------------------------------------------------===//; //; // TODO List:; //; // Future loop memory idioms to recognize:; // memcmp, strlen, etc.; // Future floating point idioms to recognize in -ffast-math mode:; // fpowi; //; // This could recognize common matrix multiplies and dot product idioms and; // replace them with calls to BLAS (if linked in??).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:440,simpl,simple,440,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,1,['simpl'],['simple']
Usability,"//===- LoopIdiomRecognize.h - Loop Idiom Recognize Pass ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements an idiom recognizer that transforms simple loops into a; // non-loop form. In cases that this kicks in, it can be a significant; // performance win.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h:440,simpl,simple,440,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopIdiomRecognize.h,1,['simpl'],['simple']
Usability,"//===- LoopInstSimplify.cpp - Loop Instruction Simplification Pass --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs lightweight instruction simplification on loop bodies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInstSimplify.cpp:47,Simpl,Simplification,47,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInstSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInstSimplify.cpp,2,"['Simpl', 'simpl']","['Simplification', 'simplification']"
Usability,"//===- LoopInstSimplify.h - Loop Inst Simplify Pass -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs lightweight instruction simplification on loop bodies.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h:38,Simpl,Simplify,38,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopInstSimplify.h,2,"['Simpl', 'simpl']","['Simplify', 'simplification']"
Usability,"//===- LoopPassManager.h - Loop pass management -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This header provides classes for managing a pipeline of passes over loops; /// in LLVM IR.; ///; /// The primary loop pass pipeline is managed in a very particular way to; /// provide a set of core guarantees:; /// 1) Loops are, where possible, in simplified form.; /// 2) Loops are *always* in LCSSA form.; /// 3) A collection of Loop-specific analysis results are available:; /// - LoopInfo; /// - DominatorTree; /// - ScalarEvolution; /// - AAManager; /// 4) All loop passes preserve #1 (where possible), #2, and #3.; /// 5) Loop passes run over each loop in the loop nest from the innermost to; /// the outermost. Specifically, all inner loops are processed before; /// passes run over outer loops. When running the pipeline across an inner; /// loop creates new inner loops, those are added and processed in this; /// order as well.; ///; /// This process is designed to facilitate transformations which simplify,; /// reduce, and remove loops. For passes which are more oriented towards; /// optimizing loops, especially optimizing loop *nests* instead of single; /// loops in isolation, this framework is less interesting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:644,simpl,simplified,644,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,2,['simpl'],"['simplified', 'simplify']"
Usability,"//===- LoopReroll.cpp - Loop rerolling pass -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements a simple loop reroller.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:406,simpl,simple,406,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['simpl'],['simple']
Usability,"//===- LoopSimplify.cpp - Loop Canonicalization Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Similar complications arise from callbr instructions, particularly in; // asm-goto where blockaddress expressions are used.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp:464,simpl,simpler,464,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopSimplify.cpp,5,['simpl'],"['simpler', 'simplifies', 'simplifycfg']"
Usability,"//===- LoopSimplify.h - Loop Canonicalization Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs several transformations to transform natural loops into a; // simpler form, which makes subsequent analyses and transformations simpler and; // more effective.; //; // Loop pre-header insertion guarantees that there is a single, non-critical; // entry edge from outside of the loop to the loop header. This simplifies a; // number of analyses and transformations, such as LICM.; //; // Loop exit-block insertion guarantees that all exit blocks from the loop; // (blocks which are outside of the loop that have predecessors inside of the; // loop) only have predecessors from inside of the loop (and are thus dominated; // by the loop header). This simplifies transformations such as store-sinking; // that are built into LICM.; //; // This pass also guarantees that loops will have exactly one backedge.; //; // Indirectbr instructions introduce several complications. If the loop; // contains or is entered by an indirectbr instruction, it may not be possible; // to transform the loop and make these guarantees. Client code should check; // that these conditions are true before relying on them.; //; // Note that the simplifycfg pass will clean up blocks which are split out but; // end up being unnecessary, so usage of this pass should not pessimize; // generated code.; //; // This pass obviously modifies the CFG, but updates loop information and; // dominator information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h:464,simpl,simpler,464,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopSimplify.h,5,['simpl'],"['simpler', 'simplifies', 'simplifycfg']"
Usability,"//===- LoopSimplifyCFG.cpp - Loop CFG Simplification Pass -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Loop SimplifyCFG Pass. This pass is responsible for; // basic loop CFG cleanup, primarily to assist other loop passes. If you; // encounter a noncanonical CFG construct that causes another loop pass to; // perform suboptimally, this is the place to fix it up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h:38,Simpl,Simplification,38,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopSimplifyCFG.h,2,['Simpl'],"['Simplification', 'SimplifyCFG']"
Usability,"//===- LoopUnroll.cpp - Loop unroller pass --------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements a simple loop unroller. It works best when loops have; // been canonicalized by the -indvars pass, allowing it to determine the trip; // counts of loops easily.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:406,simpl,simple,406,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,1,['simpl'],['simple']
Usability,"//===- LowerInvoke.cpp - Eliminate Invoke instructions --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation is designed for use by code generators which do not yet; // support stack unwinding. This pass converts 'invoke' instructions to 'call'; // instructions, so that any exception-handling 'landingpad' blocks become dead; // code (which can be removed by running the '-simplifycfg' pass afterwards).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerInvoke.cpp:668,simpl,simplifycfg,668,interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerInvoke.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LowerInvoke.cpp,1,['simpl'],['simplifycfg']
Usability,"//===- LowerInvoke.h - Eliminate Invoke instructions ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This transformation is designed for use by code generators which do not yet; // support stack unwinding. This pass converts 'invoke' instructions to 'call'; // instructions, so that any exception-handling 'landingpad' blocks become dead; // code (which can be removed by running the '-simplifycfg' pass afterwards).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerInvoke.h:668,simpl,simplifycfg,668,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerInvoke.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LowerInvoke.h,1,['simpl'],['simplifycfg']
Usability,"//===- MCPseudoProbe.h - Pseudo probe encoding support ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the MCPseudoProbe to support the pseudo; // probe encoding for AutoFDO. Pseudo probes together with their inline context; // are encoded in a DFS recursive way in the .pseudoprobe sections. For each; // .pseudoprobe section, the encoded binary data consist of a single or mutiple; // function records each for one outlined function. A function record has the; // following format :; //; // FUNCTION BODY (one for each outlined function present in the text section); // GUID (uint64); // GUID of the function's source name which may be different from the; // actual binary linkage name. This GUID will be used to decode and; // generate a profile against the source function name.; // NPROBES (ULEB128); // Number of probes originating from this function.; // NUM_INLINED_FUNCTIONS (ULEB128); // Number of callees inlined into this function, aka number of; // first-level inlinees; // PROBE RECORDS; // A list of NPROBES entries. Each entry contains:; // INDEX (ULEB128); // TYPE (uint4); // 0 - block probe, 1 - indirect call, 2 - direct call; // ATTRIBUTE (uint3); // 1 - reserved; // 2 - Sentinel; // 4 - HasDiscriminator; // ADDRESS_TYPE (uint1); // 0 - code address for regular probes (for downwards compatibility); // - GUID of linkage name for sentinel probes; // 1 - address delta; // CODE_ADDRESS (uint64 or ULEB128); // code address or address delta, depending on ADDRESS_TYPE; // DISCRIMINATOR (ULEB128) if HasDiscriminator; // INLINED FUNCTION RECORDS; // A list of NUM_INLINED_FUNCTIONS entries describing each of the inlined; // callees. Each record contains:; // INLI",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:889,GUID,GUID,889,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,2,['GUID'],['GUID']
Usability,"//===- MLInlineAdvisor.cpp - machine learned InlineAdvisor ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the interface between the inliner and a learned model.; // It delegates model evaluation to either the AOT compiled model (the; // 'release' mode) or a runtime-loaded model (the 'development' case).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MLInlineAdvisor.cpp:37,learn,learned,37,interpreter/llvm-project/llvm/lib/Analysis/MLInlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MLInlineAdvisor.cpp,2,['learn'],['learned']
Usability,"//===- MVELaneInterleaving.cpp - Inverleave for MVE instructions ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass interleaves around sext/zext/trunc instructions. MVE does not have; // a single sext/zext or trunc instruction that takes the bottom half of a; // vector and extends to a full width, like NEON has with MOVL. Instead it is; // expected that this happens through top/bottom instructions. So the MVE; // equivalent VMOVLT/B instructions take either the even or odd elements of the; // input and extend them to the larger type, producing a vector with half the; // number of elements each of double the bitwidth. As there is no simple; // instruction, we often have to turn sext/zext/trunc into a series of lane; // moves (or stack loads/stores, which we do not do yet).; //; // This pass takes vector code that starts at truncs, looks for interconnected; // blobs of operations that end with sext/zext (or constants/splats) of the; // form:; // %sa = sext v8i16 %a to v8i32; // %sb = sext v8i16 %b to v8i32; // %add = add v8i32 %sa, %sb; // %r = trunc %add to v8i16; // And adds shuffles to allow the use of VMOVL/VMOVN instrctions:; // %sha = shuffle v8i16 %a, undef, <0, 2, 4, 6, 1, 3, 5, 7>; // %sa = sext v8i16 %sha to v8i32; // %shb = shuffle v8i16 %b, undef, <0, 2, 4, 6, 1, 3, 5, 7>; // %sb = sext v8i16 %shb to v8i32; // %add = add v8i32 %sa, %sb; // %r = trunc %add to v8i16; // %shr = shuffle v8i16 %r, undef, <0, 4, 1, 5, 2, 6, 3, 7>; // Which can then be split and lowered to MVE instructions efficiently:; // %sa_b = VMOVLB.s16 %a; // %sa_t = VMOVLT.s16 %a; // %sb_b = VMOVLB.s16 %b; // %sb_t = VMOVLT.s16 %b; // %add_b = VADD.i32 %sa_b, %sb_b; // %add_t = VADD.i32 %sa_t, %sb_t; // %r = VMOVNT.i16",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp:917,simpl,simple,917,interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp,1,['simpl'],['simple']
Usability,"//===- MachineBlockFrequencyInfo.cpp - MBB Frequency Analysis -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Loops should be simplified before this analysis.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockFrequencyInfo.cpp:399,simpl,simplified,399,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockFrequencyInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockFrequencyInfo.cpp,1,['simpl'],['simplified']
Usability,"//===- MachineBlockFrequencyInfo.h - MBB Frequency Analysis -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Loops should be simplified before this analysis.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBlockFrequencyInfo.h:399,simpl,simplified,399,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBlockFrequencyInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineBlockFrequencyInfo.h,1,['simpl'],['simplified']
Usability,"//===- MachineCheckDebugify.cpp - Check debug info ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file This checks debug info after mir-debugify (+ pass-to-test). Currently; /// it simply checks the integrity of line info in DILocation and; /// DILocalVariable which mir-debugifiy generated before.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp:469,simpl,simply,469,interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCheckDebugify.cpp,1,['simpl'],['simply']
Usability,"//===- MachineCopyPropagation.cpp - Machine Copy Propagation Pass ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is an extremely simple MachineInstr-level copy propagation pass.; //; // This pass forwards the source of COPYs to the users of their destinations; // when doing so is legal. For example:; //; // %reg1 = COPY %reg0; // ...; // ... = OP %reg1; //; // If; // - %reg0 has not been clobbered by the time of the use of %reg1; // - the register class constraints are satisfied; // - the COPY def is the only value that reaches OP; // then this pass replaces the above with:; //; // %reg1 = COPY %reg0; // ...; // ... = OP %reg0; //; // This pass also removes some redundant COPYs. For example:; //; // %R1 = COPY %R0; // ... // No clobber of %R1; // %R0 = COPY %R1 <<< Removed; //; // or; //; // %R1 = COPY %R0; // ... // No clobber of %R0; // %R1 = COPY %R0 <<< Removed; //; // or; //; // $R0 = OP ...; // ... // No read/clobber of $R0 and $R1; // $R1 = COPY $R0 // $R0 is killed; // Replace $R0 with $R1 and remove the COPY; // $R1 = OP ...; // ...; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp:404,simpl,simple,404,interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCopyPropagation.cpp,1,['simpl'],['simple']
Usability,"//===- MachineDominators.cpp - Machine Dominator Calculation --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements simple dominator construction algorithms for finding; // forward dominators on machine functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDominators.cpp:404,simpl,simple,404,interpreter/llvm-project/llvm/lib/CodeGen/MachineDominators.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDominators.cpp,1,['simpl'],['simple']
Usability,"//===- MachineLICM.cpp - Machine Loop Invariant Code Motion Pass ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion on machine instructions. We; // attempt to remove as much code from the body of a loop as possible.; //; // This pass is not intended to be a replacement or a complete alternative; // for the LLVM-IR-level LICM pass. It is only designed to hoist simple; // constructs that are not exposed before lowering and instruction selection.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp:675,simpl,simple,675,interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineLICM.cpp,1,['simpl'],['simple']
Usability,"//===- MachinePostDominators.cpp -Machine Post Dominator Calculation ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements simple dominator construction algorithms for finding; // post dominators on machine functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePostDominators.cpp:404,simpl,simple,404,interpreter/llvm-project/llvm/lib/CodeGen/MachinePostDominators.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePostDominators.cpp,1,['simpl'],['simple']
Usability,"//===- MachineSink.cpp - Sinking for machine instructions -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass moves instructions into successor blocks when possible, so that; // they aren't executed on paths where their results aren't needed.; //; // This pass is not intended to be a replacement or a complete alternative; // for an LLVM-IR-level sinking pass. It is only designed to sink simple; // constructs that are not exposed before lowering and instruction selection.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:673,simpl,simple,673,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['simpl'],['simple']
Usability,"//===- Mem2Reg.cpp - The -mem2reg pass, a wrapper around the Utils lib ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is a simple pass wrapper around the PromoteMemToReg function call; // exposed by the Utils library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Mem2Reg.cpp:398,simpl,simple,398,interpreter/llvm-project/llvm/lib/Transforms/Utils/Mem2Reg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Mem2Reg.cpp,1,['simpl'],['simple']
Usability,"//===- Mem2Reg.h - The -mem2reg pass, a wrapper around the Utils lib ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is a simple pass wrapper around the PromoteMemToReg function call; // exposed by the Utils library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h:398,simpl,simple,398,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Mem2Reg.h,1,['simpl'],['simple']
Usability,"//===- MergeFunctions.h - Merge Identical Functions -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms simple global variables that never have their address; // taken. If obviously true, it marks read/write globals as constant, deletes; // variables only stored to, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h:404,simpl,simple,404,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MergeFunctions.h,1,['simpl'],['simple']
Usability,"//===- MipsConstantIslandPass.cpp - Emit Pc Relative loads ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is used to make Pc relative loads of constants.; // For now, only Mips16 will use this.; //; // Loading constants inline is expensive on Mips16 and it's in general better; // to place the constant nearby in code space and then it can be loaded with a; // simple 16 bit load instruction.; //; // The constants can be not just numbers but addresses of functions and labels.; // This can be particularly helpful in static relocation mode for embedded; // non-linux targets.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp:648,simpl,simple,648,interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,1,['simpl'],['simple']
Usability,"//===- MipsDelaySlotFiller.cpp - Mips Delay Slot Filler -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple pass to fill delay slots with useful instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp:383,Simpl,Simple,383,interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsDelaySlotFiller.cpp,1,['Simpl'],['Simple']
Usability,"//===- MsgPackReader.cpp - Simple MsgPack reader ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a MessagePack reader.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackReader.cpp:27,Simpl,Simple,27,interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackReader.cpp,1,['Simpl'],['Simple']
Usability,"//===- MsgPackReader.h - Simple MsgPack reader ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This is a MessagePack reader.; ///; /// See https://github.com/msgpack/msgpack/blob/master/spec.md for the full; /// standard.; ///; /// Typical usage:; /// \code; /// StringRef input = GetInput();; /// msgpack::Reader MPReader(input);; /// msgpack::Object Obj;; ///; /// while (true) {; /// Expected<bool> ReadObj = MPReader.read(&Obj);; /// if (!ReadObj); /// // Handle error...; /// if (!ReadObj.get()); /// break; // Reached end of input; /// switch (Obj.Kind) {; /// case msgpack::Type::Int:; // // Use Obj.Int; /// break;; /// // ...; /// }; /// }; /// \endcode; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h:25,Simpl,Simple,25,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackReader.h,1,['Simpl'],['Simple']
Usability,"//===- MsgPackWriter.cpp - Simple MsgPack writer ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a MessagePack writer.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackWriter.cpp:27,Simpl,Simple,27,interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackWriter.cpp,1,['Simpl'],['Simple']
Usability,"//===- MsgPackWriter.h - Simple MsgPack writer ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains a MessagePack writer.; ///; /// See https://github.com/msgpack/msgpack/blob/master/spec.md for the full; /// specification.; ///; /// Typical usage:; /// \code; /// raw_ostream output = GetOutputStream();; /// msgpack::Writer MPWriter(output);; /// MPWriter.writeNil();; /// MPWriter.write(false);; /// MPWriter.write(""string"");; /// // ...; /// \endcode; ///; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackWriter.h:25,Simpl,Simple,25,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackWriter.h,1,['Simpl'],['Simple']
Usability,"//===- NaryReassociate.cpp - Reassociate n-ary expressions ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp:675,simpl,simplify,675,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp,1,['simpl'],['simplify']
Usability,"//===- NaryReassociate.h - Reassociate n-ary expressions --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass reassociates n-ary add expressions and eliminates the redundancy; // exposed by the reassociation.; //; // A motivating example:; //; // void foo(int a, int b) {; // bar(a + b);; // bar((a + 2) + b);; // }; //; // An ideal compiler should reassociate (a + 2) + b to (a + b) + 2 and simplify; // the above code to; //; // int t = a + b;; // bar(t);; // bar(t + 2);; //; // However, the Reassociate pass is unable to do that because it processes each; // instruction individually and believes (a + 2) + b is the best form according; // to its rank system.; //; // To address this limitation, NaryReassociate reassociates an expression in a; // form that reuses existing instructions. As a result, NaryReassociate can; // reassociate (a + 2) + b in the example to (a + b) + 2 because it detects that; // (a + b) is computed before.; //; // NaryReassociate works as follows. For every instruction in the form of (a +; // b) + c, it checks whether a + c or b + c is already computed by a dominating; // instruction. If so, it then reassociates (a + b) + c into (a + c) + b or (b +; // c) + a and removes the redundancy accordingly. To efficiently look up whether; // an expression is computed before, we store each instruction seen and its SCEV; // into an SCEV-to-instruction map.; //; // Although the algorithm pattern-matches only ternary additions, it; // automatically handles many >3-ary expressions by walking through the function; // in the depth-first order. For example, given; //; // (a + c) + d; // ((a + b) + c) + d; //; // NaryReassociate first rewrites (a + b) + c to (a + c) + b, and then rewrites",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:675,simpl,simplify,675,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,1,['simpl'],['simplify']
Usability,"//===- NoFolder.h - Constant folding helper ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the NoFolder class, a helper for IRBuilder. It provides; // IRBuilder with a set of methods for creating unfolded constants. This is; // useful for learners trying to understand how LLVM IR works, and who don't; // want details to be hidden by the constant folder. For general constant; // creation and folding, use ConstantExpr and the routines in; // llvm/Analysis/ConstantFolding.h.; //; // Note: since it is not actually possible to create unfolded constants, this; // class returns instructions rather than constants.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h:549,learn,learners,549,interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/NoFolder.h,1,['learn'],['learners']
Usability,"//===- NumberObjectConversionChecker.cpp -------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines NumberObjectConversionChecker, which checks for a; // particular common mistake when dealing with numbers represented as objects; // passed around by pointers. Namely, the language allows to reinterpret the; // pointer as a number directly, often without throwing any warnings,; // but in most cases the result of such conversion is clearly unexpected,; // as pointer value, rather than number value represented by the pointee object,; // becomes the result of such operation.; //; // Currently the checker supports the Objective-C NSNumber class,; // and the OSBoolean class found in macOS low-level code; the latter; // can only hold boolean values.; //; // This checker has an option ""Pedantic"" (boolean), which enables detection of; // more conversion patterns (which are most likely more harmless, and therefore; // are more likely to produce false positives) - disabled by default,; // enabled with `-analyzer-config osx.NumberObjectConversion:Pedantic=true'.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp:734,clear,clearly,734,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp,1,['clear'],['clearly']
Usability,"//===- ObjCARCAliasAnalysis.cpp - ObjC ARC Optimization -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file defines a simple ARC-aware AliasAnalysis using special knowledge; /// of Objective C to enhance other optimization passes which rely on the Alias; /// Analysis infrastructure.; ///; /// WARNING: This file knows about certain library functions. It recognizes them; /// by name, and hardwires knowledge of their semantics.; ///; /// WARNING: This file knows about how certain Objective-C library functions are; /// used. Naive LLVM IR transformations which would otherwise be; /// behavior-preserving may break these assumptions.; ///; /// TODO: Theoretically we could check for dependencies between objc_* calls; /// and FMRB_OnlyAccessesArgumentPointees calls or other well-behaved calls.; ///; /// TODO: The calls here to AAResultBase member functions are all effectively; /// no-ops that just return a conservative result. The original intent was to; /// chain to another analysis for a recursive query, but this was lost in a; /// refactor. These should instead be rephrased in terms of queries to AAQI.AAR.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ObjCARCAliasAnalysis.cpp:411,simpl,simple,411,interpreter/llvm-project/llvm/lib/Analysis/ObjCARCAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ObjCARCAliasAnalysis.cpp,1,['simpl'],['simple']
Usability,"//===- ObjCARCAliasAnalysis.h - ObjC ARC Alias Analysis ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file declares a simple ARC-aware AliasAnalysis using special knowledge; /// of Objective C to enhance other optimization passes which rely on the Alias; /// Analysis infrastructure.; ///; /// WARNING: This file knows about certain library functions. It recognizes them; /// by name, and hardwires knowledge of their semantics.; ///; /// WARNING: This file knows about how certain Objective-C library functions are; /// used. Naive LLVM IR transformations which would otherwise be; /// behavior-preserving may break these assumptions.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAliasAnalysis.h:412,simpl,simple,412,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAliasAnalysis.h,1,['simpl'],['simple']
Usability,"//===- ObjCARCOpts.cpp - ObjC ARC Optimization ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file defines ObjC ARC optimizations. ARC stands for Automatic; /// Reference Counting and is a system for managing reference counts for objects; /// in Objective C.; ///; /// The optimizations performed include elimination of redundant, partially; /// redundant, and inconsequential reference count operations, elimination of; /// redundant weak pointer operations, and numerous minor simplifications.; ///; /// WARNING: This file knows about certain library functions. It recognizes them; /// by name, and hardwires knowledge of their semantics.; ///; /// WARNING: This file knows about how certain Objective-C library functions are; /// used. Naive LLVM IR transformations which would otherwise be; /// behavior-preserving may break these assumptions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:785,simpl,simplifications,785,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['simpl'],['simplifications']
Usability,"//===- PDBInterfaceAnchors.h - defines class anchor functions ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Class anchors are necessary per the LLVM Coding style guide, to ensure that; // the vtable is only generated in this object file, and not in every object; // file that includes the corresponding header.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBInterfaceAnchors.cpp:433,guid,guide,433,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBInterfaceAnchors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBInterfaceAnchors.cpp,1,['guid'],['guide']
Usability,"//===- PPCBoolRetToInt.cpp ------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements converting i1 values to i32/i64 if they could be more; // profitably allocated as GPRs rather than CRs. This pass will become totally; // unnecessary if Register Bank Allocation and Global Instruction Selection ever; // go upstream.; //; // Presently, the pass converts i1 Constants, and Arguments to i32/i64 if the; // transitive closure of their uses includes only PHINodes, CallInsts, and; // ReturnInsts. The rational is that arguments are generally passed and returned; // in GPRs rather than CRs, so casting them to i32/i64 at the LLVM IR level will; // actually save casts at the Machine Instruction level.; //; // It might be useful to expand this pass to add bit-wise operations to the list; // of safe transitive closure types. Also, we miss some opportunities when LLVM; // represents logical AND and OR operations with control flow rather than data; // flow. For example by lowering the expression: return (A && B && C); //; // as: return A ? true : B && C.; //; // There's code in SimplifyCFG that code be used to turn control flow in data; // flow using SelectInsts. Selects are slow on some architectures (P7/P8), so; // this probably isn't good in general, but for the special case of i1, the; // Selects could be further lowered to bit operations that are fast everywhere.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp:1398,Simpl,SimplifyCFG,1398,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBoolRetToInt.cpp,1,['Simpl'],['SimplifyCFG']
Usability,"//===- Parser.h - Matcher expression parser ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Simple matcher expression parser.; ///; /// The parser understands matcher expressions of the form:; /// MatcherName(Arg0, Arg1, ..., ArgN); /// as well as simple types like strings.; /// The parser does not know how to process the matchers. It delegates this task; /// to a Sema object received as an argument.; ///; /// \code; /// Grammar for the expressions supported:; /// <Expression> := <Literal> | <NamedValue> | <MatcherExpression>; /// <Literal> := <StringLiteral> | <Boolean> | <Double> | <Unsigned>; /// <StringLiteral> := ""quoted string""; /// <Boolean> := true | false; /// <Double> := [0-9]+.[0-9]* | [0-9]+.[0-9]*[eE][-+]?[0-9]+; /// <Unsigned> := [0-9]+; /// <NamedValue> := <Identifier>; /// <MatcherExpression> := <Identifier>(<ArgumentList>) |; /// <Identifier>(<ArgumentList>).bind(<StringLiteral>); /// <Identifier> := [a-zA-Z]+; /// <ArgumentList> := <Expression> | <Expression>,<ArgumentList>; /// \endcode; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:395,Simpl,Simple,395,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"//===- PatternMatch.h - Match on the LLVM IR --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a simple and efficient mechanism for performing general; // tree-based pattern matches on the LLVM IR. The power of these routines is; // that it allows you to write concise patterns that are expressive and easy to; // understand. The other major advantage of this is that it allows you to; // trivially capture/bind elements in the pattern to variables. For example,; // you can do something like this:; //; // Value *Exp = ...; // Value *X, *Y; ConstantInt *C1, *C2; // (X & C1) | (Y & C2); // if (match(Exp, m_Or(m_And(m_Value(X), m_ConstantInt(C1)),; // m_And(m_Value(Y), m_ConstantInt(C2))))) {; // ... Pattern is matched and variables are bound ...; // }; //; // This is primarily useful to things like the instruction combiner, but can; // also be useful for static analysis tools or code generators.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h:404,simpl,simple,404,interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PatternMatch.h,1,['simpl'],['simple']
Usability,"//===- PrintFunctionNames.cpp ---------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Example clang plugin which simply prints the names of all the top-level decls; // in the input file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp:410,simpl,simply,410,interpreter/llvm-project/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp,1,['simpl'],['simply']
Usability,"//===- PublicsStream.cpp - PDB Public Symbol Stream -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The data structures defined in this file are based on the reference; // implementation which is available at; // https://github.com/Microsoft/microsoft-pdb/blob/master/PDB/dbi/gsi.h; //; // When you are reading the reference source code, you'd find the; // information below useful.; //; // - ppdb1->m_fMinimalDbgInfo seems to be always true.; // - SMALLBUCKETS macro is defined.; //; // The reference doesn't compile, so I learned just by reading code.; // It's not guaranteed to be correct.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PublicsStream.cpp:807,learn,learned,807,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PublicsStream.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/PublicsStream.cpp,1,['learn'],['learned']
Usability,"//===- ReduceOpcodes.cpp - Specialized Delta Pass -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Try to replace instructions that are likely to codegen to simpler or smaller; // sequences. This is a fuzzy and target specific concept.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp:441,simpl,simpler,441,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp,1,['simpl'],['simpler']
Usability,"//===- ReduceUsingSimplifyCFG.h - Specialized Delta Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to call SimplifyCFG on individual basic blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h:471,Simpl,SimplifyCFG,471,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h,1,['Simpl'],['SimplifyCFG']
Usability,"//===- ReduceUsingSimplifyCFG.h - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to call SimplifyCFG on individual basic blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp:471,Simpl,SimplifyCFG,471,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp,1,['Simpl'],['SimplifyCFG']
Usability,"//===- ReduceVirtualRegisters.cpp - Specialized Delta Pass ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify virtual registers in MIR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp:466,simpl,simplify,466,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp,1,['simpl'],['simplify']
Usability,"//===- ReduceVirtualRegisters.h - Specialized Delta Pass -------*- c++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify virtual register information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h:465,simpl,simplify,465,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h,1,['simpl'],['simplify']
Usability,"//===- RegionInfo.h - SESE region analysis ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Calculate a program structure tree built out of single entry single exit; // regions.; // The basic ideas are taken from ""The Program Structure Tree - Richard Johnson,; // David Pearson, Keshav Pingali - 1994"", however enriched with ideas from ""The; // Refined Process Structure Tree - Jussi Vanhatalo, Hagen Voelyer, Jana; // Koehler - 2009"".; // The algorithm to calculate these data structures however is completely; // different, as it takes advantage of existing information already available; // in (Post)dominace tree and dominance frontier passes. This leads to a simpler; // and in practice hopefully better performing algorithm. The runtime of the; // algorithms described in the papers above are both linear in graph size,; // O(V+E), whereas this algorithm is not, as the dominance frontier information; // itself is not, but in practice runtime seems to be in the order of magnitude; // of dominance tree calculation.; //; // WARNING: LLVM is generally very concerned about compile time such that; // the use of additional analysis passes in the default; // optimization sequence is avoided as much as possible.; // Specifically, if you do not need the RegionInfo, but dominance; // information could be sufficient please base your work only on; // the dominator tree. Most passes maintain it, such that using; // it has often near zero cost. In contrast RegionInfo is by; // default not available, is not maintained by existing; // transformations and there is no intention to do so.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:955,simpl,simpler,955,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,1,['simpl'],['simpler']
Usability,"//===- RemarkUtilRegistry.cpp: Implement a command registry. --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implement a simple subcommand registry.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.cpp:395,simpl,simple,395,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.cpp,1,['simpl'],['simple']
Usability,"//===- RemarkUtilRegistry.h: Implement a command registry. ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implement a simple subcommand registry.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.h:395,simpl,simple,395,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.h,1,['simpl'],['simple']
Usability,"//===- ScalarEvolutionAliasAnalysis.cpp - SCEV-based Alias Analysis -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScalarEvolutionAliasAnalysis pass, which implements a; // simple alias analysis implemented in terms of ScalarEvolution queries.; //; // This differs from traditional loop dependence analysis in that it tests; // for dependencies within a single iteration of a loop, rather than; // dependencies between different iterations.; //; // ScalarEvolution has a more complete understanding of pointer arithmetic; // than BasicAliasAnalysis' collection of ad-hoc analyses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp:463,simpl,simple,463,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp,1,['simpl'],['simple']
Usability,"//===- ScopedHashTable.h - A simple scoped hash table -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements an efficient scoped hash table, which is useful for; // things like dominator-based optimizations. This allows clients to do things; // like this:; //; // ScopedHashTable<int, int> HT;; // {; // ScopedHashTableScope<int, int> Scope1(HT);; // HT.insert(0, 0);; // HT.insert(1, 1);; // {; // ScopedHashTableScope<int, int> Scope2(HT);; // HT.insert(0, 42);; // }; // }; //; // Looking up the value for ""0"" in the Scope2 block will return 42. Looking; // up the value for 0 before 42 is inserted or after Scope2 is popped will; // return 0.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h:29,simpl,simple,29,interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ScopedHashTable.h,1,['simpl'],['simple']
Usability,"//===- SimpleExecuorMemoryManagare.cpp - Simple executor-side memory mgmt -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.cpp:7,Simpl,SimpleExecuorMemoryManagare,7,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.cpp,2,['Simpl'],"['Simple', 'SimpleExecuorMemoryManagare']"
Usability,"//===- SimpleLoopUnswitch.h - Hoist loop-invariant control flow -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h:7,Simpl,SimpleLoopUnswitch,7,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h,1,['Simpl'],['SimpleLoopUnswitch']
Usability,"//===- SimpleTypeSerializer.cpp -----------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/SimpleTypeSerializer.cpp:7,Simpl,SimpleTypeSerializer,7,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/SimpleTypeSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/SimpleTypeSerializer.cpp,1,['Simpl'],['SimpleTypeSerializer']
Usability,"//===- SimpleTypeSerializer.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h:7,Simpl,SimpleTypeSerializer,7,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h,1,['Simpl'],['SimpleTypeSerializer']
Usability,"//===- SimplifyCFG.cpp - Code to perform CFG simplification ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Peephole optimize the CFG.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:7,Simpl,SimplifyCFG,7,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,2,"['Simpl', 'simpl']","['SimplifyCFG', 'simplification']"
Usability,"//===- SimplifyCFG.cpp ----------------------------------------------------===//; //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the control flow graph (CFG) simplifications; // presented as part of the 'Getting Started With LLVM: Basics' tutorial at the; // US LLVM Developers Meeting 2019. It also contains additional material.; //; // The current file contains three different CFG simplifications. There are; // multiple versions of each implementation (e.g. _v1 and _v2), which implement; // additional functionality (e.g. preserving analysis like the DominatorTree) or; // use additional utilities to simplify the code (e.g. LLVM's PatternMatch.h).; // The available simplifications are:; // 1. Trivially Dead block Removal (removeDeadBlocks_v[1,2]).; // This simplifications removes all blocks without predecessors in the CFG; // from a function.; // 2. Conditional Branch Elimination (eliminateCondBranches_v[1,2,3]); // This simplification replaces conditional branches with constant integer; // conditions with unconditional branches.; // 3. Single Predecessor Block Merging (mergeIntoSinglePredecessor_v[1,2]); // This simplification merges blocks with a single predecessor into the; // predecessor, if that block has a single successor.; //; // TODOs; // * Preserve LoopInfo.; // * Add fixed point iteration to delete all dead blocks; // * Add implementation using reachability to discover dead blocks.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp:7,Simpl,SimplifyCFG,7,interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/SimplifyCFG.cpp,8,"['Simpl', 'simpl']","['SimplifyCFG', 'simplification', 'simplifications', 'simplify']"
Usability,"//===- SimplifyCFG.h - Simplify and canonicalize the CFG --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file provides the interface for the pass responsible for both; /// simplifying and canonicalizing the CFG.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h:7,Simpl,SimplifyCFG,7,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimplifyCFG.h,3,"['Simpl', 'simpl']","['Simplify', 'SimplifyCFG', 'simplifying']"
Usability,"//===- SimplifyCFGOptions.h - Control structure for SimplifyCFG -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A set of parameters used to control the transforms in the SimplifyCFG pass.; // Options may change depending on the position in the optimization pipeline.; // For example, canonical form that includes switches and branches may later be; // replaced by lookup tables and selects.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h:7,Simpl,SimplifyCFGOptions,7,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyCFGOptions.h,3,['Simpl'],"['SimplifyCFG', 'SimplifyCFGOptions']"
Usability,"//===- SimplifyCFGPass.cpp - CFG Simplification Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements dead code elimination and basic block merging, along; // with a collection of other peephole control flow optimizations. For example:; //; // * Removes basic blocks with no predecessors.; // * Merges a basic block into its predecessor if there is only one and the; // predecessor only has one successor.; // * Eliminates PHI nodes for basic blocks with a single predecessor.; // * Eliminates a basic block that only contains an unconditional branch.; // * Changes invoke instructions to nounwind functions to be calls.; // * Change things like ""if (x) if (y)"" into ""if (x&y)"".; // * etc..; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp:7,Simpl,SimplifyCFGPass,7,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimplifyCFGPass.cpp,2,['Simpl'],"['Simplification', 'SimplifyCFGPass']"
Usability,"//===- SimplifyInstructions.cpp - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify Instructions in defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp:7,Simpl,SimplifyInstructions,7,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp,2,"['Simpl', 'simpl']","['SimplifyInstructions', 'simplify']"
Usability,"//===- SimplifyInstructions.h - Specialized Delta Pass ----------*- C++- *-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.h:7,Simpl,SimplifyInstructions,7,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.h,1,['Simpl'],['SimplifyInstructions']
Usability,"//===- SimplifyLibCalls.h - Library call simplifier -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes an interface to build some C language libcalls for; // optimization passes that need to call the various functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h:7,Simpl,SimplifyLibCalls,7,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyLibCalls.h,2,"['Simpl', 'simpl']","['SimplifyLibCalls', 'simplifier']"
Usability,"//===- SourceMgr.cpp - Manager for Simple Source Buffers & Diagnostics ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the SourceMgr class. This class is used as a simple; // substrate for diagnostics, #include handling, and other low level things for; // simple parsers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:35,Simpl,Simple,35,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,3,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"//===- SourceMgr.h - Manager for Source Buffers & Diagnostics ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SMDiagnostic and SourceMgr classes. This; // provides a simple substrate for diagnostics, #include handling, and other low; // level things for simple parsers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h:462,simpl,simple,462,interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SourceMgr.h,2,['simpl'],['simple']
Usability,"//===- SpeculativeExecution.cpp ---------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDiverg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp:539,simpl,simple,539,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp,1,['simpl'],['simple']
Usability,"//===- SpeculativeExecution.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDiverg",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:539,simpl,simple,539,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,1,['simpl'],['simple']
Usability,"//===- StraightLineStrengthReduce.cpp - -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements straight-line strength reduction (SLSR). Unlike loop; // strength reduction, this algorithm is designed to reduce arithmetic; // redundancy in straight-line code instead of loops. It has proven to be; // effective in simplifying arithmetic statements derived from an unrolled loop.; // It can also simplify the logic of SeparateConstOffsetFromGEP.; //; // There are many optimizations we can perform in the domain of SLSR. This file; // for now contains only an initial step. Specifically, we look for strength; // reduction candidates in the following forms:; //; // Form 1: B + i * S; // Form 2: (B + i) * S; // Form 3: &B[i * S]; //; // where S is an integer variable, and i is a constant integer. If we found two; // candidates S1 and S2 in the same form and S1 dominates S2, we may rewrite S2; // in a simpler way with respect to S1. For example,; //; // S1: X = B + i * S; // S2: Y = B + i' * S => X + (i' - i) * S; //; // S1: X = (B + i) * S; // S2: Y = (B + i') * S => X + (i' - i) * S; //; // S1: X = &B[i * S]; // S2: Y = &B[i' * S] => &X[(i' - i) * S]; //; // Note: (i' - i) * S is folded to the extent possible.; //; // This rewriting is in general a good idea. The code patterns we focus on; // usually come from loop unrolling, so (i' - i) * S is likely the same; // across iterations and can be reused. When that happens, the optimized form; // takes only one add starting from the second iteration.; //; // When such rewriting is possible, we call S1 a ""basis"" of S2. When S2 has; // multiple bases, we choose to rewrite S2 with respect to its ""immediate""; // basis, the basis that",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:621,simpl,simplifying,621,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,2,['simpl'],"['simplify', 'simplifying']"
Usability,"//===- Target/X86/X86LowerAMXType.cpp - -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Pass to transform <256 x i32> load/store; /// <256 x i32> is bitcasted to x86_amx on X86, and AMX instruction set only; /// provides simple operation on x86_amx. The basic elementwise operation; /// is not supported by AMX. Since x86_amx is bitcasted from vector <256 x i32>; /// and only AMX intrinsics can operate on the type, we need transform; /// load/store <256 x i32> instruction to AMX load/store. If the bitcast can; /// not be combined with load/store, we transform the bitcast to amx load/store; /// and <256 x i32> store/load.; ///; /// If Front End not use O0 but the Mid/Back end use O0, (e.g. ""Clang -O2 -S; /// -emit-llvm t.c"" + ""llc t.ll"") we should make sure the amx data is volatile,; /// because that is necessary for AMX fast register allocation. (In Fast; /// registera allocation, register will be allocated before spill/reload, so; /// there is no additional register for amx to identify the step in spill.); /// The volatileTileData() will handle this case.; /// e.g.; /// ----------------------------------------------------------; /// | def %td = ... |; /// | ... |; /// | ""use %td"" |; /// ----------------------------------------------------------; /// will transfer to -->; /// ----------------------------------------------------------; /// | def %td = ... |; /// | call void @llvm.x86.tilestored64.internal(mem, %td) |; /// | ... |; /// | %td2 = call x86_amx @llvm.x86.tileloadd64.internal(mem)|; /// | ""use %td2"" |; /// ----------------------------------------------------------; //; //===----------------------------------------------------------------------===//; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86LowerAMXType.cpp:523,simpl,simple,523,interpreter/llvm-project/llvm/lib/Target/X86/X86LowerAMXType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86LowerAMXType.cpp,1,['simpl'],['simple']
Usability,"//===- ThreadSafetyTIL.h ----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a simple Typed Intermediate Language, or TIL, that is used; // by the thread safety analysis (See ThreadSafety.cpp). The TIL is intended; // to be largely independent of clang, in the hope that the analysis can be; // reused for other non-C++ languages. All dependencies on clang/llvm should; // go in ThreadSafetyUtil.h.; //; // Thread safety analysis works by comparing mutex expressions, e.g.; //; // class A { Mutex mu; int dat GUARDED_BY(this->mu); }; // class B { A a; }; //; // void foo(B* b) {; // (*b).a.mu.lock(); // locks (*b).a.mu; // b->a.dat = 0; // substitute &b->a for 'this';; // // requires lock on (&b->a)->mu; // (b->a.mu).unlock(); // unlocks (b->a.mu); // }; //; // As illustrated by the above example, clang Exprs are not well-suited to; // represent mutex expressions directly, since there is no easy way to compare; // Exprs for equivalence. The thread safety analysis thus lowers clang Exprs; // into a simple intermediate language (IL). The IL supports:; //; // (1) comparisons for semantic equality of expressions; // (2) SSA renaming of variables; // (3) wildcards and pattern matching over expressions; // (4) hash-based expression lookup; //; // The TIL is currently very experimental, is intended only for use within; // the thread safety analysis, and is subject to change without notice.; // After the API stabilizes and matures, it may be appropriate to make this; // more generally available to other analyses.; //; // UNDER CONSTRUCTION. USE AT YOUR OWN RISK.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:403,simpl,simple,403,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,2,['simpl'],['simple']
Usability,"//===- TrainingLogger.h - mlgo feature/reward logging ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The design goals of the logger are:; // - no dependencies that llvm doesn't already have.; // - support streaming, so that we don't need to buffer data during compilation; // - 0-decoding tensor values. Tensor values are potentially very large buffers; // of scalars. Because of their potentially large size, avoiding; // serialization/deserialization overhead is preferred.; //; // The simple logger produces an output of the form (each line item on its line); // - header: a json object describing the data that will follow.; // - context: e.g. function name, for regalloc, or ""default"" for module-wide; // optimizations like the inliner. This is the context to which the subsequent; // data corresponds.; // - observation number.; // - tensor values - raw bytes of the tensors, in the order given in the header.; // The values are in succession, i.e. no separator is found between successive; // tensor values. At the end, there is a new line character.; // - [score] - this is optional, and is present if it was present in the header.; // Currently, for final rewards, we output ""0"" scores after each observation,; // except for the last one.; // <repeat>; // The file should be read as binary, but the reason we use newlines is mostly; // ease of debugging: the log can be opened in a text editor and, while tensor; // values are inscrutable, at least the sequence of data can be easily observed.; // Of course, the buffer of tensor values could contain '\n' bytes. A reader; // should use the header information to know how much data to read for the; // tensor values, and not use line information for that.; //; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h:769,simpl,simple,769,interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/Utils/TrainingLogger.h,1,['simpl'],['simple']
Usability,"//===- VectorBuilder.cpp - Builder for VP Intrinsics ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the VectorBuilder class, which is used as a convenient; // way to create VP intrinsics as if they were LLVM instructions with a; // consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VectorBuilder.cpp:551,simpl,simplified,551,interpreter/llvm-project/llvm/lib/IR/VectorBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/VectorBuilder.cpp,1,['simpl'],['simplified']
Usability,"//===- YAMLParser.cpp - Simple YAML parser --------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a YAML parser.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:24,Simpl,Simple,24,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,1,['Simpl'],['Simple']
Usability,"//===- YAMLParser.h - Simple YAML parser ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a YAML 1.2 parser.; //; // See http://www.yaml.org/spec/1.2/spec.html for the full standard.; //; // This currently does not implement the following:; // * Tag resolution.; // * UTF-16.; // * BOMs anywhere other than the first Unicode scalar value in the file.; //; // The most important class here is Stream. This represents a YAML stream with; // 0, 1, or many documents.; //; // SourceMgr sm;; // StringRef input = getInput();; // yaml::Stream stream(input, sm);; //; // for (yaml::document_iterator di = stream.begin(), de = stream.end();; // di != de; ++di) {; // yaml::Node *n = di->getRoot();; // if (n) {; // // Do something with n...; // } else; // break;; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h:22,Simpl,Simple,22,interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLParser.h,1,['Simpl'],['Simple']
Usability,"//===- examples/ModuleMaker/ModuleMaker.cpp - Example project ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This programs is a simple example that creates an LLVM module ""from scratch"",; // emitting it as a bitcode file to standard out. This is just to show how; // LLVM projects work and to demonstrate some of the LLVM APIs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ModuleMaker/ModuleMaker.cpp:402,simpl,simple,402,interpreter/llvm-project/llvm/examples/ModuleMaker/ModuleMaker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ModuleMaker/ModuleMaker.cpp,1,['simpl'],['simple']
Usability,"//===- iterator_range.h - A range adaptor for iterators ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This provides a very simple, boring adaptor for a begin and end iterator; /// into a range type. This should be used to build range views that work well; /// with range based for loops and range based constructors.; ///; /// Note that code here follows more standards-based coding conventions as it; /// is mirroring proposed interfaces for standardization.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h:412,simpl,simple,412,interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator_range.h,1,['simpl'],['simple']
Usability,"//===- lli.cpp - LLVM Interpreter / Dynamic compiler ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility provides a simple wrapper around the LLVM Execution Engines,; // which allow the direct execution of LLVM programs through a Just-In-Time; // compiler, or through an interpreter if no JIT is available for this platform.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp:407,simpl,simple,407,interpreter/llvm-project/llvm/tools/lli/lli.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp,1,['simpl'],['simple']
Usability,"//===- llvm-jitlink-executor.cpp - Out-of-proc executor for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple out-of-process executor for llvm-jitlink.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp:382,Simpl,Simple,382,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp,1,['Simpl'],['Simple']
Usability,"//===- llvm-jitlink.cpp -- Command line interface/tester for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility provides a simple command line interface to the llvm jitlink; // library, which makes relocatable object files executable in memory. Its; // primary function is as a testing utility for the jitlink library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:407,simpl,simple,407,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['simpl'],['simple']
Usability,"//===- llvm-lto: a simple command-line program to link modules with LTO ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them, performs link-time; // optimization, and outputs an object file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:19,simpl,simple,19,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,1,['simpl'],['simple']
Usability,"//===- llvm-readobj.cpp - Dump contents of an Object File -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a tool similar to readelf, except it works on multiple object file; // formats. The main purpose of this tool is to provide detailed output suitable; // for FileCheck.; //; // Flags should be similar to readelf where supported, but the output format; // does not need to be identical. The point is to not make users learn yet; // another set of flags.; //; // Output should be specialized for each format where appropriate.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp:707,learn,learn,707,interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp,1,['learn'],['learn']
Usability,"//===- llvm/ADT/simple_ilist.h - Simple Intrusive List ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:33,Simpl,Simple,33,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,1,['Simpl'],['Simple']
Usability,"//===- llvm/Attributes.h - Container for Attributes -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file contains the simple types necessary to represent the; /// attributes associated with functions and their calls.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h:418,simpl,simple,418,interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Attributes.h,1,['simpl'],['simple']
Usability,"//===- llvm/IRBuilder.h - Builder for LLVM Instructions ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the IRBuilder class, which is used as a convenient way; // to create LLVM instructions with a consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:510,simpl,simplified,510,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['simpl'],['simplified']
Usability,"//===- llvm/MC/MachineLocation.h --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // The MachineLocation class is used to represent a simple location in a machine; // frame. Locations will be one of two forms; a register or an address formed; // from a base address plus an offset. Register indirection can be specified by; // explicitly passing an offset to the constructor.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h:428,simpl,simple,428,interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MachineLocation.h,1,['simpl'],['simple']
Usability,"//===- llvm/Support/CommandLine.h - Command line handler --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class implements a command line argument processor that is useful when; // creating a tool. It provides a simple, minimalistic interface that is easily; // extensible and supports nonlocal (library) command line options.; //; // Note that rather than trying to figure out what this code does, you should; // read the library documentation located in docs/CommandLine.html or looks at; // the many example usages in tools/*/*.cpp; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:494,simpl,simple,494,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['simpl'],['simple']
Usability,"//===- llvm/Support/GraphWriter.h - Write graph to a .dot file --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a simple interface that can be used to print out generic; // LLVM graphs to "".dot"" files. ""dot"" is a tool that is part of the AT&T; // graphviz package (http://www.research.att.com/sw/tools/graphviz/) which can; // be used to turn the files output by this interface into a variety of; // different graphics formats.; //; // Graphs do not need to implement any interface past what is already required; // by the GraphTraits template, but they can choose to implement specializations; // of the DOTGraphTraits template if they want to customize the graphs output in; // any way.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h:403,simpl,simple,403,interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GraphWriter.h,1,['simpl'],['simple']
Usability,"//===- llvm/Support/ScaledNumber.h - Support for scaled numbers -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains functions (and a class) useful for working with scaled; // numbers -- in particular, pairs of integers where one represents digits and; // another represents a scale. The functions are helpers and live in the; // namespace ScaledNumbers. The class ScaledNumber is useful for modelling; // certain cost metrics that need simple, integer-like semantics that are easy; // to reason about.; //; // These might remind you of soft-floats. If you want one of those, you're in; // the wrong place. Look at include/llvm/ADT/APFloat.h instead.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:722,simpl,simple,722,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,1,['simpl'],['simple']
Usability,"//===- llvm/Support/type_traits.h - Simplfied type traits -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides useful additions to the standard type_traits library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/type_traits.h:36,Simpl,Simplfied,36,interpreter/llvm-project/llvm/include/llvm/Support/type_traits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/type_traits.h,1,['Simpl'],['Simplfied']
Usability,"//===- llvm/VectorBuilder.h - Builder for VP Intrinsics ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the VectorBuilder class, which is used as a convenient way; // to create VP intrinsics as if they were LLVM instructions with a consistent; // and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h:548,simpl,simplified,548,interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VectorBuilder.h,1,['simpl'],['simplified']
Usability,"//===- xray-registry.cpp: Implement a command registry. -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implement a simple subcommand registry.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.cpp:395,simpl,simple,395,interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.cpp,1,['simpl'],['simple']
Usability,"//===- xray-registry.h - Define registry mechanism for commands. ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implement a simple subcommand registry.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.h:395,simpl,simple,395,interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.h,1,['simpl'],['simple']
Usability,"//===-- Address.h - An aligned address -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class provides a simple wrapper for a pair of a pointer and an; // alignment.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Address.h:404,simpl,simple,404,interpreter/llvm-project/clang/lib/CodeGen/Address.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Address.h,1,['simpl'],['simple']
Usability,"//===-- BTF.h --------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the layout of .BTF and .BTF.ext ELF sections.; ///; /// The binary layout for .BTF section:; /// struct Header; /// Type and Str subsections; /// The Type subsection is a collection of types with type id starting with 1.; /// The Str subsection is simply a collection of strings.; ///; /// The binary layout for .BTF.ext section:; /// struct ExtHeader; /// FuncInfo, LineInfo, FieldReloc and ExternReloc subsections; /// The FuncInfo subsection is defined as below:; /// BTFFuncInfo Size; /// struct SecFuncInfo for ELF section #1; /// A number of struct BPFFuncInfo for ELF section #1; /// struct SecFuncInfo for ELF section #2; /// A number of struct BPFFuncInfo for ELF section #2; /// ...; /// The LineInfo subsection is defined as below:; /// BPFLineInfo Size; /// struct SecLineInfo for ELF section #1; /// A number of struct BPFLineInfo for ELF section #1; /// struct SecLineInfo for ELF section #2; /// A number of struct BPFLineInfo for ELF section #2; /// ...; /// The FieldReloc subsection is defined as below:; /// BPFFieldReloc Size; /// struct SecFieldReloc for ELF section #1; /// A number of struct BPFFieldReloc for ELF section #1; /// struct SecFieldReloc for ELF section #2; /// A number of struct BPFFieldReloc for ELF section #2; /// ...; ///; /// The section formats are also defined at; /// https://github.com/torvalds/linux/blob/master/include/uapi/linux/btf.h; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:662,simpl,simply,662,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,1,['simpl'],['simply']
Usability,"//===-- CSPreInliner.cpp - Profile guided preinliner -------------- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:35,guid,guided,35,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,1,['guid'],['guided']
Usability,"//===-- CSPreInliner.h - Profile guided preinliner ---------------- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h:33,guid,guided,33,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h,1,['guid'],['guided']
Usability,"//===-- CallBrPrepare - Prepare callbr for code generation ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass lowers callbrs in LLVM IR in order to to assist SelectionDAG's; // codegen.; //; // In particular, this pass assists in inserting register copies for the output; // values of a callbr along the edges leading to the indirect target blocks.; // Though the output SSA value is defined by the callbr instruction itself in; // the IR representation, the value cannot be copied to the appropriate virtual; // registers prior to jumping to an indirect label, since the jump occurs; // within the user-provided assembly blob.; //; // Instead, those copies must occur separately at the beginning of each; // indirect target. That requires that we create a separate SSA definition in; // each of them (via llvm.callbr.landingpad), and may require splitting; // critical edges so we have a location to place the intrinsic. Finally, we; // remap users of the original callbr output SSA value to instead point to the; // appropriate llvm.callbr.landingpad value.; //; // Ideally, this could be done inside SelectionDAG, or in the; // MachineInstruction representation, without the use of an IR-level intrinsic.; // But, within the current framework, it’s simpler to implement as an IR pass.; // (If support for callbr in GlobalISel is implemented, it’s worth considering; // whether this is still required.); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CallBrPrepare.cpp:1535,simpl,simpler,1535,interpreter/llvm-project/llvm/lib/CodeGen/CallBrPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CallBrPrepare.cpp,1,['simpl'],['simpler']
Usability,"//===-- CommandLine.cpp - Command line parser implementation --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class implements a command line argument processor that is useful when; // creating a tool. It provides a simple, minimalistic interface that is easily; // extensible and supports nonlocal (library) command line options.; //; // Note that rather than trying to figure out what this code does, you could try; // reading the library documentation located in docs/CommandLine.html; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:494,simpl,simple,494,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,1,['simpl'],['simple']
Usability,"//===-- ConstantFolding.cpp - Fold instructions into constants ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines routines for folding instructions into constants.; //; // Also, to supplement the basic IR ConstantExpr simplifications,; // this file defines some additional folding routines that can make use of; // DataLayout information. These functions cannot go in IR due to library; // dependency issues.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:505,simpl,simplifications,505,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['simpl'],['simplifications']
Usability,"//===-- ConstantFolding.h - Fold instructions into constants ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares routines for folding instructions into constants when all; // operands are constants, for example ""sub i32 1, 0"" -> ""1"".; //; // Also, to supplement the basic VMCore ConstantExpr simplifications,; // this file declares some additional folding routines that can make use of; // DataLayout information. These functions cannot go in VMCore due to library; // dependency issues.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h:581,simpl,simplifications,581,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstantFolding.h,1,['simpl'],['simplifications']
Usability,"//===-- CostTable.h - Instruction Cost Table handling -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Cost tables and simple lookup functions; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CostTable.h:412,simpl,simple,412,interpreter/llvm-project/llvm/include/llvm/CodeGen/CostTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CostTable.h,1,['simpl'],['simple']
Usability,"//===-- DelaySlotFiller.cpp - SPARC delay slot filler ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a simple local pass that attempts to fill delay slots with useful; // instructions. If no instructions can be moved into the delay slot, then a; // NOP is placed.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp:393,simpl,simple,393,interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp,1,['simpl'],['simple']
Usability,"//===-- ForceFunctionAttrs.h - Force function attrs for debugging ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Super simple passes to force specific function attrs from the commandline; /// into the IR for debugging purposes.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ForceFunctionAttrs.h:397,simpl,simple,397,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ForceFunctionAttrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/ForceFunctionAttrs.h,1,['simpl'],['simple']
Usability,"//===-- InstructionSimplify.h - Fold instrs into simpler forms --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares routines for folding instructions into simpler forms; // that do not require creating new instructions. This does constant folding; // (""add i32 1, 1"" -> ""2"") but can also handle non-constant operands, either; // returning a constant (""and i32 %x, 0"" -> ""0"") or an already existing value; // (""and i32 %x, %x"" -> ""%x""). If the simplification is also an instruction; // then it dominates the original instruction.; //; // These routines implicitly resolve undef uses. The easiest way to be safe when; // using these routines to obtain simplified values for existing instructions is; // to always replace all uses of the instructions with the resulting simplified; // values. This will prevent other code from seeing the same undef uses and; // resolving them to different values.; //; // They require that all the IR that they encounter be valid and inserted into a; // parent function.; //; // Additionally, these routines can't simplify to the instructions that are not; // def-reachable, meaning we can't just scan the basic block for instructions; // to simplify to.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h:49,simpl,simpler,49,interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstructionSimplify.h,7,['simpl'],"['simpler', 'simplification', 'simplified', 'simplify']"
Usability,"//===-- LCSSA.cpp - Convert loops into loop-closed SSA form ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass transforms loops by placing phi nodes at the end of the loops for; // all values that are live across the loop boundary. For example, it turns; // the left into the right code:; //; // for (...) for (...); // if (c) if (c); // X1 = ... X1 = ...; // else else; // X2 = ... X2 = ...; // X3 = phi(X1, X2) X3 = phi(X1, X2); // ... = X3 + 4 X4 = phi(X3); // ... = X4 + 4; //; // This is still valid LLVM; the extra phi nodes are purely redundant, and will; // be trivially eliminated by InstCombine. The major benefit of this; // transformation is that it makes many other loop optimizations, such as; // LoopUnswitching, simpler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp:1010,simpl,simpler,1010,interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,1,['simpl'],['simpler']
Usability,"//===-- LICM.cpp - Loop Invariant Code Motion Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass performs loop invariant code motion, attempting to remove as much; // code from the body of a loop as possible. It does this by either hoisting; // code into the preheader block, or by sinking code to the exit blocks if it is; // safe. This pass also promotes must-aliased memory locations in the loop to; // live in registers, thus hoisting and sinking ""invariant"" loads and stores.; //; // Hoisting operations out of loops is a canonicalization transform. It; // enables and simplifies subsequent optimizations in the middle-end.; // Rematerialization of hoisted instructions to reduce register pressure is the; // responsibility of the back-end, which has more accurate information about; // register pressure and also handles other optimizations than LICM that; // increase live-ranges.; //; // This pass uses alias analysis for two purposes:; //; // 1. Moving loop invariant loads and calls out of loops. If we can determine; // that a load or call inside of a loop never aliases anything stored to,; // we can hoist it or sink it like any other instruction.; // 2. Scalar Promotion of Memory - If there is a store instruction inside of; // the loop, we try to move the store to happen AFTER the loop instead of; // inside of the loop. This can only happen if a few conditions are true:; // A. The pointer stored through is loop invariant; // B. There are no stores or loads in the loop which _may_ alias the; // pointer. There are no calls in the loop which mod/ref the pointer.; // If these conditions are true, we can promote the loads and stores in the; // loop of the pointer to use a temporary all",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:870,simpl,simplifies,870,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['simpl'],['simplifies']
Usability,"//===-- LanaiDelaySlotFiller.cpp - Lanai delay slot filler ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple pass to fill delay slots with useful instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiDelaySlotFiller.cpp:383,Simpl,Simple,383,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiDelaySlotFiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiDelaySlotFiller.cpp,1,['Simpl'],['Simple']
Usability,"//===-- LanaiMemAluCombiner.cpp - Pass to combine memory & ALU operations -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Simple pass to combine memory and ALU operations; //; // The Lanai ISA supports instructions where a load/store modifies the base; // register used in the load/store operation. This pass finds suitable; // load/store and ALU instructions and combines them into one instruction.; //; // For example,; // ld [ %r6 -- ], %r12; // is a supported instruction that is not currently generated by the instruction; // selection pass of this backend. This pass generates these instructions by; // merging; // add %r6, -4, %r6; // followed by; // ld [ %r6 ], %r12; // in the same machine basic block into one machine instruction.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp:379,Simpl,Simple,379,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,1,['Simpl'],['Simple']
Usability,"//===-- M68kExpandPseudo.cpp - Expand pseudo instructions -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains a pass that expands pseudo instructions into target; /// instructions to allow proper scheduling, if-conversion, other late; /// optimizations, or simply the encoding of the instructions.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kExpandPseudo.cpp:562,simpl,simply,562,interpreter/llvm-project/llvm/lib/Target/M68k/M68kExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kExpandPseudo.cpp,1,['simpl'],['simply']
Usability,"//===-- MsgPackDocument.cpp - MsgPack Document --------------------------*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// This file implements a class that exposes a simple in-memory representation; /// of a document of MsgPack objects, that can be read from MsgPack, written to; /// MsgPack, and inspected and modified in memory. This is intended to be a; /// lighter-weight (in terms of memory allocations) replacement for; /// MsgPackTypes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp:429,simpl,simple,429,interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,1,['simpl'],['simple']
Usability,"//===-- MsgPackDocument.h - MsgPack Document --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file declares a class that exposes a simple in-memory representation; /// of a document of MsgPack objects, that can be read from MsgPack, written to; /// MsgPack, and inspected and modified in memory. This is intended to be a; /// lighter-weight (in terms of memory allocations) replacement for; /// MsgPackTypes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:433,simpl,simple,433,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['simpl'],['simple']
Usability,"//===-- NVPTXAtomicLower.cpp - Lower atomics of local memory ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Lower atomics of local memory to simple load/stores; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAtomicLower.cpp:416,simpl,simple,416,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAtomicLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAtomicLower.cpp,1,['simpl'],['simple']
Usability,"//===-- NVPTXAtomicLower.h - Lower atomics of local memory ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Lower atomics of local memory to simple load/stores; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAtomicLower.h:416,simpl,simple,416,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAtomicLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAtomicLower.h,1,['simpl'],['simple']
Usability,"//===-- OptimizedStructLayout.h - Struct layout algorithm ---------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file provides an interface for laying out a sequence of fields; /// as a struct in a way that attempts to minimizes the total space; /// requirements of the struct while still satisfying the layout; /// requirements of the individual fields. The resulting layout may be; /// substantially more compact than simply laying out the fields in their; /// original order.; ///; /// Fields may be pre-assigned fixed offsets. They may also be given sizes; /// that are not multiples of their alignments. There is no currently no; /// way to describe that a field has interior padding that other fields may; /// be allocated into.; ///; /// This algorithm does not claim to be ""optimal"" for several reasons:; ///; /// - First, it does not guarantee that the result is minimal in size.; /// There is no known efficient algoorithm to achieve minimality for; /// unrestricted inputs. Nonetheless, this algorithm; ///; /// - Second, there are other ways that a struct layout could be optimized; /// besides space usage, such as locality. This layout may have a mixed; /// impact on locality: less overall memory may be used, but adjacent; /// fields in the original array may be moved further from one another.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:708,simpl,simply,708,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,1,['simpl'],['simply']
Usability,"//===-- PPCCTRLoops.cpp - Verify CTR loops -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass verifies that all bdnz/bdz instructions are dominated by a loop; // mtctr before any other instructions that might clobber the ctr register.; //; //===----------------------------------------------------------------------===//; // CTR loops are produced by the HardwareLoops pass and this pass is simply a; // verification that no invalid CTR loops are produced. As such, it isn't; // something that needs to be run (or even defined) for Release builds so the; // entire file is guarded by NDEBUG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCCTRLoopsVerify.cpp:675,simpl,simply,675,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCCTRLoopsVerify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCCTRLoopsVerify.cpp,1,['simpl'],['simply']
Usability,"//===-- PPCInstrBuilder.h - Aides for building PPC insts --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes functions that may be used with BuildMI from the; // MachineInstrBuilder.h file to simplify generating frame and constant pool; // references.; //; // For reference, the order of operands for memory references is:; // (Operand), Dest Reg, Base Reg, and either Reg Index or Immediate; // Displacement.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrBuilder.h:484,simpl,simplify,484,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrBuilder.h,1,['simpl'],['simplify']
Usability,"//===-- RegUsageInfoCollector.cpp - Register Usage Information Collector --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// This pass is required to take advantage of the interprocedural register; /// allocation infrastructure.; ///; /// This pass is simple MachineFunction pass which collects register usage; /// details by iterating through each physical registers and checking; /// MRI::isPhysRegUsed() then creates a RegMask based on this details.; /// The pass then stores this RegMask in PhysicalRegisterUsageInfo.cpp; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegUsageInfoCollector.cpp:512,simpl,simple,512,interpreter/llvm-project/llvm/lib/CodeGen/RegUsageInfoCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegUsageInfoCollector.cpp,1,['simpl'],['simple']
Usability,"//===-- ResourceScriptCppFilter.h ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This filters the input to llvm-rc for preprocessor markers, removing; // preprocessing directives that a preprocessor can output or leave behind.; //; // It also filters out any contribution from files named *.h or *.c, based; // on preprocessor line markers. When preprocessing RC files, the included; // headers can leave behind C declarations, that RC doesn't understand.; // Rc.exe simply discards anything that comes from files named *.h or *.h.; //; // https://msdn.microsoft.com/en-us/library/windows/desktop/aa381033(v=vs.85).aspx; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.h:767,simpl,simply,767,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.h,1,['simpl'],['simply']
Usability,"//===-- SimpleStreamChecker.cpp -----------------------------------------*- C++ -*--//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines a checker for proper use of fopen/fclose APIs.; // - If a file has been closed with fclose, it should not be accessed again.; // Accessing a closed file results in undefined behavior.; // - If a file was opened with fopen, it must be closed with fclose before; // the execution ends. Failing to do so results in a resource leak.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/SimpleStreamChecker.cpp:8,Simpl,SimpleStreamChecker,8,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/SimpleStreamChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/SimpleStreamChecker.cpp,1,['Simpl'],['SimpleStreamChecker']
Usability,"//===-- SimplifyConstraints.cpp ---------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/SimplifyConstraints.cpp:8,Simpl,SimplifyConstraints,8,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/SimplifyConstraints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/SimplifyConstraints.cpp,1,['Simpl'],['SimplifyConstraints']
Usability,"//===-- SimplifyConstraints.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h:8,Simpl,SimplifyConstraints,8,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/SimplifyConstraints.h,1,['Simpl'],['SimplifyConstraints']
Usability,"//===-- SimplifyIndVar.cpp - Induction variable simplification ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements induction variable simplification. It does; // not define any actual pass or policy, but provides a single function to; // simplify a loop's induction variables based on ScalarEvolution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:8,Simpl,SimplifyIndVar,8,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,4,"['Simpl', 'simpl']","['SimplifyIndVar', 'simplification', 'simplify']"
Usability,"//===-- SimplifyQuery.h - Context for simplifications -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h:8,Simpl,SimplifyQuery,8,interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SimplifyQuery.h,2,"['Simpl', 'simpl']","['SimplifyQuery', 'simplifications']"
Usability,"//===-- Statistic.cpp - Easy way to expose stats information --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the 'Statistic' class, which is designed to be an easy; // way to expose various success metrics from passes. These statistics are; // printed at the end of a run, when the -stats command line option is enabled; // on the command line.; //; // This is useful for reporting information like the number of instructions; // simplified, optimized or removed by various transformations, like this:; //; // static Statistic NumInstEliminated(""GCSE"", ""Number of instructions killed"");; //; // Later, in the code: ++NumInstEliminated;; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:725,simpl,simplified,725,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,1,['simpl'],['simplified']
Usability,"//===-- SystemZLongBranch.cpp - Branch lengthening for SystemZ ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass makes sure that all branches are in range. There are several ways; // in which this could be done. One aggressive approach is to assume that all; // branches are in range and successively replace those that turn out not; // to be in range with a longer form (branch relaxation). A simple; // implementation is to continually walk through the function relaxing; // branches until no more changes are needed and a fixed point is reached.; // However, in the pathological worst case, this implementation is; // quadratic in the number of blocks; relaxing branch N can make branch N-1; // go out of range, which in turn can make branch N-2 go out of range,; // and so on.; //; // An alternative approach is to assume that all branches must be; // converted to their long forms, then reinstate the short forms of; // branches that, even under this pessimistic assumption, turn out to be; // in range (branch shortening). This too can be implemented as a function; // walk that is repeated until a fixed point is reached. In general,; // the result of shortening is not as good as that of relaxation, and; // shortening is also quadratic in the worst case; shortening branch N; // can bring branch N-1 in range of the short form, which in turn can do; // the same for branch N-2, and so on. The main advantage of shortening; // is that each walk through the function produces valid code, so it is; // possible to stop at any point after the first walk. The quadraticness; // could therefore be handled with a maximum pass count, although the; // question then becomes: what maximum count should be used?; //; // On",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZLongBranch.cpp:674,simpl,simple,674,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZLongBranch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZLongBranch.cpp,1,['simpl'],['simple']
Usability,"//===-- TarWriter.cpp - Tar archive file creator --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // TarWriter class provides a feature to create a tar archive file.; //; // I put emphasis on simplicity over comprehensiveness when implementing this; // class because we don't need a full-fledged archive file generator in LLVM; // at the moment.; //; // The filename field in the Unix V7 tar header is 100 bytes. Longer filenames; // are stored using the PAX extension. The PAX header is standardized in; // POSIX.1-2001.; //; // The struct definition of UstarHeader is copied from; // https://www.freebsd.org/cgi/man.cgi?query=tar&sektion=5; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:474,simpl,simplicity,474,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,1,['simpl'],['simplicity']
Usability,"//===-- ThreadSanitizer.cpp - race detector -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file is a part of ThreadSanitizer, a race detector.; //; // The tool is under development, for the details about previous versions see; // http://code.google.com/p/data-race-test; //; // The instrumentation phase is quite simple:; // - Insert calls to run-time library before every memory access.; // - Optimizations may apply to avoid instrumenting some of the accesses.; // - Insert calls at function entry/exit.; // The rest is handled by the run-time library.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp:610,simpl,simple,610,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,1,['simpl'],['simple']
Usability,"//===-- UnreachableBlockElim.cpp - Remove unreachable blocks for codegen --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is an extremely simple version of the SimplifyCFG pass. Its sole; // job is to delete LLVM basic blocks that are not reachable from the entry; // node. To do this, it performs a simple depth first traversal of the CFG,; // then deletes any unvisited nodes.; //; // Note that this pass is really a hack. In particular, the instruction; // selectors for various targets should just not generate code for unreachable; // blocks. Until LLVM has a more systematic way of defining instruction; // selectors, however, we cannot really expect them to handle additional; // complexity.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/UnreachableBlockElim.cpp:409,simpl,simple,409,interpreter/llvm-project/llvm/lib/CodeGen/UnreachableBlockElim.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/UnreachableBlockElim.cpp,3,"['Simpl', 'simpl']","['SimplifyCFG', 'simple']"
Usability,"//===-- UnreachableBlockElim.h - Remove unreachable blocks for codegen --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is an extremely simple version of the SimplifyCFG pass. Its sole; // job is to delete LLVM basic blocks that are not reachable from the entry; // node. To do this, it performs a simple depth first traversal of the CFG,; // then deletes any unvisited nodes.; //; // Note that this pass is really a hack. In particular, the instruction; // selectors for various targets should just not generate code for unreachable; // blocks. Until LLVM has a more systematic way of defining instruction; // selectors, however, we cannot really expect them to handle additional; // complexity.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h:407,simpl,simple,407,interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h,3,"['Simpl', 'simpl']","['SimplifyCFG', 'simple']"
Usability,"//===-- VEInstrBuilder.h - Aides for building VE insts ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes functions that may be used with BuildMI from the; // MachineInstrBuilder.h file to simplify generating frame and constant pool; // references.; //; // For reference, the order of operands for memory references is:; // (Operand), Dest Reg, Base Reg, and either Reg Index or Immediate; // Displacement.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEInstrBuilder.h:484,simpl,simplify,484,interpreter/llvm-project/llvm/lib/Target/VE/VEInstrBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEInstrBuilder.h,1,['simpl'],['simplify']
Usability,"//===-- lib/CodeGen/GlobalISel/CallLowering.cpp - Call lowering -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements some simple delegations needed for call lowering.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp:422,simpl,simple,422,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,1,['simpl'],['simple']
Usability,"//===-- llvm-debuginfod-find.cpp - Simple CLI for libdebuginfod-client ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the llvm-debuginfod-find tool. This tool; /// queries the debuginfod servers in the DEBUGINFOD_URLS environment; /// variable (delimited by space ("" "")) for the executable,; /// debuginfo, or specified source file of the binary matching the; /// given build-id.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfod-find/llvm-debuginfod-find.cpp:35,Simpl,Simple,35,interpreter/llvm-project/llvm/tools/llvm-debuginfod-find/llvm-debuginfod-find.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfod-find/llvm-debuginfod-find.cpp,1,['Simpl'],['Simple']
Usability,"//===-- llvm-mc.cpp - Machine Code Hacking Driver ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility is a simple driver that allows command line hacking on machine; // code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp:401,simpl,simple,401,interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp,1,['simpl'],['simple']
Usability,"//===-- llvm-mca.cpp - Machine Code Analyzer -------------------*- C++ -* -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility is a simple driver that allows static performance analysis on; // machine code similarly to how IACA (Intel Architecture Code Analyzer) works.; //; // llvm-mca [options] <file-name>; // -march <type>; // -mcpu <cpu>; // -o <file>; //; // The target defaults to the host target.; // The cpu defaults to the 'native' host cpu.; // The output defaults to standard output.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:401,simpl,simple,401,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,1,['simpl'],['simple']
Usability,"//===-- llvm-ml.cpp - masm-compatible assembler -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple driver around MasmParser; based on llvm-mc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp:385,simpl,simple,385,interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp,1,['simpl'],['simple']
Usability,"//===-- llvm-symbolizer.cpp - Simple addr2line-like symbolizer ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility works much like ""addr2line"". It is able of transforming; // tuples (module name, module offset) to code locations (function name,; // file, line number, column number). It is targeted for compiler-rt tools; // (especially AddressSanitizer and ThreadSanitizer) that can use it; // to symbolize stack traces in their error reports.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:30,Simpl,Simple,30,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,1,['Simpl'],['Simple']
Usability,"//===-- llvm/ADT/APSInt.cpp - Arbitrary Precision Signed Int ---*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the APSInt class, which is a simple class that; // represents an arbitrary sized integer that knows its signedness.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APSInt.cpp:433,simpl,simple,433,interpreter/llvm-project/llvm/lib/Support/APSInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APSInt.cpp,1,['simpl'],['simple']
Usability,"//===-- llvm/ADT/APSInt.h - Arbitrary Precision Signed Int -----*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the APSInt class, which is a simple class that; /// represents an arbitrary sized integer that knows its signedness.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:446,simpl,simple,446,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,1,['simpl'],['simple']
Usability,"//===-- llvm/ADT/Statistic.h - Easy way to expose stats ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the 'Statistic' class, which is designed to be an easy way; /// to expose various metrics from passes. These statistics are printed at the; /// end of a run (from llvm_shutdown), when the -stats command line option is; /// passed on the command line.; ///; /// This is useful for reporting information like the number of instructions; /// simplified, optimized or removed by various transformations, like this:; ///; /// static Statistic NumInstsKilled(""gcse"", ""Number of instructions killed"");; ///; /// Later, in the code: ++NumInstsKilled;; ///; /// NOTE: Statistics *must* be declared as global variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h:753,simpl,simplified,753,interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Statistic.h,1,['simpl'],['simplified']
Usability,"//===-- llvm/MC/MCInstBuilder.h - Simplify creation of MCInsts --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the MCInstBuilder class for convenient creation of; // MCInsts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstBuilder.h:34,Simpl,Simplify,34,interpreter/llvm-project/llvm/include/llvm/MC/MCInstBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstBuilder.h,1,['Simpl'],['Simplify']
Usability,"//===-- llvm/Support/DOTGraphTraits.h - Customize .dot output ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a template class that can be used to customize dot output; // graphs generated by the GraphWriter.h file. The default implementation of; // this file will produce a simple, but not very polished graph. By; // specializing this template, lots of customization opportunities are possible.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h:566,simpl,simple,566,interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h,1,['simpl'],['simple']
Usability,"//===-- llvm/Support/DataTypes.h - Define fixed size types ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Due to layering constraints (Support depends on llvm-c) this is a thin; // wrapper around the implementation that lives in llvm-c, though most clients; // can/should think of this as being provided by Support for simplicity (not; // many clients are aware of their dependency on llvm-c).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataTypes.h:596,simpl,simplicity,596,interpreter/llvm-project/llvm/include/llvm/Support/DataTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataTypes.h,1,['simpl'],['simplicity']
Usability,"//===-- llvm/Transforms/Utils/SimplifyIndVar.h - Indvar Utils ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines in interface for induction variable simplification. It does; // not define any actual pass or policy, but provides a single function to; // simplify a loop's induction variables based on ScalarEvolution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:30,Simpl,SimplifyIndVar,30,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,3,"['Simpl', 'simpl']","['SimplifyIndVar', 'simplification', 'simplify']"
Usability,"//===--- APSIntType.cpp - Simple record of the type of APSInts ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/APSIntType.cpp:26,Simpl,Simple,26,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/APSIntType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/APSIntType.cpp,1,['Simpl'],['Simple']
Usability,"//===--- Allocator.cpp - Simple memory allocation abstraction -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the BumpPtrAllocator interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Allocator.cpp:25,Simpl,Simple,25,interpreter/llvm-project/llvm/lib/Support/Allocator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Allocator.cpp,1,['Simpl'],['Simple']
Usability,"//===--- COFFModuleDefinition.cpp - Simple DEF parser ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Windows-specific.; // A parser for the module-definition file (.def file).; //; // The format of module-definition files are described in this document:; // https://msdn.microsoft.com/en-us/library/28d6s79h.aspx; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFModuleDefinition.cpp:36,Simpl,Simple,36,interpreter/llvm-project/llvm/lib/Object/COFFModuleDefinition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFModuleDefinition.cpp,1,['Simpl'],['Simple']
Usability,"//===--- CRC.cpp - Cyclic Redundancy Check implementation -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains implementations of CRC functions.; //; // The implementation technique is the one mentioned in:; // D. V. Sarwate. 1988. Computation of cyclic redundancy checks via table; // look-up. Commun. ACM 31, 8 (August 1988); //; // See also Ross N. Williams ""A Painless Guide to CRC Error Detection; // Algorithms"" (https://zlib.net/crc_v3.txt) or Hacker's Delight (2nd ed.); // Chapter 14 (Figure 14-7 in particular) for how the algorithm works.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:664,Guid,Guide,664,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp,1,['Guid'],['Guide']
Usability,"//===--- CodeGenPGO.cpp - PGO Instrumentation for LLVM CodeGen --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Instrumentation-based profile-guided optimization; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:413,guid,guided,413,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['guid'],['guided']
Usability,"//===--- CodeGenPGO.h - PGO Instrumentation for LLVM CodeGen ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Instrumentation-based profile-guided optimization; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h:413,guid,guided,413,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,1,['guid'],['guided']
Usability,"//===--- CommentBriefParser.h - Dumb comment parser -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a very simple Doxygen comment parser.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CommentBriefParser.h:408,simpl,simple,408,interpreter/llvm-project/clang/include/clang/AST/CommentBriefParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CommentBriefParser.h,1,['simpl'],['simple']
Usability,"//===--- PrintPreprocessedOutput.cpp - Implement the -E mode --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This code simply runs the preprocessor on the input file and prints out the; // result. This is the traditional behavior of the -E option.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp:393,simpl,simply,393,interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/PrintPreprocessedOutput.cpp,1,['simpl'],['simply']
Usability,"//===--- PthreadLockChecker.cpp - Check for locking problems ---*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines:; // * PthreadLockChecker, a simple lock -> unlock checker.; // Which also checks for XNU locks, which behave similarly enough to share; // code.; // * FuchsiaLocksChecker, which is also rather similar.; // * C11LockChecker which also closely follows Pthread semantics.; //; // TODO: Path notes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PthreadLockChecker.cpp:430,simpl,simple,430,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PthreadLockChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PthreadLockChecker.cpp,1,['simpl'],['simple']
Usability,"//===--- RAIIObjectsForParser.h - RAII helpers for the parser ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines and implements the some simple RAII objects that are used; // by the parser to manage bits in recursion.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:425,simpl,simple,425,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,1,['simpl'],['simple']
Usability,"//===--- RDFDeadCode.h ----------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // RDF-based generic dead code elimination.; //; // The main interface of this class are functions ""collect"" and ""erase"".; // This allows custom processing of the function being optimized by a; // particular consumer. The simplest way to use this class would be to; // instantiate an object, and then simply call ""collect"" and ""erase"",; // passing the result of ""getDeadInstrs()"" to it.; // A more complex scenario would be to call ""collect"" first, then visit; // all post-increment instructions to see if the address update is dead; // or not, and if it is, convert the instruction to a non-updating form.; // After that ""erase"" can be called with the set of nodes including both,; // dead defs from the updating instructions and the nodes corresponding; // to the dead instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/RDFDeadCode.h:602,simpl,simplest,602,interpreter/llvm-project/llvm/lib/Target/Hexagon/RDFDeadCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/RDFDeadCode.h,2,['simpl'],"['simplest', 'simply']"
Usability,"//===--- SemaPseudoObject.cpp - Semantic Analysis for Pseudo-Objects ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements semantic analysis for expressions involving; // pseudo-object references. Pseudo-objects are conceptual objects; // whose storage is entirely abstract and all accesses to which are; // translated through some sort of abstraction barrier.; //; // For example, Objective-C objects can have ""properties"", either; // declared or undeclared. A property may be accessed by writing; // expr.prop; // where 'expr' is an r-value of Objective-C pointer type and 'prop'; // is the name of the property. If this expression is used in a context; // needing an r-value, it is treated as if it were a message-send; // of the associated 'getter' selector, typically:; // [expr prop]; // If it is used as the LHS of a simple assignment, it is treated; // as a message-send of the associated 'setter' selector, typically:; // [expr setProp: RHS]; // If it is used as the LHS of a compound assignment, or the operand; // of a unary increment or decrement, both are required; for example,; // 'expr.prop *= 100' would be translated to:; // [expr setProp: [expr prop] * 100]; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp:1105,simpl,simple,1105,interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaPseudoObject.cpp,1,['simpl'],['simple']
Usability,"//===--- SimpleExecutorDylibManager.cpp - Executor-side dylib management --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.cpp:9,Simpl,SimpleExecutorDylibManager,9,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.cpp,1,['Simpl'],['SimpleExecutorDylibManager']
Usability,"//===--- SimpleRemoteEPCUtils.h - Utils for Simple Remote EPC ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Message definitions and other utilities for SimpleRemoteEPC and; // SimpleRemoteEPCServer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h:9,Simpl,SimpleRemoteEPCUtils,9,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.h,4,['Simpl'],"['Simple', 'SimpleRemoteEPC', 'SimpleRemoteEPCServer', 'SimpleRemoteEPCUtils']"
Usability,"//===--- SourceCode.cpp - Source code manipulation routines -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides functions that simplify extraction of source code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCode.cpp:417,simpl,simplify,417,interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/SourceCode.cpp,1,['simpl'],['simplify']
Usability,"//===--- SourceCode.h - Source code manipulation routines -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides functions that simplify extraction of source code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h:417,simpl,simplify,417,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,1,['simpl'],['simplify']
Usability,"//===--- USRLocFinder.cpp - Clang refactoring library ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Methods for finding all instances of a USR. Our strategy is very; /// simple; we just compare the USR at every relevant AST node with the one; /// provided.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRLocFinder.cpp:466,simpl,simple,466,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRLocFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Rename/USRLocFinder.cpp,1,['simpl'],['simple']
Usability,"//===--- Warnings.cpp - C-Language Front-end ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Command line warning options handler.; //; //===----------------------------------------------------------------------===//; //; // This file is responsible for handling all warning options. This includes; // a number of -Wfoo options and their variants, which are driven by TableGen-; // generated data, and the special cases -pedantic, -pedantic-errors, -w,; // -Werror and -Wfatal-errors.; //; // Each warning option controls any number of actual warnings.; // Given a warning option 'foo', the following are valid:; // -Wfoo, -Wno-foo, -Werror=foo, -Wfatal-errors=foo; //; // Remark options are also handled here, analogously, except that they are much; // simpler because a remark can't be promoted to an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:1044,simpl,simpler,1044,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,1,['simpl'],['simpler']
Usability,"//===---- BDCE.cpp - Bit-tracking dead code elimination -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Bit-Tracking Dead Code Elimination pass. Some; // instructions (shifts, some ands, ors, etc.) kill some of their input bits.; // We track these dead bits and remove instructions that compute only these; // dead bits. We also simplify sext that generates unused extension bits,; // converting it to a zext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp:633,simpl,simplify,633,interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp,1,['simpl'],['simplify']
Usability,"//===---- CoroEarly.h - Lower early coroutine intrinsics --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // This file provides the interface to the early coroutine intrinsic lowering; // pass. This pass lowers coroutine intrinsics that hide the details of the; // exact calling convention for coroutine resume and destroy functions and; // details of the structure of the coroutine frame.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h:588,resume,resume,588,interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroEarly.h,1,['resume'],['resume']
Usability,"//===---- CoroElide.h - Coroutine frame allocation elision ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // \file; // This file declares a pass that replaces dynamic allocation of coroutine; // frames with alloca and replaces calls to llvm.coro.resume and; // llvm.coro.destroy with direct calls to coroutine sub-functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroElide.h:520,resume,resume,520,interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroElide.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Coroutines/CoroElide.h,1,['resume'],['resume']
Usability,"//===---- MatchSwitch.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the `ASTMatchSwitch` abstraction for building a ""switch""; // statement, where each case of the switch is defined by an AST matcher. The; // cases are considered in order, like pattern matching in functional; // languages.; //; // Currently, the design is catered towards simplifying the implementation of; // `DataflowAnalysis` transfer functions. Based on experience here, this; // library may be generalized and moved to ASTMatchers.; //; //===----------------------------------------------------------------------===//; //; // FIXME: Rename to ASTMatchSwitch.h",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MatchSwitch.h:672,simpl,simplifying,672,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MatchSwitch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MatchSwitch.h,1,['simpl'],['simplifying']
Usability,"//===---- SimplePackedSerialization.h - simple serialization ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // The behavior of the utilities in this header must be synchronized with the; // behavior of the utilities in; // compiler-rt/lib/orc/simple_packed_serialization.h.; //; // The Simple Packed Serialization (SPS) utilities are used to generate; // argument and return buffers for wrapper functions using the following; // serialization scheme:; //; // Primitives (signed types should be two's complement):; // bool, char, int8_t, uint8_t -- 8-bit (0=false, 1=true); // int16_t, uint16_t -- 16-bit little endian; // int32_t, uint32_t -- 32-bit little endian; // int64_t, int64_t -- 64-bit little endian; //; // Sequence<T>:; // Serialized as the sequence length (as a uint64_t) followed by the; // serialization of each of the elements without padding.; //; // Tuple<T1, ..., TN>:; // Serialized as each of the element types from T1 to TN without padding.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h:10,Simpl,SimplePackedSerialization,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Shared/SimplePackedSerialization.h,3,"['Simpl', 'simpl']","['Simple', 'SimplePackedSerialization', 'simple']"
Usability,"//===---- SimpleRemoteEPC.h - Simple remote executor control ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple remote executor process control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h:10,Simpl,SimpleRemoteEPC,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SimpleRemoteEPC.h,3,['Simpl'],"['Simple', 'SimpleRemoteEPC']"
Usability,"//===---- SimpleRemoteEPCServer.h - EPC over abstract channel ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // EPC over simple abstract channel.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h:10,Simpl,SimpleRemoteEPCServer,10,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.h,2,"['Simpl', 'simpl']","['SimpleRemoteEPCServer', 'simple']"
Usability,"//===---- llvm/MDBuilder.cpp - Builder for LLVM metadata ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MDBuilder class, which is used as a convenient way to; // create LLVM metadata with a consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/MDBuilder.cpp:506,simpl,simplified,506,interpreter/llvm-project/llvm/lib/IR/MDBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/MDBuilder.cpp,1,['simpl'],['simplified']
Usability,"//===---- llvm/MDBuilder.h - Builder for LLVM metadata ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MDBuilder class, which is used as a convenient way to; // create LLVM metadata with a consistent and simplified interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h:506,simpl,simplified,506,interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/MDBuilder.h,1,['simpl'],['simplified']
Usability,"//===----- BPFMISimplifyPatchable.cpp - MI Simplify Patchable Insts -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass targets a subset of instructions like below; // ld_imm64 r1, @global; // ldd r2, r1, 0; // add r3, struct_base_reg, r2; //; // Here @global should represent an AMA (abstruct member access).; // Such an access is subject to bpf load time patching. After this pass, the; // code becomes; // ld_imm64 r1, @global; // add r3, struct_base_reg, r1; //; // Eventually, at BTF output stage, a relocation record will be generated; // for ld_imm64 which should be replaced later by bpf loader:; // r1 = <calculated field_info>; // add r3, struct_base_reg, r1; //; // This pass also removes the intermediate load generated in IR pass for; // __builtin_btf_type_id() intrinsic.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp:43,Simpl,Simplify,43,interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFMISimplifyPatchable.cpp,1,['Simpl'],['Simplify']
Usability,"//===------ SimpleRemoteEPCUtils.cpp - Utils for Simple Remote EPC --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Message definitions and other utilities for SimpleRemoteEPC and; // SimpleRemoteEPCServer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.cpp:12,Simpl,SimpleRemoteEPCUtils,12,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Shared/SimpleRemoteEPCUtils.cpp,4,['Simpl'],"['Simple', 'SimpleRemoteEPC', 'SimpleRemoteEPCServer', 'SimpleRemoteEPCUtils']"
Usability,"//===------ SimplifyLibCalls.cpp - Library calls simplifier ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the library calls simplifier. It does not implement; // any pass, but can't be used by other passes to do simplifications.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:12,Simpl,SimplifyLibCalls,12,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,4,"['Simpl', 'simpl']","['SimplifyLibCalls', 'simplifications', 'simplifier']"
Usability,"//===------- SimpleEPCServer.cpp - EPC over simple abstract channel -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.cpp:13,Simpl,SimpleEPCServer,13,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/TargetProcess/SimpleRemoteEPCServer.cpp,2,"['Simpl', 'simpl']","['SimpleEPCServer', 'simple']"
Usability,"//===------- SimpleRemoteEPC.cpp -- Simple remote executor control --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/SimpleRemoteEPC.cpp:13,Simpl,SimpleRemoteEPC,13,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/SimpleRemoteEPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/SimpleRemoteEPC.cpp,2,['Simpl'],"['Simple', 'SimpleRemoteEPC']"
Usability,"//===------- X86ExpandPseudo.cpp - Expand pseudo instructions -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that expands pseudo instructions into target; // instructions to allow proper scheduling, if-conversion, other late; // optimizations, or simply the encoding of the instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp:547,simpl,simply,547,interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp,1,['simpl'],['simply']
Usability,"//===--------- Definition of the SanitizerCoverage class --------*- C++ -*-===//; //; // The LLVM Compiler Infrastructure; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // SanitizerCoverage is a simple code coverage implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h:447,simpl,simple,447,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/SanitizerCoverage.h,1,['simpl'],['simple']
Usability,"//===--------- LoopSimplifyCFG.cpp - Loop CFG Simplification Pass ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Loop SimplifyCFG Pass. This pass is responsible for; // basic loop CFG cleanup, primarily to assist other loop passes. If you; // encounter a noncanonical CFG construct that causes another loop pass to; // perform suboptimally, this is the place to fix it up.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp:46,Simpl,Simplification,46,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp,2,['Simpl'],"['Simplification', 'SimplifyCFG']"
Usability,"//===----------- ChildTarget.cpp - Out-of-proc executor for lli -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple out-of-process executor for lli.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/ChildTarget/ChildTarget.cpp:383,Simpl,Simple,383,interpreter/llvm-project/llvm/tools/lli/ChildTarget/ChildTarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/ChildTarget/ChildTarget.cpp,1,['Simpl'],['Simple']
Usability,"//===--------------- SimpleExecutorDylibManager.h ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple dynamic library management class. Allows dynamic libraries to be; // loaded and searched.; //; // FIXME: The functionality in this file should be moved to the ORC runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h:21,Simpl,SimpleExecutorDylibManager,21,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorDylibManager.h,2,"['Simpl', 'simpl']","['SimpleExecutorDylibManager', 'simple']"
Usability,"//===---------------- SimpleExecutorMemoryManager.h -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple allocator class suitable for basic remote-JIT use.; //; // FIXME: The functionality in this file should be moved to the ORC runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h:22,Simpl,SimpleExecutorMemoryManager,22,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/TargetProcess/SimpleExecutorMemoryManager.h,2,"['Simpl', 'simpl']","['SimpleExecutorMemoryManager', 'simple']"
Usability,"//===--------------------- CodeEmitter.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A utility class used to compute instruction encodings. It buffers encodings; /// for later usage. It exposes a simple API to compute and get the encodings as; /// StringRef.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h:507,simpl,simple,507,interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/CodeEmitter.h,1,['simpl'],['simple']
Usability,"//===--------------------- SIOptimizeVGPRLiveRange.cpp -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This pass tries to remove unnecessary VGPR live ranges in divergent if-else; /// structures and waterfall loops.; ///; /// When we do structurization, we usually transform an if-else into two; /// successive if-then (with a flow block to do predicate inversion). Consider a; /// simple case after structurization: A divergent value %a was defined before; /// if-else and used in both THEN (use in THEN is optional) and ELSE part:; /// bb.if:; /// %a = ...; /// ...; /// bb.then:; /// ... = op %a; /// ... // %a can be dead here; /// bb.flow:; /// ...; /// bb.else:; /// ... = %a; /// ...; /// bb.endif; ///; /// As register allocator has no idea of the thread-control-flow, it will just; /// assume %a would be alive in the whole range of bb.then because of a later; /// use in bb.else. On AMDGPU architecture, the VGPR is accessed with respect; /// to exec mask. For this if-else case, the lanes active in bb.then will be; /// inactive in bb.else, and vice-versa. So we are safe to say that %a was dead; /// after the last use in bb.then until the end of the block. The reason is; /// the instructions in bb.then will only overwrite lanes that will never be; /// accessed in bb.else.; ///; /// This pass aims to tell register allocator that %a is in-fact dead,; /// through inserting a phi-node in bb.flow saying that %a is undef when coming; /// from bb.then, and then replace the uses in the bb.else with the result of; /// newly inserted phi.; ///; /// Two key conditions must be met to ensure correctness:; /// 1.) The def-point should be in the same loop-level as if-else-endif to make; /// sure the s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp:673,simpl,simple,673,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIOptimizeVGPRLiveRange.cpp,1,['simpl'],['simple']
Usability,"//===------------------------- LSUnit.h --------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A Load/Store unit class that models load/store queues and that implements; /// a simple weak memory consistency model.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h:477,simpl,simple,477,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/LSUnit.h,1,['simpl'],['simple']
Usability,"//===------------------------- __complex_cmath.h --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // std::complex header copied from the libcxx source and simplified for use in; // OpenMP target offload regions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/openmp_wrappers/complex_cmath.h:437,simpl,simplified,437,interpreter/llvm-project/clang/lib/Headers/openmp_wrappers/complex_cmath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/openmp_wrappers/complex_cmath.h,1,['simpl'],['simplified']
Usability,//===----------------------------------------------------------------------===//; // APIs for simple analysis of the loop. See header notes.; /// getExitingBlocks - Return all blocks inside the loop that have successors; /// outside of the loop. These are the blocks _inside of the current loop_; /// which branch out. The returned list is always unique.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h:94,simpl,simple,94,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfoImpl.h,1,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; // Cast traits; //===----------------------------------------------------------------------===//; /// All of these cast traits are meant to be implementations for useful casts; /// that users may want to use that are outside the standard behavior. An; /// example of how to use a special cast called `CastTrait` is:; ///; /// template<> struct CastInfo<foo, bar> : public CastTrait<foo, bar> {};; ///; /// Essentially, if your use case falls directly into one of the use cases; /// supported by a given cast trait, simply inherit your special CastInfo; /// directly from one of these to avoid having to reimplement the boilerplate; /// `isPossible/castFailed/doCast/doCastIfPossible`. A cast trait can also; /// provide a subset of those functions.; /// This cast trait just provides castFailed for the specified `To` type to make; /// CastInfo specializations more declarative. In order to use this, the target; /// result type must be `To` and `To` must be constructible from `nullptr`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h:597,simpl,simply,597,interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,1,['simpl'],['simply']
Usability,//===----------------------------------------------------------------------===//; // CastInst Class; //===----------------------------------------------------------------------===//; /// This is the base class for all instructions that perform data; /// casts. It is simply provided so that instruction category testing; /// can be performed with code like:; ///; /// if (isa<CastInst>(Instr)) { ... }; /// Base class of casting instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:267,simpl,simply,267,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['simpl'],['simply']
Usability,"//===----------------------------------------------------------------------===//; // ConstantFPSDNode Class; //===----------------------------------------------------------------------===//; /// isExactlyValue - We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:310,clear,clearly,310,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['clear'],['clearly']
Usability,"//===----------------------------------------------------------------------===//; // Diagnose initialization failures; //===----------------------------------------------------------------------===//; /// Emit notes associated with an initialization that failed due to a; /// ""simple"" conversion failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:277,simpl,simple,277,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; // GetElementPtrInst Class; //===----------------------------------------------------------------------===//; // checkGEPType - Simple wrapper function to give a better assertion failure; // message on bad indexes for a gep instruction.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:210,Simpl,Simple,210,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['Simpl'],['Simple']
Usability,//===----------------------------------------------------------------------===//; // IndVarSimplify driver. Manage several subpasses of IV simplification.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:139,simpl,simplification,139,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['simpl'],['simplification']
Usability,//===----------------------------------------------------------------------===//; // Live IV Reduction - Minimize IVs live across the loop.; //===----------------------------------------------------------------------===//; //===----------------------------------------------------------------------===//; // Simplification of IV users based on SCEV evaluation.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:308,Simpl,Simplification,308,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['Simpl'],['Simplification']
Usability,"//===----------------------------------------------------------------------===//; // Optimization Methods; //===----------------------------------------------------------------------===//; /// If the specified instruction has a constant integer operand and there are; /// bits set in that constant that are not demanded, then clear those bits and; /// return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:326,clear,clear,326,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['clear'],['clear']
Usability,"//===----------------------------------------------------------------------===//; // Output Stream Adaptors; //===----------------------------------------------------------------------===//; /// A raw_ostream that writes to an std::string. This is a simple adaptor; /// class. This class does not encounter output errors.; /// raw_string_ostream operates without a buffer, delegating all memory; /// management to the std::string. Thus the std::string is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:250,simpl,simple,250,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; // Parser; //===----------------------------------------------------------------------===//; /// CurTok/getNextToken - Provide a simple token buffer. CurTok is the current; /// token the parser is looking at. getNextToken reads another token from the; /// lexer and updates CurTok with its results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp:211,simpl,simple,211,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter4/toy.cpp,7,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; // Preprocessor Macro Directive Handling.; //===----------------------------------------------------------------------===//; /// ReadMacroParameterList - The ( starting a parameter list of a macro; /// definition has just been read. Lex the rest of the parameters and the; /// closing ), updating MI with what we learn. Return true if an error occurs; /// parsing the param list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:395,learn,learn,395,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['learn'],['learn']
Usability,//===----------------------------------------------------------------------===//; // ResumeInst Class; //===----------------------------------------------------------------------===//; //===---------------------------------------------------------------------------; /// Resume the propagation of an exception.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:85,Resume,ResumeInst,85,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,2,['Resume'],"['Resume', 'ResumeInst']"
Usability,//===----------------------------------------------------------------------===//; // ResumeInst Implementation; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:85,Resume,ResumeInst,85,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,1,['Resume'],['ResumeInst']
Usability,"//===----------------------------------------------------------------------===//; // ScheduleDAGLinearize - No scheduling scheduler, it simply linearize the; // DAG in topological order.; // IMPORTANT: this may not work for targets with phyreg dependency.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:136,simpl,simply,136,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,1,['simpl'],['simply']
Usability,"//===----------------------------------------------------------------------===//; // Simple SCEV method implementations; //===----------------------------------------------------------------------===//; /// Compute BC(It, K). The result has width W. Assume, K > 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:85,Simpl,Simple,85,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['Simpl'],['Simple']
Usability,//===----------------------------------------------------------------------===//; // SimpleValue; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:85,Simpl,SimpleValue,85,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,1,['Simpl'],['SimpleValue']
Usability,"//===----------------------------------------------------------------------===//; // TypeSpec; //===----------------------------------------------------------------------===//; /// A TypeSpec is just a simple wrapper around a string, but gets its own type; /// for strong typing purposes.; ///; /// A TypeSpec can be used to create a type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:202,simpl,simple,202,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; // Utility functions; //===----------------------------------------------------------------------===//; // Utility function to emit a call to __arm_tpidr2_save and clear TPIDR2_EL0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/SMEABIPass.cpp:246,clear,clear,246,interpreter/llvm-project/llvm/lib/Target/AArch64/SMEABIPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/SMEABIPass.cpp,1,['clear'],['clear']
Usability,//===----------------------------------------------------------------------===//; // Variable; //===----------------------------------------------------------------------===//; /// A variable is a simple class that just has a type and a name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:197,simpl,simple,197,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; // WebAssembly ABI Implementation; //; // This is a very simple ABI that relies a lot on DefaultABIInfo.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/WebAssembly.cpp:139,simpl,simple,139,interpreter/llvm-project/clang/lib/CodeGen/Targets/WebAssembly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/WebAssembly.cpp,1,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; // banerjeeMIVtest -; // Use Banerjee's Inequalities to test an MIV subscript pair.; // (Wolfe, in the race-car book, calls this the Extreme Value Test.); // Generally follows the discussion in Section 2.5.2 of; //; // Optimizing Supercompilers for Supercomputers; // Michael Wolfe; //; // The inequalities given on page 25 are simplified in that loops are; // normalized so that the lower bound is always 0 and the stride is always 1.; // For example, Wolfe gives; //; // LB^<_k = (A^-_k - B_k)^- (U_k - L_k - N_k) + (A_k - B_k)L_k - B_k N_k; //; // where A_k is the coefficient of the kth index in the source subscript,; // B_k is the coefficient of the kth index in the destination subscript,; // U_k is the upper bound of the kth index, L_k is the lower bound of the Kth; // index, and N_k is the stride of the kth index. Since all loops are normalized; // by the SCEV package, N_k = 1 and L_k = 0, allowing us to simplify the; // equation to; //; // LB^<_k = (A^-_k - B_k)^- (U_k - 0 - 1) + (A_k - B_k)0 - B_k 1; // = (A^-_k - B_k)^- (U_k - 1) - B_k; //; // Similar simplifications are possible for the other equations.; //; // When we can't determine the number of iterations for a loop,; // we use NULL as an indicator for the worst case, infinity.; // When computing the upper bound, NULL denotes +inf;; // for the lower bound, NULL denotes -inf.; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:410,simpl,simplified,410,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,3,['simpl'],"['simplifications', 'simplified', 'simplify']"
Usability,//===----------------------------------------------------------------------===//; // cast_convert_val; //===----------------------------------------------------------------------===//; // Ensure the non-simple values are converted using the simplify_type template; // that may be specialized by smart pointers...; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h:203,simpl,simple,203,interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,1,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; // getSplitIteration -; // Rather than spend rarely-used space recording the splitting iteration; // during the Weak-Crossing SIV test, we re-compute it on demand.; // The re-computation is basically a repeat of the entire dependence test,; // though simplified since we know that the dependence exists.; // It's tedious, since we must go through all propagations, etc.; //; // Care is required to keep this code up to date with respect to the routine; // above, depends().; //; // Generally, the dependence analyzer will be used to build; // a dependence graph for a function (basically a map from instructions; // to dependences). Looking for cycles in the graph shows us loops; // that cannot be trivially vectorized/parallelized.; //; // We can try to improve the situation by examining all the dependences; // that make up the cycle, looking for ones we can break.; // Sometimes, peeling the first or last iteration of a loop will break; // dependences, and we've got flags for those possibilities.; // Sometimes, splitting a loop at some other iteration will do the trick,; // and we've got a flag for that case. Rather than waste the space to; // record the exact iteration (since we rarely know), we provide; // a method that calculates the iteration. It's a drag that it must work; // from scratch, but wonderful in that it's possible.; //; // Here's an example:; //; // for (i = 0; i < 10; i++); // A[i] = ...; // ... = A[11 - i]; //; // There's a loop-carried flow dependence from the store to the load,; // found by the weak-crossing SIV test. The dependence will have a flag,; // indicating that the dependence can be broken by splitting the loop.; // Calling getSplitIteration will return 5.; // Splitting the loop breaks the dependence, like so:; //; // for (i = 0; i <= 5; i++); // A[i] = ...; // ... = A[11 - i]; // for (i = 6; i < 10; i++); // A[i] = ...; // ... = A[11 - i]; //; // breaks the depende",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:333,simpl,simplified,333,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['simpl'],['simplified']
Usability,//===----------------------------------------------------------------------===//; // le32/PNaCl bitcode ABI Implementation; //; // This is a simplified version of the x86_32 ABI. Arguments and return values; // are always passed on the stack.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PNaCl.cpp:141,simpl,simplified,141,interpreter/llvm-project/clang/lib/CodeGen/Targets/PNaCl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PNaCl.cpp,1,['simpl'],['simplified']
Usability,"//===----------------------------------------------------------------------===//; //--- IntervalMapImpl::BranchNode ---//; //===----------------------------------------------------------------------===//; //; // A branch node stores references to 1--N subtrees all of the same height.; //; // The key array in a branch node holds the rightmost stop key of each subtree.; // It is redundant to store the last stop key since it can be found in the; // parent node, but doing so makes tree balancing a lot simpler.; //; // It is unusual for a branch node to only have one subtree, but it can happen; // in the root node if it is smaller than the normal nodes.; //; // When all of the leaf nodes from all the subtrees are concatenated, they must; // satisfy the same constraints as a single leaf node. They must be sorted,; // sane, and fully coalesced.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:503,simpl,simpler,503,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['simpl'],['simpler']
Usability,"//===----------------------------------------------------------------------===//; /// A single entry single exit Region.; ///; /// A Region is a connected subgraph of a control flow graph that has exactly; /// two connections to the remaining graph. It can be used to analyze or; /// optimize parts of the control flow graph.; ///; /// A <em> simple Region </em> is connected to the remaining graph by just two; /// edges. One edge entering the Region and another one leaving the Region.; ///; /// An <em> extended Region </em> (or just Region) is a subgraph that can be; /// transform into a simple Region. The transformation is done by adding; /// BasicBlocks that merge several entry or exit edges so that after the merge; /// just one entry and one exit edge exists.; ///; /// The \e Entry of a Region is the first BasicBlock that is passed after; /// entering the Region. It is an element of the Region. The entry BasicBlock; /// dominates all BasicBlocks in the Region.; ///; /// The \e Exit of a Region is the first BasicBlock that is passed after; /// leaving the Region. It is not an element of the Region. The exit BasicBlock,; /// postdominates all BasicBlocks in the Region.; ///; /// A <em> canonical Region </em> cannot be constructed by combining smaller; /// Regions.; ///; /// Region A is the \e parent of Region B, if B is completely contained in A.; ///; /// Two canonical Regions either do not intersect at all or one is; /// the parent of the other.; ///; /// The <em> Program Structure Tree</em> is a graph (V, E) where V is the set of; /// Regions in the control flow graph and E is the \e parent relation of these; /// Regions.; ///; /// Example:; ///; /// \verbatim; /// A simple control flow graph, that contains two regions.; ///; /// 1; /// / |; /// 2 |; /// / \ 3; /// 4 5 |; /// | | |; /// 6 7 8; /// \ | /; /// \ |/ Region A: 1 -> 9 {1,2,3,4,5,6,7,8}; /// 9 Region B: 2 -> 9 {2,4,5,6,7}; /// \endverbatim; ///; /// You can obtain more examples by either calling; ///; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:343,simpl,simple,343,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,2,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; /// A vector constant whose element type is a simple 1/2/4/8-byte integer or; /// float/double, and whose elements are just simple data values; /// (i.e. ConstantInt/ConstantFP). This Constant node has no operands because it; /// stores all of the elements of the constant as densely packed data, instead; /// of as Value*'s.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:128,simpl,simple,128,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,2,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; /// An array constant whose element type is a simple 1/2/4/8-byte integer or; /// float/double, and whose elements are just simple data values; /// (i.e. ConstantInt/ConstantFP). This Constant node has no operands because it; /// stores all of the elements of the constant as densely packed data, instead; /// of as Value*'s.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:128,simpl,simple,128,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,2,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; /// AnalysisResolver - Simple interface used by Pass objects to pull all; /// analysis information out of pass manager that is responsible to manage; /// the pass.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h:105,Simpl,Simple,105,interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassAnalysisSupport.h,1,['Simpl'],['Simple']
Usability,"//===----------------------------------------------------------------------===//; /// ConstantDataSequential - A vector or array constant whose element type is a; /// simple 1/2/4/8-byte integer or half/bfloat/float/double, and whose elements; /// are just simple data values (i.e. ConstantInt/ConstantFP). This Constant; /// node has no operands because it stores all of the elements of the constant; /// as densely packed data, instead of as Value*'s.; ///; /// This is the common base class of ConstantDataArray and ConstantDataVector.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:167,simpl,simple,167,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,2,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; /// Utility class that carries the DWARF compile/type unit and the debug info; /// entry in an object.; ///; /// When accessing information from a debug info entry we always need to DWARF; /// compile/type unit in order to extract the info correctly as some information; /// is relative to the compile/type unit. Prior to this class the DWARFUnit and; /// the DWARFDebugInfoEntry was passed around separately and there was the; /// possibility for error if the wrong DWARFUnit was used to extract a unit; /// relative offset. This class helps to ensure that this doesn't happen and; /// also simplifies the attribute extraction calls by not having to specify the; /// DWARFUnit for each call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:674,simpl,simplifies,674,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,1,['simpl'],['simplifies']
Usability,//===----------------------------------------------------------------------===//; /// onlySimpleRegion - Show only the simple regions in the RegionViewer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/RegionPrinter.cpp:119,simpl,simple,119,interpreter/llvm-project/llvm/lib/Analysis/RegionPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/RegionPrinter.cpp,1,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; //; // CFGSimplification - Merge basic blocks, eliminate unreachable blocks,; // simplify terminator instructions, convert switches to lookup tables, etc.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:163,simpl,simplify,163,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,1,['simpl'],['simplify']
Usability,//===----------------------------------------------------------------------===//; //; // EarlyCSE - This pass performs a simple and fast CSE pass over the dominator; // tree.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:121,simpl,simple,121,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,1,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; //; // InstructionCombining - Combine instructions to form fewer, simple; // instructions. This pass does not modify the CFG, and has a tendency to make; // instructions dead, so a subsequent DCE pass is useful.; //; // This pass combines things like:; // %Y = add int 1, %X; // %Z = add int 1, %Y; // into:; // %Z = add int 2, %X; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h:148,simpl,simple,148,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombine.h,1,['simpl'],['simple']
Usability,"//===----------------------------------------------------------------------===//; //; // IntervalPartition - This class builds and holds an ""interval partition"" for; // a function. This partition divides the control flow graph into a set of; // maximal intervals, as defined with the properties above. Intuitively, an; // interval is a (possibly nonexistent) loop with a ""tail"" of non-looping; // nodes following it.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IntervalPartition.h:302,Intuit,Intuitively,302,interpreter/llvm-project/llvm/include/llvm/Analysis/IntervalPartition.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IntervalPartition.h,1,['Intuit'],['Intuitively']
Usability,//===----------------------------------------------------------------------===//; //; // LCSSA - This pass inserts phi nodes at loop boundaries to simplify other loop; // optimizations.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:147,simpl,simplify,147,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,1,['simpl'],['simplify']
Usability,//===----------------------------------------------------------------------===//; //; // LoopRotate - This pass is a simple loop rotating pass.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:117,simpl,simple,117,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,1,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; //; // LoopUnroll - This pass is a simple loop unrolling pass.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:117,simpl,simple,117,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,1,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; //; // NaryReassociate - Simplify n-ary operations by reassociation.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:107,Simpl,Simplify,107,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,1,['Simpl'],['Simplify']
Usability,"//===----------------------------------------------------------------------===//; //; // PromoteMemoryToRegister - This pass is used to promote memory references to; // be register references. A simple example of the transformation performed by; // this pass is:; //; // FROM CODE TO CODE; // %X = alloca i32, i32 1 ret i32 42; // store i32 42, i32 *%X; // %Y = load i32* %X; // ret i32 %Y; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h:195,simpl,simple,195,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils.h,1,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; //; // TBD:; // fastLowerArguments: Handle simple cases.; // PPCMaterializeGV: Handle TLS.; // SelectCall: Handle function pointers.; // SelectCall: Handle multi-register return values.; // SelectCall: Optimize away nops for local calls.; // processCallArgs: Handle bit-converted arguments.; // finishCall: Handle multi-register return values.; // PPCComputeAddress: Handle parameter references as FrameIndex's.; // PPCEmitCmp: Handle immediate as operand 1.; // SelectCall: Handle small byval arguments.; // SelectIntrinsicCall: Implement.; // SelectSelect: Implement.; // Consider factoring isTypeLegal into the base class.; // Implement switches and jump tables.; //; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:125,simpl,simple,125,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,1,['simpl'],['simple']
Usability,//===----------------------------------------------------------------------===//; //; // This pass does instruction simplification on each; // instruction in a function.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h:116,simpl,simplification,116,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar.h,1,['simpl'],['simplification']
Usability,//===---------------------------------------------------------------------===//; /// AbstractInterpreter Class - Subclasses of this class are used to execute; /// LLVM bitcode in a variety of ways. This abstract interface hides this; /// complexity behind a simple interface.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h:258,simpl,simple,258,interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ToolRunner.h,1,['simpl'],['simple']
Usability,"//===--------------------------------------------------------------------===//; // APIs for simple analysis of the loop.; //; // Note that all of these methods can fail on general loops (ie, there may not; // be a preheader, etc). For best success, the loop simplification and; // induction variable canonicalization pass should be used to normalize loops; // for easy analysis. These methods assume canonical loops.; /// Return all blocks inside the loop that have successors outside of the; /// loop. These are the blocks _inside of the current loop_ which branch out.; /// The returned list is always unique.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:92,simpl,simple,92,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,2,['simpl'],"['simple', 'simplification']"
Usability,"//===--------------------------------------------------------------------===//; // Addressing Mode #2; //===--------------------------------------------------------------------===//; //; // This is used for most simple load/store instructions.; //; // addrmode2 := reg +/- reg shop imm; // addrmode2 := reg +/- imm12; //; // The first operand is always a Reg. The second operand is a reg if in; // reg/reg form, otherwise it's reg#0. The third field encodes the operation; // in bit 12, the immediate in bits 0-11, and the shift op in 13-15. The; // fourth operand 16-17 encodes the index mode.; //; // If this addressing mode is a frame index (before prolog/epilog insertion; // and code rewriting), this operand will have the form: FI#, reg0, <offs>; // with no shift amount for the frame offset.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h:212,simpl,simple,212,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMAddressingModes.h,1,['simpl'],['simple']
Usability,//===--------------------------------------------------------------------===//; // Builder configuration methods; //===--------------------------------------------------------------------===//; /// Clear the insertion point: created instructions will not be; /// inserted into a block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:198,Clear,Clear,198,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['Clear'],['Clear']
Usability,"//===--------------------------------------------------------------------===//; // Inline Asm Support hooks; //; /// This hook allows the target to expand an inline asm call to be explicit; /// llvm code if it wants to. This is useful for turning simple inline asms; /// into LLVM intrinsics, which gives the compiler more information about the; /// behavior of the code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:247,simpl,simple,247,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['simpl'],['simple']
Usability,"//===--------------------------------------------------------------------===//; // Integer Promotion Support: LegalizeIntegerTypes.cpp; //===--------------------------------------------------------------------===//; /// Given a processed operand Op which was promoted to a larger integer type,; /// this returns the promoted value. The low bits of the promoted value; /// corresponding to the original type are exactly equal to Op.; /// The extra bits contain rubbish, so the promoted value may need to be zero-; /// or sign-extended from the original type before it is usable (the helpers; /// SExtPromotedInteger and ZExtPromotedInteger can do this for you).; /// For example, if Op is an i16 and was promoted to an i32, then this method; /// returns an i32, the lower 16 bits of which coincide with Op, and the upper; /// 16 bits of which contain rubbish.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:570,usab,usable,570,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,1,['usab'],['usable']
Usability,"//===--------------------------------------------------------------------===//; // Side Effect Analysis; //===--------------------------------------------------------------------===//; /// Return true if this instruction could possibly read memory.; /// Instructions with this flag set are not necessarily simple load; /// instructions, they may load a value and modify it, for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:306,simpl,simple,306,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,2,['simpl'],['simple']
Usability,//===--------------------------------------------------------------------===//; // SimpleDDGNode implementation; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DDG.cpp:83,Simpl,SimpleDDGNode,83,interpreter/llvm-project/llvm/lib/Analysis/DDG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DDG.cpp,1,['Simpl'],['SimpleDDGNode']
Usability,"//===--------------------------------------------------------------------===//; // Type Operators; //===--------------------------------------------------------------------===//; /// Return the canonical (structural) type corresponding to the; /// specified potentially non-canonical type \p T.; ///; /// The non-canonical version of a type may have many ""decorated"" versions of; /// types. Decorators can include typedefs, 'typeof' operators, etc. The; /// returned type is guaranteed to be free of any of these, allowing two; /// canonical types to be compared for exact equality with a simple pointer; /// comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:589,simpl,simple,589,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['simpl'],['simple']
Usability,//===--------------------------------------------------------------------===//; // Value-based folders.; //; // Return an existing value or a constant if the operation can be simplified.; // Otherwise return nullptr.; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstSimplifyFolder.h:175,simpl,simplified,175,interpreter/llvm-project/llvm/include/llvm/Analysis/InstSimplifyFolder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InstSimplifyFolder.h,5,['simpl'],['simplified']
Usability,//===--------------------------------------------------------------------===//; /// A simple label difference DIE.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h:86,simpl,simple,86,interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,1,['simpl'],['simple']
Usability,//===------------------------------------------------------------------===//; // Implementation for interface from SimpleConstraintManager.; //===------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h:115,Simpl,SimpleConstraintManager,115,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h,2,['Simpl'],['SimpleConstraintManager']
Usability,"//===----------------------------------------------------===//; // Mutating operations. A tree root can be manipulated as; // long as its reference has not ""escaped"" from internal; // methods of a factory object (see below). When a tree; // pointer is externally viewable by client code, the; // internal ""mutable bit"" is cleared to mark the tree; // immutable. Note that a tree that still has its mutable; // bit set may have children (subtrees) that are themselves; // immutable.; //===----------------------------------------------------===//; /// markImmutable - Clears the mutable flag for a tree. After this happens,; /// it is an error to call setLeft(), setRight(), and setHeight().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:322,clear,cleared,322,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,2,"['Clear', 'clear']","['Clears', 'cleared']"
Usability,"//===--------------------------------------------------===//; // ""createNode"" is used to generate new tree roots that link; // to other trees. The function may also simply move links; // in an existing root if that root is still marked mutable.; // This is necessary because otherwise our balancing code; // would leak memory as it would create nodes that are; // then discarded later before the finished tree is; // returned to the caller.; //===--------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h:165,simpl,simply,165,interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ImmutableSet.h,1,['simpl'],['simply']
Usability,"//===-Caching.cpp - LLVM Local File Cache ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the localCache function, which simplifies creating,; // adding to, and querying a local file system cache. localCache takes care of; // periodically pruning older files from the cache using a CachePruningPolicy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:435,simpl,simplifies,435,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp,1,['simpl'],['simplifies']
Usability,"//A logical to toggle whether the final, global pruning step to simplify the tree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:64,simpl,simplify,64,tmva/rmva/inc/TMVA/MethodC50.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h,1,['simpl'],['simplify']
Usability,"//A simple tree with branches of floats.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TNtuple.h:4,simpl,simple,4,tree/tree/inc/TNtuple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TNtuple.h,2,['simpl'],['simple']
Usability,"//Adjustment for Quartz 2D is required:; //first, I DO not try to fit filled rectangle into outline - this; //simply DOES NOT work (with retina/non-retina display, for example.; //First - fill rectangle, then draw outline.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorSelect.cxx:110,simpl,simply,110,gui/gui/src/TGColorSelect.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGColorSelect.cxx,1,['simpl'],['simply']
Usability,"//Bertrand! Many thanks for this simple but ... smart and not so obvious (??) idea; //with a mask :) Without you I'll have two separate xpms :)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx:33,simpl,simple,33,rootx/src/rootxx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootxx.cxx,1,['simpl'],['simple']
Usability,"//Clear existing definitions, but preserve default output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMappedCategory.cxx:2,Clear,Clear,2,roofit/roofitcore/src/RooMappedCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMappedCategory.cxx,1,['Clear'],['Clear']
Usability,"//Clear mesh if it was from cache.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLTF3Painter.cxx:2,Clear,Clear,2,graf3d/gl/src/TGLTF3Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLTF3Painter.cxx,1,['Clear'],['Clear']
Usability,"//Clear old data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5DPainter.cxx:2,Clear,Clear,2,graf3d/gl/src/TGL5DPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5DPainter.cxx,1,['Clear'],['Clear']
Usability,"//Clear the XrdClient cache",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFileCacheRead.cxx:2,Clear,Clear,2,io/io/src/TFileCacheRead.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFileCacheRead.cxx,1,['Clear'],['Clear']
Usability,"//Clear the buffer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:2,Clear,Clear,2,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,1,['Clear'],['Clear']
Usability,"//Clear the selection rules up to now",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:2,Clear,Clear,2,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['Clear'],['Clear']
Usability,"//ClearHighlighted();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListTree.cxx:2,Clear,ClearHighlighted,2,gui/gui/src/TGListTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListTree.cxx,1,['Clear'],['ClearHighlighted']
Usability,"//ClearViewPort(); // time consuming!!!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListTree.cxx:2,Clear,ClearViewPort,2,gui/gui/src/TGListTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGListTree.cxx,1,['Clear'],['ClearViewPort']
Usability,"//FIXME: search for the transaction, i.e. verify that it has not already; // been unloaded, e.g. through `.undo X'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:107,undo,undo,107,interpreter/cling/lib/MetaProcessor/MetaSema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/MetaSema.cpp,1,['undo'],['undo']
Usability,"//Final overriders for TVirtualPadPainter pure virtual functions.; //1. Part, which simply delegates to TVirtualX.; //Line attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPadPainter.h:84,simpl,simply,84,graf2d/gpad/inc/TPadPainter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPadPainter.h,2,['simpl'],['simply']
Usability,"//Final overrides for TVirtualPadPainter pure virtual functions.; //1. Part, which simply catch attributes.; //Line attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h:83,simpl,simply,83,gui/webgui6/inc/TWebPadPainter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/inc/TWebPadPainter.h,1,['simpl'],['simply']
Usability,"//GL-view does not own GL-context, different GL contexts can be attached to the same view; //(though ROOT never does this). View has to know about GL-context only to notify it about; //geometry changes (calls -update method) and to clear drawable in a -dealloc method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h:232,clear,clear,232,graf2d/cocoa/inc/ROOTOpenGLView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/ROOTOpenGLView.h,1,['clear'],['clear']
Usability,"//If there are any newlines in text, we assume; //the user wanted to print multiple lines, so break the; //text up into an array. If the text is already an array,; //we assume the user knows what they are doing.; //Convert text into an array anyway to simplify; //later code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:252,simpl,simplify,252,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['simpl'],['simplify']
Usability,"//In case of default plot pad; //should not copy gl-buffer (it will be simply black); //[tp: code was commented.; //gPad->SetCopyGLDevice(kFALSE);; //tp]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLHistPainter.cxx:71,simpl,simply,71,graf3d/gl/src/TGLHistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLHistPainter.cxx,1,['simpl'],['simply']
Usability,"//It's clear, that virtual X checks a style (4000) and will render a hollow rect!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:7,clear,clear,7,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['clear'],['clear']
Usability,"//Let's make this clear:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPadPainter.h:18,clear,clear,18,graf2d/gpad/inc/TPadPainter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/inc/TPadPainter.h,3,['clear'],['clear']
Usability,//LookupFileCache.clear();,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp:18,clear,clear,18,interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,1,['clear'],['clear']
Usability,"//N.B: need to clear the count in case of previous errors !; // the clear needs also to be done after calling setEvalErrorLoggingMode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:15,clear,clear,15,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,2,['clear'],['clear']
Usability,"//ROOT_TAtomicCount; //////////////////////////////////////////////////////////////////////////; // //; // TAtomicCountPthread //; // //; // Class providing atomic operations on a long. Setting, getting, //; // incrementing and decrementing are atomic, thread safe, operations. //; // //; // This implementation uses pthread mutexes for locking. This clearly //; // is less efficient than the version using asm locking instructions //; // as in TAtomicCountGcc.h, but better than nothing. //; // //; // ATTENTION: Don't use this file directly, it is included by //; // TAtomicCount.h. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TAtomicCountPthread.h:351,clear,clearly,351,core/thread/inc/TAtomicCountPthread.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TAtomicCountPthread.h,1,['clear'],['clearly']
Usability,"//Set color index for text; // Clear workstation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:31,Clear,Clear,31,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['Clear'],['Clear']
Usability,"//Show/clear cache",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:7,clear,clear,7,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['clear'],['clear']
Usability,"//Simple Phase Space Generator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/inc/TGenPhaseSpace.h:2,Simpl,Simple,2,math/physics/inc/TGenPhaseSpace.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/inc/TGenPhaseSpace.h,1,['Simpl'],['Simple']
Usability,"//Simple name (parameter,pol0,landau, etc)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2,Simpl,Simple,2,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['Simpl'],['Simple']
Usability,"//Simple radial gradient: the same as extended with; //start == end, r1 = 0, r2 = radius.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h:2,Simpl,Simple,2,core/base/inc/TColorGradient.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TColorGradient.h,1,['Simpl'],['Simple']
Usability,"//Simplex",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:2,Simpl,Simplex,2,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['Simpl'],['Simplex']
Usability,"//TAxis has a lot of attributes, defaults, set by ctor,; //are not enough to be correctly painted by TGaxis object.; //To simplify their initialization - I use temporary histogram.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5D.cxx:122,simpl,simplify,122,graf3d/gl/src/TGL5D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGL5D.cxx,2,['simpl'],['simplify']
Usability,"//TGCocoa simply returns wid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h:10,simpl,simply,10,graf2d/cocoa/inc/TGCocoa.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/cocoa/inc/TGCocoa.h,1,['simpl'],['simply']
Usability,"//TODO: Check on casing of enums - also clearer names would help; //TODO: Go through all shapes and check type is being set for each; // Scope to avoid clashes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h:40,clear,clearer,40,core/base/inc/TBuffer3DTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer3DTypes.h,1,['clear'],['clearer']
Usability,"//The SelectAll/ClearAll button",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx:16,Clear,ClearAll,16,gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressMemoryPlot.cxx,1,['Clear'],['ClearAll']
Usability,"//The SelectAll/ClearAll buttons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx:16,Clear,ClearAll,16,gui/sessionviewer/src/TProofProgressLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TProofProgressLog.cxx,1,['Clear'],['ClearAll']
Usability,"//Ugly iteration statements, but still, number of links and caps will be; //ok - this is checked in InitGeometry. Check cap != fCaps.end() is added; //to make it clear (not required).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLH2PolyPainter.cxx:162,clear,clear,162,graf3d/gl/src/TGLH2PolyPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLH2PolyPainter.cxx,1,['clear'],['clear']
Usability,"//Very ugly iteration statement. Number of caps is equal to number of links (in a list; //of bins including nested links in multigraphs. But this is not obvious from the code here,; //so, I've added check cap != fCaps.end() to make it more or less clear.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLH2PolyPainter.cxx:248,clear,clear,248,graf3d/gl/src/TGLH2PolyPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLH2PolyPainter.cxx,1,['clear'],['clear']
Usability,//_____________________________________________________________; /**; Class implementing the required methods for a minimization using Simplex.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexMinimizer.h:135,Simpl,Simplex,135,math/minuit2/inc/Minuit2/SimplexMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexMinimizer.h,1,['Simpl'],['Simplex']
Usability,//_______________________________________________________________________; /**; Method to book the machine learning method to perform the algorithm.; \param method enum TMVA::Types::EMVA with the type of the mva method; \param methodTitle String with the method title.; \param options String with the options for the method.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:107,learn,learning,107,tmva/tmva/src/Envelope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx,1,['learn'],['learning']
Usability,//_______________________________________________________________________; /**; Method to book the machine learning method to perform the algorithm.; \param methodName String with the name of the mva method; \param methodTitle String with the method title.; \param options String with the options for the method.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:107,learn,learning,107,tmva/tmva/src/Envelope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx,1,['learn'],['learning']
Usability,"//________________________________________________________________________; //////////////////////////////////////////////////////////////////////////; //; // TStructViewer viewer represents class, struct or other type as an object in 3D space.; // At the top of the scene we can see objects which is our pointer. Under it we see; // pointers and collection elements. Collection must inherit from TCollection; // or be STL collecion.; //; // We can change the number of visible levels or objects on the scene with the GUI or; // methods. The size of geometry objects is proportional to the memory taken by this object; // or to the number of members inside this object.; //; // An easy way to find some class in the viewer is to change the color of the type.; // We can connect for example a TF2 class with red color or connect all classes; // inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; // that all classes inheriting from TF2 will be red.; //; // Navigation in viewer is very simple like in usual GLViewer. When you put the mouse over; // some object you can see some information about it (e.g. name, size, actual level).; // When you double click this object, it becames top object on scene.; // Undo and redo operation are supported.; //; // Begin_Html; // <p> In this picture we can see TStructViewer with pointer to TList which contains; // other collections and objects of various classes</p>; // <img src=""gif/TStructViewer1.jpg"">; // End_Html; //; // Begin_Html; // <p> Other screenshot presents opened TStructNodeEditor</p>; // <img src=""gif/TStructViewer2.jpg"">; // End_Html; //; //; //////////////////////////////////////////////////////////////////////////; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor. An argument ""ptr"" is a main pointer of type ""clname"", which should be shown in the viewer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/src/TStructViewer.cxx:1016,simpl,simple,1016,graf3d/gviz3d/src/TStructViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gviz3d/src/TStructViewer.cxx,2,"['Undo', 'simpl']","['Undo', 'simple']"
Usability,"//_________________________________________________________________________; /**; API class for minimization using the Simplex method, which does not need and use; the derivatives of the function, but only function values.; More information on the minimization method is available; <A HREF=""http://seal.web.cern.ch/mathlibs/documents/minuit/mntutorial.pdf"">here</A>. It allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnSimplex.h:119,Simpl,Simplex,119,math/minuit2/inc/Minuit2/MnSimplex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnSimplex.h,1,['Simpl'],['Simplex']
Usability,"//__________________________________________________________________________; /**; Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/CombinedMinimizer.h:129,Simpl,Simplex,129,math/minuit2/inc/Minuit2/CombinedMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/CombinedMinimizer.h,2,"['Simpl', 'simpl']","['Simplex', 'simplex']"
Usability,"//___________________________________________________________________________; /**; application interface class for minimizers (migrad, simplex, Minimize,; Scan); User normally instantiates the derived class like ROOT::Minuit2::MnMigrad; for using Migrad for minimization; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:136,simpl,simplex,136,math/minuit2/inc/Minuit2/MnApplication.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h,1,['simpl'],['simplex']
Usability,"//______________________________________________________________________________; // Represents state of TRecorder when paused",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:120,pause,paused,120,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,1,['pause'],['paused']
Usability,"//______________________________________________________________________________; //; // Command CLEAR; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:97,CLEAR,CLEAR,97,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['CLEAR'],['CLEAR']
Usability,"//______________________________________________________________________________; //; // Command SIMPLEX; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:97,SIMPL,SIMPLEX,97,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['SIMPL'],['SIMPLEX']
Usability,"//______________________________________________________________________________; //; // Generic Gradient Descent Class; //______________________________________________________________________________; //; /*** \class TGradientDescent; *; * Generic implementation of gradient descent minimization.; *; * The TGradientDescent class implements an architecture and input data; * independent implementation of the gradient descent minimization algorithm.; *; * Provides Train(...) and TrainMomentum(...) functions that perform a complete; * training of a neural network. Those are mainly used for testing since for; * production a more fine grained control of the training process is desirable.; * This is provided by the Step(...), StepMomentum(...) and StepNesterov(...); * functions that perform a single minimization step.; *; * The main training characteristics are defined by the provided learning rate,; * the test interval, and the convergence steps required for convergence. The; * test interval defines how often the error on the validation set is computed,; * and the values with which the step counter is increased each time the; * HasConverged() member function is called. A convergence step is defined as; * a step in which the test error is NOT less than 0.999 times the current; * minimal test error that has been reached. If between two subsequent calls; * to HasConverged(Double_t) the test error has not been sufficiently reduced; * it is assumed that a number of convergence steps equal to the test interval; * has been performed.; *; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h:892,learn,learning,892,tmva/tmva/inc/TMVA/DNN/Minimizers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Minimizers.h,1,['learn'],['learning']
Usability,"//______________________________________________________________________________; //; // Process a ""begin_html"" / ""end_html"" block. Stop linking keywords and simply; // copy the text enclosed by the directive to the output HTML file.; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocDirective.cxx:158,simpl,simply,158,html/src/TDocDirective.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocDirective.cxx,1,['simpl'],['simply']
Usability,"//______________________________________________________________________________; //; // TFumiliMinimizer class implementing the ROOT::Math::Minimizer interface using; // TFumili.; // This class is normally instantiates using the plug-in manager; // (plug-in with name Fumili or TFumili); // In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex); //; //__________________________________________________________________________________________; // initialize the static instances",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:375,Simpl,Simplex,375,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,2,['Simpl'],['Simplex']
Usability,"//______________________________________________________________________________; //; // When THtml parses documentation (through TDocParser), it checks for special; // words (""begin_something"", ""end_something"", where the begin and end are the; // significant part). THtml then searches for a TDocDirective which can handle; // these tags (""whatever"" in the example), passes the text enclosed by these; // tags to the directive, which in turn processes it.; //; // That way, HTML, latex, and C++ macros can be processed by THtml, e.g. to; // generate plain HTML or GIF pictures. The classes reposinsible for parsing; // that are TDocHtmlDirective, TDocLatexDirective, and TDocMacroDirective,; // respecively.; //; // Directives can have optional parameters; these are passed as paranthesis; // enclosed, comma delimited name=value pairs; see SetParameters().; //; // You can implement your own directive simply by deriving from TDocDirective;; // the tag corresponds to TDocDirective's name (e.g. ""HTML"" for ""begin_html"" /; // ""end_html"").; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocDirective.cxx:904,simpl,simply,904,html/src/TDocDirective.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocDirective.cxx,1,['simpl'],['simply']
Usability,//___________________________________________________________________________________; /**; DataOptions : simple structure holding the options on how the data are filled. @ingroup FitData; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/DataOptions.h:106,simpl,simple,106,math/mathcore/inc/Fit/DataOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/DataOptions.h,1,['simpl'],['simple']
Usability,//___________________________________________________________________________________; /**; Interface (abstract class) for generic functions objects of one-dimension; Provides a method to evaluate the function given a value (simple double); by implementing operator() (const double ).; In addition it defines the interface for copying functions via the pure virtual method Clone().; Derived classes must implement the pure virtual private method DoEval(double ) for the; function evaluation in addition to Clone().; An interface for evaluating the function passing a vector (like for multidim functions) is also; provided. @ingroup GenFunc; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IFunction.h:225,simpl,simple,225,math/mathcore/inc/Math/IFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IFunction.h,1,['simpl'],['simple']
Usability,"//______________________________________________________________________________________; /**. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, which is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:499,simpl,simplest,499,math/mathmore/inc/Math/GSLMinimizer1D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h,1,['simpl'],['simplest']
Usability,"//_________________________________________________________________________________________; /**; Basic 3D Transformation class describing a rotation and then a translation; The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data.; They are represented and held in this class like a 3x4 matrix (a simple array of 12 numbers). The class can be constructed from any 3D rotation object; (ROOT::Math::Rotation3D, ROOT::Math::AxisAngle, ROOT::Math::Quaternion, etc...) and/or; a 3D Vector (ROOT::Math::DislacementVector3D or via ROOT::Math::Translation ) representing a Translation.; The Transformation is defined by applying first the rotation and then the translation.; A transformation defined by applying first a translation and then a rotation is equivalent to the; transformation obtained applying first the rotation and then a translation equivalent to the rotated vector.; The operator * can be used to obtain directly such transformations, in addition to combine various; transformations.; Keep in mind that the operator * (like in the case of rotations ) is not commutative.; The operator * is used (in addition to operator() ) to apply a transformations on the vector; (DisplacementVector3D and LorentzVector classes) and point (PositionVector3D) classes.; In the case of Vector objects the transformation only rotates them and does not translate them.; Only Point objects are able to be both rotated and translated. @ingroup GenVector. @sa Overview of the @ref GenVector ""physics vector library"". */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/Transform3D.h:333,simpl,simple,333,math/genvector/inc/Math/GenVector/Transform3D.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/Transform3D.h,1,['simpl'],['simple']
Usability,"//_____________________________________________________________________________________________________; /**; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Refer to the [guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) for an introduction how Minuit; works. @ingroup Minuit; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:430,Simpl,Simplex,430,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h,3,"['Simpl', 'guid']","['Simplex', 'guide', 'guides']"
Usability,"//________________________________________________________________________________________________________; /**; Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h:152,simpl,simplest,152,math/mathmore/inc/Math/RootFinderAlgorithms.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h,1,['simpl'],['simplest']
Usability,"//________________________________________________________________________________________________________; /**; \a Secant algorithm, simplified version of Newton method, which does not require the derivative at every step.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Finding-Algorithms-using-Derivatives.html"">; GSL manual</A> for more information; @ingroup RootFinders; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h:134,simpl,simplified,134,math/mathmore/inc/Math/RootFinderAlgorithms.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h,1,['simpl'],['simplified']
Usability,"//applies only for rainbowed display modes (rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm, cmy modulo color component, cie smooth alorithm, cie modulo color component, yiq smooth alorithm, yiq modulo color component, hsv smooth alorithm, hsv modulo color component, it does not apply for simple display modes algorithm group",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h:311,simpl,simple,311,hist/spectrumpainter/inc/TSpectrum2Painter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h,1,['simpl'],['simple']
Usability,"//change the size of functions array and clear it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:41,clear,clear,41,math/minuit/src/TLinearFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx,1,['clear'],['clear']
Usability,"//clear",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx:2,clear,clear,2,gui/gui/src/TGCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGCanvas.cxx,1,['clear'],['clear']
Usability,"//clear cache buffer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:2,clear,clear,2,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,2,['clear'],['clear']
Usability,"//clear the list tree displayed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldNameFrame.cxx:2,clear,clear,2,gui/guibuilder/src/TGuiBldNameFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldNameFrame.cxx,1,['clear'],['clear']
Usability,"//clear tracks array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx:2,clear,clear,2,test/eventb.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventb.cxx,1,['clear'],['clear']
Usability,"//default, clear everything in the canvas. Subpads are deleted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:11,clear,clear,11,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['clear'],['clear']
Usability,"//delete all existing Guidelines and create new invisible pad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:22,Guid,Guidelines,22,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,1,['Guid'],['Guidelines']
Usability,"//determines Bezier interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h:52,simpl,simple,52,hist/spectrumpainter/inc/TSpectrum2Painter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h,1,['simpl'],['simple']
Usability,"//determines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h:133,simpl,simple,133,hist/spectrumpainter/inc/TSpectrum2Painter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h,1,['simpl'],['simple']
Usability,"//determines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h:134,simpl,simple,134,hist/spectrumpainter/inc/TSpectrum2Painter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h,1,['simpl'],['simple']
Usability,"//determines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h:133,simpl,simple,133,hist/spectrumpainter/inc/TSpectrum2Painter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h,1,['simpl'],['simple']
Usability,"//different MDI; //clear the list tree displayed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldNameFrame.cxx:19,clear,clear,19,gui/guibuilder/src/TGuiBldNameFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldNameFrame.cxx,1,['clear'],['clear']
Usability,"//display mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h:32,simpl,simple,32,hist/spectrumpainter/inc/TSpectrum2Painter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/inc/TSpectrum2Painter.h,1,['simpl'],['simple']
Usability,"//else uxmax = 0;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:7,ux,uxmax,7,hist/hist/src/TMultiGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx,1,['ux'],['uxmax']
Usability,"//else uxmin = 0;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx:7,ux,uxmin,7,hist/hist/src/TMultiGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiGraph.cxx,1,['ux'],['uxmin']
Usability,"//evaluate the simple case that is removing 1 variable at time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:15,simpl,simple,15,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,2,['simpl'],['simple']
Usability,"//fActDesc->fPackages->Clear();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:23,Clear,Clear,23,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['Clear'],['Clear']
Usability,"//fKernelsList.clear();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx:15,clear,clear,15,tmva/tmva/src/SVKernelFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/SVKernelFunction.cxx,1,['clear'],['clear']
Usability,"//fList3->Clear();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx:10,Clear,Clear,10,test/TBench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx,1,['Clear'],['Clear']
Usability,"//fListTree->ClearViewPort();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFileBrowser.cxx:13,Clear,ClearViewPort,13,gui/gui/src/TGFileBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFileBrowser.cxx,1,['Clear'],['ClearViewPort']
Usability,"//fTbfname->Clear();; //fTbfname->AddText(0, fFileInfo->fFileTypes[te->EntryId()+1]);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFileDialog.cxx:12,Clear,Clear,12,gui/gui/src/TGFileDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFileDialog.cxx,1,['Clear'],['Clear']
Usability,"//fill the buffers only once during learning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:36,learn,learning,36,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"//float, optional (default=0.1); //learning rate shrinks the contribution of each tree by `learning_rate`.; //There is a trade-off between learning_rate and n_estimators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:35,learn,learning,35,tmva/pymva/inc/TMVA/MethodPyGTB.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h,1,['learn'],['learning']
Usability,"//float, optional (default=1.0); //The fraction of samples to be used for fitting the individual base; //learners. If smaller than 1.0 this results in Stochastic Gradient; //Boosting. `subsample` interacts with the parameter `n_estimators`.; //Choosing `subsample < 1.0` leads to a reduction of variance; //and an increase in bias.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h:105,learn,learners,105,tmva/pymva/inc/TMVA/MethodPyGTB.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyGTB.h,1,['learn'],['learners']
Usability,"//gVirtualX->Clear()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h:13,Clear,Clear,13,core/base/inc/TVirtualPadPainter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TVirtualPadPainter.h,1,['Clear'],['Clear']
Usability,"//hitCount.print(""End of Clear"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx:25,Clear,Clear,25,test/TBench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TBench.cxx,1,['Clear'],['Clear']
Usability,"//if all branches are selected stop the learning phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:40,learn,learning,40,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,2,['learn'],['learning']
Usability,"//if covariance matrix is singular,another vector is added until; //the matrix becomes regular or it becomes clear that all; //vectors of the group lie on a hyperplane",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRobustEstimator.cxx:109,clear,clear,109,math/physics/src/TRobustEstimator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRobustEstimator.cxx,1,['clear'],['clear']
Usability,"//implement simple functor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:12,simpl,simple,12,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,1,['simpl'],['simple']
Usability,"//it's not really clear, if I should really check this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/Display.cpp:18,clear,clear,18,interpreter/cling/lib/MetaProcessor/Display.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/MetaProcessor/Display.cpp,1,['clear'],['clear']
Usability,"//list of names to be returned as feedback",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:34,feedback,feedback,34,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['feedback'],['feedback']
Usability,"//loat, optional (default=1.); //Learning rate shrinks the contribution of each classifier by; //``learning_rate``. There is a trade-off between ``learning_rate`` and ``n_estimators``.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:33,Learn,Learning,33,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,1,['Learn'],['Learning']
Usability,"//maximum of iterations to learn",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:27,learn,learn,27,tmva/rmva/inc/TMVA/MethodRSNNS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h,1,['learn'],['learn']
Usability,"//one entry is sufficient to learn",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:29,learn,learn,29,test/MainEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx,3,['learn'],['learn']
Usability,"//progress bar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:2,progress bar,progress bar,2,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['progress bar'],['progress bar']
Usability,"//simplex MInuit2 does not work well (needs to be checked); // simplexAlgos.push_back( algoType( ""Minuit2"", ""Simplex"", """", CompareResult()) );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:2,simpl,simplex,2,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,3,"['Simpl', 'simpl']","['Simplex', 'simplex', 'simplexAlgos']"
Usability,"//simply take sum of pixels differences",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCurlyLine.cxx:2,simpl,simply,2,graf2d/graf/src/TCurlyLine.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCurlyLine.cxx,5,['simpl'],['simply']
Usability,"//simply take sum of pixels differences; // check if point is close to the radial axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGraphPolargram.cxx:2,simpl,simply,2,graf2d/graf/src/TGraphPolargram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGraphPolargram.cxx,1,['simpl'],['simply']
Usability,"//the learning function to use",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:6,learn,learning,6,tmva/rmva/inc/TMVA/MethodRSNNS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h,1,['learn'],['learning']
Usability,"//the parameters for the learning function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h:25,learn,learning,25,tmva/rmva/inc/TMVA/MethodRSNNS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodRSNNS.h,1,['learn'],['learning']
Usability,"//timer.Start();; //ROOT::Math::WrappedParamFunction<> funptr(&SimpleFun, dim, p, p+1);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:63,Simpl,SimpleFun,63,math/mathcore/test/testIntegrationMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx,1,['Simpl'],['SimpleFun']
Usability,"//will also call Track::Clear",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx:24,Clear,Clear,24,test/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Event.cxx,2,['Clear'],['Clear']
Usability,"/; /// unary-operator: one of; /// '&' '*' '+' '-' '~' '!'; /// [GNU] '__extension__' '__real' '__imag'; ///; /// primary-expression: [C99 6.5.1]; /// [C99] identifier; /// [C++] id-expression; /// constant; /// string-literal; /// [C++] boolean-literal [C++ 2.13.5]; /// [C++11] 'nullptr' [C++11 2.14.7]; /// [C++11] user-defined-literal; /// '(' expression ')'; /// [C11] generic-selection; /// [C++2a] requires-expression; /// '__func__' [C99 6.4.2.2]; /// [GNU] '__FUNCTION__'; /// [MS] '__FUNCDNAME__'; /// [MS] 'L__FUNCTION__'; /// [MS] '__FUNCSIG__'; /// [MS] 'L__FUNCSIG__'; /// [GNU] '__PRETTY_FUNCTION__'; /// [GNU] '(' compound-statement ')'; /// [GNU] '__builtin_va_arg' '(' assignment-expression ',' type-name ')'; /// [GNU] '__builtin_offsetof' '(' type-name ',' offsetof-member-designator')'; /// [GNU] '__builtin_choose_expr' '(' assign-expr ',' assign-expr ','; /// assign-expr ')'; /// [GNU] '__builtin_FILE' '(' ')'; /// [CLANG] '__builtin_FILE_NAME' '(' ')'; /// [GNU] '__builtin_FUNCTION' '(' ')'; /// [MS] '__builtin_FUNCSIG' '(' ')'; /// [GNU] '__builtin_LINE' '(' ')'; /// [CLANG] '__builtin_COLUMN' '(' ')'; /// [GNU] '__builtin_source_location' '(' ')'; /// [GNU] '__builtin_types_compatible_p' '(' type-name ',' type-name ')'; /// [GNU] '__null'; /// [OBJC] '[' objc-message-expr ']'; /// [OBJC] '\@selector' '(' objc-selector-arg ')'; /// [OBJC] '\@protocol' '(' identifier ')'; /// [OBJC] '\@encode' '(' type-name ')'; /// [OBJC] objc-string-literal; /// [C++] simple-type-specifier '(' expression-list[opt] ')' [C++ 5.2.3]; /// [C++11] simple-type-specifier braced-init-list [C++11 5.2.3]; /// [C++] typename-specifier '(' expression-list[opt] ')' [C++ 5.2.3]; /// [C++11] typename-specifier braced-init-list [C++11 5.2.3]; /// [C++] 'const_cast' '<' type-name '>' '(' expression ')' [C++ 5.2p1]; /// [C++] 'dynamic_cast' '<' type-name '>' '(' expression ')' [C++ 5.2p1]; /// [C++] 'reinterpret_cast' '<' type-name '>' '(' expression ')' [C++ 5.2p1]; /// [C++] 'static_c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:2615,simpl,simple-type-specifier,2615,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['simpl'],['simple-type-specifier']
Usability,"/sourceforge.net/projects/optionparser/files/optionparser-1.3.tar.gz/download"">optionparser-1.3.tar.gz</a> @n; * Just the header (this is all you really need):; * <a style=""font-size:larger;font-weight:bold"" href=""http://optionparser.sourceforge.net/optionparser.h"">optionparser.h</a>; *; * @par Changelog:; * <b>Version 1.3:</b> Compatible with Microsoft Visual C++. @n; * <b>Version 1.2:</b> Added @ref ROOT::option::Option::namelen ""Option::namelen"" and removed the extraction; * of short option characters into a special buffer. @n; * Changed @ref ROOT::option::Arg::Optional ""Arg::Optional"" to accept arguments if they are attached; * rather than separate. This is what GNU getopt() does and how POSIX recommends; * utilities should interpret their arguments.@n; * <b>Version 1.1:</b> Optional mode with argument reordering as done by GNU getopt(), so that; * options and non-options can be mixed. See; * @ref ROOT::option::Parser::parse() ""Parser::parse()"".; *; * @par Feedback:; * Send questions, bug reports, feature requests etc. to: <tt><b>optionparser-feedback<span id=""antispam"">&nbsp;(a)&nbsp;</span>lists.sourceforge.net</b></tt>; * @htmlonly <script type=""text/javascript"">document.getElementById(""antispam"").innerHTML=""@""</script> @endhtmlonly; *; *; * @par Example program:; * (Note: @c option::* identifiers are links that take you to their documentation.); * @code; * #include <iostream>; * #include ""optionparser.h""; *; * enum optionIndex { UNKNOWN, HELP, PLUS };; * const option::Descriptor usage[] =; * {; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""USAGE: example [options]\n\n""; * ""Options:"" },; * {HELP, 0,"""" , ""help"",option::Arg::None, "" --help \tPrint usage and exit."" },; * {PLUS, 0,""p"", ""plus"",option::Arg::None, "" --plus, -p \tIncrement count."" },; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""\nExamples:\n""; * "" example --unknown -- --this_is_no_option\n""; * "" example -unk --plus -ppp file1 file2\n"" },; * {0,0,0,0,0,0}; * };; *; * int main(int argc, char* argv[]); * {; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3394,Feedback,Feedback,3394,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['Feedback'],['Feedback']
Usability,"2) A program when released has no strange ""features"" or bugs.; 3) A program is robust and handles ALL extreme and unusual cases.; 4) A program is written in phases and modules with hard tests for each one.; 5) A program is written for any user who doesn't need special knowledge; to use the program.; 6) A program has well defined user requirements and functional specifications.; 7) A program is written with regard to future expansion and integreation; with other systems (portability). When programming following these additional principles make programs easier; to maintain. A) Choose variable names that accurately describes what the variable does/is.; B) Write comments to inform someone faced with the task of modifying your code.; C) Avoid excessive comments. Write the code so that it says what it does.; D) Follow a strict one-in, one-out flow of control structues except in the; case of fatal error conditions.; E) Avoid using global variables.; F) Do not cause side effects to variables that were not parameters to a; function.; G) Have a single function perform a single purpose.; H) Select a single indentation style and stick with it.; I) Use a consistent naming convention. The following principles help me when I try optimizing code:. a) If optimizing, use a profiler to determine which sections of code most of; the time is spent in. Spend most of your effort in the most used sections.; Don't bother optimizing a procedure using less than 10% of the time. b) High level optimizations are far more effective than cycle shaving.; (e.g. use quick sort instead of optimizing a bubble sort.). c) Be flexible in your approach to solving a problem. List exactly what you; need as a result at a minimum. Get rid of unnecessary assumptions. d) Become familiar with sets of operations that are equivalent, or nearly so.; Learn the relative expense of basic operations. e) If possible, be careful not to needlessly sacrifice significant readability; of the code for a cycle or two. -- Spy. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/x3d/src/x3d.c:3365,Learn,Learn,3365,graf3d/x3d/src/x3d.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/x3d/src/x3d.c,1,['Learn'],['Learn']
Usability,"2->FillRandom(""gaus"", 500);; hst12->SetFillColor(kBlue);; hst12->SetLineColor(kBlue);. THStack st1(""st1"", ""st1"");; st1.Add(hst11);; st1.Add(hst12);. cst1->cd(1); st1.Draw();; cst1->cd(2); st1.Draw(""hist"");; }; End_Macro. \anchor HP27; ### Drawing of 3D implicit functions. 3D implicit functions (`TF3`) can be drawn as iso-surfaces.; The implicit function f(x,y,z) = 0 is drawn in cartesian coordinates.; In the following example the options ""FB"" and ""BB"" suppress the; ""Front Box"" and ""Back Box"" around the plot. Begin_Macro(source); {; auto c2 = new TCanvas(""c2"",""c2"",600,400);; auto f3 = new TF3(""f3"",""sin(x*x+y*y+z*z-36)"",-2,2,-2,2,-2,2);; f3->SetClippingBoxOn(0,0,0);; f3->SetFillColor(30);; f3->SetLineColor(15);; f3->Draw(""FBBB"");; }; End_Macro. \anchor HP28; ### Associated functions drawing. An associated function is created by `TH1::Fit`. More than on fitted; function can be associated with one histogram (see `TH1::Fit`). A `TF1` object `f1` can be added to the list of associated; functions of an histogram `h` without calling `TH1::Fit`; simply doing:. h->GetListOfFunctions()->Add(f1);. or. h->GetListOfFunctions()->Add(f1,someoption);. To retrieve a function by name from this list, do:. TF1 *f1 = (TF1*)h->GetListOfFunctions()->FindObject(name);. or. TF1 *f1 = h->GetFunction(name);. Associated functions are automatically painted when an histogram is drawn.; To avoid the painting of the associated functions the option `HIST`; should be added to the list of the options used to paint the histogram. \anchor HP29; ### Drawing using OpenGL. The class `TGLHistPainter` allows to paint data set using the OpenGL 3D; graphics library. The plotting options start with `GL` keyword.; In addition, in order to inform canvases that OpenGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. \anchor HP29a; #### General information: plot types and supported options. The following types of plots are provided:. For lego plots ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:98176,simpl,simply,98176,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['simpl'],['simply']
Usability,"5.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 96.000 494.000 109.000 125.000; Poisson(10)....... 138.000 1236.000 165.000 203.000; Poisson(70)....... 818.000 1195.000 835.000 844.000; Poisson(100)...... 837.000 1218.000 849.000 864.000; GausTF1........... 83.000 180.000 87.000 88.000; LandauTF1......... 80.000 180.000 83.000 86.000; GausUNURAN........ 40.000 139.000 41.000 44.000; PoissonUNURAN(10). 85.000 271.000 92.000 102.000; PoissonUNURAN(100) 62.000 256.000 69.000 78.000; ~~~~. Note that the time to generate a number from an arbitrary TF1 function; using TF1::GetRandom or using TUnuran is independent of the complexity of the function. TH1::FillRandom(TH1 *) or TH1::FillRandom(const char *tf1name); can be used to fill an histogram (1-d, 2-d, 3-d from an existing histogram; or from an existing function. Note this interesting feature when working with objects.; You can use several TRandom objects, each with their ""independent""; random sequence. For example, one can imagine; ~~~~; TRandom *eventGenerator = new TRandom();; TRandom *tracking = new TRandom();; ~~~~; `eventGenerator` can be used to generate the event kinematics.; tracking can be used to track the generated particles with random numbers; independent from eventGenerator.; This very interesting feature gives the possibility to work with simple; and very fast random number generators without worrying about; random number periodicity as it was the case with Fortran.; One can use TRandom::SetSeed to modify the seed of one generator. A TRandom object may be written to a Root file. - as part of another object; - or with its own key (example: `gRandom->Write(""Random"")` ) ;. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:9188,simpl,simple,9188,math/mathcore/src/TRandom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx,1,['simpl'],['simple']
Usability,":SetDisplayMode (Int_t modeGroup, Int_t displayMode); ///; /// This function controls the display mode group and display mode of the; /// histogram drawing. To illustrate the possible effects of the various display; /// modes we introduce a set of examples. Default values:; ///; /// - `modeGroup = kModeGroupLightHeight `; /// - `displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter011.jpg; ///; /// Light modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter012.jpg; ///; /// Light modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter013.jpg; ///; /// Light modes group, display mode = surface, 64 x 64 channels.; /// \image html spectrumpainter014.jpg; ///; /// Light modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter015.jpg; ///; /// Height modes group, ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:2882,Simpl,Simple,2882,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,":map instead.; //; //===----------------------------------------------------------------------===//; //; // Synopsis:; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap {; // public:; // typedef KeyT key_type;; // typedef ValT mapped_type;; // typedef RecyclingAllocator<...> Allocator;; // class iterator;; // class const_iterator;; //; // explicit IntervalMap(Allocator&);; // ~IntervalMap():; //; // bool empty() const;; // KeyT start() const;; // KeyT stop() const;; // ValT lookup(KeyT x, Value NotFound = Value()) const;; //; // const_iterator begin() const;; // const_iterator end() const;; // iterator begin();; // iterator end();; // const_iterator find(KeyT x) const;; // iterator find(KeyT x);; //; // void insert(KeyT a, KeyT b, ValT y);; // void clear();; // };; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap::const_iterator {; // public:; // using iterator_category = std::bidirectional_iterator_tag;; // using value_type = ValT;; // using difference_type = std::ptrdiff_t;; // using pointer = value_type *;; // using reference = value_type &;; //; // bool operator==(const const_iterator &) const;; // bool operator!=(const const_iterator &) const;; // bool valid() const;; //; // const KeyT &start() const;; // const KeyT &stop() const;; // const ValT &value() const;; // const ValT &operator*() const;; // const ValT *operator->() const;; //; // const_iterator &operator++();; // const_iterator &operator++(int);; // const_iterator &operator--();; // const_iterator &operator--(int);; // void goToBegin();; // void goToEnd();; // void find(KeyT x);; // void advanceTo(KeyT x);; // };; //; // template <typename KeyT, typename ValT, unsigned N, typename Traits>; // class IntervalMap::iterator : public const_iterator {; // public:; // void insert(KeyT a, KeyT b, Value y);; // void erase();; // };; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:2383,clear,clear,2383,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,1,['clear'],['clear']
Usability,"; // (underflow and overflow bins, used for efficiency corrections); //; // define: Norm_j = sum_k B_kj (data member fSumOverY); //; // the derivative of A wrt this input matrix B is given by:; //; // dA_ij / dB_kj = ( delta_ik - A_ij ) * 1/Norm_j; //; // The covariance matrix Vxx is:; //; // Vxx_mn = sum_ijlk [ (dX_m / dA_ij) * (dA_ij / dB_kj) * DB_kj; // * (dX_n / dA_lj) * (dA_lj / dB_kj) ]; //; // where DB_kj is the error on B_kj squared; // Simplify the sum over k:; //; // sum_k [ (dA_ij / dB_kj) * DB_kj * (dA_lj / dB_kj) ]; // = sum_k [ ( delta_ik - A_ij ) * 1/Norm_j * DB_kj *; // * ( delta_lk - A_lj ) * 1/Norm_j ]; // = sum_k [ ( delta_ik*delta_lk - delta_ik*A_lj - delta_lk*A_ij; // + A_ij * A_lj ) * DB_kj / Norm_j^2 ]; //; // introduce normalized errors: Rsq_kj = DB_kj / Norm_j^2; // after summing over k:; // delta_ik*delta_lk*Rsq_kj -> delta_il*Rsq_ij; // delta_ik*A_lj*Rsq_kj -> A_lj*Rsq_ij; // delta_lk*A_ij*Rsq_kj -> A_ij*Rsq_lj; // A_ij*A_lj*Rsq_kj -> A_ij*A_lj*sum_k(Rsq_kj); //; // introduce sum of normalized errors squared: SRsq_j = sum_k(Rsq_kj); //; // Note: Rsq_ij is stored as fDAinRelSq (excludes extra indices of B); // and SRsq_j is stored as fDAinColRelSq (sum includes all indices of B); //; // Vxx_nm = sum_ijl [ (dX_m / dA_ij) * (dX_n / dA_lj); // (delta_il*Rsq_ij - A_lj*Rsq_ij - A_ij*Rsq_lj + A_ij*A_lj *SRsq_j) ]; //; // Vxx_nm = sum_j [ F_mj * F_nj * SRsq_j; // - su",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:1041,Simpl,Simplify,1041,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['Simpl'],['Simplify']
Usability,"; distribution). Candle plots like these are usually called ""notched candle plots"". In case the significance of the median is greater that the size of the box, the; box will have an unnatural shape. Usually it means the chart has not enough data,; or that representing this uncertainty is not useful. ##### The Mean; The mean can be drawn as a dashed line or as a circle or not drawn at all.; The mean is the arithmetic average of the values in the distribution.; It is calculated using GetMean(). Because histograms are; binned data, the mean value can differ from a calculation on the raw-data.; If the distribution is large enough and gaussian shaped the mean will be; exactly the median. ##### The Whiskers; The whiskers represent the part of the distribution not covered by the box.; The upper 25% and the lower 25% of the distribution are located within the whiskers.; Two representations are available. - A simple one (using w=1) defining the lower whisker from the lowest data value; to the bottom of the box, and the upper whisker from the top of the box to the; highest data value. In this representation the whisker-lines are dashed.; - A more complex one having a further restriction. The whiskers are still connected; to the box but their length cannot exceed \f$ 1.5\times iqr \f$. So it might; be that the outermost part of the underlying distribution will not be covered; by the whiskers. Usually these missing parts will be represented by the outliers; (see points). Of course the upper and the lower whisker may differ in length.; In this representation the whiskers are drawn as solid lines. \since **ROOT version 6.11/01**. Using the static function TCandle::SetWhiskerRange(double) the whisker definition w=1; will be overwritten. E.g. using a whisker-range of 0.95 and w=1 will redefine the area of; the lower whisker to the upper whisker in order to cover 95% of the distribution inside; that candle. The static function will affect all candle-charts in the running program.; D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:51149,simpl,simple,51149,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['simpl'],['simple']
Usability,"; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by the; caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small valu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1505,simpl,simple,1505,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['simpl'],['simple']
Usability,"; int method,; int windowBits,; int memLevel,; int strategy));. This is another version of deflateInit with more compression options. The; fields next_in, zalloc, zfree and opaque must be initialized before by; the caller. The method parameter is the compression method. It must be Z_DEFLATED in; this version of the library. The windowBits parameter is the base two logarithm of the window size; (the size of the history buffer). It should be in the range 8..15 for this; version of the library. Larger values of this parameter result in better; compression at the expense of memory usage. The default value is 15 if; deflateInit is used instead. windowBits can also be -8..-15 for raw deflate. In this case, -windowBits; determines the window size. deflate() will then generate raw deflate data; with no zlib header or trailer, and will not compute an adler32 check value. windowBits can also be greater than 15 for optional gzip encoding. Add; 16 to windowBits to write a simple gzip header and trailer around the; compressed data instead of a zlib wrapper. The gzip header will have no; file name, no extra data, no comment, no modification time (set to zero),; no header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but; is slow and reduces compression ratio; memLevel=9 uses maximum memory; for optimal speed. The default value is 8. See zconf.h for total memory; usage as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small valu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1505,simpl,simple,1505,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['simpl'],['simple']
Usability,"; much output data as possible before returning. The state machine is; structured roughly as follows:. for (;;) switch (state) {; ...; case STATEn:; if (not enough input data or output space to make progress); return;; ... make progress ...; state = STATEm;; break;; ...; }. so when inflate() is called again, the same case is attempted again, and; if the appropriate resources are provided, the machine proceeds to the; next state. The NEEDBITS() macro is usually the way the state evaluates; whether it can proceed or should return. NEEDBITS() does the return if; the requested bits are not available. The typical use of the BITS macros; is:. NEEDBITS(n);; ... do something with BITS(n) ...; DROPBITS(n);. where NEEDBITS(n) either returns from inflate() if there isn't enough; input left to load n bits into the accumulator, or it continues. BITS(n); gives the low n bits in the accumulator. When done, DROPBITS(n) drops; the low n bits off the accumulator. INITBITS() clears the accumulator; and sets the number of available bits to zero. BYTEBITS() discards just; enough bits to put the accumulator on a byte boundary. After BYTEBITS(); and a NEEDBITS(8), then BITS(8) would return the next byte in the stream. NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return; if there is no input available. The decoding of variable length codes uses; PULLBYTE() directly in order to pull just enough bytes to decode the next; code, and no more. Some states loop until they get enough input, making sure that enough; state information is maintained to continue the loop where it left off; if NEEDBITS() returns in the loop. For example, want, need, and keep; would all have to actually be part of the saved state in case NEEDBITS(); returns:. case STATEw:; while (want < need) {; NEEDBITS(n);; keep[want++] = BITS(n);; DROPBITS(n);; }; state = STATEx;; case STATEx:. As shown above, if the next state is also the next case, then the break; is omitted. A state may also return if there",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c:1051,clear,clears,1051,builtins/zlib/inflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/inflate.c,2,['clear'],['clears']
Usability,"; own actions (let's say ROOT or C++ commands). The macro below shows an example of control bar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:1643,Simpl,Simple,1643,graf2d/gpad/src/TControlBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx,1,['Simpl'],['Simple']
Usability,"; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; ~~~. The metadata information from the specification file can be then accessed using the DefinePerSample function.; For example, to access luminosity information (stored as a double):. ~~~{.python}; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); ~~~. or sample_category information (stored as a string):. ~~~{.python}; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); ~~~. or directly the filename:. ~~~{.python}; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); ~~~. An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; provides a corresponding exemplary JSON file for the dataset specification. \anchor progressbar; ### Adding a progress bar . A progress bar showing the processed event statistics can be added to any RDataFrame program.; The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. . ProgressBar is added after creating the dataframe object (df):; ~~~{.cpp}; ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ~~~. Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility ; For example, it can be called at any computational node, such as Filter or Define, not only the head node,; with no change to the ProgressBar function itself (please see the [Efficient analysis in Python](#python) ; section for appropriate usage in Python): ; ~~~{.cpp}; ROOT::RDataFrame df(""tree"", ""file.root""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:79713,progress bar,progress bar,79713,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['progress bar'],['progress bar']
Usability,";; Double_t x[n], y[n], ex[n], ey[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 1000*sin(x[i]+0.2);; x[i] = 17.8*x[i]-8.9;; ex[i] = 1.0;; ey[i] = 10.*i;; }; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetName(""gr"");; gr->SetLineColor(kRed);; gr->SetLineWidth(2);; gr->SetMarkerStyle(21);; gr->SetMarkerSize(1.3);; gr->SetMarkerColor(7);; gr->Draw(""P"");. auto legend = new TLegend(0.1,0.7,0.48,0.9);; legend->SetHeader(""The Legend Title"",""C""); // option ""C"" allows to center the header; legend->AddEntry(h1,""Histogram filled with random numbers"",""f"");; legend->AddEntry(""f1"",""Function abs(#frac{sin(x)}{x})"",""l"");; legend->AddEntry(""gr"",""Graph with error bars"",""lep"");; legend->Draw();; }; End_Macro. `TLegend` inherits from `TAttText` therefore changing any; text attributes (text alignment, font, color...) on a legend will changed the; text attributes on each line. In particular it can be interesting to change the text alignement that way. In; order to have a base-line vertical alignment instead of a centered one simply do:; ~~~ {.cpp}; legend->SetTextAlign(13);; ~~~; or; ~~~ {.cpp}; legend->SetTextAlign(11);; ~~~; The default value of some `TLegend` attributes can be changed using; `gStyle`. The default settings are:; ~~~ {.cpp}; SetLegendBorderSize(1);; SetLegendFillColor(0);; SetLegendFont(42);; SetLegendTextSize(0.);; ~~~; The global attributes change the default values for the next created legends. Text attributes can be also changed individually on each legend entry:; ~~~ {.cpp}; TLegendEntry *le = leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; le->SetTextColor(kBlue);; ~~~. Note that the `TPad` class has a method to build automatically a legend; for all objects in the pad. It is called `TPad::BuildLegend()`. Each item in the legend is added using the `AddEntry` method. This; method defines the object to be added (by reference or name), the label; associated to this object and an option which a combination of:. - L: draw line associated with TA",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLegend.cxx:2397,simpl,simply,2397,graf2d/graf/src/TLegend.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLegend.cxx,1,['simpl'],['simply']
Usability,"= new TCanvas(""c46"",""c46"",500,500);; auto grP1 = new TGraphPolar();; grP1->SetTitle(""TGraphPolar example"");. grP1->SetPoint(0, (1*TMath::Pi())/4., 0.05);; grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);. grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(1.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(4);; grP1->Draw(""ALP"");. // Update, otherwise GetPolargram returns 0; c46->Update();; grP1->GetPolargram()->SetToRadian();; }; End_Macro. \anchor GrP5; ### Colors automatically picked in palette. \since **ROOT version 6.09/01**. When several graphs are painted in the same canvas or when a multi-graph is drawn,; it might be useful to have an easy and automatic way to choose; their color. The simplest way is to pick colors in the current active color; palette. Palette coloring for histogram is activated thanks to the options `PFC`; (Palette Fill Color), `PLC` (Palette Line Color) and `PMC` (Palette Marker Color).; When one of these options is given to `TGraph::Draw` the graph get its color; from the current color palette defined by `gStyle->SetPalette(...)`. The color; is determined according to the number of objects having palette coloring in; the current pad. Begin_Macro(source); ../../../tutorials/graphs/graphpalettecolor.C; End_Macro. Begin_Macro(source); ../../../tutorials/graphs/multigraphpalettecolor.C; End_Macro. \anchor GrP6; ### Reverse graphs' axis. \since **ROOT version 6.09/03**. When a TGraph is drawn, the X-axis is drawn with increasing values from left to; right and the Y-axis from bottom to top. The two options `RX` and `RY` allow to; change this order. The option `RX` allows to draw the X-axis with increasing values; from right to left and the `RY` option allows to draw the Y-axis with i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:16951,simpl,simplest,16951,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['simpl'],['simplest']
Usability,"> item. You can select the name of the Postscript; file. If the file name is xxx.ps, you will generate a Postscript file named; xxx.ps. If the file name is xxx.eps, you generate an encapsulated Postscript; file instead.; - In your program (or macro), you can type:; ~~~ {.cpp}; c1->Print(""xxx.ps"");; ~~~; or:; ~~~ {.cpp}; c1->Print(""xxx.eps"");; ~~~; This will generate a file corresponding to the picture in the canvas; pointed by `c1`.; ~~~ {.cpp}; pad1->Print(""xxx.ps"");; ~~~; prints only the picture in the pad pointed by `pad1`. The size of the Postscript picture, by default, is computed to keep the aspect; ratio of the picture on the screen, where the size along x is always 20cm. You; can set the size of the PostScript picture before generating the picture; with a command such as:. ~~~ {.cpp}; TPostScript myps(""myfile.ps"",111); myps.Range(xsize,ysize);; object->Draw();; myps.Close();; ~~~; You can set the default paper size with:; ~~~ {.cpp}; gStyle->SetPaperSize(xsize,ysize);; ~~~; You can resume writing again in this file with `myps.Open();`.; Note that you may have several Postscript files opened simultaneously. ## Output type. The output type allows to define how the PostScript output will looks like.; It allows to define the page format (A4, Legal etc..), the orientation; (Portrait, Landscape) and the number of images (zones) per page.; The output type has the following form:. ~~~ {.cpp}; [Format][Nx][Ny][Type]; ~~~. Where:. - Format : Is an integer between 0 and 99 defining the page format:; ~~~ {.cpp}; Format = 3 the paper is in the standard A3 format.; Format = n (1<n<98) is an An format.; Format = 4 and Format=0 are the same and define an A4 page.; The A0 format is selected by Format=99.; The US format Letter is selected by Format = 100.; The US format Legal is selected by Format = 200.; The US format Ledger is selected by Format = 300.; ~~~; - Nx, Ny : Specify respectively the number of zones on the x and y axis.; Nx and Ny are integers between 1 and 9.; - ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPostScript.cxx:1905,resume,resume,1905,graf2d/postscript/src/TPostScript.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPostScript.cxx,1,['resume'],['resume']
Usability,">> elist"", ""x > 0"", ""entrylistarray"");`; ~~~; ### To use a list to select entries and subentries; ~~~ {.cpp}; tree->SetEntryList(elist);; tree->Draw(""y"");; tree->Draw(""z"");; ~~~; Its main purpose is to improve the performance of a code that needs to apply; complex cuts on TTree::Draw multiple times. After the first call above to; TTree::Draw, a TEntryListArray is created and filled with the entries and the; indices of the arrays that satisfied the selection cut (x > 0). In the subsequent; calls to TTree::Draw, only these entries / subentries are used to fill histograms. ## About the class. The class derives from TEntryList and can be used basically in the same way.; This same class is used to keep entries and subentries, so there are two types of; TEntryListArray's:. 1. The ones that only hold subentries; - fEntry is set to the entry# for which the subentries correspond; - fSubLists must be 0; 2. The ones that hold entries and eventually lists with subentries in fSubLists.; - fEntry = -1 for those; - If there are no sublists for a given entry, all the subentries will be used; in the selection. ## Additions with respect to TEntryList. 1. Data members:; - fSubLists: a container to hold the sublists; - fEntry: the entry number if the list is used to hold subentries; - fLastSubListQueried and fSubListIter: a pointer to the last sublist queried; and an iterator to resume the loop from the last sublist queried (to speed up; selection and insertion in TTree::Draw); 2. Public methods:; - Contains, Enter and Remove with subentry as argument; - GetSubListForEntry: to return the sublist corresponding to the given entry; 3. Protected methods:; - AddEntriesAndSubLists: called by Add when adding two TEntryList arrays with sublists; - ConvertToTEntryListArray: convert TEntryList to TEntryListArray; - RemoveSubList: to remove the given sublist; - RemoveSubListForEntry: to remove the sublist corresponding to the given entry; - SetEntry: to get / set a sublist for the given entry; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryListArray.cxx:2180,resume,resume,2180,tree/tree/src/TEntryListArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TEntryListArray.cxx,1,['resume'],['resume']
Usability,">GetTickx()` and `ty = gPad->GetTicky()` then:. tx = 1; tick marks on top side are drawn (inside); tx = 2; tick marks and labels on top side are drawn; ty = 1; tick marks on right side are drawn (inside); ty = 2; tick marks and labels on right side are drawn. By default only the left Y axis and X bottom axis are drawn; (`tx = ty = 0`). `TPad::SetTicks(tx,ty)` allows to set these options.; See also The `TAxis` functions to set specific axis attributes. In case multiple color filled histograms are drawn on the same pad, the fill; area may hide the axis tick marks. One can force a redraw of the axis over all; the histograms by calling:. gPad->RedrawAxis();. \anchor HP05; ### Giving titles to the X, Y and Z axis. h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");. The histogram title and the axis titles can be any `TLatex` string.; The titles are part of the persistent histogram. \anchor HP060; ### The option ""SAME"". By default, when an histogram is drawn, the current pad is cleared before; drawing. In order to keep the previous drawing and draw on top of it the; option `SAME` should be use. The histogram drawn with the option; `SAME` uses the coordinates system available in the current pad. This option can be used alone or combined with any valid drawing option but; some combinations must be use with care. \anchor HP060a; #### Limitations. - It does not work when combined with the `LEGO` and `SURF` options unless the; histogram plotted with the option `SAME` has exactly the same; ranges on the X, Y and Z axis as the currently drawn histogram. To superimpose; lego plots [histograms' stacks](\ref HP26) should be used. \anchor HP061; ### Colors automatically picked in palette. \since **ROOT version 6.09/01**. When several histograms are painted in the same canvas thanks to the option ""SAME""; or via a `THStack` it might be useful to have an easy and automatic way to choose; their color. The simplest way is to pick colors in the current activ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:17817,clear,cleared,17817,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['clear'],['cleared']
Usability,">optionparser-1.3.tar.gz</a> @n; * Just the header (this is all you really need):; * <a style=""font-size:larger;font-weight:bold"" href=""http://optionparser.sourceforge.net/optionparser.h"">optionparser.h</a>; *; * @par Changelog:; * <b>Version 1.3:</b> Compatible with Microsoft Visual C++. @n; * <b>Version 1.2:</b> Added @ref ROOT::option::Option::namelen ""Option::namelen"" and removed the extraction; * of short option characters into a special buffer. @n; * Changed @ref ROOT::option::Arg::Optional ""Arg::Optional"" to accept arguments if they are attached; * rather than separate. This is what GNU getopt() does and how POSIX recommends; * utilities should interpret their arguments.@n; * <b>Version 1.1:</b> Optional mode with argument reordering as done by GNU getopt(), so that; * options and non-options can be mixed. See; * @ref ROOT::option::Parser::parse() ""Parser::parse()"".; *; * @par Feedback:; * Send questions, bug reports, feature requests etc. to: <tt><b>optionparser-feedback<span id=""antispam"">&nbsp;(a)&nbsp;</span>lists.sourceforge.net</b></tt>; * @htmlonly <script type=""text/javascript"">document.getElementById(""antispam"").innerHTML=""@""</script> @endhtmlonly; *; *; * @par Example program:; * (Note: @c option::* identifiers are links that take you to their documentation.); * @code; * #include <iostream>; * #include ""optionparser.h""; *; * enum optionIndex { UNKNOWN, HELP, PLUS };; * const option::Descriptor usage[] =; * {; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""USAGE: example [options]\n\n""; * ""Options:"" },; * {HELP, 0,"""" , ""help"",option::Arg::None, "" --help \tPrint usage and exit."" },; * {PLUS, 0,""p"", ""plus"",option::Arg::None, "" --plus, -p \tIncrement count."" },; * {UNKNOWN, 0,"""" , """" ,option::Arg::None, ""\nExamples:\n""; * "" example --unknown -- --this_is_no_option\n""; * "" example -unk --plus -ppp file1 file2\n"" },; * {0,0,0,0,0,0}; * };; *; * int main(int argc, char* argv[]); * {; * argc-=(argc>0); argv+=(argc>0); // skip program name argv[0] if present; * o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:3482,feedback,feedback,3482,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['feedback'],['feedback']
Usability,"Contours | X | - | X | - |; /// | Bars | X | - | X | - |; /// | LinesX | X | X | X | X |; /// | LinesY | X | X | X | X |; /// | BarsX | X | - | X | - |; /// | BarsY | X | - | X | - |; /// | Needles | X | - | - | - |; /// | Surface | - | X | X | X |; /// | Triangles | X | X | X | X |; ///; /// #### Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); ///; /// This function controls the display mode group and display mode of the; /// histogram drawing. To illustrate the possible effects of the various display; /// modes we introduce a set of examples. Default values:; ///; /// - `modeGroup = kModeGroupLightHeight `; /// - `displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter011.jpg; ///; /// Light modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter012.jpg; ///; /// Light modes group, dis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:2549,Simpl,Simple,2549,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"D<float>(""x"");. // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);. // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ~~~. A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned; as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of; this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second; to the tag ""up""). The _full_ variation name will be composed of the varied column name and the variation tags (e.g.; ""pt:down"", ""pt:up"" in this example). Python usage looks similar. Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill; the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define; calls for each variation and fill the histogram with values and cuts that depend on the variation. There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are; not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and; complex functors. The callable can be applied to zero or more existing columns and it will always receive their; _nominal_ value in input. #### Varying multiple columns in lockstep. In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or; ""in lockstep"":. ~~~{.python}; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); ~~~. The expression returns an RVec ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:57028,simpl,simply,57028,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simply']
Usability,"EveElement:; ~~~ {.cpp}; virtual void UnSelected();; virtual void UnHighlighted();; ~~~; and clear corresponding selection-set from there. To support tooltips for sub-elements, implement:; ~~~ {.cpp}; virtual std::string REveElement::GetHighlightTooltip() const;; ~~~; and return tooltip for the entry in the fHighlightedSet.; There should always be a single entry there.; See EveDigitSet for an example.; */; ////////////////////////////////////////////////////////////////////////////////; /// Process secondary GL selection and populate selected set accordingly.; /*. void REveSecondarySelectable::ProcessGLSelection(TGLSelectRecord& rec); {; if (rec.GetHighlight()); ProcessGLSelectionInternal(rec, fHighlightedSet);; else; ProcessGLSelectionInternal(rec, fSelectedSet);; }. ////////////////////////////////////////////////////////////////////////////////; /// Process secondary GL selection and populate given set accordingly. void REveSecondarySelectable::ProcessGLSelectionInternal(TGLSelectRecord& rec,; SelectionSet_t& sset); {; Int_t id = (rec.GetN() > 1) ? (Int_t) rec.GetItem(1) : -1;. if (sset.empty()); {; if (id >= 0); {; sset.insert(id);; rec.SetSecSelResult(TGLSelectRecord::kEnteringSelection);; }; }; else; {; if (id >= 0); {; if (rec.GetMultiple()); {; if (sset.find(id) == sset.end()); {; sset.insert(id);; rec.SetSecSelResult(TGLSelectRecord::kModifyingInternalSelection);; }; else; {; sset.erase(id);; if (sset.empty()); rec.SetSecSelResult(TGLSelectRecord::kLeavingSelection);; else; rec.SetSecSelResult(TGLSelectRecord::kModifyingInternalSelection);; }; }; else; {; if (sset.size() != 1 || sset.find(id) == sset.end()); {; sset.clear();; sset.insert(id);; rec.SetSecSelResult(TGLSelectRecord::kModifyingInternalSelection);; }; }; }; else; {; if (!rec.GetMultiple()); {; sset.clear();; rec.SetSecSelResult(TGLSelectRecord::kLeavingSelection);; }; }; }. if (rec.GetSecSelResult() != TGLSelectRecord::kNone); {; dynamic_cast<REveElement*>(this)->StampColorSelection();; }; }. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSecondarySelectable.cxx:1870,clear,clear,1870,graf3d/eve7/src/REveSecondarySelectable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveSecondarySelectable.cxx,2,['clear'],['clear']
Usability,"Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kInfo); ~~~. More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; (e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`. \anchor rdf-from-spec; ### Creating an RDataFrame from a dataset specification file. RDataFrame can be created using a dataset specification JSON file: . ~~~{.python}; import ROOT. df = ROOT.RDF.Experimental.FromSpec(""spec.json""); ~~~. The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and; their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the; required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; sample in the ""metadata"" key. A simple example for the formatting of the specification in the JSON file is the following:. ~~~{.cpp}; {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; ~~~. The metadata information from the specification file can be then accessed using the DefinePerSample function.; For example, to access luminosity information (stored as a double):. ~~~{.python}; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); ~~~. or sample_category information (stored as a string):. ~~~{.python}; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); ~~~. or directly the filename:. ~~~{.python}; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); ~~~. An example implementation of the ""FromSpec"" method is av",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:78480,simpl,simple,78480,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simple']
Usability,"H H III A Welcome to the Lund Monte Carlo! | |; | | P P Y Y T H H I A A This is PYTHIA version 8.100 | |; | | PPP Y T HHHHH I AAAAA Last date of change: 20 Oct 2007 | |; | | P Y T H H I A A | |; | | P Y T H H III A A Now is 27 Oct 2007 at 18:26:53 | |; | | | |; | | Main author: Torbjorn Sjostrand; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Department of Theoretical Physics, Lund University, Lund, Sweden; | |; | | phone: + 41 - 22 - 767 82 27; e-mail: torbjorn@thep.lu.se | |; | | Author: Stephen Mrenna; Computing Division, Simulations Group, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S. Mrenna and P. Skands, arXiv:0710.3820 | |; | | | |; | | The main physics reference is the 'PYTHIA 6.4 Physics and Manual', | |; | | T. Sjostrand, S. Mrenna and P. Skands, JHEP05 (2006) 026 [hep-ph/0603175]. | |; | | | |; | | An archive of program versions and documentation is found on the web: | |; | | http://www.thep.lu.se/~torbjorn/Pythia.html | |; | | | |; | | This program is released under the GNU General Public Licence version 2. | |; | | Please respect the MCnet Guidelines for Event Generator Authors and Users. | |; | | | |; | | Disclaimer: this program comes without any guarantees. | |; | | Beware of errors and use common sense when interpreting results. | |; | | | |; | | Copyright (C) 2007 Torbjorn Sjostrand | |; | | | |; | | | |; | *------------------------------------------------------------------------------* |; | |; *------------------------------------------------------------------------------------*; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/inc/TPythia8.h:2071,Guid,Guidelines,2071,montecarlo/pythia8/inc/TPythia8.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/inc/TPythia8.h,1,['Guid'],['Guidelines']
Usability,"L.so""); // load ROOT xml library; // gSystem->Load(""libuser.so""); // load user ROOT library; //; // TList lst;; // lst.Add(TClass::GetClass(""TUserClass1""));; // lst.Add(TClass::GetClass(""TUserClass2""));; // ...; // TXMLPlayer player;; // player.ProduceCode(&lst, ""streamers""); // create xml streamers; // }; //; // 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; // to user project and compile them. TXmlFile class implementation can be taken; // from http://web-docs.gsi.de/~linev/xmlfile.tar.gz; //; // TXMLPlayer class generates one function per class, which called class streamer.; // Name of such function for class TExample will be TExample_streamer.; //; // Following data members for streamed classes are supported:; // - simple data types (int, double, float); // - array of simple types (int[5], double[5][6]); // - dynamic array of simple types (int* with comment field // [fSize]); // - const char*; // - object of any nonROOT class; // - pointer on object; // - array of objects; // - array of pointers on objects; // - stl string; // - stl vector, list, deque, set, multiset, map, multimap; // - allowed arguments for stl containers are: simple data types, string, object, pointer on object; // Any other data member can not be (yet) read from xml file and write to xml file.; //; // If data member of class is private or protected, it can not be accessed via; // member name. Two alternative way is supported. First, if for class member fValue; // exists function GetValue(), it will be used to get value from the class, and if; // exists SetValue(), it will be used to set appropriate data member. Names of setter; // and getter methods can be specified in comments filed like:; //; // int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}; //; // If getter or setter methods does not available, address to data member will be; // calculated as predefined offset to object start address. In that case generated code; // should be used only on the same ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx:1979,simpl,simple,1979,io/xml/src/TXMLPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/xml/src/TXMLPlayer.cxx,4,['simpl'],['simple']
Usability,"R""(%undo)""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp:4,undo,undo,4,interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,1,['undo'],['undo']
Usability,"R""(; <html>; <head>; <meta charset='utf-8'/>; <style>; span.d { color: red; }; span.u { color: #cc00cc; }; span.i { color: green; }; span.m { font-weight: bold; }; span { font-weight: normal; color: black; }; div.code {; width: 48%;; height: 98%;; overflow: scroll;; float: left;; padding: 0 0 0.5% 0.5%;; border: solid 2px LightGrey;; border-radius: 5px;; }; </style>; </head>; <script type='text/javascript'>; highlightStack = []; function clearHighlight() {; while (highlightStack.length) {; var [l, r] = highlightStack.pop(); document.getElementById(l).style.backgroundColor = 'inherit'; if (r[1] != '-'); document.getElementById(r).style.backgroundColor = 'inherit'; }; }; function highlight(event) {; var id = event.target['id']; doHighlight(id); }; function doHighlight(id) {; clearHighlight(); source = document.getElementById(id); if (!source.attributes['tid']); return; var mapped = source; while (mapped && mapped.parentElement && mapped.attributes['tid'].value.substr(1) === '-1'); mapped = mapped.parentElement; var tid = null, target = null; if (mapped) {; tid = mapped.attributes['tid'].value; target = document.getElementById(tid); }; if (source.parentElement && source.parentElement.classList.contains('code')); return; source.style.backgroundColor = 'lightgrey'; source.scrollIntoView(); if (target) {; if (mapped === source); target.style.backgroundColor = 'lightgrey'; target.scrollIntoView(); }; highlightStack.push([id, tid]); location.hash = '#' + id; }; function scrollToBoth() {; doHighlight(location.hash.substr(1)); }; function changed(elem) {; return elem.classList.length == 0; }; function nextChangedNode(prefix, increment, number) {; do {; number += increment; var elem = document.getElementById(prefix + number); } while(elem && !changed(elem)); return elem ? number : null; }; function handleKey(e) {; var down = e.code === ""KeyJ""; var up = e.code === ""KeyK""; if (!down && !up); return; var id = highlightStack[0] ? highlightStack[0][0] : 'R0'; var oldelem = document.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp:442,clear,clearHighlight,442,interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-diff/ClangDiff.cpp,2,['clear'],['clearHighlight']
Usability,"R""(; struct SimpleEnumValue {; const char *Name;; unsigned Value;; };. struct SimpleEnumValueTable {; const SimpleEnumValue *Table;; unsigned Size;; };; )""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:12,Simpl,SimpleEnumValue,12,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,3,['Simpl'],"['SimpleEnumValue', 'SimpleEnumValueTable']"
Usability,"R""(___; _Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_. ### Describe the bug; <!--; A clear and concise description of what the wrong behavior is.; -->; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. ### Setup; )""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:259,clear,clear,259,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,2,['clear'],['clear']
Usability,"R""CODE(::Process(Long64_t entry); {; // The Process() function is called for each entry in the tree (or possibly; // keyed object in the case of PROOF) to be processed. The entry argument; // specifies which entry in the currently loaded tree is to be processed.; // When processing keyed objects with PROOF, the object is already loaded; // and is available via the fObject pointer.; //; // This function should contain the \""body\"" of the analysis. It can contain; // simple or elaborate selection criteria, run algorithms on the data; // of the event and typically fill histograms.; //; // The processing can be stopped by calling Abort().; //; // Use fStatus to set the return value of TTree::Process().; //; // The return value is currently not used. fReader.SetLocalEntry(entry);. return true;; }. void )CODE""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx:470,simpl,simple,470,tree/treeplayer/src/TTreeReaderGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderGenerator.cxx,1,['simpl'],['simple']
Usability,"Smooth; /// - 7 = YIQ Modulo; /// - 8 = HVS Smooth; /// - 9 = HVS Modulo; ///; /// This function does not apply on Simple display modes group. Default; /// value is 0. Example:; ///; /// h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");; ///; /// choose CMY Modulo to paint the ""h2"" histogram.; ///; /// lp(x,y,z) set the light position.; /// In Light and LightHeight display modes groups the color palette is; /// calculated according to the fictive light source position in 3-d space.; /// Using this function one can change the position of the source and thus; /// to achieve various graphical effects. This function does not apply for; /// Simple and Height display modes groups. Default is:; /// lp(1000,1000,100).; ///; /// s(shading,shadow) allows to set the shading.; /// The picture's surface is composed of triangles. If desired the edges of; /// the neighbouring triangles can be smoothed (shaded). If desired the; /// display of the shadow can be painted as well. The function does not apply; /// for Simple display modes group. The possible values for shading are:; ///; /// - 0 = Not Shaded; /// - 1 = Shaded; ///; /// The possible values for shadow are:; ///; /// - 0 = Shadows are not painted; /// - 1 = Shadows are painted; ///; /// Default values: s(1,0); ///; /// b(bezier) set the Bezier smoothing.; /// For Simple display modes group and for Grid, LinesX and LinesY display; /// modes one can smooth data using Bezier smoothing algorithm. The function; /// does not apply for other display modes groups and display modes. Possible; /// values are:; ///; /// - 0 = No bezier smoothing; /// - 1 = Bezier smoothing; ///; /// Default value is: b(0); ///; /// cw(width) set the contour width.; /// This function applies only for the Contours display mode. One can change; /// the width between horizontal slices and thus their density.; /// Default value: cw(50); ///; /// lhw(weight) set the light height weight.; /// For LightHeight display modes group one can change the weight between; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:6951,Simpl,Simple,6951,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"System->SetIncludePath(""-I$ROOTSYS/include; /// -I$HOME/mypackage/include"");; /// root[2] .x myfunc.C++(10,20);; /// ~~~; /// The user may sometimes try to compile a script before it has loaded all the; /// needed shared libraries. In this case we want to be helpful and output a; /// list of the unresolved symbols. So if the loading of the created shared; /// library fails, we will try to build a executable that contains the; /// script. The linker should then output a list of missing symbols.; ///; /// To support this we provide a TSystem::SetMakeExe() function, that sets the; /// directive telling how to create an executable. The loader will need; /// to be informed of all the libraries available. The information about; /// the libraries that has been loaded by .L and TSystem::Load() is accessible; /// to the script compiler. However, the information about; /// the libraries that have been selected at link time by the application; /// builder (like the root libraries for root.exe) are not available and need; /// to be explicitly listed in fLinkedLibs (either by default or by a call to; /// TSystem::SetLinkedLibs()).; ///; /// To simplify customization we could also add to the .rootrc support for the; /// variables; /// ~~~ {.cpp}; /// Unix.*.Root.IncludePath: -I$ROOTSYS/include; /// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ///; /// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; /// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; /// ~~~; /// And also support for MakeSharedLibs() and MakeExe().; ///; /// (the ... have to be replaced by the actual values and are here only to; /// shorten this comment).; ///; /// Note that the default behavior is to remove libraries when closing ROOT,; /// ie TSystem::CleanCompiledMacros() is called in the TROOT destructor.; /// The default behavior of .L script.C+ is the opposite one, leaving things; /// after closing, without removing. In other words, .L always passes the 'k'; /// option behind the scenes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:5174,simpl,simplify,5174,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['simpl'],['simplify']
Usability,"TEveFrameBox). Base-class for displaying a digit collection.; Provides common services for:; - specifying signal / color per digit;; - specifying object reference per digit;; - controlling palette and thresholds (external object TEveRGBAPalette);; - showing a frame around the digits (external object TEveFrameBox);; - specifying transformation matrix for the whole collection;; by data-member of class TEveTrans. Use method DigitId(TObject* id) to assign additional identification; to the last created digit. By calling SetOwnIds(kTRUE) tje; digit-set becomes the owner of the assigned objects and deletes; them on destruction.; Note that TRef is used for referencing the objects and if you; instantiate the objects just to pass them to digit-set you should; also call TProcessID::Get/SetObjectCount() at the beginning / end; of processing of an event. See documentation for class TRef, in; particular section 'ObjectNumber'. If you use value-is-color mode and want to use transparency, set; the transparency to non-zero value so that GL-renderer will be; properly informed. If you want to use single color for all elements call:; ~~~ {.cpp}; UseSingleColor(); ~~~; Palette controls will not work in this case. A pointer to a rectangle / box of class TEveFrameBox can be set via; ~~~ {.cpp}; void SetFrame(TEveFrameBox* b);; ~~~; A single TEveFrameBox can be shared among several digit-sets (it is; reference-counted). The following flags affect how the frame-box will drawn; and used for selection and highlight:; ~~~ {.cpp}; Bool_t fSelectViaFrame;; Bool_t fHighlightFrame;; ~~~; TEveDigitSet is sub-classed from TEveSecondarySelectable -- this means; individual digits can be selected. By calling:; ~~~ {.cpp}; TEveSecondarySelectable::SetAlwaysSecSelect(kTRUE);; ~~~; one can enforce immediate feedback (highlight, tooltip and select on normal; left-mouse click) on given digit-set. See also:; ~~~ {.cpp}; TEveQuadSet: rectangle, hexagon or line per digit; TEveBoxSet a 3D box per digit; ~~~; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveDigitSet.cxx:1993,feedback,feedback,1993,graf3d/eve/src/TEveDigitSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveDigitSet.cxx,1,['feedback'],['feedback']
Usability,"TS. *; *************************************************************************/; /** \class TH1Editor; \ingroup ged. Editor for changing TH1 histogram attributes, rebinning & fitting.; For all possible draw options (there are a few which are not implementable; in graphical user interface) see THistPainter::Paint. These changes can be made via the TH1Editor:; Style Tab:; 'Line' : change Line attributes (color, thickness); see TAttLineEditor; 'Fill' : change Fill attributes (color, pattern); see TAttFillEditor; 'Title' : TextEntry: set the title of the histogram; 'Histogram': change the draw options of the histogram; 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram; according to the Plot dimension there will be; different drawing possibilities (ComboBoxes/; CheckBoxes); 2d Plot:; 'Error' : ComboBox: add different error bars to the histogram; (no errors, simple, ..., see THistPainter::Paint; 'Add' : ComboBox: further things which can be added to the; histogram (None, simple/smooth line, fill area; 'Simple Drawing': CheckBox: draw a simple histogram without; errors (= ""HIST"" drawoption). In combination with; some other draw options an outer line is drawn on; top of the histogram; 'Show markers': CheckBox: draw a marker on to of each bin (=""P""; drawoption); 'Draw bar chart': CheckBox: draw a bar chart (=""B"" drawoption); change the Fill Color with Fill in the Style Tab; => will show Bar menue in the Style Tab; 'Bar option': CheckBox: draw a bar chart (=""BAR"" drawoption); => will show Bar menue in the Style Tab; 3d Plot:; 'Type' : ComboBox: set histogram type Lego-Plot or Surface; draw(Lego, Lego1.2, Surf, Surf1..5); see THistPainter::Paint; 'Coords' : ComboBox: set the coordinate system (Cartesian, ..; Spheric) see THistPainter::Paint; 'Error' : see 2D plot; 'Bar' : change the bar attributes; 'W' : change Bar Width; 'O' : change Bar Offset; 'Percentage': specifies the percentage of the bar which is drawn; brighter and darker (10% == BAR1 drawoption); 'Horizont",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TH1Editor.cxx:1322,simpl,simple,1322,gui/ged/src/TH1Editor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TH1Editor.cxx,3,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"The RResultPtr returned by Book will point to this object. Note that this method can be called; /// _before_ Initialize(), because the RResultPtr is constructed before the event loop is started.; /// * `void Initialize()`: this method is called once before starting the event-loop. Useful for setup operations.; /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; /// * `void InitTask(TTreeReader *, unsigned int slot)`: each working thread shall call this method during the event; /// loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader; /// that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations; /// it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; /// * `void Exec(unsigned int slot, ColumnTypes...columnValues)`: each working thread shall call this method; /// during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; /// this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; /// the requested columns for the particular entry being processed.; /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; /// diagnostics, SaveGraph(), etc.; ///; /// ### Optional methods; ///; /// If these methods are implemented they enable extra functionality as per the description below.; ///; /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must return the value of the partial result of this action for the give",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:2546,simpl,simple,2546,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['simpl'],['simple']
Usability,"_INDEX */; /*******************************************************************************; * Section 5: SIMPLIFIED API; *******************************************************************************; *; * Please read the documentation in libpng-manual.txt (TODO: write said; * documentation) if you don't understand what follows.; *; * The simplified API hides the details of both libpng and the PNG file format; * itself. It allows PNG files to be read into a very limited number of; * in-memory bitmap formats or to be written from the same formats. If these; * formats do not accommodate your needs then you can, and should, use the more; * sophisticated APIs above - these support a wide variety of in-memory formats; * and a wide variety of sophisticated transformations to those formats as well; * as a wide variety of APIs to manipulate ancillary information.; *; * To read a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure (see below) on the stack, set the; * version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL; * (this is REQUIRED, your program may crash if you don't do it.); * 2) Call the appropriate png_image_begin_read... function.; * 3) Set the png_image 'format' member to the required sample format.; * 4) Allocate a buffer for the image and, if required, the color-map.; * 5) Call png_image_finish_read to read the image and, if required, the; * color-map into your buffers.; *; * There are no restrictions on the format of the PNG input itself; all valid; * color types, bit depths, and interlace methods are acceptable, and the; * input image is transformed as necessary to the requested in-memory format; * during the png_image_finish_read() step. The only caveat is that if you; * request a color-mapped image from a PNG that is full-color or makes; * complex use of an alpha channel the transformation is extremely lossy and the; * result may look terrible.; *; * To write a PNG file using the simplified API:; *; * 1) Declare a ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:925,simpl,simplified,925,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['simpl'],['simplified']
Usability,"__________________________________________________________________; /**; Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..) in ROOT.; Plug-in's exist in ROOT to be able to instantiate the derived classes without linking the library; using the static function ROOT::Math::Factory::CreateMinimizer. Here is the list of all possible minimizers and their respective methods (algorithms) that can be instantiated:; The name shown below can be used to create them. More documentation can be found in the respective class. - Minuit (class TMinuitMinimizer); - Migrad (default); - MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of [Minuit tutorial on Function Minimization](https://seal.web.cern.ch/documents/minuit/mntutorial.pdf)); - Simplex; - Minimize (a combination of Simplex + Migrad); - Minimize; - Scan; - Seek. - Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); - Migrad (default); - Simplex; - Minimize; - Fumili (Fumili2); - Scan. - Fumili (class TFumiliMinimizer). - GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with `mathmore` support; - BFGS2 (Default); - BFGS; - ConjugateFR; - ConjugatePR; - SteepestDescent. - GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built `mathmore` support. - GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with `mathmore` support. - Genetic (class ROOT::Math::GeneticMinimizer). - RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with `r` support; - BFGS (default); - L-BFGS-S; - Nelder-Mead; - CG; - and more methods, see the Details in the documentation of the function `optimix` of the [optmix R package](https://cran.r-project.org/web/packages/optimx/optimx.pdf). The Minimizer class provides the interface to perform the minimization including. In addition to provide the API for function minimization (via ROOT::Math::Minimizer:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h:1174,Simpl,Simplex,1174,math/mathcore/inc/Math/Minimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h,1,['Simpl'],['Simplex']
Usability,"above.; *; * The mesh keeps global lists of all vertices, faces, and edges,; * stored as doubly-linked circular lists with a dummy header node.; * The mesh stores pointers to these dummy headers (vHead, fHead, eHead).; *; * The circular edge list is special; since half-edges always occur; * in pairs (e and e->Sym), each half-edge stores a pointer in only; * one direction. Starting at eHead and following the e->next pointers; * will visit each *edge* once (ie. e or e->Sym, but not both).; * e->Sym stores a pointer in the opposite direction, thus it is; * always true that e->Sym->next->Sym->next == e.; *; * Each vertex has a pointer to next and previous vertices in the; * circular list, and a pointer to a half-edge with this vertex as; * the origin (NULL if this is the dummy header). There is also a; * field ""data"" for client data.; *; * Each face has a pointer to the next and previous faces in the; * circular list, and a pointer to a half-edge with this face as; * the left face (NULL if this is the dummy header). There is also; * a field ""data"" for client data.; *; * Note that what we call a ""face"" is really a loop; faces may consist; * of more than one loop (ie. not simply connected), but there is no; * record of this in the data structure. The mesh may consist of; * several disconnected regions, so it may not be possible to visit; * the entire mesh by starting at a half-edge and traversing the edge; * structure.; *; * The mesh does NOT support isolated vertices; a vertex is deleted along; * with its last edge. Similarly when two faces are merged, one of the; * faces is deleted (see __gl_meshDelete below). For mesh operations,; * all face (loop) and vertex pointers must not be NULL. However, once; * mesh manipulation is finished, __gl_MeshZapFace can be used to delete; * faces of the mesh, one at a time. All external faces can be ""zapped""; * before the mesh is returned to the client; then a NULL face indicates; * a region which is not part of the output polygon.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/mesh.h:2819,simpl,simply,2819,graf3d/eve7/glu/mesh.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/glu/mesh.h,1,['simpl'],['simply']
Usability,"aded, with; /// shadow.; ///; /// #### Function: TSpectrum2Painter::SetBezier(Int_t bezier); ///; /// For kModeGroupSimple display modes group and for kDisplayModeGrid,; /// kDisplayModeLinesX >and kDisplayModeLinesY display modes one; /// can smooth data using Bezier smoothing algorithm. The function does not apply; /// for other display modes groups and display modes. Possible values are:; ///; /// - ` kNoBezierInterpol`; /// - ` kBezierInterpol`; ///; /// Default value is:; ///; /// - ` bezier = kNoBezierInterpol.`; ///; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels with Bezier; /// smoothing.; ///; /// #### Function: TSpectrum2Painter::SetContourWidth(Int_t width); ///; /// This function applies only for kDisplayModeContours display mode.; /// One can change the width between horizontal slices and thus their density.; /// Default value: width=50.; /// \image html spectrumpainter037.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels. Width between; /// slices was set to 30.; ///; /// #### Function: TSpectrum2Painter::SetLightHeightWeight(Double_t weight); ///; /// For kModeGroupLightHeight display modes group one can change the; /// weight between both shading algorithm. The function does not apply for other; /// display modes groups. Default value is: weight=0.5.; /// \image html spectrumpainter038.jpg; ///; /// Light - height modes group, display mode = surface, 64 x 64 channels.; /// The weight between both shading algorithms is set to 0.7.; ///; /// #### Function: TSpectrum2Painter::SetChanMarks(Int_t enable,Int_t color,Int_t width,Int_t height,Int_t style); /// In addition to the surface drawn using any above given algorithm one can display; /// channel marks. One can control the color as well as the width, height; /// (in pixels) and the style of the marks. The parameter enable can be set to:; ///; /// - `kChannelMarksNotDrawn`; /// - `kChannelMarksDrawn.`; ///; /// The ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:12853,Simpl,Simple,12853,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"advisable however to define these properties just; after the first creation of a volume namespace, since in case of volume families; any new member created by the modeler inherits these properties. In order to provide navigation features, volumes have to be able to find; the proper container of any point defined in the local reference frame. This; can be the volume itself, one of its positioned daughter volumes or none if; the point is actually outside. On the other hand, volumes have to provide also; other navigation methods such as finding the distances to its shape boundaries; or which daughter will be crossed first. The implementation of these features; is done at shape level, but the local mother-daughters management is handled; by volumes that builds additional optimisation structures upon geometry closure.; In order to have navigation features properly working one has to follow the; general rules for building a valid geometry (see TGeoManager class). Now let's make a simple volume representing a copper wire. We suppose that; a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm; and a half-length dZ=1cm :. ~~~ {.cpp}; TGeoTube *tube = new TGeoTube(""wire_tube"", 0, 0.01, 1);; ~~~. One may omit the name for the shape if no retrieving by name is further needed; during geometry building. The same shape can be shared by different volumes; having different names and materials. Now let's make the volume for our wire.; The prototype for volumes constructor looks like :. TGeoVolume::TGeoVolume(const char *name, TGeoShape *shape, TGeoMedium *med). Since TGeoTube derives from the base shape class, we can provide it to the volume; constructor :. ~~~ {.cpp}; TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"", tube, ptrCOPPER);; ~~~. Do not bother to delete neither the media, shapes or volumes that you have; created since all will be automatically cleaned on exit by the manager class.; I",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:2922,simpl,simple,2922,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['simpl'],['simple']
Usability,"all; (so that its Poisson uncertainty can be neglected).; 2 The number of events in each bin is much smaller than the total; number of events in each template (so that multinomial; uncertainties can be replaced with Poisson uncertainties). Biased fit uncertainties may result if these conditions are not fulfilled; (see e.g. arXiv:0803.2711). ## Instantiation; A fit object is instantiated through; TFractionFitter* fit = new TFractionFitter(data, mc);; A number of basic checks (intended to ensure that the template histograms; represent the same ""kind"" of distribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters (the; template fractions) declared (initially unbounded). ## Applying constraints; Fit parameters can be constrained through. fit->Constrain(parameter #, lower bound, upper bound);. Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function. fit->Unconstrain(parameter #). is also provided to simplify this. ## Setting parameter values; The function. ROOT::Fit::Fitter* fitter = fit->GetFitter();. is provided for direct access to the ROOT::Fit::Fitter object. This allows to; set and fix parameter values, limits and set step sizes directly via. fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);. ## Restricting the fit range; The fit range can be restricted through. fit->SetRangeX(first bin #, last bin #);; and freed using. fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using. fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also. fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through. fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corre",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx:3062,simpl,simplify,3062,hist/hist/src/TFractionFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFractionFitter.cxx,1,['simpl'],['simplify']
Usability,"am; 10000 times with a default gaussian distribution of mean 0 and sigma 1:; ~~~ {.cpp}; TH1F h1(""h1"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; ~~~; TH1::GetRandom can be used to return a random number distributed; according to the contents of a histogram. \anchor making-a-copy; ### Making a copy of a histogram; Like for any other ROOT object derived from TObject, one can use; the Clone() function. This makes an identical copy of the original; histogram including all associated errors and functions, e.g.:; ~~~ {.cpp}; TH1F *hnew = (TH1F*)h->Clone(""hnew"");; ~~~. \anchor normalizing; ### Normalizing histograms. One can scale a histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. \anchor drawing-histograms; ## Drawing histograms. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; Many drawing options are supported.; See THistPainter::Paint() for more details. The same histogram can be drawn with different options in different pads.; When a histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If a histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of a histogram in a pad, one can use; ~~~ {.cpp}; h->DrawCopy();; ~~~; This makes a clone (see Clone below) of the histogram. Once the clone; is drawn, the original histogram may be modified or deleted without; affecting the aspect of the clone. One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular; value for the maximum or the minimum scale on the plot. (For 1-D; histograms this means the y-axis, while for 2-D histogr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:17070,usab,usable,17070,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['usab'],['usable']
Usability,"ame and ml method name and title.; * You can to display the results calling the method Show, get the ROC-integral with the; * method GetROCIntegral or get the TMVA::ROCCurve object calling GetROC.; \ingroup TMVA; */; /*! \class TMVA::Classification; * Class to perform two class classification.; * The first step before any analysis is to prepare the data,; * to do that you need to create an object of TMVA::DataLoader,; * in this object you need to configure the variables and the number of events; * to train/test.; * The class TMVA::Experimental::Classification needs a TMVA::DataLoader object,; * optional a TFile object to save the results and some extra options in a string; * like ""V:Color:Transformations=I;D;P;U;G:Silent:DrawProgressBar:ModelPersistence:Jobs=2"" where:; * V = verbose output; * Color = coloured screen output; * Silent = batch mode: boolean silent flag inhibiting any output from TMVA; * Transformations = list of transformations to test.; * DrawProgressBar = draw progress bar to display training and testing.; * ModelPersistence = to save the trained model in xml or serialized files.; * Jobs = number of ml methods to test/train in parallel using MultiProc, requires to call Evaluate method.; * Basic example.; * \code; void classification(UInt_t jobs = 2); {; TMVA::Tools::Instance();. TFile *input(0);; TString fname = ""./tmva_class_example.root"";; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"");; }; if (!input) {; std::cout << ""ERROR: could not open data file"" << std::endl;; exit(1);; }. // Register the training and test trees. TTree *signalTree = (TTree *)input->Get(""TreeS"");; TTree *background = (TTree *)input->Get(""TreeB"");. TMVA::DataLoader *dataloader = new TMVA::DataLoader(""dataset"");. dataloader->AddVariable(""myvar1 := var1+var2"", 'F');; dataloader->AddVariable(""myv",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h:1232,progress bar,progress bar,1232,tmva/tmva/inc/TMVA/Classification.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Classification.h,1,['progress bar'],['progress bar']
Usability,"an extension of GB 2312, consisting of:; * 1. GB 6345.1-86 corrections:; * Two corrections to GB 2312, at 0x2367 and 0x6F71.; * 2. GB 6345.1-86 additions:; * - 6 new full-width pinyin characters in row 0x28.; * - ISO646-CN in row 0x2A.; * - 32 half-width pinyin characters in row 0x2B.; * 3. GB 8565.2-88 additions:; * - 50 characters in row 0x2D.; * - 92 characters in row 0x2E.; * - 93 characters in row 0x2F.; * - 470 characters in rows 0x7A-0x7E.; * 4. ISO-IR-165 additions:; * - 22 characters in row 0x26.; * - 94 characters in row 0x2C.; * - 44 new characters in row 0x2D.; * - 1 new character in row 0x2F.; *; * The conversion table was created from the following sources:; * Ad 1. The 0x2367 correction is already integrated in the unicode.org; * GB2312.TXT table. The 0x6F71 mapping is the same in the unicode.org; * GB2312.TXT and UNIHAN.TXT table and in Koichi Yasuoka's Uni2GB table,; * so we assume it's correct.; * The unicode.org UNIHAN.TXT table about GB 8565 is not usable: it has; * extraneous code points at rows 0x28, 0x2C, 0x2D. Note also that it does; * not list the 69 non-hanzi in row 0x2F. Moreover, it has the characters; * 0x2F7A-0x2F7D shifted down by one to 0x2F79-0x2F7C.; * Therefore we take the GB8565 and ISO-IR-165 data from Koichi Yasuoka's; * Uni2GB table.; * Ad 1. Yasuoka maps 0x2367 to U+0261 (small script g) and 0x2840 to U+FF47; * (full-width small normal g). While coherent with ISO-IR's 165.pdf,; * this disagrees with Ken Lunde's book: He says that ISO-IR-165; * includes the GB6345 correction, i.e. maps 0x2367 to U+FF47 or U+0067; * and _not_ to U+0261 (small script g).; * To overcome the confusion, we just map both 0x2367 and 0x2840 to; * U+FF47.; * Ad 2. Row 0x28: Add a mapping from 0x283F to U+01F9.; * Row 0x2A: Mapping is well-known, also present in Koichi Yasuoka's; * table.; * Row 0x2B: Typed in by hand from appendix E in Ken Lunde's book.; * When converting from Unicode to ISO-IR-165, prefer the half-width; * range 0x2B{21..40} to the full",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/iconv/isoir165.h:1956,usab,usable,1956,graf2d/win32gdk/gdk/src/iconv/isoir165.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/iconv/isoir165.h,1,['usab'],['usable']
Usability,"an make repeated calls to AddObject(), with TBuffer3D; containing the same fID, and different fLocalMaster placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the fLocalMaster transform and the; fColor and fTransparency attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ## Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via a TPad; repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ## Physical IDs. TVirtualViewer3D pr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:9109,simpl,simply,9109,core/base/src/TVirtualViewer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx,1,['simpl'],['simply']
Usability,"an node. Since the shape; components may also be composites, they will also contain binary Boolean; nodes branching out other two shapes in the hierarchy. Any such branch; ends-up when the final leaves are no longer composite shapes, but basic; primitives. The figure shows the composite shapes structure. \image html geom_composite_shape001.png ""The composite shapes structure"" width=600px. Suppose that A, B, C and D represent basic shapes, we will illustrate; how the internal representation of few combinations look like. We do; this only for understanding how to create them in a proper way, since; the user interface for this purpose is in fact very simple. We will; ignore for the time being the positioning of components. The definition; of a composite shape takes an expression where the identifiers are shape; names. The expression is parsed and decomposed in 2 sub-expressions and; the top-level Boolean operator. 1. Union: `A+B+C`. Just to illustrate the Boolean expression parsing and the composite; shape structure, let's take a simple example. We will describe the union; of A, B and C. Both union operators are at the same level. Since:. `A+B+C = (A+B)+C = A+(B+C)`. The first` (+)` is taken as separator, hence the expression split in:; `A` and `(B+C)`. A Boolean node of type **`TGeoUnion`**`(""A"",""B+C"")` is; created. This tries to replace the 2 expressions by actual pointers to; corresponding shapes. The first expression (A) contains no operators; therefore is interpreted as representing a shape. The shape named ""A"" is; searched into the list of shapes handled by the manager class and stored; as the ""left"" shape in the Boolean union node. Since the second; expression is not yet fully decomposed, the ""right"" shape in the; combination is created as a new composite shape. This will split at its; turn B+C into B and C and create a **`TGeoUnion`**`(""B"",""C"")`. The B and; C identifiers will be looked for and replaced by the pointers to the; actual shapes into the new node. Fin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCompositeShape.cxx:2978,simpl,simple,2978,geom/geom/src/TGeoCompositeShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCompositeShape.cxx,1,['simpl'],['simple']
Usability,"anchor changesbehaviour; ## Changes of behavior when using TChain and TEventList. The usage of TChain or TEventList have influence on the behaviour of the cache:. - Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. - Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning phase is started or restarted when:; - TTree automatically creates a cache.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTreeCache::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; - TTreeCache::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries.; - A 'cached' TChain switches over to a new file. \anchor cachemisses; ## Self-optimization in presence of cache misses. The TTreeCache can optimize its behavior on a cache miss. When; miss optimization is enabled (see the SetOptimizeMisses method),; it tracks all branches utilized after the learning phase which caused a cache; miss.; When one cache miss occurs, all the utilized branches are be prefetched; for that event. This optimization utilizes the observation that infrequently; accessed branches are often accessed together.; An example scenario where such behavior is desirable, is an analysis where; a set of collections are read only for a few events in which a certain; condition is respected, e.g. a trigger fired. ### Additional memory and CPU usage when optimizing for cache misses; When this mode is enabled, the memory dedicated to the cache can increase; by at most a factor two in the case of cache miss.; Ad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:4548,learn,learning,4548,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,2,['learn'],['learning']
Usability,"and `PMC` (Palette Marker Color).; When one of these options is given to `TGraph::Draw` the graph get its color; from the current color palette defined by `gStyle->SetPalette(...)`. The color; is determined according to the number of objects having palette coloring in; the current pad. Begin_Macro(source); ../../../tutorials/graphs/graphpalettecolor.C; End_Macro. Begin_Macro(source); ../../../tutorials/graphs/multigraphpalettecolor.C; End_Macro. \anchor GrP6; ### Reverse graphs' axis. \since **ROOT version 6.09/03**. When a TGraph is drawn, the X-axis is drawn with increasing values from left to; right and the Y-axis from bottom to top. The two options `RX` and `RY` allow to; change this order. The option `RX` allows to draw the X-axis with increasing values; from right to left and the `RY` option allows to draw the Y-axis with increasing; values from top to bottom. The following example illustrate how to use these options. Begin_Macro(source); {; auto c = new TCanvas();; c->Divide(2,1);; auto g = new TGraphErrors();; g->SetTitle(""Simple Graph"");. g->SetPoint(0,-4,-3);; g->SetPoint(1,1,1);; g->SetPoint(2,2,1);; g->SetPoint(3,3,4);; g->SetPoint(4,5,5);. g->SetPointError(0,1.,2.);; g->SetPointError(1,2,1);; g->SetPointError(2,2,3);; g->SetPointError(3,3,2);; g->SetPointError(4,4,5);. g->GetXaxis()->SetNdivisions(520);. g->SetMarkerStyle(21);; c->cd(1); gPad->SetGrid(1,1);; g->Draw(""APL"");. c->cd(2); gPad->SetGrid(1,1);; g->Draw(""A RX RY PL"");; }; End_Macro. \anchor GrP7; ### Graphs in logarithmic scale. Like histograms, graphs can be drawn in logarithmic scale along X and Y. When; a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy(); the points building the graph are converted into logarithmic scale. But **only** the; points not the lines connecting them which stay linear. This can be clearly seen; on the following example:. Begin_Macro(source); {; // A graph with 3 points; Double_t xmin = 750.;; Double_t xmax = 1000;; auto g = new TGraph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:18189,Simpl,Simple,18189,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['Simpl'],['Simple']
Usability,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2009,undo,undo,2009,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,3,['undo'],['undo']
Usability,"anvas may be subdivided into independent graphical areas: the __Pads__.; A canvas has a default pad which has the name of the canvas itself.; An example of a Canvas layout is sketched in the picture below. \image html gpad_canvas.png. This canvas contains two pads named P1 and P2. Both Canvas, P1 and P2 can be; moved, grown, shrunk using the normal rules of the Display manager. Once objects have been drawn in a canvas, they can be edited/moved by pointing; directly to them. The cursor shape is changed to suggest the type of action that; one can do on this object. Clicking with the right mouse button on an object; pops-up a contextmenu with a complete list of actions possible on this object. A graphical editor may be started from the canvas ""View"" menu under the menu; entry ""Toolbar"". An interactive HELP is available by clicking on the HELP button at the top right; of the canvas. It gives a short explanation about the canvas' menus. A canvas may be automatically divided into pads via `TPad::Divide`. At creation time, no matter if in interactive or batch mode, the constructor; defines the size of the canvas window (including the size of the window; manager's decoration). To define precisely the graphics area size of a canvas in; the interactive mode, the following four lines of code should be used:; ~~~ {.cpp}; {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h + (h - c->GetWh()));; }; ~~~; and in the batch mode simply do:; ~~~ {.cpp}; c->SetCanvasSize(w,h);; ~~~. If the canvas size exceeds the window size, scroll bars will be added to the canvas; This allows to display very large canvases (even bigger than the screen size). The; Following example shows how to proceed.; ~~~ {.cpp}; {; auto c = new TCanvas(""c"",""c"");; c->SetCanvasSize(1500, 1500);; c->SetWindowSize(500, 500);; }; ~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Canvas default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx:1716,simpl,simply,1716,graf2d/gpad/src/TCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TCanvas.cxx,1,['simpl'],['simply']
Usability,"ation; * - Improved 32-bit viability; *; * Speed analysis methodology is explained here:; *; * https://fastcompression.blogspot.com/2019/03/presenting-xxh3.html; *; * In general, expect XXH3 to run about ~2x faster on large inputs and >3x; * faster on small ones compared to XXH64, though exact differences depend on; * the platform.; *; * The algorithm is portable: Like XXH32 and XXH64, it generates the same hash; * on all platforms.; *; * It benefits greatly from SIMD and 64-bit arithmetic, but does not require it.; *; * Almost all 32-bit and 64-bit targets that can run XXH32 smoothly can run; * XXH3 at competitive speeds, even if XXH64 runs slowly. Further details are; * explained in the implementation.; *; * Optimized implementations are provided for AVX512, AVX2, SSE2, NEON, POWER8,; * ZVector and scalar targets. This can be controlled with the XXH_VECTOR macro.; *; * XXH3 offers 2 variants, _64bits and _128bits.; * When only 64 bits are needed, prefer calling the _64bits variant, as it; * reduces the amount of mixing, resulting in faster speed on small inputs.; *; * It's also generally simpler to manipulate a scalar return type than a struct.; *; * The 128-bit version adds additional strength, but it is slightly slower.; *; * The XXH3 algorithm is still in development.; * The results it produces may still change in future versions.; *; * Results produced by v0.7.x are not comparable with results from v0.7.y.; * However, the API is completely stable, and it can safely be used for; * ephemeral data (local sessions).; *; * Avoid storing values in long-term storage until the algorithm is finalized.; * XXH3's return values will be officially finalized upon reaching v0.8.0.; *; * After which, return values of XXH3 and XXH128 will no longer change in; * future versions.; *; * The API supports one-shot hashing, streaming mode, and custom secrets.; */; /* XXH3_64bits():; * default 64-bit variant, using default secret and default seed of 0.; * It's the fastest variant. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1505,simpl,simpler,1505,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['simpl'],['simpler']
Usability,"be; scaled with respect to each other, the maximum height can be influenced by SetBarWidth().; Deactivated, the height of the bin with the maximum content of each individual violin is; set to a constant value using SetBarWidth(). The static function will affect all violin-charts; in the running program. Default is true. Scaling between multiple violin-charts; (using ""same"" or THStack) is not supported, yet. ##### The zero indicator line; Typical for violin charts is a line in the background over the whole histogram indicating; the bins with zero entries. The zero indicator line can be activated with z=1. The line color; will always be the same as the fill-color of the histogram. ##### The Mean; The Mean is illustrated with the same mechanism as used for candle plots. Usually a circle is used. ##### Whiskers; The whiskers are illustrated by the same mechanism as used for candle plots. There is only one; difference. When using the simple whisker definition (w=1) and the zero indicator line (z=1), then; the whiskers will be forced to be solid (usually hashed). ##### Points; The points are illustrated by the same mechanism as used for candle plots. E.g. VIOLIN2 uses; better whisker definition (w=2) and outliers (p=1). ##### Other options; It is possible to combine all options of candle or violin plots with each other. E.g. a violin plot; including a box-plot. #### How to use the violin-plots drawing option. There are two predefined violin-plot representations:; - ""VIOLINX1"": Standard violin (histogram, mean, whisker over full distribution,; zero indicator line); - ""VIOLINX2"": Line VIOLINX1 both with better whisker definition + outliers. A solid fill style is recommended for this plot (as opposed to a hollow or; hashed style). Begin_Macro(source); {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; Int_t nx(6), ny(40);; double xmin(0.0), xmax(+6.0), ymin(0.0), ymax(+4.0);; auto hviolin = new TH2F(""hviolin"", ""Option VIOLIN example"", nx, xmin, xmax, ny, ymin, ymax);; TF1 f1(""f1""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:58746,simpl,simple,58746,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['simpl'],['simple']
Usability,"beding.; * This file is part of the Independent JPEG Group's software.; * For conditions of distribution and use, see the accompanying README file.; *; * This file contains a slow-but-accurate integer implementation of the; * forward DCT (Discrete Cosine Transform).; *; * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT; * on each column. Direct algorithms are also available, but they are; * much more complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide FDCT routines with various input sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 output DCT block.; *; * For N<8 we fill the remaining block coefficients with zero.; * For N>8 we apply a partial N-point FDCT on the input samples, computing; * just the lower 8 frequency coefficients and discarding the rest.; *; * We must scale the output coefficients of the N-point FDCT appropriately; * to the standard 8-point FDCT level by 8/N per 1-D pass. This scaling; * is folded into the constant multipliers (pass 2) and/or final/initial; * shifting.; *; * CAUTION: We rely on the FIX() macro except for the N=1,2,4,8 cases; * since there would be too many additional constants to pre-calcul",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c:1119,simpl,simple,1119,graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jfdctint.c,1,['simpl'],['simple']
Usability,"ber of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This can only be done for fixed-size arrays.; If the formula ends with ""!"", softmax functions are used for the output layer.; One defines the training and test datasets by TEventLists. Example:; ~~~ {.cpp}; TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; ~~~. Both the TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitly, or via; a string containing the formula to be used to define them, exactly as; for a TCut. The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() .; Learning methods are :. - TMultiLayerPerceptron::kStochastic,; - TMultiLayerPerceptron::kBatch,; - TMultiLayerPerceptron::kSteepestDescent,; - TMultiLayerPerceptron::kRibierePolak,; - TMultiLayerPerceptron::kFletcherReeves,; - TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either; with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight; is taken into account. Finally, one starts the training with; TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The; first argument is the number of epochs while option is a string that; can contain: ""text"" (simple text output) , ""graph""; (evoluting graphical training curves), ""update=X"" (step for; the text/graph output update) or ""+"" (will skip the; randomisation and start from the previous values). All combinations; are available. Example:; ~~~ {.cpp}; net.Train(100,""text, graph, update=10"");; ~~~. When the neural net is trained, it can be used; directly ( TMultiLayerPerceptron::Evalu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:7718,Learn,Learning,7718,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['Learn'],['Learning']
Usability,"ble_t &f, Double_t *u, Int_t flag);; /// ~~~; ///; /// #### Note on treatment of empty bins; ///; /// Empty bins, which have the content equal to zero AND error equal to zero,; /// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; /// since they affect the likelihood if the function value in these bins is not negligible.; /// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; /// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; /// In general, one should not fit a histogram with non-empty bins and zero errors.; ///; /// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; /// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; /// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; /// are corrected by the obtained chi2 value using this scaling expression:; /// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; /// no point errors.; ///; /// #### Excluding points; ///; /// You can use TF1::RejectPoint inside your fitting function to exclude some points; /// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; ///; ///; /// #### Warning when using the option ""0""; ///; /// When selecting the option ""0"", the fitted function is added to; /// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; /// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; ///; /// ~~~ {.cpp}; /// h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; /// h.Draw(); // function is not drawn; /// h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; /// h.Draw(); // function is visible again; /// ~~~; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:19457,undo,undo,19457,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['undo'],['undo']
Usability,"bled, the memory dedicated to the cache can increase; by at most a factor two in the case of cache miss.; Additionally, on the first miss of an event, we must iterate through all the; ""active branches"" for the miss cache and find the correct basket.; This can be potentially a CPU-expensive operation compared to, e.g., the; latency of a SSD. This is why the miss cache is currently disabled by default. \anchor examples; ## Example usages of TTreeCache. A few use cases are discussed below. A cache may be created with automatic; sizing when a TTree is used:. In some applications, e.g. central processing workflows of experiments, the list; of branches to read is known a priori. For these cases, the TTreeCache can be; instructed about the branches which will be read via explicit calls to the TTree; or TTreeCache interfaces.; In less streamlined applications such as analysis, predicting the branches which; will be read can be difficult. In such cases, ROOT I/O flags used branches; automatically when a branch buffer is read during the learning phase. In the examples below, portions of analysis code are shown.; The few statements involving the TreeCache are marked with `//<<<`. ### ROOT::RDataFrame and TTreeReader Examples. If you use RDataFrame or TTreeReader, the system will automatically cache the; best set of branches: no action is required by the user. ### TTree::Draw Example. The TreeCache is automatically used by TTree::Draw. The method knows; which branches are used in the query and it puts automatically these branches; in the cache. The entry range is also inferred automatically. ### TTree::Process and TSelectors Examples. The user must enable the cache and tell the system which branches to cache; and also specify the entry range. It is important to specify the entry range; in case only a subset of the events is processed to avoid wasteful caching. #### Reading all branches. ~~~ {.cpp}; TTree *T;; f->GetObject(T, ""mytree"");; auto nentries = T->GetEntries();; auto cac",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:6527,learn,learning,6527,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"br />; * Possible values: UseNone, UseOutlines, UseThumbs, UseOC<br />; * Default value: UseNone<br/>; * <br />; * <b>Direction</b> <i>(string)</i><br />; * Possible values: L2R, R2L<br />; * Default value: L2R.<br />; * <br />; * <b>ViewArea</b> <i>(string)</i><br />; * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />; * Default value: CropBox.<br />; * <br />; * <b>ViewClip</b> <i>(string)</i><br />; * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />; * Default value: CropBox<br />; * <br />; * <b>PrintArea</b> <i>(string)</i><br />; * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />; * Default value: CropBox<br />; * <br />; * <b>PrintClip</b> <i>(string)</i><br />; * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />; * Default value: CropBox.<br />; * <br />; * <b>PrintScaling</b> <i>(string)</i><br />; * Possible values: AppDefault, None<br />; * Default value: AppDefault.<br />; * <br />; * <b>Duplex</b> <i>(string)</i><br />; * Possible values: Simplex, DuplexFlipLongEdge, DuplexFlipShortEdge; * Default value: none<br />; * <br />; * <b>PickTrayByPDFSize</b> <i>(boolean)</i><br />; * Default value: false<br />; * <br />; * <b>PrintPageRange</b> <i>(Array)</i><br />; * Example: [[1,5], [7,9]]<br />; * Default value: as defined by PDF viewer application<br />; * <br />; * <b>NumCopies</b> <i>(Number)</i><br />; * Possible values: 1, 2, 3, 4, 5<br />; * Default value: 1<br />; * <br />; * For more information see the PDF Reference, sixth edition on Page 577; * @param {boolean} doReset True to reset the settings; * @function; * @returns jsPDF jsPDF-instance; * @example; * var doc = new jsPDF(); * doc.text('This is a test', 10, 10); * doc.viewerPreferences({'FitWindow': true}, true); * doc.save(""viewerPreferences.pdf""); *; * // Example printing 10 copies, using cropbox, and hiding UI.; * doc.viewerPreferences({; * 'HideWindowUI': true,; * 'PrintArea': 'CropBox',; * 'NumCopies': 10; * }); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:1905,Simpl,Simplex,1905,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Simpl'],['Simplex']
Usability,"btained from inverting the cumulative posterior distribution.; This calculator works then only for model with a single parameter of interest.; The model can instead have several nuisance parameters which are integrated (marginalized) in the computation of the posterior function.; The integration and normalization of the posterior is computed using numerical integration methods provided by ROOT.; See the MCMCCalculator for model with multiple parameters of interest. The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extreme of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by; scanning the posterior function in the given number of points. The first method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in (marginalizing) the nuisances and in the poi. All the numerical; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; thi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:1981,Simpl,SimpleInterval,1981,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['Simpl'],['SimpleInterval']
Usability,"builtin, the; // constant nature of the argument is not passed through.; //; // The _Generic approach can be made to work with enough effort, but it takes a; // lot of machinery, because of the design feature of _Generic that even the; // untaken branches are required to pass all front-end validity checks such as; // type-correctness. You can work around that by nesting further _Generics all; // over the place to coerce things to the right type in untaken branches, but; // what you get out is complicated, hard to guarantee its correctness, and; // worst of all, gives _completely unreadable_ error messages if the user gets; // the types wrong for an intrinsic call.; //; // Therefore, my strategy is to introduce a new __attribute__ that allows a; // function to be mapped to a clang builtin even though it doesn't have the; // same name, and then declare all the user-facing MVE function names with that; // attribute, mapping each one directly to the clang builtin. And the; // polymorphic ones have __attribute__((overloadable)) as well. So once the; // compiler has resolved the overload, it knows the internal builtin ID of the; // selected function, and can check the immediate arguments against that; and; // if the user gets the types wrong in a call to a polymorphic intrinsic, they; // get a completely clear error message showing all the declarations of that; // function in the header file and explaining why each one doesn't fit their; // call.; //; // The downside of this is that if every clang builtin has to correspond; // exactly to a user-facing ACLE intrinsic, then you can't save work in the; // frontend by doing it in the header file: CGBuiltin.cpp has to do the entire; // job of converting an ACLE intrinsic call into LLVM IR. So the Tablegen; // description for an MVE intrinsic has to contain a full description of the; // sequence of IRBuilder calls that clang will need to make.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:2891,clear,clear,2891,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['clear'],['clear']
Usability,"by placing every instruction from every basic block in a; /// suffix tree, and repeatedly querying that tree for repeated sequences of; /// instructions. If a sequence of instructions appears often, then it ought; /// to be beneficial to pull out into a function.; ///; /// The MachineOutliner communicates with a given target using hooks defined in; /// TargetInstrInfo.h. The target supplies the outliner with information on how; /// a specific sequence of instructions should be outlined. This information; /// is used to deduce the number of instructions necessary to; ///; /// * Create an outlined function; /// * Call that outlined function; ///; /// Targets must implement; /// * getOutliningCandidateInfo; /// * buildOutlinedFrame; /// * insertOutlinedCall; /// * isFunctionSafeToOutlineFrom; ///; /// in order to make use of the MachineOutliner.; ///; /// This was originally presented at the 2016 LLVM Developers' Meeting in the; /// talk ""Reducing Code Size Using Outlining"". For a high-level overview of; /// how this pass works, the talk is available on YouTube at; ///; /// https://www.youtube.com/watch?v=yorld-WSOeU; ///; /// The slides for the talk are available at; ///; /// http://www.llvm.org/devmtg/2016-11/Slides/Paquette-Outliner.pdf; ///; /// The talk provides an overview of how the outliner finds candidates and; /// ultimately outlines them. It describes how the main data structure for this; /// pass, the suffix tree, is queried and purged for candidates. It also gives; /// a simplified suffix tree construction algorithm for suffix trees based off; /// of the algorithm actually used here, Ukkonen's algorithm.; ///; /// For the original RFC for this pass, please see; ///; /// http://lists.llvm.org/pipermail/llvm-dev/2016-August/104170.html; ///; /// For more information on the suffix tree data structure, please see; /// https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp:1987,simpl,simplified,1987,interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineOutliner.cpp,1,['simpl'],['simplified']
Usability,"by the standard library (<a; href=""http://www.cplusplus.com/reference/random/ranlux48/"">std::ranlux48</a>). The drawback of this generator is its; slow generation time.; - TRandom2 is based on the Tausworthe generator of L'Ecuyer, and it has the advantage; of being fast and using only 3 words (of 32 bits) for the state. The period however is not impressively long, it is; 10**26. Using the template TRandomGen class (template on the contained Engine type), it is possible to add any generator based; on the standard C++ random library (see the C++ <a href=""http://www.cplusplus.com/reference/random/"">random</a>; documentation.) or different variants of the MIXMAX generator using the ROOT::Math::MixMaxEngine. Some of the listed; generator above (e.g. TRandomMixMax256 or TRandomMT64) are convenient typedef's of generator built using the template; TRandomGen class. Please note also that this class (TRandom) implements also a very simple generator (linear congruential) with period =; \f$10^9\f$, known to have defects (the lower random bits are correlated) and it is failing the majority of the random; number generator tests. Therefore it should NOT be used in any statistical study. The following table shows some timings (in nanoseconds/call); for the random numbers obtained using a macbookpro 2.6 GHz Intel Core i7 CPU:. - TRandom 3 ns/call (but this is a very BAD Generator, not to be used); - TRandom2 5 ns/call; - TRandom3 5 ns/call; - ::TRandomMixMax 6 ns/call; - ::TRandomMixMax17 6 ns/call; - ::TRandomMT64 9 ns/call; - ::TRandomMixMax256 10 ns/call; - ::TRandomRanluxpp 14 ns/call; - ::TRandom1 80 ns/call; - ::TRandomRanlux48 250 ns/call. The following methods are provided to generate random numbers distributed according to some basic distributions:. - Exp(Double_t tau); - Integer(UInt_t imax); - Gaus(Double_t mean, Double_t sigma); - Rndm(); - Uniform(Double_t); - Landau(Double_t mean, Double_t sigma); - Poisson(Double_t mean); - Binomial(Int_t ntot, Double_t prob). Random n",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:5036,simpl,simple,5036,math/mathcore/src/TRandom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx,1,['simpl'],['simple']
Usability,"ce correction *; * as separation criterion *; * Gini(Sample M) = 1 - (c(1)/N)^2 - (c(2)/N)^2 .... - (c(k)/N)^2 *; * Where: M is a sample of whatever N elements (events) *; * that belong to K different classes *; * c(k) is the number of elements that belong to class k *; * Laplace's correction to the prob.density c/N --> (c+1)/(N+2) *; * for just Signal and Background classes this then boils down to: *; * Gini(Sample) = 2(s*b+s+b+1)/(s+b+2)^2 *; * *; * Authors (alphabetical): *; * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; * *; * Copyright (c) 2005: *; * CERN, Switzerland *; * U. of Victoria, Canada *; * Heidelberg U., Germany *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted according to the terms listed in LICENSE *; * (see tmva/doc/LICENSE) *; **********************************************************************************/; /*! \class TMVA::GiniIndexWithLaplace; \ingroup TMVA. Implementation of the GiniIndex With Laplace correction as separation criterion. Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same; amount of signal and bkg) bkg. Small Indices mean, well separated. #### General definition:. \f[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \f]. Where:. \f$ M \f$ is a sample of whatever \f$ N \f$ elements (events) that belong; to \f$ K \f$ different classes. \f$ c(k) \f$ is the number of elements that belong to class \f$ k \f$ for just; Signal and Background classes this boils down to:. The Laplace's correction to the probability distribution would turn the; \f$ \frac{c(1)}{N} \f$ into \f$ \frac{(c(1)+1)}{(N+2)} \f$ using this the; simple Gini Index for two classes. \f[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \f]. turns into. \f[; GiniLaplace(Sample) = \frac{2(sb+s+b+1)}{(s+b+2)^2}; \f]; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx:2208,simpl,simple,2208,tmva/tmva/src/GiniIndexWithLaplace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/GiniIndexWithLaplace.cxx,1,['simpl'],['simple']
Usability,"cense-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file defines the RefCountedBase, ThreadSafeRefCountedBase, and; /// IntrusiveRefCntPtr classes.; ///; /// IntrusiveRefCntPtr is a smart pointer to an object which maintains a; /// reference count. (ThreadSafe)RefCountedBase is a mixin class that adds a; /// refcount member variable and methods for updating the refcount. An object; /// that inherits from (ThreadSafe)RefCountedBase deletes itself when its; /// refcount hits zero.; ///; /// For example:; ///; /// ```; /// class MyClass : public RefCountedBase<MyClass> {};; ///; /// void foo() {; /// // Constructing an IntrusiveRefCntPtr increases the pointee's refcount; /// // by 1 (from 0 in this case).; /// IntrusiveRefCntPtr<MyClass> Ptr1(new MyClass());; ///; /// // Copying an IntrusiveRefCntPtr increases the pointee's refcount by 1.; /// IntrusiveRefCntPtr<MyClass> Ptr2(Ptr1);; ///; /// // Constructing an IntrusiveRefCntPtr has no effect on the object's; /// // refcount. After a move, the moved-from pointer is null.; /// IntrusiveRefCntPtr<MyClass> Ptr3(std::move(Ptr1));; /// assert(Ptr1 == nullptr);; ///; /// // Clearing an IntrusiveRefCntPtr decreases the pointee's refcount by 1.; /// Ptr2.reset();; ///; /// // The object deletes itself when we return from the function, because; /// // Ptr3's destructor decrements its refcount to 0.; /// }; /// ```; ///; /// You can use IntrusiveRefCntPtr with isa<T>(), dyn_cast<T>(), etc.:; ///; /// ```; /// IntrusiveRefCntPtr<MyClass> Ptr(new MyClass());; /// OtherClass *Other = dyn_cast<OtherClass>(Ptr); // Ptr.get() not required; /// ```; ///; /// IntrusiveRefCntPtr works with any class that; ///; /// - inherits from (ThreadSafe)RefCountedBase,; /// - has Retain() and Release() methods, or; /// - specializes IntrusiveRefCntPtrInfo.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:1483,Clear,Clearing,1483,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,1,['Clear'],['Clearing']
Usability,"ces for:; - specifying signal / color per digit;; - specifying object reference per digit;; - controlling palette and thresholds (external object REveRGBAPalette);; - showing a frame around the digits (external object REveFrameBox);; - specifying transformation matrix for the whole collection;; by data-member of class REveTrans. Use method DigitId(TObject* id) to assign additional identification; to the last created digit. By calling SetOwnIds(kTRUE) tje; digit-set becomes the owner of the assigned objects and deletes; them on destruction.; Note that TRef is used for referencing the objects and if you; instantiate the objects just to pass them to digit-set you should; also call TProcessID::Get/SetObjectCount() at the beginning / end; of processing of an event. See documentation for class TRef, in; particular section 'ObjectNumber'. If you use value-is-color mode and want to use transparency, set; the transparency to non-zero value so that GL-renderer will be; properly informed. If you want to use single color for all elements call:; ~~~ {.cpp}; UseSingleColor(); ~~~; Palette controls will not work in this case. A pointer to a rectangle / box of class REveFrameBox can be set via; ~~~ {.cpp}; void SetFrame(REveFrameBox* b);; ~~~; A single REveFrameBox can be shared among several digit-sets (it is; reference-counted). The following flags affect how the frame-box will drawn; and used for selection and highlight:; ~~~ {.cpp}; Bool_t fSelectViaFrame;; Bool_t fHighlightFrame;; ~~~; REveDigitSet is sub-classed from REveSecondarySelectable -- this means; individual digits can be selected. By calling:; ~~~ {.cpp}; REveSecondarySelectable::SetAlwaysSecSelect(kTRUE);; ~~~; one can enforce immediate feedback (highlight, tooltip and select on normal; left-mouse click) on given digit-set. See also:; ~~~ {.cpp}; REveQuadSet: rectangle, hexagon or line per digit; REveBoxSet a 3D box per digit; ~~~; */; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveDigitSet.cxx:1993,feedback,feedback,1993,graf3d/eve7/src/REveDigitSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveDigitSet.cxx,1,['feedback'],['feedback']
Usability,"ch layout** : this defines how are the input batch. It is related to input layout but not the same.; # If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); # *(note the use of the character `|` as separator of input parameters for DNN layout)*; # note that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); # *the different layers are separated by the ``"",""`` *; #### 2. Define Training Strategy; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); #### 3. Define general DNN options; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; # In addition to input layout, batch layout and training strategy we add now:; # - Type of Loss function (e.g. CROSSENTROPY); # - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); # - Variable Transformation; # - Type of Architecture (e.g. CPU, GPU, Standard); # We can then book the DL method using the built option string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py:1644,Learn,Learning,1644,tutorials/tmva/TMVA_Higgs_Classification.py,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/tmva/TMVA_Higgs_Classification.py,1,['Learn'],['Learning']
Usability,"cies.; //; // Actually when talking about 'low latency' or 'high latency' it includes; // both the latency to get the cache (or global mem) data go to the register,; // and the bandwidth limitations.; // Increasing the number of active wavefronts helps hide the former, but it; // doesn't solve the latter, thus why even if wavefront count is high, we have; // to try have as many instructions hiding high latencies as possible.; // The OpenCL doc says for example latency of 400 cycles for a global mem; // access, which is hidden by 10 instructions if the wavefront count is 10.; // Some figures taken from AMD docs:; // Both texture and constant L1 caches are 4-way associative with 64 bytes; // lines.; // Constant cache is shared with 4 CUs.; // For texture sampling, the address generation unit receives 4 texture; // addresses per cycle, thus we could expect texture sampling latency to be; // equivalent to 4 instructions in the very best case (a VGPR is 64 work items,; // instructions in a wavefront group are executed every 4 cycles),; // or 16 instructions if the other wavefronts associated to the 3 other VALUs; // of the CU do texture sampling too. (Don't take these figures too seriously,; // as I'm not 100% sure of the computation); // Data exports should get similar latency.; // For constant loading, the cache is shader with 4 CUs.; // The doc says ""a throughput of 16B/cycle for each of the 4 Compute Unit""; // I guess if the other CU don't read the cache, it can go up to 64B/cycle.; // It means a simple s_buffer_load should take one instruction to hide, as; // well as a s_buffer_loadx2 and potentially a s_buffer_loadx8 if on the same; // cache line.; //; // As of today the driver doesn't preload the constants in cache, thus the; // first loads get extra latency. The doc says global memory access can be; // 300-600 cycles. We do not specially take that into account when scheduling; // As we expect the driver to be able to preload the constants soon.; // common code //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp:4767,simpl,simple,4767,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,1,['simpl'],['simple']
Usability,"ckground events from the training sample. ### Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Random Trees:. Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. ### Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:4083,simpl,simple,4083,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['simpl'],['simple']
Usability,"combination of sigmoids can approximate any; continuous function.; 2. Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. ### Learning methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, divided by two, of the error on each individual output; neuron.; In all methods implemented, one needs to compute; the first derivative of that error with respect to the weights.; Exploiting the well-known properties of the derivative, especially the; derivative of compound functions, one can write:. - for a neuron: product of the local derivative with the; weighted sum on the outputs of the derivatives.; - for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented. #### Stochastic minimization:. is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to the formula:; \f$w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\f$. with. \f$\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\f$. The parameters for this method are Eta, EtaDecay, Delta and; Epsilon. #### Steepest descent with fixed step size (batch learning):. It is the same as the stochastic; minimization, but the weights are updated after considering all the; examples, with the total derivative dEdw. The parameters for this; method are Eta, EtaDecay, Delta and Epsilon. #### Steepest descent algorithm:. Weights are set to the minimum along the line defined by the gradient. The; only parameter for this method is Tau. Lower tau = higher precision =; slower search. A value Tau = 3 seems reasonable. #### Conjugate gradients with t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:4509,learn,learning,4509,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"ction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtim",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1220,simpl,simpler,1220,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['simpl'],['simpler']
Usability,"d by Cramer's rule. Cramer's rule requires calculating 10 9x9 matrix; * determinants, however this is not as bad as it seems because only 28 of; * the total of 90 terms in the various matrices are non-zero. Nevertheless; * Cramer's rule is notoriously numerically unstable because the determinant; * calculation involves the difference of large, but similar, numbers. It is; * difficult to be sure that the calculation is stable for real world values; * and it is certain that it becomes unstable where the end points are close; * together.; *; * So this code uses the perhaps slightly less optimal but more; * understandable and totally obvious approach of calculating color-scale.; *; * This algorithm depends on the precision in white-scale and that is; * (1/white-y), so we can immediately see that as white-y approaches 0 the; * accuracy inherent in the cHRM chunk drops off substantially.; *; * libpng arithmetic: a simple inversion of the above equations; * ------------------------------------------------------------; *; * white_scale = 1/white-y; * white-X = white-x * white-scale; * white-Y = 1.0; * white-Z = (1 - white-x - white-y) * white_scale; *; * white-C = red-C + green-C + blue-C; * = red-c*red-scale + green-c*green-scale + blue-c*blue-scale; *; * This gives us three equations in (red-scale,green-scale,blue-scale) where; * all the coefficients are now known:; *; * red-x*red-scale + green-x*green-scale + blue-x*blue-scale; * = white-x/white-y; * red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1; * red-z*red-scale + green-z*green-scale + blue-z*blue-scale; * = (1 - white-x - white-y)/white-y; *; * In the last equation color-z is (1 - color-x - color-y) so we can add all; * three equations together to get an alternative third:; *; * red-scale + green-scale + blue-scale = 1/white-y = white-scale; *; * So now we have a Cramer's rule solution where the determinants are just; * 3x3 - far more tractible. Unfortunately 3x3 determinants still involve; * multiplic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:3254,simpl,simple,3254,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['simpl'],['simple']
Usability,"d with Cholesky; // decomposition.; //; // Why should it be used?; //; // The linear fitter is considerably faster than general non-linear; // fitters and doesn't require to set the initial values of parameters.; //; // Using the fitter:; //; // 1.Adding the data points:; // 1.1 To store or not to store the input data?; // - There are 2 options in the constructor - to store or not; // store the input data. The advantages of storing the data; // are that you'll be able to reset the fitting model without; // adding all the points again, and that for very large sets; // of points the chisquare is calculated more precisely.; // The obvious disadvantage is the amount of memory used to; // keep all the points.; // - Before you start adding the points, you can change the; // store/not store option by StoreData() method.; // 1.2 The data can be added:; // - simply point by point - AddPoint() method; // - an array of points at once:; // If the data is already stored in some arrays, this data; // can be assigned to the linear fitter without physically; // coping bytes, thanks to the Use() method of; // TVector and TMatrix classes - AssignData() method; //; // 2.Setting the formula; // 2.1 The linear formula syntax:; // -Additive parts are separated by 2 plus signs ""++""; // --for example ""1 ++ x"" - for fitting a straight line; // -All standard functions, undrestood by TFormula, can be used; // as additive parts; // --TMath functions can be used too; // -Functions, used as additive parts, shouldn't have any parameters,; // even if those parameters are set.; // --for example, if normalizing a sum of a gaus(0, 1) and a; // gaus(0, 2), don't use the built-in ""gaus"" of TFormula,; // because it has parameters, take TMath::Gaus(x, 0, 1) instead.; // -Polynomials can be used like ""pol3"", ..""polN""; // -If fitting a more than 3-dimensional formula, variables should; // be numbered as follows:; // -- x0, x1, x2... For example, to fit ""1 ++ x0 ++ x1 ++ x2 ++ x3*x3""; // 2.2 Setting the form",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:1566,simpl,simply,1566,math/minuit/inc/TLinearFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h,1,['simpl'],['simply']
Usability,"d, expanding some branch may cause a control; /// transfer instruction to appear in the forbidden slot, which is a hazard that; /// should be fixed. This pass alternates between this two tasks untill no; /// changes are made. Only then we can be sure that all branches are expanded; /// properly, and no hazard situations exist.; ///; /// Regarding branch expanding:; ///; /// When branch instruction like beqzc or bnezc has offset that is too large; /// to fit into its immediate field, it has to be expanded to another; /// instruction or series of instructions.; ///; /// FIXME: Fix pc-region jump instructions which cross 256MB segment boundaries.; /// TODO: Handle out of range bc, b (pseudo) instructions.; ///; /// Regarding compact branch hazard prevention:; ///; /// Hazards handled: forbidden slots for MIPSR6, FPU slots for MIPS3 and below,; /// load delay slots for MIPS1.; ///; /// A forbidden slot hazard occurs when a compact branch instruction is executed; /// and the adjacent instruction in memory is a control transfer instruction; /// such as a branch or jump, ERET, ERETNC, DERET, WAIT and PAUSE.; ///; /// For example:; ///; /// 0x8004 bnec a1,v0,<P+0x18>; /// 0x8008 beqc a1,a2,<P+0x54>; ///; /// In such cases, the processor is required to signal a Reserved Instruction; /// exception.; ///; /// Here, if the instruction at 0x8004 is executed, the processor will raise an; /// exception as there is a control transfer instruction at 0x8008.; ///; /// There are two sources of forbidden slot hazards:; ///; /// A) A previous pass has created a compact branch directly.; /// B) Transforming a delay slot branch into compact branch. This case can be; /// difficult to process as lookahead for hazards is insufficient, as; /// backwards delay slot fillling can also produce hazards in previously; /// processed instuctions.; ///; /// In future this pass can be extended (or new pass can be created) to handle; /// other pipeline hazards, such as various MIPS1 hazards, processor er",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:2209,PAUSE,PAUSE,2209,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,1,['PAUSE'],['PAUSE']
Usability,"decreasing; /// the limit value) or a sharp modulo transition (continuing with 0 value).; /// This makes possible to realize various visual effects. One can choose from; /// the following set of the algorithms:; ///; /// - 0 = RGB Smooth; /// - 1 = RGB Modulo; /// - 2 = CMY Smooth; /// - 3 = CMY Modulo; /// - 4 = CIE Smooth; /// - 5 = CIE Modulo; /// - 6 = YIQ Smooth; /// - 7 = YIQ Modulo; /// - 8 = HVS Smooth; /// - 9 = HVS Modulo; ///; /// This function does not apply on Simple display modes group. Default; /// value is 0. Example:; ///; /// h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");; ///; /// choose CMY Modulo to paint the ""h2"" histogram.; ///; /// lp(x,y,z) set the light position.; /// In Light and LightHeight display modes groups the color palette is; /// calculated according to the fictive light source position in 3-d space.; /// Using this function one can change the position of the source and thus; /// to achieve various graphical effects. This function does not apply for; /// Simple and Height display modes groups. Default is:; /// lp(1000,1000,100).; ///; /// s(shading,shadow) allows to set the shading.; /// The picture's surface is composed of triangles. If desired the edges of; /// the neighbouring triangles can be smoothed (shaded). If desired the; /// display of the shadow can be painted as well. The function does not apply; /// for Simple display modes group. The possible values for shading are:; ///; /// - 0 = Not Shaded; /// - 1 = Shaded; ///; /// The possible values for shadow are:; ///; /// - 0 = Shadows are not painted; /// - 1 = Shadows are painted; ///; /// Default values: s(1,0); ///; /// b(bezier) set the Bezier smoothing.; /// For Simple display modes group and for Grid, LinesX and LinesY display; /// modes one can smooth data using Bezier smoothing algorithm. The function; /// does not apply for other display modes groups and display modes. Possible; /// values are:; ///; /// - 0 = No bezier smoothing; /// - 1 = Bezier smoothing; ///; /// D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:6582,Simpl,Simple,6582,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"demakers 03/01/98; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**************************************************************************. This source is based on Xclass95, a Win95-looking GUI toolkit.; Copyright (C) 1996, 1997 David Barth, Ricky Ralston, Hector Peraza. Xclass95 is free software; you can redistribute it and/or; modify it under the terms of the GNU Library General Public; License as published by the Free Software Foundation; either; version 2 of the License, or (at your option) any later version. **************************************************************************/; /** \class TGFrame; \ingroup guiwidgets. A subclasses of TGWindow, and is used as base; class for some simple widgets (buttons, labels, etc.).; It provides:; - position & dimension fields; - an 'options' attribute (see constant above); - a generic event handler; - a generic layout mechanism; - a generic border. \class TGCompositeFrame; \ingroup guiwidgets. The base class for composite widgets; (menu bars, list boxes, etc.).; It provides:; - a layout manager; - a frame container (TList *). \class TGVerticalFrame; \ingroup guiwidgets; A composite frame that layout their children in vertical way. \class TGHorizontalFrame; \ingroup guiwidgets; A composite frame that layout their children in horizontal way. \class TGMainFrame; \ingroup guiwidgets; Defines top level windows that interact with the system Window Manager. \class TGTransientFrame; \ingroup guiwidgets; Defines transient windows that typically are used for dialogs windows. \class TGGroupFrame; \ingroup guiwidgets; A composite frame with a border and a title.; It is typically used to group a number of logically related ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx:1053,simpl,simple,1053,gui/gui/src/TGFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx,1,['simpl'],['simple']
Usability,"demakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVirtualViewer3D; \ingroup Base. Abstract 3D shapes viewer. The concrete implementations are:. - TViewerX3D : X3d viewer; - TGLViewer : OpenGL viewer. ## 3D Viewer Infrastructure Overview. The 3D Viewer infrastructure consists of:. - TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; -TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently. Publishing to a viewer consists of the following steps:. 1. Create / obtain viewer handle; 2. Begin scene on viewer; 3. Fill mandatory parts of TBuffer3D describing object; 4. Add to viewer; 5. Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5 as required; 6. End scene on viewer. ## Creating / Obtaining Viewer. Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); ~~~ {.cpp}; TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; ~~~. "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned. ## Begin / End Scene. Objects must",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:1125,simpl,simple,1125,core/base/src/TVirtualViewer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx,1,['simpl'],['simple']
Usability,"depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; ~~~~. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. ### 3. Using TKDTree. #### 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:. \code{.cpp}; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:3841,simpl,simplify,3841,math/mathcore/src/TKDTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx,1,['simpl'],['simplify']
Usability,"displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter011.jpg; ///; /// Light modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter012.jpg; ///; /// Light modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter013.jpg; ///; /// Light modes group, display mode = surface, 64 x 64 channels.; /// \image html spectrumpainter014.jpg; ///; /// Light modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter015.jpg; ///; /// Height modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter016.jpg; ///; /// Height modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter017.jpg; ///; /// Height modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter018.jpg; ///; /// Height modes gr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:3213,Simpl,Simple,3213,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"e Huffman code that codes both; single bytes (called ""literals"") and match lengths. A second Huffman; code codes the distance information, which follows a length code. Each; length or distance code actually represents a base value and a number; of ""extra"" (sometimes zero) bits to get to add to the base value. At; the end of each deflated block is a special end-of-block (EOB) literal/; length code. The decoding process is basically: get a literal/length; code; if EOB then done; if a literal, emit the decoded byte; if a; length then get the distance and emit the referred-to bytes from the; sliding window of previously emitted data. There are (currently) three kinds of inflate blocks: stored, fixed, and; dynamic. The compressor outputs a chunk of data at a time and decides; which method to use on a chunk-by-chunk basis. A chunk might typically; be 32K to 64K, uncompressed. If the chunk is uncompressible, then the; ""stored"" method is used. In this case, the bytes are simply stored as; is, eight bits per byte, with none of the above coding. The bytes are; preceded by a count, since there is no longer an EOB code. If the data is compressible, then either the fixed or dynamic methods; are used. In the dynamic method, the compressed data is preceded by; an encoding of the literal/length and distance Huffman codes that are; to be used to decode this block. The representation is itself Huffman; coded, and so is preceded by a description of that code. These code; descriptions take up a little space, and so for small blocks, there is; a predefined set of codes, called the fixed codes. The fixed method is; used if the block ends up smaller that way (usually for quite small; chunks); otherwise the dynamic method is used. In the latter case, the; codes are customized to the probabilities in the current block and so; can code it much better than the pre-determined fixed codes can. The Huffman codes themselves are decoded using a mutli-level table; lookup, in order to maximize the s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c:5180,simpl,simply,5180,core/zip/src/ZInflate.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/src/ZInflate.c,1,['simpl'],['simply']
Usability,"e TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitly, or via; a string containing the formula to be used to define them, exactly as; for a TCut. The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() .; Learning methods are :. - TMultiLayerPerceptron::kStochastic,; - TMultiLayerPerceptron::kBatch,; - TMultiLayerPerceptron::kSteepestDescent,; - TMultiLayerPerceptron::kRibierePolak,; - TMultiLayerPerceptron::kFletcherReeves,; - TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either; with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight; is taken into account. Finally, one starts the training with; TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The; first argument is the number of epochs while option is a string that; can contain: ""text"" (simple text output) , ""graph""; (evoluting graphical training curves), ""update=X"" (step for; the text/graph output update) or ""+"" (will skip the; randomisation and start from the previous values). All combinations; are available. Example:; ~~~ {.cpp}; net.Train(100,""text, graph, update=10"");; ~~~. When the neural net is trained, it can be used; directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a; standalone C++ code ( TMultiLayerPerceptron::Export() ). Finally, note that even if this implementation is inspired from the mlpfit code,; the feature lists are not exactly matching:. - mlpfit hybrid learning method is not implemented; - output neurons can be normalized, this is not the case for mlpfit; - the neural net is exported in C++, FORTRAN or PYTHON; - the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of; neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:8344,simpl,simple,8344,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,3,"['learn', 'simpl']","['learning', 'simple']"
Usability,"e around vertical axis; /// going through the center of it employing the view parameter. Allowed; /// values are 0, 90, 180 and 270 degrees.; ///; /// zs(scale) changes the scale of the Z-axis Possible values are:; ///; /// - 0 = Linear (default); /// - 1 = Log; /// - 2 = Sqrt; ///; /// If gPad->SetLogz() has been set, log scale on Z-axis is set automatically.; /// No need to use the zs() operator. Note that the X and Y axis are always; /// linear.; ///; /// ci(r,g,b), were r,g and b are floats defines the colors increments.; /// For sophisticated shading (Light, Height and LightHeight Display Modes; /// Groups) the color palette starts from the basic pen color (see pa(); /// function). There is a predefined number of color levels (256). Color in; /// every level is calculated by adding the increments of the r, g, b; /// components to the previous level. Using this function one can change the; /// color increments between two neighbouring color levels. The function does; /// not apply dor the Simple Display Modes Group. The default values are:; /// (1,1,1).; ///; /// ca(color_algorithm) allows to choose the Color Algorithm.; /// To define the colors one can employ one of the following color algorithms; /// (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches; /// the limit value one can choose either smooth transition (by decreasing; /// the limit value) or a sharp modulo transition (continuing with 0 value).; /// This makes possible to realize various visual effects. One can choose from; /// the following set of the algorithms:; ///; /// - 0 = RGB Smooth; /// - 1 = RGB Modulo; /// - 2 = CMY Smooth; /// - 3 = CMY Modulo; /// - 4 = CIE Smooth; /// - 5 = CIE Modulo; /// - 6 = YIQ Smooth; /// - 7 = YIQ Modulo; /// - 8 = HVS Smooth; /// - 9 = HVS Modulo; ///; /// This function does not apply on Simple display modes group. Default; /// value is 0. Example:; ///; /// h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");; ///; /// choose CMY Modulo to paint the ""h2""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:5227,Simpl,Simple,5227,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"e as input argument the name of a column of the dataset to watch for; missing values. Like Filter, they will either keep or discard an entire entry; based on whether a condition returns true or false. Specifically:. - FilterAvailable: the condition is whether the value of the column is present.; If so, the entry is kept. Otherwise if the value is missing the entry is; discarded.; - FilterMissing: the condition is whether the value of the column is missing. If; so, the entry is kept. Otherwise if the value is present the entry is; discarded. \code{.py}; df = ROOT.RDataFrame(dataset). # Anytime an entry from ""col"" is missing, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""). # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); \endcode. \code{.cpp}; ROOT::RDataFrame df{dataset};. // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");. // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; \endcode. #### DefaultValueFor. DefaultValueFor creates a node of the computation graph which just forwards the; values of the columns necessary for other downstream nodes, when they are; available. In case a value of the inp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:83248,clear,clearly,83248,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['clear'],['clearly']
Usability,"e data set processed? {df_wrong.GetNRuns()} time."") # The answer will be 1 time. ; ~~~. An incorrect way - the dataset is processed three times.; ~~~{.py}; df_incorrect = ROOT.RDataFrame(treename, filename);. h_a = df_incorrect.Histo1D(""a""); h_a_val = h_a.GetValue(). h_b = df_incorrect.Histo1D(""b""); h_b_val = h_b.GetValue(). h_c = df_incorrect.Histo1D(""c""); h_c_val = h_c.GetValue(). print(f""How many times was the data set processed? {df_wrong.GetNRuns()} times."") # The answer will be 3 times. ; ~~~. It is therefore good practice to declare all your transformations and actions *before* accessing their results, allowing; RDataFrame to run the loop once and produce all results in one go. ### Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores.; The only modification required to the snippets would be the addition of this line *before* constructing the main; dataframe object:; ~~~{.cpp}; ROOT::EnableImplicitMT();; ~~~; Simple as that. More details are given [below](#parallel-execution). \anchor collections; ## Working with collections and object selections. RDataFrame reads collections as the special type [ROOT::RVec](https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html): for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way. RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays. For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:. ~~~{.cpp}; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](cons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:27118,Simpl,Simple,27118,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['Simpl'],['Simple']
Usability,"e gzip header will have no; file name, no extra data, no comment, no modification time (set to zero), no; header crc, and the operating system will be set to 255 (unknown). If a; gzip stream is being written, strm->adler is a crc32 instead of an adler32. The memLevel parameter specifies how much memory should be allocated; for the internal compression state. memLevel=1 uses minimum memory but is; slow and reduces compression ratio; memLevel=9 uses maximum memory for; optimal speed. The default value is 8. See zconf.h for total memory usage; as a function of windowBits and memLevel. The strategy parameter is used to tune the compression algorithm. Use the; value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a; filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no; string match), or Z_RLE to limit match distances to one (run-length; encoding). Filtered data consists mostly of small values with a somewhat; random distribution. In this case, the compression algorithm is tuned to; compress them better. The effect of Z_FILTERED is to force more Huffman; coding and less string matching; it is somewhat intermediate between; Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as; fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data. The; strategy parameter only affects the compression ratio but not the; correctness of the compressed output even if it is not set appropriately.; Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler; decoder for special applications. deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough; memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid; method), or Z_VERSION_ERROR if the zlib library version (zlib_version) is; incompatible with the version assumed by the caller (ZLIB_VERSION). msg is; set to null if there is no error message. deflateInit2 does not perform any; compression: this will be done by deflate().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:3127,simpl,simpler,3127,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['simpl'],['simpler']
Usability,"e https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements straight-line strength reduction (SLSR). Unlike loop; // strength reduction, this algorithm is designed to reduce arithmetic; // redundancy in straight-line code instead of loops. It has proven to be; // effective in simplifying arithmetic statements derived from an unrolled loop.; // It can also simplify the logic of SeparateConstOffsetFromGEP.; //; // There are many optimizations we can perform in the domain of SLSR. This file; // for now contains only an initial step. Specifically, we look for strength; // reduction candidates in the following forms:; //; // Form 1: B + i * S; // Form 2: (B + i) * S; // Form 3: &B[i * S]; //; // where S is an integer variable, and i is a constant integer. If we found two; // candidates S1 and S2 in the same form and S1 dominates S2, we may rewrite S2; // in a simpler way with respect to S1. For example,; //; // S1: X = B + i * S; // S2: Y = B + i' * S => X + (i' - i) * S; //; // S1: X = (B + i) * S; // S2: Y = (B + i') * S => X + (i' - i) * S; //; // S1: X = &B[i * S]; // S2: Y = &B[i' * S] => &X[(i' - i) * S]; //; // Note: (i' - i) * S is folded to the extent possible.; //; // This rewriting is in general a good idea. The code patterns we focus on; // usually come from loop unrolling, so (i' - i) * S is likely the same; // across iterations and can be reused. When that happens, the optimized form; // takes only one add starting from the second iteration.; //; // When such rewriting is possible, we call S1 a ""basis"" of S2. When S2 has; // multiple bases, we choose to rewrite S2 with respect to its ""immediate""; // basis, the basis that is the closest ancestor in the dominator tree.; //; // TODO:; //; // - Floating point arithmetics when fast math is enabled.; //; // - SLSR may decrease ILP at the archite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:1211,simpl,simpler,1211,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['simpl'],['simpler']
Usability,"e information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDivergence() is true;; // on other targets, it is a nop.; //; // This lets you include this pass unconditionally in the IR pass pipeline, but; // only enable it for relevant targets.; //; //===---------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:1251,Simpl,SimplifyCFG,1251,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,2,['Simpl'],['SimplifyCFG']
Usability,"e tractible. Unfortunately 3x3 determinants still involve; * multiplication of three coefficients so we can't guarantee to avoid; * overflow in the libpng fixed point representation. Using Cramer's rule in; * floating point is probably a good choice here, but it's not an option for; * fixed point. Instead proceed to simplify the first two equations by; * eliminating what is likely to be the largest value, blue-scale:; *; * blue-scale = white-scale - red-scale - green-scale; *; * Hence:; *; * (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =; * (white-x - blue-x)*white-scale; *; * (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =; * 1 - blue-y*white-scale; *; * And now we can trivially solve for (red-scale,green-scale):; *; * green-scale =; * (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 de",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:4580,simpl,simplify,4580,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['simpl'],['simplify']
Usability,"e written from the same formats. If these; * formats do not accommodate your needs then you can, and should, use the more; * sophisticated APIs above - these support a wide variety of in-memory formats; * and a wide variety of sophisticated transformations to those formats as well; * as a wide variety of APIs to manipulate ancillary information.; *; * To read a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure (see below) on the stack, set the; * version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL; * (this is REQUIRED, your program may crash if you don't do it.); * 2) Call the appropriate png_image_begin_read... function.; * 3) Set the png_image 'format' member to the required sample format.; * 4) Allocate a buffer for the image and, if required, the color-map.; * 5) Call png_image_finish_read to read the image and, if required, the; * color-map into your buffers.; *; * There are no restrictions on the format of the PNG input itself; all valid; * color types, bit depths, and interlace methods are acceptable, and the; * input image is transformed as necessary to the requested in-memory format; * during the png_image_finish_read() step. The only caveat is that if you; * request a color-mapped image from a PNG that is full-color or makes; * complex use of an alpha channel the transformation is extremely lossy and the; * result may look terrible.; *; * To write a PNG file using the simplified API:; *; * 1) Declare a 'png_image' structure on the stack and memset() it to all zero.; * 2) Initialize the members of the structure that describe the image, setting; * the 'format' member to the format of the image samples.; * 3) Call the appropriate png_image_write... function with a pointer to the; * image and, if necessary, the color-map to write the PNG data.; *; * png_image is a structure that describes the in-memory format of an image; * when it is being read or defines the in-memory format of an image that you; * need to write:; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1985,simpl,simplified,1985,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['simpl'],['simplified']
Usability,"e"", ""noreturn"" and ""unwind"" blocks. Those blocks get their; /// weights set to BlockExecWeight::COLD, BlockExecWeight::UNREACHABLE,; /// BlockExecWeight::NORETURN and BlockExecWeight::UNWIND respectively. Then the; /// weights are propagated to the other blocks up the domination line. In; /// addition, if all successors have estimated weights set then maximum of these; /// weights assigned to the block itself (while this is not ideal heuristic in; /// theory it's simple and works reasonably well in most cases) and the process; /// repeats. Once the process of weights propagation converges branch; /// probabilities are set for all such branches that have at least one successor; /// with the weight set. Default execution weight (BlockExecWeight::DEFAULT) is; /// used for any successors which doesn't have its weight set. For loop back; /// branches we use their weights scaled by loop trip count equal to; /// 'LBH_TAKEN_WEIGHT/LBH_NOTTAKEN_WEIGHT'.; ///; /// Here is a simple example demonstrating how the described algorithm works.; ///; /// BB1; /// / \; /// v v; /// BB2 BB3; /// / \; /// v v; /// ColdBB UnreachBB; ///; /// Initially, ColdBB is associated with COLD_WEIGHT and UnreachBB with; /// UNREACHABLE_WEIGHT. COLD_WEIGHT is set to BB2 as maximum between its; /// successors. BB1 and BB3 has no explicit estimated weights and assumed to; /// have DEFAULT_WEIGHT. Based on assigned weights branches will have the; /// following probabilities:; /// P(BB1->BB2) = COLD_WEIGHT/(COLD_WEIGHT + DEFAULT_WEIGHT) =; /// 0xffff / (0xffff + 0xfffff) = 0.0588(5.9%); /// P(BB1->BB3) = DEFAULT_WEIGHT_WEIGHT/(COLD_WEIGHT + DEFAULT_WEIGHT) =; /// 0xfffff / (0xffff + 0xfffff) = 0.941(94.1%); /// P(BB2->ColdBB) = COLD_WEIGHT/(COLD_WEIGHT + UNREACHABLE_WEIGHT) = 1(100%); /// P(BB2->UnreachBB) =; /// UNREACHABLE_WEIGHT/(COLD_WEIGHT+UNREACHABLE_WEIGHT) = 0(0%); ///; /// If no branch probabilities were calculated on this step then take the next; /// one.; ///; /// Third, apply different kinds",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h:2465,simpl,simple,2465,interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,1,['simpl'],['simple']
Usability,"e-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass hoists instructions to enable speculative execution on; // targets where branches are expensive. This is aimed at GPUs. It; // currently works on simple if-then and if-then-else; // patterns.; //; // Removing branches is not the only motivation for this; // pass. E.g. consider this code and assume that there is no; // addressing mode for multiplying by sizeof(*a):; //; // if (b > 0); // c = a[i + 1]; // if (d > 0); // e = a[i + 2]; //; // turns into; //; // p = &a[i + 1];; // if (b > 0); // c = *p;; // q = &a[i + 2];; // if (d > 0); // e = *q;; //; // which could later be optimized to; //; // r = &a[i];; // if (b > 0); // c = r[1];; // if (d > 0); // e = r[2];; //; // Later passes sink back much of the speculated code that did not enable; // further optimization.; //; // This pass is more aggressive than the function SpeculativeyExecuteBB in; // SimplifyCFG. SimplifyCFG will not speculate if no selects are introduced and; // it will speculate at most one instruction. It also will not speculate if; // there is a value defined in the if-block that is only used in the then-block.; // These restrictions make sense since the speculation in SimplifyCFG seems; // aimed at introducing cheap selects, while this pass is intended to do more; // aggressive speculation while counting on later passes to either capitalize on; // that or clean it up.; //; // If the pass was created by calling; // createSpeculativeExecutionIfHasBranchDivergencePass or the; // -spec-exec-only-if-divergent-target option is present, this pass only has an; // effect on targets where TargetTransformInfo::hasBranchDivergence() is true;; // on other targets, it is a nop.; //; // This lets you include this pass unconditionally in the IR pass pipeline, but; // only enable it for relevant targets.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h:1264,Simpl,SimplifyCFG,1264,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SpeculativeExecution.h,4,['Simpl'],['SimplifyCFG']
Usability,"e-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass looks for instructions that can be replaced by a Test Data Class; // instruction, and replaces them when profitable.; //; // Roughly, the following rules are recognized:; //; // 1: fcmp pred X, 0 -> tdc X, mask; // 2: fcmp pred X, +-inf -> tdc X, mask; // 3: fcmp pred X, +-minnorm -> tdc X, mask; // 4: tdc (fabs X), mask -> tdc X, newmask; // 5: icmp slt (bitcast float X to int), 0 -> tdc X, mask [ie. signbit]; // 6: icmp sgt (bitcast float X to int), -1 -> tdc X, mask; // 7: icmp ne/eq (call @llvm.s390.tdc.*(X, mask)) -> tdc X, mask/~mask; // 8: and i1 (tdc X, M1), (tdc X, M2) -> tdc X, (M1 & M2); // 9: or i1 (tdc X, M1), (tdc X, M2) -> tdc X, (M1 | M2); // 10: xor i1 (tdc X, M1), (tdc X, M2) -> tdc X, (M1 ^ M2); //; // The pass works in 4 steps:; //; // 1. All fcmp and icmp instructions in a function are checked for a match; // with rules 1-3 and 5-7. Their TDC equivalents are stored in; // the ConvertedInsts mapping. If the operand of a fcmp instruction is; // a fabs, it's also folded according to rule 4.; // 2. All and/or/xor i1 instructions whose both operands have been already; // mapped are mapped according to rules 8-10. LogicOpsWorklist is used; // as a queue of instructions to check.; // 3. All mapped instructions that are considered worthy of conversion (ie.; // replacing them will actually simplify the final code) are replaced; // with a call to the s390.tdc intrinsic.; // 4. All intermediate results of replaced instructions are removed if unused.; //; // Instructions that match rules 1-3 are considered unworthy of conversion; // on their own (since a comparison instruction is superior), but are mapped; // in the hopes of folding the result using rules 4 and 8-10 (likely removing; // the original comparison in the process).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp:1716,simpl,simplify,1716,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp,1,['simpl'],['simplify']
Usability,"e. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. ### Boosting:. the idea behind the boosting is, that signal events from the training; sample, that *end up in a background node (and vice versa) are given a; larger weight than events that are in the correct leave node. This; results in a re-weighed training event sample, with which then a new; decision tree can be developed. The boosting can be applied several; times (typically 100-500 times) and one ends up with a set of decision; trees (a forest). ### Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. ### Analysis:. applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx:3403,simpl,simple,3403,tmva/tmva/src/MethodDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDT.cxx,1,['simpl'],['simple']
Usability,"e: case 1. The following macro is an example illustrating how to open a Postscript; file and draw several pictures. The generation of a new Postscript page; is automatic when `TCanvas::Clear` is called by `object->Draw()`. ~~~ {.cpp}; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);. // select postscript output type; // type = 111 portrait ps; // type = 112 landscape ps; // type = 113 eps; Int_t type = 111;. // create a postscript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page. // draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a macro; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }; ~~~. ## Making several pictures in the same Postscript file: case 2. This example shows 2 pages. The canvas is divided.; `TPostScript::NewPage` must be called before starting a new; picture.`object->Draw` does not clear the canvas in this case; because we clear only the pads and not the main canvas.; Note that `c1->Update` must be called at the end of the first picture. ~~~ {.cpp}; {; TFile *f1 = new TFile(""hsimple.root"");; TCanvas *c1 = new TCanvas(""c1"");; TPostScript *ps = new TPostScript(""file.ps"",112);; c1->Divide(2,1);; // picture 1; ps->NewPage();; c1->cd(1);; hpx->Draw();; c1->cd(2);; hprof->Draw();; c1->Update();. // picture 2; ps->NewPage();; c1->cd(1);; hpxpy->Draw();; c1->cd(2);; ntuple->Draw(""px"");; c1->Update();; ps->Close();. // invoke Postscript viewer; gSystem->Exec(""gs file.ps"");; }; ~~~. ## Making several pictures in the same Postscript file: case 3; This is the recommended way. If the Postscript file name finishes with; ""("", the file remains opened (it is not closed). If the Postscript file name; finishes with "")"" and the file has been opened with ""("", the file is closed. Example:; ~~~ {.cpp}; {; TCanvas c1(""c1"");; h1.Draw();; c1.Print(""c1.ps(""); // write canvas and keep the ps file open; h2.Draw();; c1.Pri",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPostScript.cxx:4734,clear,clear,4734,graf2d/postscript/src/TPostScript.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPostScript.cxx,2,['clear'],['clear']
Usability,"e; the first derivative of that error with respect to the weights.; Exploiting the well-known properties of the derivative, especially the; derivative of compound functions, one can write:. - for a neuron: product of the local derivative with the; weighted sum on the outputs of the derivatives.; - for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented. #### Stochastic minimization:. is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to the formula:; \f$w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\f$. with. \f$\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\f$. The parameters for this method are Eta, EtaDecay, Delta and; Epsilon. #### Steepest descent with fixed step size (batch learning):. It is the same as the stochastic; minimization, but the weights are updated after considering all the; examples, with the total derivative dEdw. The parameters for this; method are Eta, EtaDecay, Delta and Epsilon. #### Steepest descent algorithm:. Weights are set to the minimum along the line defined by the gradient. The; only parameter for this method is Tau. Lower tau = higher precision =; slower search. A value Tau = 3 seems reasonable. #### Conjugate gradients with the Polak-Ribiere updating formula:. Weights are set to the minimum along the line defined by the conjugate gradient.; Parameters are Tau and Reset, which defines the epochs where the direction is; reset to the steepest descent. #### Conjugate gradients with the Fletcher-Reeves updating formula:. Weights are set to the minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepest descent. ###",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:5035,learn,learning,5035,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"ectories are supported. In case; /// subdirectories are present the behavior is unspecified - events *might* be; /// passed to Receiver on macOS (due to FSEvents being used) while they; /// *probably* won't be passed on Linux (due to inotify being used).; ///; /// Known potential inconsistencies; /// - For files that are deleted befor the initial scan processed them, clients; /// might receive Removed notification without any prior Added notification.; /// - Multiple notifications might be produced when a file is added to the; /// watched directory during the initial scan. We are choosing the lesser evil; /// here as the only known alternative strategy would be to invalidate the; /// watcher instance and force user to create a new one whenever filesystem; /// event occurs during the initial scan but that would introduce continuous; /// restarting failure mode (watched directory is not always ""owned"" by the same; /// process that is consuming it). Since existing clients can handle duplicate; /// events well, we decided for simplicity.; ///; /// Notifications are provided only for changes done through local user-space; /// filesystem interface. Specifically, it's unspecified if notification would; /// be provided in case of a:; /// - a file mmap-ed and changed; /// - a file changed via remote (NFS) or virtual (/proc) FS access to monitored; /// directory; /// - another filesystem mounted to the watched directory; ///; /// No support for LLVM VFS.; ///; /// It is unspecified whether notifications for files being deleted are sent in; /// case the whole watched directory is sent.; ///; /// Directories containing ""too many"" files and/or receiving events ""too; /// frequently"" are not supported - if the initial scan can't be finished before; /// the watcher instance gets invalidated (see WatcherGotInvalidated) there's no; /// good error handling strategy - the only option for client is to destroy the; /// watcher, restart watching with new instance and hope it won't repeat.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h:1470,simpl,simplicity,1470,interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h,1,['simpl'],['simplicity']
Usability,"ectrum:$Id$; // Author: Miroslav Morhac 17/01/2006; /** \class TSpectrum2; \ingroup Spectrum; \brief Advanced 2-dimensional spectra processing; \author Miroslav Morhac. \legacy{TSpectrum2, For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.}. This class contains advanced spectra processing functions. - One-dimensional background estimation functions; - Two-dimensional background estimation functions; - One-dimensional smoothing functions; - Two-dimensional smoothing functions; - One-dimensional deconvolution functions; - Two-dimensional deconvolution functions; - One-dimensional peak search functions; - Two-dimensional peak search functions. The algorithms in this class have been published in the following references:. 1. M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; 2. M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; 3. M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. - [SpectrumDec.ps.gz](ftp://root.cern/root/SpectrumDec.ps.gz); - [SpectrumSrc.ps.gz](ftp://root.cern/root/SpectrumSrc.ps.gz); - [SpectrumBck.ps.gz](ftp://root.cern/root/SpectrumBck.ps.gz). See also the; [online documentation](https://root.cern/guides/tspectrum-manual) and; [tutorials](https://root.cern/doc/master/group__tutorial__spectrum.html). All the figures in this page were prepared using the DaqProVis; system, Data Acquisition, Processing and Visualization system,; developed at the Institute of Physics, Slovak Academy of Sciences, Bratislava,; Slovakia.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx:1689,guid,guides,1689,hist/spectrum/src/TSpectrum2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrum/src/TSpectrum2.cxx,1,['guid'],['guides']
Usability,"ed by the conjugate gradient.; Parameters are Tau and Reset, which defines the epochs where the direction is; reset to the steepest descent. #### Conjugate gradients with the Fletcher-Reeves updating formula:. Weights are set to the minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepest descent. #### Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:. Implies the computation of a NxN matrix; computation, but seems more powerful at least for less than 300; weights. Parameters are Tau and Reset, which defines the epochs where; the direction is reset to the steepest descent. ### How to use it... TMLP is build from 3 classes: TNeuron, TSynapse and; TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used; explicitly by the user. TMultiLayerPerceptron will take examples from a TTree; given in the constructor. The network is described by a simple; string: The input/output layers are defined by giving the expression for; each neuron, separated by comas. Hidden layers are just described; by the number of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This can only be done for fixed-size arrays.; If the formula ends with ""!"", softmax functions are used for the output layer.; One defines the training and test datasets by TEventLists. Example:; ~~~ {.cpp}; TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; ~~~. Both the TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitly, or via; a string containing the formula to be used to define them, exac",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:6569,simpl,simple,6569,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['simpl'],['simple']
Usability,"ed by x) are given in the next table.; ///; /// | | Simple | Light | Height | Light-Height |; /// |-----------|--------|-------|--------|--------------|; /// | Points | X | X | X | X |; /// | Grid | X | X | X | X |; /// | Contours | X | - | X | - |; /// | Bars | X | - | X | - |; /// | LinesX | X | X | X | X |; /// | LinesY | X | X | X | X |; /// | BarsX | X | - | X | - |; /// | BarsY | X | - | X | - |; /// | Needles | X | - | - | - |; /// | Surface | - | X | X | X |; /// | Triangles | X | X | X | X |; ///; /// #### Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); ///; /// This function controls the display mode group and display mode of the; /// histogram drawing. To illustrate the possible effects of the various display; /// modes we introduce a set of examples. Default values:; ///; /// - `modeGroup = kModeGroupLightHeight `; /// - `displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, displa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:2327,Simpl,Simple,2327,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"ed in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):; ~~~ {.cpp}; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *alw",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1396,Clear,Clear,1396,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['Clear'],['Clear']
Usability,"ed to; /// hold the compressed buffer.; ///; /// - Reservation of the corresponding space in the file by looking; /// in the TFree list of free blocks of the file.; ///; /// - The buffer is written to the file.; ///; /// Bufsize can be given to force a given buffer size to write this object.; /// By default, the buffersize will be taken from the average buffer size; /// of all objects written to the current file so far.; ///; /// If a name is specified, it will be the name of the key.; /// If name is not given, the name of the key will be the name as returned; /// by GetName().; ///; /// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; /// Using the kOverwrite option a previous key with the same name is; /// overwritten. The previous key is deleted before writing the new object.; /// Using the kWriteDelete option a previous key with the same name is; /// deleted only after the new object has been written. This option; /// is safer than kOverwrite but it is slower.; /// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; /// the space is simply freed up to be overwritten; in the case of a TTree,; /// it is more complicated. If one opens a TTree, appends some entries,; /// then writes it out, the behaviour is effectively the same. If, however,; /// one creates a new TTree and writes it out in this way,; /// only the metadata is replaced, effectively making the old data invisible; /// without deleting it. TTree::Delete() can be used to mark all disk space; /// occupied by a TTree as free before overwriting its metadata this way.; /// The kSingleKey option is only used by TCollection::Write() to write; /// a container with a single key instead of each object in the container; /// with its own key.; ///; /// An object is read from the file into memory via TKey::Read() or; /// via TObject::Read().; ///; /// The function returns the total number of bytes written to the file.; /// It returns 0 if the object cannot be written.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:1745,simpl,simply,1745,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,1,['simpl'],['simply']
Usability,"el associate.; <h2> Creating dataframe object with its labels</h2> <br>; \code{.cpp}; using namespace ROOT::R;; TRDataFrame df1(Label[""var1""]=v1,Label[""var2""]=v2,Label[""var3""]=v3,Label[""strings""]=names);; \endcode. <h2>Passing dataframe to R's environment</h2><br>; \code{.cpp}; r[""df1""]<<df1;; r<<""print(df1)"";; \endcode; Output; \code; var1 var2 var3 strings; 1 1 0.101 1 v1; 2 2 0.202 2 v2; 3 3 0.303 3 v3; \endcode. Manipulating data between dataframes; <h2>Adding colunms to dataframe</h2><br>; \code{.cpp}; TVectorD v4(3);; //filling the vector fro R's environment; r[""c(-1,-2,-3)""]>>v4;; //adding new colunm to df1 with name var4; df1[""var4""]=v4;; //updating df1 in R's environment; r[""df1""]<<df1;; //printing df1; r<<""print(df1)"";; \endcode. Output; var1 var2 var3 strings var4; 1 1 0.101 1 v1 -1; 2 2 0.202 2 v2 -2; 3 3 0.303 3 v3 -3. <h2>Getting dataframe from R's environment</h2><br>; \code{.cpp}; ROOT::R::TRDataFrame df2;. r<<""df2<-data.frame(v1=c(0.1,0.2,0.3),v2=c(3,2,1))"";; r[""df2""]>>df2;. TVectorD v(3);; df2[""v1""]>>v;; v.Print();. df2[""v2""]>>v;; v.Print();; \endcode. Output; \code; Vector (3) is as follows. | 1 |; ------------------; 0 |0.1; 1 |0.2; 2 |0.3. Vector (3) is as follows. | 1 |; ------------------; 0 |3; 1 |2; 2 |1; \endcode. <h2>Working with colunms between dataframes</h2><br>; \code{.cpp}; df2[""v3""]<<df1[""strings""];. //updating df2 in R's environment; r[""df2""]<<df2;; r<<""print(df2)"";; \endcode; Output; \code; v1 v2 v3; 1 0.1 3 v1; 2 0.2 2 v2; 3 0.3 1 v3; \endcode. <h2>Working with colunms between dataframes</h2><br>; \code{.cpp}; //passing values from colunm v3 of df2 to var1 of df1; df2[""v3""]>>df1[""var1""];; //updating df1 in R's environment; r[""df1""]<<df1;; r<<""print(df1)"";; \endcode; Output; \code; var1 var2 var3 strings var4; 1 v1 0.101 1 v1 -1; 2 v2 0.202 2 v2 -2; 3 v3 0.303 3 v3 -3; \endcode; <h2>Users Guide </h2>; <a href=""https://oproject.org/pages/ROOT%20R%20Users%20Guide""> https://oproject.org/pages/ROOT R Users Guide</a><br>; @ingroup R; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRDataFrame.h:2947,Guid,Guide,2947,bindings/r/inc/TRDataFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRDataFrame.h,2,['Guid'],['Guide']
Usability,"em passing ; RVecs as arguments.; - abs, fdim, fmod, remainder; - floor, ceil, trunc, round, lround, llround; - exp, exp2, expm1; - log, log10, log2, log1p; - pow; - sqrt, cbrt; - sin, cos, tan, asin, acos, atan, atan2, hypot; - sinh, cosh, tanh, asinh, acosh; - erf, erfc; - lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations; are vectorized:; - fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; - fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. \anchor owningandadoptingmemory; ## Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case,; it can be constructed with the address of the memory associated to it and its length. For example:; ~~~{.cpp}; std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; ~~~; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"".; If any method which implies a re-allocation is called, e.g. *emplace_back* or *resize*, the adopted; memory is released and new one is allocated. The previous content is copied in the new memory and; preserved. \anchor sorting; ## Sorting and manipulation of indices. ### Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms; can be used, for example sorting:; ~~~{.cpp}; RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; ~~~. For convenience, helpers are provided too:; ~~~{.cpp}; auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ~~~. ### Manipulation of indices. It is also possible to manipulated the RVecs acting on their indices. For example,; the following syntax; ~~~{.cpp}; RVecD v0 {9., 7., 8.};; auto v1 = Take(v0, {1, 2, 0});; ~~~; will yield a new RVec<double> the content of which is the first, second and zeroth element of; v0, i.e. `{7., 8., 9.}`. The `",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/inc/ROOT/RVec.hxx:4922,simpl,simply,4922,math/vecops/inc/ROOT/RVec.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/inc/ROOT/RVec.hxx,1,['simpl'],['simply']
Usability,"enStyleDashDot.`; ///; /// Default values:; ///; /// - ` color = kBlack`; /// - ` style = kPenStyleSolid`; /// - ` width = 1`; ///; /// \image html spectrumpainter022.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels. Pen width = 3.; ///; /// #### Function: TSpectrum2Painter::SetNodes(Int_t nodesx,Int_t nodesy); ///; /// Sometimes the displayed region is rather large. When displaying all channels; /// pictures become very dense and complicated. It is very difficult to understand; /// overall shape of the data. Therefore in the package we have implemented the; /// possibility to change the density of displayed channels. Only channels; /// coinciding with given nodes are displayed. In the next figure we introduce the; /// example of the above presented spectrum with number of nodes set to 64x64.; ///; /// Default values:; ///; /// - ` nodesx = Xmax-Xmin+1`; /// - ` nodesy = Ymax-Ymin+1`; ///; /// \image html spectrumpainter023.jpg; ///; /// Simple modes group, display mode = grid, 256 x 256 channels.; /// Number of nodes is 64x64.; ///; /// #### Function: void TSpectrum2Painter::SetAngles (Int_t alpha,Int_t beta, Int_t view); ///; /// One can change the angles of the position of 3-d space and to rotate the; /// space. Alpha parameter defines the angle between bottom horizontal screen line; /// and the displayed space on the right side of the picture and beta on the left; /// side, respectively. One can rotate the 3-d space around vertical axis going; /// through the center of it employing the view parameter.; /// Allowed values are 0, 90, 180 and 270 degrees respectively.; ///; /// Default values:; ///; /// - ` alpha = 20`; /// - ` beta = 60`; /// - ` view = 0`; ///; /// \image html spectrumpainter024.jpg; ///; /// Light modes group, display mode = surface, 256 x 256 channels. Angles are; /// set as follows: alpha=40, beta=30, view=0.; /// \image html spectrumpainter025.jpg; ///; /// Light modes group, display mode = surface, 256 x 256 channels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:6014,Simpl,Simple,6014,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"ent.GetHistogram()->GetXaxis()->GetXmax(); /// ~~~; /// \endparblock; /// \param [in] selection; /// \parblock; /// A string containing a selection expression.; /// In a selection all usual C++ mathematical and logical operators are allowed.; /// The value corresponding to the selection expression is used as a weight; /// to fill the histogram (a weight of 0 is equivalent to not filling the histogram).\n; /// \n; /// Examples:; /// - ""x<y && sqrt(z)>3.2"": returns a weight = 0 or 1; /// - ""(x+y)*(sqrt(z)>3.2)"": returns a weight = x+y if sqrt(z)>3.2, 0 otherwise\n; /// \n; /// If the selection expression returns an array, it is iterated over in sync with the; /// array returned by the varexp argument (as described below in ""Drawing expressions using arrays and array; /// elements""). For example, if, for a given event, varexp evaluates to; /// `{1., 2., 3.}` and selection evaluates to `{0, 1, 0}`, the resulting histogram is filled with the value 2. For example, for each event here we perform a simple object selection:; /// ~~~{.cpp}; /// // Muon_pt is an array: fill a histogram with the array elements > 100 in each event; /// tree->Draw('Muon_pt', 'Muon_pt > 100'); /// ~~~; /// \endparblock; /// \param [in] option; /// \parblock; /// The drawing option.; /// - When an histogram is produced it can be any histogram drawing option; /// listed in THistPainter.; /// - when no option is specified:; /// - the default histogram drawing option is used; /// if the expression is of the form ""e1"".; /// - if the expression is of the form ""e1:e2""or ""e1:e2:e3"" a cloud of; /// unbinned 2D or 3D points is drawn respectively.; /// - if the expression has four fields ""e1:e2:e3:e4"" a cloud of unbinned 3D; /// points is produced with e1 vs e2 vs e3, and e4 is mapped on the current color; /// palette.; /// - If option COL is specified when varexp has three fields:; /// ~~~ {.cpp}; /// tree.Draw(""e1:e2:e3"","""",""col"");; /// ~~~; /// a 2D scatter is produced with e1 vs e2, and e3 is mapped on t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:3305,simpl,simple,3305,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simple']
Usability,"entlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning phase is started or restarted when:; - TTree automatically creates a cache.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTreeCache::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; - TTreeCache::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries.; - A 'cached' TChain switches over to a new file. \anchor cachemisses; ## Self-optimization in presence of cache misses. The TTreeCache can optimize its behavior on a cache miss. When; miss optimization is enabled (see the SetOptimizeMisses method),; it tracks all branches utilized after the learning phase which caused a cache; miss.; When one cache miss occurs, all the utilized branches are be prefetched; for that event. This optimization utilizes the observation that infrequently; accessed branches are often accessed together.; An example scenario where such behavior is desirable, is an analysis where; a set of collections are read only for a few events in which a certain; condition is respected, e.g. a trigger fired. ### Additional memory and CPU usage when optimizing for cache misses; When this mode is enabled, the memory dedicated to the cache can increase; by at most a factor two in the case of cache miss.; Additionally, on the first miss of an event, we must iterate through all the; ""active branches"" for the miss cache and find the correct basket.; This can be potentially a CPU-expensive operation compared to, e.g., the; latency of a SSD. This is why the miss cache is currently disabled by default. \anchor examples; ## Example usa",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:4956,learn,learning,4956,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"epeated calls to AddObject(), with TBuffer3D; containing the same fID, and different `fLocalMaster` placements. For viewers supporting logical/physical objects, the TBuffer3D content refers; to the properties of logical object, with the `fLocalMaster` transform and the; `fColor` and `fTransparency` attributes, which can be varied for each physical; object. As a minimum requirement all clients must be capable of filling the raw tessellation; of the object buffer, in the master reference frame. Conversely viewers must; always be capable of displaying the object described by this buffer. ### Scene Rebuilds. It should be understood that AddObject is not an explicit command to the viewer; - it may for various reasons decide to ignore it:. - It already has the object internally cached .; - The object falls outside some 'interest' limits of the viewer camera.; - The object is too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition,; simply indicating it does not require you to provide further information about; this object. You should not try to make any assumptions about what the viewer; did with it. This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:6640,simpl,simply,6640,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['simpl'],['simply']
Usability,"ept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad repaint at present), and thus collect these objects if the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. ### Physical IDs. TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0). ~~~ {.cpp}; virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); ~~~. If you use the first (simple) case a viewer using logical/physical pairs; SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical; object internally. In the second you can specify a unique identifier from the; client, which allows the viewer to be more efficient. It can now cache both logical; and physical objects, and only discard physical objects no longer of interest as; part of scene rebuilds. ### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. ### Recycling TBuffer3D. Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this object, or recycle it for the next; object if suitable.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:7901,simpl,simple,7901,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['simpl'],['simple']
Usability,"er a few multi-Megabytes large buffers instead of many; multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to; be read in increasing order such that the file is read sequentially. Systems like xrootd, dCache or httpd take advantage of the TTreeCache in; reading ahead as much data as they can and return to the application; the maximum data specified in the cache and have the next chunk of data ready; when the next request comes. ### Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all; entries such that not all branch buffers are read. \anchor description; ## General Description; This class acts as a file cache, registering automatically the baskets from; the branches being processed via direct manipulation of TTrees or with tools; such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame; when in the learning phase. The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. The usage of a TTreeCache can considerably improve the runtime performance at; the price of a modest investment in memory, in particular when the TTree is; accessed remotely, e.g. via a high latency network. For each TTree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted.; The user can change the size of the cache with the TTree::SetCacheSize method; (by default the size is 30 Megabytes). This feature can be controlled with the; environment variable `ROOT_TTREECACHE_SIZE` or the TTreeCache.Size option.; The entry range for which the cache is active can also be set with the; SetEntryRange method. \anchor changesbehaviour; ## Changes of behavior when using TChain and TEventList. The usage of TChain or TEventList have influence on the behaviour of the cache:. - Special case of a TChain; Once the training is done on the first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:2803,learn,learning,2803,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"er an entry going randomly through the histograms will; have a rather small weight. Setting a cut on this weight allows to draw only; the most representative entries. A slider set the cut is also available in; the gui. ## Selections:. Selections of specific entries can be defined over the data se using parallel; coordinates. With that representation, a selection is an ensemble of ranges; defined on the axes. Ranges defined on the same axis are conjugated with OR; (an entry must be in one or the other ranges to be selected). Ranges on; different axes are are conjugated with AND (an entry must be in all the ranges; to be selected). Several selections can be defined with different colors. It is; possible to generate an entry list from a given selection and apply it to the; tree using the editor (""Apply to tree"" button). ## Axes:. Options can be defined each axis separately using the right mouse click. These; options can be applied to every axes using the editor. - Axis width: If set to 0, the axis is simply a line. If higher, a color; histogram is drawn on the axis.; - Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The; axes can be dragged to change their position. A zoom is also available. The; logarithm scale is also available by right clicking on the axis. ## Candle chart:. TParallelCoord can also be used to display a candle chart. In that mode, every; variable is drawn in the same scale. The candle chart can be combined with the; parallel coordinates mode, drawing the candle sticks over the axes. ~~~ {.cpp}; {; TCanvas *c1 = new TCanvas(""c1"");; TFile *f = TFile::Open(""cernstaff.root"");; TTree *T = (TTree*)f->Get(""T"");; T->Draw(""Age:Grade:Step:Cost:Division:Nation"","""",""para"");; TParallelCoord* para = (TParallelCoord*)gPad->GetListOfPrimitives()->FindObject(""ParaCoord"");; TParallelCoordVar* grade = (TParallelCoordVar*)para->GetVarList()->FindObject(""Grade"");; gr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoord.cxx:2375,simpl,simply,2375,tree/treeviewer/src/TParallelCoord.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoord.cxx,1,['simpl'],['simply']
Usability,"er struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more information on the two; // ""Abstract"" classes and their respective methods.; // - Register opportunities for the new abstract attribute in the; // `Attributor::identifyDefaultAbstractAttributes` method if it should be; // counted as a 'default' attribute.; // - Add sufficient tests.; // - Add a Statistics object for bookkeeping. If it is a simple (set of); // attribute(s) manifested through the Attributor manifestation framework, see; // the bookkeeping function in Attributor.cpp.; // - If instructions with a certain opcode are interesting to the attribute, add; // that opcode to the switch in `Attributor::identifyAbstractAttributes`. This; // will make it possible to query all those instructions through the; // `InformationCache::getOpcodeInstMapForFunction` interface and eliminate the; // need to traverse the IR repeatedly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:5460,simpl,simple,5460,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simple']
Usability,"ere; // Try first add to viewer; Int_t reqSections = viewer-&gt;AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRawSizes) {; // Fill out kRawSizes...; }; if (reqSections & TBuffer3D::kRaw) {; // Fill out kRaw...; }; // Add second time to viewer - ignore return cannot do more; viewer-&gt;AddObject(buffer);; }; }; ~~~. `ShapeSpecific`: If the viewer can directly display the buffer without; filling of the kRaw/kRawSizes section it will not need to request client side; tessellation. Currently we provide the following various shape specific classes, which the; OpenGL viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. `BoundingBox:` You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:3254,clear,clear,3254,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['clear'],['clear']
Usability,"erface to global objects. For example: TGWin32VirtualXProxy (to gVirtualX). Proxy object creates callback object and posts a windows message to; ""processing thread"". When windows message is received callback; (""real method"") is executed. For example:; gVirtualX->ClearWindow(). - callback object created containing pointer to function; corresponding TGWin32::ClearWindow() method; - message to ""processing thread"" (main thread) is posted; - TGWin32::ClearWindow() method is executed inside main thread; - thread containing gVirtualX proxy object waits for reply; from main thread that TGWin32::ClearWindow() is completed. Howto create proxy class:. 1. Naming.; name of proxy = TGWin32 + the name of ""virtual base class"" + Proxy. e.g. TGWin32VirtualXProxy = TGWin32 + VirtualX + Proxy. 2. Definition of global object; As example check definition and implementation of; gVirtualX global object. 3. Class definition.; proxy class must be inherited from ""virtual base class"" and; TGWin32ProxyBase class. For example:. class TGWin32VirtualX : public TVirtualX , public TGWin32ProxyBase. 4. Constructors, destructor, extra methods.; - constructors and destructor of proxy class do nothing; - proxy class must contain two extra static methods; RealObject(), ProxyObject(). Each of them return pointer to object; of virtual base class. For example:; static TVirtualX *RealObject();; static TVirtualX *ProxyObject();. 5. Implementation; TGWin32ProxyDefs.h file contains a set of macros which very; simplify implementation.; - RETURN_PROXY_OBJECT macro implements ProxyObject() method, e.g.; RETURN_PROXY_OBJECT(VirtualX); - the names of other macros say about itself. For example:; VOID_METHOD_ARG0(VirtualX,SetFillAttributes,1); void TGWin32VirtualXProxy::SetFillAttributes(). RETURN_METHOD_ARG0_CONST(VirtualX,Visual_t,GetVisual); Visual_t TGWin32VirtualXProxy::GetVisual() const. RETURN_METHOD_ARG2(VirtualX,Int_t,OpenPixmap,UInt_t,w,UInt_t,h); Int_t TGWin32VirtualXProxy::OpenPixmap,UInt_t w,UInt_t h). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32ProxyBase.cxx:1995,simpl,simplify,1995,graf2d/win32gdk/src/TGWin32ProxyBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32ProxyBase.cxx,1,['simpl'],['simplify']
Usability,"ers; we'll see why in a minute. ### Applying a filter; Let's say we want to cut over the value of branch ""MET"" and count how many events pass this cut. This is one way to do it:; ~~~{.cpp}; RDataFrame d(""myTree"", ""file.root"");; auto c = d.Filter(""MET > 4."").Count(); // computations booked, not run; std::cout << *c << std::endl; // computations run here, upon first access to the result; ~~~; The filter string (which must contain a valid C++ expression) is applied to the specified columns for each event;; the name and types of the columns are inferred automatically. The string expression is required to return a `bool`; which signals whether the event passes the filter (`true`) or not (`false`). You can think of your data as ""flowing"" through the chain of calls, being transformed, filtered and finally used to; perform actions. Multiple Filter() calls can be chained one after another. Using string filters is nice for simple things, but they are limited to specifying the equivalent of a single return; statement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small; runtime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or; runtime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet,; but it can be any kind of function or even a functor class), together with a list of column names.; This snippet is analogous to the one above:; ~~~{.cpp}; RDataFrame d(""myTree"", ""file.root"");; auto metCut = [](double x) { return x > 4.; }; // a C++11 lambda function checking ""x > 4""; auto c = d.Filter(metCut, {""MET""}).Count();; std::cout << *c << std::endl;; ~~~. An example of a more complex filter expressed as a string containing C++ code is shown below. ~~~{.cpp}; RDataFrame d(""myTree"", ""file.root"");; auto df = d.Define(""p"", ""std::array<double, 4> p{px, py, pz}; return p;""); .Filter(""double p2 = 0.0; for (auto&& x : p) p2 += x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:18901,simpl,simple,18901,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simple']
Usability,"erver implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a. by using the environmental variables S3_ACCESS_KEY and ; S3_SECRET_KEY, or; b. by specifying them when opening each file. You can use AWS temporary security credentials (temporary access key; and secret access key), but you must also give the associated; session token. The token may be set in the S3_SESSION_TOKEN; environmental variable, or on open in the TOKEN option. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. **/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:2386,Simpl,Simple,2386,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,3,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,"essContinue() needs previous data blocks during decompression, up to `windowSize` bytes.; ZSTD_decompressContinue() is very sensitive to contiguity,; if 2 blocks don't follow each other, make sure that either the compressor breaks contiguity at the same place,; or that previous contiguous segment is large enough to properly handle maximum back-reference distance.; There are multiple ways to guarantee this condition. The most memory efficient way is to use a round buffer of sufficient size.; Sufficient size is determined by invoking ZSTD_decodingBufferSize_min(),; which can @return an error code if required value is too large for current system (in 32-bits mode).; In a round buffer methodology, ZSTD_decompressContinue() decompresses each block next to previous one,; up to the moment there is not enough room left in the buffer to guarantee decoding another full block,; which maximum size is provided in `ZSTD_frameHeader` structure, field `blockSizeMax`.; At which point, decoding can resume from the beginning of the buffer.; Note that already decoded data stored in the buffer should be flushed before being overwritten. There are alternatives possible, for example using two or more buffers of size `windowSize` each, though they consume more memory. Finally, if you control the compression process, you can also ignore all buffer size rules,; as long as the encoder and decoder progress in ""lock-step"",; aka use exactly the same buffer sizes, break contiguity at the same place, etc. Once buffers are setup, start decompression, with ZSTD_decompressBegin().; If decompression requires a dictionary, use ZSTD_decompressBegin_usingDict() or ZSTD_decompressBegin_usingDDict(). Then use ZSTD_nextSrcSizeToDecompress() and ZSTD_decompressContinue() alternatively.; ZSTD_nextSrcSizeToDecompress() tells how many bytes to provide as 'srcSize' to ZSTD_decompressContinue().; ZSTD_decompressContinue() requires this _exact_ amount of bytes, or it will fail. @result of ZSTD_decompressContinue() ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:2474,resume,resume,2474,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['resume'],['resume']
Usability,"et to 1, then; /// only floating-point registers are being saved (d8-dN, where N is; /// 8 + Reg). The special case of the R bit being set to 1 and Reg equal; /// to 7 indicates that no registers are saved.; /// R : 1-bit flag indicating whether the non-volatile registers are integer or; /// floating-point. 0 indicates integer, 1 indicates floating-point. The; /// special case of the R-flag being set and Reg being set to 7 indicates; /// that no non-volatile registers are saved.; /// L : 1-bit flag indicating whether the function saves/restores the link; /// register (LR); /// C : 1-bit flag indicating whether the function includes extra instructions; /// to setup a frame chain for fast walking. If this flag is set, r11 is; /// implicitly added to the list of saved non-volatile integer registers.; /// Stack Adjust : 10-bit field indicating the number of bytes of stack that are; /// allocated for this function. Only values between 0x000 and; /// 0x3f3 can be directly encoded. If the value is 0x3f4 or; /// greater, then the low 4 bits have special meaning as follows:; /// - Bit 0-1; /// indicate the number of words' of adjustment (1-4), minus 1; /// - Bit 2; /// indicates if the prologue combined adjustment into push; /// - Bit 3; /// indicates if the epilogue combined adjustment into pop; ///; /// RESTRICTIONS:; /// - IF C is SET:; /// + L flag must be set since frame chaining requires r11 and lr; /// + r11 must NOT be included in the set of registers described by Reg; /// - IF Ret is 0:; /// + L flag must be set; // NOTE: RuntimeFunction is meant to be a simple class that provides raw access; // to all fields in the structure. The accessor methods reflect the names of; // the bitfields that they correspond to. Although some obvious simplifications; // are possible via merging of methods, it would prevent the use of this class; // to fully inspect the contents of the data structure which is particularly; // useful for scenarios such as llvm-readobj to aid in testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h:3433,simpl,simple,3433,interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h,2,['simpl'],"['simple', 'simplifications']"
Usability,"etadata"": {; ""lumi"": 10000.0, ; ""xsec"": 1.0,; ""sample_category"" = ""data""; }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {; ""lumi"": 0.5, ; ""xsec"": 1.5,; ""sample_category"" = ""MC_background""; }; }; }; }; ~~~. The metadata information from the specification file can be then accessed using the DefinePerSample function.; For example, to access luminosity information (stored as a double):. ~~~{.python}; df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); ~~~. or sample_category information (stored as a string):. ~~~{.python}; df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); ~~~. or directly the filename:. ~~~{.python}; df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); ~~~. An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; provides a corresponding exemplary JSON file for the dataset specification. \anchor progressbar; ### Adding a progress bar . A progress bar showing the processed event statistics can be added to any RDataFrame program.; The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. . ProgressBar is added after creating the dataframe object (df):; ~~~{.cpp}; ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ~~~. Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility ; For example, it can be called at any computational node, such as Filter or Define, not only the head node,; with no change to the ProgressBar function itself (please see the [Efficient analysis in Python](#python) ; section for appropriate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:79696,progress bar,progress bar,79696,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['progress bar'],['progress bar']
Usability,"eter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2838,Undo,Undo,2838,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,8,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"ethod; (by default the size is 30 Megabytes). This feature can be controlled with the; environment variable `ROOT_TTREECACHE_SIZE` or the TTreeCache.Size option.; The entry range for which the cache is active can also be set with the; SetEntryRange method. \anchor changesbehaviour; ## Changes of behavior when using TChain and TEventList. The usage of TChain or TEventList have influence on the behaviour of the cache:. - Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. - Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning phase is started or restarted when:; - TTree automatically creates a cache.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTreeCache::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; - TTreeCache::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries.; - A 'cached' TChain switches over to a new file. \anchor cachemisses; ## Self-optimization in presence of cache misses. The TTreeCache can optimize its behavior on a cache miss. When; miss optimization is enabled (see the SetOptimizeMisses method),; it tracks all branches utilized after the learning phase which caused a cache; miss.; When one cache miss occurs, all the utilized branches are be prefetched; for that event. This optimization utilizes the observation that infrequently; accessed branches are often accessed together.; An example scenario where such behavior is desirable, is an analysis where; a set of collections are read only for a few events in whic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:4307,learn,learning,4307,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"etworks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly chosen examples are:. - image analysis; - financial movements predictions and analysis; - sales forecast and product shipping optimisation; - in particles physics: mainly for classification tasks (signal; over background discrimination). More than 50% of neural networks are multilayer perceptrons. This; implementation of multilayer perceptrons is inspired from the; <A HREF=""http://schwind.home.cern.ch/schwind/MLPfit.html"">MLPfit; package</A> originally written by Jerome Schwindling. MLPfit remains; one of the fastest tool for neural networks studies, and this ROOT; add-on will not try to compete on that. A clear and flexible Object; Oriented implementation has been chosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. ### The MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. \image html mlp.png. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with <I>f</I> being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. 1. A linear combination of sigmoids can approximate any; continuous function.; 2. Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. ### Learning methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, divided by two, of the error on ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:2921,simpl,simple,2921,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['simpl'],['simple']
Usability,"example, if the formula. TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default; the name of the object = title = formula itself.; old.SetName(""old"").; then, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShift) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. ### CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. ### WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a specia",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:2054,simpl,simple,2054,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['simpl'],['simple']
Usability,"f (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. `BoundingBox:` You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ### Master/Local Reference Frames. The `Core` section of TBuffer3D contains two members relating to reference; frames:; `fLocalFrame` & `fLocalMaster`. `fLocalFrame` indicates if any positions in the; buffer (bounding box and tessellation vertexes) are in local or master (world frame).; `fLocalMaster` is a standard 4x4 translation matrix (OpenGL column major ordering); for placing the object into the 3D master frame. If `fLocalFrame` is kFALSE, `fLocalMaster` should contain an identity matrix. This; is set by default, and can be reset using `SetLocalMasterIdentity()` function. Logical & Physical Objects.; There are two cases of object addition:. - Add this object as a single independent entity in the world reference frame.; - Add a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placem",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx:3906,simpl,simpler,3906,core/base/src/TBuffer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBuffer3D.cxx,1,['simpl'],['simpler']
Usability,"f Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely nume",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1786,simpl,simply,1786,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['simpl'],['simply']
Usability,"fer3DSphere; // Try first add to viewer; Int_t reqSections = viewer->AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRawSizes) {; // Fill out kRawSizes...; }; if (reqSections & TBuffer3D::kRaw) {; // Fill out kRaw...; }; // Add second time to viewer - ignore return cannot do more; viewer->AddObject(buffer);; }; }; ~~~. ShapeSpecific: If the viewer can directly display the buffer without; filling of the kRaw/kRawSizes section it will not need to request client side; tessellation. Currently we provide the following various shape specific classes,; which the OpenGL viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). - TBuffer3DSphere - solid, hollow and cut spheres*; - TBuffer3DTubeSeg - angle tube segment; - TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated. Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time. BoundingBox: You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes. As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. ## Master/Local Reference Frames. The Core section of TBuffer3D contains two members relating to reference frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer; (bounding box and tessellation vertexes) are in local or master (world frame).; fLocalMaster is a standard",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:5754,clear,clear,5754,core/base/src/TVirtualViewer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx,1,['clear'],['clear']
Usability,"file histogram; // - a tree; //; // These objects are filled with some random numbers and saved on a file. #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h"". //__________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");. // Create some histograms and a profile histogram; TH1F hpx(""hpx"",""This is the px distribution"",100,-4,4);; TH2F hpxpy(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; TProfile hprof(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);. // Define some simple structures; typedef struct {Float_t x,y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; POINT point;; EVENTN eventn;. // Create a ROOT Tree; TTree tree(""T"",""An example of ROOT tree with a few branches"");; tree.Branch(""point"",&point,""x:y:z"");; tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);. Float_t px,py,pz;. // Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; const auto random = gRandom->::Rndm(1);. // Fill histograms; hpx.Fill(px);; hpxpy.Fill(px,py,1);; hprof.Fill(px,pz,1);. // Fill structures; point.x = 10*(random-1);; point.y = 5*random;; point.z = 20*random;; eventn.ntrack = Int_t(100*random);; eventn.nseg = Int_t(2*eventn.ntrack);; eventn.nvertex = 1;; eventn.flag = Int_t(random+0.5);; eventn.temperature = 20+random;. // Fill the tree. For each event, save the 2 structures and 3 objects; // In this simple example, the objects hpx, hprof and hpxpy are slightly; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:13114,simpl,simple,13114,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simple']
Usability,"fined; // only by L1.; // - The result of L2 is used only by L3.; // - The base address (xB) in L3 is defined only L2.; // - The ADRP in L1 and the ADD in L2 must reference the same symbol using; // @PAGE/@PAGEOFF with no additional constants; //; // Currently supported LOHs are:; // * So called non-ADRP-related:; // - .loh AdrpAddLdr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdrGotLdr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdr L1, L3:; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xA, sym@PAGEOFF]; // - .loh AdrpAddStr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: str xC, [xB, #imm]; // - .loh AdrpLdrGotStr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: str xC, [xB, #imm]; // - .loh AdrpAdd L1, L2:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // For all these LOHs, L1, L2, L3 form a simple chain:; // L1 result is used only by L2 and L2 result by L3.; // L3 LOH-related argument is defined only by L2 and L2 LOH-related argument; // by L1.; // All these LOHs aim at using more efficient load/store patterns by folding; // some instructions used to compute the address directly into the load/store.; //; // * So called ADRP-related:; // - .loh AdrpAdrp L2, L1:; // L2: ADRP xA, sym1@PAGE; // L1: ADRP xA, sym2@PAGE; // L2 dominates L1 and xA is not redifined between L2 and L1; // This LOH aims at getting rid of redundant ADRP instructions.; //; // The overall design for emitting the LOHs is:; // 1. AArch64CollectLOH (this pass) records the LOHs in the AArch64FunctionInfo.; // 2. AArch64AsmPrinter reads the LOHs from AArch64FunctionInfo and it:; // 1. Associates them a label.; // 2. Emits them in a MCStreamer (EmitLOHDirective).; // - The MCMachOStreamer records them into the MCAssembler.; // - The MCAsmStreamer prints them.; // - Other MCStreamers ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:2911,simpl,simple,2911,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,1,['simpl'],['simple']
Usability,"for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; ~~~; One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; ~~~; To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot.; ~~~ {.cpp}; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; ~~~; Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. ### NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:1914,Clear,Clear,1914,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['Clear'],['Clear']
Usability,"formable partial iMCUs to be dropped;; * this is not strictly lossless, but it usually gives the best-looking; * result for odd-size images. Note that when this option is active,; * the expected mathematical equivalences between the transforms may not hold.; * (For example, -rot 270 -trim trims only the bottom edge, but -rot 90 -trim; * followed by -rot 180 -trim trims both edges.); *; * We also offer a lossless-crop option, which discards data outside a given; * image region but losslessly preserves what is inside. Like the rotate and; * flip transforms, lossless crop is restricted by the JPEG format: the upper; * left corner of the selected region must fall on an iMCU boundary. If this; * does not hold for the given crop parameters, we silently move the upper left; * corner up and/or left to make it so, simultaneously increasing the region; * dimensions to keep the lower right crop corner unchanged. (Thus, the; * output image covers at least the requested region, but may cover more.); *; * We also provide a lossless-resize option, which is kind of a lossless-crop; * operation in the DCT coefficient block domain - it discards higher-order; * coefficients and losslessly preserves lower-order coefficients of a; * sub-block.; *; * Rotate/flip transform, resize, and crop can be requested together in a; * single invocation. The crop is applied last --- that is, the crop region; * is specified in terms of the destination image after transform/resize.; *; * We also offer a ""force to grayscale"" option, which simply discards the; * chrominance channels of a YCbCr image. This is lossless in the sense that; * the luminance channel is preserved exactly. It's not the same kind of; * thing as the rotate/flip transformations, but it's convenient to handle it; * as part of this package, mainly because the transformation routines have to; * be aware of the option to know how many components to work on.; */; /* Short forms of external names for systems with brain-damaged linkers. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h:2791,simpl,simply,2791,graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/transupp.h,1,['simpl'],['simply']
Usability,"fully, support of ODBC will allow usage of; // statements for most existing RDBMS.; //; // // first, connect to the database; // TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; // ""user"", ""pass"");; // // check if connection is ok; // if ((serv!=0) && serv->IsConnected()) {; // // create instance of sql-statement; // TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // // process statement; // stmt->Process();; // // destroy object; // delete stmt;; // }; // delete serv;; //; //; // 2. Insert data to data base; // ===============================================; // There is a special syntax of SQL queries which allows to use values; // provided as parameters. For instance, to insert one row into the TESTTABLE created; // with the previous example, one can simply execute a query like:; //; // serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");; //; // However, when many (100-1000) rows should be inserted, each call of; // TSQLServer::Query() method will cause communication loop with database; // server, and the statement has to be evaluated each time instead of using a prepared statement.; // As a result, insertion of data takes too much time.; //; // TSQLStatement provides a mechanism to insert many rows at once.; // First of all, an appropriate statement should be created:; //; // TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);; //; // Here question marks ""?"" indicate where statement parameters can be inserted.; // To specify values of parameters, SetInt(), SetDouble(), SetString() and other; // methods of the TSQLStatement class should be used. Before parameters values; // can be specified, the NextIteration() method of statement class should be called.; // For each new row, NextIteration() has to be called first, then parameters values are; // specified. There is one limita",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx:2370,simpl,simply,2370,net/net/src/TSQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TSQLStatement.cxx,1,['simpl'],['simply']
Usability,"g""; alt=""DOI""></a>; \endhtmlonly. ## For the impatient user; You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python. ## Table of Contents; - [Cheat sheet](\ref cheatsheet); - [Introduction](\ref introduction); - [Crash course](\ref crash-course); - [Working with collections](\ref collections); - [Transformations: manipulating data](\ref transformations); - [Actions: getting results](\ref actions); - [Distributed execution in Python](\ref distrdf); - [Performance tips and parallel execution](\ref parallel-execution); - [More features](\ref more-features); - [Systematic variations](\ref systematics); - [RDataFrame objects as function arguments and return values](\ref rnode); - [Storing RDataFrame objects in collections](\ref RDFCollections); - [Executing callbacks every N events](\ref callbacks); - [Default column lists](\ref default-branches); - [Special helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); - [User-defined custom actions](\ref generic-actions); - [Dataset joins with friend trees](\ref friends); - [Reading data formats other than ROOT trees](\ref other-file-formats); - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); - [Visualizing the computation graph](\ref representgraph); - [Activating RDataFrame execution logs](\ref rdf-logging); - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); - [Adding a progress bar](\ref progressbar); - [Working with missing values in the dataset](\ref missing-values); - [Efficient analysis in Python](\ref python); - <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>. \anchor cheatsheet; ## Cheat sheet; These are the operations which can be performed ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:2804,progress bar,progress bar,2804,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['progress bar'],['progress bar']
Usability,"g, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""). # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); \endcode. \code{.cpp}; ROOT::RDataFrame df{dataset};. // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");. // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; \endcode. #### DefaultValueFor. DefaultValueFor creates a node of the computation graph which just forwards the; values of the columns necessary for other downstream nodes, when they are; available. In case a value of the input column passed to this function is not; available, the node will provide the default value passed to this function call; instead. Example:. \code{.py}; df = ROOT.RDataFrame(dataset); # Anytime an entry from ""col"" is missing, the value will be the default one; default_value = ... # Some sensible default value here; df = df.DefaultValueFor(""col"", default_value) ; df = df.Define(""twice"", ""col * 2""); \endcode. \code{.cpp}; ROOT::RDataFrame df{dataset};; // Anytime an entry from ""col"" is missing, the value will be the default one; constexpr auto default_value = ... // Some sensible default value here; auto df_default = df.De",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:83875,clear,clearly,83875,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['clear'],['clearly']
Usability,"g. via a high latency network. For each TTree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted.; The user can change the size of the cache with the TTree::SetCacheSize method; (by default the size is 30 Megabytes). This feature can be controlled with the; environment variable `ROOT_TTREECACHE_SIZE` or the TTreeCache.Size option.; The entry range for which the cache is active can also be set with the; SetEntryRange method. \anchor changesbehaviour; ## Changes of behavior when using TChain and TEventList. The usage of TChain or TEventList have influence on the behaviour of the cache:. - Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. - Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning phase is started or restarted when:; - TTree automatically creates a cache.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTreeCache::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; - TTreeCache::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries.; - A 'cached' TChain switches over to a new file. \anchor cachemisses; ## Self-optimization in presence of cache misses. The TTreeCache can optimize its behavior on a cache miss. When; miss optimization is enabled (see the SetOptimizeMisses method),; it tracks all branches utilized after the learning phase which caused a cache; miss.; When one cache miss occurs, all the utilized branches are be prefetched; fo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:4035,learn,learning,4035,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"gether, this means we need to adjust the; /// type of boolean operations to be regbank legal. All SALU booleans need to be; /// widened to 32-bits, and all VALU booleans need to be s1 values.; ///; /// A noteworthy exception to the s1-means-vcc rule is for legalization artifact; /// casts. G_TRUNC s1 results, and G_SEXT/G_ZEXT/G_ANYEXT sources are never vcc; /// bank. A non-boolean source (such as a truncate from a 1-bit load from; /// memory) will require a copy to the VCC bank which will require clearing the; /// high bits and inserting a compare.; ///; /// \par Constant bus restriction; ///; /// VALU instructions have a limitation known as the constant bus; /// restriction. Most VALU instructions can use SGPR operands, but may read at; /// most 1 SGPR or constant literal value (this to 2 in gfx10 for most; /// instructions). This is one unique SGPR, so the same SGPR may be used for; /// multiple operands. From a register bank perspective, any combination of; /// operands should be legal as an SGPR, but this is contextually dependent on; /// the SGPR operands all being the same register. There is therefore optimal to; /// choose the SGPR with the most uses to minimize the number of copies.; ///; /// We avoid trying to solve this problem in RegBankSelect. Any VALU G_*; /// operation should have its source operands all mapped to VGPRs (except for; /// VCC), inserting copies from any SGPR operands. This the most trivial legal; /// mapping. Anything beyond the simplest 1:1 instruction selection would be too; /// complicated to solve here. Every optimization pattern or instruction; /// selected to multiple outputs would have to enforce this rule, and there; /// would be additional complexity in tracking this rule for every G_*; /// operation. By forcing all inputs to VGPRs, it also simplifies the task of; /// picking the optimal operand combination from a post-isel optimization pass.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:3562,simpl,simplest,3562,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,2,['simpl'],"['simplest', 'simplifies']"
Usability,"gruence class has a leader, and the leader is used to symbolize; // instructions in a canonical way (IE every operand of an instruction that is a; // member of the same congruence class will always be replaced with leader; // during symbolization). To simplify symbolization, we keep the leader as a; // constant if class can be proved to be a constant value. Otherwise, the; // leader is the member of the value set with the smallest DFS number. Each; // congruence class also has a defining expression, though the expression may be; // null. If it exists, it can be used for forward propagation and reassociation; // of values.; // For memory, we also track a representative MemoryAccess, and a set of memory; // members for MemoryPhis (which have no real instructions). Note that for; // memory, it seems tempting to try to split the memory members into a; // MemoryCongruenceClass or something. Unfortunately, this does not work; // easily. The value numbering of a given memory expression depends on the; // leader of the memory congruence class, and the leader of memory congruence; // class depends on the value numbering of a given memory expression. This; // leads to wasted propagation, and in some cases, missed optimization. For; // example: If we had value numbered two stores together before, but now do not,; // we move them to a new value congruence class. This in turn will move at one; // of the memorydefs to a new memory congruence class. Which in turn, affects; // the value numbering of the stores we just value numbered (because the memory; // congruence class is part of the value number). So while theoretically; // possible to split them up, it turns out to be *incredibly* complicated to get; // it to work right, because of the interdependency. While structurally; // slightly messier, it is algorithmically much simpler and faster to do what we; // do here, and track them both at once in the same class.; // Note: The default iterators for this class iterate over values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:2323,simpl,simpler,2323,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['simpl'],['simpler']
Usability,"h the downsampler produces v_samp_factor sample rows.; * A single row group is processed in each call to the downsampler module.; *; * The downsampler is responsible for edge-expansion of its output data; * to fill an integral number of DCT blocks horizontally. The source buffer; * may be modified if it is helpful for this purpose (the source buffer is; * allocated wide enough to correspond to the desired output width).; * The caller (the prep controller) is responsible for vertical padding.; *; * The downsampler may request ""context rows"" by setting need_context_rows; * during startup. In this case, the input arrays will contain at least; * one row group's worth of pixels above and below the passed-in data;; * the caller will create dummy rows at image top and bottom by replicating; * the first or last real pixel row.; *; * An excellent reference for image resampling is; * Digital Image Warping, George Wolberg, 1990.; * Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.; *; * The downsampling algorithm used here is a simple average of the source; * pixels covered by the output pixel. The hi-falutin sampling literature; * refers to this as a ""box filter"". In general the characteristics of a box; * filter are not very good, but for the specific cases we normally use (1:1; * and 2:1 ratios) the box is equivalent to a ""triangle filter"" which is not; * nearly so bad. If you intend to use other sampling ratios, you'd be well; * advised to improve this code.; *; * A simple input-smoothing capability is provided. This is mainly intended; * for cleaning up color-dithered GIF input files (if you find it inadequate,; * we suggest using an external filtering program such as pnmconvol). When; * enabled, each input pixel P is replaced by a weighted sum of itself and its; * eight neighbors. P's weight is 1-8*SF and each neighbor's weight is SF,; * where SF = (smoothing_factor / 1024).; * Currently, smoothing is only supported for 2h2v sampling factors.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcsample.c:1460,simpl,simple,1460,graf2d/asimage/src/libAfterImage/libjpeg/jcsample.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jcsample.c,2,['simpl'],['simple']
Usability,"hading algorithms. One; /// can control the weight between both algorithms.; ///; /// ""Display modes"" can take the following values:; ///; /// - 1 = Points.; /// - 2 = Grid.; /// - 3 = Contours.; /// - 4 = Bars.; /// - 5 = LinesX.; /// - 6 = LinesY.; /// - 7 = BarsX.; /// - 8 = BarsY.; /// - 9 = Needles.; /// - 10 = Surface.; /// - 11 = Triangles.; ///; /// Using this function these parameters can be set using the ""dm"" operator; /// in the option. Example:; ///; /// h2->Draw(""SPEC dm(1,2)"");; ///; /// will paint the 2D histogram h2 using the ""Light Display mode group"" and; /// the ""Grid Display mode"". The following table summarises all the possible; /// combinations of the ""Display modes groups"" and the ""Display modes"".; ///; /// | | Simple | Light | Height | Light-Height |; /// |-----------|--------|-------|--------|--------------|; /// | Points | X | X | X | X |; /// | Grid | X | X | X | X |; /// | Contours | X | - | X | - |; /// | Bars | X | - | X | - |; /// | LinesX | X | X | X | X |; /// | LinesY | X | X | X | X |; /// | BarsX | X | - | X | - |; /// | BarsY | X | - | X | - |; /// | Needles | X | - | - | - |; /// | Surface | - | X | X | X |; /// | Triangles | X | X | X | X |; ///; /// The Pen Attributes can be changed using pa(color, style, width). Example:; ///; /// h2->Draw(""SPEC dm(1,2) pa(2,1,2)"");; ///; /// sets the line color to 2, line type to 1 and line width to2. Note that if; /// pa() is not specified, the histogram ""h2"" line attributes are used. Note; /// also that operators for SPEC option can be cumulated and specified in; /// any order.; ///; /// The buffer size can be change with bf(size). Example:; ///; /// h2->Draw(""SPEC bf(8000)"");; ///; /// The spectrum painter needs a buffer to paint the spectrum. By default the; /// buffer size is set to 1600. In most cases this buffer size is enough. But; /// if the canvas size is very big, for instance 8000x5000 this buffer size is; /// too small. An error message is issued telling to use the option bf().; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:2158,Simpl,Simple,2158,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"har b1[1024], b2[1024];; // if (...) {; // char b3[1024];; // <uses of b1, b3>;; // return x;; // } else {; // char b4[1024], b5[1024];; // <uses of b2, b4, b5>;; // return y;; // }; // }; //; // In the code above, ""b3"" and ""b4"" are declared in distinct lexical; // scopes, meaning that it is easy to prove that they can share the; // same stack slot. Variables ""b1"" and ""b2"" are declared in the same; // scope, meaning that from a lexical point of view, their lifetimes; // overlap. From a control flow pointer of view, however, the two; // variables are accessed in disjoint regions of the CFG, thus it; // should be possible for them to share the same stack slot. An ideal; // stack allocation for the function above would look like:; //; // slot 0: b1, b2; // slot 1: b3, b4; // slot 2: b5; //; // Achieving this allocation is tricky, however, due to the way; // lifetime markers are inserted. Here is a simplified view of the; // control flow graph for the code above:; //; // +------ block 0 -------+; // 0| LIFETIME_START b1, b2 |; // 1| <test 'if' condition> |; // +-----------------------+; // ./ \.; // +------ block 1 -------+ +------ block 2 -------+; // 2| LIFETIME_START b3 | 5| LIFETIME_START b4, b5 |; // 3| <uses of b1, b3> | 6| <uses of b2, b4, b5> |; // 4| LIFETIME_END b3 | 7| LIFETIME_END b4, b5 |; // +-----------------------+ +-----------------------+; // \. /.; // +------ block 3 -------+; // 8| <cleanupcode> |; // 9| LIFETIME_END b1, b2 |; // 10| return |; // +-----------------------+; //; // If we create live intervals for the variables above strictly based; // on the lifetime markers, we'll get the set of intervals on the; // left. If we ignore the lifetime start markers and instead treat a; // variable's lifetime as beginning with the first reference to the; // var, then we get the intervals on the right.; //; // LIFETIME_START First Use; // b1: [0,9] [3,4] [8,9]; // b2: [0,9] [6,9]; // b3: [2,4] [3,4]; // b4: [5,7] [6,7]; // b5: [5,7] [6,7]; //; // For the int",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:6386,simpl,simplified,6386,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['simpl'],['simplified']
Usability,"he a type's encoding for later uses;; /// 2. As a means to break recursive member type inclusion.; ///; /// A cache Entry can have a Status of:; /// NonRecursive: The type encoding is not recursive;; /// Recursive: The type encoding is recursive;; /// Incomplete: An incomplete TypeString;; /// IncompleteUsed: An incomplete TypeString that has been used in a; /// Recursive type encoding.; ///; /// A NonRecursive entry will have all of its sub-members expanded as fully; /// as possible. Whilst it may contain types which are recursive, the type; /// itself is not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1078,simpl,simplicity,1078,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,1,['simpl'],['simplicity']
Usability,"he current context isn't native for either of the instructions, then; /// the higher-priority context wins (that is, the one that is more specific).; /// That hierarchy is determined by outranks() (X86DisassemblerTables.cpp); /// - If the current context is native for both instructions, then the table; /// emitter reports a conflict and dies.; ///; /// *** RESOLUTION FOR ""Primary decode conflict""S; ///; /// If two instructions collide, typically the solution is (in order of; /// likelihood):; ///; /// (1) to filter out one of the instructions by editing filter(); /// (X86RecognizableInstr.cpp). This is the most common resolution, but; /// check the Intel manuals first to make sure that (2) and (3) are not the; /// problem.; /// (2) to fix the tables (X86.td and its subsidiaries) so the opcodes are; /// accurate. Sometimes they are not.; /// (3) to fix the tables to reflect the actual context (for example, required; /// prefixes), and possibly to add a new context by editing; /// include/llvm/Support/X86DisassemblerDecoderCommon.h. This is unlikely; /// to be the cause.; ///; /// DisassemblerEmitter.cpp contains the implementation for the emitter,; /// which simply pulls out instructions from the CodeGenTarget and pushes them; /// into X86DisassemblerTables.; /// X86DisassemblerTables.h contains the interface for the instruction tables,; /// which manage and emit the structures discussed above.; /// X86DisassemblerTables.cpp contains the implementation for the instruction; /// tables.; /// X86ModRMFilters.h contains filters that can be used to determine which; /// ModR/M values are valid for a particular instruction. These are used to; /// populate ModRMDecisions.; /// X86RecognizableInstr.h contains the interface for a single instruction,; /// which knows how to translate itself from a CodeGenInstruction and provide; /// the information necessary for integration into the tables.; /// X86RecognizableInstr.cpp contains the implementation for a single; /// instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:3333,simpl,simply,3333,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,1,['simpl'],['simply']
Usability,"he linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space. The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means, \f$ x_i \f$,; for each input variable, \f$ i \f$,; class-specific sample means, \f$ x_{S(B),i}\f$,; and total covariance matrix \f$ T_{ij} \f$. The covariance matrix; can be decomposed into the sum of a _within_ (\f$ W_{ij} \f$); and a _between-class_ (\f$ B_{ij} \f$) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, \f$ F_i \f$, are then given by. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. where in TMVA is set \f$ N_S = N_B \f$, so that the factor; in front of the sum simplifies to \f$ \frac{1}{2}\f$.; The Fisher discriminant then reads. \f[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \f]. The offset \f$ F_0 \f$ centers the sample mean of \f$ x_{Fi} \f$; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. \f[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \f]. with resulting \f$ x_{Ma} \f$ that are very similar to the \f$ x_{Fi} \f$. TMVA provides two outputs for the ranking of the input variables:. - __Fisher test:__ the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: \f$ \frac{B_{ii}}{W_{ii}} \f$ . - __Discrimination power:__ the value of the Fisher coefficient is a; measure of the discriminating power of a variab",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:2874,simpl,simplifies,2874,tmva/tmva/src/MethodFisher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx,1,['simpl'],['simplifies']
Usability,"hen; /// it is trivially translated to branch probabilities. There is one exception; /// from this rule though. Probabilities for edges leading to ""unreachable""; /// blocks (blocks with the estimated weight not greater than; /// UNREACHABLE_WEIGHT) are evaluated according to static estimation and; /// override profile information. If no branch probabilities were calculated; /// on this step then take the next one.; ///; /// Second, estimate absolute execution weights for each block based on; /// statically known information. Roots of such information are ""cold"",; /// ""unreachable"", ""noreturn"" and ""unwind"" blocks. Those blocks get their; /// weights set to BlockExecWeight::COLD, BlockExecWeight::UNREACHABLE,; /// BlockExecWeight::NORETURN and BlockExecWeight::UNWIND respectively. Then the; /// weights are propagated to the other blocks up the domination line. In; /// addition, if all successors have estimated weights set then maximum of these; /// weights assigned to the block itself (while this is not ideal heuristic in; /// theory it's simple and works reasonably well in most cases) and the process; /// repeats. Once the process of weights propagation converges branch; /// probabilities are set for all such branches that have at least one successor; /// with the weight set. Default execution weight (BlockExecWeight::DEFAULT) is; /// used for any successors which doesn't have its weight set. For loop back; /// branches we use their weights scaled by loop trip count equal to; /// 'LBH_TAKEN_WEIGHT/LBH_NOTTAKEN_WEIGHT'.; ///; /// Here is a simple example demonstrating how the described algorithm works.; ///; /// BB1; /// / \; /// v v; /// BB2 BB3; /// / \; /// v v; /// ColdBB UnreachBB; ///; /// Initially, ColdBB is associated with COLD_WEIGHT and UnreachBB with; /// UNREACHABLE_WEIGHT. COLD_WEIGHT is set to BB2 as maximum between its; /// successors. BB1 and BB3 has no explicit estimated weights and assumed to; /// have DEFAULT_WEIGHT. Based on assigned weights branc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h:1954,simpl,simple,1954,interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BranchProbabilityInfo.h,1,['simpl'],['simple']
Usability,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3622,clear,clear,3622,math/matrix/src/TDecompBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx,1,['clear'],['clear']
Usability,"hich will have its channel substituted;; * channel_dst - what channel to move data to;; * src - ASImage which will donate its channel to dst;; * channel_src - what source image channel to move data from.; * DESCRIPTION; * MOves channel data from one ASImage to another, while discarding; * what was already in destination's channel.; * NOTES; * Source image (donor) will loose its channel data, as it will be; * moved to destination ASImage. Also there is a condition that both; * images must be of the same width - otherwise function returns; * without doing anything. If height is different - the minimum of; * two will be used.; *********/; /****f* libAfterImage/asimage/copy_asimage_channel(); * NAME; * copy_asimage_channel(); * SYNOPSIS; * void copy_asimage_channel( ASImage *dst, int channel_dst,; * ASImage *src, int channel_src );; * INPUTS; * dst - ASImage which will have its channel substituted;; * channel_dst - what channel to copy data to;; * src - ASImage which will donate its channel to dst;; * channel_src - what source image channel to copy data from.; * DESCRIPTION; * Same as move_asimage_channel() but makes copy of channel's data; * instead of simply moving it from one image to another.; *********/; /****f* libAfterImage/asimage/copy_asimage_lines(); * NAME; * copy_asimage_lines(); * SYNOPSIS; * void copy_asimage_lines( ASImage *dst, unsigned int offset_dst,; * ASImage *src, unsigned int offset_src,; * unsigned int nlines, ASFlagType filter );; * INPUTS; * dst - ASImage which will have its channel substituted;; * offset_dst - scanline in destination image to copy to;; * src - ASImage which will donate its channel to dst;; * offset_src - scanline in source image to copy data from;; * nlines - number of scanlines to be copied;; * filter - specifies what channels should be copied.; * DESCRIPTION; * Makes copy of scanline data for continuos set of scanlines, affecting; * only those channels marked in filter.; * NOTE; * Images must be of the same width.; *********/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h:3116,simpl,simply,3116,graf2d/asimage/src/libAfterImage/asimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h,1,['simpl'],['simply']
Usability,"his //; // class is meant to be as generic as possible to be used with files //; // hosted not only by Amazon S3 servers but also by other providers //; // implementing the core of the S3 protocol. //; // //; // The S3 protocol works on top of HTTPS (and HTTP) and imposes that //; // each HTTP request be signed using a specific convention: the request //; // must include an 'Authorization' header which contains the signature //; // of a concatenation of selected request fields. For signing the //; // request, an 'Access Key Id' and a 'Secret Access Key' need to be //; // known. These keys are used by the S3 servers to identify the client //; // and to authenticate the request as genuine. //; // //; // As an end user, you must know the Access Key and Secret Access Key //; // in order to access each S3 file. They are provided to you by your S3 //; // service provider. Those two keys can be provided to ROOT when //; // initializing an object of this class by two means: //; // a) by using the environmental variables S3_ACCESS_KEY and //; // S3_SECRET_KEY, or //; // b) by specifying them as an argument when opening each file. //; // //; // The first method is convenient if all the S3 files you want to //; // access are hosted by a single provider. The second one is more //; // flexible as it allows you to specify which credentials to use //; // on a per-file basis. See the documentation of the constructor of //; // this class for details on the syntax. //; // //; // For generating and signing the HTTP request, this class uses //; // TS3HTTPRequest. //; // //; // For more information on the details of S3 protocol please refer to: //; // ""Amazon Simple Storage Service Developer Guide"": //; // http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html //; // //; // ""Amazon Simple Storage Service REST API Reference"" //; // http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h:1918,Simpl,Simple,1918,net/net/inc/TS3WebFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h,3,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,"his class implements a layout algorithm for globals referenced by bit sets; /// that tries to keep members of small bit sets together. This can; /// significantly reduce bit set sizes in many cases.; ///; /// It works by assembling fragments of layout from sets of referenced globals.; /// Each set of referenced globals causes the algorithm to create a new; /// fragment, which is assembled by appending each referenced global in the set; /// into the fragment. If a referenced global has already been referenced by an; /// fragment created earlier, we instead delete that fragment and append its; /// contents into the fragment we are assembling.; ///; /// By starting with the smallest fragments, we minimize the size of the; /// fragments that are copied into larger fragments. This is most intuitively; /// thought about when considering the case where the globals are virtual tables; /// and the bit sets represent their derived classes: in a single inheritance; /// hierarchy, the optimum layout would involve a depth-first search of the; /// class hierarchy (and in fact the computed layout ends up looking a lot like; /// a DFS), but a naive DFS would not work well in the presence of multiple; /// inheritance. This aspect of the algorithm ends up fitting smaller; /// hierarchies inside larger ones where that would be beneficial.; ///; /// For example, consider this class hierarchy:; ///; /// A B; /// \ / | \; /// C D E; ///; /// We have five bit sets: bsA (A, C), bsB (B, C, D, E), bsC (C), bsD (D) and; /// bsE (E). If we laid out our objects by DFS traversing B followed by A, our; /// layout would be {B, C, D, E, A}. This is optimal for bsB as it needs to; /// cover the only 4 objects in its hierarchy, but not for bsA as it needs to; /// cover 5 objects, i.e. the entire layout. Our algorithm proceeds as follows:; ///; /// Add bsC, fragments {{C}}; /// Add bsD, fragments {{C}, {D}}; /// Add bsE, fragments {{C}, {D}, {E}}; /// Add bsA, fragments {{A, C}, {D}, {E}}; /// Add bsB,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h:800,intuit,intuitively,800,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h,1,['intuit'],['intuitively']
Usability,"hors: Fons Rademakers, Eddy Offermann Dec 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDecompBase; \ingroup Matrix. Decomposition Base class. This class forms the base for all the decompositions methods in the; linear algebra package .; It or its derived classes have installed the methods to solve; equations,invert matrices and calculate determinants while monitoring; the accuracy. Each derived class has always the following methods available:. #### Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effect",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:1078,simpl,simple,1078,math/matrix/src/TDecompBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx,1,['simpl'],['simple']
Usability,"ich you supply your own method. FOAM can do it for you!; Even if your distributions has quite strong peaks and is discontinuous!; - FOAM generates random points with weight one or with variable weight.; - FOAM is capable to integrate using efficient ""adaptive"" MC method.; (The distribution does not need to be normalized to one.). ### How does it work?. FOAM is the simplified version of the multi-dimensional general purpose; Monte Carlo event generator (integrator) FOAM.; It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks.; See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. \image html foam_MapCamel1000.png width=400. FOAM is now fully integrated with the ROOT package.; The important bonus of the ROOT use is persistency of the FOAM objects!. For more sophisticated problems full version of FOAM may be more appropriate:; See [full version of FOAM](http://jadach.home.cern.ch/jadach/Foam/Index.html). ### Simple example of the use of FOAM:. Begin_Macro(source); ../../../tutorials/foam/foam_kanwa.C; End_Macro. ### Canonical nine steering parameters of FOAM. | Name | default | Description |; |----------|----------|--------------------------------------------------------|; | kDim | 0 | Dimension of the integration space. Must be redefined! |; | nCells | 1000 | No of allocated number of cells, |; | nSampl | 200 | No. of MC events in the cell MC exploration |; | nBin | 8 | No. of bins in edge-histogram in cell exploration |; | OptRej | 1 | OptRej = 0, weighted; OptRej=1, wt=1 MC events |; | OptDrive | 2 | Maximum weight reduction, =1 for variance reduction |; | EvPerBin | 25 | Maximum number of the effective wt=1 events/bin, |; | | | EvPerBin=0 deactivates this option |; | Chat | 1 | =0,1,2 is the ``chat level'' in the standard output |; | MaxWtRej | 1.1 | Maximum weight used to get w=1 MC events |. The above can be redefined before calling Initialize() method,; for instance `FoamObject->SetkDim(15)` sets ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:1560,Simpl,Simple,1560,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,1,['Simpl'],['Simple']
Usability,"ime.; * Additional steps are taken to compensate for screen colordepth; * limitation, and different error diffusion algorithms are used to; * provide for smooth images even in low colordepth modes.; *; * HISTORY; * libAfterImage has been implemented as an attempt to address several; * issues. First one, and most important is that X Window System; * completely lacks any tools for image manipulation, except for very; * rudimentary operations. With Introduction of Render extentions in; * XFree86 4.0 that situation is changing, but still is far from; * perfect. There need is therefore to implement client side image; * manipulation. That inturn creates a problem of image data transfer; * between Server and client.; *; * To avoid that full-time image storage on the client side is needed.; * Which is memory extensive. So there appears to be a need for some; * in-memory compression.; *; * On the other side there is an image quality issue. Its easy to write; * a scaling function by simply dropping out or duplicating pixels,; * but quality is awfull. What is needed is very fast; * averaging/interpolation code. That brings us to the issue of 8 bits; * per channel. Add two pixels together and you get overflow. So all the; * math has to be performed in different colorspace and then converted; * back. On the other side, such a conversion may discard valuable bits,; * so some compensation method has to be implemented.; *; * On the text drawing side of things, there are numerous problems just; * as well. Native X fonts look ugly as soon as you try to show any; * decently sized text. That is supposed to be solved with said Render; * extensions to XFree86, but as experiense has shown, things aren't as; * easy as it looks, besides one wants one's app to run well under any X; * Server. FreeType library provides a solution, but not always; * available. Another problem is that if you keep all your images on the; * client side, you want to draw text on client side as well.; *; * The solut",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h:1838,simpl,simply,1838,graf2d/asimage/src/libAfterImage/afterimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h,1,['simpl'],['simply']
Usability,"imply 10s penalty where a local read of the 10 MBytes would; take about 1 second. The TreeCache tries to prefetch all the buffers for the selected branches; in order to transfer a few multi-Megabytes large buffers instead of many; multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to; be read in increasing order such that the file is read sequentially. Systems like xrootd, dCache or httpd take advantage of the TTreeCache in; reading ahead as much data as they can and return to the application; the maximum data specified in the cache and have the next chunk of data ready; when the next request comes. ### Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all; entries such that not all branch buffers are read. \anchor description; ## General Description; This class acts as a file cache, registering automatically the baskets from; the branches being processed via direct manipulation of TTrees or with tools; such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame; when in the learning phase. The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. The usage of a TTreeCache can considerably improve the runtime performance at; the price of a modest investment in memory, in particular when the TTree is; accessed remotely, e.g. via a high latency network. For each TTree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted.; The user can change the size of the cache with the TTree::SetCacheSize method; (by default the size is 30 Megabytes). This feature can be controlled with the; environment variable `ROOT_TTREECACHE_SIZE` or the TTreeCache.Size option.; The entry range for which the cache is active can also be set with the; SetEntryRange method. \anchor changesbehaviour; ## Changes of behavior when u",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:2783,learn,learning,2783,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['learn'],['learning']
Usability,"in identifying the bins of histograms responsible for; /// a significant overall \f$ \chi^{2} \f$ value. Most convenient for; /// analysis are the adjusted (normalized) residuals [4]; /// \f[; /// r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/(N+M))}}; /// \f]; /// If hypotheses of homogeneity are valid then residuals ri are; /// approximately independent and identically distributed random variables; /// having N(0,1) distribution. The application of the \f$ \chi^{2} \f$ test has; /// restrictions related to the value of the expected frequencies Npi,; /// Mpi, i=1,...,r. A conservative rule formulated in [5] is that all the; /// expectations must be 1 or greater for both histograms. In practical; /// cases when expected frequencies are not known the estimated expected; /// frequencies \f$ M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \f$ can be used.; ///; /// #### Unweighted and weighted histograms comparison:; ///; /// A simple modification of the ideas described above can be used for the; /// comparison of the usual (unweighted) and weighted histograms. Let us; /// denote the number of events in the ith bin in the unweighted; /// histogram as ni and the common weight of events in the ith bin of the; /// weighted histogram as wi. The total number of events in the; /// unweighted histogram is equal to; ///\f[; /// N = \sum_{i=1}^{r} n_{i}; ///\f]; /// and the total weight of events in the weighted histogram is equal to; ///\f[; /// W = \sum_{i=1}^{r} w_{i}; ///\f]; /// Let us formulate the hypothesis of identity of an unweighted histogram; /// to a weighted histogram so that there exist r constants p1,...,pr, such; /// that; ///\f[; /// \sum_{i=1}^{r} p_{i} = 1; ///\f]; /// for the unweighted histogram. The weight wi is a random variable with a; /// distribution approximated by the normal probability distribution; /// \f$ N(Wp_{i},\sigma_{i}^{2}) \f$ where \f$ \sigma_{i}^{2} \f$ is the variance of the weight wi.; /// If we replace t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:5839,simpl,simple,5839,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['simpl'],['simple']
Usability,"in multi-threaded runs, see [here](\ref helper-cols). |; | Filter() | Filter rows based on user-defined conditions. |; | FilterAvailable() | Specialized Filter. If the value of the input column is available, keep the entry, otherwise discard it. |; | FilterMissing() | Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. |; | Range() | Filter rows based on entry number (single-thread only). |; | Redefine() | Overwrite the value and/or type of an existing column. See Define() for more information. |; | RedefineSlot() | Overwrite the value and/or type of an existing column. See DefineSlot() for more information. |; | RedefineSlotEntry() | Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. |; | Vary() | Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). |. ### Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide. In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters. Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to; produce many different results in one event loop. Instant actions trigger the event loop instantly. | **Lazy action** | **Description** |; |------------------|-----------------|; | Aggregate() | Execute a user-defined accumulation operation on the processed column values. |; | Book() | Book execution of a custom action using a user-defined helper object. |; | Cache() | Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). |; | Count() | Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. |; | Display() | P",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:5594,guid,guide,5594,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['guid'],['guide']
Usability,"indexed friend trees (see below). To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame; with the main tree:. ~~~{.cpp}; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");. RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; ~~~. The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree). \note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; one: rows will be mismatched. Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; ""index"" columns have a value identical to the one in the main one. For example, in Python:. ~~~{.py}; main_tree = ...; aux_tree = ... # If a friend tree has an index on `commonColumn`, when the main tree loads; # a given row, it also loads the row of the friend tree that has the same; # value of `commonColumn`; aux_tree.BuildIndex(""commonColumn""). mainTree.AddFriend(aux_tree). df = ROOT.RDataFrame(mainTree); ~~~. RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode. \anchor other-file-formats; ### Reading data formats other than ROOT trees; RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats. RDataFrame calls into concrete RDataSource impl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:73135,simpl,simple,73135,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simple']
Usability,"ing others;; - input/output event lists easy to handle;; - menu with histogram drawing options;; - user commands may be executed within the viewer and the current command; can be echoed;; - current 'Draw' event loop is reflected by a progress bar and may be; interrupted by the user;; - all widgets have self-explaining tool tips and/or context menus;; - expressions/leaves can be dragged to a 'scan box' and scanned by; double-clicking this item. The result can be redirected to an ASCII file;. ### The layout has the following items:. - a menu bar with entries : File, Edit, Run, Options and Help;; - a toolbar in the upper part where you can issue user commands, change; the drawing option and the histogram name, three check buttons Hist, Rec; and Scan.HIST toggles histogram drawing mode, REC enables recording of the; last command issued and SCAN enables redirecting of TTree::Scan command in; an ASCII file (see -Scanning expressions-);; - a button bar in the lower part with : buttons DRAW/STOP that issue histogram; drawing and stop the current command respectively, two text widgets where; input and output event lists can be specified, a message box and a RESET; button on the right that clear edited expression content (see Editing...); - a tree-type list on the main left panel where you can select among trees or; branches. The tree/branch will be detailed in the right panel.; Mapped trees are provided with context menus, activated by right-clicking;; - a view-type list on the right panel. The first column contain X, Y and; Z expression items, an optional cut and ten optional editable expressions.; Expressions and leaf-type items can be dragged or deleted. A right click on; the list-box or item activates context menus. ### Opening a new tree and saving a session :. To open a new tree in the viewer use `<File/Open tree file>` menu; The content of the file (keys) will be listed. Use `<SetTreeName>` function; from the context menu of the right panel, entering a tree name among ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx:2531,clear,clear,2531,tree/treeviewer/src/TTreeViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx,1,['clear'],['clear']
Usability,"ing; /// path.; ///; /// At the end of propagation, the full mass assigned to the loop will be; /// distributed among the loop headers proportionally according to the; /// mass flowing through their backedges.; ///; /// Finally, calculate the loop scale from the accumulated backedge mass.; ///; /// 3. Distribute mass in the function (\a computeMassInFunction()).; ///; /// Finally, distribute mass through the DAG resulting from packaging all; /// loops in the function. This uses the same algorithm as distributing; /// mass in a loop, except that there are no exit or backedge edges.; ///; /// 4. Unpackage loops (\a unwrapLoops()).; ///; /// Initialize each block's frequency to a floating point representation of; /// its mass.; ///; /// Visit loops top-down, scaling the frequencies of its immediate members; /// by the loop's pseudo-node's frequency.; ///; /// 5. Convert frequencies to a 64-bit range (\a finalizeMetrics()).; ///; /// Using the min and max frequencies as a guide, translate floating point; /// frequencies to an appropriate range in uint64_t.; ///; /// It has some known flaws.; ///; /// - The model of irreducible control flow is a rough approximation.; ///; /// Modelling irreducible control flow exactly involves setting up and; /// solving a group of infinite geometric series. Such precision is; /// unlikely to be worthwhile, since most of our algorithms give up on; /// irreducible control flow anyway.; ///; /// Nevertheless, we might find that we need to get closer. Here's a sort; /// of TODO list for the model with diminishing returns, to be completed as; /// necessary.; ///; /// - The headers for the \a LoopData representing an irreducible SCC; /// include non-entry blocks. When these extra blocks exist, they; /// indicate a self-contained irreducible sub-SCC. We could treat them; /// as sub-loops, rather than arbitrarily shoving the problematic; /// blocks into the headers of the main irreducible SCC.; ///; /// - Entry frequencies are assumed to be even",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h:5625,guid,guide,5625,interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BlockFrequencyInfoImpl.h,1,['guid'],['guide']
Usability,"interference (register pressure) across; // IndirectBr edges. Since IndirectBr edges tend to touch on many blocks,; // reducing liveness interference across those edges benefits global register; // allocation. Currently handles only certain cases.; //; // For example, unmerge %GEPI and %UGEPI as below.; //; // ---------- BEFORE ----------; // SrcBlock:; // ...; // %GEPIOp = ...; // ...; // %GEPI = gep %GEPIOp, Idx; // ...; // indirectbr ... [ label %DstB0, label %DstB1, ... label %DstBi ... ]; // (* %GEPI is alive on the indirectbr edges due to other uses ahead); // (* %GEPIOp is alive on the indirectbr edges only because of it's used by; // %UGEPI); //; // DstB0: ... (there may be a gep similar to %UGEPI to be unmerged); // DstB1: ... (there may be a gep similar to %UGEPI to be unmerged); // ...; //; // DstBi:; // ...; // %UGEPI = gep %GEPIOp, UIdx; // ...; // ---------------------------; //; // ---------- AFTER ----------; // SrcBlock:; // ... (same as above); // (* %GEPI is still alive on the indirectbr edges); // (* %GEPIOp is no longer alive on the indirectbr edges as a result of the; // unmerging); // ...; //; // DstBi:; // ...; // %UGEPI = gep %GEPI, (UIdx-Idx); // ...; // ---------------------------; //; // The register pressure on the IndirectBr edges is reduced because %GEPIOp is; // no longer alive on them.; //; // We try to unmerge GEPs here in CodGenPrepare, as opposed to limiting merging; // of GEPs in the first place in InstCombiner::visitGetElementPtrInst() so as; // not to disable further simplications and optimizations as a result of GEP; // merging.; //; // Note this unmerging may increase the length of the data flow critical path; // (the path from %GEPIOp to %UGEPI would go through %GEPI), which is a tradeoff; // between the register pressure and the length of data-flow critical; // path. Restricting this to the uncommon IndirectBr case would minimize the; // impact of potentially longer critical path, if any, and the impact on compile; // time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:1572,simpl,simplications,1572,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['simpl'],['simplications']
Usability,"ionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This will only have any effect when the selected ZSTD_strategy; * implementation supports this feature. Currently, that's limited to; * ZSTD_greedy, ZSTD_lazy, and ZSTD_lazy2.; *; * Note that this means that the CDict tables can no longer be copied into the; * CCtx, so the dict attachment mode ZSTD_dictForceCopy will no longer be; * useable. The dictionary can only be attached or reloaded.; *; * In general, you should expect compression to be faster--sometimes very much; * so--and CDict creation to be slightly slower. Eventually, we will probably; * make this mode the default.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1918,simpl,simply,1918,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['simpl'],['simply']
Usability,"ions_8C.html); for a more complete example. #### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(). Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; executes the callable on the values of those columns for each event that passes all upstream selections.; It can be used to perform actions that are not already available in the interface. For example, the following snippet; evaluates the root mean square of column ""x"":; ~~~{.cpp}; // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; ~~~; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; thread will execute the expression concurrently.; The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; this is probably too much head-scratch for such a simple operation. ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; ~~~{.cpp}; // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);. df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; dou",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:70220,simpl,simple,70220,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simple']
Usability,"is RooStringVar,; but it is rarely used. The ""shapes"" that a RooAbsArg can possess can e.g. be the definition; range of an observable, or how many states a category object has. In computations,; values are expected to change often, while shapes remain mostly constant; (unless e.g. a new range is set for an observable). Nodes of a computation graph are connected using instances of RooAbsProxy.; If Node B declares a member `RooTemplateProxy<TypeOfNodeA>`, Node A will be; registered as a server of values to Node B, and Node B will know that it is; a client of node A. Using functions like dependsOn(), or getObservables(); / getParameters(), the relation of `A --> B` can be queried. Using graphVizTree(),; one can create a visualisation of the expression tree. An instance of RooAbsArg can have named attributes. It also has flags; to indicate that either its value or its shape were changed (= it is dirty).; RooAbsArg provides functionality to manage client/server relations in; a computation graph (\ref clientServerInterface), and helps propagating; value/shape changes through the graph. RooAbsArg implements interfaces; for inspecting client/server relationships (\ref clientServerInterface) and; setting/clearing/querying named attributes. ### Caching of values; The values of nodes in the computation graph are cached in RooFit. If; a value is used in two nodes of a graph, it doesn't need to be recomputed. If; a node acquires a new value, it notifies its consumers (""clients"") that; their cached values are dirty. See the functions in \ref optimisationInterface; for details.; A node uses its isValueDirty() and isShapeDirty() functions to decide if a; computation is necessary. Caching can be vetoed globally by setting a; bit using setDirtyInhibit(). This will make computations slower, but all the; nodes of the computation graph will be evaluated irrespective of whether their; state is clean or dirty. Using setOperMode(), caching can also be enabled/disabled; for single nodes. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:2653,clear,clearing,2653,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['clear'],['clearing']
Usability,"is a conservative approximation of what could through; /// scalar or CGSCC transforms *become* the call graph. Using this allows us to; /// ensure we optimize functions prior to them being introduced into the call; /// graph by devirtualization or other technique, and thus ensures that; /// subsequent pair-wise interprocedural optimizations observe the optimized; /// form of these functions. The (potentially transitive) reference; /// reachability used by the reference graph is a conservative approximation; /// that still allows us to have independent regions of the graph.; ///; /// FIXME: There is one major drawback of the reference graph: in its naive; /// form it is quadratic because it contains a distinct edge for each; /// (potentially indirect) reference, even if are all through some common; /// global table of function pointers. This can be fixed in a number of ways; /// that essentially preserve enough of the normalization. While it isn't; /// expected to completely preclude the usability of this, it will need to be; /// addressed.; ///; ///; /// All of these issues are made substantially more complex in the face of; /// mutations to the call graph while optimization passes are being run. When; /// mutations to the call graph occur we want to achieve two different things:; ///; /// - We need to update the call graph in-flight and invalidate analyses; /// cached on entities in the graph. Because of the cache-based analysis; /// design of the pass manager, it is essential to have stable identities for; /// the elements of the IR that passes traverse, and to invalidate any; /// analyses cached on these elements as the mutations take place.; ///; /// - We want to preserve the incremental and post-order traversal of the; /// graph even as it is refined and mutated. This means we want optimization; /// to observe the most refined form of the call graph and to do so in; /// post-order.; ///; /// To address this, the CGSCC manager uses both worklists that can be exp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:2804,usab,usability,2804,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['usab'],['usability']
Usability,"is not Z_NULL, then extra_max; contains the maximum number of bytes to write to extra. Once done is true,; extra_len contains the actual extra field length, and extra contains the; extra field, or that field truncated if extra_max is less than extra_len.; If name is not Z_NULL, then up to name_max characters are written there,; terminated with a zero unless the length is greater than name_max. If; comment is not Z_NULL, then up to comm_max characters are written there,; terminated with a zero unless the length is greater than comm_max. When any; of extra, name, or comment are not Z_NULL and the respective field is not; present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used wi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1870,simpl,simply,1870,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['simpl'],['simply']
Usability,"is not Z_NULL, then extra_max; contains the maximum number of bytes to write to extra. Once done is true,; extra_len contains the actual extra field length, and extra contains the; extra field, or that field truncated if extra_max is less than extra_len.; If name is not Z_NULL, then up to name_max characters are written there,; terminated with a zero unless the length is greater than name_max. If; comment is not Z_NULL, then up to comm_max characters are written there,; terminated with a zero unless the length is greater than comm_max. When; any of extra, name, or comment are not Z_NULL and the respective field is; not present in the header, then that field is set to Z_NULL to signal its; absence. This allows the use of deflateSetHeader() with the returned; structure to duplicate the header. However if those fields are set to; allocated memory, then the application will need to save those pointers; elsewhere so that they can be eventually freed. If inflateGetHeader is not used, then the header information is simply; discarded. The header is always checked for validity, including the header; CRC if present. inflateReset() will reset the process to discard the header; information. The application would need to call inflateGetHeader() again to; retrieve the header from the next gzip stream. inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source; stream state was inconsistent.; */; /*; ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,; unsigned char FAR *window));. Initialize the internal stream state for decompression using inflateBack(); calls. The fields zalloc, zfree and opaque in strm must be initialized; before the call. If zalloc and zfree are Z_NULL, then the default library-; derived memory allocation routines are used. windowBits is the base two; logarithm of the window size, in the range 8..15. window is a caller; supplied buffer of that size. Except for special applications where it is; assured that deflate was used wi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h:1859,simpl,simply,1859,graf2d/asimage/src/libAfterImage/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/zlib/zlib.h,1,['simpl'],['simply']
Usability,"is not incorporated in \f$y\f$ is used as the control variable; \f$x\f$ . The six distributions of the three variables are assumed to be the ones; depicted in Fig. 1. \image html splot_pdfmesNIM.png Figure 1 width=800. Distributions of the three discriminating variables available to perform the Likelihood fit:; \f${m_{\rm ES}}\f$ , \f$\Delta E\f$ , \f${\cal F}\f$ .; Among the three variables, two are used to perform the fit while one is; kept out of the fit to serve the purpose of a control variable. The; three distributions on the top (resp. bottom) of the figure correspond; to the signal (resp. background). The unit of the vertical axis is; chosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the; distributions shown in Fig.; 1,; one obtains the three distributions of Fig. 2.; Whereas the distribution of \f$\Delta E\f$ clearly indicates the presence of the signal,; the distribution of \f${m_{\rm ES}}\f$ and \f${\cal F}\f$ are less obviously populated by signal. \image html splot_genfiTOTNIM.png Figure 2 width=800. Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig.; 1.; The data sample consists of 500 signal events and 5000 background events. Choosing \f$\Delta E\f$ and \f${\cal F}\f$ as discriminating variables to determine; \f$N_1\f$ and \f$N_2\f$ through a maximum Likelihood fit, one builds, for the control; variable \f${m_{\rm ES}}\f$ which is unknown to the fit, the two \f$\hbox {$_s$}{\cal P}lots\f$; for signal and background shown in; Fig. 3.; One observes that the \f$\hbox{$_s$}{\cal P}lot\f$; for signal reproduces correctly the PDF even where the latter vanishes,; although the error bars remain sizeable. This results from the almost; complete cancellation between p",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/splot/src/TSPlot.cxx:7865,clear,clearly,7865,math/splot/src/TSPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/splot/src/TSPlot.cxx,1,['clear'],['clearly']
Usability,"istical model, which will visualize that part of the model in the browser window. A number of options are available; for the `Draw` command, including (some options can be combined):. - ""e"" : calculate and visualize propagated model uncertainty; - ""auxratio"" : Draw a ratio auxiliary plot below the main plot; - ""auxsignif"" : Draw a significance auxiliary plot below the main plot; - ""pull"" : show panel of current parameter values, which can be dragged in order to change the values and visualize the; effect on the model (very experimental feature). Once a node has been drawn, the styling of subsequent draws can be controlled through `TStyle` objects; that will now appear in the `objects` folder in the workspace. A model can be fit to a dataset from the workspace using the `fitTo` context menu command and specifying; the name of a dataset in the workspace (if no name is given, an expected dataset corresponding to the; current state of the model will be used). A dialog will display the fit result status code when the; fit completes and then a `fits` folder will be found under the workspace (the workspace may need to; be collapsed and re-expanded to make it appear) where the fit result can be found, selected, and visualized.; In multi-channel models the channels that are included in the fit can be controlled with the checkboxes; in the browser. Clicking the checkbox will cycle through three states: checked, unchecked with; grey-underline, and checked with grey-underline. The grey-underline indicates that channel wont be; included in the fit (and will appear greyed out when the model is visualized). Many more features are available in the xRooBrowser, and further documentation and development can be found at; the <a href=""https://gitlab.cern.ch/will/xroofit"">xRooFit</a> repository, which is the library where the browser has; been originally developed. The author (Will Buttinger) is also very happy to be contacted with questions or; feedback about this new functionality. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx:3227,feedback,feedback,3227,roofit/xroofit/src/xRooBrowser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooBrowser.cxx,1,['feedback'],['feedback']
Usability,"istogram is drawn, the current pad is cleared before; drawing. In order to keep the previous drawing and draw on top of it the; option `SAME` should be use. The histogram drawn with the option; `SAME` uses the coordinates system available in the current pad. This option can be used alone or combined with any valid drawing option but; some combinations must be use with care. \anchor HP060a; #### Limitations. - It does not work when combined with the `LEGO` and `SURF` options unless the; histogram plotted with the option `SAME` has exactly the same; ranges on the X, Y and Z axis as the currently drawn histogram. To superimpose; lego plots [histograms' stacks](\ref HP26) should be used. \anchor HP061; ### Colors automatically picked in palette. \since **ROOT version 6.09/01**. When several histograms are painted in the same canvas thanks to the option ""SAME""; or via a `THStack` it might be useful to have an easy and automatic way to choose; their color. The simplest way is to pick colors in the current active color; palette. Palette coloring for histogram is activated thanks to the options `PFC`; (Palette Fill Color), `PLC` (Palette Line Color) and `PMC` (Palette Marker Color).; When one of these options is given to `TH1::Draw` the histogram get its color; from the current color palette defined by `gStyle->SetPalette(...)`. The color; is determined according to the number of objects having palette coloring in; the current pad. Begin_Macro(source); ../../../tutorials/hist/histpalettecolor.C; End_Macro. Begin_Macro(source); ../../../tutorials/hist/thstackpalettecolor.C; End_Macro. Begin_Macro(source); ../../../tutorials/hist/thstack2palettecolor.C; End_Macro. \anchor HP06; ### Superimposing two histograms with different scales in the same pad. The following example creates two histograms, the second histogram is the bins; integral of the first one. It shows a procedure to draw the two histograms in; the same pad and it draws the scale of the second histogram using a new v",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:18748,simpl,simplest,18748,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['simpl'],['simplest']
Usability,"it can perform no allocations at all). This buffer; * is called the workspace.; *; * Several optimizations complicate that process of allocating memory ranges; * from this workspace for each internal datastructure:; *; * - These different internal datastructures have different setup requirements:; *; * - The static objects need to be cleared once and can then be trivially; * reused for each compression.; *; * - Various buffers don't need to be initialized at all--they are always; * written into before they're read.; *; * - The matchstate tables have a unique requirement that they don't need; * their memory to be totally cleared, but they do need the memory to have; * some bound, i.e., a guarantee that all values in the memory they've been; * allocated is less than some maximum value (which is the starting value; * for the indices that they will then use for compression). When this; * guarantee is provided to them, they can use the memory without any setup; * work. When it can't, they have to clear the area.; *; * - These buffers also have different alignment requirements.; *; * - We would like to reuse the objects in the workspace for multiple; * compressions without having to perform any expensive reallocation or; * reinitialization work.; *; * - We would like to be able to efficiently reuse the workspace across; * multiple compressions **even when the compression parameters change** and; * we need to resize some of the objects (where possible).; *; * To attempt to manage this buffer, given these constraints, the ZSTD_cwksp; * abstraction was created. It works as follows:; *; * Workspace Layout:; *; * [ ... workspace ... ]; * [objects][tables ... ->] free space [<- ... aligned][<- ... buffers]; *; * The various objects that live in the workspace are divided into the; * following categories, and are allocated separately:; *; * - Static objects: this is optionally the enclosing ZSTD_CCtx or ZSTD_CDict,; * so that literally everything fits in a single buffer. Note: if",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h:1198,clear,clear,1198,builtins/zstd/compress/zstd_cwksp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/compress/zstd_cwksp.h,1,['clear'],['clear']
Usability,"ite-scale - (red-x - blue-x)*red-scale; * -----------------------------------------------------------; * green-x - blue-x; *; * red-scale =; * 1 - blue-y*white-scale - (green-y - blue-y) * green-scale; * ---------------------------------------------------------; * red-y - blue-y; *; * Hence:; *; * red-scale =; * ( (green-x - blue-x) * (white-y - blue-y) -; * (green-y - blue-y) * (white-x - blue-x) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * green-scale =; * ( (red-y - blue-y) * (white-x - blue-x) -; * (red-x - blue-x) * (white-y - blue-y) ) / white-y; * -------------------------------------------------------------------------; * (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x); *; * Accuracy:; * The input values have 5 decimal digits of accuracy. The values are all in; * the range 0 < value < 1, so simple products are in the same range but may; * need up to 10 decimal digits to preserve the original precision and avoid; * underflow. Because we are using a 32-bit signed representation we cannot; * match this; the best is a little over 9 decimal digits, less than 10.; *; * The approach used here is to preserve the maximum precision within the; * signed representation. Because the red-scale calculation above uses the; * difference between two products of values that must be in the range -1..+1; * it is sufficient to divide the product by 7; ceil(100,000/32767*2). The; * factor is irrelevant in the calculation because it is applied to both; * numerator and denominator.; *; * Note that the values of the differences of the products of the; * chromaticities in the above equations tend to be small, for example for; * the sRGB chromaticities they are:; *; * red numerator: -0.04751; * green numerator: -0.08788; * denominator: -0.2241 (without white-y multiplication); *; * The resultant Y coefficients from the chromaticities of so",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c:6018,simpl,simple,6018,graf2d/asimage/src/libAfterImage/libpng/png.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.c,1,['simpl'],['simple']
Usability,"its ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:2078,simpl,simple,2078,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,1,['simpl'],['simple']
Usability,"itset builder cannot; // re-arrange functions in a particular order and base its calculations on the; // layout of the functions' entry points, as we have no idea how large a; // particular function will end up being (the size could even depend on what; // this pass does!) Instead, we build a jump table, which is a block of code; // consisting of one branch instruction for each of the functions in the bit; // set that branches to the target function, and redirect any taken function; // addresses to the corresponding jump table entry. In the object file's; // symbol table, the symbols for the target functions also refer to the jump; // table entries, so that addresses taken outside the module will pass any; // verification done inside the module.; //; // In more concrete terms, suppose we have three functions f, g, h which are; // of the same type, and a function foo that returns their addresses:; //; // f:; // mov 0, %eax; // ret; //; // g:; // mov 1, %eax; // ret; //; // h:; // mov 2, %eax; // ret; //; // foo:; // mov f, %eax; // mov g, %edx; // mov h, %ecx; // ret; //; // We output the jump table as module-level inline asm string. The end result; // will (conceptually) look like this:; //; // f = .cfi.jumptable; // g = .cfi.jumptable + 4; // h = .cfi.jumptable + 8; // .cfi.jumptable:; // jmp f.cfi ; 5 bytes; // int3 ; 1 byte; // int3 ; 1 byte; // int3 ; 1 byte; // jmp g.cfi ; 5 bytes; // int3 ; 1 byte; // int3 ; 1 byte; // int3 ; 1 byte; // jmp h.cfi ; 5 bytes; // int3 ; 1 byte; // int3 ; 1 byte; // int3 ; 1 byte; //; // f.cfi:; // mov 0, %eax; // ret; //; // g.cfi:; // mov 1, %eax; // ret; //; // h.cfi:; // mov 2, %eax; // ret; //; // foo:; // mov f, %eax; // mov g, %edx; // mov h, %ecx; // ret; //; // Because the addresses of f, g, h are evenly spaced at a power of 2, in the; // normal case the check can be carried out using the same kind of simple; // arithmetic that we normally use for globals.; // FIXME: find a better way to represent the jumptable in the IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:1929,simpl,simple,1929,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['simpl'],['simple']
Usability,"ject: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooSimWSTool; /// The RooSimWSTool is a tool operating on RooWorkspace objects that; /// can clone PDFs into a series of variations that are joined together; /// into a RooSimultaneous PDF.; ///; /// ## Splitting a single PDF; /// The simplest use case is to take a workspace PDF as prototype and; /// ""split"" a parameter of that PDF into two specialized parameters; /// depending on a category in the dataset.; ///; /// For example, given a Gaussian; /// PDF \f$ G(x \,|\, m,s) \f$ we want to construct a \f$ G_a(x \,|\, m_a,s) \f$ and a \f$ G_b(x \,|\, m_b,s) \f$; /// with different mean parameters to be fit to a dataset with observables; /// \f$ (x,c) \f$ where \f$ c \f$ is a category with states 'a' and 'b'.; ///; /// Using RooSimWSTool, one can create a simultaneous PDF from \f$ G_a \f$ and \f$ G_b \f$; /// from \f$ G \f$ with the following commands:; /// ```; /// RooSimWSTool wst(wspace);; /// wst.build(""G_sim"", ""G"", SplitParam(""m"",""c""));; /// ```; ///; /// #### Splitting using a product category; /// From this simple example one can go to builds of arbitrary complexity; /// by specifying multiple SplitParam arguments on multiple parameters; /// involving multiple splitting categories. Splits can also be performed; /// in the product of multiple categories, *i.e.*,; /// ```; /// ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx:1021,simpl,simplest,1021,roofit/roofitcore/src/RooSimWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimWSTool.cxx,1,['simpl'],['simplest']
Usability,"l letters) of the elements for bin j.; \f[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \f]; The bin content is always the mean of the Y values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]; In the special case where s(j) is zero (eg, case of 1 entry only in one bin); the bin error e(j) is computed from the average of the s(j) for all bins if; the static function TProfile::Approximate() has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for more on error options. ### Creating and drawing a profile histogram; ~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof->Fill(px,pz,1);; }; hprof->Draw();; }; ~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:2100,simpl,simple,2100,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,1,['simpl'],['simple']
Usability,"licated than it is on; * SSE2, AVX2, and VSX.; *; * While PMULUDQ and VMULEUW both perform a mask, VMLAL.U32 performs an upcast.; *; * To do the same operation, the 128-bit 'Q' register needs to be split into; * two 64-bit 'D' registers, performing this operation::; *; * [ a | b ]; * | '---------. .--------' |; * | x |; * | .---------' '--------. |; * [ a & 0xFFFFFFFF | b & 0xFFFFFFFF ],[ a >> 32 | b >> 32 ]; *; * Due to significant changes in aarch64, the fastest method for aarch64 is; * completely different than the fastest method for ARMv7-A.; *; * ARMv7-A treats D registers as unions overlaying Q registers, so modifying; * D11 will modify the high half of Q5. This is similar to how modifying AH; * will only affect bits 8-15 of AX on x86.; *; * VZIP takes two registers, and puts even lanes in one register and odd lanes; * in the other.; *; * On ARMv7-A, this strangely modifies both parameters in place instead of; * taking the usual 3-operand form.; *; * Therefore, if we want to do this, we can simply use a D-form VZIP.32 on the; * lower and upper halves of the Q register to end up with the high and low; * halves where we want - all in one instruction.; *; * vzip.32 d10, d11 @ d10 = { d10[0], d11[0] }; d11 = { d10[1], d11[1] }; *; * Unfortunately we need inline assembly for this: Instructions modifying two; * registers at once is not possible in GCC or Clang's IR, and they have to; * create a copy.; *; * aarch64 requires a different approach.; *; * In order to make it easier to write a decent compiler for aarch64, many; * quirks were removed, such as conditional execution.; *; * NEON was also affected by this.; *; * aarch64 cannot access the high bits of a Q-form register, and writes to a; * D-form register zero the high bits, similar to how writes to W-form scalar; * registers (or DWORD registers on x86_64) work.; *; * The formerly free vget_high intrinsics now require a vext (with a few; * exceptions); *; * Additionally, VZIP was replaced by ZIP1 and ZIP2, which ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1066,simpl,simply,1066,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['simpl'],['simply']
Usability,"lity of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() met",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3328,Clear,Clear,3328,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['Clear'],['Clear']
Usability,"llColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; history->Add(com);; ~~~; TQUndoManager::Add automatically invok",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2282,Undo,Undo,2282,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"lling certain cost; /// metrics.; ///; /// The number is split into a signed scale and unsigned digits. The number; /// represented is \c getDigits()*2^getScale(). In this way, the digits are; /// much like the mantissa in the x87 long double, but there is no canonical; /// form so the same number can be represented by many bit representations.; ///; /// ScaledNumber is templated on the underlying integer type for digits, which; /// is expected to be unsigned.; ///; /// Unlike APFloat, ScaledNumber does not model architecture floating point; /// behaviour -- while this might make it a little faster and easier to reason; /// about, it certainly makes it more dangerous for general numerics.; ///; /// ScaledNumber is totally ordered. However, there is no canonical form, so; /// there are multiple representations of most scalars. E.g.:; ///; /// ScaledNumber(8u, 0) == ScaledNumber(4u, 1); /// ScaledNumber(4u, 1) == ScaledNumber(2u, 2); /// ScaledNumber(2u, 2) == ScaledNumber(1u, 3); ///; /// ScaledNumber implements most arithmetic operations. Precision is kept; /// where possible. Uses simple saturation arithmetic, so that operations; /// saturate to 0.0 or getLargest() rather than under or overflowing. It has; /// some extra arithmetic for unit inversion. 0.0/0.0 is defined to be 0.0.; /// Any other division by 0.0 is defined to be getLargest().; ///; /// As a convenience for modifying the exponent, left and right shifting are; /// both implemented, and both interpret negative shifts as positive shifts in; /// the opposite direction.; ///; /// Scales are limited to the range accepted by x87 long double. This makes; /// it trivial to add functionality to convert to APFloat (this is already; /// relied on for the implementation of printing).; ///; /// Possible (and conflicting) future directions:; ///; /// 1. Turn this into a wrapper around \a APFloat.; /// 2. Share the algorithm implementations with \a APFloat.; /// 3. Allow \a ScaledNumber to represent a signed number.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h:1524,simpl,simple,1524,interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ScaledNumber.h,1,['simpl'],['simple']
Usability,"memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. ### NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. - Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; - TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; - If the objects are added using the placement new then the Cl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx:3573,Clear,Clear,3573,core/cont/src/TClonesArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TClonesArray.cxx,1,['Clear'],['Clear']
Usability,"mentaltypes); - [Add a column of a STL Collection instances](\ref addingacolumnofstl); - [Add a column holding an object](\ref addingacolumnofobjs); - [Add a column holding a TObjectArray](\ref addingacolumnofobjs); - [Fill the tree](\ref fillthetree); - [Add a column to an already existing Tree](\ref addcoltoexistingtree); - [An Example](\ref fullexample). \anchor creatingattree; ## Construct a TTree. ~~~ {.cpp}; TTree tree(name, title); ~~~; Creates a Tree with name and title. Various kinds of branches can be added to a tree:; - Variables representing fundamental types, simple classes/structures or list of variables: for example for C or Fortran; structures.; - Any C++ object or collection, provided by the STL or ROOT. In the following, the details about the creation of different types of branches are given. \anchor addcolumnoffundamentaltypes; ## Add a column (""branch"") holding fundamental types and arrays thereof; This strategy works also for lists of variables, e.g. to describe simple structures.; It is strongly recommended to persistify those as objects rather than lists of leaves. ~~~ {.cpp}; auto branch = tree.Branch(branchname, address, leaflist, bufsize); ~~~; - address is the address of the first item of a structure; - leaflist is the concatenation of all the variable names and types; separated by a colon character :; The variable name and the variable type are separated by a; slash (/). The variable type must be 1 character. (Characters; after the first are legal and will be appended to the visible; name of the leaf, but have no effect.) If no type is given, the; type of the variable is assumed to be the same as the previous; variable. If the first variable does not have a type, it is; assumed of type F by default. The list of currently supported; types is given below:; - `C` : a character string terminated by the 0 character; - `B` : an 8 bit signed integer (`Char_t`); Treated as a character when in an array.; - `b` : an 8 bit unsigned integer (`UChar_t`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:3384,simpl,simple,3384,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simple']
Usability,"method. The fit is performed using the Normal Equations method with Cholesky; decomposition. #### Why should it be used?. The linear fitter is considerably faster than general non-linear; fitters and doesn't require to set the initial values of parameters. ### Using the fitter:. ### 1.Adding the data points:. #### 1.1 To store or not to store the input data?; - There are 2 options in the constructor - to store or not; store the input data. The advantages of storing the data; are that you'll be able to reset the fitting model without; adding all the points again, and that for very large sets; of points the chisquare is calculated more precisely.; The obvious disadvantage is the amount of memory used to; keep all the points.; - Before you start adding the points, you can change the; store/not store option by StoreData() method. #### 1.2 The data can be added:; - simply point by point - AddPoint() method; - an array of points at once:; If the data is already stored in some arrays, this data; can be assigned to the linear fitter without physically; coping bytes, thanks to the Use() method of; TVector and TMatrix classes - AssignData() method. ### 2.Setting the formula. #### 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signs ""++""; --for example ""1 ++ x"" - for fitting a straight line; -All standard functions, undrestood by TFormula, can be used; as additive parts; --TMath functions can be used too; -Functions, used as additive parts, shouldn't have any parameters,; even if those parameters are set.; --for example, if normalizing a sum of a gaus(0, 1) and a; gaus(0, 2), don't use the built-in ""gaus"" of TFormula,; because it has parameters, take TMath::Gaus(x, 0, 1) instead.; -Polynomials can be used like ""pol3"", ..""polN""; -If fitting a more than 3-dimensional formula, variables should; be numbered as follows:; -- x[0], x[1], x[2]... For example, to fit ""1 ++ x[0] ++ x[1] ++ x[2] ++ x[3]*x[3]"". #### 2.2 Setting the formula:. ##### 2.2.1 If fitting ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:1586,simpl,simply,1586,math/minuit/src/TLinearFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx,1,['simpl'],['simply']
Usability,"modes we introduce a set of examples. Default values:; ///; /// - `modeGroup = kModeGroupLightHeight `; /// - `displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter011.jpg; ///; /// Light modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter012.jpg; ///; /// Light modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter013.jpg; ///; /// Light modes group, display mode = surface, 64 x 64 channels.; /// \image html spectrumpainter014.jpg; ///; /// Light modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter015.jpg; ///; /// Height modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter016.jpg; ///; /// Height modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter017.jpg; ///; /// Height modes grou",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:3103,Simpl,Simple,3103,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random time between 0 and .9 seconds; * ::usleep(int(1e6 * ::drand48()));; * std::ostringstream buf;; * buf << ""child pid "" << ::getpid() << "" sends message "" << i;; * std::cout << ""[CHILD] : "" << buf.str() << std::endl;; * pipe << buf.str() << BidirMMapPipe::flush;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * }; * // tell parent we're done; * pipe << """" << BidirMMapPipe::flush;; * // wait ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:1427,simpl,simply,1427,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['simpl'],['simply']
Usability,"mplements a partitioning algorithm to speed up bins' filling; (see the ""Partitioning Algorithm"" section for details).; The partitioning algorithm divides the histogram into regions called cells.; The bins that each cell intersects are recorded in an array of `TList`s.; When a coordinate in the histogram is to be filled; the method (quickly) finds; which cell the coordinate belongs. It then only loops over the bins; intersecting that cell to find the bin the input coordinate corresponds to.; The partitioning of the histogram is updated continuously as each bin is added.; The default number of cells on each axis is 25. This number could be set to; another value in the constructor or adjusted later by calling the; `ChangePartition(Int_t, Int_t)` method. The partitioning algorithm is; considerably faster than the brute force algorithm (i.e. checking if each bin; contains the input coordinates), especially if the histogram is to be filled; many times. The following very simple macro shows how to build and fill a `TH2Poly`:; ~~~ {.cpp}; {; auto h2p = new TH2Poly();. Double_t x1[] = {0, 5, 6};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, 3};; Double_t x3[] = {4, 3, 0, 1, 2.4};; Double_t y3[] = {4, 3.7, 1, 3.7, 2.5};. h2p->AddBin(3, x1, y1);; h2p->AddBin(4, x2, y2);; h2p->AddBin(5, x3, y3);. h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; }; ~~~. More examples can be found in th2polyBoxes.C, th2polyEurope.C, th2polyHoneycomb.C; and th2polyUSA.C. ## Partitioning Algorithm; The partitioning algorithm forms an essential part of the `TH2Poly`; class. It is implemented to speed up the filling of bins. With the brute force approach, the filling is done in the following way: An; iterator loops over all bins in the `TH2Poly` and invokes the; method `IsInside()` for each of them.; This method checks if the input location is in that bin. If the filling; coordinate is inside, the bin is f",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:2478,simpl,simple,2478,hist/hist/src/TH2Poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx,1,['simpl'],['simple']
Usability,"n fact fitting with; ""1++x++y++z"" function.; --Fitting hyperplanes is much faster than fitting other; expressions so if performance is vital, calculate the; function values beforehand and give them to the fitter; as variables; --Example:; You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; sin(x) and cos(2*x) beforehand and store them in array *data.; Then:; TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; lf->AssignData(npoint, 2, data, y);. #### 2.3 Resetting the formula. ##### 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) m",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5034,clear,cleared,5034,math/minuit/src/TLinearFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx,1,['clear'],['cleared']
Usability,"n in that block. This is because the standard RPO; /// algorithm does not track what things have the same value number, it only; /// tracks what the value number of a given operation is (the mapping is; /// operation -> value number). Thus, when a value number of an operation; /// changes, it must reprocess everything to ensure all uses of a value number; /// get updated properly. In constrast, the sparse algorithm we use *also*; /// tracks what operations have a given value number (IE it also tracks the; /// reverse mapping from value number -> operations with that value number), so; /// that it only needs to reprocess the instructions that are affected when; /// something's value number changes. The vast majority of complexity and code; /// in this file is devoted to tracking what value numbers could change for what; /// instructions when various things happen. The rest of the algorithm is; /// devoted to performing symbolic evaluation, forward propagation, and; /// simplification of operations based on the value numbers deduced so far; ///; /// In order to make the GVN mostly-complete, we use a technique derived from; /// ""Detection of Redundant Expressions: A Complete and Polynomial-time; /// Algorithm in SSA"" by R.R. Pai. The source of incompleteness in most SSA; /// based GVN algorithms is related to their inability to detect equivalence; /// between phi of ops (IE phi(a+b, c+d)) and op of phis (phi(a,c) + phi(b, d)).; /// We resolve this issue by generating the equivalent ""phi of ops"" form for; /// each op of phis we see, in a way that only takes polynomial time to resolve.; ///; /// We also do not perform elimination by using any published algorithm. All; /// published algorithms are O(Instructions). Instead, we use a technique that; /// is O(number of operations with the same value number), enabling us to skip; /// trying to eliminate things that have unique value numbers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:2308,simpl,simplification,2308,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['simpl'],['simplification']
Usability,"n number is multiplexed in the 4 most significant; bits of the 'fTimeHiAndVersion' field. There are two defined; versions:; ~~~ {.cpp}; MSB <---; Version 4-Bit Code Description; ------------------------------------------------------------; | 1 0 0 0 1 DCE version, as specified herein.; | 2 0 0 1 0 DCE Security version, with; | embedded POSIX UIDs.; | 3 0 0 1 1 node id is a random value; ------------------------------------------------------------; ~~~. ## Clock Sequence. The clock sequence value must be changed whenever:. The UUID generator detects that the local value of UTC; has gone backward; this may be due to re-syncing of the system; clock. While a node is operational, the UUID service always saves; the last UTC used to create a UUID. Each time a new UUID; is created, the current UTC is compared to the saved value; and if either the current value is less or the saved value; was lost, then the clock sequence is incremented modulo; 16,384, thus avoiding production of duplicated UUIDs. The clock sequence must be initialized to a random number; to minimize the correlation across system. This provides; maximum protection against node identifiers that may move; or switch from system to system rapidly. ## Clock Adjustment. UUIDs may be created at a rate greater than the system clock; resolution. Therefore, the system must also maintain an; adjustment value to be added to the lower-order bits of the; time. Logically, each time the system clock ticks, the; adjustment value is cleared. Every time a UUID is generated,; the current adjustment value is read and incremented, and; then added to the UTC time field of the UUID. ## Clock Overrun. The 100-nanosecond granularity of time should prove sufficient; even for bursts of UUID production in the next generation of; high-performance multiprocessors. If a system overruns the; clock adjustment by requesting too many UUIDs within a single; system clock tick, the UUID generator will stall until the; system clock catches up.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:3905,clear,cleared,3905,core/base/src/TUUID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx,1,['clear'],['cleared']
Usability,"n.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic operations that can be directly selected; // from simple operators. More complicated operations currently require; // target-specific code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:1983,simpl,simple,1983,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,2,['simpl'],['simple']
Usability,"n; @ingroup NumAlgo. Classes implementing algorithms for multi-dimensional minimization; */; //_______________________________________________________________________________; /**; Abstract Minimizer class, defining the interface for the various minimizer; (like Minuit2, Minuit, GSL, etc..) in ROOT.; Plug-in's exist in ROOT to be able to instantiate the derived classes without linking the library; using the static function ROOT::Math::Factory::CreateMinimizer. Here is the list of all possible minimizers and their respective methods (algorithms) that can be instantiated:; The name shown below can be used to create them. More documentation can be found in the respective class. - Minuit (class TMinuitMinimizer); - Migrad (default); - MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of [Minuit tutorial on Function Minimization](https://seal.web.cern.ch/documents/minuit/mntutorial.pdf)); - Simplex; - Minimize (a combination of Simplex + Migrad); - Minimize; - Scan; - Seek. - Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); - Migrad (default); - Simplex; - Minimize; - Fumili (Fumili2); - Scan. - Fumili (class TFumiliMinimizer). - GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with `mathmore` support; - BFGS2 (Default); - BFGS; - ConjugateFR; - ConjugatePR; - SteepestDescent. - GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built `mathmore` support. - GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with `mathmore` support. - Genetic (class ROOT::Math::GeneticMinimizer). - RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with `r` support; - BFGS (default); - L-BFGS-S; - Nelder-Mead; - CG; - and more methods, see the Details in the documentation of the function `optimix` of the [optmix R package](https://cran.r-project.org/web/packages/optimx/optimx.pdf). The Minimizer class provides the interface to perform the m",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h:1016,Simpl,Simplex,1016,math/mathcore/inc/Math/Minimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Minimizer.h,2,['Simpl'],['Simplex']
Usability,"nc.; *; * Permission to use, copy, modify, and distribute this software and its; * documentation for any purpose and without fee is hereby granted, provided; * that the above copyright notice appear in all copies and that both that; * copyright notice and this permission notice appear in supporting; * documentation, and that the name of Network Computing Devices may not be; * used in advertising or publicity pertaining to distribution of the software; * without specific, written prior permission. Network Computing Devices makes; * no representations about the suitability of this software for any purpose.; * It is provided ``as is'' without express or implied warranty.; *; * NETWORK COMPUTING DEVICES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS; * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,; * IN NO EVENT SHALL NETWORK COMPUTING DEVICES BE LIABLE FOR ANY SPECIAL,; * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM; * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE; * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THIS SOFTWARE.; *; * Author: Jim Fulton; * Network Computing Devices, Inc.; *; * Simple if statement processor; *; * This module can be used to evaluate string representations of C language; * if constructs. It accepts the following grammar:; *; * EXPRESSION := VALUE; * | VALUE BINOP EXPRESSION; * | VALUE '?' EXPRESSION ':' EXPRESSION; *; * VALUE := '(' EXPRESSION ')'; * | '!' VALUE; * | '-' VALUE; * | '~' VALUE; * | 'defined' '(' variable ')'; * | variable; * | number; *; * BINOP := '*' | '/' | '%'; * | '+' | '-'; * | '<<' | '>>'; * | '<' | '>' | '<=' | '>='; * | '==' | '!='; * | '&' | '^' | '|'; * | '&&' | '||'; *; * The normal C order of precedence is supported.; *; *; * External Entry Points:; *; * ParseIfExpression parse a string for #if; */; /* $XFree86: xc/config/makedepend/ifparser.h,v 3.2 1996/12/30 13:57:56 dawes Exp $ */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/ifparser.h:1352,Simpl,Simple,1352,misc/rmkdepend/ifparser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/ifparser.h,1,['Simpl'],['Simple']
Usability,"nd background sources; // Version 17.1, bug fix with background uncertainty; // Version 17.0, possibility to specify an error matrix with SetInput; // Version 16.1, parallel to changes in TUnfold; // Version 16.0, parallel to changes in TUnfold; // Version 15, fix bugs with uncorr. uncertainties, add backgnd subtraction; // Version 14, remove some print-out, do not add unused sys.errors; // Version 13, support for systematic errors; /** \class TUnfoldSys; \ingroup Unfold; An algorithm to unfold distributions from detector to truth level,; with background subtraction and propagation of systematic uncertainties. TUnfoldSys is used to decompose a measurement y into several sources x,; given the measurement uncertainties, background b and a matrix of migrations A.; The method can be applied to a large number of problems,; where the measured distribution y is a linear superposition; of several Monte Carlo shapes. Beyond such a simple template fit,; TUnfoldSys has an adjustable regularisation term and also supports an; optional constraint on the total number of events.; Background sources can be specified, with a normalisation constant and; normalisation uncertainty. In addition, variants of the response; matrix may be specified, these are taken to determine systematic; uncertainties. <b>For most applications, it is better to use the derived class; TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds; features to TUnfoldSys, related to possible complex multidimensional; arrangements of bins. For innocent; users, the most notable improvement of TUnfoldDensity over TUnfoldSys are; the getter functions. For TUnfoldSys, histograms have to be booked by the; user and the getter functions fill the histogram bins. TUnfoldDensity; simply returns a new, already filled histogram.</b>. If you use this software, please consider the following citation. <b>S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]</b>. Detailed documentation and updates are available on; http://www.desy.de",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:1414,simpl,simple,1414,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['simpl'],['simple']
Usability,"nd display mode of the; /// histogram drawing. To illustrate the possible effects of the various display; /// modes we introduce a set of examples. Default values:; ///; /// - `modeGroup = kModeGroupLightHeight `; /// - `displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter011.jpg; ///; /// Light modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter012.jpg; ///; /// Light modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter013.jpg; ///; /// Light modes group, display mode = surface, 64 x 64 channels.; /// \image html spectrumpainter014.jpg; ///; /// Light modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter015.jpg; ///; /// Height modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter016.jpg; ///; /// Height modes group",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:2993,Simpl,Simple,2993,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"ng the placement of a volume; with respect to its container reference frame. This frame will be called; 'master' and the frame of the positioned volume - 'local'. If T is a; transformation used for positioning volume daughters, then:. ~~~ {.cpp}; MASTER = T * LOCAL; ~~~. Therefore a local-to-master conversion will be performed by using T, while; a master-to-local by using its inverse. The second use case is the computation; of the global transformation of a given object in the geometry. Since the; geometry is built as 'volumes-inside-volumes', this global transformation; represent the pile-up of all local transformations in the corresponding; branch. The conversion from the global reference frame and the given object; is also called master-to-local, but it is handled by the manager class.; A general homogenous transformation is defined as a 4x4 matrix embedding; a rotation, a translation and a scale. The advantage of this description; is that each basic transformation can be represented as a homogenous matrix,; composition being performed as simple matrix multiplication. Rotation: Inverse rotation:. ~~~ {.cpp}; r11 r12 r13 0 r11 r21 r31 0; r21 r22 r23 0 r12 r22 r32 0; r31 r32 r33 0 r13 r23 r33 0; 0 0 0 1 0 0 0 1; ~~~. Translation: Inverse translation:. ~~~ {.cpp}; 1 0 0 tx 1 0 0 -tx; 0 1 0 ty 0 1 0 -ty; 0 0 1 tz 0 0 1 -tz; 0 0 0 1 0 0 0 1; ~~~. Scale: Inverse scale:. ~~~ {.cpp}; sx 0 0 0 1/sx 0 0 0; 0 sy 0 0 0 1/sy 0 0; 0 0 sz 0 0 0 1/sz 0; 0 0 0 1 0 0 0 1; ~~~. where:; - `rij` are the 3x3 rotation matrix components,; - `tx`, `ty`, `tz` are the translation components; - `sx`, `sy`, `sz` are arbitrary scale constants on each axis,. The disadvantage in using this approach is that computation for 4x4 matrices; is expensive. Even combining two translation would become a multiplication; of their corresponding matrices, which is quite an undesired effect. On the; other hand, it is not a good idea to store a translation as a block of 16; numbers. We have therefore chosen t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx:1900,simpl,simple,1900,geom/geom/src/TGeoMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoMatrix.cxx,1,['simpl'],['simple']
Usability,"ng them for multithreaded; /// parallelism and extends them supporting:; /// * Parallel `Foreach` operations.; /// * Custom task granularity and partial reduction, by specifying reduction function; /// and the number of chunks as extra parameters for the Map call. This is specially useful; /// to reduce the size of intermediate results when dealing with a sizeable number of elements; /// in the input data.; ///; /// The two possible usages of the Map method are:\n; /// * Map(F func, unsigned nTimes): func is executed nTimes with no arguments; /// * Map(F func, T& args): func is executed on each element of the collection of arguments args; ///; /// For either signature, func is executed as many times as needed by a pool of; /// nThreads threads, where nThreads typically defaults to the number of cores.\n; /// A collection containing the result of each execution is returned.\n; /// **Note:** the user is responsible for the deletion of any object that might; /// be created upon execution of func, returned objects included: ROOT::TThreadExecutor never; /// deletes what it returns, it simply forgets it.\n; ///; /// \param func; /// \parblock; /// a callable object, such as a lambda expression, an std::function, a; /// functor object or a function that takes zero arguments (for the first signature); /// or one (for the second signature).; /// \endparblock; /// \param args; /// \parblock; /// a standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature.; /// An integer only for the first.; /// \endparblock; /// **Note:** in cases where the function to be executed takes more than; /// zero/one argument but all are fixed except zero/one, the function can be wrapped; /// in a lambda or via std::bind to give it the right signature.\n; ///; /// #### Return value:; /// An std::vector. The elements in the container; /// will be the objects returned by func.; ///; ///; /// #### Examples:; ///; /// ~~~{.cpp}; /// root[] ROOT::TThreadExecutor pool;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx:1520,simpl,simply,1520,core/imt/src/TThreadExecutor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/src/TThreadExecutor.cxx,1,['simpl'],['simply']
Usability,"nnel contents; /// - `kModeGroupLightHeight` - combination of two previous shading; /// algorithms. One can control the weight; /// between both algorithms.; ///; /// #### Display modes:; ///; /// - `kDisplayModePoints, `; /// - `kDisplayModeGrid, `; /// - `kDisplayModeContours,`; /// - `kDisplayModeBars,`; /// - `kDisplayModeLinesX,`; /// - `kDisplayModeLinesY,`; /// - `kDisplayModeBarsX,`; /// - `kDisplayModeBarsY,`; /// - `kDisplayModeNeedles,`; /// - `kDisplayModeSurface,`; /// - `kDisplayModeTriangles.`; ///; /// one can combine the above given modes groups and display modes. The meaningful; /// combinations (denoted by x) are given in the next table.; ///; /// | | Simple | Light | Height | Light-Height |; /// |-----------|--------|-------|--------|--------------|; /// | Points | X | X | X | X |; /// | Grid | X | X | X | X |; /// | Contours | X | - | X | - |; /// | Bars | X | - | X | - |; /// | LinesX | X | X | X | X |; /// | LinesY | X | X | X | X |; /// | BarsX | X | - | X | - |; /// | BarsY | X | - | X | - |; /// | Needles | X | - | - | - |; /// | Surface | - | X | X | X |; /// | Triangles | X | X | X | X |; ///; /// #### Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); ///; /// This function controls the display mode group and display mode of the; /// histogram drawing. To illustrate the possible effects of the various display; /// modes we introduce a set of examples. Default values:; ///; /// - `modeGroup = kModeGroupLightHeight `; /// - `displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:1403,Simpl,Simple,1403,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"nput data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 : H1 dataset: selector by object ................... OK * * //; // * Test 29 : Chain with TTree in subdirs ...................... OK * * //; // * * All registered tests have been passed :-) * * //; // * ****************************************************************** * //; // * * //; // * The application redirects the processing logs to a log file which is * //; // * normally deleted at the end of a successful run; if the test fails * //; // * the caller is asked if she/he wants to keep the log file; if the * //; // * specifies a log file path of her/his choice, the log file is never * //; // * deleted. * //; // * * //; // * SKIPPED means that the test cannot be run. * //; // * * //; // * New tests can be easily added by providing a function performing the * //; // * test and a name for the test; see examples below. * //; // * * //; // * It is also possible to trigger the automatic PROOF valgrind setup by * //;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3704,Simpl,Simple,3704,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Simpl'],['Simple']
Usability,"nst char *path, const char *mode));. Opens a gzip (.gz) file for reading or writing. The mode parameter is as; in fopen (""rb"" or ""wb"") but can also include a compression level (""wb9"") or; a strategy: 'f' for filtered data as in ""wb6f"", 'h' for Huffman-only; compression as in ""wb1h"", 'R' for run-length encoding as in ""wb1R"", or 'F'; for fixed code compression as in ""wb9F"". (See the description of; deflateInit2 for more information about the strategy parameter.) 'T' will; request transparent writing or appending with no compression and not using; the gzip format. ""a"" can be used instead of ""w"" to request that the gzip stream that will; be written be appended to the file. ""+"" will result in an error, since; reading and writing to the same gzip file is not supported. The addition of; ""x"" when writing will create the file exclusively, which fails if the file; already exists. On systems that support it, the addition of ""e"" when; reading or writing will set the flag to close the file on an execve() call. These functions, as well as gzip, will read and decode a sequence of gzip; streams in a file. The append function of gzopen() can be used to create; such a file. (Also see gzflush() for another way to do this.) When; appending, gzopen does not test whether the file begins with a gzip stream,; nor does it look for the end of the gzip streams to begin appending. gzopen; will simply append a gzip stream to the existing file. gzopen can be used to read a file which is not in gzip format; in this; case gzread will directly read from the file without decompression. When; reading, this will be detected automatically by looking for the magic two-; byte gzip header. gzopen returns NULL if the file could not be opened, if there was; insufficient memory to allocate the gzFile state, or if an invalid mode was; specified (an 'r', 'w', or 'a' was not provided, or '+' was provided).; errno can be checked to determine if the reason gzopen failed was that the; file could not be opened.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h:1469,simpl,simply,1469,builtins/zlib/zlib.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zlib/zlib.h,1,['simpl'],['simply']
Usability,"nt 1D, 2D and 3D histograms. When the `Draw()` method of a histogram is called for the first time; (`TH1::Draw`), it creates a `THistPainter` object and saves a; pointer to this ""painter"" as a data member of the histogram. The; `THistPainter` class specializes in the drawing of histograms. It is; separated from the histogram so that one can have histograms without the; graphics overhead, for example in a batch program. Each histogram having its own; painter (rather than a central singleton painter painting all histograms), allows; two histograms to be drawn in two threads without overwriting the painter's; values. When a displayed histogram is filled again, there is no need to call the; `Draw()` method again; the image will be refreshed the next time the; pad will be updated. A pad is updated after one of these three actions:. 1. a carriage control on the ROOT command line,; 2. a click inside the pad,; 3. a call to `TPad::Update`. By default a call to `TH1::Draw()` clears the pad of all objects; before drawing the new image of the histogram. One can use the `SAME`; option to leave the previous display intact and superimpose the new histogram.; The same histogram can be drawn with different graphics options in different; pads. When a displayed histogram is deleted, its image is automatically removed; from the pad. To create a copy of the histogram when drawing it, one can use; `TH1::DrawClone()`. This will clone the histogram and allow to change; and delete the original one without affecting the clone. \anchor HP01; ### Histograms' plotting options. Most options can be concatenated with or without spaces or commas, for example:. h->Draw(""E1 SAME"");. The options are not case sensitive:. h->Draw(""e1 same"");. The default drawing option can be set with `TH1::SetOption` and retrieve; using `TH1::GetOption`:. root [0] h->Draw(); // Draw ""h"" using the standard histogram representation.; root [1] h->Draw(""E""); // Draw ""h"" using error bars; root [3] h->SetOption(""E""); // Chang",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:4672,clear,clears,4672,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['clear'],['clears']
Usability,"nt has passed the selection (`true`) or not (`false`). It should perform ""read-only"" operations on the; columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; loop. See the paragraph about ""Just-in-time compilation"" below for more information. RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; each entry: after the first access it simply serves a cached result. \anchor named-filters-and-cutflow-reports; #### Named filters and cutflow reports; An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; work as usual, but also keep track of how many entries they accept and reject. Statistics are retrieved through a call to the Report() method:. - when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; named filters declared up to that point; - when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; relative all named filters in the section of the chain between the main RDataFrame and that node (included). Stats are stored in the same order as named filters have been added to the graph, and *refer to the latest event-loop*; that has been run using the relevant R",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:29716,simpl,simply,29716,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simply']
Usability,"ntributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TRecorder; \ingroup guirecorder. Class provides direct recorder/replayer interface for a user.; See 'ROOT EVENT RECORDING SYSTEM' for more information about usage. Implementation uses C++ design pattern State. Functionality of; recorder is divided into 4 classes according to the current; state of recorder. Internally, there is a pointer to TRecorderState object.; This object changes whenever state of recorder is changed.; States of recorder are the following:. - INACTIVE Implemented in TRecorderInactive class.; Default state after TRecorder object is created. - RECORDING Implemented in TRecorderRecording class. - REPLAYING Implemented in TRecorderReplaying class. - PAUSED Implemented in TRecorderPause class.; Pause of replaying. Every command for TRecorder is just passed; to TRecordeState object.; Depending on the current state of recorder, this command is passed; to some of the above mentioned classes and if valid, handled there. Switching between states is not possible from outside. States are; switched directly by state objects via:. ChangeState(TRecorderState* newstate, Bool_t deletePreviousState);. When recorder is switched to a new state, the old state object is; typically deleted. The only exception is switching from REPLAYING; state to PAUSED state. The previous state (REPLAYING) is not; deleted in order to be used again after TRecorder::Resume call. ### STATE TRANSITIONS:. - INACTIVE -> RECORDING via TRecorder::Start (Starts recording); - RECORDING -> INACTIVE via TRecorder::Stop (Stops recording). - INACTIVE -> REPLAYING via TRecorder::Replay (Starts replaying); - REPLAYING -> INACTIVE via TRecorder::ReplayStop (Stops replaying). - REPLAYING -> PAUSED via TRecorder::Pause (Pause replaying); - PAUSED -> REPLAYING via TRecorder::Resume (Resumes replaying). - PAUSED -> INACTIVE via TRecorder::ReplayStop (Stops paused replaying). */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:1697,PAUSE,PAUSED,1697,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,10,"['PAUSE', 'Pause', 'Resume', 'pause']","['PAUSED', 'Pause', 'Resume', 'Resumes', 'paused']"
Usability,"ntries; that pass the selection, and when you have a parametrization available for; the efficiency as a function of the variable(s) under consideration. A very common problem when estimating efficiencies is that of error estimation:; when no other information is available than the total number of events N and; the selected number n, the best estimate for the selection efficiency p is n/N.; Standard binomial statistics dictates that the uncertainty (this presupposes; sufficiently high statistics that an approximation by a normal distribution is; reasonable) on p, given N, is; \f[; \sqrt{\frac{p(1-p)}{N}}; \f]; However, when p is estimated as n/N, fluctuations from the true p to its; estimate become important, especially for low numbers of events, and giving; rise to biased results. When fitting a parametrized efficiency, these problems can largely be overcome,; as a hypothesized true efficiency is available by construction. Even so, simply; using the corresponding uncertainty still presupposes that Gaussian errors; yields a reasonable approximation. When using, instead of binned efficiency; histograms, the original numerator and denominator histograms, a binned maximum; likelihood can be constructed as the product of bin-by-bin binomial probabilities; to select n out of N events. Assuming that a correct parametrization of the; efficiency is provided, this construction in general yields less biased results; (and is much less sensitive to binning details). A generic use of this method is given below (note that the method works for 2D; and 3D histograms as well):. ~~~ {.cpp}; {; TH1* denominator; // denominator histogram; TH1* numerator; // corresponding numerator histogram; TF1* eff; // efficiency parametrization; .... // set step sizes and initial parameter; .... // values for the fit function; .... // possibly also set ranges, see TF1::SetRange(); TBinomialEfficiencyFitter* f = new TBinomialEfficiencyFitter(; numerator, denominator);; Int_t status = f->Fit(eff, ""I"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx:1634,simpl,simply,1634,hist/hist/src/TBinomialEfficiencyFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBinomialEfficiencyFitter.cxx,1,['simpl'],['simply']
Usability,"o have chunk-specific handling on read in code that must; * work on earlier versions you must use a user chunk callback to specify the; * desired handling (keep or discard.); *; * The 'keep' parameter is a PNG_HANDLE_CHUNK_ value as listed below. The; * parameter is interpreted as follows:; *; * READ:; * PNG_HANDLE_CHUNK_AS_DEFAULT:; * Known chunks: do normal libpng processing, do not keep the chunk (but; * see the comments below about PNG_HANDLE_AS_UNKNOWN_SUPPORTED); * Unknown chunks: for a specific chunk use the global default, when used; * as the default discard the chunk data.; * PNG_HANDLE_CHUNK_NEVER:; * Discard the chunk data.; * PNG_HANDLE_CHUNK_IF_SAFE:; * Keep the chunk data if the chunk is not critical else raise a chunk; * error.; * PNG_HANDLE_CHUNK_ALWAYS:; * Keep the chunk data.; *; * If the chunk data is saved it can be retrieved using png_get_unknown_chunks,; * below. Notice that specifying ""AS_DEFAULT"" as a global default is equivalent; * to specifying ""NEVER"", however when ""AS_DEFAULT"" is used for specific chunks; * it simply resets the behavior to the libpng default.; *; * INTERACTION WITH USER CHUNK CALLBACKS:; * The per-chunk handling is always used when there is a png_user_chunk_ptr; * callback and the callback returns 0; the chunk is then always stored *unless*; * it is critical and the per-chunk setting is other than ALWAYS. Notice that; * the global default is *not* used in this case. (In effect the per-chunk; * value is incremented to at least IF_SAFE.); *; * IMPORTANT NOTE: this behavior will change in libpng 1.7 - the global and; * per-chunk defaults will be honored. If you want to preserve the current; * behavior when your callback returns 0 you must set PNG_HANDLE_CHUNK_IF_SAFE; * as the default - if you don't do this libpng 1.6 will issue a warning.; *; * If you want unhandled unknown chunks to be discarded in libpng 1.6 and; * earlier simply return '1' (handled).; *; * PNG_HANDLE_AS_UNKNOWN_SUPPORTED:; * If this is *not* set known ch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:1345,simpl,simply,1345,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['simpl'],['simply']
Usability,"o row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we diddle the pointer lists to duplicate; * the first or last sample row as necessary (this is cheaper than copying; * sample rows around).; *; * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1. In that; * situation each iMCU row provides only one row group so the buffering logic; * must be different (eg, we must read two iMCU rows before we can emit the; * first row group). For now, we simply do not support providing context; * rows when min_DCT_scaled_size is 1. That combination seems unlikely to; * be worth providing --- if someone wants a 1/8th-size preview, they probably; * want it quick and dirty, so a context-free upsampler is sufficient.; */; /* Private buffer controller object */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:4760,simpl,simply,4760,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,1,['simpl'],['simply']
Usability,"o see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. ~~~ {.cpp}; {; // run macro from tutorials directory of ROOT!; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x graphics/framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hist/hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x graphics/canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x graphics/formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x hist/fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit/fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; ~~~; \image html gpad_controlbar.png; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx:1824,Simpl,Simple,1824,graf2d/gpad/src/TControlBar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TControlBar.cxx,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"o the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1812,simpl,simplex,1812,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,3,['simpl'],['simplex']
Usability,"o-change, thus a; // fixpoint, is reached, the Attributor will query the abstract attributes; // in-flight to re-evaluate their state. If the (current) state is too; // optimistic, hence it cannot be justified anymore through other abstract; // attributes or the state of the IR, the state of the abstract attribute will; // have to change. Generally, we assume abstract attribute state to be a finite; // height lattice and the update function to be monotone. However, these; // conditions are not enforced because the iteration limit will guarantee; // termination. If an optimistic fixpoint is reached, or a pessimistic fix; // point is enforced after a timeout, the abstract attributes are tasked to; // manifest their result in the IR for passes to come.; //; // Attribute manifestation is not mandatory. If desired, there is support to; // generate a single or multiple LLVM-IR attributes already in the helper struct; // IRAttribute. In the simplest case, a subclass inherits from IRAttribute with; // a proper Attribute::AttrKind as template parameter. The Attributor; // manifestation framework will then create and place a new attribute if it is; // allowed to do so (based on the abstract state). Other use cases can be; // achieved by overloading AbstractAttribute or IRAttribute methods.; //; //; // The ""mechanics"" of adding a new ""abstract attribute"":; // - Define a class (transitively) inheriting from AbstractAttribute and one; // (which could be the same) that (transitively) inherits from AbstractState.; // For the latter, consider the already available BooleanState and; // {Inc,Dec,Bit}IntegerState if they fit your needs, e.g., you require only a; // number tracking or bit-encoding.; // - Implement all pure methods. Also use overloading if the attribute is not; // conforming with the ""default"" behavior: A (set of) LLVM-IR attribute(s) for; // an argument, call site argument, function return value, or function. See; // the class and method descriptions for more informati",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4075,simpl,simplest,4075,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['simpl'],['simplest']
Usability,"oat>(""x"")` does not; the latter spelling; should be preferred for performance-critical applications. Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case. Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs. Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging). ### Memory usage. There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage. Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:52852,simpl,simplifies,52852,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simplifies']
Usability,"occi, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. ### Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly chosen examples are:. - image analysis; - financial movements predictions and analysis; - sales forecast and product shipping optimisation; - in particles physics: mainly for classification tasks (signal; over background discrimination). More than 50% of neural networks are multilayer perceptrons. This; implementation of multilayer perceptrons is inspired from the; <A HREF=""http://schwind.home.cern.ch/schwind/MLPfit.html"">MLPfit; package</A> originally written by Jerome Schwindling. MLPfit remains; one of the fastest tool for neural networks studies, and this ROOT; add-on will not try to compete on that. A clear and flexible Object; Oriented implementation has been chosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. ### The MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. \image html mlp.png. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with <I>f</I> being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. 1. A linear combination of sigmoids can approximate any; continuous function.; 2. Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. ### Learning metho",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:2698,clear,clear,2698,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['clear'],['clear']
Usability,"ol over alignment via padding.; //; // Uses from functions are more complicated and the primary purpose of this; // IR pass. Several different lowering are chosen between to meet requirements; // to avoid allocating any LDS where it is not necessary, as that impacts; // occupancy and may fail the compilation, while not imposing overhead on a; // feature whose primary advantage over global memory is performance. The basic; // design goal is to avoid one kernel imposing overhead on another.; //; // Implementation.; //; // LDS variables with constant annotation or non-undef initializer are passed; // through unchanged for simplification or error diagnostics in later passes.; // Non-undef initializers are not yet implemented for LDS.; //; // LDS variables that are always allocated at the same address can be found; // by lookup at that address. Otherwise runtime information/cost is required.; //; // The simplest strategy possible is to group all LDS variables in a single; // struct and allocate that struct in every kernel such that the original; // variables are always at the same address. LDS is however a limited resource; // so this strategy is unusable in practice. It is not implemented here.; //; // Strategy | Precise allocation | Zero runtime cost | General purpose |; // --------+--------------------+-------------------+-----------------+; // Module | No | Yes | Yes |; // Table | Yes | No | Yes |; // Kernel | Yes | Yes | No |; // Hybrid | Yes | Partial | Yes |; //; // ""Module"" spends LDS memory to save cycles. ""Table"" spends cycles and global; // memory to save LDS. ""Kernel"" is as fast as kernel allocation but only works; // for variables that are known reachable from a single kernel. ""Hybrid"" picks; // between all three. When forced to choose between LDS and cycles we minimise; // LDS use.; // The ""module"" lowering implemented here finds LDS variables which are used by; // non-kernel functions and creates a new struct with a field for each of those; // LDS variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:2947,simpl,simplest,2947,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['simpl'],['simplest']
Usability,"olled to:; //; // gep %a, 0, %x, %y; load; // gep %a, 0, %x, %y + 1; load; // gep %a, 0, %x + 1, %y; load; // gep %a, 0, %x + 1, %y + 1; load; //; // LLVM's GVN does not use partial redundancy elimination yet, and is thus; // unable to reuse (gep %a, 0, %x, %y). As a result, this misoptimization incurs; // significant slowdown in targets with limited addressing modes. For instance,; // because the PTX target does not support the reg+reg addressing mode, the; // NVPTX backend emits PTX code that literally computes the pointer address of; // each GEP, wasting tons of registers. It emits the following PTX for the; // first load and similar PTX for other loads.; //; // mov.u32 %r1, %x;; // mov.u32 %r2, %y;; // mul.wide.u32 %rl2, %r1, 128;; // mov.u64 %rl3, a;; // add.s64 %rl4, %rl3, %rl2;; // mul.wide.u32 %rl5, %r2, 4;; // add.s64 %rl6, %rl4, %rl5;; // ld.global.f32 %f1, [%rl6];; //; // To reduce the register pressure, the optimization implemented in this file; // merges the common part of a group of GEPs, so we can compute each pointer; // address by adding a simple offset to the common part, saving many registers.; //; // It works by splitting each GEP into a variadic base and a constant offset.; // The variadic base can be computed once and reused by multiple GEPs, and the; // constant offsets can be nicely folded into the reg+immediate addressing mode; // (supported by most targets) without using any extra register.; //; // For instance, we transform the four GEPs and four loads in the above example; // into:; //; // base = gep a, 0, x, y; // load base; // laod base + 1 * sizeof(float); // load base + 32 * sizeof(float); // load base + 33 * sizeof(float); //; // Given the transformed IR, a backend that supports the reg+immediate; // addressing mode can easily fold the pointer arithmetics into the loads. For; // example, the NVPTX backend can easily fold the pointer arithmetics into the; // ld.global.f32 instructions, and the resultant PTX uses much fewer registers.;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:1744,simpl,simple,1744,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['simpl'],['simple']
Usability,"ome to the Lund Monte Carlo! | |; | | P P Y Y T H H I A A This is PYTHIA version 8.100 | |; | | PPP Y T HHHHH I AAAAA Last date of change: 20 Oct 2007 | |; | | P Y T H H I A A | |; | | P Y T H H III A A Now is 27 Oct 2007 at 18:26:53 | |; | | | |; | | Main author: Torbjorn Sjostrand; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Department of Theoretical Physics, Lund University, Lund, Sweden; | |; | | phone: + 41 - 22 - 767 82 27; e-mail: torbjorn@thep.lu.se | |; | | Author: Stephen Mrenna; Computing Division, Simulations Group, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S. Mrenna and P. Skands, arXiv:0710.3820 | |; | | | |; | | The main physics reference is the 'PYTHIA 6.4 Physics and Manual', | |; | | T. Sjostrand, S. Mrenna and P. Skands, JHEP05 (2006) 026 [hep-ph/0603175]. | |; | | | |; | | An archive of program versions and documentation is found on the web: | |; | | http://www.thep.lu.se/~torbjorn/Pythia.html | |; | | | |; | | This program is released under the GNU General Public Licence version 2. | |; | | Please respect the MCnet Guidelines for Event Generator Authors and Users. | |; | | | |; | | Disclaimer: this program comes without any guarantees. | |; | | Beware of errors and use common sense when interpreting results. | |; | | | |; | | Copyright (C) 2007 Torbjorn Sjostrand | |; | | | |; | | | |; | *------------------------------------------------------------------------------* |; | |; *------------------------------------------------------------------------------------*; \endverbatim; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/src/TPythia8.cxx:2771,Guid,Guidelines,2771,montecarlo/pythia8/src/TPythia8.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/montecarlo/pythia8/src/TPythia8.cxx,1,['Guid'],['Guidelines']
Usability,"on*, rather then a *extrapolation* [5]. Also, the independent variables \f$ x_{i}\f$ need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables \f$ \xi_{i}\f$ to a set of linear independent variables; \f$ x_{i}\f$, using a *Principal Components Analysis* (see TPrincipal), and; then use the transformed variable as input to this class [5] [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. 1. Define \f$\mathbf{P} = (P_1, \ldots, P_5)\f$ are the 5 dependent; quantities that define a track.; 2. Compute, for \f$ M\f$ different values of \f$\mathbf{P}\f$, the tracks; through the magnetic field, and determine the corresponding; \f$\mathbf{x} = (x_1, \ldots, x_N)\f$.; 3. Use the simulated observations to determine, with a simple; approximation, the values of \f$\mathbf{P}_j\f$. We call these values; \f$\mathbf{P}^\prime_j, j = 1, \ldots, M\f$.; 4. Determine from \f$\mathbf{x}\f$ a set of at least five relevant; coordinates \f$\mathbf{x}^\prime\f$, using contrains, *or; alternative:*; 5. Perform a Principal Component Analysis (using TPrincipal), and use; to get a linear transformation \f$\mathbf{x} \rightarrow \mathbf{x}^\prime\f$, so that; \f$\mathbf{x}^\prime\f$ are constrained and linear independent.; 6. Perform a Principal Component Analysis on; \f$Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\f$, to get linear; indenpendent (among themselves, but not independent of \f$\mathbf{x}\f$) quantities; \f$\mathbf{Q}^\prime\f$; 7. For each component \f$Q^\prime_i\f$ make a multidimensional fit,; using \f$\mathbf{x}^\prime\f$ as the variables, thus determining a set of; coefficients \f$\mathbf{c}_i\f$. To process data, using this parameterisation, do; 1. Test wether the observation \f$\mathbf{x}\f$ within the domai",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:14842,simpl,simple,14842,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['simpl'],['simple']
Usability,"onality and drawing optimizations. The top left cell in a table has coordinates (0,0). A TObjArray is used internally to ensure little overhead and fast; acces to cells. If the data source has more rows than the default 50 rows of cells in; memory, buttons at the bottom of the table can be used to load the; next or previous chunk of data. At the top of the table, a frame is visible that shows the coordinates; of the top left cell currently in memmory in row,column. The amount of; rows and columns is also shown in rows x columns. These values can be; edited to move to a different area of the data source or to resize the; table. Tab will switch between the enties, return will move to the; currently entered range and resize the table if needed. Clicking the; goto button has the same effect. A TGTable is created by first creating an appropriate; TVirtualTableInterface from the data that needs visualization and; then creating the TGTable using this interface. A simple macro to use a TGTable with a TGSimpleTableInterface:. ~~~; {; Int_t i = 0, j = 0;; UInt_t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create an interface; TGSimpleTableInterface *iface = new TGSimpleTableInterface(data, 6, 5);. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. //Update data; data[5][1] = 3.01;; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; ~~~. It is also possi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTable.cxx:1251,simpl,simple,1251,gui/gui/src/TGTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTable.cxx,1,['simpl'],['simple']
Usability,"onic condition it's tempting to replace the induction; // variable in the condition with its value on the last iteration. But this; // transformation is not correct, e.g. e = 4, b = 5 breaks the loop.; //; // for (int i = b; i != e; i++); // guard(i u< len); //; // One of the ways to reason about this problem is to use an inductive proof; // approach. Given the loop:; //; // if (B(0)) {; // do {; // I = PHI(0, I.INC); // I.INC = I + Step; // guard(G(I));; // } while (B(I));; // }; //; // where B(x) and G(x) are predicates that map integers to booleans, we want a; // loop invariant expression M such the following program has the same semantics; // as the above:; //; // if (B(0)) {; // do {; // I = PHI(0, I.INC); // I.INC = I + Step; // guard(G(0) && M);; // } while (B(I));; // }; //; // One solution for M is M = forall X . (G(X) && B(X)) => G(X + Step); //; // Informal proof that the transformation above is correct:; //; // By the definition of guards we can rewrite the guard condition to:; // G(I) && G(0) && M; //; // Let's prove that for each iteration of the loop:; // G(0) && M => G(I); // And the condition above can be simplified to G(Start) && M.; //; // Induction base.; // G(0) && M => G(0); //; // Induction step. Assuming G(0) && M => G(I) on the subsequent; // iteration:; //; // B(I) is true because it's the backedge condition.; // G(I) is true because the backedge is guarded by this condition.; //; // So M = forall X . (G(X) && B(X)) => G(X + Step) implies G(I + Step).; //; // Note that we can use anything stronger than M, i.e. any condition which; // implies M.; //; // When S = 1 (i.e. forward iterating loop), the transformation is supported; // when:; // * The loop has a single latch with the condition of the form:; // B(X) = latchStart + X <pred> latchLimit,; // where <pred> is u<, u<=, s<, or s<=.; // * The guard condition is of the form; // G(X) = guardStart + X u< guardLimit; //; // For the ult latch comparison case M is:; // forall X . guardStart + X u",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp:2755,simpl,simplified,2755,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,1,['simpl'],['simplified']
Usability,"only use tracked parameters to call them, in the real world,; // the picture might be different. Parameters can be stored in global; // variables or leaked into other functions that we know nothing about.; // We try to be lenient and trust users. Another kind `Escaped` reflects; // such situations. We don't know if it gets called there or not, but we; // should always think of `Escaped` as the best possible option.; //; // Some of the paths in the analyzed functions might end with a call; // to noreturn functions. Such paths are not required to have parameter; // calls and we want to track that. For the purposes of better diagnostics,; // we don't want to reuse `Escaped` and, thus, have another kind `NoReturn`.; //; // Additionally, we have `NotVisited` kind that tells us nothing about; // a tracked parameter, but is used for tracking analyzed (aka visited); // basic blocks.; //; // If we consider `|` to be a JOIN operation of two kinds coming from; // two different paths, the following properties must hold:; //; // 1. for any Kind K: K | K == K; // Joining two identical kinds should result in the same kind.; //; // 2. for any Kind K: Reported | K == Reported; // Doesn't matter on which path it was reported, it still is.; //; // 3. for any Kind K: NoReturn | K == K; // We can totally ignore noreturn paths during merges.; //; // 4. DefinitelyCalled | NotCalled == MaybeCalled; // Called on one path, not called on another - that's simply; // a definition for MaybeCalled.; //; // 5. for any Kind K in [DefinitelyCalled, NotCalled, MaybeCalled]:; // Escaped | K == K; // Escaped mirrors other statuses after joins.; // Every situation, when we join any of the listed kinds K,; // is a violation. For this reason, in order to assume the; // best outcome for this escape, we consider it to be the; // same as the other path.; //; // 6. for any Kind K in [DefinitelyCalled, NotCalled]:; // MaybeCalled | K == MaybeCalled; // MaybeCalled should basically stay after almost every join.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:2973,simpl,simply,2973,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['simpl'],['simply']
Usability,"onsistent with the little-endian; /// convention that BitFields within a struct will first be packed into the; /// least significant bits the address they belong to.; ///; /// We expect a format complying with the grammar in the following pseudo-EBNF; /// in Version 1 of the FDR log.; ///; /// FDRLog: XRayFileHeader ThreadBuffer*; /// XRayFileHeader: 32 bytes to identify the log as FDR with machine metadata.; /// Includes BufferSize; /// ThreadBuffer: NewBuffer WallClockTime NewCPUId FunctionSequence EOB; /// BufSize: 8 byte unsigned integer indicating how large the buffer is.; /// NewBuffer: 16 byte metadata record with Thread Id.; /// WallClockTime: 16 byte metadata record with human readable time.; /// Pid: 16 byte metadata record with Pid; /// NewCPUId: 16 byte metadata record with CPUId and a 64 bit TSC reading.; /// EOB: 16 byte record in a thread buffer plus mem garbage to fill BufSize.; /// FunctionSequence: NewCPUId | TSCWrap | FunctionRecord; /// TSCWrap: 16 byte metadata record with a full 64 bit TSC reading.; /// FunctionRecord: 8 byte record with FunctionId, entry/exit, and TSC delta.; ///; /// In Version 2, we make the following changes:; ///; /// ThreadBuffer: BufferExtents NewBuffer WallClockTime NewCPUId; /// FunctionSequence; /// BufferExtents: 16 byte metdata record describing how many usable bytes are; /// in the buffer. This is measured from the start of the buffer; /// and must always be at least 48 (bytes).; ///; /// In Version 3, we make the following changes:; ///; /// ThreadBuffer: BufferExtents NewBuffer WallClockTime Pid NewCPUId; /// FunctionSequence; /// EOB: *deprecated*; ///; /// In Version 4, we make the following changes:; ///; /// CustomEventRecord now includes the CPU data.; ///; /// In Version 5, we make the following changes:; ///; /// CustomEventRecord and TypedEventRecord now use TSC delta encoding similar to; /// what FunctionRecord instances use, and we no longer need to include the CPU; /// id in the CustomEventRecord.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/Trace.cpp:2007,usab,usable,2007,interpreter/llvm-project/llvm/lib/XRay/Trace.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/XRay/Trace.cpp,1,['usab'],['usable']
Usability,"ontains a slow-but-accurate integer implementation of the; * inverse DCT (Discrete Cosine Transform). In the IJG code, this routine; * must also perform dequantization of the input coefficients.; *; * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT; * on each row (or vice versa, but it's more convenient to emit a row at; * a time). Direct algorithms are also available, but they are much more; * complex and seem not to be any faster when reduced to code.; *; * This implementation is based on an algorithm described in; * C. Loeffler, A. Ligtenberg and G. Moschytz, ""Practical Fast 1-D DCT; * Algorithms with 11 Multiplications"", Proc. Int'l. Conf. on Acoustics,; * Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.; * The primary algorithm described there uses 11 multiplies and 29 adds.; * We use their alternate method with 12 multiplies and 32 adds.; * The advantage of this method is that no data path contains more than one; * multiplication; this allows a very simple and accurate implementation in; * scaled fixed-point arithmetic, with a minimal number of shifts.; *; * We also provide IDCT routines with various output sample block sizes for; * direct resolution reduction or enlargement and for direct resolving the; * common 2x1 and 1x2 subsampling cases without additional resampling: NxN; * (N=1...16), 2NxN, and Nx2N (N=1...8) pixels for one 8x8 input DCT block.; *; * For N<8 we simply take the corresponding low-frequency coefficients of; * the 8x8 input DCT block and apply an NxN point IDCT on the sub-block; * to yield the downscaled outputs.; * This can be seen as direct low-pass downsampling from the DCT domain; * point of view rather than the usual spatial domain point of view,; * yielding significant computational savings and results at least; * as good as common bilinear (averaging) spatial downsampling.; *; * For N>8 we apply a partial NxN IDCT on the 8 input coefficients as; * lower frequencies and higher frequencies assumed to ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c:1284,simpl,simple,1284,graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jidctint.c,1,['simpl'],['simple']
Usability,"opyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooArgSet; /// RooArgSet is a container object that can hold multiple RooAbsArg objects.; /// The container has set semantics which means that:; ///; /// - Every object it contains must have a unique name returned by GetName().; ///; /// - Contained objects are not ordered, although the set can be traversed; /// using an iterator returned by createIterator(). The iterator does not; /// necessarily follow the object insertion order.; ///; /// - Objects can be retrieved by name only, and not by index.; ///; ///; /// Ownership of contents; /// -------------------------; /// Unowned objects are inserted with the add() method. Owned objects; /// are added with addOwned() or addClone(). A RooArgSet either owns all; /// of it contents, or none, which is determined by the first `add`; /// call. Once an ownership status is selected, inappropriate `add` calls; /// will return error status. Clearing the list via removeAll() resets the; /// ownership status. Arguments supplied in the constructor are always added; /// as unowned elements.; ///; ///; /// Uniquely identifying RooArgSet objects; /// ---------------------------------------; ///; /// \warning Before v6.28, it was ensured that no RooArgSet objects on the heap; /// were located at an address that had already been used for a RooArgSet before.; /// With v6.28, this is not guaranteed anymore. Hence, if your code uses pointer; /// comparisons to uniquely identify RooArgSet instances, please consider using; /// the new `RooArgSet::uniqueId()`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:1678,Clear,Clearing,1678,roofit/roofitcore/src/RooArgSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx,1,['Clear'],['Clearing']
Usability,"or less general cases:; /// * TMPWorkerExecutor<F, T, void> handles the case of a function that takes; /// one argument and does not perform reduce operations; /// (TProcessExecutor::Map(F func, T& args)).; /// * TMPWorkerExecutor<F, void, R> handles the case of a function that takes; /// no arguments, to be executed a specified amount of times, which; /// returned values are squashed together (reduced); /// (TProcessExecutor::Map(F func, unsigned nTimes, R redfunc)); /// * TMPWorkerExecutor<F, void, void> handles the case of a function that takes; /// no arguments and whose arguments are not ""reduced""; /// (TProcessExecutor::Map(F func, unsigned nTimes)); ///; /// Since all the important data are passed to TMPWorkerExecutor at construction; /// time, the kind of messages that client and workers have to exchange; /// are usually very simple.; ///; //////////////////////////////////////////////////////////////////////////; // Quick guide to TMPWorkerExecutor:; // For each TProcessExecutor::Map and TProcessExecutor::MapReduce signature; // there's a corresponding; // specialization of TMPWorkerExecutor:; // * Map(func, nTimes) --> TMPWorkerExecutor<F, void, void>; // * Map(func, args) --> TMPWorkerExecutor<F, T, void>; // * MapReduce(func, nTimes, redfunc) --> TMPWorkerExecutor<F, void, R>; // * MapReduce(func, args, redfunc) --> TMPWorkerExecutor<F, T, R>; // I thought about having four different classes (with different names); // instead of four specializations of the same class template, but it really; // makes no difference in the end since the different classes would be class; // templates anyway, and I would have to find a meaningful name for each one.; // About code replication: looking carefully, it can be noticed that there's; // very little code replication since the different versions of TMPWorkerExecutor; // all behave slightly differently, in incompatible ways (e.g. they all need; // different data members, different signatures for the ctors, and so on).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TMPWorkerExecutor.h:1790,guid,guide,1790,core/multiproc/inc/TMPWorkerExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TMPWorkerExecutor.h,1,['guid'],['guide']
Usability,"order doesn't depend on numerical key values, it only depends; /// on the order of insert() and erase() operations. Iteration order is the; /// insertion order. Iteration is only provided over elements of equivalent; /// keys, but iterators are bidirectional.; ///; /// Compared to BitVector, SparseMultiSet<unsigned> uses 8x-40x more memory, but; /// offers constant-time clear() and size() operations as well as fast iteration; /// independent on the size of the universe.; ///; /// SparseMultiSet contains a dense vector holding all the objects and a sparse; /// array holding indexes into the dense vector. Most of the memory is used by; /// the sparse array which is the size of the key universe. The SparseT template; /// parameter provides a space/speed tradeoff for sets holding many elements.; ///; /// When SparseT is uint32_t, find() only touches up to 3 cache lines, but the; /// sparse array uses 4 x Universe bytes.; ///; /// When SparseT is uint8_t (the default), find() touches up to 3+[N/256] cache; /// lines, but the sparse array is 4x smaller. N is the number of elements in; /// the set.; ///; /// For sets that may grow to thousands of elements, SparseT should be set to; /// uint16_t or uint32_t.; ///; /// Multiset behavior is provided by providing doubly linked lists for values; /// that are inlined in the dense vector. SparseMultiSet is a good choice when; /// one desires a growable number of entries per key, as it will retain the; /// SparseSet algorithmic properties despite being growable. Thus, it is often a; /// better choice than a SparseSet of growable containers or a vector of; /// vectors. SparseMultiSet also keeps iterators valid after erasure (provided; /// the iterators don't point to the element erased), allowing for more; /// intuitive and fast removal.; ///; /// @tparam ValueT The type of objects in the set.; /// @tparam KeyFunctorT A functor that computes an unsigned index from KeyT.; /// @tparam SparseT An unsigned integer type. See above.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h:2365,intuit,intuitive,2365,interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseMultiSet.h,1,['intuit'],['intuitive']
Usability,"ork, we transfer one byte to indicate the head of the; * page list sent, and for each page on the list of sent pages, the page; * header and the page payload is sent (if the page is free, we only; * transmit the page header, and we never transmit more payload than; * the page actually contains); * - in the child, all open BidirMMapPipes but the current one are closed. this; * is done for two reasons: first, to conserve file descriptors and address; * space. second, if more than one process is meant to use such a; * BidirMMapPipe, synchronisation issues arise which can lead to bugs that; * are hard to find and understand. it's much better to come up with a design; * which does not need pipes to be shared among more than two processes.; *; * Here is a trivial example of a parent and a child talking to each other over; * a BidirMMapPipe:; * @code; * #include <string>; * #include <iostream>; * #include <cstdlib>; *; * #include ""BidirMMapPipe.h""; *; * int simplechild(BidirMMapPipe& pipe); * {; * // child does an echo loop; * while (pipe.good() && !pipe.eof()) {; * // read a string; * std::string str;; * pipe >> str;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * // check if parent wants us to shut down; * if (!str.empty()) {; * std::cout << ""[CHILD] : read: "" << str << std::endl;; * str = ""... early in the morning?"";; * }; * pipe << str << BidirMMapPipe::flush;; * if (str.empty()) break;; * if (!pipe) return -1;; * std::cout << ""[CHILD] : wrote: "" << str << std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechil",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5492,simpl,simplechild,5492,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,1,['simpl'],['simplechild']
Usability,"orkerExecutor<F, T, R>; /// The most general case, used by; /// TProcessExecutor::MapReduce(F func, T& args, R redfunc).; /// This worker is build with:; /// * a function of signature F (the one to be executed); /// * a collection of arguments of type T on which to apply the function; /// * a reduce function with signature R to be used to squash many; /// returned values together.; ///; /// ### Partial specializations; /// A few partial specializations are provided for less general cases:; /// * TMPWorkerExecutor<F, T, void> handles the case of a function that takes; /// one argument and does not perform reduce operations; /// (TProcessExecutor::Map(F func, T& args)).; /// * TMPWorkerExecutor<F, void, R> handles the case of a function that takes; /// no arguments, to be executed a specified amount of times, which; /// returned values are squashed together (reduced); /// (TProcessExecutor::Map(F func, unsigned nTimes, R redfunc)); /// * TMPWorkerExecutor<F, void, void> handles the case of a function that takes; /// no arguments and whose arguments are not ""reduced""; /// (TProcessExecutor::Map(F func, unsigned nTimes)); ///; /// Since all the important data are passed to TMPWorkerExecutor at construction; /// time, the kind of messages that client and workers have to exchange; /// are usually very simple.; ///; //////////////////////////////////////////////////////////////////////////; // Quick guide to TMPWorkerExecutor:; // For each TProcessExecutor::Map and TProcessExecutor::MapReduce signature; // there's a corresponding; // specialization of TMPWorkerExecutor:; // * Map(func, nTimes) --> TMPWorkerExecutor<F, void, void>; // * Map(func, args) --> TMPWorkerExecutor<F, T, void>; // * MapReduce(func, nTimes, redfunc) --> TMPWorkerExecutor<F, void, R>; // * MapReduce(func, args, redfunc) --> TMPWorkerExecutor<F, T, R>; // I thought about having four different classes (with different names); // instead of four specializations of the same class template, but it really; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TMPWorkerExecutor.h:1691,simpl,simple,1691,core/multiproc/inc/TMPWorkerExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TMPWorkerExecutor.h,1,['simpl'],['simple']
Usability,"oup. Each color chip is identified by a mnemonic (e.g. kYellow) and a number.; The keywords, kRed, kBlue, kYellow, kPink, etc are defined in the header file; Rtypes.h that is included in all ROOT other header files. It is better; to use these keywords in user code instead of hardcoded color numbers, e.g.:. ~~~ {.cpp}; myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);; ~~~. Begin_Macro(source); {; auto w = new TColorWheel();; auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; w->SetCanvas(cw);; w->Draw();; }; End_Macro. The complete list of predefined color names is the following:. ~~~ {.cpp}; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; ~~~. Note the special role of color `kWhite` (color number 0). It is the default; background color also. For instance in a PDF or PS files (as paper is usually white); it is simply not painted. To have a white color behaving like the other color the; simplest is to define an other white color not attached to the color index 0:. ~~~ {.cpp}; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);; ~~~. \anchor C03; ## Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like; TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots. Two static functions are available that return the bright or dark color number corresponding; to a given color index. If these variants don't already exist, they are created as needed:; ~~~ {.cpp}; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; ~~~. \anchor C031; ## Accessible Color Schemes; Choosing an appropriate color scheme is essential for making results easy to understand and; interpret. Factors like colorblindness and converting colors to grayscale for publication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx:3582,simpl,simply,3582,core/base/src/TColor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TColor.cxx,1,['simpl'],['simply']
Usability,"painter; \brief The graph painter class. Implements all graphs' drawing's options. - [Introduction](\ref GrP0); - [Graphs' plotting options](\ref GrP1); - [Exclusion graphs](\ref GrP2); - [Graphs with error bars](\ref GrP3); - [TGraphErrors](\ref GrP3a); - [TGraphAsymmErrors](\ref GrP3b); - [TGraphBentErrors](\ref GrP3c); - [TGraphMultiErrors](\ref GrP3d); - [TGraphPolar options](\ref GrP4); - [Colors automatically picked in palette](\ref GrP5); - [Reverse graphs' axis](\ref GrP6); - [Graphs in logarithmic scale](\ref GrP7); - [Highlight mode for graph](\ref GrP8). \anchor GrP0; ### Introduction. Graphs are drawn via the painter `TGraphPainter` class. This class; implements techniques needed to display the various kind of; graphs i.e.: `TGraph`, `TGraphErrors`, `TGraphBentErrors` and `TGraphAsymmErrors`. To draw a graph `graph` it's enough to do:. graph->Draw(""AL"");. The option `AL` in the `Draw()` method means:. 1. The axis should be drawn (option `A`),; 2. The graph should be drawn as a simple line (option `L`). By default a graph is drawn in the current pad in the current coordinate system.; To define a suitable coordinate system and draw the axis the option; `A` must be specified. `TGraphPainter` offers many options to paint the various kind of graphs. It is separated from the graph classes so that one can have graphs without the; graphics overhead, for example in a batch program. When a displayed graph is modified, there is no need to call `Draw()` again; the; image will be refreshed the next time the pad will be updated. A pad is updated; after one of these three actions:. 1. a carriage return on the ROOT command line,; 2. a click inside the pad,; 3. a call to `TPad::Update`. \anchor GrP1; ### Graphs' plotting options; Graphs can be drawn with the following options:. | Option | Description |; |----------|-------------------------------------------------------------------|; | ""A"" | Produce a new plot with Axis around the graph |; | ""I"" | Combine with option 'A' ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:1125,simpl,simple,1125,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['simpl'],['simple']
Usability,"parblock; /// A string that takes one of these general forms:; /// - ""e1"" produces a 1-d histogram (TH1F) of expression ""e1""; /// - ""e1:e2"" produces an unbinned 2-d scatter-plot (TGraph) of ""e1""; /// on the y-axis versus ""e2"" on the x-axis; /// - ""e1:e2:e3"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; /// vs ""e2"" vs ""e3"" on the z-, y-, x-axis, respectively; /// - ""e1:e2:e3:e4"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; /// vs ""e2"" vs ""e3"" and ""e4"" mapped on the current color palette.; /// (to create histograms in the 2, 3, and 4 dimensional case,; /// see section ""Saving the result of Draw to an histogram""); /// - ""e1:e2:e3:e4:e5"" with option ""GL5D"" produces a 5D plot using OpenGL. `gStyle->SetCanvasPreferGL(true)` is needed.; /// - Any number of variables no fewer than two can be used with the options ""CANDLE"" and ""PARA""; /// - An arbitrary number of variables can be used with the option ""GOFF""; ///; /// Examples:; /// - ""x"": the simplest case, it draws a 1-Dim histogram of column x; /// - ""sqrt(x)"", ""x*y/z"": draw histogram with the values of the specified numerical expression across TTree events; /// - ""y:sqrt(x)"": 2-Dim histogram of y versus sqrt(x); /// - ""px:py:pz:2.5*E"": produces a 3-d scatter-plot of px vs py ps pz; /// and the color number of each marker will be 2.5*E.; /// If the color number is negative it is set to 0.; /// If the color number is greater than the current number of colors; /// it is set to the highest color number. The default number of; /// colors is 50. See TStyle::SetPalette for setting a new color palette.; ///; /// The expressions can use all the operations and built-in functions; /// supported by TFormula (see TFormula::Analyze()), including free; /// functions taking numerical arguments (e.g. TMath::Bessel()).; /// In addition, you can call member functions taking numerical; /// arguments. For example, these are two valid expressions:; /// ~~~ {.cpp}; /// TMath::BreitWigner(fPx,3,2); /// event.Get",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:1288,simpl,simplest,1288,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simplest']
Usability,"pe:; * @code; * #include <string>; * #include <iostream>; * #include <cstdlib>; *; * #include ""BidirMMapPipe.h""; *; * int simplechild(BidirMMapPipe& pipe); * {; * // child does an echo loop; * while (pipe.good() && !pipe.eof()) {; * // read a string; * std::string str;; * pipe >> str;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * // check if parent wants us to shut down; * if (!str.empty()) {; * std::cout << ""[CHILD] : read: "" << str << std::endl;; * str = ""... early in the morning?"";; * }; * pipe << str << BidirMMapPipe::flush;; * if (str.empty()) break;; * if (!pipe) return -1;; * std::cout << ""[CHILD] : wrote: "" << str << std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:6420,simpl,simple,6420,roofit/roofitcore/src/BidirMMapPipe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h,2,['simpl'],"['simple', 'simplechild']"
Usability,"pically are represented as; // pointers. The generic mechanism allows clients to supply; // hooks to the ROOT framework in interactive mode in order to; // dereference these objects and access the objects pointed to by; // the reference objects.; //; // Implementations are supplied for ROOT own reference mechanism; // based on instances of the TRef and the TRefArray classes.; //; // To support generality this mechanism was implemented using a; // proxy mechanism, which shields the concrete implementation of the; // reference classes from ROOT. Hence, this mechanism also works for; // references as they are supported by the POOL persistency framework; // and by frameworks like Gaudi.; //; // To enable reference support a concrete sub-class instance of; // the TVirtualRefProxy base class must be attached to the TClass; // instance representing the reference itself. Please see the; // header- and implementation file TRefProxy.h/cxx for details.; // For ROOT's own references this is done simply by a call like:; //; // #include ""TROOT.h""; // #include ""TClass.h""; // #include ""TRefProxy.h""; //; // ...; // gROOT->GetClass(""TRef"")->AdoptReferenceProxy(new TRefProxy());; //; // - GetObject() must return the pointer to the referenced; // object. TTreeFormula then figures out how to access the; // value to be plotted.; // Hence, the actual work is done inside a call to:; //; // void* TRefProxy::GetObject(TFormLeafInfoReference* info, void* data, int); // {; // if ( data ) {; // TRef* ref = (TRef*)((char*)data + info->GetOffset());; // // Dereference TRef and return pointer to object; // void* obj = ref->GetObject();; // if ( obj ) { return obj; }; //; // ... else handle error or implement failover ....; //; //; // The type of the referenced object must either be known at compilation; // time or it must be possible to guess it reading the first TTree entry.; // In this case the following conditions must be met:; // - GetValueClass() must return the TClass to the referenced; // ob",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h:1340,simpl,simply,1340,core/meta/inc/TVirtualRefProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TVirtualRefProxy.h,1,['simpl'],['simply']
Usability,"processed basic blocks in the loop. When encountering; // such values, we optimistically asssume their equivalence and store this; // assumption in a BlockDiffCandidate for the pair of compared BBs.; //; // Once we have diffed all BBs, for every BlockDiffCandidate, we check all; // stored assumptions using the Values map that stores proven equivalences; // between the old and new values, and report a diff if an assumption cannot; // be proven to be true.; //; // Note that after having made an assumption, all further determined; // equivalences implicitly depend on that assumption. These will not be; // reverted or reported if the assumption proves to be false, because these; // are considered indirect diffs caused by earlier direct diffs.; //; // We aim to avoid false negatives in llvm-diff, that is, ensure that; // whenever no diff is reported, the functions are indeed equal. If; // assumptions were made, this is not entirely clear, because in principle we; // could end up with a circular proof where the proof of equivalence of two; // nodes is depending on the assumption of their equivalence.; //; // To see that assumptions do not add false negatives, note that if we do not; // report a diff, this means that there is an equivalence mapping between old; // and new values that is consistent with all assumptions made. The circular; // dependency that exists on an IR value level does not exist at run time,; // because the values selected by the phi nodes must always already have been; // computed. Hence, we can prove equivalence of the old and new functions by; // considering step-wise parallel execution, and incrementally proving; // equivalence of every new computed value. Another way to think about it is; // to imagine cloning the loop BBs for every iteration, turning the loops; // into (possibly infinite) DAGs, and proving equivalence by induction on the; // iteration, using the computed value mapping.; // The class BlockDiffCandidate stores pairs which either hav",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp:1066,clear,clear,1066,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,1,['clear'],['clear']
Usability,"ps; // to ensure that the ambiguities are intentionally resolved by the user.; //; // The matching is divided into two distinct phases:; //; // 1. Classification: Each operand is mapped to the unique set which (a); // contains it, and (b) is the largest such subset for which a single; // instruction could match all members.; //; // For register classes, we can generate these subgroups automatically. For; // arbitrary operands, we expect the user to define the classes and their; // relations to one another (for example, 8-bit signed immediates as a; // subset of 32-bit immediates).; //; // By partitioning the operands in this way, we guarantee that for any; // tuple of classes, any single instruction must match either all or none; // of the sets of operands which could classify to that tuple.; //; // In addition, the subset relation amongst classes induces a partial order; // on such tuples, which we use to resolve ambiguities.; //; // 2. The input can now be treated as a tuple of classes (static tokens are; // simple singleton sets). Each such tuple should generally map to a single; // instruction (we currently ignore cases where this isn't true, whee!!!),; // which we can emit a simple matcher for.; //; // Custom Operand Parsing; // ----------------------; //; // Some targets need a custom way to parse operands, some specific instructions; // can contain arguments that can represent processor flags and other kinds of; // identifiers that need to be mapped to specific values in the final encoded; // instructions. The target specific custom operand parsing works in the; // following way:; //; // 1. A operand match table is built, each entry contains a mnemonic, an; // operand class, a mask for all operand positions for that same; // class/mnemonic and target features to be checked while trying to match.; //; // 2. The operand matcher will try every possible entry with the same; // mnemonic and will check if the target feature for this mnemonic also; // matches. After",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:3552,simpl,simple,3552,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['simpl'],['simple']
Usability,"r at the end. Another way is from the right panel context menu : ExecuteCommand.; All commands can be interrupted at any time by pressing the STOP button; from the bottom-left; You can toggle recording of the current command in the history file by; checking the Rec button from the top-right. ### Context menus. You can activate context menus by right-clicking on items or inside the; right panel. Context menus for mapped items from the left tree-type list :; The items from the left that are provided with context menus are tree and; branch items. You can directly activate the *MENU* marked methods of TTree; from this menu. Context menu for the right panel:. A general context menu is activated if the user right-clicks the right panel. Commands are :; - EmptyAll : clears the content of all expressions;; - ExecuteCommand : execute a ROOT command;; - MakeSelector : equivalent of TTree::MakeSelector();; - NewExpression : add an expression item in the right panel;; - Process : equivalent of TTree::Process();; - SaveSource : save the current session as a C++ macro;; - SetScanFileName : define a name for the file where TTree::Scan command; is redirected when the `<Scan>` button is checked;; - SetTreeName : open a new tree with this name in the viewer;. A specific context menu is activated if expressions/leaves are right-clicked. Commands are :; - Draw : draw a histogram for this item;; - EditExpression : pops-up the expression editor;; - Empty : empty the name and alias of this item;; - RemoveItem : removes clicked item from the list;; - Scan : scan this expression;; - SetExpression : edit name and alias for this item by hand;. Starting the viewer. 1. From the TBrowser: Select a tree in the TBrowser, then call the; StartViewer() method from its context menu (right-click on the tree).; 2. From the command line: Start a ROOT session in the directory where you have; your tree. You will need first to load the library for TTreeViewer and; optionally other libraries for user defined ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx:6289,clear,clears,6289,tree/treeviewer/src/TTreeViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx,1,['clear'],['clears']
Usability,"r to create the `Plain` style. ```; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");. plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; ```. You can set the current style with:. ```; gROOT->SetStyle(style_name);; ```. You can get a pointer to an existing style with:. ```; auto style = gROOT->GetStyle(style_name);; ```. You can create additional styles with:. ```; TStyle *st1 = new TStyle(""st1"",""my style"");; st1->Set....; st1->cd(); this becomes now the current style gStyle; ```. In your [rootlogon.C](https://root.cern/doc/master/classexamples/startsession.log.html); file, you can redefine the default parameters via statements like:. ```; gStyle->SetStatX(0.7);; gStyle->SetStatW(0.2);; gStyle->SetLabelOffset(1.2);; gStyle->SetLabelFont(72);; ```. Note that when an object is created, its attributes are taken from the current; style. For example, you may have created an histogram in a previous session,; saved it in a file. Meanwhile, if you have changed the style, the histogram will; be drawn with the old attributes. You can force the current style attributes to; be set when you read an object from a file by calling:. ```; gROOT->ForceStyle();; ```. before reading the objects from the file. Let's assume you have a canvas or pad with your histogram or any other object,; you can force these objects to get the attributes of the current style via:. ```; canvas->UseCurrentStyle();; ```. The description of the style functions should be clear from the name of the; TStyle Setters or Getters. Some functions have an extended description, in particular:. - TStyle:SetLabelFont.; - TStyle:SetLineStyleString, to set the format of dashed lines.; - TStyle:SetOptStat.; - TStyle:SetPalette to change the colors palette.; - TStyle:SetTitleOffset. */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx:2733,clear,clear,2733,core/base/src/TStyle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TStyle.cxx,1,['clear'],['clear']
Usability,"r: M.Gheata; /*************************************************************************; * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TGeoVolumeEditor; \ingroup Geometry_builder. Editor for geometry volumes and assemblies of volumes. Besides the volume; name and line attributes, a TGeoVolume has the following editable categories; split vertically by a shutter:. - Properties: one can edit the shape and medium components from here. It is; also possible to change the existing ones.; - Daughters: the main category allowing defining, editing, removing or; positioning daughter volumes inside the current edited volume. To add a; daughter, one needs to select first a volume and a matrix. Currently no check; is performed if the daughter volume creates an extrusion (illegal for tracking).; To remove or change the position of an existing daughter, one should simply; select the desired daughter from the combo box with the existing ones, then; simply click the appropriate button.; - Visualization: One can set the visibility of the volume and of its daughters,; set the visibility depth and the view type. Selecting ""All"" will draw the; volume and all visible daughters down to the selected level starting from the; edited volume. Selecting ""Leaves"" will draw just the deepest daughters within; the selected visibility level, without displaying the containers, while ""Only""; will just draw the edited volume.; - Division: The category becomes active only if there are no daughters of the; edited volume added by normal positioning (e.g. from `<Daughters>` category). The; minimum allowed starting value for the selected division axis is automatically; selected, while the slicing step is set to 0 - meaning that only the number; of slices matter.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoVolumeEditor.cxx:1130,simpl,simply,1130,geom/geombuilder/src/TGeoVolumeEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geombuilder/src/TGeoVolumeEditor.cxx,2,['simpl'],['simply']
Usability,"r; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]. ## Filling TBuffer3D and Adding to Viewer. The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. - Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; - Some need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details).; \image html base_tbuffer3d.png. The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags. The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion.; An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; - Complete the mandatory Core section.; - Complete the ShapeSpecific section if applicable.; - Complete the BoundingBox if you can.; - Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx:3399,Clear,ClearSectionsValid,3399,core/base/src/TVirtualViewer3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TVirtualViewer3D.cxx,2,"['Clear', 'clear']","['ClearSectionsValid', 'clear']"
Usability,"rad[1]=200 * (y - x * x);; return grad;; }. void Minimization(); {; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; //passing RosenBrock function to R; r[""RosenBrock""]<<ROOT::R::TRFunctionExport(RosenBrock);. //passing RosenBrockGrad function to R; r[""RosenBrockGrad""]<<ROOT::R::TRFunctionExport(RosenBrockGrad);. //the option ""method"" could be ""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"",""Brent""; //the option ""control"" lets you put some constraints like:; //""maxit"" The maximum number of iterations; //""abstol"" The absolute convergence tolerance.; //""reltol"" Relative convergence tolerance.; r<<""result <- optim( c(0.01,0.01), RosenBrock,method='BFGS',control = list(maxit = 1000000) )"";. //Getting results from R; TVectorD min=r.Eval(""result$par"");. std::cout.precision(8);; //printing results; std::cout<<""-----------------------------------------""<<std::endl;; std::cout<<""Minimum x=""<<min[0]<<"" y=""<<min[1]<<std::endl;; std::cout<<""Value at minimum =""<<RosenBrock(min)<<std::endl;. //using the gradient; r<<""optimHess(result$par, RosenBrock, RosenBrockGrad)"";; r<<""hresult <- optim(c(-1.2,1), RosenBrock, NULL, method = 'BFGS', hessian = TRUE)"";; //getting the minimum calculated with the gradient; TVectorD hmin=r.Eval(""hresult$par"");. //printing results; std::cout<<""-----------------------------------------""<<std::endl;; std::cout<<""Minimization with the Gradient""<<endl;; std::cout<<""Minimum x=""<<hmin[0]<<"" y=""<<hmin[1]<<std::endl;; std::cout<<""Value at minimum =""<<RosenBrock(hmin)<<std::endl;. }; \endcode. Output; \code; Processing Minimization.C...; -----------------------------------------; Minimum x=0.99980006 y=0.99960016; Value at minimum =3.9974288e-08; -----------------------------------------; Minimization with the Gradient; Minimum x=0.99980443 y=0.99960838; Value at minimum =3.8273828e-08; \endcode; <h2>Users Guide </h2>; <a href=""https://oproject.org/pages/ROOT%20R%20Users%20Guide""> https://oproject.org/pages/ROOT R Users Guide</a><br>. @ingroup R; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRFunctionExport.h:3653,Guid,Guide,3653,bindings/r/inc/TRFunctionExport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRFunctionExport.h,2,['Guid'],['Guide']
Usability,"re releases. See the Vary() method for more information and [this tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html) ; for an example usage of Vary and \ref ROOT::RDF::Experimental::VariationsFor ""VariationsFor()"" in the analysis. \anchor rnode; ### RDataFrame objects as function arguments and return values; RDataFrame variables/nodes are relatively cheap to copy and it's possible to both pass them to (or move them into); functions and to return them from functions. However, in general each dataframe node will have a different C++ type,; which includes all available compile-time information about what that node does. One way to cope with this complication; is to use template functions and/or C++14 auto return types:; ~~~{.cpp}; template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; ~~~. A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; ~~~{.cpp}; // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; ~~~. The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`. \anchor RDFCollections; ### Storing RDataFrame objects in collections. ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:. ~~~{.cpp}; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; ~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:60800,simpl,simpler,60800,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simpler']
Usability,"reeType, cache glyphs on the client side and possibly; * perform smoothing of ugly X fonts.; *; * There is no library solving all this problems in one fell swoop,; * except for monstrous ones, like ImLib.; *; * Hence libAfterImage has come to life.; *; * DESCRIPTION; * libAfterStep provides sevarl facilities.; *; * 1. X Visual abstruction layer via ASVisual. This layer handles color; * management, transfer of data to and from X Server, and other screen; * related stuff.; *; * 2. Scanline handling facility via ASScanline. ASScanline is the most; * widely used structure since image handling is implemented on; * per-scanline basis.; *; * 3. Image storage, trasformation and rendering via ASImage. ASImage; * provides for generic container used for any image or text; * manipulation. It incorporates such a robust facilities as in-memory; * RLE compression, separate channel storage of 4 channels ( Alpha, Red,; * Green, and Blue ) with 8 bit per channel.; *; * 4. Simplified font handling facility via ASFont and ASFointManager.; * All the font handling is done using ASFont structure, no matter what; * type of font is used. Any font supported by X11 and FreeType can be; * used.; *; * 5. Transparent image file reading for many different formats. Included; * built-in XPM reading code and XCF ( GIMP's native format ).; * Overall supported:; * via external libraries :; * XPM, JPEG, PNG, TIFF, GIF; * via built in code :; * XPM, XCF, PNM, PPM, BMP, ICO, CUR; * Note that XPM can be supported both via built-in code or via libXpm,; * depending on compilation configuration.; * Actuall image file format is autodetected from the file contents -; * file name extention is not used and can be anything at all.; *; * 6. Image export into many popular file formats. Currently implemented :; * XPM, JPEG, PNG, GIF. Work is underway to implement support for TIFF,; * XCF, BMP, ICO.; *; * 7. Image quantization to arbitrary size colormap.; *; * 8. libAfterImage could be used without X window system, wh",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h:3895,Simpl,Simplified,3895,graf2d/asimage/src/libAfterImage/afterimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/afterimage.h,1,['Simpl'],['Simplified']
Usability,"rmat off; /// Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result.; ///; /// \param[in] everyNEvents Frequency at which the callback will be called by each thread, as a number of events processed; /// \param[in] callback A callable with signature `void(unsigned int, Value_t&)` where Value_t is the type of the value contained in this RResultPtr; /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls; ///; /// See `OnPartialResult` for a generic explanation of the callback mechanism.; /// Compared to `OnPartialResult`, this method has two major differences:; /// - all worker threads invoke the callback once every specified number of events. The event count is per-thread,; /// and callback invocation might happen concurrently (i.e. the callback must be thread-safe); /// - the callable must take an extra `unsigned int` parameter corresponding to a multi-thread ""processing slot"":; /// this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the; /// callback concurrently but always with different `slot` numbers.; /// - a value of 0 for everyNEvents indicates the callback must be executed once _per slot_.; ///; /// For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame; /// \code; /// auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; /// std::string progress;; /// std::mutex bar_mutex;; /// c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; /// std::lock_guard<std::mutex> lg(bar_mutex);; /// progress.push_back('#');; /// std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; /// });; /// std::cout << ""Analysis running..."" << std::endl;; /// *c; // trigger the event loop by accessing an action's result; /// std::cout << ""\nDone!"" << std::endl;; /// \endcode; // clang-format o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:1028,simpl,simplify,1028,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,1,['simpl'],['simplify']
Usability,"row; this avoids having special cases in the upsampling inner loops.; *; * The amount of context is fixed at one row group just because that's a; * convenient number for this controller to work with. The existing; * upsamplers really only need one sample row of context. An upsampler; * supporting arbitrary output rescaling might wish for more than one row; * group of context when shrinking the image; tough, we don't handle that.; * (This is justified by the assumption that downsizing will be handled mostly; * by adjusting the DCT_scaled_size values, so that the actual scale factor at; * the upsample step needn't be much less than one.); *; * To provide the desired context, we have to retain the last two row groups; * of one iMCU row while reading in the next iMCU row. (The last row group; * can't be processed until we have another row group for its below-context,; * and so we have to save the next-to-last group too for its above-context.); * We could do this most simply by copying data around in our buffer, but; * that'd be very slow. We can avoid copying any data by creating a rather; * strange pointer structure. Here's how it works. We allocate a workspace; * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number; * of row groups per iMCU row). We create two sets of redundant pointers to; * the workspace. Labeling the physical row groups 0 to M+1, the synthesized; * pointer lists look like this:; * M+1 M-1; * master pointer --> 0 master pointer --> 0; * 1 1; * ... ...; * M-3 M-3; * M-2 M; * M-1 M+1; * M M-2; * M+1 M-1; * 0 0; * We read alternate iMCU rows using each master pointer; thus the last two; * row groups of the previous iMCU row remain un-overwritten in the workspace.; * The pointer lists are set up so that the required context rows appear to; * be adjacent to the proper places when we pass the pointer lists to the; * upsampler.; *; * The above pictures describe the normal state of the pointer lists.; * At top and bottom of the image, we",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c:3334,simpl,simply,3334,graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libjpeg/jdmainct.c,1,['simpl'],['simply']
Usability,"rrow"" + index);; if(arrow) {; classListAdd(arrow, ""selected""); }; });; }. var getAbsoluteBoundingRect = function(element) {; const relative = element.getBoundingClientRect();; return {; left: relative.left + window.pageXOffset,; right: relative.right + window.pageXOffset,; top: relative.top + window.pageYOffset,; bottom: relative.bottom + window.pageYOffset,; height: relative.height,; width: relative.width; };; }. var drawArrow = function(index) {; // This function is based on the great answer from SO:; // https://stackoverflow.com/a/39575674/11582326; var start = document.querySelector(""#start"" + index);; var end = document.querySelector(""#end"" + index);; var arrow = document.querySelector(""#arrow"" + index);. var startRect = getAbsoluteBoundingRect(start);; var endRect = getAbsoluteBoundingRect(end);. // It is an arrow from a token to itself, no need to visualize it.; if (startRect.top == endRect.top &&; startRect.left == endRect.left); return;. // Each arrow is a very simple Bézier curve, with two nodes and; // two handles. So, we need to calculate four points in the window:; // * start node; var posStart = { x: 0, y: 0 };; // * end node; var posEnd = { x: 0, y: 0 };; // * handle for the start node; var startHandle = { x: 0, y: 0 };; // * handle for the end node; var endHandle = { x: 0, y: 0 };; // One can visualize it as follows:; //; // start handle; // /; // X""""""_.-""""""""X; // .' \; // / start node; // |; // |; // | end node; // \ /; // `->X; // X-'; // \; // end handle; //; // NOTE: (0, 0) is the top left corner of the window. // We have 3 similar, but still different scenarios to cover:; //; // 1. Two tokens on different lines.; // -xxx; // /; // \; // -> xxx; // In this situation, we draw arrow on the left curving to the left.; // 2. Two tokens on the same line, and the destination is on the right.; // ____; // / \; // / V; // xxx xxx; // In this situation, we draw arrow above curving upwards.; // 3. Two tokens on the same line, and the destination is on the le",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:1839,simpl,simple,1839,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['simpl'],['simple']
Usability,"rst analysis, etc.; // These files contain a visualization that allows inspecting the CFG and the; // state of the analysis at each point.; // Static assets (HTMLLogger.js, HTMLLogger.css) and SVG graphs etc are embedded; // so each output file is self-contained.; //; // VIEWS; //; // The timeline and function view are always shown. These allow selecting basic; // blocks, statements within them, and processing iterations (BBs are visited; // multiple times when e.g. loops are involved).; // These are written directly into the HTML body.; //; // There are also listings of particular basic blocks, and dumps of the state; // at particular analysis points (i.e. BB2 iteration 3 statement 2).; // These are only shown when the relevant BB/analysis point is *selected*.; //; // DATA AND TEMPLATES; //; // The HTML proper is mostly static.; // The analysis data is in a JSON object HTMLLoggerData which is embedded as; // a <script> in the <head>.; // This gets rendered into DOM by a simple template processor which substitutes; // the data into <template> tags embedded in the HTML. (see inflate() in JS).; //; // SELECTION; //; // This is the only real interactive mechanism.; //; // At any given time, there are several named selections, e.g.:; // bb: B2 (basic block 0 is selected); // elt: B2.4 (statement 4 is selected); // iter: B2:1 (iteration 1 of the basic block is selected); // hover: B3 (hovering over basic block 3); //; // The selection is updated by mouse events: hover by moving the mouse and; // others by clicking. Elements that are click targets generally have attributes; // (id or data-foo) that define what they should select.; // See watchSelection() in JS for the exact logic.; //; // When the ""bb"" selection is set to ""B2"":; // - sections <section data-selection=""bb""> get shown; // - templates under such sections get re-rendered; // - elements with class/id ""B2"" get class ""bb-select""; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp:1465,simpl,simple,1465,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp,1,['simpl'],['simple']
Usability,"rt ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the MCPseudoProbe to support the pseudo; // probe encoding for AutoFDO. Pseudo probes together with their inline context; // are encoded in a DFS recursive way in the .pseudoprobe sections. For each; // .pseudoprobe section, the encoded binary data consist of a single or mutiple; // function records each for one outlined function. A function record has the; // following format :; //; // FUNCTION BODY (one for each outlined function present in the text section); // GUID (uint64); // GUID of the function's source name which may be different from the; // actual binary linkage name. This GUID will be used to decode and; // generate a profile against the source function name.; // NPROBES (ULEB128); // Number of probes originating from this function.; // NUM_INLINED_FUNCTIONS (ULEB128); // Number of callees inlined into this function, aka number of; // first-level inlinees; // PROBE RECORDS; // A list of NPROBES entries. Each entry contains:; // INDEX (ULEB128); // TYPE (uint4); // 0 - block probe, 1 - indirect call, 2 - direct call; // ATTRIBUTE (uint3); // 1 - reserved; // 2 - Sentinel; // 4 - HasDiscriminator; // ADDRESS_TYPE (uint1); // 0 - code address for regular probes (for downwards compatibility); // - GUID of linkage name for sentinel probes; // 1 - address delta; // CODE_ADDRESS (uint64 or ULEB128); // code address or address delta, depending on ADDRESS_TYPE; // DISCRIMINATOR (ULEB128) if HasDiscriminator; // INLINED FUNCTION RECORDS; // A list of NUM_INLINED_FUNCTIONS entries describing each of the inlined; // callees. Each record contains:; // INLINE SITE; // ID of the callsite probe (ULEB128); // ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h:1011,GUID,GUID,1011,interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCPseudoProbe.h,1,['GUID'],['GUID']
Usability,"rt line breaks within cells by using \\v (vertical tab).; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c,\v--create \tCreates\vsomething."" },; * {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; *; * // results in; *; * -c, Creates; * --create something.; * -k, Destroys; * --kill something.; * @endcode; *; * You can mix lines that do not use \\t or \\v with those that do. The plain; * lines will not mess up the table layout. Alignment of the table columns will; * be maintained even across these interjections.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""-c, --create \tCreates something."" },; * {..., ""----------------------------------"" },; * {..., ""-k, --kill \tDestroys something."" }, ...; *; * // results in; *; * -c, --create Creates something.; * ----------------------------------; * -k, --kill Destroys something.; * @endcode; *; * You can have multiple tables within the same usage whose columns are; * aligned independently. Simply insert a dummy Descriptor with @c help==0.; *; * @code; * const option::Descriptor usage[] = {; * {..., ""Long options:"" },; * {..., ""--very-long-option \tDoes something long."" },; * {..., ""--ultra-super-mega-long-option \tTakes forever to complete."" },; * {..., 0 }, // ---------- table break -----------; * {..., ""Short options:"" },; * {..., ""-s \tShort."" },; * {..., ""-q \tQuick."" }, ...; *; * // results in; *; * Long options:; * --very-long-option Does something long.; * --ultra-super-mega-long-option Takes forever to complete.; * Short options:; * -s Short.; * -q Quick.; *; * // Without the table break it would be; *; * Long options:; * --very-long-option Does something long.; * --ultra-super-mega-long-option Takes forever to complete.; * Short options:; * -s Short.; * -q Quick.; * @endcode; *; * <b>Output methods:</b>; *; * Because TheLeanMeanC++Option parser is freestanding, you have to provide the means for; * output in the first argument(s) to printUsage(). Because printUsage() is implemented as; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:2274,Simpl,Simply,2274,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['Simpl'],['Simply']
Usability,"rt list(""list"");; TRFunctionImport asformula(""as.formula"");; TRFunctionImport nls(""nls"");; TRFunctionImport confint(""confint"");; TRFunctionImport summary(""summary"");; TRFunctionImport print(""print"");; TRFunctionImport plot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");. r<<""options(device='png')"";//enable plot in png file. ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);. TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;. //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(Label[""p1""]=1,Label[""p2""]=0.2));; print(summary(fit));. print(confint(fit));. devnew(""Fitting Regression"");; plot(xdata,ydata);. TRObject xgrid=seq(min(xdata),max(xdata),Label[""len""]=10);; lines(xgrid,predict(fit,xgrid),Label[""col""] = ""green"");; devoff();; }; \endcode. Output; \code; Formula: ydata ~ p1 * cos(p2 * xdata) + p2 * sin(p1 * xdata). Parameters:; Estimate Std. Error t value Pr(>|t|); p1 1.881851 0.027430 68.61 2.27e-12 ***; p2 0.700230 0.009153 76.51 9.50e-13 ***; ---; Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1. Residual standard error: 0.08202 on 8 degrees of freedom. Number of iterations to convergence: 7; Achieved convergence tolerance: 2.189e-06. Waiting for profiling to be done...; 2.5% 97.5%; p1 1.8206081 1.9442365; p2 0.6794193 0.7209843; \endcode; <h2>Users Guide </h2>; <a href=""https://oproject.org/pages/ROOT%20R%20Users%20Guide""> https://oproject.org/pages/ROOT R Users Guide</a><br>. @ingroup R; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRFunctionImport.h:2497,Guid,Guide,2497,bindings/r/inc/TRFunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRFunctionImport.h,2,['Guid'],['Guide']
Usability,"rtrait mode with a small margin at the bottom of the page.; - 2 : Landscape mode with a small margin at the bottom of the page.; - 4 : Portrait mode with a large margin at the bottom of the page.; - 5 : Landscape mode with a large margin at the bottom of the page.; The large margin is useful for some PostScript printers (very often; for the colour printers) as they need more space to grip the paper; for mechanical reasons. Note that some PostScript colour printers; can also use the so called special A4 format permitting the full; usage of the A4 area; in this case larger margins are not necessary; and Type=1 or 2 can be used.; - 3 : Encapsulated PostScript. This Type permits the generation of files; which can be included in other documents, for example in LaTeX files. ## Making several pictures in the same Postscript file: case 1. The following macro is an example illustrating how to open a Postscript; file and draw several pictures. The generation of a new Postscript page; is automatic when `TCanvas::Clear` is called by `object->Draw()`. ~~~ {.cpp}; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);. // select postscript output type; // type = 111 portrait ps; // type = 112 landscape ps; // type = 113 eps; Int_t type = 111;. // create a postscript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page. // draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a macro; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }; ~~~. ## Making several pictures in the same Postscript file: case 2. This example shows 2 pages. The canvas is divided.; `TPostScript::NewPage` must be called before starting a new; picture.`object->Draw` does not clear the canvas in this case; because we clear only the pads and not the main canvas.; Note that `c1->Update` must be called at the end of the first picture. ~~~ {.cpp}; {; TFile *f1 = new TFile(""hsi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPostScript.cxx:3950,Clear,Clear,3950,graf2d/postscript/src/TPostScript.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/postscript/src/TPostScript.cxx,1,['Clear'],['Clear']
Usability,"ry number of images. To facilitate this ASImageLayer structure; * has been created in order to specify parameters of each image; * participating in overlaying operation. Images need not to be exact; * same size. For each image its position on destination is specified; * via dst_x and dst_y data members. Each image maybe tiled and clipped; * to fit into rectangle specified by clip_x, clip_y, clip_width,; * clip_height ( in image coordinates - not destination ). If image is; * missing, then area specified by dst_x, dst_y, clip_width, clip_height; * will be filled with solid_color.; * Entire image will be tinted using tint parameter prior to overlaying.; * Bevel specified by bevel member will be drawn over image prior to; * overlaying. Specific overlay method has to be specified.; * merge_scanlines method is pointer to a function,; * that accepts 2 ASScanlines as arguments and performs overlaying of; * first one with the second one.; * There are 15 different merge_scanline methods implemented in; * libAfterImage, including alpha-blending, tinting, averaging,; * HSV and HSL colorspace operations, etc.; * NOTES; * ASImageLayer s could be organized into chains using next pointers.; * Since there could be a need to rearrange layers and maybe bypass some; * layers - we need to provide for flexibility, while at the same time; * allowing for simplicity of arrays. As the result next pointers could; * be used to link together continuous arrays of layer, like so :; * array1: [layer1(next==NULL)][layer2(next!=NULL)]; * ____________________________|; * V; * array2: [layer3(next==NULL)][layer4(next==NULL)][layer5(next!=NULL)]; * ________________________________________________|; * V; * array3: [layer6(next==NULL)][layer7(next==layer7)]; * ^______|; *; * While iterating throught such a list we check for two conditions -; * exceeding count of layers and layer pointing to self. When any of; * that is met - we stopping iteration.; * SEE ALSO; * merge_layers(); * blender.h; * SOURCE; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h:1587,simpl,simplicity,1587,graf2d/asimage/src/libAfterImage/asimage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/asimage.h,1,['simpl'],['simplicity']
Usability,"s A.; The method can be applied to a large number of problems,; where the measured distribution y is a linear superposition; of several Monte Carlo shapes. Beyond such a simple template fit,; TUnfoldSys has an adjustable regularisation term and also supports an; optional constraint on the total number of events.; Background sources can be specified, with a normalisation constant and; normalisation uncertainty. In addition, variants of the response; matrix may be specified, these are taken to determine systematic; uncertainties. <b>For most applications, it is better to use the derived class; TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds; features to TUnfoldSys, related to possible complex multidimensional; arrangements of bins. For innocent; users, the most notable improvement of TUnfoldDensity over TUnfoldSys are; the getter functions. For TUnfoldSys, histograms have to be booked by the; user and the getter functions fill the histogram bins. TUnfoldDensity; simply returns a new, already filled histogram.</b>. If you use this software, please consider the following citation. <b>S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]</b>. Detailed documentation and updates are available on; http://www.desy.de/~sschmitt. Brief recipy to use TUnfoldSys:; <ul>; <li>a matrix (truth,reconstructed) is given as a two-dimensional histogram; as argument to the constructor of TUnfold</li>; <li>a vector of measurements is given as one-dimensional histogram using; the SetInput() method</li>; <li>repeated calls to SubtractBackground() to specify background; sources</li>; <li>repeated calls to AddSysError() to specify systematic uncertainties; <li>The unfolding is performed; <ul>; <li>either once with a fixed parameter tau, method DoUnfold(tau)</li>; <li>or multiple times in a scan to determine the best chouce of tau,; method ScanLCurve()</li>; </ul>; <li>Unfolding results are retrieved using various GetXXX() methods; </ul>. Description of (systematic) uncertainties availab",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx:2229,simpl,simply,2229,hist/unfold/src/TUnfoldSys.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldSys.cxx,1,['simpl'],['simply']
Usability,"s defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each reduction variable.; /// \param IsNoWait A flag set if the reduction is marked as nowait.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:1920,usab,usable,1920,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['usab'],['usable']
Usability,"s from top to bottom. The following example illustrate how to use these options. Begin_Macro(source); {; auto c = new TCanvas();; c->Divide(2,1);; auto g = new TGraphErrors();; g->SetTitle(""Simple Graph"");. g->SetPoint(0,-4,-3);; g->SetPoint(1,1,1);; g->SetPoint(2,2,1);; g->SetPoint(3,3,4);; g->SetPoint(4,5,5);. g->SetPointError(0,1.,2.);; g->SetPointError(1,2,1);; g->SetPointError(2,2,3);; g->SetPointError(3,3,2);; g->SetPointError(4,4,5);. g->GetXaxis()->SetNdivisions(520);. g->SetMarkerStyle(21);; c->cd(1); gPad->SetGrid(1,1);; g->Draw(""APL"");. c->cd(2); gPad->SetGrid(1,1);; g->Draw(""A RX RY PL"");; }; End_Macro. \anchor GrP7; ### Graphs in logarithmic scale. Like histograms, graphs can be drawn in logarithmic scale along X and Y. When; a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy(); the points building the graph are converted into logarithmic scale. But **only** the; points not the lines connecting them which stay linear. This can be clearly seen; on the following example:. Begin_Macro(source); {; // A graph with 3 points; Double_t xmin = 750.;; Double_t xmax = 1000;; auto g = new TGraph(3);; g->SetPoint(0,xmin,0.1);; g->SetPoint(1,845,0.06504);; g->SetPoint(2,xmax,0.008);. // The same graph with n points; Int_t n = 10000;; Double_t dx = (xmax-xmin)/n;; Double_t x = xmin;; auto g2 = new TGraph();; for (Int_t i=0; i<n; i++) {; g2->SetPoint(i, x, g->Eval(x));; x = x + dx;; }. auto cv = new TCanvas(""cv"",""cv"",800,600);; cv->SetLogy();; cv->SetGridx();; cv->SetGridy();; g->Draw(""AL*"");. g2->SetMarkerColor(kRed);; g2->SetMarkerStyle(1);; g2->Draw(""P"");; }. End_Macro. \anchor GrP8; #### Highlight mode for graph. \since **ROOT version 6.15/01**. \image html hlGraph1.gif ""Highlight mode"". Highlight mode is implemented for `TGraph` (and for `TH1`) class. When; highlight mode is on, mouse movement over the point will be represented; graphically. Point will be highlighted as ""point circle"" (presented by; marker object). Moreover, any highli",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:18986,clear,clearly,18986,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['clear'],['clearly']
Usability,"s in LikelihoodJobs.; *; * The default number of workers is set using 'std::thread::hardware_concurrency()'.; * To change it, use 'Config::setDefaultNWorkers()' to set it to a different value; * before creation of a new JobManager instance. Note that it cannot be set to zero; * and also cannot be changed after JobManager has been instantiated.; *; * Use Config::getDefaultNWorkers() to access the current value.; *; * Under Config::LikelihoodJob, we find two members for the number of tasks to use to; * calculate the range of events and components in parallel, respectively:; * defaultNEventTasks and defaultNComponentTasks. Newly created LikelihoodJobs will; * then use these values at construction time. Note that (like with the number of; * workers) the number cannot be changed for an individual LikelihoodJob after it has; * been created.; *; * Both event- and component-based tasks by default are set to automatic mode using; * the automaticNEventTasks and automaticNComponentTasks constants (both under; * Config::LikelihoodJob as well). These are currently set to zero, but this could; * change. Automatic mode for events means that the number of tasks is set to the; * number of workers in the JobManager, with events divided equally over workers. For; * components, the automatic mode uses just 1 task for all components. These automatic; * modes may change in the future (for instance, we may switch them around).; *; * Under Config::Queue, we can set the desired queue type: FIFO or Priority. This; * setting is used when a JobManager is spun up, i.e. usually when the first Job; * starts. At this point, the Queue is also created according to the setting. The; * default is FIFO. When using a Priority Queue, the priority of tasks in a Job; * can be set using either setTaskPriorities or suggestTaskOrder. If no priorities; * are set, the Priority queue simply assumes equal priority for all tasks. The; * resulting order then depends on the implementation of std::priority_queue.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Config.cxx:2347,simpl,simply,2347,roofit/multiprocess/src/Config.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/Config.cxx,1,['simpl'],['simply']
Usability,"s long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in dire",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:1793,undo,undo,1793,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['undo'],['undo']
Usability,"s ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel() API. Unlike \a ilist_node::isKnownSentinel(),; /// which is only appropriate for assertions, \a ilist_node::isSentinel() is; /// appropriate for real logi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:1051,clear,clear,1051,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,2,['clear'],"['clear', 'clearAndDispose']"
Usability,"s possible; to position further geometrical structures inside or to divide them further more; (see TGeoVolume::Divide()). The primitive shapes supported by the package are basically the GEANT3; shapes (see class TGeoShape), arbitrary wedges with eight vertices on two parallel; planes. All basic primitives inherits from class TGeoBBox since the bounding box; of a solid is essential for the tracking algorithms. They also implement the; virtual methods defined in the virtual class TGeoShape (point and segment; classification). User-defined primitives can be directly plugged into the modeler; provided that they override these methods. Composite shapes will be soon supported; by the modeler. In order to build a TGeoCompositeShape, one will have to define; first the primitive components. The object that handle boolean; operations among components is called TGeoBoolCombinator and it has to be; constructed providing a string boolean expression between the components names. ## Example for building a simple geometry. Begin_Macro(source); ../../../tutorials/geom/rootgeom.C; End_Macro. ## TGeoManager - the manager class for the geometry package. TGeoManager class is embedding all the API needed for building and tracking; a geometry. It defines a global pointer (gGeoManager) in order to be fully; accessible from external code. The mechanism of handling multiple geometries; at the same time will be soon implemented. TGeoManager is the owner of all geometry objects defined in a session,; therefore users must not try to control their deletion. It contains lists of; media, materials, transformations, shapes and volumes. Logical nodes (positioned; volumes) are created and destroyed by the TGeoVolume class. Physical; nodes and their global transformations are subjected to a caching mechanism; due to the sometimes very large memory requirements of logical graph expansion.; The caching mechanism is triggered by the total number of physical instances; of volumes and the cache manager is a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx:5054,simpl,simple,5054,geom/geom/src/TGeoManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoManager.cxx,1,['simpl'],['simple']
Usability,"s.; ""Empty bins, weights=1"" sets ON/OFF option 'WW' - all weights; equal to 1, including empty bins, error bars ignored.; ""Use range"" sets ON/OFF option 'R' - fit only data within the; specified function range with the slider.; ""Improve fit results"" sets ON/OFF option 'M' - after minimum is; found, search for a new one.; ""Add to list"" sets On/Off option '+'- add function to the list; without deleting the previous. Draw options:; ""SAME"" sets On/Off function drawing on the same pad.; ""No drawing"" sets On/Off option '0'- do not draw function graphics.; ""Do not store/draw"" sets On/Off option 'N'- do not store the; function, do not draw it. Sliders settings are used if option 'R' - use range is active.; Users can change min/max values by pressing the left mouse button; near to the left/right slider edges. It is possible o change both; values simultaneously by pressing the left mouse button near to its; center and moving it to a new desire position. ""Minimization"" Tab. ""Library"" group allows you to use Minuit, Minuit2 or Fumili; minimization packages for your fit.; ""Minuit"" - the popular Minuit minimization package.; ""Minuit2"" - a new object-oriented implementation of Minuit in C++.; ""Fumili"" - the popular Fumili minimization package. ""Method"" group has currently restricted functionality.; ""MIGRAD"" method is available for Minuit and Minuit2; ""FUMILI"" method is available for Fumili and Minuit2; ""SIMPLEX"" method is disabled (will come with the new fitter design). ""Minimization Settings' group allows users to set values for:; ""Error definition"" - between 0.0 and 100.0 (default is 1.0).; ""Maximum tolerance"" - the fit relative precision in use.; ""Maximum number of iterations"" - default is 5000. Print options:; ""Default"" - between Verbose and Quiet.; ""Verbose"" - prints results after each iteration.; ""Quiet"" - no fit information is printed. Fit button - performs a fit.; Reset - resets all GUI elements and related fit settings to the; default ones.; Close - closes this window. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:4046,SIMPL,SIMPLEX,4046,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['SIMPL'],['SIMPLEX']
Usability,"s:; ///; /// - nTrees number of trees in the forest to be created; /// - BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..).; /// Known:; /// - AdaBoost; /// - AdaBoostR2 (Adaboost for regression); /// - Bagging; /// - GradBoost; /// - AdaBoostBeta the boosting parameter, beta, for AdaBoost; /// - UseRandomisedTrees choose at each node splitting a random set of variables; /// - UseNvars use UseNvars variables in randomised trees; /// - UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; /// - SeparationType the separation criterion applied in the node splitting.; /// Known:; /// - GiniIndex; /// - MisClassificationError; /// - CrossEntropy; /// - SDivSqrtSPlusB; /// - MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); /// - nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then; /// step size is determined by the events); /// - UseFisherCuts: use multivariate splits using the Fisher criterion; /// - UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B; /// (from the training) in the leaf node; /// - NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine; /// misclassification error rate); /// - PruneMethod The Pruning method.; /// Known:; /// - NoPruning // switch off pruning completely; /// - ExpectedError; /// - CostComplexity; /// - PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; /// - PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); /// - NegWeightTreatment; /// - IgnoreNegWeightsInTraining Ignore negative weight events in the training.; /// - DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; /// - PairNegWeightsGlobal Pair ev. with neg. and pos. weights in trai",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:1283,simpl,simply,1283,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['simpl'],['simply']
Usability,"s:; //; // 1. Classification: Each operand is mapped to the unique set which (a); // contains it, and (b) is the largest such subset for which a single; // instruction could match all members.; //; // For register classes, we can generate these subgroups automatically. For; // arbitrary operands, we expect the user to define the classes and their; // relations to one another (for example, 8-bit signed immediates as a; // subset of 32-bit immediates).; //; // By partitioning the operands in this way, we guarantee that for any; // tuple of classes, any single instruction must match either all or none; // of the sets of operands which could classify to that tuple.; //; // In addition, the subset relation amongst classes induces a partial order; // on such tuples, which we use to resolve ambiguities.; //; // 2. The input can now be treated as a tuple of classes (static tokens are; // simple singleton sets). Each such tuple should generally map to a single; // instruction (we currently ignore cases where this isn't true, whee!!!),; // which we can emit a simple matcher for.; //; // Custom Operand Parsing; // ----------------------; //; // Some targets need a custom way to parse operands, some specific instructions; // can contain arguments that can represent processor flags and other kinds of; // identifiers that need to be mapped to specific values in the final encoded; // instructions. The target specific custom operand parsing works in the; // following way:; //; // 1. A operand match table is built, each entry contains a mnemonic, an; // operand class, a mask for all operand positions for that same; // class/mnemonic and target features to be checked while trying to match.; //; // 2. The operand matcher will try every possible entry with the same; // mnemonic and will check if the target feature for this mnemonic also; // matches. After that, if the operand to be matched has its index; // present in the mask, a successful match occurs. Otherwise, fallback; // to the r",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:3725,simpl,simple,3725,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['simpl'],['simple']
Usability,"scan; // Version 8, replace all TMatrixSparse matrix operations by private code; // Version 7, fix problem with TMatrixDSparse,TMatrixD multiplication; // Version 6, replace class XY by std::pair; // Version 5, replace run-time dynamic arrays by new and delete[]; // Version 4, fix new bug from V3 with initial regularisation condition; // Version 3, fix bug with initial regularisation condition; // Version 2, with improved ScanLcurve() algorithm; // Version 1, added ScanLcurve() method; // Version 0, stable version of basic unfolding algorithm; /** \class TUnfold; An algorithm to unfold distributions from detector to truth level. TUnfold is used to decompose a measurement y into several sources x,; given the measurement uncertainties and a matrix of migrations A.; The method can be applied to a large number of problems,; where the measured distribution y is a linear superposition; of several Monte Carlo shapes. Beyond such a simple template fit,; TUnfold has an adjustable regularisation term and also supports an; optional constraint on the total number of events. <b>For most applications, it is better to use the derived class; TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various; features to TUnfold, such as:; background subtraction, propagation of systematic uncertainties,; complex multidimensional arrangements of the bins. For innocent; users, the most notable improvement of TUnfoldDensity over TUnfold are; the getter functions. For TUnfold, histograms have to be booked by the; user and the getter functions fill the histogram bins. TUnfoldDensity; simply returns a new, already filled histogram.</b>. If you use this software, please consider the following citation; <br/>; <b>S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]</b>; <br/>; Detailed documentation and updates are available on; http://www.desy.de/~sschmitt. Brief recipy to use TUnfold:; <ul>; <li>a matrix (truth,reconstructed) is given as a two-dimensional histogram; as argument to the constructo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:2388,simpl,simple,2388,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['simpl'],['simple']
Usability,"splay mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter011.jpg; ///; /// Light modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter012.jpg; ///; /// Light modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter013.jpg; ///; /// Light modes group, display mode = surface, 64 x 64 channels.; /// \image html spectrumpainter014.jpg; ///; /// Light modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter015.jpg; ///; /// Height modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter016.jpg; ///; /// Height modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter017.jpg; ///; /// Height modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter018.jpg; ///; /// Height modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter019.jpg; ///; /// Height modes group,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:3325,Simpl,Simple,3325,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"ss, we can provide it to the volume; constructor :. ~~~ {.cpp}; TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"", tube, ptrCOPPER);; ~~~. Do not bother to delete neither the media, shapes or volumes that you have; created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look inside TGeoManager::MakeTube() method, we would; have been able to create our wire with a single line :. ~~~ {.cpp}; TGeoVolume *wire_co = gGeoManager->MakeTube(""WIRE_CO"", ptrCOPPER, 0, 0.01, 1);; ~~~. The same applies for all primitive shapes, for which there can be found; corresponding MakeSHAPE() methods. Their usage is much more convenient unless; a shape has to be shared between more volumes. Let's make now an aluminium wire; having the same shape, supposing that we have created the copper wire with the; line above :. ~~~ {.cpp}; TGeoVolume *wire_al = new TGeoVolume(""WIRE_AL"", wire_co->GetShape(), ptrAL);; ~~~. Now that we have learned how to create elementary volumes, let's see how we; can create a geometrical hierarchy. ### Positioning volumes. When creating a volume one does not specify if this will contain or not other; volumes. Adding daughters to a volume implies creating those and adding them; one by one to the list of daughters. Since the volume has to know the position; of all its daughters, we will have to supply at the same time a geometrical; transformation with respect to its local reference frame for each of them.; The objects referencing a volume and a transformation are called NODES and; their creation is fully handled by the modeler. They represent the link; elements in the hierarchy of volumes. Nodes are unique and distinct geometrical; objects ONLY from their container point of view. Since volumes can be replicated; in the geometry, the same node may be found on different branches. \image html geom_t_example.png width=600px. An important observation is that volume objects are owned by the TGeoManager; class. This stores a list o",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:4604,learn,learned,4604,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['learn'],['learned']
Usability,"ssible but; highly not recommended. #### The Structure of Composite Shapes. A composite shape can always be looked as the result of a Boolean; operation between only two shape components. All information identifying; these two components as well as their positions with respect to the; frame of the composite is represented by an object called Boolean node.; A composite shape has a pointer to such a Boolean node. Since the shape; components may also be composites, they will also contain binary Boolean; nodes branching out other two shapes in the hierarchy. Any such branch; ends-up when the final leaves are no longer composite shapes, but basic; primitives. The figure shows the composite shapes structure. \image html geom_composite_shape001.png ""The composite shapes structure"" width=600px. Suppose that A, B, C and D represent basic shapes, we will illustrate; how the internal representation of few combinations look like. We do; this only for understanding how to create them in a proper way, since; the user interface for this purpose is in fact very simple. We will; ignore for the time being the positioning of components. The definition; of a composite shape takes an expression where the identifiers are shape; names. The expression is parsed and decomposed in 2 sub-expressions and; the top-level Boolean operator. 1. Union: `A+B+C`. Just to illustrate the Boolean expression parsing and the composite; shape structure, let's take a simple example. We will describe the union; of A, B and C. Both union operators are at the same level. Since:. `A+B+C = (A+B)+C = A+(B+C)`. The first` (+)` is taken as separator, hence the expression split in:; `A` and `(B+C)`. A Boolean node of type **`TGeoUnion`**`(""A"",""B+C"")` is; created. This tries to replace the 2 expressions by actual pointers to; corresponding shapes. The first expression (A) contains no operators; therefore is interpreted as representing a shape. The shape named ""A"" is; searched into the list of shapes handled by the man",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCompositeShape.cxx:2591,simpl,simple,2591,geom/geom/src/TGeoCompositeShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoCompositeShape.cxx,1,['simpl'],['simple']
Usability,"ssion is available (and; /// thus a DebugVariable's location is the corresponding register), while; /// ""False"" signifies that the expression is unavailable. ""Unknown""s never; /// survive to the end of the analysis (see below).; ///; /// Formally, all DebugVariable locations that are live-out of a block are; /// initialized to \top. A blocks live-in values take the meet of the lattice; /// value for every predecessors live-outs, except for the entry block, where; /// all live-ins are \bot. The usual dataflow propagation occurs: the transfer; /// function for a block assigns an expression for a DebugVariable to be ""True""; /// if a DBG_VALUE in the block specifies it; ""False"" if the location is; /// clobbered; or the live-in value if it is unaffected by the block. We; /// visit each block in reverse post order until a fixedpoint is reached. The; /// solution produced is maximal.; ///; /// Intuitively, we start by assuming that every expression / variable location; /// is at least ""True"", and then propagate ""False"" from the entry block and any; /// clobbers until there are no more changes to make. This gives us an accurate; /// solution because all incorrect locations will have a ""False"" propagated into; /// them. It also gives us a solution that copes well with loops by assuming; /// that variable locations are live-through every loop, and then removing those; /// that are not through dataflow.; ///; /// Within LiveDebugValues: each variable location is represented by a; /// VarLoc object that identifies the source variable, the set of; /// machine-locations that currently describe it (a single location for; /// DBG_VALUE or multiple for DBG_VALUE_LIST), and the DBG_VALUE inst that; /// specifies the location. Each VarLoc is indexed in the (function-scope) \p; /// VarLocMap, giving each VarLoc a set of unique indexes, each of which; /// corresponds to one of the VarLoc's machine-locations and can be used to; /// lookup the VarLoc in the VarLocMap. Rather than operate ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:3793,Intuit,Intuitively,3793,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['Intuit'],['Intuitively']
Usability,"ssure, the best load latencies are hidden; //; // Moreover some specifities (like the fact a lot of instructions in the shader; // have few dependencies) makes the generic scheduler have some unpredictable; // behaviours. For example when register pressure becomes high, it can either; // manage to prevent register pressure from going too high, or it can; // increase register pressure even more than if it hadn't taken register; // pressure into account.; //; // Also some other bad behaviours are generated, like loading at the beginning; // of the shader a constant in VGPR you won't need until the end of the shader.; //; // The scheduling problem for SI can distinguish three main parts:; // . Hiding high latencies (texture sampling, etc); // . Hiding low latencies (SGPR constant loading, etc); // . Keeping register usage low for better latency hiding and general; // performance; //; // Some other things can also affect performance, but are hard to predict; // (cache usage, the fact the HW can issue several instructions from different; // wavefronts if different types, etc); //; // This scheduler tries to solve the scheduling problem by dividing it into; // simpler sub-problems. It divides the instructions into blocks, schedules; // locally inside the blocks where it takes care of low latencies, and then; // chooses the order of the blocks by taking care of high latencies.; // Dividing the instructions into blocks helps control keeping register; // usage low.; //; // First the instructions are put into blocks.; // We want the blocks help control register usage and hide high latencies; // later. To help control register usage, we typically want all local; // computations, when for example you create a result that can be consumed; // right away, to be contained in a block. Block inputs and outputs would; // typically be important results that are needed in several locations of; // the shader. Since we do want blocks to help hide high latencies, we want; // the instruction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp:1764,simpl,simpler,1764,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineScheduler.cpp,1,['simpl'],['simpler']
Usability,"st 2 : Get session logs ................................. OK * * //; // * Test 3 : Simple random number generation .................. OK * * //; // * Test 4 : Dataset handling with H1 files ................... OK * * //; // * Test 5 : H1: chain processing ............................. OK * * //; // * Test 6 : H1: file collection processing ................... OK * * //; // * Test 7 : H1: file collection, TPacketizerAdaptive ......... OK * * //; // * Test 8 : H1: by-name processing ........................... OK * * //; // * Test 9 : H1: multi dataset processing ..................... OK * * //; // * Test 10 : H1: multi dataset and entry list ................. OK * * //; // * Test 11 : Package management with 'event' .................. OK * * //; // * Test 12 : Package argument passing ......................... OK * * //; // * Test 13 : Simple 'event' generation ........................ OK * * //; // * Test 14 : Input data propagation ........................... OK * * //; // * Test 15 : H1, Simple: async mode :.......................... OK * * //; // * Test 16 : Admin functionality .............................. OK * * //; // * Test 17 : Dynamic sub-mergers functionality ................ OK * * //; // * Test 18 : Event range processing ........................... OK * * //; // * Test 19 : Event range, TPacketizerAdaptive ................. OK * * //; // * Test 20 : File-resident output: merge ...................... OK * * //; // * Test 21 : File-resident output: merge w/ submergers ........ OK * * //; // * Test 22 : File-resident output: create dataset ............. OK * * //; // * Test 23 : File-resident output: multi trees ................ OK * * //; // * Test 24 : TTree friends (and TPacketizerFile) .............. OK * * //; // * Test 25 : TTree friends, same file ......................... OK * * //; // * Test 26 : Handling output via file ......................... OK * * //; // * Test 27 : Simple: selector by object ....................... OK * * //; // * Test 28 ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:2784,Simpl,Simple,2784,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Simpl'],['Simple']
Usability,"t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create an interface; TGSimpleTableInterface *iface = new TGSimpleTableInterface(data, 6, 5);. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. //Update data; data[5][1] = 3.01;; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; ~~~. It is also possible to visualise data from a tree. A simple macro; showing the use of a TTreeTableInterface follows. ~~~; {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");. // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; ~~~; */; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTable.cxx:2317,simpl,simple,2317,gui/gui/src/TGTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTable.cxx,1,['simpl'],['simple']
Usability,"t off; /// Register a callback that RDataFrame will execute in each worker thread concurrently on that thread's partial result.; ///; /// \param[in] everyNEvents Frequency at which the callback will be called by each thread, as a number of events processed; /// \param[in] callback A callable with signature `void(unsigned int, Value_t&)` where Value_t is the type of the value contained in this RResultPtr; /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls; ///; /// See `OnPartialResult` for a generic explanation of the callback mechanism.; /// Compared to `OnPartialResult`, this method has two major differences:; /// - all worker threads invoke the callback once every specified number of events. The event count is per-thread,; /// and callback invocation might happen concurrently (i.e. the callback must be thread-safe); /// - the callable must take an extra `unsigned int` parameter corresponding to a multi-thread ""processing slot"":; /// this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the; /// callback concurrently but always with different `slot` numbers.; /// - a value of 0 for everyNEvents indicates the callback must be executed once _per slot_.; ///; /// For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame; /// \code; /// auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; /// std::string progress;; /// std::mutex bar_mutex;; /// c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; /// std::lock_guard<std::mutex> lg(bar_mutex);; /// progress.push_back('#');; /// std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; /// });; /// std::cout << ""Analysis running..."" << std::endl;; /// *c; // trigger the event loop by accessing an action's result; /// std::cout << ""\nDone!"" << std::endl;; /// \endcode; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx:1343,progress bar,progress bar,1343,tree/dataframe/inc/ROOT/RResultPtr.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RResultPtr.hxx,1,['progress bar'],['progress bar']
Usability,"taFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; ~~~. The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`. \anchor RDFCollections; ### Storing RDataFrame objects in collections. ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:. ~~~{.cpp}; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; ~~~. \anchor callbacks; ### Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; drawing a partially-filled histogram every time a certain number of new entries is processed, or; displaying a progress bar while the event loop runs. For example one can draw an up-to-date version of a result histogram every 100 entries like this:; ~~~{.cpp}; auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this final `Draw` is executed after the event loop is finished; h->Draw();; ~~~. Callbacks are registered to a ROOT::RDF::RResultPtr and must be callables that takes a reference to the result type as argument; and return nothing. RDataFrame will invoke registered callbacks passing partial action results as arguments to them; (e.g. a histogram filled with a part of the selected events). Read more on ROOT::RDF::RResultPtr::OnPartialResult() and ROOT::RDF::RResultPtr::OnPartialResultSlot(). \anchor default-branches; ### Default column lists; When constructing an RDataFrame object, it is possible to specify a **defaul",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:62263,progress bar,progress bar,62263,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['progress bar'],['progress bar']
Usability,"tage 1: Types that satisfies isFirstClassType conditions are always; /// greater then others.; /// Stage 2: Vector is greater then non-vector.; /// If both types are vectors, then vector with greater bitwidth is; /// greater.; /// If both types are vectors with the same bitwidth, then types; /// are bitcastable, and we can skip other stages, and go to contents; /// comparison.; /// Stage 3: Pointer types are greater than non-pointers. If both types are; /// pointers of the same address space - go to contents comparison.; /// Different address spaces: pointer with greater address space is; /// greater.; /// Stage 4: Types are neither vectors, nor pointers. And they differ.; /// We don't know how to bitcast them. So, we better don't do it,; /// and return types comparison result (so it determines the; /// relationship among constants we don't know how to bitcast).; ///; /// Just for clearance, let's see how the set of constants could look; /// on single dimension axis:; ///; /// [NFCT], [FCT, ""others""], [FCT, pointers], [FCT, vectors]; /// Where: NFCT - Not a FirstClassType; /// FCT - FirstClassTyp:; ///; /// 2. Compare raw contents.; /// It ignores types on this stage and only compares bits from L and R.; /// Returns 0, if L and R has equivalent contents.; /// -1 or 1 if values are different.; /// Pretty trivial:; /// 2.1. If contents are numbers, compare numbers.; /// Ints with greater bitwidth are greater. Ints with same bitwidths; /// compared by their contents.; /// 2.2. ""And so on"". Just to avoid discrepancies with comments; /// perhaps it would be better to read the implementation itself.; /// 3. And again about overall picture. Let's look back at how the ordered set; /// of constants will look like:; /// [NFCT], [FCT, ""others""], [FCT, pointers], [FCT, vectors]; ///; /// Now look, what could be inside [FCT, ""others""], for example:; /// [FCT, ""others""] =; /// [; /// [double 0.1], [double 1.23],; /// [i32 1], [i32 2],; /// { double 1.0 }, ; StructTyID, NumElements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:1564,clear,clearance,1564,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,1,['clear'],['clearance']
Usability,"tain code. Nevertheless, the time penalty does not; exceed a factor 2. ### The MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. \image html mlp.png. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with <I>f</I> being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. 1. A linear combination of sigmoids can approximate any; continuous function.; 2. Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. ### Learning methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, divided by two, of the error on each individual output; neuron.; In all methods implemented, one needs to compute; the first derivative of that error with respect to the weights.; Exploiting the well-known properties of the derivative, especially the; derivative of compound functions, one can write:. - for a neuron: product of the local derivative with the; weighted sum on the outputs of the derivatives.; - for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented. #### Stochastic minimization:. is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to the formula:; \f$w_{ij}(t+1) = w_{ij}(t) + \Delta w_",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:3775,learn,learning,3775,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['learn'],['learning']
Usability,"tandard C++ interfaces for hashing; // arbitrary data and building hash functions for user-defined types. This; // interface was originally proposed in N3333[1] and is currently under review; // for inclusion in a future TR and/or standard.; //; // The primary interfaces provide are comprised of one type and three functions:; //; // -- 'hash_code' class is an opaque type representing the hash code for some; // data. It is the intended product of hashing, and can be used to implement; // hash tables, checksumming, and other common uses of hashes. It is not an; // integer type (although it can be converted to one) because it is risky; // to assume much about the internals of a hash_code. In particular, each; // execution of the program has a high probability of producing a different; // hash_code for a given input. Thus their values are not stable to save or; // persist, and should only be used during the execution for the; // construction of hashing datastructures.; //; // -- 'hash_value' is a function designed to be overloaded for each; // user-defined type which wishes to be used within a hashing context. It; // should be overloaded within the user-defined type's namespace and found; // via ADL. Overloads for primitive types are provided by this library.; //; // -- 'hash_combine' and 'hash_combine_range' are functions designed to aid; // programmers in easily and intuitively combining a set of data into; // a single hash_code for their object. They should only logically be used; // within the implementation of a 'hash_value' routine or similar context.; //; // Note that 'hash_combine_range' contains very special logic for hashing; // a contiguous array of integers or pointers. This logic is *extremely* fast,; // on a modern Intel ""Gainestown"" Xeon (Nehalem uarch) @2.2 GHz, these were; // benchmarked at over 6.5 GiB/s for large keys, and <20 cycles/hash for keys; // under 32-bytes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:1811,intuit,intuitively,1811,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,1,['intuit'],['intuitively']
Usability,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2524,simpl,simply,2524,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['simpl'],['simply']
Usability,"tefan Schmitt; // DESY, 13/10/08; // Version 17.9, add new methods GetDF(), GetSURE(), ScanSURE(), GetSqrtEvEmatrix(); //; // History:; // Version 17.8, add new method GetDXDY() for histograms; // Version 17.7, change finite() -> TMath::Finite(); // Version 17.6, updated doxygen-style comments, add one argument for scanLCurve; // Version 17.5, fix memory leak with fVyyInv, bugs in GetInputInverseEmatrix(), GetInput(), bug in MultiplyMSparseMSparseTranspVector; // Version 17.4, in parallel to changes in TUnfoldBinning; // Version 17.3, in parallel to changes in TUnfoldBinning; // Version 17.2, bug fix with GetProbabilityMatrix; // Version 17.1, bug fixes in GetFoldedOutput, GetOutput; // Version 17.0, option to specify an error matrix with SetInput(), new ScanRho() method; // Version 16.2, in parallel to bug-fix in TUnfoldSys; // Version 16.1, fix bug with error matrix in case kEConstraintArea is used; // Version 16.0, fix calculation of global correlations, improved error messages; // Version 15, simplified L-curve scan, new tau definition, new error calc., area preservation; // Version 14, with changes in TUnfoldSys.cxx; // Version 13, new methods for derived classes and small bug fix; // Version 12, report singular matrices; // Version 11, reduce the amount of printout; // Version 10, more correct definition of the L curve, update references; // Version 9, faster matrix inversion and skip edge points for L-curve scan; // Version 8, replace all TMatrixSparse matrix operations by private code; // Version 7, fix problem with TMatrixDSparse,TMatrixD multiplication; // Version 6, replace class XY by std::pair; // Version 5, replace run-time dynamic arrays by new and delete[]; // Version 4, fix new bug from V3 with initial regularisation condition; // Version 3, fix bug with initial regularisation condition; // Version 2, with improved ScanLcurve() algorithm; // Version 1, added ScanLcurve() method; // Version 0, stable version of basic unfolding algorithm; /** \class TU",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:1024,simpl,simplified,1024,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['simpl'],['simplified']
Usability,"ter offers a large set of options/attributes. In the; /// ""option"" parameter each of them can be set to specific values via; /// ""operators"" in the option itself. for instance on can do:; ///; /// h2->Draw(""SPEC a(30,30,0)"");; ///; /// to draw h2 with TSpectrum2Painter using all the default attributes except; /// the viewing angles. The operators' names are case insensitive (one can use; /// ""a"" or ""A""). Operators parameters are separated by "","". The operators can; /// be put is any order in the option. Operators must be separated by "" "".; /// No "" "" characters should be put in an operator. This help page describes; /// all the available operators.; ///; /// The way ""h2"" will be painted is controlled with 2 parameters the ""Display; /// modes groups"" and the ""Display Modes"".; ///; /// ""Display modes groups"" can take the following values:; ///; /// - 0 = Simple - it covers simple display modes using one color only; /// - 1 = Light - in this group the shading is carried out according to; /// the position of the fictive light source; /// - 2 = Height - in this group the shading is carried out according to; /// the channel contents; /// - 3 = LightHeight - combination of two previous shading algorithms. One; /// can control the weight between both algorithms.; ///; /// ""Display modes"" can take the following values:; ///; /// - 1 = Points.; /// - 2 = Grid.; /// - 3 = Contours.; /// - 4 = Bars.; /// - 5 = LinesX.; /// - 6 = LinesY.; /// - 7 = BarsX.; /// - 8 = BarsY.; /// - 9 = Needles.; /// - 10 = Surface.; /// - 11 = Triangles.; ///; /// Using this function these parameters can be set using the ""dm"" operator; /// in the option. Example:; ///; /// h2->Draw(""SPEC dm(1,2)"");; ///; /// will paint the 2D histogram h2 using the ""Light Display mode group"" and; /// the ""Grid Display mode"". The following table summarises all the possible; /// combinations of the ""Display modes groups"" and the ""Display modes"".; ///; /// | | Simple | Light | Height | Light-Height |; /// |-----------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:1080,Simpl,Simple,1080,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"ter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell i, j.; \f[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \f]; The bin content is always the mean of the Z values, but errors change depending on options:; \f[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weighted mean when combining measurements with variances of } w. \\; \end{cases}; \end{align}; \f]. In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); the bin error e(I,J) is computed from the average of the s(I,J) for all cells; if the static function TProfile2D::Approximate has been called.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. But note that this approximation is not the default behaviour. ### Creating and drawing a 2D profile; ~~~~{.cpp}; {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof2d = new TProfile2D(""hprof2d"",""Profile of pz versus px and py"",40,-4,4,40,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof2d->Fill(px,py,pz,1);; }; hprof2d->Draw();; }; ~~~~; */; ////////////////////////////////////////////////////////////////////////////////; /// Default constructor for Profile2D histograms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:1962,simpl,simple,1962,hist/hist/src/TProfile2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx,1,['simpl'],['simple']
Usability,"that contain branches or switches on loop-; /// invariant conditions to have multiple loops. For example, it turns the left; /// into the right code:; ///; /// for (...) if (lic); /// A for (...); /// if (lic) A; B; C; /// B else; /// C for (...); /// A; C; ///; /// This can increase the size of the code exponentially (doubling it every time; /// a loop is unswitched) so we only unswitch if the resultant code will be; /// smaller than a threshold.; ///; /// This pass expects LICM to be run before it to hoist invariant conditions out; /// of the loop, to make the unswitching opportunity obvious.; ///; /// There is a taxonomy of unswitching that we use to classify different forms; /// of this transformaiton:; ///; /// - Trival unswitching: this is when the condition can be unswitched without; /// cloning any code from inside the loop. A non-trivial unswitch requires; /// code duplication.; ///; /// - Full unswitching: this is when the branch or switch is completely moved; /// from inside the loop to outside the loop. Partial unswitching removes the; /// branch from the clone of the loop but must leave a (somewhat simplified); /// branch in the original loop. While theoretically partial unswitching can; /// be done for switches, the requirements are extreme - we need the loop; /// invariant input to the switch to be sufficient to collapse to a single; /// successor in each clone.; ///; /// This pass always does trivial, full unswitching for both branches and; /// switches. For branches, it also always does trivial, partial unswitching.; ///; /// If enabled (via the constructor's `NonTrivial` parameter), this pass will; /// additionally do non-trivial, full unswitching for branches and switches, and; /// will do non-trivial, partial unswitching for branches.; ///; /// Because partial unswitching of switches is extremely unlikely to be possible; /// in practice and significantly complicates the implementation, this pass does; /// not currently implement that in any mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h:1160,simpl,simplified,1160,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h,1,['simpl'],['simplified']
Usability,"that specifying ""AS_DEFAULT"" as a global default is equivalent; * to specifying ""NEVER"", however when ""AS_DEFAULT"" is used for specific chunks; * it simply resets the behavior to the libpng default.; *; * INTERACTION WITH USER CHUNK CALLBACKS:; * The per-chunk handling is always used when there is a png_user_chunk_ptr; * callback and the callback returns 0; the chunk is then always stored *unless*; * it is critical and the per-chunk setting is other than ALWAYS. Notice that; * the global default is *not* used in this case. (In effect the per-chunk; * value is incremented to at least IF_SAFE.); *; * IMPORTANT NOTE: this behavior will change in libpng 1.7 - the global and; * per-chunk defaults will be honored. If you want to preserve the current; * behavior when your callback returns 0 you must set PNG_HANDLE_CHUNK_IF_SAFE; * as the default - if you don't do this libpng 1.6 will issue a warning.; *; * If you want unhandled unknown chunks to be discarded in libpng 1.6 and; * earlier simply return '1' (handled).; *; * PNG_HANDLE_AS_UNKNOWN_SUPPORTED:; * If this is *not* set known chunks will always be handled by libpng and; * will never be stored in the unknown chunk list. Known chunks listed to; * png_set_keep_unknown_chunks will have no effect. If it is set then known; * chunks listed with a keep other than AS_DEFAULT will *never* be processed; * by libpng, in addition critical chunks must either be processed by the; * callback or saved.; *; * The IHDR and IEND chunks must not be listed. Because this turns off the; * default handling for chunks that would otherwise be recognized the; * behavior of libpng transformations may well become incorrect!; *; * WRITE:; * When writing chunks the options only apply to the chunks specified by; * png_set_unknown_chunks (below), libpng will *always* write known chunks; * required by png_set_ calls and will always write the core critical chunks; * (as required for PLTE).; *; * Each chunk in the png_set_unknown_chunks list is looked u",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h:2191,simpl,simply,2191,graf2d/asimage/src/libAfterImage/libpng/png.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/libpng/png.h,1,['simpl'],['simply']
Usability,"the base for all the decompositions methods in the; linear algebra package .; It or its derived classes have installed the methods to solve; equations,invert matrices and calculate determinants while monitoring; the accuracy. Each derived class has always the following methods available:. #### Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input ar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:1501,simpl,simple,1501,math/matrix/src/TDecompBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx,1,['simpl'],['simple']
Usability,"the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn histogram by given factor.; /// <tr><td> RooFit::Cut(const char*); /// <td> Only plot entries that pass the given cut.; /// Apart from cutting in continuous variables `Cut(""x>5"")`, this can also be used to plot a specific; /// category state. Use something like `Cut(""myCategory == myCategory::stateA"")`, where; /// `myCategory` resolves to the state number for a given entry and; /// `myCategory::stateA` resolves to the state number of the state named ""stateA"".; ///; /// <tr><td> RooFit::CutRange(const char*); /// <td> Only plot data from given range. Separate multiple ranges with "","".; /// \note This often requires passing the normalisation when plotting the PDF because RooFit does not save; /// how many events were being plotted (it will only work for cutting slices out of uniformly distributed; /// variables).; /// ```; /// data->plotOn(frame01, CutRange(""SB1""));; /// const double nData = data->sumEntries("""", ""SB1"");; /// // Make clear that the target normalisation is nData. The enumerator NumEvent; /// // is needed to switch between relative and absolute scaling.; /// model.plotOn(frame01, Normalization(nData, RooAbsReal::NumEvent),; /// ProjectionRange(""SB1""));; /// ```; ///; /// <tr><th> <th> Histogram drawing options; /// <tr><td> RooFit::DrawOption(const char* opt); /// <td> Select ROOT draw option for resulting TGraph object; /// <tr><td> RooFit::LineStyle(Style_t style); /// <td> Select line style by ROOT line style code, default is solid; /// <tr><td> RooFit::LineColor(Color_t color); /// <td> Select line color by ROOT color code, default is black; /// <tr><td> RooFit::LineWidth(Width_t width); /// <td> Select line with in pixels, default is 3; /// <tr><td> RooFit::MarkerStyle(Style_t style); /// <td> Select the ROOT marker style, default is 21; /// <tr><td> RooFit::MarkerColor(Color_t color); /// <td> Select the ROOT marker color, default is black; /// <tr><td> Ro",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:2990,clear,clear,2990,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['clear'],['clear']
Usability,"the selected object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A clone of the selected style will be used as a base of the new; style. All its values can be modified via the style editor later.; The dialog that appears will ask for the name and description of the; new style. Import a style (from a macro):; A style macro can be imported at any time. The new imported style in; the ROOT session will become the selected one. Import a style (from a canvas):; You can do that selecting the Style menu/Import from.../Canvas or; the corresponding Tool b",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx:1558,undo,undo,1558,gui/ged/src/TStyleManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/src/TStyleManager.cxx,1,['undo'],['undo']
Usability,"the; // Linux kernel source tree for details.; //; // (b) Pointers to context parameters of BPF programs must not be; // modified before access.; //; // During BPF program verification a tag PTR_TO_CTX is tracked for; // register values. In case if register with such tag is modified; // BPF program is not allowed to read or write memory using this; // register. See kernel/bpf/verifier.c:check_mem_access function; // in the Linux kernel source tree for details.; //; // The following sequence of the IR instructions:; //; // %x = getelementptr %ptr, %constant_offset; // %y = load %x; //; // Is translated as a single machine instruction:; //; // LDW %ptr, %constant_offset; //; // In order for cases (a) and (b) to work the sequence %x-%y above has; // to be preserved by the IR passes.; //; // However, several optimization passes might sink `load` instruction; // or hoist `getelementptr` instruction so that the instructions are; // no longer in sequence. Examples of such passes are:; // SimplifyCFGPass, InstCombinePass, GVNPass.; // After such modification the verifier would reject the BPF program.; //; // To avoid this issue the patterns like (load/store (getelementptr ...)); // are replaced by calls to BPF specific intrinsic functions:; // - llvm.bpf.getelementptr.and.load; // - llvm.bpf.getelementptr.and.store; //; // These calls are lowered back to (load/store (getelementptr ...)); // by BPFCheckAndAdjustIR pass right before the translation from IR to; // machine instructions.; //; // The transformation is split into the following steps:; // - When IR is generated from AST the calls to intrinsic function; // llvm.preserve.static.offset are inserted.; // - BPFPreserveStaticOffsetPass is executed as early as possible; // with AllowPatial set to true, this handles marked GEP chains; // with constant offsets.; // - BPFPreserveStaticOffsetPass is executed at ScalarOptimizerLateEPCallback; // with AllowPatial set to false, this handles marked GEP chains; // with offsets tha",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp:2299,Simpl,SimplifyCFGPass,2299,interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFPreserveStaticOffset.cpp,1,['Simpl'],['SimplifyCFGPass']
Usability,"thm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Begin_Macro(source); {; auto ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; auto he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; he4->SetFillColor(kRed);; he4->GetXaxis()->SetRange(40,48);; ce4->cd(1);; he4->Draw(""E4"");; ce4->cd(2);; auto he3 = (TH1F*)he4->DrawClone(""E3"");; he3->SetTitle(""Distribution drawn option E3"");; }; End_Macro. 2D histograms can be drawn with error bars as shown is the following example:. Begin_Macro(source); {; auto c2e = new TCanvas(""c2e"",""c2e"",600,400);; auto h2e = new TH2F(""h2e"",""TH2 drawn with option E"",40,-4,4,40,-20,20);; float px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2e->Fill(px,5*py);; }; h2e->Draw(""E"");; }; End_Macro. \anchor HP100; ### The bar chart option. The option ""B"" allows to draw simple vertical bar charts.; The bar width is controlled with `TH1::SetBarWidth()`,; and the bar offset within the bin, with `TH1::SetBarOffset()`.; These two settings are useful to draw several histograms on the; same plot as shown in the following example:. Begin_Macro(source); {; int i;; const Int_t nx = 8;; string os_X[nx] = {""8"",""32"",""128"",""512"",""2048"",""8192"",""32768"",""131072""};; float d_35_0[nx] = {0.75, -3.30, -0.92, 0.10, 0.08, -1.69, -1.29, -2.37};; float d_35_1[nx] = {1.01, -3.02, -0.65, 0.37, 0.34, -1.42, -1.02, -2.10};. auto cb = new TCanvas(""cb"",""cb"",600,400);; cb->SetGrid();. gStyle->SetHistMinimumZero();. auto h1b = new TH1F(""h1b"",""Option B example"",nx,0,nx);; h1b->SetFillColor(4);; h1b->SetBarWidth(0.4);; h1b->SetBarOffset(0.1);; h1b->SetStats(0);; h1b->SetMinimum(-5);; h1b->SetMaximum(5);. for (i=1; i<=nx; i++) {; h1b->SetBinContent(i, d_35_0[i-1]);; h1b->GetXaxis()->SetBinLabel(i,os_X[i-1].c_str());; }. h1b->Draw(""b"");. auto h2b = new TH1F(""h2b"",""h2b"",nx,0,nx);; h2b-",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:28068,simpl,simple,28068,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['simpl'],['simple']
Usability,"timisation of signal efficiency for given background; efficiency, applying rectangular minimum and maximum requirements. Also implemented is a ""decorrelate/diagonalized cuts approach"",; which improves over the uncorrelated cuts approach by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix. Other optimisation criteria, such as maximising the signal significance-; squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; correspond to a particular point in the optimised background rejection; versus signal efficiency curve. This working point requires the knowledge; of the expected yields, which is not the case in general. Note also that; for rare signals, Poissonian statistics should be used, which modifies; the significance criterion. The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand). Technically, optimisation is achieved in TMVA by two methods:. 1. Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges. 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima. The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway. **Decorrelated (or ""diagonalized"") Cuts**. See class description for Method Likelihood for a detailed explanation.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:2869,Simpl,Simplex,2869,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['Simpl'],['Simplex']
Usability,"tion helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underlying condition for both MC/DC and branch coverage, the; /// condition IDs themselves are assigned and tracked using the underlying; /// condition itself. This is done solely for consistency since parentheses; /// and logical-NOTs are ignored when checking whether the condition is; /// actually an instrumentable condition. This can also make debugging a bit; /// easier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:3380,simpl,simplicity,3380,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['simpl'],['simplicity']
Usability,"tion). There is a predefined number of color levels (256). Color in; /// every level is calculated by adding the increments of the r, g, b; /// components to the previous level. Using this function one can change the; /// color increments between two neighbouring color levels. The function does; /// not apply dor the Simple Display Modes Group. The default values are:; /// (1,1,1).; ///; /// ca(color_algorithm) allows to choose the Color Algorithm.; /// To define the colors one can employ one of the following color algorithms; /// (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches; /// the limit value one can choose either smooth transition (by decreasing; /// the limit value) or a sharp modulo transition (continuing with 0 value).; /// This makes possible to realize various visual effects. One can choose from; /// the following set of the algorithms:; ///; /// - 0 = RGB Smooth; /// - 1 = RGB Modulo; /// - 2 = CMY Smooth; /// - 3 = CMY Modulo; /// - 4 = CIE Smooth; /// - 5 = CIE Modulo; /// - 6 = YIQ Smooth; /// - 7 = YIQ Modulo; /// - 8 = HVS Smooth; /// - 9 = HVS Modulo; ///; /// This function does not apply on Simple display modes group. Default; /// value is 0. Example:; ///; /// h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");; ///; /// choose CMY Modulo to paint the ""h2"" histogram.; ///; /// lp(x,y,z) set the light position.; /// In Light and LightHeight display modes groups the color palette is; /// calculated according to the fictive light source position in 3-d space.; /// Using this function one can change the position of the source and thus; /// to achieve various graphical effects. This function does not apply for; /// Simple and Height display modes groups. Default is:; /// lp(1000,1000,100).; ///; /// s(shading,shadow) allows to set the shading.; /// The picture's surface is composed of triangles. If desired the edges of; /// the neighbouring triangles can be smoothed (shaded). If desired the; /// display of the shadow can be painted as w",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:6060,Simpl,Simple,6060,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"tions, some default initial values and limits are set.; /// ""C"" | In case of linear fitting, do no calculate the chisquare (saves CPU time).; /// ""G"" | Uses the gradient implemented in `TF1::GradientPar` for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function.; /// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; /// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; ///; ///; /// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; /// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; ///; /// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; /// un-weighted least-square (chi-square) method.; ///; ///; ///\anchor GFitErrors; /// ### TGraphErrors fit:; ///; /// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; /// is projected along the y-direction by calculating the function at the points `x-ex_low` and; /// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; /// The chi-square is then computed as the sum of the quantity below at each data point:; ///; /// \f[; /// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; /// \f]; ///; /// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; /// function `f(x)`.; ///; /// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; ///; /// The approach used to approximate the uncertainty in y because of the; /// errors in x is to make it equal the error in x times the slope of the lin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3173,simpl,simple,3173,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['simpl'],['simple']
Usability,"tly processed events, the rate of event processing ; and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. . ProgressBar is added after creating the dataframe object (df):; ~~~{.cpp}; ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ~~~. Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility ; For example, it can be called at any computational node, such as Filter or Define, not only the head node,; with no change to the ProgressBar function itself (please see the [Efficient analysis in Python](#python) ; section for appropriate usage in Python): ; ~~~{.cpp}; ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ~~~; Examples of implemented progress bars can be seen by running [Higgs to Four Lepton tutorial](https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html) and [Dimuon tutorial](https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html). . \anchor missing-values; ### Working with missing values in the dataset. In certain situations a dataset might be missing one or more values at one or; more of its entries. For example:. - If the dataset is composed of multiple files and one or more files is; missing one or more columns required by the analysis.; - When joining different datasets horizontally according to some index value; (e.g. the event number), if the index does not find a match in one or more; other datasets for a certain entry. For example, suppose that column ""y"" does not have a value for entry 42:. \code{.unparsed}; +-------+---+---+; | Entry | x | y |; +-------+---+---+; | 42 | 1 | |; +-------+---+---+; \endcode. If the RDataFrame application reads that column, for example if a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:80887,progress bar,progress bars,80887,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['progress bar'],['progress bars']
Usability,"to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs. \warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; ~~~{.cpp}; ROOT::EnableImplicitMT(i); ~~~; replacing `i` with the number of CPUs/slots that were allocated for this job. ### Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads. Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; which eliminates all risks of race conditions. In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they; will pass an extra `slot` argument (an unsigned integer) to the user-defined expression. When calling user-defined code; concurrently, RDataFrame guarantees that different threads will employ different values of the `slot` parameter,; where `slot` will be a number between 0 and `GetNSlots() - 1`.; In other words, within a slot, computation runs sequentially and events are processed sequentially.; Note that the same slot might be associated to different threads over the course of a singl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:48808,simpl,simple,48808,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simple']
Usability,"too many steps on the average 32-bit machine.; *; * For example, these two lines seem similar, and run equally fast on 64-bit:; *; * xxh_u64 x;; * x ^= (x >> 47); // good; * x ^= (x >> 13); // bad; *; * However, to a 32-bit machine, there is a major difference.; *; * x ^= (x >> 47) looks like this:; *; * x.lo ^= (x.hi >> (47 - 32));; *; * while x ^= (x >> 13) looks like this:; *; * // note: funnel shifts are not usually cheap.; * x.lo ^= (x.lo >> 13) | (x.hi << (32 - 13));; * x.hi ^= (x.hi >> 13);; *; * The first one is significantly faster than the second, simply because the; * shift is larger than 32. This means:; * - All the bits we need are in the upper 32 bits, so we can ignore the lower; * 32 bits in the shift.; * - The shift result will always fit in the lower 32 bits, and therefore,; * we can ignore the upper 32 bits in the xor.; *; * Thanks to this optimization, XXH3 only requires these features to be efficient:; *; * - Usable unaligned access; * - A 32-bit or 64-bit ALU; * - If 32-bit, a decent ADC instruction; * - A 32 or 64-bit multiply with a 64-bit result; * - For the 128-bit variant, a decent byteswap helps short inputs.; *; * The first two are already required by XXH32, and almost all 32-bit and 64-bit; * platforms which can run XXH32 can run XXH3 efficiently.; *; * Thumb-1, the classic 16-bit only subset of ARM's instruction set, is one; * notable exception.; *; * First of all, Thumb-1 lacks support for the UMULL instruction which; * performs the important long multiply. This means numerous __aeabi_lmul; * calls.; *; * Second of all, the 8 functional registers are just not enough.; * Setup for __aeabi_lmul, byteshift loads, pointers, and all arithmetic need; * Lo registers, and this shuffling results in thousands more MOVs than A32.; *; * A32 and T32 don't have this limitation. They can access all 14 registers,; * do a 32->64 multiply with UMULL, and the flexible operand allowing free; * shifts is helpful, too.; *; * Therefore, we do a quick sanity c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h:1165,Usab,Usable,1165,builtins/xxhash/xxhash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/xxhash/xxhash.h,1,['Usab'],['Usable']
Usability,"tributions of the function call durations with; /// statistics at each level of the stack. This works by doing the following; /// algorithm:; ///; /// 1. When unwinding, record the duration of each unwound function associated; /// with the path up to which the unwinding stops. For example:; ///; /// Step Duration (? means has start time); ///; /// push a <start time> a = ?; /// push b <start time> a = ?, a->b = ?; /// push c <start time> a = ?, a->b = ?, a->b->c = ?; /// pop c <end time> a = ?, a->b = ?, emit duration(a->b->c); /// pop b <end time> a = ?, emit duration(a->b); /// push c <start time> a = ?, a->c = ?; /// pop c <end time> a = ?, emit duration(a->c); /// pop a <end time> emit duration(a); ///; /// 2. We then account for the various stacks we've collected, and for each of; /// them will have measurements that look like the following (continuing; /// with the above simple example):; ///; /// c : [<id(""a->b->c""), [durations]>, <id(""a->c""), [durations]>]; /// b : [<id(""a->b""), [durations]>]; /// a : [<id(""a""), [durations]>]; ///; /// This allows us to compute, for each stack id, and each function that; /// shows up in the stack, some important statistics like:; ///; /// - median; /// - 99th percentile; /// - mean + stddev; /// - count; ///; /// 3. For cases where we don't have durations for some of the higher levels; /// of the stack (perhaps instrumentation wasn't activated when the stack was; /// entered), we can mark them appropriately.; ///; /// Computing this data also allows us to implement lookup by call stack nodes,; /// so that we can find functions that show up in multiple stack traces and; /// show the statistical properties of that function in various contexts. We; /// can compute information similar to the following:; ///; /// Function: 'c'; /// Stacks: 2 / 2; /// Stack ID: ...; /// Stack Count: ...; /// # Function ...; /// 0 a ...; /// 1 b ...; /// 2 c ...; ///; /// Stack ID: ...; /// Stack Count: ...; /// # Function ...; /// 0 a ...; /// 1 c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp:1947,simpl,simple,1947,interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,1,['simpl'],['simple']
Usability,"ttable> {};; * }; * }; * }; * @endcode; * would create a selection rule which selects class @c classWithAttributes and; * assignes to it the property described by @c kNonSplittable. Multiple; * properties can be assigned to a single class with this syntax:; * @code; * [...]; * namespace ROOT {; * namespace Meta {; * namespace Selection {; * class classWithAttributes :; * ClassAttributes <kProperty1 + kProperty2 + ... + kPropertyN> {};; * }; * }; * }; * @endcode; *; * The @c ROOT::Meta::Selection syntax allows to alter the number of template; * parameters of a certain template class within the ROOT type system, TClass.; * Technically it allows to alter the way in which the ""normalized name"" (in; * other words, the ""ROOT name"") of the class is created. The key is the usage; * of the @c KeepFirstTemplateArguments traits class.; * It is possible to select the maximum number of template arguments considered; * if not different from the default. A concrete example can be more clear than; * a long explaination in this case:; * @code; * [...]; * template <class T, class U = int, int V = 3> class A {...};; * template <class T, class Alloc = myAllocator<T> > class myVector {...};; * A<char> a1;; * A<char, float> a2;; * myVector<float> v1;; * myVector<A<char>> v2;; *; * namespace ROOT {; * namespace Meta {; * namespace Selection {; * template <class T, class U = int, int V = 3> class A; * : KeepFirstTemplateArguments<1> {};; * A<double> a;; * template <class T, class Alloc = myAllocator<T> > class myVector; * : KeepFirstTemplateArguments<1> {};; * myVector<double> vd;; * }; * }; * }; * @endcode; *; * Consistently with what described above, all the instances of @c A and; * @c myvector will be selected. In addition, only the first template parameter; * will be kept.; * In absence of any @c KeepFirstTemplateArguments trait, the normalization; * would be:; * - @c A<char> &rarr; @c A<char,float,3>; * - @c A<char,float> &rarr; @c A<char,int,3>; * - @c myVector<float> &rarr; @c myVec",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h:3631,clear,clear,3631,core/dictgen/res/DictSelectionReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/DictSelectionReader.h,1,['clear'],['clear']
Usability,"ture"" can be used. This feature is still rough around the edges, be; * prepared for surprising behavior!; *; * How to use it:; *; * When using a CDict, whether to use this feature or not is controlled at; * CDict creation, and it must be set in a CCtxParams set passed into that; * construction (via ZSTD_createCDict_advanced2()). A compression will then; * use the feature or not based on how the CDict was constructed; the value of; * this param, set in the CCtx, will have no effect.; *; * However, when a dictionary buffer is passed into a CCtx, such as via; * ZSTD_CCtx_loadDictionary(), this param can be set on the CCtx to control; * whether the CDict that is created internally can use the feature or not.; *; * What it does:; *; * Normally, the internal data structures of the CDict are analogous to what; * would be stored in a CCtx after compressing the contents of a dictionary.; * To an approximation, a compression using a dictionary can then use those; * data structures to simply continue what is effectively a streaming; * compression where the simulated compression of the dictionary left off.; * Which is to say, the search structures in the CDict are normally the same; * format as in the CCtx.; *; * It is possible to do better, since the CDict is not like a CCtx: the search; * structures are written once during CDict creation, and then are only read; * after that, while the search structures in the CCtx are both read and; * written as the compression goes along. This means we can choose a search; * structure for the dictionary that is read-optimized.; *; * This feature enables the use of that different structure.; *; * Note that some of the members of the ZSTD_compressionParameters struct have; * different semantics and constraints in the dedicated search structure. It is; * highly recommended that you simply set a compression level in the CCtxParams; * you pass into the CDict creation call, and avoid messing with the cParams; * directly.; *; * Effects:; *; * This ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h:1071,simpl,simply,1071,builtins/zstd/zstd.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/zstd.h,1,['simpl'],['simply']
Usability,"uctors are equivalent; TFile *f = TFile::Open(""file.root"");; TTree *t = f.Get<TTree>(""treeName"");. RDataFrame d1(""treeName"", ""file.root"");; RDataFrame d2(""treeName"", f); // same as TTreeReader; RDataFrame d3(*t);. // multiple files -- all constructors are equivalent; TChain chain(""myTree"");; chain.Add(""file1.root"");; chain.Add(""file2.root"");. RDataFrame d4(""myTree"", {""file1.root"", ""file2.root""});; std::vector<std::string> files = {""file1.root"", ""file2.root""};; RDataFrame d5(""myTree"", files);; RDataFrame d6(""myTree"", ""file*.root""); // the glob is passed as-is to TChain's constructor; RDataFrame d7(chain);; ~~~; Additionally, users can construct an RDataFrame with no data source by passing an integer number. This is the number of rows that; will be generated by this RDataFrame.; ~~~{.cpp}; RDataFrame d(10); // a RDF with 10 entries (and no columns/branches, for now); d.Foreach([] { static int i = 0; std::cout << i++ << std::endl; }); // silly example usage: count to ten; ~~~; This is useful to generate simple datasets on the fly: the contents of each event can be specified with Define() (explained below). For example, we have used this method to generate [Pythia](https://pythia.org/) events and write them to disk in parallel (with the Snapshot action). For data sources other than TTrees and TChains, RDataFrame objects are constructed using ad-hoc factory functions (see e.g. FromCSV(), FromSqlite(), FromArrow()):. ~~~{.cpp}; auto df = ROOT::RDF::FromCSV(""input.csv"");; // use df as usual; ~~~. ### Filling a histogram; Let's now tackle a very common task, filling a histogram:; ~~~{.cpp}; // Fill a TH1D with the ""MET"" branch; RDataFrame d(""myTree"", ""file.root"");; auto h = d.Histo1D(""MET"");; h->Draw();; ~~~; The first line creates an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"". Histo1D() is an *action*; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be precise) to a TH1D histogram filled; with the `MET` of all events. If the qua",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:16652,simpl,simple,16652,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simple']
Usability,"uld become an; // identity copy after joining SrcReg and DstReg. The copy instruction will; // be removed, and the value will be merged with the source value.; //; // There can be several copies back and forth, causing many values to be; // merged into one. We compute a list of ultimate values in the joined live; // range as well as a mappings from the old value numbers.; //; // 2. IMPLICIT_DEF. This instruction is only inserted to ensure all PHI; // predecessors have a live out value. It doesn't cause real interference,; // and can be merged into the value it overlaps. Like a coalescable copy, it; // can be erased after joining.; //; // 3. Copy of external value. The overlapping def may be a copy of a value that; // is already in the other register. This is like a coalescable copy, but; // the live range of the source register must be trimmed after erasing the; // copy instruction:; //; // %src = COPY %ext; // %dst = COPY %ext <-- Remove this COPY, trim the live range of %ext.; //; // 4. Clobbering undefined lanes. Vector registers are sometimes built by; // defining one lane at a time:; //; // %dst:ssub0<def,read-undef> = FOO; // %src = BAR; // %dst:ssub1 = COPY %src; //; // The live range of %src overlaps the %dst value defined by FOO, but; // merging %src into %dst:ssub1 is only going to clobber the ssub1 lane; // which was undef anyway.; //; // The value mapping is more complicated in this case. The final live range; // will have different value numbers for both FOO and BAR, but there is no; // simple mapping from old to new values. It may even be necessary to add; // new PHI values.; //; // 5. Clobbering dead lanes. A def may clobber a lane of a vector register that; // is live, but never read. This can happen because we don't compute; // individual live ranges per lane.; //; // %dst = FOO; // %src = BAR; // %dst:ssub1 = COPY %src; //; // This kind of interference is only resolved locally. If the clobbered; // lane value escapes the block, the join is aborted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:2433,simpl,simple,2433,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['simpl'],['simple']
Usability,"ume families are used is when we want; that a volume positioned inside a container to match one ore more container; limits. Suppose we want to position the same box inside 2 different volumes; and we want the Z size to match the one of each container:. ~~~ {.cpp}; TGeoVolume *container1 = gGeoManager->MakeBox(""C1"", imed, 10,10,30);; TGeoVolume *container2 = gGeoManager->MakeBox(""C2"", imed, 10,10,20);; TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"", jmed, 3,3,-1);; container1->AddNode(pvol, 1);; container2->AddNode(pvol, 1);; ~~~. Note that the third parameter of PVOL is negative, which does not make sense; as half-length on Z. This is interpreted as: when positioned, create a box; replacing all invalid parameters with the corresponding dimensions of the; container. This is also internally handled by the TGeoVolumeMulti class, which; does not need to be instantiated by users. ### Dividing volumes. Volumes can be divided according a pattern. The most simple division can; be done along one axis, that can be: X, Y, Z, Phi, Rxy or Rxyz. Let's take; the most simple case: we would like to divide a box in N equal slices along X; coordinate, representing a new volume family. Supposing we already have created; the initial box, this can be done like:. ~~~ {.cpp}; TGeoVolume *slicex = box->Divide(""SLICEX"", 1, N);; ~~~. where SLICE is the name of the new family representing all slices and 1 is the; slicing axis. The meaning of the axis index is the following: for all volumes; having shapes like box, trd1, trd2, trap, gtra or para - 1,2,3 means X,Y,Z; for; tube, tubs, cone, cons - 1 means Rxy, 2 means phi and 3 means Z; for pcon and; pgon - 2 means phi and 3 means Z; for spheres 1 means R and 2 means phi.; In fact, the division operation has the same effect as positioning volumes; in a given order inside the divided container - the advantage being that the; navigation in such a structure is much faster. When a volume is divided, a; volume family corresponding to the slices is cre",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:13519,simpl,simple,13519,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['simpl'],['simple']
Usability,"ur chamber; by positioning it 1000 times in different positions of the pad. Unfortunately,; this is far from being the optimal way of doing what we want.; Imagine that we would like to find out which of the 1000 chambers is containing; a (x,y,z) point defined in the pad reference. You will never have to do that,; since the modeller will take care of it for you, but let's guess what it has; to do. The most simple algorithm will just loop over all daughters, convert; the point from mother to local reference and check if the current chamber; contains the point or not. This might be efficient for pads with few chambers,; but definitely not for 1000. Fortunately the modeler is smarter than that and; create for each volume some optimization structures called voxels (see Voxelization); to minimize the penalty having too many daughters, but if you have 100 pads like; this in your geometry you will anyway loose a lot in your tracking performance. The way out when volumes can be arranged according to simple patterns is the; usage of divisions. We will describe them in detail later on. Let's think now; at a different situation : instead of 1000 chambers of the same type, we may; have several types of chambers. Let's say all chambers are cylindrical and have; a wire inside, but their dimensions are different. However, we would like all; to be represented by a single volume family, since they have the same properties.; */; /** \class TGeoVolumeMulti; \ingroup Geometry_classes. Volume families. A volume family is represented by the class TGeoVolumeMulti. It represents; a class of volumes having the same shape type and each member will be; identified by the same name and volume ID. Any operation applied to a; TGeoVolume equally affects all volumes in that family. The creation of a; family is generally not a user task, but can be forced in particular cases:. ~~~ {.cpp}; TGeoManager::Volume(const char *vname, const char *shape, Int_t nmed);; ~~~. where VNAME is the family name, NMED",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx:10379,simpl,simple,10379,geom/geom/src/TGeoVolume.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoVolume.cxx,1,['simpl'],['simple']
Usability,"urrent cases; /// that trigger this are:; ///; /// * When parsing X::Y (with no 'typename') where X is dependent; /// * When parsing X<Y> where X is undeclared; ///; /// decl-specifier:; /// storage-class-specifier; /// type-specifier; /// function-specifier; /// 'friend'; /// 'typedef'; /// [C++11] 'constexpr'; /// [C++20] 'consteval'; /// [GNU] attributes declaration-specifiers[opt]; ///; /// storage-class-specifier:; /// 'register'; /// 'static'; /// 'extern'; /// 'mutable'; /// 'auto'; /// [GNU] '__thread'; /// [C++11] 'thread_local'; /// [C11] '_Thread_local'; ///; /// function-specifier:; /// 'inline'; /// 'virtual'; /// 'explicit'; ///; /// typedef-name:; /// identifier; ///; /// type-specifier:; /// simple-type-specifier; /// class-specifier; /// enum-specifier; /// elaborated-type-specifier; /// typename-specifier; /// cv-qualifier; ///; /// simple-type-specifier:; /// '::'[opt] nested-name-specifier[opt] type-name; /// '::'[opt] nested-name-specifier 'template'; /// simple-template-id [TODO]; /// 'char'; /// 'wchar_t'; /// 'bool'; /// 'short'; /// 'int'; /// 'long'; /// 'signed'; /// 'unsigned'; /// 'float'; /// 'double'; /// 'void'; /// [GNU] typeof-specifier; /// [GNU] '_Complex'; /// [C++11] 'auto'; /// [GNU] '__auto_type'; /// [C++11] 'decltype' ( expression ); /// [C++1y] 'decltype' ( 'auto' ); ///; /// type-name:; /// class-name; /// enum-name; /// typedef-name; ///; /// elaborated-type-specifier:; /// class-key '::'[opt] nested-name-specifier[opt] identifier; /// class-key '::'[opt] nested-name-specifier[opt] 'template'[opt]; /// simple-template-id; /// 'enum' '::'[opt] nested-name-specifier[opt] identifier; ///; /// enum-name:; /// identifier; ///; /// enum-specifier:; /// 'enum' identifier[opt] '{' enumerator-list[opt] '}'; /// 'enum' identifier[opt] '{' enumerator-list ',' '}'; ///; /// class-specifier:; /// class-head '{' member-specification[opt] '}'; ///; /// class-head:; /// class-key identifier[opt] base-clause[opt]; /// class-key nested-name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:1809,simpl,simple-template-id,1809,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['simpl'],['simple-template-id']
Usability,"usual way: ""pol1"", ""pol2"",...; // --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; // ---The ""hypN"" expressions only work when the linear fitter; // is used directly, not through TH1::Fit or TGraph::Fit.; // To fit a graph or a histogram with a hyperplane, define; // the function as ""1++x++y"".; // ---A constant term is assumed for a hyperplane, when using; // the ""hypN"" expression, so ""hyp3"" is in fact fitting with; // ""1++x++y++z"" function.; // --Fitting hyperplanes is much faster than fitting other; // expressions so if performance is vital, calculate the; // function values beforehand and give them to the fitter; // as variables; // --Example:; // You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; // sin(x) and cos(2*x) beforehand and store them in array *data.; // Then:; // TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; // lf->AssignData(npoint, 2, data, y);; //; // 2.3 Resetting the formula; // 2.3.1 If the input data is stored (or added via AssignData() function),; // the fitting formula can be reset without re-adding all the points.; // --Example:; // TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; // lf->AssignData(n, 1, x, y, e);; // lf->Eval(); // //looking at the parameter significance, you see,; // // that maybe the fit will improve, if you take out; // // the constant term; // lf->SetFormula(""x++x*x"");; // lf->Eval();; // ...; // 2.3.2 If the input data is not stored, the fitter will have to be; // cleared and the data will have to be added again to try a; // different formula.; //; // 3.Accessing the fit results; // 3.1 There are methods in the fitter to access all relevant information:; // --GetParameters, GetCovarianceMatrix, etc; // --the t-values of parameters and their significance can be reached by; // GetParTValue() and GetParSignificance() methods; // 3.2 If fitting with a pre-defined TF123, the fit results are also; // written into this function.; //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:5141,clear,cleared,5141,math/minuit/inc/TLinearFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h,1,['clear'],['cleared']
Usability,"utions from detector to truth level. TUnfold is used to decompose a measurement y into several sources x,; given the measurement uncertainties and a matrix of migrations A.; The method can be applied to a large number of problems,; where the measured distribution y is a linear superposition; of several Monte Carlo shapes. Beyond such a simple template fit,; TUnfold has an adjustable regularisation term and also supports an; optional constraint on the total number of events. <b>For most applications, it is better to use the derived class; TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various; features to TUnfold, such as:; background subtraction, propagation of systematic uncertainties,; complex multidimensional arrangements of the bins. For innocent; users, the most notable improvement of TUnfoldDensity over TUnfold are; the getter functions. For TUnfold, histograms have to be booked by the; user and the getter functions fill the histogram bins. TUnfoldDensity; simply returns a new, already filled histogram.</b>. If you use this software, please consider the following citation; <br/>; <b>S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]</b>; <br/>; Detailed documentation and updates are available on; http://www.desy.de/~sschmitt. Brief recipy to use TUnfold:; <ul>; <li>a matrix (truth,reconstructed) is given as a two-dimensional histogram; as argument to the constructor of TUnfold</li>; <li>a vector of measurements is given as one-dimensional histogram using; the SetInput() method</li>; <li>The unfolding is performed; <ul>; <li>either once with a fixed parameter tau, method DoUnfold(tau)</li>; <li>or multiple times in a scan to determine the best chouce of tau,; method ScanLCurve()</li>; </ul>; <li>Unfolding results are retrieved using various GetXXX() methods; </ul>. Basic formulae:<br/>; &chi;<sup>2</sup><sub>A</sub>=(Ax-y)<sup>T</sup>V<sub>yy</sub><sup>-1</sup>(Ax-y)<br/>; &chi;<sup>2</sup><sub>L</sub>=(x-f*x<sub>0</sub>)<sup>T</sup>L<sup>T</sup>L(x-f*x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:3035,simpl,simply,3035,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['simpl'],['simply']
Usability,"vel object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies. However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects. When a TRef is used to point to a TObject *robj, for example in a class with; ~~~ {.cpp}; TRef fRef;; ~~~; one can do:; ~~~ {.cpp}; fRef = robj; //to set the pointer; ~~~; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be auto-loaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. ## How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:. - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber. After having set fRef, one can immediately return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID). When the TRef is read, its pointer fPID is set to",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx:1816,simpl,simply,1816,core/base/src/TRef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TRef.cxx,1,['simpl'],['simply']
Usability,"veral ones) :; errorCode = FSE_initDState(&DState, &DStream, DTablePtr);. You can then decode your data, symbol after symbol.; For information the maximum number of bits read by FSE_decodeSymbol() is 'tableLog'.; Keep in mind that symbols are decoded in reverse order, like a LIFO stack (last in, first out).; unsigned char symbol = FSE_decodeSymbol(&DState, &DStream);. You can retrieve any bitfield you eventually stored into the bitStream (in reverse order); Note : maximum allowed nbBits is 25, for 32-bits compatibility; size_t bitField = BIT_readBits(&DStream, nbBits);. All above operations only read from local register (which size depends on size_t).; Refueling the register from memory is manually performed by the reload method.; endSignal = FSE_reloadDStream(&DStream);. BIT_reloadDStream() result tells if there is still some more data to read from DStream.; BIT_DStream_unfinished : there is still some data left into the DStream.; BIT_DStream_endOfBuffer : Dstream reached end of buffer. Its container may no longer be completely filled.; BIT_DStream_completed : Dstream reached its exact end, corresponding in general to decompression completed.; BIT_DStream_tooFar : Dstream went too far. Decompression result is corrupted. When reaching end of buffer (BIT_DStream_endOfBuffer), progress slowly, notably if you decode multiple symbols per loop,; to properly detect the exact end of stream.; After each decoded symbol, check if DStream is fully consumed using this simple test :; BIT_reloadDStream(&DStream) >= BIT_DStream_completed. When it's done, verify decompression is fully completed, by checking both DStream and the relevant states.; Checking if DStream has reached its end is performed by :; BIT_endOfDStream(&DStream);; Check also the states. There might be some symbols left there, if some high probability ones (>50%) are possible.; FSE_endOfDState(&DState);; */; /* *****************************************; * FSE unsafe API; *******************************************/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h:2133,simpl,simple,2133,builtins/zstd/common/fse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/builtins/zstd/common/fse.h,1,['simpl'],['simple']
Usability,"when returned by value; // from conservatively evaluated methods such as; // `.begin()`.; // * type-IIb, type-IIIb: memory regions of iterator-typed objects, such as; // variables or temporaries, when the iterator object is; // currently treated as an lvalue.; // * type-IIc, type-IIIc: compound values of iterator-typed objects, when the; // iterator object is treated as an rvalue taken of a; // particular lvalue, eg. a copy of ""type-a"" iterator; // object, or an iterator that existed before the; // analysis has started.; //; // To handle any of these three different representations stored in an SVal we; // use setter and getters functions which separate the three cases. To store; // them we use a pointer union of symbol and memory region.; //; // The checker works the following way: We record the begin and the; // past-end iterator for all containers whenever their `.begin()` and `.end()`; // are called. Since the Constraint Manager cannot handle such SVals we need; // to take over its role. We post-check equality and non-equality comparisons; // and record that the two sides are equal if we are in the 'equal' branch; // (true-branch for `==` and false-branch for `!=`).; //; // In case of type-I or type-II iterators we get a concrete integer as a result; // of the comparison (1 or 0) but in case of type-III we only get a Symbol. In; // this latter case we record the symbol and reload it in evalAssume() and do; // the propagation there. We also handle (maybe double) negated comparisons; // which are represented in the form of (x == 0 or x != 0) where x is the; // comparison itself.; //; // Since `SimpleConstraintManager` cannot handle complex symbolic expressions; // we only use expressions of the format S, S+n or S-n for iterator positions; // where S is a conjured symbol and n is an unsigned concrete integer. When; // making an assumption e.g. `S1 + n == S2 + m` we store `S1 - S2 == m - n` as; // a constraint which we later retrieve when doing an actual comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorModeling.cpp:3204,Simpl,SimpleConstraintManager,3204,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorModeling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/IteratorModeling.cpp,1,['Simpl'],['SimpleConstraintManager']
Usability,"with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This pass lowers the pseudo control flow instructions to real; /// machine instructions.; ///; /// All control flow is handled using predicated instructions and; /// a predicate stack. Each Scalar ALU controls the operations of 64 Vector; /// ALUs. The Scalar ALU can update the predicate for any of the Vector ALUs; /// by writing to the 64-bit EXEC register (each bit corresponds to a; /// single vector ALU). Typically, for predicates, a vector ALU will write; /// to its bit of the VCC register (like EXEC VCC is 64-bits, one for each; /// Vector ALU) and then the ScalarALU will AND the VCC register with the; /// EXEC to update the predicates.; ///; /// For example:; /// %vcc = V_CMP_GT_F32 %vgpr1, %vgpr2; /// %sgpr0 = SI_IF %vcc; /// %vgpr0 = V_ADD_F32 %vgpr0, %vgpr0; /// %sgpr0 = SI_ELSE %sgpr0; /// %vgpr0 = V_SUB_F32 %vgpr0, %vgpr0; /// SI_END_CF %sgpr0; ///; /// becomes:; ///; /// %sgpr0 = S_AND_SAVEEXEC_B64 %vcc // Save and update the exec mask; /// %sgpr0 = S_XOR_B64 %sgpr0, %exec // Clear live bits from saved exec mask; /// S_CBRANCH_EXECZ label0 // This instruction is an optional; /// // optimization which allows us to; /// // branch if all the bits of; /// // EXEC are zero.; /// %vgpr0 = V_ADD_F32 %vgpr0, %vgpr0 // Do the IF block of the branch; ///; /// label0:; /// %sgpr0 = S_OR_SAVEEXEC_B64 %sgpr0 // Restore the exec mask for the Then; /// // block; /// %exec = S_XOR_B64 %sgpr0, %exec // Update the exec mask; /// S_BRANCH_EXECZ label1 // Use our branch optimization; /// // instruction again.; /// %vgpr0 = V_SUB_F32 %vgpr0, %vgpr // Do the THEN block; /// label1:; /// %exec = S_OR_B64 %exec, %sgpr0 // Re-enable saved exec mask bits; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerControlFlow.cpp:1398,Clear,Clear,1398,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerControlFlow.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerControlFlow.cpp,1,['Clear'],['Clear']
Usability,"work Computing Devices, Inc.; *; * Permission to use, copy, modify, and distribute this software and its; * documentation for any purpose and without fee is hereby granted, provided; * that the above copyright notice appear in all copies and that both that; * copyright notice and this permission notice appear in supporting; * documentation, and that the name of Network Computing Devices may not be; * used in advertising or publicity pertaining to distribution of the software; * without specific, written prior permission. Network Computing Devices makes; * no representations about the suitability of this software for any purpose.; * It is provided ``as is'' without express or implied warranty.; *; * NETWORK COMPUTING DEVICES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS; * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,; * IN NO EVENT SHALL NETWORK COMPUTING DEVICES BE LIABLE FOR ANY SPECIAL,; * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM; * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE; * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THIS SOFTWARE.; *; * Author: Jim Fulton; * Network Computing Devices, Inc.; *; * Simple if statement processor; *; * This module can be used to evaluate string representations of C language; * if constructs. It accepts the following grammar:; *; * EXPRESSION := VALUE; * | VALUE BINOP EXPRESSION; * | VALUE '?' EXPRESSION ':' EXPRESSION; *; * VALUE := '(' EXPRESSION ')'; * | '!' VALUE; * | '-' VALUE; * | '~' VALUE; * | 'defined' '(' variable ')'; * | 'defined' variable; * | # variable '(' variable-list ')'; * | variable; * | number; *; * BINOP := '*' | '/' | '%'; * | '+' | '-'; * | '<<' | '>>'; * | '<' | '>' | '<=' | '>='; * | '==' | '!='; * | '&' | '^' | '|'; * | '&&' | '||'; *; * The normal C order of precedence is supported.; *; *; * External Entry Points:; *; * ParseIfExpression parse a string for #if; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/ifparser.c:1436,Simpl,Simple,1436,misc/rmkdepend/ifparser.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/rmkdepend/ifparser.c,1,['Simpl'],['Simple']
Usability,"wrappers we use JS try-catch to generate actual exception effects. It; /// also calls the original callee function. An example wrapper in JS code; /// would look like this:; /// function invoke_vi(index,a1) {; /// try {; /// Module[""dynCall_vi""](index,a1); // This calls original callee; /// } catch(e) {; /// if (typeof e !== 'number' && e !== 'longjmp') throw e;; /// _setThrew(1, 0); // setThrew is called here; /// }; /// }; /// If an exception is thrown, __THREW__ will be set to true in a wrapper,; /// so we can jump to the right BB based on this value.; ///; /// 4) Lower; /// %val = landingpad catch c1 catch c2 catch c3 ...; /// ... use %val ...; /// into; /// %fmc = call @__cxa_find_matching_catch_N(c1, c2, c3, ...); /// %val = {%fmc, getTempRet0()}; /// ... use %val ...; /// Here N is a number calculated based on the number of clauses.; /// setTempRet0 is called from __cxa_find_matching_catch() in JS glue code.; ///; /// 5) Lower; /// resume {%a, %b}; /// into; /// call @__resumeException(%a); /// where __resumeException() is a function in JS glue code.; ///; /// 6) Lower; /// call @llvm.eh.typeid.for(type) (intrinsic); /// into; /// call @llvm_eh_typeid_for(type); /// llvm_eh_typeid_for function will be generated in JS glue code.; ///; /// * Emscripten setjmp / longjmp handling; ///; /// If there are calls to longjmp(); ///; /// 1) Lower; /// longjmp(env, val); /// into; /// emscripten_longjmp(env, val); ///; /// If there are calls to setjmp(); ///; /// 2) In the function entry that calls setjmp, initialize setjmpTable and; /// sejmpTableSize as follows:; /// setjmpTableSize = 4;; /// setjmpTable = (int *) malloc(40);; /// setjmpTable[0] = 0;; /// setjmpTable and setjmpTableSize are used to call saveSetjmp() function in; /// Emscripten compiler-rt.; ///; /// 3) Lower; /// setjmp(env); /// into; /// setjmpTable = saveSetjmp(env, label, setjmpTable, setjmpTableSize);; /// setjmpTableSize = getTempRet0();; /// For each dynamic setjmp call, setjmpTable stores its ID",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:5201,resume,resume,5201,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['resume'],['resume']
Usability,"x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; ~~~; Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`. \anchor friends; ### Dataset joins with friend trees. Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same columns and; more rows) is trivial in RDataFrame: just pass the tree name and a list of file names to RDataFrame's constructor, or create a TChain; out of the desired trees and pass that to RDataFrame. Horizontal concatenations of trees or chains (creating a logical dataset with the same number of rows and the union of the; columns of multiple trees) leverages TTree's ""friend"" mechanism. Simple joins of trees that do not have the same number of rows are also possible with indexed friend trees (see below). To use friend trees in RDataFrame, set up trees with the appropriate relationships and then instantiate an RDataFrame; with the main tree:. ~~~{.cpp}; TTree main([...]);; TTree friend([...]);; main.AddFriend(&friend, ""myFriend"");. RDataFrame df(main);; auto df2 = df.Filter(""myFriend.MyCol == 42"");; ~~~. The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; ""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree). \note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; one: rows will be mismatched. Indexed friend trees ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:72051,Simpl,Simple,72051,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['Simpl'],['Simple']
Usability,"y atomically accessed location in the program; /// may only change from (partially) uninitialized to fully initialized, but; /// not the other way around. We load the shadow _after_ the application load,; /// and we store the shadow _before_ the app store. Also, we always store clean; /// shadow (if the application store is atomic). This way, if the store-load; /// pair constitutes a happens-before arc, shadow store and load are correctly; /// ordered such that the load will get either the value that was stored, or; /// some later value (which is always clean).; ///; /// This does not work very well with Compare-And-Swap (CAS) and; /// Read-Modify-Write (RMW) operations. To follow the above logic, CAS and RMW; /// must store the new shadow before the app operation, and load the shadow; /// after the app operation. Computers don't work this way. Current; /// implementation ignores the load aspect of CAS/RMW, always returning a clean; /// value. It implements the store part as a simple atomic store by storing a; /// clean shadow.; ///; /// Instrumenting inline assembly.; ///; /// For inline assembly code LLVM has little idea about which memory locations; /// become initialized depending on the arguments. It can be possible to figure; /// out which arguments are meant to point to inputs and outputs, but the; /// actual semantics can be only visible at runtime. In the Linux kernel it's; /// also possible that the arguments only indicate the offset for a base taken; /// from a segment register, so it's dangerous to treat any asm() arguments as; /// pointers. We take a conservative approach generating calls to; /// __msan_instrument_asm_store(ptr, size); /// , which defer the memory unpoisoning to the runtime library.; /// The latter can perform more complex address checks to figure out whether; /// it's safe to touch the shadow memory.; /// Like with atomic operations, we call __msan_instrument_asm_store() before; /// the assembly call, so that changes to the shadow memo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:4912,simpl,simple,4912,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['simpl'],['simple']
Usability,"y.; // - 4 - LZ4.; // In this example, one loops over nevent events.; // The branch ""event"" is created at the first event.; // The branch address is set for all other events.; // For each event, the event header is filled and ntrack tracks; // are generated and added to the TClonesArray list.; // For each event the event histogram is saved as well as the list; // of all tracks.; //; // The two TRefArray contain only references to the original tracks owned by; // the TClonesArray fTracks.; //; // The number of events can be given as the first argument to the program.; // By default 400 events are generated.; // The compression option can be activated/deactivated via the second argument.; //; // Additionally, if the environment ENABLE_TTREEPERFSTATS is set, then detailed; // statistics about IO performance will be reported.; //; // ---Running/Linking instructions----; // This program consists of the following files and procedures.; // - Event.h event class description; // - Event.C event class implementation; // - MainEvent.C the main program to demo this class might be used (this file); // - EventCint.C the CINT dictionary for the event and Track classes; // this file is automatically generated by rootcint (see Makefile),; // when the class definition in Event.h is modified.; //; // ---Analyzing the Event.root file with the interactive root; // example of a simple session; // Root > TFile f(""Event.root""); // Root > T.Draw(""fNtrack"") //histogram the number of tracks per event; // Root > T.Draw(""fPx"") //histogram fPx for all tracks in all events; // Root > T.Draw(""fXfirst:fYfirst"",""fNtrack>600""); // //scatter-plot for x versus y of first point of each track; // Root > T.Draw(""fH.GetRMS()"") //histogram of the RMS of the event histogram; //; // Look also in the same directory at the following macros:; // - eventa.C an example how to read the tree; // - eventb.C how to read events conditionally; //; ////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx:3760,simpl,simple,3760,test/MainEvent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/MainEvent.cxx,1,['simpl'],['simple']
Usability,"ypes are inferred automatically. The string must be; valid C++ and it is just-in-time compiled. The process has a small runtime overhead and like with filters it is currently the only possible approach when using PyROOT. Previously, when showing the different ways an RDataFrame can be created, we showed a constructor that takes a; number of entries as a parameter. In the following example we show how to combine such an ""empty"" RDataFrame with Define(); transformations to create a dataset on the fly. We then save the generated data on disk using the Snapshot() action.; ~~~{.cpp}; RDataFrame d(100); // an RDF that will generate 100 entries (currently empty); int x = -1;; auto d_with_columns = d.Define(""x"", [&x] { return ++x; }); .Define(""xx"", [&x] { return x*x; });; d_with_columns.Snapshot(""myNewTree"", ""newfile.root"");; ~~~; This example is slightly more advanced than what we have seen so far. First, it makes use of lambda captures (a; simple way to make external variables available inside the body of C++ lambdas) to act on the same variable `x` from; both Define() transformations. Second, we have *stored* the transformed dataframe in a variable. This is always; possible, since at each point of the transformation chain users can store the status of the dataframe for further use (more; on this [below](#callgraphs)). You can read more about defining new columns [here](#custom-columns). \image html RDF_Graph.png ""A graph composed of two branches, one starting with a filter and one with a define. The end point of a branch is always an action."". ### Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame; offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and; actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act; exclusively on the entries passing th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:23013,simpl,simple,23013,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simple']
Usability,"| Surface | - | X | X | X |; /// | Triangles | X | X | X | X |; ///; /// #### Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); ///; /// This function controls the display mode group and display mode of the; /// histogram drawing. To illustrate the possible effects of the various display; /// modes we introduce a set of examples. Default values:; ///; /// - `modeGroup = kModeGroupLightHeight `; /// - `displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter011.jpg; ///; /// Light modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter012.jpg; ///; /// Light modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter013.jpg; ///; /// Light modes group, display mode = surface, 64 x 64 channels.; /// \image html spectrumpainter014.jpg; ///; /// Light modes group, dis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:2771,Simpl,Simple,2771,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"| X | X |; /// | BarsX | X | - | X | - |; /// | BarsY | X | - | X | - |; /// | Needles | X | - | - | - |; /// | Surface | - | X | X | X |; /// | Triangles | X | X | X | X |; ///; /// #### Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); ///; /// This function controls the display mode group and display mode of the; /// histogram drawing. To illustrate the possible effects of the various display; /// modes we introduce a set of examples. Default values:; ///; /// - `modeGroup = kModeGroupLightHeight `; /// - `displayMode = kDisplayModeSurface `; ///; /// \image html spectrumpainter001.jpg; ///; /// Simple modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter002.jpg; ///; /// Simple modes group, display mode = grid, 64 x 64 channels.; /// \image html spectrumpainter003.jpg; ///; /// Simple modes group, display mode = contours, 64 x 64 channels.; /// \image html spectrumpainter004.jpg; ///; /// Simple modes group, display mode = bars, 64 x 64 channels.; /// \image html spectrumpainter005.jpg; ///; /// Simple modes group, display mode = linesX, 64 x 64 channels.; /// \image html spectrumpainter006.jpg; ///; /// Simple modes group, display mode = linesY, 64 x 64 channels.; /// \image html spectrumpainter007.jpg; ///; /// Simple modes group, display mode = barsX, 64 x 64 channels.; /// \image html spectrumpainter008.jpg; ///; /// Simple modes group, display mode = barsY, 64 x 64 channels.; /// \image html spectrumpainter009.jpg; ///; /// Simple modes group, display mode = needles, 64 x 64 channels.; /// \image html spectrumpainter010.jpg; ///; /// Simple modes group, display mode = triangles, 64 x 64 channels.; /// \image html spectrumpainter011.jpg; ///; /// Light modes group, display mode = points, 256 x 256 channels.; /// \image html spectrumpainter012.jpg; ///; /// Light modes group, display mode = grid, 256 x 256 channels.; /// \image html spectrumpainter013.jpg; ///; /// Light modes group, disp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:2662,Simpl,Simple,2662,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['Simpl'],['Simple']
Usability,"}; template <typename RDF>; auto ApplySomeFilters(RDF df); {; return df.Filter(""x > 0"").Filter([](int y) { return y < 0; }, {""y""});; }; ~~~. A possibly simpler, C++11-compatible alternative is to take advantage of the fact that any dataframe node can be; converted (implicitly or via an explicit cast) to the common type ROOT::RDF::RNode:; ~~~{.cpp}; // a function that conditionally adds a Range to an RDataFrame node.; RNode MaybeAddRange(RNode df, bool mustAddRange); {; return mustAddRange ? df.Range(1) : df;; }; // use as :; ROOT::RDataFrame df(10);; auto maybeRangedDF = MaybeAddRange(df, true);; ~~~. The conversion to ROOT::RDF::RNode is cheap, but it will introduce an extra virtual call during the RDataFrame event; loop (in most cases, the resulting performance impact should be negligible). Python users can perform the conversion with the helper function `ROOT.RDF.AsRNode`. \anchor RDFCollections; ### Storing RDataFrame objects in collections. ROOT::RDF::RNode also makes it simple to store RDataFrame nodes in collections, e.g. a `std::vector<RNode>` or a `std::map<std::string, RNode>`:. ~~~{.cpp}; std::vector<ROOT::RDF::RNode> dfs;; dfs.emplace_back(ROOT::RDataFrame(10));; dfs.emplace_back(dfs[0].Define(""x"", ""42.f""));; ~~~. \anchor callbacks; ### Executing callbacks every N events; It's possible to schedule execution of arbitrary functions (callbacks) during the event loop.; Callbacks can be used e.g. to inspect partial results of the analysis while the event loop is running,; drawing a partially-filled histogram every time a certain number of new entries is processed, or; displaying a progress bar while the event loop runs. For example one can draw an up-to-date version of a result histogram every 100 entries like this:; ~~~{.cpp}; auto h = df.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; h.OnPartialResult(100, [&c](TH1D &h_) { c.cd(); h_.Draw(); c.Update(); });; // event loop runs here, this final `Draw` is executed after the event loop is finished; h->Draw();; ~~~. C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:61639,simpl,simple,61639,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['simpl'],['simple']
Usability,"~{.cpp}; auto *tree = file->Get<TTree>(""myTree"");; tree->Draw(""x"", ""y > 2"");; ~~~; </td>; <td>; ~~~{.cpp}; ROOT::RDataFrame df(""myTree"", file);; auto h = df.Filter(""y > 2"").Histo1D(""x"");; h->Draw(); ~~~; </td>; </tr>; <tr>; <td>; ~~~{.cpp}; tree->Draw(""jet_eta"", ""weight*(event == 1)"");; ~~~; </td>; <td>; ~~~{.cpp}; df.Filter(""event == 1"").Histo1D(""jet_eta"", ""weight"");; // or the fully compiled version:; df.Filter([] (ULong64_t e) { return e == 1; }, {""event""}).Histo1D<RVec<float>>(""jet_eta"", ""weight"");; ~~~; </td>; </tr>; <tr>; <td>; ~~~{cpp}; // object selection: for each event, fill histogram with array of selected pts; tree->Draw('Muon_pt', 'Muon_pt > 100'); ~~~; </td>; <td>; ~~~{cpp}; // with RDF, arrays are read as ROOT::VecOps::RVec objects; df.Define(""good_pt"", ""Muon_pt[Muon_pt > 100]"").Histo1D(""good_pt""); ~~~; </td>; </tr>; </table>. \anchor crash-course; ## Crash course; All snippets of code presented in the crash course can be executed in the ROOT interpreter. Simply precede them with; ~~~{.cpp}; using namespace ROOT; // RDataFrame's namespace; ~~~; which is omitted for brevity. The terms ""column"" and ""branch"" are used interchangeably. ### Creating an RDataFrame; RDataFrame's constructor is where the user specifies the dataset and, optionally, a default set of columns that; operations should work with. Here are the most common methods to construct an RDataFrame object:; ~~~{.cpp}; // single file -- all constructors are equivalent; TFile *f = TFile::Open(""file.root"");; TTree *t = f.Get<TTree>(""treeName"");. RDataFrame d1(""treeName"", ""file.root"");; RDataFrame d2(""treeName"", f); // same as TTreeReader; RDataFrame d3(*t);. // multiple files -- all constructors are equivalent; TChain chain(""myTree"");; chain.Add(""file1.root"");; chain.Add(""file2.root"");. RDataFrame d4(""myTree"", {""file1.root"", ""file2.root""});; std::vector<std::string> files = {""file1.root"", ""file2.root""};; RDataFrame d5(""myTree"", files);; RDataFrame d6(""myTree"", ""file*.root""); // the glob is passed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:15179,Simpl,Simply,15179,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['Simpl'],['Simply']
Usability,"~~ {.cpp}; // clonesarray is the address of a pointer to a TClonesArray.; auto branch = tree.Branch(branchname,clonesarray, bufsize, splitlevel); ~~~; The TClonesArray is a direct access list of objects of the same class.; For example, if the TClonesArray is an array of TTrack objects,; this function will create one subbranch for each data member of; the object TTrack. \anchor fillthetree; ## Fill the Tree. A TTree instance is filled with the invocation of the TTree::Fill method:; ~~~ {.cpp}; tree.Fill(); ~~~; Upon its invocation, a loop on all defined branches takes place that for each branch invokes; the TBranch::Fill method. \anchor addcoltoexistingtree; ## Add a column to an already existing Tree. You may want to add a branch to an existing tree. For example,; if one variable in the tree was computed with a certain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tree headers; are saved.; ~~~ {.cpp}; void tree3AddBranch() {; TFile f(""tree3.root"", ""update"");. Float_t new_v;; auto t3 = f->Get<TTree>(""t3"");; auto newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");. Long64_t nentries = t3->GetEntries(); // read the number of entries in the t3. for (Long64_t i = 0; i < nentries; i++) {; new_v = gRandom->Gaus(0, 1);; newBranch->Fill();; }. t3->Write("""", TObject::kOverwrite); // save only the new version of the tree; }; ~~~; It is not always possible to add branches to existing datasets stored in TFiles: for example,; these files might not be writeable, just readable. In addition, modifying in place a TTree; causes a new TTree instance to be written and the previous one to be deleted.; For this reasons, ROOT offers the concept of friends for TTree and TChain:; if is good practice to rely on friend t",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:10887,simpl,simple,10887,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['simpl'],['simple']
Usability,"~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; ~~~; - 1st parameter - the name of class; - 2nd parameter - object; - 3rd parameter - the name of do/redo method; - 4th parameter - the name of undo method; Since redo,undo methods are the same, undo name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; ~~~; For objects derived from TObject class name can be omitted, e.g.; ~~~ {.cpp}; TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");; ~~~. 2. Setting undo, redo parameters.; ~~~ {.cpp}; Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; ~~~; 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values; Since the number of undo,redo parameters is the same one can use; ~~~ {.cpp}; com->SetArgs(1, new_color, old_color);; ~~~. 3. Undo, redo method execution; ~~~ {.cpp}; com->Redo(); // execute redo method; com->Undo(); // execute undo method; ~~~. 4. Merged commands; It possible to group several commands together so an end user; can undo and redo them with one command.; ~~~ {.cpp}; TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; ~~~. 5. Macro commands; ""Merging"" allows to create macro commands, e.g.; ~~~ {.cpp}; TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; ~~~; During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager.; TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used.; ~~~ {.cpp}; TQUndoManager *history = new TQUndoManager();; his",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx:2199,Undo,Undo,2199,core/base/src/TQCommand.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TQCommand.cxx,1,['Undo'],['Undo']
