quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability," a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most libraries, and makes their class definitions more complex.; - Control between different versions is perhaps a little easier (though a minor point): this _feels_ easier to separate out different versions, and detect what to register as the conversion function with QuTiP. This is a particular advantage for Python classes compiled as C-extensions (like from C or Cython), which typically don't allow assigning methods dynamically.; - A library could even register multiple versions of the conversion function with us, and let QuTiP handle API versioning centrally, rather than requiring downstream libraries to roll their own checks.; - We're basically already set up to do this in `dev.major` already. We'd have to modify our procedures a little bit (we're mostly concerned with cons",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:5890,down,downstream,5890,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['down'],['downstream']
Availability," conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring the circuit compiler to allow simple pulse scheduling,; > > e.g. Restriction one pulses that can be turned on at the same time.; > > - Features to perform error mitigation techniques in QuTiP, such as; > > zero-error extrapolation.; > > - APIs to allow import quantum circuits from other software packages; > > or commonly used language e.g. through quantum assembly language (qasm); > >; > > ------------------------------; > >; > > Also, the last outcomes have some overlap with the last project. Although; > > I also find this circuit importation very important, I guess two projects; > > should not have overlap if they are both selected.; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <; > https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA; > >,; > > or unsubscribe; > > <; > https://github.com/notifications/unsubscribe-auth/ADPF67EWECDUIOQMTKK2N2DREGE2LANCNFSM4KZUPCQQ; > >; > > .; > >; >; >; > —; > You are receiving this because you authored t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:6433,error,error,6433,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,2,['error'],['error']
Availability," current test of superoperator representations uses `choi_to_kraus` which also calls `scipy.linalg.eig`. Here is a file `kraus.py` that can reproduce these segfaults semi-reliably (may need to run it a few times to get it to trigger):. ```python; import qutip. s = qutip.rand_super(); c = qutip.to_choi(s); k = qutip.to_kraus(c); ```. For example, here's a similar command on this file:. ```; Debug memory block at address p=0x7f98cc467db0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d018e0). Current thread 0x0000000109fe85c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. So these both use `scipy.linalg.eig`, which is suspicious. ## Valgrind checks. To see if I could track it down, I had a go with valgrind. This isn't guaranteed to find everything, because I'm not using a debug build of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invali",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:4695,error,error,4695,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['error'],['error']
Availability," factor 2 and 30 in speedup from last time I ran them, which was consistent with times obtained by @Ericgig and saved in the folder. . I am on Python 3.7.3, I recently updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Total run time: 0.90s; Total run time: 1.13s; Total run time: 1.15s; Total run time: 1.41s; Total run time: 1.66s; Total run time: 2.03s; Total run time: 2.47s; {'solver': 'pc-euler'}; Total run time: 0.38s; Total run time: 0.46s; Total run time: 0.58s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.00s; Total run time: 1.26s; Total run time: 1.49s; {'solver': 'milstein'}; Total run time: 0.31s; Total run time: 0.39s; Total",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:1441,down,down,1441,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['down'],['down']
Availability," in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:6392,down,down,6392,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['down'],['down']
Availability," it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1177,error,error,1177,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['error'],['error']
Availability," the markdown source code per email like this, but I’m not sure if it works as I expected. The following is the markdown source code:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:1161,error,error,1161,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['error'],['error']
Availability," trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1963,error,error,1963,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['error'],['error']
Availability," we missed your last comment, but Nathan just notified us. We will get it all sorted out by wednesday at most. I leave a todolist to keep track of everything that @Ericgig mentioned. To-do. * [x] Include some tests like test_sesolve.py --> **Included tests with random Hamiltonian, ising transverse field and SHO. Both for states and expectation values. Lacking a testing example for callable e_ops**. * [x] Why <code>krylov_dim=30?</code> ? --> **There was a subtle physical reason, but we conclude its better to leave it as a free input without a predefined variable.**. * [x] <code>tolerance</code>, <code>store_states</code> and <code>store_final_state</code> --> **Changed as an Options qutip class, now tolerance is <code>Options.atol</code> property**. * [x] <code>e_ops</code> should also take a callable or list of mixed function and <code>Qobj</code> --> **Added support**. * [x] Remove support for <code>np.ndarray</code> --> **Removed for qutip cleanliness**. * [x] Assertion errors to specififc errors --> **Modified.**. * [x] Check that psi0 is a ket --> **Added**. * [x] If both <code>store_states</code> and <code>store_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:1005,error,errors,1005,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,2,['error'],['errors']
Availability," x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an issue with QuTiP. I suspect it isn't an issue with `scipy` either, but I'm not sure - it looks like a slight overwrite in MKL on macOS, though it's also possible that `scipy` passes some invalid pointers when dropping down to BLAS/LAPACK. I get the impression that the next steps involve dropping down a level of abstraction, down to Cython to directly call scipy's wrappers, or even fully down to C and link directly against MKL. I _may_ have a look in the future, but I've had enough of it today for sure.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:8183,down,down,8183,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,4,['down'],['down']
Availability,". s = qutip.rand_super(); c = qutip.to_choi(s); k = qutip.to_kraus(c); ```. For example, here's a similar command on this file:. ```; Debug memory block at address p=0x7f98cc467db0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d018e0). Current thread 0x0000000109fe85c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. So these both use `scipy.linalg.eig`, which is suspicious. ## Valgrind checks. To see if I could track it down, I had a go with valgrind. This isn't guaranteed to find everything, because I'm not using a debug build of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FE",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:4989,down,down,4989,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['down'],['down']
Availability,".36s; Total run time: 5.51s; Total run time: 6.58s; Total run time: 9.64s; Total run time: 10.74s; Total run time: 12.29s; {'solver': 'pc-euler-2'}; Total run time: 1.54s; Total run time: 1.86s; Total run time: 2.50s; Total run time: 2.79s; Total run time: 3.36s; Total run time: 4.03s; Total run time: 4.98s; Total run time: 6.56s; {'solver': 'explicit1.5'}; Total run time: 5.28s; Total run time: 6.35s; Total run time: 7.74s; Total run time: 8.99s; Total run time: 10.34s; Total run time: 12.41s; Total run time: 15.40s; Total run time: 21.40s; {'solver': 'taylor1.5'}; Total run time: 3.30s; Total run time: 3.85s; Total run time: 4.52s; Total run time: 5.63s; Total run time: 7.22s; Total run time: 8.72s; Total run time: 9.51s; Total run time: 11.84s; {'solver': 'taylor1.5-imp'}; Total run time: 5.43s; Total run time: 6.81s; Total run time: 7.60s; Total run time: 10.05s; Total run time: 11.88s; Total run time: 12.88s; Total run time: 15.63s; Total run time: 22.31s. ```; ; **Minor issue: plots breaking notebook rendering**; Jupyter Notebooks have a broken rendering when cells with plots are run; refreshing the notebook sometimes works fine. This is sometimes fixed in the first place by adding; ```; plt.show(); plt.close(); ```; but not always. Maybe we can have a look at this minor issue in the development notebooks. . **Documentation**; It would really increase the adoption rate if the API doc and User Guide could be updated to highlight the stochastic solvers and new methods. The development notebooks are so well written that drawing from their examples should be simple. . Congratulations @Ericgig for this refurbishment, improvement, optimization and thorough benchmarking investigations of the stochastic solvers, which I hope will be widely tested by @nwlambert @ajgpitch @quantshah (and @fminga) for robustness once merged in the development master branch. I am merging this and the montecarlo split PR, hoping there are no incompatibility issues (#990 --> #991 --> #969).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:6410,robust,robustness,6410,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['robust'],['robustness']
Availability,"00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d018e0). Current thread 0x0000000109fe85c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. So these both use `scipy.linalg.eig`, which is suspicious. ## Valgrind checks. To see if I could track it down, I had a go with valgrind. This isn't guaranteed to find everything, because I'm not using a debug build of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:5535,error,errors,5535,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['error'],['errors']
Availability,"> * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:289,error,error,289,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,2,['error'],['error']
Availability,"> * What is the reason that the time-dependent weights are still part of the trajectory result? That seems a bit inconsistent to me and I wonder if the `TrajectoryResult` class could perhaps just be removed?. The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I will look into it this week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851:240,avail,available,240,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851,1,['avail'],['available']
Availability,"> @cgranade I'm really liking the overall look of the Instrument class -- it's a much easier way to deal with measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. Thank you for the kind words!. > I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:; > ; > * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; > * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is id",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:934,mainten,maintenance,934,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,2,"['down', 'mainten']","['down', 'maintenance']"
Availability,"> Consider what you're doing from a statistical sense here. If everything works correctly, then you're effectively trying a two-tail hypothesis test that your test binomial distribution has a probability of 0.25, given you made `n` observations of it. The analytic success rate of your test is then; > ; > ```python; > import scipy.stats; > def success(n, p, tol):; > dist = scipy.stats.binom(n, p); > return dist.cdf(n * (p+tol)) - dist.cdf(n * (p-tol)); > ```; > ; > where `success(4096, 0.25, 0.02)` is 99.67%. Since there are 5 independent runs on Travis, that's equivalent to a failure rate of 1.6% on every single CI run, which is several orders of magnitude too high. It's probably just luck that it was Python 3.8 on both occasions - it's a one-in-five chance that in two failing CI runs, it was the same setup both times.; > ; > You have to consider what is most appropriate to fix the test, and what you can reasonably test in ~1 second of runtime. You don't want to increase the tolerance too much, because then you can get a lot of false positives even if something is broken.; > ; > If you can bump the number of runs up to 100,000 and set the tolerance at 0.01, you'll have a per-test failure rate of ~3e-13, which is more like what we'd want. If you keep it at 4096, the tolerance should be more like 0.05 (which is pretty big tbh). Thanks for the excellent analysis. I don't think it's feasible to do 100,000 given the current. efficiency. It did give me incentive to make it somewhat faster. What is a good guideline for the maximum time a test can take. It seems like I can maybe do 150 runs in ~ 1s. In any case, it doesnt seem feasible to do even 4096 claims without taking quite a bit of time. Any ideas on how to structure the test differently ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689:583,failure,failure,583,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689,5,"['failure', 'toler']","['failure', 'tolerance']"
Availability,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:742,down,down,742,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['down'],['down']
Availability,"> I ran some comparisons to the old version, and everything looks good. There seems to be some speedup both to the RHS construction and the ODE solver for most cases. Thanks! I've now streamlined things a little more, so they might be slightly faster still. > Since each individual ADO is naturally a Qobj, having HierarchyADOsState store them an array or list of Qobjs makes sense I guess. I've put this down in the v5 TODO list (just to draw a line under this PR). > 2. How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). I ended up always calling `e_ops` functions with `f(t, ado_state)`. This is a bit different to other solvers, but makes what the HEOMSolver considers the evolution state consistent. The density matrix part of the state is available as `ado_state.rho` so it's not a big hardship to retrieve just the system state. >> 3. Recheck the time dependent case.; > ; > From what I can see it looks good! Seems like basically you treat the entire RHS as an effective qobjevo? I ran through various > examples, and couldn't find any issues!. I simplified things a bit further. In the time-dependent case the RHS matrix is calculated without adding the Liouvillian to the diagonal and then the kron of the Liouvillian is added to the RHS at the end, resulting in a simpler QobjEvo. >> 4. The HEOM can't really take new QObjEvo arguments each time run is called because calculating the RHS again is quite expensive. Maybe something can be done?. Arguments are supported now because the full RHS is a QobjEvo!. >> 5. Compare performance to the HEOM in 4.7.; > ; > On the fermionic examples, with very-large system Hilbert space, there was a little slowdown in the RHS construction. Maybe the slowdown has gone away now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739:405,down,down,405,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739,2,"['avail', 'down']","['available', 'down']"
Availability,"> I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"".; > ; > I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension.; > ; > Thank you. Thank you so much for sharing this!. The cell outputs that included Qobj with Latex code wasn't rendering properly for me just like your issue (although Latex code in the Markdown cells was rendering correctly). I spent hours and tried countless online suggestions to fix the issue with no success, until I re-installed the the 'Jupyter Notebook 'Renderers' extension to the old version (v1.0.4) before it removed the latex support. Now I have the option to 'change presentation' of the output cells so it uses the old version of the extension, and now it finally displays the output with the Latex rendered correctly!. Thank you again for suggesting the only solution that worked for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1633135302:246,down,downgrading,246,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1633135302,1,['down'],['downgrading']
Availability,"> If this is supposed to be displayed in the Sphinx-rendered HTML instead of markdown. I think you need double backticks for the monospace font? E.g. `` ``Qobj`` ``. Yes, I do. Fixed.; ; > Does this also serve as a `guide on migrating from v4 to v5` or do we plan to have it separately somewhere else? It would be nice if we could summarize some common Error messages that one may see along with the solution/possible reasons. The error messages are what people usually type into Google search. This does serve as an initial guideline of what to expect, but I think we do also need a proper porting document like the one you mention.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633:431,error,error,431,https://qutip.org,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633,1,['error'],['error']
Availability,"> My biggest concern is with the addition of `**_` to some of the functions, I would argue that it is best to raise an error if the function does not have arguments. this may lead to code that works on jax being incompatible with code that works on just qutip though, so it is something to think about. We pass unused arguments when we mix different types of coefficients in solver and `QobjEvo`. So we cannot raise an error. > I could be an interesting idea for the future to consider adding a similar context manager that removes other dtypes (`CSR` and `Dense`) so that it is clear what the code is doing?. I don't understand what you mean by this... A context manager that remove dtype from those known to the dispatcher?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2015#issuecomment-1438679479:119,error,error,119,https://qutip.org,https://github.com/qutip/qutip/pull/2015#issuecomment-1438679479,2,['error'],['error']
Availability,"> Thank you for looking at this.; > ; > `store_state` should still be the final factor whether states are stored or not. It's the one available everywhere and for v4. `mesolve` with `store_state` will have `result.states` being the output density matrix. `mcsolve` with the same `store_state` and default options should return a similar result.; > ; > So it would be better to have the new option be `precompute_average_states` and have it only control if the average is compute when all trajectories is stored. The if the `average_states` property it use, it could compute the average then, but never do so if not used.; > ; > Please keep `result.states` and `result.final_states` as is. They have the same behaviour as in v4 and we want to keep them for backward compatibility.; > ; > `runs_...` and `average_...` are new to v5 and could be renamed, but it's not clear that `density_matricies` is the average while `final_states` are for each trajectories. `smesolve` and sometime for `mcsolve` individual trajectories states are already density matrices. Thus `smesolve`'s result density_matricies could work as well for all states from all trajectories, causing confusion.; > ; > You implemented the `density_matricies` property twice.; > ; > Having the options to keep only the final states without keeping all the trajectories is a good idea. Be careful that the trajectory result have the final state stored. So I'm not entirely sure what you want the behaviour to be for each set of options. I think it is confusing to return a density matrix if you request store_states - the density matrix is not the same as the state of the system, and surely v5 is the perfect time to clear up issues like this. Personally I found this behaviour very surprising when updating to V5. I do agree that `density_matricies` should maybe be `average_density_matricies`. I am happy to change `mesolve` as part of this for consistency. If you want to keep it backwards compatible would it be possible to send a li",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023:134,avail,available,134,https://qutip.org,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023,1,['avail'],['available']
Availability,"> The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I do think it would be good to keep the `trace` property on the trajectories, but for the purpose of calculating the weighted averages, it could perhaps be treated like the other types of weights that we have.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958:33,avail,available,33,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958,1,['avail'],['available']
Availability,"> What is the main difference between `expect` and `measure`? That's the main thing that comes up ; > to my mind. What different question are you answering? I also wonder if `expect` could be called. . `expect` returns the expectation value (i.e. probability weighted average of the measurements). `measure` returns a *single* measurement (i.e. an eigenvalue and an eigenstate, selected randomly with weighted probabilities). > The description of the `measure` function is a bit general maybe with this regard. But I might have ; > missed the point completely (my bad). Open to suggestions. I will also re-read it and see if I can think of something clearer.; ; > Somehow `smesolve` tests fail with Travis CI, not sure how this PR could have affected it. I'll dig a bit and see if the failure is related somehow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408:785,failure,failure,785,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408,1,['failure'],['failure']
Availability,"> You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits. Yep ! That's what I thought as well..for all the single qubit gate outputs with two targets. I knew I was getting an error but was not sure why it was not the same error as both of you. It was because I was using the released version (like you predicted). . I was trying to put off installing from source for as long as I could because I would have to install conda and other dependencies manually. Now, I did get `ValuError`. Thanks !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555:230,error,error,230,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555,2,['error'],['error']
Availability,"> `result.measurement` is not the same as `result.expect`, the measurement is an expectation value, but not of the `e_ops` but `m_ops` which are usually automatically generated from the `c_ops` and noise is added to the computed expectation value of the state of the trajectory. The noise is usually larger than the signal and makes it hard to see, but it should converge to mesolve's solution eventually.; > ; > `smesolve`'s `expect` are just the expectation value of the state of each trajectories (averaged or not depending on options) and should average to the master equation solutions with enough trajectories. Plot in cell 8 show the match is quite good. Even with enough trajectories, the numerical error from `smesolve` will be visible.; > ; > The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of a",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:707,error,error,707,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,1,['error'],['error']
Availability,"@BoxiLi Sure, the tests looks not too complex. I'm working on it. I'm grouping the gates for better error handling. @jakelishman Thanks. Sorry, I was just too lazy to set up the tests on my machine, LOL. I simply create the pull request and see if the code pass. That's why there are always one or two minor fixes here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104:100,error,error,100,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104,1,['error'],['error']
Availability,@Ericgig Could we check whether tlist is monotonic when `_safe_mode` is true? It might make the error clearer.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879184807:96,error,error,96,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879184807,1,['error'],['error']
Availability,"@Ericgig and I had a brief discussion about how to handle `inf` and `nan` generally. One option is forbid them entirely from the data layer -- i.e. to check and raise an error whenever a new data layer is created. A potential downside to this is we'd have to check often to be sure, since any operation can potentially create `nan` and `inf`, even simple addition:; ```python; >>> 1e308 + 1e308; inf; >>> (1e308 + 1e308) - (1e308 + 1e308); nan; ```; an alternative is to try propagate `nan` and `inf` only as correctly as, e.g., `BLAS`. What happens with `BLAS` is that `nan` and `inf` propagate reasonably correctly, but are considered fairly interchangeable -- i.e. `nan`, `inf`, and `-inf` are all just bad values.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1208234717:170,error,error,170,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1208234717,2,"['down', 'error']","['downside', 'error']"
Availability,"@Erotemic Thank you for documenting this. I will merge it shortly & have marked if for inclusion in QuTiP 4.6.3. Note that qutip-qip has also been split out into it's own package (https://github.com/qutip/qutip-qip) in preparation for QuTiP 5 so we should update it there too. `reverse_states` seems to reverse the order of the array of quantum and classical bits. It is a bit odd, so I'm happy to leave it undocumented. The original commit just read:. ```; commit dcf8d363718b6ee5a8a17ec9af00df4bc8aea166; Author: Robert Johansson; Date: Mon May 26 19:11:44 2014 +0900. allow reversing the circuit represenation. added support for multigate symbol; ```. @BoxiLi Just pinging you so you know I merged this and can comment if you like.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1652#issuecomment-914132388:668,ping,pinging,668,https://qutip.org,https://github.com/qutip/qutip/pull/1652#issuecomment-914132388,1,['ping'],['pinging']
Availability,"@hodgestar , I think I responded to all your comments.; The tests for core/blochredfield.py are present, I think it has a 100% coverage.; I did little cut and paste, but stayed close to the original cython code when possible. The question I still have is about the `a_ops` format: I made breaking changes from v4, so I want to be sure the new way is clear. I think `matmul_var_data` should be available in `core/data` not implemented here, but I don't want to touch that part in this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890:393,avail,available,393,https://qutip.org,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890,1,['avail'],['available']
Availability,"@hodgestar ; It's ready for another look.; I made it so the feedback can be set at `QobjEvo` creation, with `QobjEvo.add_feedback` method and with a method of the solver. `QobjEvo` with feedback can be used outside solver with a default value for the argument passed at creation. This default value is needed when creating the coefficient. When used in a solver an error will be raised if the solver cannot provide the feedback. The `QobjEvo` print will show it has feedback. . The solver method is mostly there for documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1789631286:365,error,error,365,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1789631286,1,['error'],['error']
Availability,"@jakelishman, about the two issues you raised:. 1. Import time related to `import qutip`; I agree with you that in order to make it frictionless for downstream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:149,down,downstream,149,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['down'],['downstream']
Availability,"@mcditoos Thanks more making the PR. Would you mind reverting all the unrelated changes? We don't mind small clean ups, but big clean ups should rather go into separate PRs and it should be clear why they are being made. Once you're ready for this to be reviewed, remove the draft status and ping me on the PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2261#issuecomment-1824959705:292,ping,ping,292,https://qutip.org,https://github.com/qutip/qutip/pull/2261#issuecomment-1824959705,1,['ping'],['ping']
Availability,"@nathanshammah: It seems that travis fails before it even gets to the testing, when calibrating openmp. I cannot replicate the error on my end, the calibration takes only about a second for me. I did make 535010d more similar to 5501b2e by no longer using numpy.testing.assert_raises, numpy.testing.assert_warns and a ResourceWarning. Instead I use a try-except construction now. That seems to have fixed things, so I suspect that importing/calling one of the functions or the warning makes openmp fail on the rig used by travis. As I'm pretty sure the reason for the previous failure is either a numpy or openmp issue and therefore a hard fix, I would propose to simply not use those functions, the try-except construction does well enough.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-567132755:127,error,error,127,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-567132755,2,"['error', 'failure']","['error', 'failure']"
Availability,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:988,down,down,988,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,1,['down'],['down']
Availability,"All looks good to me. Thanks a lot for changing all of that - this is all clearly good stuff and should in principle be merged. We should the Linux tests again after #1381 is merged because there is Linux-specific code in the changes that needs to be tested (the tests fail for unrelated reasons at the moment). I can't see any reason why the changes here should cause any true test failures, though - it's more a formality.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648:383,failure,failures,383,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648,1,['failure'],['failures']
Availability,"Arne,. Please propose your patch in a PR on our Github. So long as it is; mathematically sound, then the context does not matter in this case. If you need any advice on how to do this, then let us know. Email me direct; if you prefer. alex.pitchford@gmail.com. Thanks. Alex. On Thu, 21 Jun 2018 at 09:31, Arne Hamann <notifications@github.com> wrote:. > I use the qutip to do some Grover simulations. having a Hilbertspace of; > Grover an an additional entangled Hilbert space. In a simpler version there; > is only one state in the entangled Space so the program automatically; > chooses dimension 1.; > And then there are allot of errors coming because of this qutip error.; > At the moment I fixed it using a patched qutip version.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/823#issuecomment-399020891>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7QOoYa2vq7kgVYNcZdxB3vxO3FJnks5t-1n4gaJpZM4SNkIK>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399033847:633,error,errors,633,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399033847,2,['error'],"['error', 'errors']"
Availability,"As I mentioned in #853, I wonder if it's possible to completely encapsulate any use of sparse matrices to allow for different implementations, assuming a common interface. This would support both int32 and int64, as well as any other specialized implementation anyone might want to use. Obviously, this falls into the ""quite a bit of work"" category, assuming it's possible at all. Personally, I also want to clarify that in #853, I wasn't thinking clearly when I titled it ""moderately big tensor products"" (obviously, it was an insanely large product). I don't actually foresee needing anything bigger than int32. Is there a CPU-time penalty for switching to int64? If so, I would consider that more of a downside than an increase in memory usage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-382528173:705,down,downside,705,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-382528173,1,['down'],['downside']
Availability,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:1668,error,error,1668,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,1,['error'],['error']
Availability,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:753,down,down,753,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,2,"['avail', 'down']","['available', 'down']"
Availability,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:114,error,error,114,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,6,"['error', 'robust']","['error', 'robust']"
Availability,"Do you get the same behaviour with QuTiP 4.5.0 in the same environment? The offending parts of `qutip/__init__.py` have been there since then, so it shouldn't be new in 4.5.2 at least. I can't reproduce the error unless `pyximport.install()` has already been run before QuTiP is imported (e.g. if I do `import pyximport; pyximport.install(); import qutip` or `importlib.reload(qutip)`). We have `qutip/__init__.py` organised so that we don't enable `pyximport` until after we've done the test for `qutip.cy.openmp.parfuncs`: first we do. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L100-L105. and only after that do we. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L124-L126. In your error it's trying to build `qutip.cy.openmp.parfuncs`, and the only line that ever attempts to import that (in Python space) is line 101 above in `__init__`. It can only attempt to Cythonize files if `pyximport` is activated, but `qutip` doesn't activate that til a few lines later. It's certainly still a bug that this error appears if you've manually activated `pyximport` before (which would definitely cause it), but I'm struggling to find any other reason that the error could appear. We're looking to simplify the handling of OpenMP in a later version, and this buggy check is certainly a good reason to expedite that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290:207,error,error,207,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290,4,['error'],['error']
Availability,"Early thought:. The `solver.add_feedback` approach doesn't look too bad, but it does seem a bit odd because on does to specify the state parameters when constructing the operators that the define the system -- i.e. H, c_ops, etc. Could we not expose the feedback on the QobjEvo itself so that users can then do:. ```python; H = QobjEvo([op, lambda t, ket: bra @ ket], feedback={""ket"": ""qobj""}); ...; ```. or; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); H.add_feedback(ket=""qobj""); ...; ```. or even; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); solver = Solver(...); solver.rhs.add_feedback(ket=""qobj""); ```. Thoughts?. It will get a bit trickier for the feedback that is less easily available from the state, but perhaps solvers can just check whether the ops they're using need the special feedback?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538:707,avail,available,707,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538,1,['avail'],['available']
Availability,"Every `Qobj` created by qutip have `dims[0]` and `dims[1]` being list. `dims=[2, 2]` is an error that we should catch. The main issue is that there is no clear documentation or tests that clearly says what is a valid dims format. . There are some strange dimension that are produced by our function that would raise an error with `np.stack` like; `tensor(operator_to_vector(oper), oper)` but I don't think we should accept these kind of `Qobj` in the first place, so I am fine failing there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366:91,error,error,91,https://qutip.org,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366,2,['error'],['error']
Availability,"Everything else works correctly the issue appears when going to high dimensions only, 8 to be clear. I tried myself on other environments and as long as scipy is changed the instability in 8 dimensions disappears, I do not imagine what type of error can appear only in big dimensions and in a specific scipy version other than a numeric stability in the scipy version itself. Do you have any guess?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-817212665:244,error,error,244,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-817212665,1,['error'],['error']
Availability,"For point 2: adding marks right now will cause conflicts, but if #1181 gets merged then it'll be much simpler. The main issue is that a lot of the testing structure has changed for tests up to `test_mcsolve.py` alphabetically, and so in general the tests are just not the same. The principle is pretty straightforwards - just like #1181 introduces a `requires_cython` mark, we would add `uses_cython`, `uses_mkl` and `uses_openmp` marks. These would be even simpler to add than `requires_cython` because unlike it, they don't require any test-generation logic at all. The change would simply be to add them to `pytest.ini`, mark the requisite functions and then change the pytest invocation of the specialised test to `pytest -m ""uses_cython""` or whatever. As far as I'm aware, the only parts of their codebase which modify their behaviour based on whether `Cython` is available is `QobjEvo`. The other parts (like `brmesolve`) just don't work if Cython isn't there. The MKL tests would become very short; by my reckoning, MKL is only used by `steadystate` and `countstat`. OpenMP is much more pervasive, as `sesolve`, `mesolve` and `brmesolve` all use it, and parts which depend on those are generally the slowest tests. The short tests could just become `pytest -m ""not slow""`? That's not super speedy, but it takes about half the time, maybe. If you want more, then a good starting point is `pytest --durations=0` which will tell us which tests are the slowest (perhaps that was what you already did when marking the slow ones?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776:869,avail,available,869,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776,1,['avail'],['available']
Availability,"He did - he's the original feature requester, but given super super weird interactions with ufuncs (see #1433), it's not so clear to me that it was _necessarily_ the right idea to implement especially now it's causing problems with how numpy arrays are used in the library. There always was a work-around; allowing `np.array(qobj)` was more to save him from writing `x = x.full() if isinstance(x, Qobj) else np.asarray(x)`. That said, I came round to the idea more as I read more about the control we can have over the rest of the numpy infrastructure. We can allow `np.array` on `Qobj` (satisfying Michael's original request), and with a little bit of extra code we can prevent all the super weird ufunc/implicit casting behaviour, because `Qobj` shouldn't be able to implicitly interoperate with raw arrays. I know in my personal code I'd rather use `Qobj.full()`, but I no longer think it's _wrong_ to allow `np.array(qobj)` given that other people like it, even with these numpy 1.20 problems. It does make it difficult to put `Qobj` in arrays, but numpy 1.20 has ruled out being able to have `np.array(qobj)` and `np.array([qobj1, qobj2], dtype=object)`, so that's not really our fault.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1434#issuecomment-772665656:1185,fault,fault,1185,https://qutip.org,https://github.com/qutip/qutip/pull/1434#issuecomment-772665656,1,['fault'],['fault']
Availability,"Hello @hodgestar, we missed your last comment, but Nathan just notified us. We will get it all sorted out by wednesday at most. I leave a todolist to keep track of everything that @Ericgig mentioned. To-do. * [x] Include some tests like test_sesolve.py --> **Included tests with random Hamiltonian, ising transverse field and SHO. Both for states and expectation values. Lacking a testing example for callable e_ops**. * [x] Why <code>krylov_dim=30?</code> ? --> **There was a subtle physical reason, but we conclude its better to leave it as a free input without a predefined variable.**. * [x] <code>tolerance</code>, <code>store_states</code> and <code>store_final_state</code> --> **Changed as an Options qutip class, now tolerance is <code>Options.atol</code> property**. * [x] <code>e_ops</code> should also take a callable or list of mixed function and <code>Qobj</code> --> **Added support**. * [x] Remove support for <code>np.ndarray</code> --> **Removed for qutip cleanliness**. * [x] Assertion errors to specififc errors --> **Modified.**. * [x] Check that psi0 is a ket --> **Added**. * [x] If both <code>store_states</code> and <code>store_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.spar",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:602,toler,tolerance,602,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,2,['toler'],['tolerance']
Availability,"Hi @ALasek . You are right, there is a bug in the error handling.; ```; File ""C:\Users\OlekAdmin\anaconda3\lib\site-packages\qutip\qip\circuit.py"", line 2114, in initialize; raise ValueError(""dimension of state is incorrect""); ```; This check is wrong. It assumes that the state is a qubits state. Our test didn't cover the `run` method with multi-level systems. Here are the ways around:; - If you know how to hack the package, you can simply find the file and delete this error handling (lines 2113 and 2114).; - If you don't know how to do that, you can also use; ```; gate_sequence_product(qc.propagators()); ```; to compute the unitary representation of the circuit first and then apply it to the input state. I'll make a bug fix soon. But the next release may still take a while. Using `QubitCirucuit` for qutrits and qudits should be fine, it is rarely used though. So there might be bugs that are uncovered by our test. If you encounter any further questions, feel free to ask!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650:50,error,error,50,https://qutip.org,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650,2,['error'],['error']
Availability,"Hi @Ericgig , could you be a little more specific about what reworking the kwargs treatment would entail? Also if you could emphasize more concretely what you're looking for in updates to the notebooks and docs, that would be great. I do have some other observations.; 1. I do not get the KeyError message if I run the same jupyter notebook locally with the same versions of code as specified by version_table( ). I get another error instead, which actually seems more reasonable to me (something along the lines of 'use_precond' wasn't found in the keys of the dict, which clearly indicates that there's something off with the optional args thing).; 2. Also using mech_dms = np.asarray(mech_dms) fails, I think because it sees a Qobj instead of a real number.; 3. The direct patch to the KeyError mentioned above, based on my understanding of the code, would simply be to nest the assignment to 'max_iter_refine' in the 'info' dictionary inside a condition that checks if the solver is 'scipy'?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676:428,error,error,428,https://qutip.org,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676,1,['error'],['error']
Availability,"Hi @Ericgig, thank you for your feedback. I have already implemented the changes. To correct the error when plotting points with style 'l' I have made the script only sort the points when styles 'm' and 's' are specified as it was in V4.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2308#issuecomment-1911930396:97,error,error,97,https://qutip.org,https://github.com/qutip/qutip/pull/2308#issuecomment-1911930396,1,['error'],['error']
Availability,"Hi @VolodyaCO, thanks for reporting this!; I think the reason for `tlist` being overridden is because the result will be independent of `tlist` when the input is a steady-state. This can be seen in the following equations:; ![image](https://user-images.githubusercontent.com/57414022/121327018-5d313680-c913-11eb-9760-ca6004daca18.png); where rho is the initial state (`state0`) and H is the Hamiltonian of the system. I use the fact that rho is a steady-state to remove its temporal dependence. This derivation is simplified assuming unitary evolution (no collapse operators) but the same applies in the most general case where we include the collapse operators. This is my guess on why `tlist=[0]` is employed when using `state0=None`: the result does not depend on `tlist`. Hence, this is probably not a bug as the result should be mathematically correct. That being said, I would also expect the same output shape for the cases shown above unless explicitly mentioned in the docstring of the function. Thus, I think the way to go here is to document this behaviour in the docstring (as well as removing the t appearing in correlation_..._1t docstring) as any change in the output shape will break backwards compatibility. However, it may be worth considering whether this is the intended behaviour for QuTiP 5. I would suggest removing `state0=None` as possible input for simplicity in the maintenance and testing or at least I would make the example shown by @VolodyaCO to be consistent and have the same output. Let us see what the QuTiP admin team thinks :smile:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355:1394,mainten,maintenance,1394,https://qutip.org,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355,1,['mainten'],['maintenance']
Availability,"Hi @christian512, thanks for the help! I've increased `nsteps` for that particular simulation and the integration runs fine without any errors. One caveat is I have not checked the correctness of the result. . On the other hand, as soon as I tried `mesolve` on a simple Larmor precession problem, `mesolve` started either (1) throwing the typical ODE integration error or (2) integrating but producing a manifestly incorrect result (the final state is not on the Bloch sphere). The code I am using is ; ```; from qutip import * ; import numpy as np. sz = sigmaz(). init_ket = 2 ** (-1/2) * Qobj([[1], [1]]) # Bloch vector is unit x; init_dm = init_ket * init_ket.dag(). b_0 = 1; gam = 1; h_zeem = gam * b_0 * sz; h = [h_zeem]. larmor_freq = gam * b_0 ; period = 2 * np.pi / (larmor_freq); t = np.linspace(0, period / 2, 100). print(mesolve(h, init_dm, t, options=Options(nsteps=1e6)).states[-1]); ```. Which produces ; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 +0.j -263.5988765-267.24047092j]; [ -2.1425229 +0.49907152j 0.5 +0.j ]]; ```; Edit: I have also tried playing around with `atol` and `rtol` without any success.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503:136,error,errors,136,https://qutip.org,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503,2,['error'],"['error', 'errors']"
Availability,"Hi @jakelishman do you have any further doubts about the issues with scipy 1.4 `linallg.eigenh() API` ? To me it is clear that we have to deprecate support for it, as any code that relies on calculating eigenvalues for large matrices has this MKL error, which it often does not show, and instead of terminating returns an incorrect numeric value. This affects not just this code but any possible high dimensional calculation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-818701546:247,error,error,247,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-818701546,1,['error'],['error']
Availability,"Hi @nathanshammah ,. Indeed you are right, but I was concerned that with large Hilbert spaces as in my case storing the individual states at all measuring times would be simply unaffordable. That is why I was wondering if mcsolve could provide not only averaged observables but also the associated statistical errors. I hope this clarifies my problem. Thanks for the example too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1032#issuecomment-533216900:310,error,errors,310,https://qutip.org,https://github.com/qutip/qutip/issues/1032#issuecomment-533216900,1,['error'],['errors']
Availability,"Hi @nathanshammah,. Could this issue perhaps be broken into sub-tasks in some way, perhaps, in order to enable work starting on it a bit more feasible?. Also, I can see it's been labelled as a ""good first issue"" but it seems to me the definition of done (i.e., what would a PR - or a set of PRs - that would successfully address the problem entail?), with respect to the entire issue, could be clarified a bit further, and the breakdown into sub-tasks (which itself might result organically from some further discussion) might help a bit in that direction. Regarding possible approaches for handling randomness - I have to admit I've started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:827,failure,failures,827,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['failure'],['failures']
Availability,"Hi @tehruhn, I also have the error but it does not appear when using jupyter so I missed it. The error comes from a line inside a `try` block, so I am not sure why it is not properly suppressed... I did touch much in that area so it should be a simple fix.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1109#issuecomment-542708686:29,error,error,29,https://qutip.org,https://github.com/qutip/qutip/issues/1109#issuecomment-542708686,2,['error'],['error']
Availability,"Hi @yuli139304,. I can't really make out from the code you have written what you are trying to achieve -- it simply looks like you are using numpy and Qobj incorrectly. Could you type out in terms of Sx_nv, ... and D_xx, ... what you want using simple arithmetic? E.g. maybe you want `D_xx * Sx_nv + D_yy * Sy_nv + D_zz * Sz_nv` (which just works as is)?. Then once you have the simple expression written down, you can make it fancier (e.g. use np.dot, etc) if you need to. I'm going to close this for now because this doesn't look like a QuTiP bug, but feel free to ask more questions, either here or preferably on the mailing list.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1848#issuecomment-1093459741:405,down,down,405,https://qutip.org,https://github.com/qutip/qutip/issues/1848#issuecomment-1093459741,1,['down'],['down']
Availability,"Hi Anna, thank you for replying can you please give some more information about which particular part/s of the user guides you are finding these errors?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322:145,error,errors,145,https://qutip.org,https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322,1,['error'],['errors']
Availability,"Hi Louis,. There is work in development that will allow `QobjEvo` to be build from callback also, not just list. This will make callback work anywhere easily. . I was in the impression that H callback worked already for mcsolve. I rewrote part of mcsolve and broke it. Looking at your commit, I inverted `_funcrhs_with_state` and `_funcrhs`...; Sorry to have you take time to correct it. The 20x is big, but the list format allows for optimizations that are hard to do with a callback. A big one is that you don't need to create a new matrix/Qobj when calling `mul_vec`, just use it. With this code, I see a 20x between `mul_vec` and creating a Qobj a python function. . ```; import numpy as np; import qutip as qt. qoe = qt.QobjEvo([qt.qeye(3),[qt.destroy(3), lambda t,_:np.sin(t)]]); qoe.compile(). o1 = qt.qeye(3); o2 = qt.destroy(3) ; def H(t):; return o1 + o2 * np.sin(t). v = np.ones(3)+0j; %timeit qoe(0); %timeit qoe.mul_vec(0, v); %timeit H(0); %timeit H(0).data * v; ```. One optimization you could do is having the callback return a `np.array` instead of a Qobj. In `mcsolve`, this would probably be simple to implement and I expect some speed gain. But it can't really be officially supported in Qutip, for now. . ps. All those 'redundant' argument setting are for reusing the system (`ss`) in multiple call of `mcsolve` with different args, used in `correlation`. Using string coefficient, the compilation step can take a few second, so it is set to be able to reuse a compiled system, changing the `psi0`, `args`, `e_ops`, etc. This will become a less obscure feature in v5 when solver object are available.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634:1241,redundant,redundant,1241,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634,2,"['avail', 'redundant']","['available', 'redundant']"
Availability,"Hi Subimal,. This happens because of the truncation of the Fock space. You can see a related discussion here ; https://groups.google.com/g/qutip/c/DD6z8kYUU1I/m/k48XZS1AAgAJ. But in short, with truncation there is always an error in the commutators, so for truncating the Fock states at N photons, I think you find that [a,a.dag()] = \sum_{n=0}^(N-1) |n><n| - N|N><N| (you can check this by writing out these operators as projectors onto fock states, you will notice a*a.dag() is missing a term due to the truncation that should cancel with a term in a.dag()*a). Similarly putting the creation and annihilation operators into the position/momentum definition of the Hamiltonian, you find H = sum_{n=0}^(N-1)(n+0.5) |n><n| + N/2 |N><N|. Hence, since you truncated at 9 photons in your example, there is a degeneracy of the 4.5 eigenvalue. I am not sure if there is much can be done about this in general, perhaps the discussion I linked above might be useful. The main message I suppose is always take a larger cut-off than you think you might need, particularly if you are relying on the commutation relations to simplify things for you (which, given your example, can be a bad idea some times!). . I guess there is an interesting question about what is the best practice in these things, e.g., if you have a non-linear model, what form is it best to put it in before moving to a truncated basis? given your example, I would expect something like normal ordering to be better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770:224,error,error,224,https://qutip.org,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770,1,['error'],['error']
Availability,"Hi paul,. Thanks for the feedback. I think maybe Rob had originally included the mkl stuff, but I took it out when I was bug fixing. Will put it in, I didn't realize it gave such a big performance boost. thats cool. I will also follow your advice and stick in a finite frequency to make sure all the solvers work. . I had a poke around in discussion forums for numpy and scipy, and it seems like the problem is that they throw an exception when they decide L is ""exactly singular"" (which technically it is). Sometimes numerical rounding errors prevent this exception, as occurs in larger systems, or adding a finite frequency, so it tries to solve it anyway and succeeds, because the projector Q on the right-hand side guarantees a solution. Conversely, matlab will just throw a warning, and try and solve it anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/528#issuecomment-243988381:537,error,errors,537,https://qutip.org,https://github.com/qutip/qutip/pull/528#issuecomment-243988381,1,['error'],['errors']
Availability,"Hi, @abhisekupadhyaya nice work! . Usually a high cognitive complexity indicates that the function is too long or too deep for understanding and maintenance, but sometimes it exaggerates a bit, so it's fine as long as everything is clear. To reduce the function length, for example, if the checking part and each gate parsing can be resued (e.g for QASM v2), they can be defined in a separate function. Another minor thing, what about leaving a short warning when ignoring the unsupported code?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745:145,mainten,maintenance,145,https://qutip.org,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745,1,['mainten'],['maintenance']
Availability,"Hi, I would like to contribute to this issue as part of the UnitaryHack2024. I will incorporate a basic use of gates module to guide-basics.rst and a table of the available gates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389#issuecomment-2140841510:163,avail,available,163,https://qutip.org,https://github.com/qutip/qutip/issues/2389#issuecomment-2140841510,1,['avail'],['available']
Availability,"Hi, thak you for the feedback it is really helpful. Using lower density matrices is reducing my time by 10%, and without the fix it produces error; it is an excellent finding.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822574194:141,error,error,141,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822574194,1,['error'],['error']
Availability,"Hi, thank you all for the answers, and sorry for the delay. I understand there is some confusion because what I'm trying to do doesn't really have a physical meaning, I simply wanted to convert between matrices and vectors because I'm looking for computational gains by doing so. ; If this was numpy, I would simply use numpy.reshape. ; I guess it actually makes sense if this is not a permitted operation in qutip, I was just exploiting the operator_to_vector function for a different reason. @quantshah ; Thanks, I tried the code, but even the test_vec implementation fails with error ; File ""qutip\superoperator.py"", line 278, in vector_to_operator; shape = (np.prod(q.dims[0]), np.prod(q.dims[1])). IndexError: list index out of range. @jakelishman ; Thanks for the tip for the tensor product basis state creation.; It's not a density matrix that I want to do, I just wanted to reshape the array. As a side note, I notice that I have a very large computational cost when I work with dense matrices and state vectors, as you do when you simulate a quantum circuit with parametric rotations on each qubit, and this is due to the fact that qutip uses a sparse matrix representation. If I do the same operations with numpy I get a large computational gain, because the arrays are dense. Is there any way that I don't know about to save the Qobj data in dense form?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-601662221:581,error,error,581,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-601662221,1,['error'],['error']
Availability,I am not really seeing the seg fault clearly in this trace. ; Please could you add some more description in here about what exactly you doing. That is steps to replicate. Please also include details about your environment by running `qutip.about()`,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-595872761:31,fault,fault,31,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-595872761,1,['fault'],['fault']
Availability,"I closed the issue; it is too vague, sorry about that. From: hrahman12 ***@***.***>; Sent: Wednesday, April 20, 2022 5:16 PM; To: qutip/qutip ***@***.***>; Cc: Anna Naden ***@***.***>; Author ***@***.***>; Subject: Re: [qutip/qutip] Details of QuTiP user's guide (Issue #1759). Hi Anna, thank you for replying can you please give some more information about which particular part/s of the user guides you are finding these errors?. —; Reply to this email directly, view it on GitHub<https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AN2AJU6X7MKML5BRRV4IWHLVGB62PANCNFSM5LYUHNQA>.; You are receiving this because you authored the thread.Message ID: ***@***.******@***.***>>",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759#issuecomment-1104665213:423,error,errors,423,https://qutip.org,https://github.com/qutip/qutip/issues/1759#issuecomment-1104665213,1,['error'],['errors']
Availability,"I completely agree with you that random tests really aren't the right way to go in general, but right now our problem is that basically QuTiP's entire testing suite is based on randomised tests, and that's an awful lot of technical debt to overcome any time soon :(. . The `dnorm` tests have historically been a huge problem, even though basically nobody's worked on `dnorm` for a long long time now (for context, see in particular #880 and #874). We don't actually even know if the failures in `dnorm` are deterministic and reproducible, although it turns out that I had a brief look into this when I joined as a GSoC student about a year ago... I don't remember doing it at all!. I know this is super inelegant and not the perfect method, but it's kind of a nasty trade-off - I don't have time to really dig into `dnorm` (a topic I know almost nothing about) to work out an appropriate solution to temperamental errors, we do want `dnorm` to be tested since we're shipping it, and the slight flakiness keeps causing us test suite failures about 1 in 10 times. I'm somewhat opposed to fixing the random seed because having the variance over several test runs does actually help us cover more ground (eventually) - fixing it to a ""known good"" seed actually seems to me to be more of a mask of potential problems than this. Of note: the pytest plugin I'm using reports the number of reruns it performed in the analysis at the bottom - they show up in a yellow alongside the ""skips"" and ""xfails"" - so it's not completely hidden. I'd love to have a property-based testing suite like hypothesis up and running - that definitely seems like the proper solution to this in the end. In the meantime, I'm open to swapping to a fixed random seed if you think that's much better - testing is one place where I'm really aware of my lack of formal experience in software engineering, so I'm basically just learning as I go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227:483,failure,failures,483,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227,4,"['error', 'failure', 'mask']","['errors', 'failures', 'mask']"
Availability,"I don't have xvfb (pytest-xvfb) installed specifically for qutip, but it is used by other packages (The general use of pytest-xvfb is to facilitate testing of GUI, graphical or windowing functionality without having an normal Xserver active. That is, it can be useful for automated CI testing of gui packages, for instance in chroots or cloud CI infrastructure). Since qutip doesn't use xvfb directly this bug won't be a problem for general CI testing, where only qutip is loaded on a cloud instance (for instance Debian testing done at https://ci.debian.net/packages/q/qutip/). But before I upload a package to the Debian infrastructure, I like to run the tests on my own system to be confident they're likely to pass. So this is where the problem happens, running tests on my own system, where I have pytest-xvfb installed for testing other packages. (pytest has this bad habit of loading all available plugins whether or not they're actually used by the tests being run. It's quite annoying actually. It would be better if it only loaded plugins specified in conftest.py). So the use case is running the qutip tests on my own system, where pytest-xvfb simply happens to be installed for other purposes not related to qutip. There are ways of working around the problem, for instance the `--no-xvfb` option could be explicitly added to the `pytest` command line. But it can be useful if the test code itself can be made robust with respect to the problem (e.g. in this case just replacing `plt.clf()` with `plt.close('all')`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791:895,avail,available,895,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791,2,"['avail', 'robust']","['available', 'robust']"
Availability,"I guess there's two things, firstly as you go to higher energies, again convergence errors will appear as levels near the cut-off are sensitive to the cut-off. Also, I think you can see the repeated eigenvalue around the middle of the spectrum which was recently discussed here as a consequence of truncation https://github.com/qutip/qutip/issues/1587 . Secondly, as far as I can see the +- x examples give similar convergence. This example is easily solved analytically, the energies are just that of a normal harmonic oscillator + displacement (+-3 in your case) -0.5. You can calculate this with a couple of just linear coordinate transformations in x. Perhaps there is some issue with your +x solution in pyslise?. Also, for this type of question, you are likely to get good feedback/help from the community if you post to the qutip google group https://groups.google.com/g/qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1597#issuecomment-874060820:84,error,errors,84,https://qutip.org,https://github.com/qutip/qutip/issues/1597#issuecomment-874060820,1,['error'],['errors']
Availability,"I had a quick stab at this by adding a Metaclass to Qobj (I tried doing this within `__new__` but could not get it to work. If it's possible I accept suggestions). ; I am also unsure if your constructor `Qobj` is supposed to be called with positional, kwargs or a combination of both. If it was only kwargs the implementation could be more terse. I assumed that the `copy` argument gets passed as part of `__qutip_qobj_interface__`, as in the conversion it might be necessary to copy anyway so the downstream implementor is responsible for taking care of the copy if requested. ```python; class QobjMetaclass(type):; def __call__(cls, inpt=None, dims=None, shape=None,; type=None, isherm=None, copy=True,; fast=False, superrep=None, isunitary=None):. if isinstance(inpt, Qobj):; pass; elif hasattr(inpt, ""__qutip_qobj_interface__""):; inpt_data = inpt.__qutip_qobj_interface__(copy=copy). inpt = inpt_data['matrix']; dims = inpt_data['dims']; copy = False. obj = cls.__new__(cls, inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); obj.__init__(inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); return obj. class Qobj(object, metaclass=QobjMetaclass):; ...; ```; I'm quite sure this implementation can be improved, however. On the NetKet side, the implementation is very simple. At the moment we only support operators from H->H.; ```python; class AbstractOperator:; ... ; def __qutip_qobj_interface__(self, dims, copy=True):; return {'matrix': stacked_rows_to_stacked_cols(self.hilbert, self.to_sparse()),; 'dims': [list(self.hilbert.shape), list(self.hilbert.shape)]}; ```. This already is quite nice and allows for quick and simple interoperability. Some comments/questions:; - Qutip uses stacked columns (column major) ordering for the tensor products, as opposed to NumPy `kron` ordering that is stacked rows, right? ; - To signal that an object is a super-operator (Liouvillian) is it sufficient to pass a correctly constructed `dims` or I should also provide `s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601:498,down,downstream,498,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601,1,['down'],['downstream']
Availability,"I have tried the simple two-level systems in http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html and found an unexpected error, could you help to solve this problem #854 ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-382599620:135,error,error,135,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-382599620,1,['error'],['error']
Availability,"I installed visual studio 2015 from https://visualstudio.microsoft.com/vs/older-downloads/ , after that I simply followed instructions of qutip documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-480488981:80,down,downloads,80,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-480488981,1,['down'],['downloads']
Availability,"I re-launched the Travis tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:91,error,error,91,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['error'],['error']
Availability,"I think `hypothesis` is the best method here in the long term, but it will most likely have to be a long-term goal. I think the main pro in favour of it is that it actually is making an attempt to remove randomness; it's attempting to comprehensively test a spanning set of input parameters, rather than just Monte-Carlo'ing our way through and hoping. There's a couple of points which make it difficult to implement:. 1. QuTiP can be quite fragile with respect to unexpected input formats, particularly in older parts of the code.; 2. Various components are only accurate up to some tolerance, and the error propagation to work out how that corresponds to useful measurable quantities can be rather tricky. Those are certainly both solvable problems, and point 1 in particular is just general improvement of usability. The second point is about designing the tests well, which again is certainly doable, but will take a while (it takes long enough just to refactor them, let alone a total rewrite of large chunks of them!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663:584,toler,tolerance,584,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"". I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427:237,down,downgrading,237,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427,1,['down'],['downgrading']
Availability,"I thought we had resolved the installation issues with the Fortran side by making the MC solver a optional (default to False).; I am not that I have fully digested everything in this thread, but @zerothi seems confident that there is just some small change that we need to improve integration with the latest Numpy. Its not clear to me what are the risks or other downsides.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155040632:364,down,downsides,364,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155040632,1,['down'],['downsides']
Availability,"I tried your suggestions but unfortunately nothing changes. I think my issue is with the way the rotating frame approximation is being implemented. Prior to this, my issue was that the graph couldn't be plotted over a large time scale because w0 is so high, so I added (w-w0) to H0. That fixed it, but I'm not sure how that affects the H1_coeff function. Is it as simple as including a (w-w0) term there as well, or do I need to adjust it some other way? As you can see, the pulse does exist, but for some reason nothing I change in the code causes the pulse to affect the graphs in any way. . Also, I realized that the heaviside function may not actually be appropriate for this situation. My goal is to create a pulse that spikes up and dies down, but the heaviside function is a step function so it spikes up and stays there. Do you know if qutip has any functions for such pulses?. ![k](https://user-images.githubusercontent.com/29261370/113001273-42ce2600-9136-11eb-84f3-a4bcdd7c458f.PNG)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1466#issuecomment-810278045:744,down,down,744,https://qutip.org,https://github.com/qutip/qutip/issues/1466#issuecomment-810278045,1,['down'],['down']
Availability,"I understand completely!. I'd probably just go to `int64` with your internal CSR implementation for the moment. Would it be very easy to have the `int32`/`int64` boiled down to a single compile-time flag, for those people that compile QuTiP manually and feel they really need the smaller `int32` matrices? The pre-compiled pip/conda releases could be `int64`. That might be a simple way to provide some support for ""both"". Somehow, I thought that SciPy would put a lot more emphasis on performance, and do things like Kronecker products without conversion. It would seem that SciPy should be the place to really optimize the sparse linear algebra implementation, including all the possible combinations like `CSR * DIA`. Then everyone could build on top of that, making custom sparse-matrix implementation unnecessary. Maybe when someone gets some serious funding for working on QuTiP, encapsulating all of this better would be doable. So, just something to keep in mind before bolting on too many things onto the existing custom implementation (like multiple sparse and full storage formats). Once you open up that can of worms, it just might be better to re-design `Oobj.data` to have a very broad base (e.g. SciPy), and keep the custom CSR as an optional, highly efficient implementation for the special case, maybe in a separate package. Either way, it's going to be a lot of work, and not something for a minor-version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384094285:169,down,down,169,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384094285,1,['down'],['down']
Availability,"I use the qutip to do some Grover simulations. having a Hilbertspace of Grover an an additional entangled Hilbert space. In a simpler version there is only one state in the entangled Space so the program automatically chooses dimension 1. ; And then there are allot of errors coming because of this qutip error. ; At the moment I fixed it using a patched qutip version. And I think there are more cases when one has dynamical dimensions of a space, that there are cases in which the dimension is 1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399020891:269,error,errors,269,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399020891,2,['error'],"['error', 'errors']"
Availability,"I will vote for a deprecation warning being raised for a few versions of QuTiP with a `compile()` function that does nothing. The deprecation warning can briefly explain what changed and how to tackle it (in this case simply not use `.compile()`). It can also raise an error based on QuTiP's version such that our tests warn us about needing to remove it. Even if its a rarely used function and mostly employed internal, I still think that we should deprecate it appropriately as it will help making a smother transition to QuTiP 5.0.0. A HOW TO with some of the most significant porting changes is a also useful but I would prefer if it does not substitute deprecation warnings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1176355115:269,error,error,269,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1176355115,1,['error'],['error']
Availability,"I would like to try to build the solution for this. **Task 1:** For chrome, the error seems to be due to the CORS (Cross-origin Resource Sharing) policy of google chrome.; `Access to XMLHttpRequest at 'file:///C:/Users/Sid/Desktop/qutip-doc/QuTiP_tree_plot/d3_data/qutip.json' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.`. To fix this, I created a local server (on port 8080) from the `../qutip-doc/QuTiP_tree_plot` folder and then ran the URL `http://localhost:8082/qutip_org.html` on chrome.; Egde doesn't seemed to have any problem in running `qutip-doc.html`. **Task 2:** ; Clarification - We would right a new script to generate `qutip.json` from `apidoc/functions.rst`, just like `QuTiP_tree_plot/qutip-structure.py`. Am I right?. **Task 4:** ; Can you please elaborate on task 4 as to link to which API docs. **Task 5:**; The script written in Task 2 can be made to run for `classes.rst` and a json file would be created which would be used to generate a tree, right?; Where would we put it in the docs? guide-overview?. PS: I'm sorry if I've asked or stated an obvious thing, I am new to this community and am still trying to fimiliarize myself. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588:80,error,error,80,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588,1,['error'],['error']
Availability,"I'd be vastly surprised if there's a way of permitting a test which passes 99% of the time - on any particular test run how would it know?. I don't remember having seen anything about setting the initial seeds, but relying on a previous test to set a seed isn't a good idea - you'd always have to ensure that no tests were ever added or changed in-between that ever used random state or everything would get lost. We could fix the random seed for any test which uses random methods with a fixture to get around that. I actually think this is a true failure; the default solver `rtol = 1e-6`, but here we're using `rtol=1e-7` as the test, so the test is bugged (it's probably not the only one, and I may have missed some of these in `mcsolve` too). I should change this when I convert `test_mesolve.py`. Also, I clearly didn't read the log properly on that one - I thought it was one of the random errors from before!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625290303:549,failure,failure,549,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625290303,2,"['error', 'failure']","['errors', 'failure']"
Availability,"I'll add that it might be worth addressing the fact that there are two common conventions for representing quantum states as tensors that each have their pros and cons. Perhaps this would be better placed in a separate issue, but I'll explain here anyway. Consider a joint state like $` |\psi_1 \psi_2 \rangle \langle \psi_3 \psi_4 | `$ where the dimensions of $` |\psi_i\rangle `$ are $` d_i `$. Two common representations of this abstract state as a tensor are; 1. $` (|\psi_1\rangle \otimes |\psi_2\rangle) \otimes (\langle \psi_3| \otimes \langle \psi_4|) `$, which has shape $`(d_1, d_2, d_3, d_4)`$; 2. $` (|\psi_1\rangle \otimes \langle \psi_3|) \otimes (|\psi_2\rangle \otimes \langle \psi_4|) `$, which has shape $` (d_1, d_3, d_2, d_4) `$. These two conventions essentially correspond to the ""super"" and ""choi"" representations for channels. Representation 1. is nice when you are doing most of your calculations with pure states, but then want a density matrix towards the end, which you can do with just `np.tensordot(my_ket_tensor, np.conj(my_ket_tensor), 0)`. Representation 2. is nice when you are working with density matrices and want to combine multiple subsystems, which you can do with `np.tensordot(my_density_tensor_1, my_density_tensor_2, 0)`. Doing either of these operations in the other representation involves very error-prone index permutation in my experience. When I said above that these two conventions should be ""addressed"" in some way, I was intentionally vague because I'm honestly not sure what the best way to do that would be. One option would be to simply mention it in the user guide somewhere, perhaps near the section on the Super and Choi representations. Another would be to support both conventions via optional parameters like `to_tensor_rep(my_qobj, convention='super')` or `to_tensor_rep(my_qobj, convention='choi')`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2353#issuecomment-2007183867:1341,error,error-prone,1341,https://qutip.org,https://github.com/qutip/qutip/issues/2353#issuecomment-2007183867,1,['error'],['error-prone']
Availability,"I'm a fan of the CodeClimate complexity tests, but I wouldn't be averse to removing its complaints about ""TODO"" comments - I'm not sure what we really gain from that in this sort of open-source development. In a business where people are working full-time then I imagine it can be worth preventing a merge to finalise some details, but in our very decentralised development, really in some cases (especially in the next major release), we do need to merge in parts of code we know to be imperfect. That said, we probably should make an effort to clear out some of the TODOs and FIXMEs that are in the codebase already. Pushed fix-up changes since last review:; - wrapped the steadystate SciPy linalg functions so they're simplified at the point of call, and unknown keywords in old SciPy versions are just silently ""eaten"" (this is the same behaviour that the file used to have, just formalised a little more).; - added `TODO` in a comment in `qutip.cy.pyxbuilder`; - changed the static class attributes in `test_superoper.py` into a `setup_method` function. *edit*: oh yeah, forgot that there were still errors in some old SciPy bits in the control module as well. I'll push a fix to that before this needs reviewing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305:1105,error,errors,1105,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305,1,['error'],['errors']
Availability,"I'm not sure about this, but I think that we should keep tensor as simple as possible. Meaning that we could support tensor products of superoperators with the same representation, if that operation makes any sense, but not have it converting between different representations or doing any reshuffling to make sure that `to_super(tensor(A, B)) == tensor(to_super(A), to_super(B))`. If there are any important use-cases where this property would be important we could reconsider this. Do you have any examples in mind?. If not I would recommend we raise an error if tensor is called with superoperators with different representations, and set Qobj.superrep to the correct representation if all arguments are the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99#issuecomment-39528800:556,error,error,556,https://qutip.org,https://github.com/qutip/qutip/pull/99#issuecomment-39528800,1,['error'],['error']
Availability,"I'm sorry I don't have a huge amount of time at the moment, but just to add an extra point (that it looks like I didn't think about before): if we _do_ add this, then any method that requires an unconditional `import qutip` in downstream packages probably isn't a suitable solution - `import qutip` already takes far too long (though a lot of this is importing various parts of `scipy`, which another library might do on our behalf), and it means that they'd have to do their own import checking to handle optional dependencies. In that sense, (ab)using Python's duck-typing with a magic method might be the best way to break the dependency/import problem. I'm definitely still against implicit conversion to `Qobj` in pretty much any situation - I can imagine we could define a safe, fairly forward-compatible interface for letting people do `qutip.Qobj(x)`, but as it stands, that's the limit that I'd want the interface to be used for. I particularly am really against the idea of implicit conversion. I don't see an advantage to allowing QuTiP functions to act implicitly on other objects; it means our own functions are slower (because we have to explicitly test inputs on _everything_), and it restricts us more from improving `Qobj`'s internals, because we have to maintain compatibility with the interface. We'd never really be able to output anything _other_ than a `Qobj` without this, so there's no reason not to just have the user convert the inputs to `Qobj` explicitly themselves - that isolates the efficiency penalty so you only pay it if you need it, and it'll likely be clearer in the end anyway, because explicit is better for following the logic than implicit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301:227,down,downstream,227,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301,1,['down'],['downstream']
Availability,"In `brtools`'s tests, we could check that the results `eigenvector` are mathematically right, without matching `scipy`'s result. Should be quite simple and we would more resilient to changes in scipy. . Did anybody check if it solves the segfault issues on Mac yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299#issuecomment-649523632:170,resilien,resilient,170,https://qutip.org,https://github.com/qutip/qutip/issues/1299#issuecomment-649523632,1,['resilien'],['resilient']
Availability,"In general in pytest we use the bare keyword `assert` for almost everything. All the functions in `np.testing` are from the ""before times"", when test tooling wasn't as good as it is nowadays - they were a big improvement on available warning messages back before 2015. Nowadays, though, `pytest` does introspection on assertion failures, so it has even better message reporting than the `np.testing` functions, and it lets you write much clearer code. For example, `assert_equal(x, y)` is much better spelled in pytest as `assert x == y`, because it's much faster to read and pytest does better error reporting for it. Similarly, testing for exceptions is better with; ```python; with pytest.raises(ValueError):; call_that_raises(1, ""hello, world""); ```; as opposed to the numpy form `np.testing.assert_raises(ValueError, call_that_raises, 1, ""hello, world"")` - the pytest one is much easier to read, and the error message is better. The only numpy one we still use is `np.testing.assert_allclose` when we're comparing several numpy arrays. That's just because `pytest` doesn't have a good function that's aware of multidimensional arrays (at least not one that I know). This file still has a load of old numpy testing code in it (e.g. `np.testing.assert_equal`) because it was written quite a long time ago, when that was the recommended way of doing things. We're changing over slowly, so we can take advantage of all the nice features of pytest. In this case, I changed `np.testing.assert_allclose(x, y, atol=tol)` to `assert abs(x - y) < tol`. I removed `np.testing.assert_allclose`, because that gives the mistaken impression that we're comparing arrays (we're not, we're comparing two scalars). I could have changed it to `assert x == pytest.approx(y, tol=tol)`, except in this case the test file hasn't been converted to `pytest` style yet, and I wanted to keep the total change of this PR as small as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671:224,avail,available,224,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671,4,"['avail', 'error', 'failure']","['available', 'error', 'failures']"
Availability,"In theory the `correlation_2op_1t` function is only valid when you pass in the steady state solution of the Liouvillian. However, we implement it just by calculating `<A(t) B(0)>` - it's not _immediately_ clear to me that that our output is necessarily correct when you don't pass in a steadystate (especially if `taulist` doesn't start from 0). I _think_ it's fine in all cases, but perhaps Neill you can check me on that front?. I'd agree with Neill that truncation of the thermal state basis is likely the reason you were failing to get that to work exactly right. The tolerance calculation will actually be a bit more involved because QuTiP returns a normed dm. That will cause all the values to shift by relatively the same amount, and then you've got to factor in the solver tolerance on top of those errors, but the principle is correct for sure. *edit*: I'm happy and ready to merge this, but I'll just hold off for a day or so in case Neill has chance to answer my last minor query.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1478#issuecomment-815021669:572,toler,tolerance,572,https://qutip.org,https://github.com/qutip/qutip/pull/1478#issuecomment-815021669,3,"['error', 'toler']","['errors', 'tolerance']"
Availability,"Interesting... You see, the gate `Gate(RY, targets=[0, 1], controls=None)` is clearly wrong because RY acts only on one qubits. I guess you are probably using a released version of QuTiP (4.5.2/3 maybe) and not the master branch. This error was hidden before in those released version. If you try to install from source (http://qutip.org/docs/latest/installation.html#installing-from-source) (which you have to if you want to contribute anyway), you will probably see this error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275:235,error,error,235,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275,2,['error'],['error']
Availability,"It seems to me that what counts in the end is how good the result of the simulation in the truncated Hilbert space coincides with the exact solution for the infinite Hilbert space. As an example I tried it out on a pumped mode in a cavity (https://gist.github.com/bastikr/136908ce690b299e2e82bd13ab2cb47a). Both approaches, i.e. using the analytically generated coherent state or generating it with the displacement operator as initial states, yield pretty much the same error compared to the analytic result. I may have made a mistake or simply misunderstood your statement. Can you maybe further help me to understand this issue?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/683#issuecomment-293311686:471,error,error,471,https://qutip.org,https://github.com/qutip/qutip/pull/683#issuecomment-293311686,1,['error'],['error']
Availability,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:106,error,error,106,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,4,['error'],['error']
Availability,"Many thanks for your kind reply. Unfortunately, I can not do that, because there is cases in my hamiltonian in which that matrix is not diagonal, I am just trying from the simplest case, actually my goal is to have a term ""S_vector * D_matrix *S_vector"" . Could you please explain how I am using Qobj incorrectly and how to used right. The error message states that since S_vector is a Qobj I can not multiply it with the D_matrix. If I put Qobj(D_matrix) then I can not multiply them because all terms are Qobj.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266:340,error,error,340,https://qutip.org,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266,1,['error'],['error']
Availability,"May I propose another approach for testing normalization: use a non-hermitian Hamiltonian and `qeye` as the e_ops.; Then it is clear if the normalization step does it's work or not. Otherwise the `tol` should be very strict, the error between before and after the normalization is usually quite small. `sesolve` does not differentiate between an `unitary` and a `dm`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1148806235:229,error,error,229,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1148806235,1,['error'],['error']
Availability,"Most of it is already in qutip or in development:; - We already have a progress bar.; - We have feedback to support solvers where parameters are changed depending on the current state. Those should not updated at each time-step, but included in the rhs. Otherwise, it will increase runtime and often the numerical error. We mostly use multistep method (Adams and BDF) which are particularly sensible to that.; - In my rework of `mcsolve`, I'm including the capacity to stop after a certain time, (already merged) and after the error bar gets under a certain tolerance. I have not though an equivalent for `me/sesolve` would be needed but it would be simple enough to add. We could have function that takes the expect value and tell the solver to stop or continue. ; - I was thinking of adding the ability to step through the evolution (draft in #1455):; ```; solver = MeSolver(H, c_ops, options=opt); solver.start(t0, rho0); for t in [t1,t2, ...]:; rho_t = solver.step(t, args=new_args); ```; Which would work like a `yield`:; ```; solver = MeSolver(H, c_ops, options=opt); for rho_t in solver.yield_run(rho0, tlist):; if needed:; solver.update_parameter(args=new_args); ```; I prefer using steps since you don't have do define `tlist` first, you could use it in a `while True` loop or interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451:314,error,error,314,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"My thinking on this basically comes down to two points. First, the behavior of `composite` is explicitly not the same as that of `tensor()` or `super_tensor()`, as it's a common usecase to compose operators defined on different subsystems without reference to representation. While I agree that it would be good to have more generic wire-bending support in QuTiP, I think that's likely out of scope for this particular feature, as it would require some significant rethinking of how `dims` is currently implemented. Second, I think that it's entirely defensible that the current behavior of `composite` promotes operators by `spre() * spost()`, as this is consistent with the view that superoperators are matrix representations of group action by conjugation. That is, `composite` returns the composite of the same group action applied to each of several subsystems, though the action can be more general for `type='super'` arguments. This could perhaps be made more clear by renaming `composite` to `composite_oper` or similar, but I think that the _behavior_ of the current function is correct and consistent, if admittedly, poorly described.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58038276:36,down,down,36,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58038276,1,['down'],['down']
Availability,"No, not yet, it will be supported in v5.; You could try to use `photocurrent_mesolve` which is very similar, but with a slower algorithm. ps. There is an error in the formula in the [documentation](https://qutip.org/docs/latest/guide/dynamics/dynamics-photocurrent.html#open-system):; L_eff(rho) = L(rho) - C_dag*C*rho - rho*C_dag*C + tr(C_dag*C*rho - rho*C_dag*C)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2060#issuecomment-1385475587:154,error,error,154,https://qutip.org,https://github.com/qutip/qutip/issues/2060#issuecomment-1385475587,1,['error'],['error']
Availability,"Not sure if it's that simple.; ```; --config-setting=""--global-option=--with-openmp""; ```; actually gives me a build error:; ```shell; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --config-setting=""--global-option=--with-openmp""; * Building wheel...; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5;",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:117,error,error,117,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,1,['error'],['error']
Availability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:632,error,error,632,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,2,"['down', 'error']","['down', 'error']"
Availability,"Now it gives me one other error and a failure (and I have the impression the I can deal with the prior errors better than with the new one):. > > > import qutip.testing as qt; > > > qt.run(); > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ERROR; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... FAIL; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Sparse: Symmetric Permute ... ok; > > > Sparse: Nonsymmetric Permute ... ok; > > > Sparse: Symmetric Reverse Permute ... ok; > > > Sparse: Nonsymmetric Reverse Permute ... ok; > > > Sparse: Bandwidth ... ok; > > > Transform 2-level to eigenbasis and back ... ok; > > > Transform 10-level real-values to eigenbasis and back ... ok; > > > Transform 10-level to eigenbasis and back ... ok; > > > Transform 10-level imag to eigenbasis and back ... ok; > > > Check diagonalization via eigenbasis transformation ... ok; > > > brmesolve: harmonic oscillator, finite temperature ... ok; > > > brmesolve: harmonic oscillator, finite temperature, states ... ok; > > > brmesolve: harmonic oscillator, zero temperature ... ok; > > > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > > > brmesolve: qubit ... ok; > > > correlation: comparing me and es for oscillator in coherent initial state ... ok; > > > correlation: comparing me and es for oscillator in steady state ... ok; > > > correlation: compare spectrum from eseries and pseudo-inverse methods ... ok; > > > Diagonalization of random two-",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:26,error,error,26,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,3,"['error', 'failure']","['error', 'errors', 'failure']"
Availability,"Ok, I think I may have some more information. I am fairly sure that this is the same bug as #1120, #963 and #944 (which I believe was not actually ever fixed). I'm going to put the information here. My working theory is currently that this is a MKL bug on Mac. For posterity, let me just dump out some information. ## Things you should know if you've not worked with segfaults before. - `Abort trap 6`, `Segmentation fault` and a few other points can all be from the same cause; - Segmentation faults are typically caused by reading or writing to memory that isn't owned by our process. These often occur by reading/writing too much data to an allocated pointer, or trying to read/write a memory location where the location was read from uninitialised memory.; - Segfaults will not always reliably occur. It's _very_ difficult to prove that swapping tools ""fixes"" a segfault; it can often just move around enough allocations to mask the problem, not fix it.; - Python stack traces are likely to be almost entirely unreliable in these cases, because the segfault may often occur while the garbage collector is running, and that will happen at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation comp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:417,fault,fault,417,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,4,"['fault', 'mask', 'reliab']","['fault', 'faults', 'mask', 'reliably']"
Availability,"Ok, here it is:; btw the actual error (the last line) did not appear in the output file, but it does appear in the cmd window, so I typed it in. Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... ERRO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:32,error,error,32,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['error'],['error']
Availability,"Ok, it looks like the tests are finally going to pass. As the number of commits suggests, this was a pain. Not because the code was wrong, but because:. 1) The default config used by Travis has GCC 4.6 which contains an error that happens to get raised in our case. Thus, had to move to the Trusty build stack. 2) Although it took forever to hunt down, it appears that when .pyx files are included as package data, Py27 may try to rebuild them upon calling **init**. This would throw a missing header error. Since these files are not needed after building, removing them clears up this issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/551#issuecomment-254497807:220,error,error,220,https://qutip.org,https://github.com/qutip/qutip/pull/551#issuecomment-254497807,3,"['down', 'error']","['down', 'error']"
Availability,"Repeating just changes the probability of failure, rather than actually detecting whether it was a rare fail, and `mesolve` tests aren't always the fastest, so repetition here isn't great. For simple unitary qubit operations, I think it should be easy enough to work out how the tolerance translates. It's difficult to say that if there's a numerical error then the error will be much greater - I caught some errors in the `test_gates.py` (I think) that were sneaking through because the tolerances were set too high. It's probably best to keep as tight a tolerance as is reasonable - here I think `2 * qutip.Options.rtol` would always be correct if the numerics are.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751:42,failure,failure,42,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751,7,"['error', 'failure', 'toler']","['error', 'errors', 'failure', 'tolerance', 'tolerances']"
Availability,"Seems to be a problem with the Cython pyximport. Running a py3 pyx file with just print(""hello world"") ; Runs and returns the text, but then crashes python.exe. Using Anaconda py3 on win7 x64. > On Oct 16, 2015, at 06:51, Alexander Pitchford notifications@github.com wrote:; > ; > Ok, here it is:; > btw the actual error (the last line) did not appear in the output file, but it does appear in the cmd window, so I typed it in.; > ; > Transform 2-level to eigenbasis and back ... ok; > Transform 10-level real-values to eigenbasis and back ... ok; > Transform 10-level to eigenbasis and back ... ok; > Transform 10-level imag to eigenbasis and back ... ok; > Consistency between transformations of kets and density matrices ... ok; > Check diagonalization via eigenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic oscillator, finite temperature, states ... ok; > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > correlation: legacy me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; > Transform 10-level real-values to eigenbasis and back ... ok; > Transform 10-level to eigenbasis and back ... ok; > Transform 10-level imag to eigenbasis and back ... ok; > Consistency between transformations of kets and density matrices ... ok; > Check diagonalization via eigenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic osci",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:315,error,error,315,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['error'],['error']
Availability,"So, while I agree that having a flexible storage format is a good way to go, the truth of the matter is that no one has time to implement such a big change. SciPy supports both 32 and 64-bit ints, and checks to see which ones are needed at runtime. e.g. a tensor product of two sparse matrices with int32, may need int64 in the result since their shape is larger. We could also do a similar thing, but it is a lot of work. The reason why we no longer use standard SciPy sparse objects is: 1) They tend to have a sizeable overhead when being created and/or manipulated do to redundant safety checks. 2) Many of the sparse operations are not well optimized. Because SciPy supports many different sparse formats, they had to generalize many of their core operations, making them slower. For example, the sparse kronecker product first converts to COO format, does the tensoring, and then converts back to the original format. Our method is much faster. Supporting more than just the current CSR format is also problematic. As already mentioned, there would be type checks, conditionals, and format conversions everywhere. e.g. what happens when DIA * CSR. As usual, available time is the limiting factor here. Support for both int32 and int64 is not that hard, but would take some time. Just int64 would make smaller matrices larger, but would allow for much greater system dimensions. In this later case, it would be a simple switch `int` -> `int64` and `size_t` -> `uint64` in the Cython code, and the fastsparse module (plus probably other places.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384005667:574,redundant,redundant,574,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384005667,2,"['avail', 'redundant']","['available', 'redundant']"
Availability,Something is way off about that test failure again... Is it possible Travis isn't cleaning up properly? I can't reproduce the failure (it's also clearly nothing to do with this change) and the error message doesn't match up. If anything it looks like the error message is coming from a hash collision inside QobjEvo _maybe_?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672:37,failure,failure,37,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672,4,"['error', 'failure']","['error', 'failure']"
Availability,"Sorry I didn't get round to commenting on this PR sooner. Since it's now come up in #1579 around the subject of sorting out licensing in general in QuTiP, let me also note some stuff about that here. #1579 proposes to remove all individual-file licence text, because it is in general redundant, and makes it harder for us to centrally manage our licence. There is some concern (mostly mine), that it will be a little difficult for us to manage additional code which does not sign over copyright to the QuTiP admin team; if we accept it, we will have to keep the notice in perpetuity. This will pose a bit of a Theseus' ship problem for us if we ever want to re-organise the file that contains this code; after how many modifications is the code no longer NASA's, but QuTiP's? As long as it's not _ours_, we can't separate it out into different files, or mix it with other code (say additional implementations). I'm definitely not a lawyer, but I'm worried that will cause us code organisation problems in the future, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:284,redundant,redundant,284,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['redundant'],['redundant']
Availability,"Sounds good, we should definitely make sure that the tests all work for 3.2; final. In the meantime, I think we should continue to merge in fixes when; its clear that the test failures are unrelated. On Mon, Feb 15, 2016 at 4:52 PM Alexander Pitchford <; notifications@github.com> wrote:. > Yes, I was thinking the same thing. I will open an issue now.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/pull/428#issuecomment-184074750.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/428#issuecomment-184074941:176,failure,failures,176,https://qutip.org,https://github.com/qutip/qutip/pull/428#issuecomment-184074941,1,['failure'],['failures']
Availability,"Thank you @jakelishman for the summary on the use of a GPL-2.0 in BSD-3.0. ; Maybe we can ping directly @Travis-S regarding the use of `qcircuit` 2.6 here for input on how to proceed. Let me point out that recently, reference to this project and a link was added in QuTiP's [user guide](https://github.com/qutip/qutip-doc/blob/f3592e9ad5a4083c19a8c7b81db8b2ae282cf4b4/guide/guide-qip.rst#plotting-a-quantum-circuit).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-633932995:90,ping,ping,90,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-633932995,1,['ping'],['ping']
Availability,"Thank you for your prompt reply. @sahmed95. QuTip was installed on Windows; ```; pyhton 3.6.4; ```; We download anaconda and install QuTip from conda-forge with; ```; conda install -c conda-forge qutip; ```; but when run ; ```; import qutip.testing as qt; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transf",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:103,down,download,103,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['down'],['download']
Availability,Thanks Chris. This is looking good. I'll try it out in more detail in the comings days. Some immediate comments:; - I don't think we should keep two code-paths for parsing the config file. So either we keep using the old manual parsing or we make configobj the official and only way to parse the config file. In that case I think it would be Ok to simply fail to parse the config file if configobj is not available. I don't think many users use the config file so would be to worried about breaking backwards compatibility with respect to this.; - I think I'd prefer to have the logging module called logging.py rather than _logging.py even though it is supposed to internal to qutip. ; - Please add a `__all__` list in logging.py; - Shouldn't configspec.ini be added to the setup.py file?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248#issuecomment-61393881:405,avail,available,405,https://qutip.org,https://github.com/qutip/qutip/pull/248#issuecomment-61393881,1,['avail'],['available']
Availability,"Thanks alot for your great help.; Activating conda solved the problem, but still the command ""import numpy as; np"" leads to the following error:. File ""<stdin>"", line 1; import numpy as np; ^; IndentationError: unexpected indent. Other commands like ""import matplotlib.pyplot as plt"" works fine but; something like ""r=np.random.rand(4,4)"" does not work.; My numpy version is 1.19.2. Would you please help me to solve the problem.; Many thanks. On Tue, Dec 1, 2020 at 12:44 AM Boxi Li <notifications@github.com> wrote:. > Every time you open a new terminal, you will need to activate the conda; > environment by conda activate qutip-env. QuTiP is only installed in this; > environment. If you are interested, you could check; > https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html; > for details.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1391#issuecomment-736060302>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AR53J43QBLGZO3C3WKRB7BDSSQDMJANCNFSM4UGXA6UA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232:138,error,error,138,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232,1,['error'],['error']
Availability,"Thanks for reporting this - it's an important bug that's snuck in. Right now, there's a few errors in your code that you can fix to get on your way again, but we need to fix the error on our side. You're using `sigmap()` which is the Pauli excitation operator and is only defined for a Hilbert space with dimension 2. You actually are working with a Hilbert space of dimension `nmax * nmax` (a tensor-product space), so your `e_ops` argument to `sesolve` is wrong - it's difficult to know exactly what you meant here. `destroy(2)` is equivalent to `sigmap()`, so it's possible you intended to have `e_ops` be `[qutip.tensor(a1, a2)]`?. ---. Maintainers: The error is actually a segfault, because QuTiP 4.5 (probably 4.4 too) does not do sufficient error checking on`e_ops` arguments - probably they're missing in the conversion to `CQobjEvo`. When the expectation is called, it has already sidestepped `Qobj`'s dimensions check and there is no matrix size check, so it simply segfaults on OOB access. The fix for the 4.x branch is to have a very loud Python-space error due to mismatched `Qobj` dimensions on entry to the solvers, or insert a size check within `CQobjEvo`. High priority: there's no reason we should be segfaulting here. Partially fixed in the 5.x branch; all matrix multiplications that take place in C-space have a size check and throw a Python exception, however the solvers still sidestep the `Qobj` dimension check so a tensor-product-space mismatch will not be detected.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492:92,error,errors,92,https://qutip.org,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492,5,['error'],"['error', 'errors']"
Availability,"Thanks for the clue, it was helpfull.; The source of problem is localization of `lscpu` util, which used by `_linux_hardware_info()` function.; The function expects `'Socket(s)'`, `'Core(s) per socket'`, etc in `lscpu` output, but in my system it actually `'Потоков на ядро'`, `'Сокетов'`, etc.; I think, maybe better less system dependent ways to calculate cpu count, for example, we could use `multiprocessing` module and it's `cpu_count` function. Or `len(os.sched_getaffinity(0))`for computers with dynamic cpu management (see [this](https://stackoverflow.com/questions/31346974/portable-way-of-detecting-number-of-usable-cpus-in-python) for details).; Or show exception/error, if we try to use lscpu and `LANG` is not english (or we couldn't found mentioned above `'Socket(s)'`).; Ideas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045:675,error,error,675,https://qutip.org,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045,1,['error'],['error']
Availability,"Thanks for your replies @BoxiLi @Ericgig , very helpful!. The output seems right after adding the `max_step` option to mesolve().; We changed the width of the cosine shaped pulse, here are some simple observations.; ```; if width = 20, then setting max_step < 27 can produce the correct answer.; if width = 50, then setting max_step < 70 can produce the correct answer.; if width = 100, then setting max_step < 130 can produce the correct answer.; ```. But as we are most caring about how to use the solvers correctly, we still have some doubts:; 1. We only observed two results, one is 'perfectly correct', and another is 'totally wrong' (Like @Ericgig said, the second pulse has been completely skipped over). Would some fault result in the middle happen? Some wrong result very similar to the correct would be even worse. 2. The Ode version of mesolve function is very fast, which is one of the reasons we love it. But we did not find document about other solvers (raw propagator, flatten to Liouville space?) for the master equation. Could you explain why the ODE method is the best over others, in aspect of accuracy and speed?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1265#issuecomment-629729386:723,fault,fault,723,https://qutip.org,https://github.com/qutip/qutip/issues/1265#issuecomment-629729386,1,['fault'],['fault']
Availability,"Thanks, this helps track it down. It seems not to be an issue with ENR per se, but with the floquet steadystate solver itself (it also appears without using ENR states). . I think I pinned it down to two small bugs in that seem to have crept in to the solver with the data layer updates, I will make a PR for it and ping you for some feedback, if thats ok. We lack a sufficiently robust test for this solver really, if you can suggest something tractable (very small example, potentially analytical solution we can check against), it would be very helpful.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504:28,down,down,28,https://qutip.org,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504,4,"['down', 'ping', 'robust']","['down', 'ping', 'robust']"
Availability,"The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size `dt` is actually good. It ideally should converge to something as the step size goes to zero. QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances. For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here. Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508:36,error,error,36,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508,3,"['error', 'toler']","['error', 'tolerances']"
Availability,"The `Qcircuit.tex` PR was unfortunately many many years ago, long before I made my first commit to QuTiP (according to `git log` it was by Anubhav Vardhan in 2014), so the damage is already done. It was on my mind because there was a PR about updating the version of the code in it (#1187). Nonetheless, we definitely should remove it. @BoxiLi Boxi: `Qcircuit.tex` is a concern for `qutip-qip` more than the main library from 5.0 onwards - it's currently in `qip/circuit_latex.py`, which we'll have removed, but you've gained. It might be most appropriate to handle this the same way Qiskit does - generate code which does `\usepackage{qcircuit}`, and leave it up to the user to have a properly-provisioned LaTeX environment. I note that `qcircuit` is included in MikTeX and TexLive since at least 2018 (but not sure when exactly it was added). > Yeah putting years I think is the correct thing. Didn't know that at the time. Ah, that's good to know, thanks. I'm trying to learn more about licensing - I'm trying to get it sorted now into the right form, but it's a really complicated field. I think if we change `LICENCE.txt` to. ```text; Copyright (c) 2011--2021 Paul Nation and Robert Johansson.; Copyright (c) 2021--2021 QuTiP Admin Team.; All rights reserved. <BSD 3-clause licence>; ```. and update the final `2021` as appropriate, we'll be in the best standing. That's also why we might want to remove the general licence text from each file - it's already redundant, but it'll be much harder to update if we have it scattered everywhere (automation would run the risk of us messing up and changing any external code's licence as well, I think, which would be wrong). > Look forward to talking to you in July!. Me too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845:1464,redundant,redundant,1464,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845,1,['redundant'],['redundant']
Availability,"The code below is a (hopefully) minimum working example that demonstrates the strange behavior of the stochastic solver. I'm simulating a single trajectory using `general_stochastic` and plotting the returned expectation values along with expectation values calculated from the states. There is also a theoretical solution for the variances of X and Y, which are deterministic despite the stochastic evolution. The manually calculated expectations match the theory perfectly which means the states are correct. The returned ones accumulate errors and obviously shouldn't be used. I don't see a reason why they should be different -- I would assume the expectations are calculated internally from the states. Note that the deprecation warning from above still appears. ### Output plots. ![image](https://user-images.githubusercontent.com/13610206/100783362-f6840b00-340d-11eb-9274-09148e11cf44.png). ### Code; ```; # -*- coding: utf-8 -*-. import matplotlib.pyplot as plt; import numpy as np. from numpy import sqrt, exp. import qutip. from qutip import destroy, basis, ket2dm, expect, liouvillian, \; general_stochastic, parallel_map, \; cy, spre, spost, vector_to_operator, \; operator_to_vector. #%%%%%%%% . times = np.linspace(0, 2, 1024). N = 16. a = destroy(N) . x = (a + a.dag()) / sqrt(2); y = 1j*(a-a.dag()) / sqrt(2). γ = 1 # damping rate; Ω = 0; χ = 1 # measurement strength. H = Ω * a.dag()*a. c_ops = [sqrt(γ)*a, sqrt(χ)*x]. e_ops = [x, x*x, y, y*y]. ρ0 = ket2dm(basis(N)). opts = qutip.solver.Options(store_states=True). ntraj = 1; nsubsteps = 1. # defintions for the SME; #; # in literature: dρ(t) = −i[H,ρ(t)]dt + γD[a]ρ(t)dt + dW(t)√γ H[a]ρ(t); # in QuTiP: dρ(t) = −i[H,ρ(t)]dt + D1[A]ρ(t)dt + D2[A]ρ(t)dW; #; # H[A]ρ = 0.5 * (Aρ + ρA† − Tr[Aρ+ρA†]ρ). L = liouvillian(H, c_ops=c_ops).data; def D1_ρ(t, ρ_vec):; return cy.spmv(L, ρ_vec). # D2[A]ρ(t) = √γ H[a]ρ(t). n_sum = spre(sqrt(χ)*x) + spost(sqrt(χ)*x.dag()); n_sum_data = n_sum.data. def D2_ρ(t, ρ_vec):; e1 = cy.cy_expect_rho_vec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1379#issuecomment-736750957:540,error,errors,540,https://qutip.org,https://github.com/qutip/qutip/issues/1379#issuecomment-736750957,1,['error'],['errors']
Availability,"The default Apple `clang` version doesn't recognise `-fopenmp` out-of-the-box, because Apple don't ship an OMP library with macOS. You'll have more luck (with most C/C++ projects!) if you install a fully-featured compiler and environment. On [homebrew](https://brew.sh) you can find both `clang`/`clang++` and `gcc`/`g++`, both of which can be installed with OMP support. Make sure your set `PATH`/`CC`/`CXX` environment variables are set up correctly after you've installed, so you're calling the compiler you've just installed, not just the Xcode versions. This isn't a bug in QuTiP, although we could remember this when somebody's working on modernising the distribution - in C/C++ land, tools like `automake` run through a big list of things to check during build configuration, and one of them is if OMP appears to exist. That way the error message is a little clearer (although in this case it's reasonable clear if you're used to C compilers).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774:840,error,error,840,https://qutip.org,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774,1,['error'],['error']
Availability,"The error reported here; ```; /Users/goerz/.pyxbld/temp.macosx-10.6-x86_64-3.5/pyrex/rhs72670.cpp:541:10: fatal error: 'complex' file not found; #include <complex>; ```; Suggests that any string format time-dependence would fail to compile. @goerz Could you try to reproduce with simple example, e.g.; ```; H = [[sigmaz(), ""sin(t)""]]; ```; ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-463246180:4,error,error,4,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-463246180,2,['error'],['error']
Availability,"The problem is recognising what a true 0 is from a small value. In your example on the new data layer, there will already be exactly 0 items explicitly stored (and `data.add_csr` is going to get faster and smarter in another PR, too) without `tidyup`, but much more concerningly `1e-15 * qutip.rand_herm(5)` will end up in a zero matrix, which is clearly absolutely wrong. The argument from Liouvillian doesn't work here - even before the new data layer, `liouvillian` never called the `tidyup` code because it accessed the `Qobj.data` field directly, rather than used `Qobj`. Since it then goes into `CQobjEvo` in most of the solvers, which also don't touch the `tidyup` code, it doesn't get called. I don't think there's any safe way to know if small values should actually be zero, or if they're just small values. It makes sense that we want to maintain as much sparsity as possible when values are truly zero, but I think having the QuTiP default be to attempt to tidy up after every addition, multiplication and matrix multiplication is quite unsafe, and for people who aren't doing very very sparse calculations, it's actually a slow down.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384:1141,down,down,1141,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384,1,['down'],['down']
Availability,"This can - see e.g. Numpy that uses the same licence. #1405 would add its additional copyright to the top of the file. This is actually _more_ useful in that case - it's far clearer that that code is under different licence conditions. That said, I'm really not certain about accepting #1405 in its current form. It's not using the data-layer correctly at all, and if we were to include it, we'd really want to do something like that in a more structured way in core QuTiP. Really it should be a properly dispatched implementation of `einsum`, but I think this should come in as part of a much larger discussion on how to handle tensor networks completely; to have it be nice and ergonomic in all cases, I think this will come in at the same time or after the introduction of new dimensions objects. I'm also very wary of introducing code to QuTiP which is licensed by a different holder. I can only imagine that that will really give us problems down the line - how long would NASA own the copyright on that code, for example? Could we modify it? After how many modifications is it no longer NASA's? We wouldn't have control over anything like that, and I think it's probably more hassle than it's worth on our side.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864022506:947,down,down,947,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864022506,1,['down'],['down']
Availability,"This code https://gist.github.com/nathanshammah/f96f6c1db5c323243a4729467cb7351f; Also, let me mention that the progress bar was giving some errors in qutip 4.3.1 and now it does not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1024#issuecomment-503669133:141,error,errors,141,https://qutip.org,https://github.com/qutip/qutip/pull/1024#issuecomment-503669133,1,['error'],['errors']
Availability,"This error comes from the integration algorithm.; Take a differential equation like dy/dt = -i*y.; With a simple method like euler: ; y(t+dt) = y(t) + f' dt = y(1-i*dt); So the norm increase exponentially *(1+dt**2) at each iteration, not somewhat randomly.; The default method we use is ""adams"" from scipy's solver, which is a lot better than euler, but still have a bias. We also stop the solver for re-normalization of the state from time to time, introducing another bias.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708:5,error,error,5,https://qutip.org,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708,1,['error'],['error']
Availability,This fails because time only contain `0.5`. ; You probably meant `time.append(0.5*i)`. The error message is a catch-all for failure in scipy solver and certainly not clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905:91,error,error,91,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905,2,"['error', 'failure']","['error', 'failure']"
Availability,"This is something I can do or help someone with guidance. We simply need to do the following: ; - add intersphinx as extension in the `conf.py` file; - find the functions / objects we use from other libraries and add to `conf.py` such libraries; - change the cited functions classes with the correct reference, e.g. ```:class:`qiskit.QuantumCircuit` ```; The `krotov` library by @goerz shows how to do it, see [here](https://github.com/qucontrol/krotov/blob/0e8a4dbe81bd3986dbc5c4464d49131727fd57ef/docs/conf.py). ; The tilde `~` can be used to cut down the prefix of the cited module/function/class/method, e.g., from ```:class:`qiskit.QuantumCircuit` ``` to ```:class:`~qiskit.QuantumCircuit` ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1528#issuecomment-619395402:549,down,down,549,https://qutip.org,https://github.com/qutip/qutip/issues/1528#issuecomment-619395402,1,['down'],['down']
Availability,"This issue has a two-fold interest: decreasing test time in general and expand the platforms through which QuTiP is available. . What is the reason it takes so long on Nix? QuTiP, in the [latest PR](https://travis-ci.org/qutip/qutip/builds/628865624?utm_source=github_status&utm_medium=notification), takes on average 20 minutes to run its tests on a given platform. Much of this I think is due to the Cython configurations, indeed the no-cython option takes only 13 minutes. My first suggestion would be to try without Cython if things speed up, from those requirements (@Ericgig set that up and I am not knowledgeable about it). . From your PR on `nixpkgs` do you build on Travis CI or a similar cloud? If you could give a list of time taken by the different tests that would help. . The idea of a subset of tests is interesting (essential tests vs. thorough tests), in general; for example thorough tests could be done only in production and a lighter version could be called with `qutip.testing.run()`. Although, in specific, it is not clear to me how to triage which tests to skip. I would be glad to have the others opinion on this too (pinged them as assignees).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700:116,avail,available,116,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700,2,"['avail', 'ping']","['available', 'pinged']"
Availability,"This won't be easy to fix, if the compilation is in the task, `parfor` cannot know about it to wait for it.; The simplest would be to have only the main process able to compile. This code will still raise an error, but the solution would be in the error message.; Otherwise communication between process would be needed and this can get tricky. Also `parfor` will be removed. It says in its [documentation](https://qutip.org/docs/latest/apidoc/functions.html#qutip.parallel.parfor) to use `parallel_map` instead since v3.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433:208,error,error,208,https://qutip.org,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433,2,['error'],['error']
Availability,"We can in theory drop that requirement for users - it was there in the immediate aftermath of the Numpy 1.20 release, which broke C-ABI compatibility with previous versions, and we had a couple of problems with people building against Numpy 1.20 but trying to run against a prior version. Our CI and release versions will still all need to be built against Numpy 1.16 (or our minimum supported runtime Numpy) as the lowest common denominator until we drop support for all Numpy releases before 1.20, but we enforce that in our build pipelines anyway. Just to be clear (though I think you knew this):. > Can qutip be updated to run with current versions of Numpy?. QuTiP already runs correctly against Numpy 1.20 and Numpy 1.21, and its runtime requirements on Numpy are uncapped. It's just building from source that'll fail, and that was originally a sort of ""fail-safe"" mechanism. Also `pip install -e .` should automatically do build isolation for you, including installing all the build requirements into a temporary virtual environment, so it should have just worked here. Calling `setup.py develop` directly is kind of out-dated now, though it can still be useful if you're planning on doing Cython development; `pip`'s isolation actually usually means that the Cython compiler can't detect changes any more, so it always needs to rebuild everything. `setup.py develop`, because of its much lower-level status, leaves the source and extension-library files well enough untouched that it can do incremental compilation. If you're not doing Cython development (only Python), `pip install -e .` is much better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497:860,fail-safe,fail-safe,860,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497,1,['fail-safe'],['fail-safe']
Availability,"We can't implement `__hash__` for `Qobj`, sorry - it's just not possible while following the [Python data model](https://docs.python.org/3/reference/datamodel.html#object.__hash__). The two principle points that a hash function must follow from there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs an",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:542,toler,tolerance,542,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,2,['toler'],['tolerance']
Availability,"We have made some progress! But I also have some questions for the experts here.; * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?; * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; * The _run_one_traj function now exists 3 times, with practically identical code:; https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. Side note: due to a WSL bug, some of my commit timestamps are messed up. Because of that, some commits seem to be shown out of order here...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901:369,error,error,369,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901,1,['error'],['error']
Availability,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:1213,down,down,1213,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,1,['down'],['down']
Availability,"Yeah, this is just one of those silly things caused by ImageMagick choosing a _very_ generic name and then getting burned (hence the swap to `magick`...). Probably the best thing to do is to try and run `convert` once at discovery and to see what happens. If you run `convert -version` on an IM6 install, does it output a string that looks like; > Version: ImageMagick 6.blahblahblah; or something similar?. If so, try this patch: [check_convert.txt](https://github.com/qutip/qutip/files/4397692/check_convert.txt). It rearranged the functions a little for a more logical order (I'll rebase the PR before merge), but the main change is that it now tests the output of `convert -version` to see if it contains the substring `imagemagick` (case insensitive). The reason to do this now is because if we allowed the error to propagate later, we'd have to check it every time and it would mean we'd have to pass through the ""special cases"" more frequently, and it would make the core logic more complex. Also, we _could_ catch a subprocess `CalledProcessError` later (say if one of the other commands were to fail for some reason) and re-raise our own, but to be honest I didn't want to over-engineer what ought to have been a relatively simple PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526:812,error,error,812,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526,1,['error'],['error']
Availability,"You simple need to create a function starting with `test_` that use the progress bar. Ideally you would use it in a way that ensure all lines of code are used at least once. Then if there is an error in the code, python will raise an error and the test will fail. There should be some tutorials for pytest on the web, writing a step per step guide on making tests is more work than making the tests themselves so please have mercy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1478014084:194,error,error,194,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1478014084,2,['error'],['error']
Availability,"You still wouldn't be able to put `Qobj` into numpy arrays except by doing something like; ```python; qobjs = np.empty(3, dtype=object); qobjs[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; ```; but probably that's not _too_ much of a big deal. Leaving QuTiP as it is right now would require that anyway. My main problem is actually just with allowing ufuncs and other numpy interfaces to act directly on `Qobj` without an explicit conversion step, because it promotes the idea that it's ok to act elementwise on a `Qobj`. I don't think we should allow ufuncs at all - `Qobj` is not meant to be like an `ndarray` and ufunc semantics don't make sense. We can set `Qobj.__array_ufunc__ = None` and `Qobj.__array_function__ = None` to disable numpy functions acting on `Qobj` directly. Example with this in place:; ```python; >>> import qutip; >>> import numpy as np; >>> np.array(qutip.qeye(2)); array([[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]); >>> np.array([qutip.qeye(2), qutip.qeye(2)]) # Not ideal, but not our fault.; array([[[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]],. [[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]]); >>> np.sin(qutip.qeye(2)); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); >>> np.sin(np.array(qutip.qeye(2))); array([[0.84147098+0.j, 0. +0.j],; [0. +0.j, 0.84147098+0.j]]); ```; Alternatively, if people _really_ want to be able to use ufuncs on `Qobj`, it is possible to define `__array_ufunc__` in such a way that we allow only some `ufuncs` to operate. Doing this leaves us susceptible to problems interacting with other libraries that implement this, though, beacuse whichever class has the highest `__array_priority__` gets to dictate what makes sense. Unless there's a really clear _need_ for this, I don't think it's a good idea. For completeness, the rest of this comment is stuff I find out while researching. ## The `__array__()` and `__array_wrap__()` methods. These have been s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:1891,fault,fault,1891,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['fault'],['fault']
Availability,"You're welcome! I've used `qutip` a lot throughout my PhD, so it seems fair that I'd contribute back to development. While I'm still getting used to the code base, I'm quite happy to do some ""boring"" software engineering-y maintenance bits, and plus, this helps me learn `pytest` a lot better. This PR can be merged whenever if you're happy with the changes - I'll open a new one if/when I convert more files.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-586622667:223,mainten,maintenance,223,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-586622667,1,['mainten'],['maintenance']
Availability,Your welcome and thanks for looking into this. I understand that there are functionality considerations to be made. Perhaps a simple assertion check would strike the right balance -- giving the functionality you want while avoiding the danger of faulty assumptions.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17175299:246,fault,faulty,246,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17175299,1,['fault'],['faulty']
Availability,"[pristine_from_docs.zip](https://github.com/qutip/qutip/files/6491982/pristine_from_docs.zip). I get this error for dir_gen_anim2.py. I have just attached the relevant part here. . ```python; fig = pyplot.figure(); ax = Axes3D(fig, azim=-40, elev=30); sphere = Bloch(axes=ax). def animate(i):; sphere.clear(); sphere.add_vectors([np_sin(theta), 0, np_cos(theta)]); sphere.add_points([sx[:i+1], sy[:i+1], sz[:i+1]]); sphere.make_sphere(); return ax. def init():; sphere.vector_color = ['r']; return ax. ani = FuncAnimation(fig, animate, arange(len(sx)),; init_func=init, blit=False, repeat=False). ani.save('bloch_sphere.mp4', fps=20). Exception ignored in: <function TimerQT.__del__ at 0x7fbf6c561b80>; Traceback (most recent call last):; File ""/home/rohan/anaconda3/envs/nbdev/lib/python3.8/site-packages/matplotlib/backends/backend_qt5.py"", line 189, in __del__; TypeError: 'NoneType' object is not callable; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842086433:106,error,error,106,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842086433,1,['error'],['error']
Availability,"]-U_prop_single[-1]).full()); ```. and here is the ""bad"" output with the older version of qutip that I was running before (Note, the difference between the 'batch' and 'single' has terms of order 1e-6). . ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+4277eae; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+4277eae-py3.4-linux-x86_64.egg/qutip. #I would expect this to have largest terms of order 1e-11 say.; [[-4.24096116e-07+1.00022928e-06j -4.16215462e-09-4.54122270e-07j]; [ 4.16215462e-09-4.54122270e-07j -4.24096116e-07-1.00022928e-06j]]; ```; and here is the result of running with the latest version (note, now difference between the two propagators respects the required tolerances):. ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+489fd41; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+489fd41-py3.4-linux-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex file can be easily generated using `qutip.cite()`. #working well now:; [[ 3.84509091e-12+2.02926564e-12j -1.25703892e-11+0.00000000e+00j]; [ 1.25703892e-11+0",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/829#issuecomment-376601387:1635,toler,tolerances,1635,https://qutip.org,https://github.com/qutip/qutip/issues/829#issuecomment-376601387,1,['toler'],['tolerances']
Availability,"_**edit to put the positivity up top!**_: This is a very exciting prospect to me, and I'm always happy when other libraries want to interact with QuTiP! In the interests of inciting more discussion, I've got thrown in some more discussion points below - I'm 100% sure they're all solvable, but it also seems like there isn't one way that's unambiguously correct to do them, so they're worth discussing. ---. In principle I'm happy to implement this, though I don't really agree with your assertion that `othertype.toqobj()` is bad style! It might be so in Julia, but Python doesn't have all the same multiple-dispatch niceties that Julia has, so at the end of the day, we have to add in a method with a ""magic"" name somewhere, and it all just comes down to choosing the name of the method. The downside to having a magic name is that it means we have to eschew proper namespacing; what if another library one day wants to call their interface the same thing? Then it's completely impossible for a downstream library to interoperate with both. Having conversions be a non-special method of the downstream class, and leaving our constructor unaware of them alleviates that issue. Numpy can get away with squatting the `__array__` name because they're _huge_, but I would argue that if we do it, we could actually _harm_ the quantum software ecosystem in the long-run - what happens when a package better than QuTiP comes along that wants to call its objects `Qobj` as well? Let's face it - it's a pretty straightforward name!. All that said, I am very aware that not everyone agrees with me on this, and I _am_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no ot",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:749,down,down,749,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,3,['down'],"['down', 'downside', 'downstream']"
Availability,"`QobjEvo` have a `with_state` method `QobjEvo.with_state(t, psi, args={})` which can be used instead of `__call__` if needed. It compute the coefficient on the python side and send them to the cython part if needed. But I don't like it like this, using `__call__` will raise and error if a psi is needed, and we need to treat it differently in solvers.; How about having the state inserted in the args dictionary.; So if the users have the key ""psi_vec"" or ""psi_Qobj"" in args and mul_vec (spmv)/ expect is used, it is automatically updated. With that definition most solvers could work without a special cases for `rhs_with_state=True`. The present method could still be supported using decorator.; Also it would be relatively simple to support expectation value in args in a similar way:; if a specific key/value is found in the dictonary (`args[""_expect""+name] = Qobj/ QobjEvo` ), it is replaced with the operator expectation value when possible. . For the present case, we should document it more than change it, going back to Qobj will slow the simulation. Maybe `rhs_with_state` could be more than a bool and offer the option?; Here ` expect_rho_vec(data, vec, isherm)` from qutip.expect could be used to skip the vec -> Qobj conversion. . Also, the users should not need to know the matrix format and have to do the conversion themselves. They should never have to use `dense2D_to_fastcsr_fmode`. `QObj((vec2mat(rho))` works and should be sufficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-462591342:279,error,error,279,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-462591342,1,['error'],['error']
Availability,"`dims` is an argument of all random Qobj creator, we should keep it.; It should be in [[m,n],[1,1]] format. documentation is not clear / wrong. If used with this format, it does work, but the check and documentation indicate to use [[n,m]] which is wrong and will cause errors. What I was thinking was something along the line of:; ```; def rand_ket(N=0, ...) : ; if not N: ; N = np.prod(dims[0]); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1058#issuecomment-516436835:270,error,errors,270,https://qutip.org,https://github.com/qutip/qutip/pull/1058#issuecomment-516436835,1,['error'],['errors']
Availability,"ame time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading to surprising behavior. From my point of view, no package really owns `+` so any conversion would be implicit.; But `qutip.groundstate(netket_operator)` is in itself an explicit cast. I am explicitly asking to qutip `please give me the ground state of this object`. I do expect to get a Qobj out, and qutip to make an effort converting this object to whatever format he internally wants to work with. Same goes with time evolution. . > For greater discussion, here's an alternate approach: instead of objects defining __qutip_qobj__, instead we expose an entry-point qutip.Qobj.register_conversion_function(converter, type, priority, version=None), and downstream libraries register functions rather than defining methods on their classes. I do prefer such an approach. I just did not think that was an option in QuTiP.; In fact we have redesigned NetKet to allow for something similar using multiple dispatch. (I’m not familiar with Tensorflow either.). I do agree with all your points, especially the first. As for your last point, about downstream packages having to import qutip: This is indeed a potential issue. I’ll try to investigate this: maybe there is a solution whereby a callback executed on package load can be registered with importlib?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:3628,down,downstream,3628,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,2,['down'],['downstream']
Availability,"ck in __init__ . Again, I think that your observation is right. I thought about it only after I submitted the post above. The way numpy does it is that `__array__(self, dtype)` takes only one argument, but I think we can do better and better respect the API set by qutip. ; That is why I was suggesting that `object.__qutip_qobj__` should not return a Qobj directly, but rather the data needed by QuTiP to construct a Qobj, and qutip should be free to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool = Flag specifying whether Qobj should get a copy of the input data, or use the original.; fast : bool = Flag for fast qobj creation when running od",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1409,error,error,1409,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,1,['error'],['error']
Availability,"consistent with times obtained by @Ericgig and saved in the folder. . I am on Python 3.7.3, I recently updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Total run time: 0.90s; Total run time: 1.13s; Total run time: 1.15s; Total run time: 1.41s; Total run time: 1.66s; Total run time: 2.03s; Total run time: 2.47s; {'solver': 'pc-euler'}; Total run time: 0.38s; Total run time: 0.46s; Total run time: 0.58s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.00s; Total run time: 1.26s; Total run time: 1.49s; {'solver': 'milstein'}; Total run time: 0.31s; Total run time: 0.39s; Total run time: 0.46s; Total run time: 0.56s; Total run time: 0.70s; To",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:1526,down,down,1526,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['down'],['down']
Availability,"e Benchmarking**; All the stochastic solvers in those notebooks now run much faster: between a factor 2 and 30 in speedup from last time I ran them, which was consistent with times obtained by @Ericgig and saved in the folder. . I am on Python 3.7.3, I recently updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Total run time: 0.90s; Total run time: 1.13s; Total run time: 1.15s; Total run time: 1.41s; Total run time: 1.66s; Total run time: 2.03s; Total run time: 2.47s; {'solver': 'pc-euler'}; Total run time: 0.38s; Total run time: 0.46s; Total run time: 0.58s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.00s; Total run time: 1.26s; Total",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:1346,down,down,1346,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['down'],['down']
Availability,"e input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row about licensing primarily, and then about how we're going to handle tensor networks in general. In order to prevent headaches down the line (and again, very very sorry), would it be ok if we leave this unmerged, and don't attempt to modify it in any way? I don't want to get into a situation where we decide we can't accept non-QuTiP-licenced code, and we want to use/build on your code or implement something similar, but our hands are tied because anything we do will involve our knowledge of IP we don't control.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:4580,down,down,4580,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['down'],['down']
Availability,"e just dump out some information. ## Things you should know if you've not worked with segfaults before. - `Abort trap 6`, `Segmentation fault` and a few other points can all be from the same cause; - Segmentation faults are typically caused by reading or writing to memory that isn't owned by our process. These often occur by reading/writing too much data to an allocated pointer, or trying to read/write a memory location where the location was read from uninitialised memory.; - Segfaults will not always reliably occur. It's _very_ difficult to prove that swapping tools ""fixes"" a segfault; it can often just move around enough allocations to mask the problem, not fix it.; - Python stack traces are likely to be almost entirely unreliable in these cases, because the segfault may often occur while the garbage collector is running, and that will happen at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, wh",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:1378,mask,mask,1378,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['mask'],['mask']
Availability,"ecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2952,avail,available,2952,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['avail'],['available']
Availability,"ect about it:. ```python; >>> arr = np.empty((3,), dtype=object); >>> arr[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; >>> arr.shape; (3,); >>> arr[0]; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. The reason numpy does this now is because (my understanding is that) defining `__array__` was meant to be a much stronger guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method for converting `Qobj` to `ndarray` - `Qobj.full()`, similar to `scipy`'s `spmatrix.toarray()` - so `Qobj.__array__` was never a _necessity_, just a convenience in some workflows. Given the tools we can use to suppr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:2653,error,error,2653,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['error'],['error']
Availability,"ed features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Best; Boxi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:2210,error,error,2210,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,2,['error'],['error']
Availability,"ee to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool = Flag specifying whether Qobj should get a copy of the input data, or use the original.; fast : bool = Flag for fast qobj creation when running ode solvers.; ```. For the case of the usage that netket would have, our objects already define the Hilbert space they are acting on (so `dims` and `shape`). `copy` doesn't really make sense for us, because we would be building the representation . The way I see it, `Qobj(other_pkg_obj,**kwargs)` should behave like `Qobj(qutip_obj, **kwargs)`, so `__qutip_qobj__` should return the matrix data, shape and dims if possible, and qutip will handle i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1767,error,error,1767,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,3,"['down', 'error', 'fault']","['downstream', 'error', 'fault']"
Availability,"en module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files starting from those beginning with ""a"" up to (now) ""metrics"" while I was first getting to know the QuTiP codebase, and hopefully you can see that my early efforts weren't that great, and they get a bit better and easier to read as time went on. (The later files haven't been converted yet.) The main things are to always be thinking about readability both of the code and the error messages that are coming out, and making sure that your tests are really testing that your functions have your behaviour you want them to have. Another thing we really don't have enough of in QuTiP yet is tests for ""negative"" behaviour, i.e. testing that functions _fail_ when they're passed incorrect inputs - consequently, quite a lot of QuTiP actually will just silently do the wrong thing if it's passed nonsense.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:2376,error,error,2376,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['error'],['error']
Availability,"erlib` isn't compatible with QuTiP next, whereas `Qobj(otherlib.obj)` failing would (rightly) be taken as QuTiP being at fault, which stymies our development a little because we're forced to be more conservative than we otherwise would be with our constructor. This is going to be a particular problem with handling `dims`, since we're talking about completely changing the structure for how that's managed internally to help us in other parts of our library.; 4. what will happen with all the other keyword arguments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj.__init__` like normal, but now with our new `Qobj` instance as the argument. This would have a slightly nontrivial interaction with the `copy` keyword, I imagine, but not an unsolvable one.; - error if you pass something that defines `__qutip_qobj__` in addition to keywords. This isn't ideal because it gives `Qobj` special treatment - additional kwargs can override `Qobj` settings if they're compatible. ---. Just in the interest of completeness, let me also just bring up some of the sweeping changes we'll bringing in in QuTiP 5.0 as well, which massively overhaul how `Qobj` is constructed, and how its data is stored. These aren't _directly_ applicable to the current discussion, but they're worth keeping in mind since they're a huge overhaul of how things will be handled, and may have some implications for how implementors of this interface might behave. The new `Qobj` will no longer have the same `fast_csr_matrix` type as its `data` attribute, but instead will have an extensible data type. The two that will be distributed with the library will be `Dense` and `CSR` (which simply do what they say on the tin), and all linear algebra operations between multiple `Qobj` are handled by a custom multiple-dispatch system ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:3800,error,error,3800,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['error'],['error']
Availability,"fine the `__jax_array__` interface). While I think that Qobj is a very qutip-like principle, I see no problems in namespacing. > 2- having the check in __init__ . Again, I think that your observation is right. I thought about it only after I submitted the post above. The way numpy does it is that `__array__(self, dtype)` takes only one argument, but I think we can do better and better respect the API set by qutip. ; That is why I was suggesting that `object.__qutip_qobj__` should not return a Qobj directly, but rather the data needed by QuTiP to construct a Qobj, and qutip should be free to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1248,error,error,1248,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,1,['error'],['error']
Availability,"g - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2384,failure,failure,2384,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,2,['failure'],['failure']
Availability,"getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most libraries, and makes their class definitions more complex.; - Control between different versions is perhaps a little easier (though a minor point): this _fe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:5242,down,downstream,5242,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['down'],['downstream']
Availability,"hat a scalar is (which classes are scalars) and at what level do we define it (who is responsible for returning NotImplemented). Proposed solutions:; 1) Let the _specialisation_ return `NotImplemented` and set `isherm` only when `complex(other)` is possible. This defines what an scalar is at the _specialisation_ level. However:; - It may cause inconsistent behaviour where some operations are allowed for a data layer (`TfTensor` or any other) but not for another one. I would argue that all specialisations should accept the same input, although operations may be handled differently internally (for example, in tensorflow we want to keep the graph state).; - `NotImplemented` only makes sense for some special binary methods (`__add__`, `__lt__`, etc) as Python employs `NotImplemented` to try `other`'s binary method. My concern is that if the dispatcher is used by itself at some points of the code (such as for the solver) returning `NotImplemented` may cause wrong error messages or even unexpected behaviour with future specialisations ( for instance, although it now raises a deprecation warning, `NotImplemented` is considered as `True` when evaluated as a condition). It seems to me that we should avoid having `NotImplemented` in python space (except for arithmetic operations in a class where they are useful and always make sense).; ; 2) Simon suggested to define what a scalar is at the _dispatcher_ level (or something similar to this but correct me if I am wrong). This would require to have a function that casts any defined scalar to a complex scalar. The dispatcher would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplem",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:1403,error,error,1403,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['error'],['error']
Availability,"he notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the tests that are being performed. . * I wonder whether `qobjevo_codegen.py` should stay there. It stands out from all other modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time for cte` could be more explanatory. Similarly elsewhere. * I wonder whether instead `QobjEvo`, `Qobjt` could be even more intuitive for the user. * I would really encourage you to write one notebook (or more), about the new functionalities of the stochastic solvers, as well as the old methods. This could be the to-go resource, beyond documentation, to understand how these stochastic solvers are now expanded and coherently defined. It does not need to be a lot of work, it can copy a lot of stuff from the development notebooks. It would be fundamental to have the solvers' master equations written down, explaining for each solver what each term is, e.g.,",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:2589,error,error,2589,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['error'],['error']
Availability,"her package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. having the check in `__init__` might not be correct - it feels like it belongs in `__new__` to me. `__init__` modifies an object that's already been created in Python-space, whereas `__new__` allows you to replace the object creation entirely.; 3. we need to take care to do this in a way that still allows QuTiP to iterate and improve `Qobj.__init__` between major versions. If _we_ define a public interface like this rather than having external libraries provide their own implementations, it puts the burden of maintain compatability on us, and takes it off downstream packages, who are able to define version requirements. For example, calling `otherlib.obj.toqobj()` and having it fail with QuTiP next.0 makes it clear that `otherlib` isn't compatible with QuTiP next, whereas `Qobj(otherlib.obj)` failing would (rightly) be taken as QuTiP being at fault, which stymies our development a little because we're forced to be more conservative than we otherwise would be with our constructor. This is going to be a particular problem with handling `dims`, since we're talking about completely changing the structure for how that's managed internally to help us in other parts of our library.; 4. what will happen with all the other keyword arguments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj.__init__` like normal, but now with our new `Qobj` instance as the argument. This would have a slightly nontrivial interaction with the `copy` keyword, I imagine, but not an unsolvable one.; - error if you pass something that defines `__qutip_qobj__` in addition to keywords. This isn't ideal because it gives `Qobj` special treatment - additional kwargs can override `Qobj` settings if they're",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:2960,fault,fault,2960,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['fault'],['fault']
Availability,"hey guys.. yes, things are fine now. Below is simplified code that shows this problem:; ```; import numpy as np; import qutip as q; q.about(); # opts=q.Odeoptions() #""low"" tolerances; opts=q.Odeoptions(method='adams', nsteps=100000, atol=1e-11, rtol=1e-11); times=np.linspace(0,10,300); epsilon=2*np.pi * 1; H=[epsilon/2*q.sigmaz(), [q.sigmax(), 'sin(2*pi*t)']]; U_prop_batch=q.propagator(H, times, options=opts, unitary_mode='batch', parallel=False); U_prop_single=q.propagator(H, times, options=opts, unitary_mode='single', parallel=False); print((U_prop_batch[-1]-U_prop_single[-1]).full()); ```. and here is the ""bad"" output with the older version of qutip that I was running before (Note, the difference between the 'batch' and 'single' has terms of order 1e-6). . ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+4277eae; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+4277eae-py3.4-linux-x86_64.egg/qutip. #I would expect this to have largest terms of order 1e-11 say.; [[-4.24096116e-07+1.00022928e-06j -4.16215462e-09-4.54122270e-07j]; [ 4.16215462e-09-4.54122270e-07j -4.24096116e-07-1.00022928e-06j]]; ```; and here is the result of running with the latest version (note, now difference between the two propagators respects the required tolerances):. ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+489fd41; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Insta",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/829#issuecomment-376601387:172,toler,tolerances,172,https://qutip.org,https://github.com/qutip/qutip/issues/829#issuecomment-376601387,1,['toler'],['tolerances']
Availability,"hose notebooks now run much faster: between a factor 2 and 30 in speedup from last time I ran them, which was consistent with times obtained by @Ericgig and saved in the folder. . I am on Python 3.7.3, I recently updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Total run time: 0.90s; Total run time: 1.13s; Total run time: 1.15s; Total run time: 1.41s; Total run time: 1.66s; Total run time: 2.03s; Total run time: 2.47s; {'solver': 'pc-euler'}; Total run time: 0.38s; Total run time: 0.46s; Total run time: 0.58s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.00s; Total run time: 1.26s; Total run time: 1.49s; {'solver': 'milstein'}; Total r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:1402,down,down,1402,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['down'],['down']
Availability,"igation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse scheduling,; > e.g. Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages; > or commonly used language e.g. through quantum assembly language (qasm); >; > ------------------------------; >; > Also, the last outcomes have some overlap with the last project. Although; > I also find this circuit importation very important, I guess two projects; > should not have overlap if they are both selected.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67EWECDUIOQMTKK2N2DREGE2LANCNFSM4KZUPCQQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:2739,error,error,2739,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,2,['error'],['error']
Availability,"iginally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7fa2ddc04270). Current thread 0x00000001123d55c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. ## Relation to `to_kraus`. The above `Malloc.py` file uses `scipy.linalg.eig` via use of an `eseries` version of `correlation`. The current test of superoperator representations uses `choi_to_kraus` which also calls `scipy.linalg.eig`. Here is a file `kraus.py` that can reproduce these segfaults semi-reliably (may need to run it a few times to get it to trigger):. ```python; import qutip. s = qutip.rand_super(); c = qutip.to_choi(s); k = qutip.to_kraus(c); ```. For example, here's a similar command on this file:. ```; Debug memory block at address p=0x7f98cc467db0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d018e0). Current thread 0x0000000109fe85c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. So these both use `scipy.lina",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:3902,reliab,reliably,3902,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['reliab'],['reliably']
Availability,"iki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:5287,error,error,5287,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['error'],['error']
Availability,"ing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or `pytest -m ""mark logic""` (e.g. `pytest -m ""not slow""`) to hit specifically marked tests. Perhaps most powerfully, and one I use a lot when writing these, you can do `pytest -k ""substring logic""` to run every test (potentially in the specified file(s)) that contains the elements specified in `""substring logic""`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:2461,down,down,2461,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['down'],['down']
Availability,"is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy transitive equality (i.e. `a == b and b == c` does not imply `a == c`). The primary consequence of this is that the cache will simply be a little under-zealous, and sometimes it will calculate the value twice for three similar `Qobj`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1866,degraded,degraded,1866,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,2,"['degraded', 'toler']","['degraded', 'tolerance']"
Availability,"ite out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:4635,fault,fault,4635,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['fault'],['fault']
Availability,"itten it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/k",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6209,down,down,6209,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['down'],['down']
Availability,"le for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing the same thing alive in the library at once, but we can't detect what version of an interface a downstream package requires (not keen on the idea of a `__qutip_qobj_api_version__` flag!!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:7704,down,downstream,7704,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,3,"['alive', 'down']","['alive', 'downstream']"
Availability,"lose-minded to alternate views here, but given the problems Numpy had (whose team I have no doubt are much smarter than I am), I'm really not enthusiastic about any implicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all com",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:3706,error,error,3706,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,2,"['down', 'error']","['downgrade', 'error']"
Availability,"lready. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new formats), and I think the benefits of a priority queue of allowed converters outweighs it in convenience for users.; - It involves some global state of the `qutip` library, which _may_ cause problems for multiprocessing if somebody tries to register a `lambda` converter (can't pass through `pickle`, though I'm not 100% on whether module-level stuff needs to), and of course there's the query of what happens when converters are registered in separate processes. We already have this ""problem"" in 5.0 though, because that's how the entire underlying dispatch mechanism is handled; we can just require that converters must be pickle-able.; - If a downstream package wants to lazily `import qutip` (we're a pretty heavy import right now), it's harder in this method; you'd basically have to ask a user to call `otherlibrary.register_qutip()`. For one, I'm going to put some effort into making `import qutip` take much less time for 5.0 (the main problem right now is we essentially eagerly import all of scipy and IPython if it's around), so that'll make it a bit easier. For two, a single initialisation statement isn't _necessarily_ a terrible thing; users can decide for themselves if they want to install the implicit integrations, but this is definitely an inconvenience relative to the magic method. ---. Apologies that I'm not responding super quickly to everything - I'm not the only main QuTiP dev (and I can only work on QuTiP occasionally anyway), so I'm giving others time to read and think about the proposals as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:7902,down,downstream,7902,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['down'],['downstream']
Availability,"ly useful and will simplify the code inside the propagator a bit. I removed `.evolve_dm`. > **For `.sys_dims`**:; > ; > The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise.; > ; > I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. Changed in HEOMSolver. Since environment only means something for HEOM, so it took some time to understand what it referred to. Adding the change elsewhere would be confusing. ; > **Specifying which solvers support propagators**:; > ; > Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them. There is only one class for propagator and I don't see us needing any other, so there is no use for a `propagator_class` . We could have a `support_propagator` flag, but I prefer it this way as we can set a special error message for `HEOMSolver`. ; `HEOMSolver` is the only exceptions where we could support it but choose not to take the time to implement it. ; All deterministic solver we have can be used for propagator, trajectories solver don't have a properly defined propagator for single trajectory and I don't see any use to create a propagator for the averaged states. It would take a lot of trajectories to obtain what is effectively mesolve's propagator. . We could add the flag to the integrator instead, some krylov integrator cannot evolve 2D states, but it's the only one we have plan for and it's not merged yet...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120:1792,error,error,1792,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120,1,['error'],['error']
Availability,"m_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no other package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. having the check in `__init__` might not be correct - it feels like it belongs in `__new__` to me. `__init__` modifies an object that's already been created in Python-space, whereas `__new__` allows you to replace the object creation entirely.; 3. we need to take care to do this in a way that still allows QuTiP to iterate and improve `Qobj.__init__` between major versions. If _we_ define a public interface like this rather than having external libraries provide their own implementations, it puts the burden of maintain compatability on us, and takes it off downstream packages, who are able to define version requirements. For example, calling `otherlib.obj.toqobj()` and having it fail with QuTiP next.0 makes it clear that `otherlib` isn't compatible with QuTiP next, whereas `Qobj(otherlib.obj)` failing would (rightly) be taken as QuTiP being at fault, which stymies our development a little because we're forced to be more conservative than we otherwise would be with our constructor. This is going to be a particular problem with handling `dims`, since we're talking about completely changing the structure for how that's managed internally to help us in other parts of our library.; 4. what will happen with all the other keyword arguments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:2667,down,downstream,2667,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['down'],['downstream']
Availability,"ming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>dot</code> method that act the same a sparse array's one. This is not needed.; * [x] The <code>dims</code> of the outp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1705,error,error,1705,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['error'],['error']
Availability,"modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time for cte` could be more explanatory. Similarly elsewhere. * I wonder whether instead `QobjEvo`, `Qobjt` could be even more intuitive for the user. * I would really encourage you to write one notebook (or more), about the new functionalities of the stochastic solvers, as well as the old methods. This could be the to-go resource, beyond documentation, to understand how these stochastic solvers are now expanded and coherently defined. It does not need to be a lot of work, it can copy a lot of stuff from the development notebooks. It would be fundamental to have the solvers' master equations written down, explaining for each solver what each term is, e.g., the jump operator. Also, in `development-smesolve-tests`, the equations are already there for example. Block 23 is beautiful, and it could be reproduced in the tutorial. . * Similarly, a user guide entry would really enhance the adoption of these solvers. At a later stage, some more refined example applications could be provided. * Review is still ongoing, I will provide comments on the .py files and other solvers files. Help from other developers is welcome as these are massive changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:3574,down,down,3574,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['down'],['down']
Availability,"n at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUC",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2075,error,error,2075,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['error'],['error']
Availability,"or: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjPower; assert_equal(all(q3.data.todense() - matrix(data) *_ 3), 0); File ""/usr/lib/python2.7/dist-packages/numpy/testing/utils.py"", line 317, in assert_equal; raise AssertionError(msg); AssertionError: ; Items are not equal:; ACTUAL: True; DESIRED: 0. ---. Ran 221 tests in 256.712s. FAILED (SKIP=1, errors=1, failures=1)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:12941,error,errors,12941,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,2,"['error', 'failure']","['errors', 'failures']"
Availability,"plicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:3886,error,error,3886,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,3,"['down', 'error', 'fault']","['downstream', 'error', 'fault']"
Availability,"resentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple pulse scheduling, e.g.; > Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages or; > commonly used language e.g. through quantum assembly language (qasm); > ----------------------------------------------------------------; >; > Best; > Boxi; >; > From: Nathan Shammah<mailto:notifications@github.com>; > Sent: Tuesday, February 25, 2020 8:36 AM; > To: qutip/qutip<mailto:qutip@noreply.github.com>; > Cc: Boxi Li<mailto:etamin1201@gmail.com>; Author<mailto:; > author@noreply.github.com>; > Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wishes,; >; > Nathan; >; > Dr. Nathan Shammah; > Postdoctoral Research Scientist; > Theoretical Quantum Physics Laboratory; > RIKEN, Wako, Saitama, Japan; > www.n",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:2901,error,error,2901,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,2,['error'],['error']
Availability,"ries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most libraries, and makes their class definitions more complex.; - Control between different versions is perhaps a little easier (though a minor point): this _feels_ easier to separate out different versions, and detect what to register as the conversion function with QuTiP. This is a particular advantage for Python classes compiled as C-extensions (like from C or Cython), which typically don't allow assigning methods dynamically.; - A library could even register multiple versions of the conversion function with us, and let QuTiP handle API versioning centrally, rather than requiring downstream libraries to roll their own checks.; - We're basically already set up to do this in `dev.major` already. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new formats), and I think the benefits of a priority queue of allowed converters outweighs it in convenience for users.; - It involves some global state of the `qutip` library, which _may_ cause problems for multiprocessing if somebody tries to register a `lambda` converter (can't pass through `pickle`, though I'm not 100% on whether module-level stuff needs to), and o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:6677,down,downstream,6677,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['down'],['downstream']
Availability,"rtain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7fa2ddc04270). Current thread 0x00000001123d55c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. ## Relation to `to_kraus`. The above `Malloc.py` file uses `scipy.linalg.eig` via use of an `eseries` version of `correlation`. The current test of superoperator representations uses `choi_to_kraus` which also calls `scipy.linalg.eig`. Here is a file `kraus.py` that can reproduce these segfaults semi-reliably (may need to run it a few times to get it to trigger):. ```python; import qutip. s = qutip.rand_super(); c = qutip.to_choi(s); k = qutip.to_kraus(c); ```. For example, here's a similar command on this file:. ```; Debug memory block at address p=0x7f98cc467db0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:3412,error,error,3412,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['error'],['error']
Availability,"s a minor amount vtable weight for most libraries, and makes their class definitions more complex.; - Control between different versions is perhaps a little easier (though a minor point): this _feels_ easier to separate out different versions, and detect what to register as the conversion function with QuTiP. This is a particular advantage for Python classes compiled as C-extensions (like from C or Cython), which typically don't allow assigning methods dynamically.; - A library could even register multiple versions of the conversion function with us, and let QuTiP handle API versioning centrally, rather than requiring downstream libraries to roll their own checks.; - We're basically already set up to do this in `dev.major` already. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new formats), and I think the benefits of a priority queue of allowed converters outweighs it in convenience for users.; - It involves some global state of the `qutip` library, which _may_ cause problems for multiprocessing if somebody tries to register a `lambda` converter (can't pass through `pickle`, though I'm not 100% on whether module-level stuff needs to), and of course there's the query of what happens when converters are registered in separate processes. We already have this ""problem"" in 5.0 though, because that's how the entire underlying dispatch mechanism is handled; we can just require that converters must be pickle-able.; - If a downstream package wants to lazily `import qutip` (we're a pretty heavy import right now), it's harder in this method; you'd basically have to ask a ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:7135,down,down,7135,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['down'],['down']
Availability,"s it nice could copy it to the; > Wiki page.; >; > I add some details based on the original description:; > ------------------------------; > 1. Error mitigation in QuTiP; >; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse sche",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:1642,error,error,1642,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['error'],['error']
Availability,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:3269,failure,failures,3269,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['failure'],['failures']
Availability,"st sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a totally fair test, and simply replicate the full functionality of `qutip.displace` (including creating a `Qobj` at the end), my method is ~4x faster on small matrices (`1 <= dim <= 20`) and it only goes up from there (I found it's about ~10x faster at `dim = 1000`, and beyond that `qutip.displace` is too slow to bother). If I store the calculation of the eigensystem, and output an `ndarray` instead of converting to `csr_matrix` (and so don't produce a `Qobj`), then I find speed ups in getting the operator for a new `alpha` as ~100x for small matr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:2015,toler,tolerance,2015,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['toler'],['tolerance']
Availability,"st_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>do",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1614,error,error,1614,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['error'],['error']
Availability,"started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another con",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1703,mainten,maintenance,1703,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['mainten'],['maintenance']
Availability,"t handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventually favourable to this, so I propose we focus the discussion only on this point, and leave aside implicit or explicit conversion discussions. . I'll gladly open another issue to discuss implicit conversion, if you want, or we could organise a small round table among a bunch of developers to talk about this on skype, but for now, all i'm asking, is to agree on the design of an interface to allow easy conversion of objects to qutip objects.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:2749,avail,available,2749,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['avail'],['available']
Availability,"the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecti",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2305,avail,available,2305,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['avail'],['available']
Availability,"ther libraries want to interact with QuTiP! In the interests of inciting more discussion, I've got thrown in some more discussion points below - I'm 100% sure they're all solvable, but it also seems like there isn't one way that's unambiguously correct to do them, so they're worth discussing. ---. In principle I'm happy to implement this, though I don't really agree with your assertion that `othertype.toqobj()` is bad style! It might be so in Julia, but Python doesn't have all the same multiple-dispatch niceties that Julia has, so at the end of the day, we have to add in a method with a ""magic"" name somewhere, and it all just comes down to choosing the name of the method. The downside to having a magic name is that it means we have to eschew proper namespacing; what if another library one day wants to call their interface the same thing? Then it's completely impossible for a downstream library to interoperate with both. Having conversions be a non-special method of the downstream class, and leaving our constructor unaware of them alleviates that issue. Numpy can get away with squatting the `__array__` name because they're _huge_, but I would argue that if we do it, we could actually _harm_ the quantum software ecosystem in the long-run - what happens when a package better than QuTiP comes along that wants to call its objects `Qobj` as well? Let's face it - it's a pretty straightforward name!. All that said, I am very aware that not everyone agrees with me on this, and I _am_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no other package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. havin",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:1093,down,downstream,1093,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['down'],['downstream']
Availability,"to be almost entirely unreliable in these cases, because the segfault may often occur while the garbage collector is running, and that will happen at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2041,fault,fault,2041,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['fault'],['fault']
Availability,"to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:4263,down,down,4263,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['down'],['down']
Availability,"torial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes than the number of available slots.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1585,avail,available,1585,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,3,['avail'],['available']
Availability,"ucer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an issue with QuTiP. I suspect it isn't an issue with `scipy` either, but I'm not sure - it looks like a slight overwrite in MKL on macOS, though it's also possible that `scipy` passes some invalid pointers when dropping down to BLAS/LAPACK. I get the impression that the next steps involve dropping down a level of abstraction, down to Cython to directly call scipy's wrappers, or even fully down t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:7333,error,error,7333,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['error'],['error']
Availability,"ver-new-methods. all seem consistent with previous notebook results. **Time Benchmarking**; All the stochastic solvers in those notebooks now run much faster: between a factor 2 and 30 in speedup from last time I ran them, which was consistent with times obtained by @Ericgig and saved in the folder. . I am on Python 3.7.3, I recently updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Total run time: 0.90s; Total run time: 1.13s; Total run time: 1.15s; Total run time: 1.41s; Total run time: 1.66s; Total run time: 2.03s; Total run time: 2.47s; {'solver': 'pc-euler'}; Total run time: 0.38s; Total run time: 0.46s; Total run time: 0.58s; Total run time: 0.70s; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:1285,down,down,1285,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['down'],['down']
Availability,"why I was suggesting that `object.__qutip_qobj__` should not return a Qobj directly, but rather the data needed by QuTiP to construct a Qobj, and qutip should be free to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool = Flag specifying whether Qobj should get a copy of the input data, or use the original.; fast : bool = Flag for fast qobj creation when running ode solvers.; ```. For the case of the usage that netket would have, our objects already define the Hilbert space they are acting on (so `dims` and `shape`). `copy` doesn't really make sense for us, because we would be building the representation . The way I see it, `Qobj(other_pkg_o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1593,error,error,1593,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,2,"['down', 'error']","['downgrade', 'error']"
Availability,"—; Let me begin by saying that I completely understand your concerns. I am not trying to enforce a view on the QuTiP project, but rather as I see; I would like the various frameworks in the vast ‘quantum’ ecosystem to ; coexist in such a way that makes easy for users to jump from one tool to the other easily. I personally envisage an ecosystem where one can write down an hamiltonian in the tool of choice, obtain the exact time evolution with qutip, and maybe have a look at it’s semiclassical trajectory. Jump into netket and check if a variational representation can properly capture the correlations. Trotterize the hamiltonian and get a circuit, without worrying about how to convert from one framework to the other. . I want to start the discussion on this topic eagerly because I am aware that it will take a fairly long time. If there is anything I can do to make your future internal discussions easier, do let me know. > I just want to caution you in case you're trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:366,down,down,366,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['down'],['down']
Availability,"’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:1794,error,error,1794,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['error'],['error']
Deployability," 2020 project ""Error mitigation; > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > Wiki page. I post it here so if anyone finds it nice could copy it to the; > Wiki page.; >; > I add some details based on the original description:; > ------------------------------; > 1. Error mitigation in QuTiP; >; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:1501,integrat,integration,1501,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['integrat'],['integration']
Deployability," in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > > Wiki page. I post it here so if anyone finds it nice could copy it to the; > > Wiki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:5142,integrat,integration,5142,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['integrat'],['integration']
Deployability," module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exactly what I was doing. 6. Yeah, I'm going to add additional `imul`, `ineg` and `idiv` routines as dispatched operations. 7. LAPACK/BLAS as far as we can. I've no pretense to being able to write faster code than hardware-specific optimised stuff for matrices. I haven't actually written most of the numerical code in this PR either - it's just ported from current `qutip`, with the variable names changed to be more descriptive.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:1964,release,released,1964,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['release'],['released']
Deployability," right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:4629,integrat,integrator,4629,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,2,['integrat'],"['integrator', 'integrators']"
Deployability," since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent ch",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5991,integrat,integrate,5991,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Deployability," surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9901,integrat,integrator,9901,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['integrat'],"['integrator', 'integrators']"
Deployability," time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7069,integrat,integrate,7069,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Deployability,"* imports first except. ```from qutip.qobj import *```. then we can remove the numpy and scipy checks but numpy is still used to setup pyximport in . ```; # Setup pyximport ; import pyximport; os.environ['CFLAGS'] = '-O2 -w -ffast-math'; pyximport.install(setup_args={'include_dirs': [numpy.get_include()]}); del pyximport; ```. Then we can move the section regarding multiprocessing to some appropiate place. Currently it is used in the following files. Can we put the multiprocessing stuff in a file called `multiprocessing_config.py` and run it to get the settings in `__init__` at all the places where we need multiprocessing.; ```; /Users/shahnawaz/dev/qutip/qutip/__init__.py:; 33 from __future__ import division, print_function, absolute_import; 34 import os; 35: # Fix the multiprocessing issue with NumPy compiled against OPENBLAS; 36 if 'OPENBLAS_MAIN_FREE' not in os.environ:; 37 os.environ['OPENBLAS_MAIN_FREE'] = '1'; ..; 149 # cpu/process configuration; 150 #; 151: import multiprocessing; 152 ; 153 # Check if environ flag for qutip processes is set; ...; 164 qutip.settings.num_cpus = info['cpus']; 165 else:; 166: qutip.settings.num_cpus = multiprocessing.cpu_count(); 167 ; 168 ; ...; 270 # Clean name space; 271 #; 272: del os, sys, numpy, scipy, multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_count()); 94 return {'os': 'Windows', 'cpus': ncpus",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:1003,configurat,configuration,1003,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['configurat'],['configuration']
Deployability,"**Benchmarking**; The results of [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). * development-smesolve-milstein-speed-test.ipynb; * development-smesolver-new-methods.ipynb; * development-smesolve-tests.ipynb; * development-ssesolver-new-methods. all seem consistent with previous notebook results. **Time Benchmarking**; All the stochastic solvers in those notebooks now run much faster: between a factor 2 and 30 in speedup from last time I ran them, which was consistent with times obtained by @Ericgig and saved in the folder. . I am on Python 3.7.3, I recently updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Tota",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:609,update,updated,609,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,2,['update'],"['updated', 'updates']"
Deployability,", but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density ma",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6359,integrat,integrator,6359,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,", hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7364,integrat,integrate,7364,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Deployability,". I will briefly summarize what I found out and changed. Setting up and using an MPI environment is surprisingly difficult, and I don't think it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1026,install,install,1026,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,3,['install'],"['install', 'installs']"
Deployability,".36s; Total run time: 5.51s; Total run time: 6.58s; Total run time: 9.64s; Total run time: 10.74s; Total run time: 12.29s; {'solver': 'pc-euler-2'}; Total run time: 1.54s; Total run time: 1.86s; Total run time: 2.50s; Total run time: 2.79s; Total run time: 3.36s; Total run time: 4.03s; Total run time: 4.98s; Total run time: 6.56s; {'solver': 'explicit1.5'}; Total run time: 5.28s; Total run time: 6.35s; Total run time: 7.74s; Total run time: 8.99s; Total run time: 10.34s; Total run time: 12.41s; Total run time: 15.40s; Total run time: 21.40s; {'solver': 'taylor1.5'}; Total run time: 3.30s; Total run time: 3.85s; Total run time: 4.52s; Total run time: 5.63s; Total run time: 7.22s; Total run time: 8.72s; Total run time: 9.51s; Total run time: 11.84s; {'solver': 'taylor1.5-imp'}; Total run time: 5.43s; Total run time: 6.81s; Total run time: 7.60s; Total run time: 10.05s; Total run time: 11.88s; Total run time: 12.88s; Total run time: 15.63s; Total run time: 22.31s. ```; ; **Minor issue: plots breaking notebook rendering**; Jupyter Notebooks have a broken rendering when cells with plots are run; refreshing the notebook sometimes works fine. This is sometimes fixed in the first place by adding; ```; plt.show(); plt.close(); ```; but not always. Maybe we can have a look at this minor issue in the development notebooks. . **Documentation**; It would really increase the adoption rate if the API doc and User Guide could be updated to highlight the stochastic solvers and new methods. The development notebooks are so well written that drawing from their examples should be simple. . Congratulations @Ericgig for this refurbishment, improvement, optimization and thorough benchmarking investigations of the stochastic solvers, which I hope will be widely tested by @nwlambert @ajgpitch @quantshah (and @fminga) for robustness once merged in the development master branch. I am merging this and the montecarlo split PR, hoping there are no incompatibility issues (#990 --> #991 --> #969).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:6019,update,updated,6019,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['update'],['updated']
Deployability,"245663589>:; >; > > + self.floquet_basis.T,; > + c_ops,; > + c_op_rates,; > + Hargs,; > + time_sense=time_sense); > +; > + Rate_Qobj_list = [Qobj(; > + RateMat, dims=[[self.Hdim, self.Hdim], [; > + self.Hdim, self.Hdim]],; > + type=""super"",; > + superrep=""super"",; > + copy=False; > + ) for RateMat in RateDic.values()]; > + self.R0 = Rate_Qobj_list[0]; > +; > + self.Rt_timedep_pairs = []; >; > These self.Rt_timedep_pairs are never used?; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245667295>:; >; > > + floquet : bool,optional {False}; > + Whether to return the state in the floquet basis or laboratory; > + basis.; > +; > + args : dict,optional {None}; > + Not supported; > +; > + .. note::; > + The state must be initialized first by calling ``start`` or; > + ``run``. If ``run`` is called,``step`` will continue from the last; > + time and state obtained.; > + """"""; > + if args:; > + raise ValueError(; > + ""FMESolver cannot update arguments""); > + state = super().step(t); >; > Did you test this?; > I am pretty sure it would not work when time_sense=0.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245668542>:; >; > > + RateMat, dims=[[self.Hdim, self.Hdim], [; > + self.Hdim, self.Hdim]],; > + type=""super"",; > + superrep=""super"",; > + copy=False; > + ) for RateMat in RateDic.values()]; > + self.R0 = Rate_Qobj_list[0]; > +; > + self.Rt_timedep_pairs = []; > + for idx, key in enumerate(RateDic.keys()):; > + if key != 0.0:; > + self.Rt_timedep_pairs.append(list([Rate_Qobj_list[idx],; > + 'exp(1j*' + str(; > + key * list(Hargs.values())[0]); > + + '*t)'])); > + self.Rt_timedep_pairs = [list([Rate_Qobj_list[idx],; >; > This is defined twice...; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245675791>:; >; > > + time_sense=0,; > + quickso",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:13227,update,update,13227,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['update'],['update']
Deployability,"> @cgranade I'm really liking the overall look of the Instrument class -- it's a much easier way to deal with measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. Thank you for the kind words!. > I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:; > ; > * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; > * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is id",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:751,release,release,751,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['release'],['release']
Deployability,"> I am using Anaconda on windows 10 and installed qutip from conda-forge package, I don't have VS-15 on my system, Is it possible that that I could run qutip with VS-15 runtime liberaries instead of complete installation of visual studio. If it is possible please guide me. Dear Bilal I am quite new to use python and qutip.... some how i am not able installed qutip from conda-forge package on window 10..... can you please let us know the step wise installation. (waseem)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-480478000:40,install,installed,40,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-480478000,4,['install'],"['installation', 'installed']"
Deployability,"> I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This is not the case. The answer to your question is to use `QobjEvo` as suggested. For example, here is a simple example using a fast-oscillating array function in a `QobjEvo` and a much shorter `tlist` in `mesolve`. You may need to set the solver options `nsteps`, `atol` and `rtol` to suitable values, as I have done here. ```python; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * 2.91e2 * fast_ts); # This is the behaviour you were suggesting is happening.; bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options). assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # -0.59736575; print(many_times.expect[0][-1]) # -0.59736575; print(bad_times.expect[0][-1]) # -4.5466086e-08; ```. You can see that I was able to do a successful integration with only 2 times in `mesolve`, but many in a fast-oscillating Hamiltonian. Clearly the `bad_times` version (which only has the start and end points so misses all the fast oscillation behaviour) is completely different to the other two versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525:1616,integrat,integration,1616,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525,1,['integrat'],['integration']
Deployability,"> I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"".; > ; > I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension.; > ; > Thank you. Thank you so much for sharing this!. The cell outputs that included Qobj with Latex code wasn't rendering properly for me just like your issue (although Latex code in the Markdown cells was rendering correctly). I spent hours and tried countless online suggestions to fix the issue with no success, until I re-installed the the 'Jupyter Notebook 'Renderers' extension to the old version (v1.0.4) before it removed the latex support. Now I have the option to 'change presentation' of the output cells so it uses the old version of the extension, and now it finally displays the output with the Latex rendered correctly!. Thank you again for suggesting the only solution that worked for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1633135302:511,install,install,511,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1633135302,2,['install'],"['install', 'installed']"
Deployability,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:16,integrat,integrate,16,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,7,['integrat'],"['integrate', 'integrator']"
Deployability,"> It's very clean, I really like the `set & set` and reusing the classes. Thanks!. > But in v4, while we used `f(t, args)` in most examples, we never said that it should be the exact signature up to variable name, so I don't think it an appropriate check for which version to use. Ideally, the check should be good enough we don't need to change any tests not directly related to the addition of this feature. I'm open to modifying the check for QuTiP v4 functions, but I would like to keep the check simple. To quote the Zen of Python, ""If the implementation is hard to explain, it's a bad idea."". :). > Also what should; > ; > ```; > def f(t, w, a=1):; > return a; > ; > coeff = coefficient(f, args={'w':1}); > coeff.replace_arguments(a=2)(0); > ```; > ; > give? Since `a` is not given, it's not our job to update it, or should we add it to `_f_arg_names`?. I think this works fine already in this branch. `a` is included in `_f_arg_names`, so it can be specified via `.replace_arguments(...)` but since it has a default it can also be left out.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390:809,update,update,809,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390,1,['update'],['update']
Deployability,"> There is no agreement on how this should be handled yet. It's been removed from `dev.major` with the plan to restore it before the release, but the exact interface is not fixed. It certainly will not be some special keyword in args. It could be a special value, or a special parameter / method for the solver class. Actually having a method in the solver class seems better, I suppose this is why we are going towards Solvers from the simple `mesolve` function. I am going to try and rewrite my example using the Solver class. We can probably get away with having this functionality only in the new Solver class --- benefit of a major release I guess.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362:133,release,release,133,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362,2,['release'],['release']
Deployability,"> Users who makes their own SolverOptions are the base case. Using the `??solve` function with an `Options` instance and with documentation for the options items in the `Options` class, is the way in v4 and will probably stay that way for a while. Having a options not knowing about the solver let it accept bad options and typos. Also it hides the options documentation: solver's options could be in the `??solve` function, but not integrator options. The integrator was merged into the solver in v4 and is not made to be used directly by the average user. So the user should not need to know they exist to use qutip, nor refer to them directly to see which options are supported. I'm not sure I am quite following, but my thought was that options would be checked by the solver class when they are passed in. The mechanism the solver class would use for doing the check, would be to pass the description of the allowed options to the SolverOptions class, along with the options themselves. > Not sure I understand why this would be convenient, flat seems a easier to use and less confusing. Ideally the user should not need to know that there are 2 levels of options. The reason for nesting the ode options a little, is to make it clear which options might change if the ODE method changes. If one hides the structure completely, there is nothing to guide the user as to which options are related to what. E.g. If ODE method ""A"" took option ""opt1"" and method ""B"" took ""opt2"" then it's much clearer what is happening if one has to pass `""ode"": {""method"": ""A"", ""opt1"": 1}` and `""ode"": {""method"": ""B""}` than `""method"": ""A"", ""opt1"": 1"" and `""method"": ""B"", ""opt2"": 2`. In the flat case, one might accidentally have `""method"": ""B"": ""opt1"": 1` and ""opt1"" would be ignored. I am not too hung up on the exact approach for this bit though -- I just want it to be clear to the user what is going wrong, and for it to be a little be hard to options for different ODE methods clash with each other or other solve",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647:433,integrat,integrator,433,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647,2,['integrat'],['integrator']
Deployability,"> We allow the user to supply the `QobjEvo` class to use as an option, and allow them to specify either the class itself or a name for the class. E.g. `qobjevo_cls=QobjEvoHerm` or `qobjevo_cls=herm`. I would prefer the user not needing to know how we do it, just that there an option that speed up the simulation by 40 % in normal cases. Knowing that we forced it in an alternative qobjevo class is not useful and I hope we won't be forced to add many kinds of qobjevo. > Perhaps we should also not allow users to switch the class later by changing options? That might simplify the logic because we wouldn't need to modify the RHS when options are updated. Since changing options does not change the physic, I would like them to be changeable. But the `rhs`, and `_rhs` is certainly not great. I will rethink the way to do it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203:648,update,updated,648,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203,1,['update'],['updated']
Deployability,"> What exactly is this `dev.major` branch?. Hi @eendebakpt. `dev.major` is the branch in which we are developing QuTiP version 5. We're still doing important fixes for 4.7.1, but we're not planning to release any more feature for the 4.X series (although *maybe* that could change -- we'll see how the move to 5 goes). I'll update the contributing guidelines to mention QuTiP 5. QuTiP 5 has been in the works for a long time, but we're now in the ""cleaning things up"" phase, and hope to release an alpha version in the next month or so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1943#issuecomment-1168823150:201,release,release,201,https://qutip.org,https://github.com/qutip/qutip/pull/1943#issuecomment-1168823150,3,"['release', 'update']","['release', 'update']"
Deployability,"> What if we rethink the approach from the beginning:; > ; > ```; > QobjEvo([op, func], args={""state"": Solver.StateFeedback(default=psi0)}); > QobjEvo([op, func], args={""e1"": SESolver.ExpectFeedback(e_op)}); > QobjEvo([op, func], args={""state"": MESolver.StateFeedback(raw_data=True)}); > QobjEvo([op, func], args={""collapse"": MCSolver.CollapseFeedback()}); > QobjEvo([op, func], args={""W"": SMESolver.WeinerFeedback()}); > ```; > ; > And we remove the `add_feedback` method. This looks great. I really like that it makes it clearer where the feedback comes from and that it is solver dependent. Removing the need to specify the feedback in two places when constructing a `QobjEvo` is really nice too. Let's do it in a separate PR though (unless you strongly want to update this one). I have a slight concern that it might be a bit complicated for users to find the feedback classes (e.g. they have to know to import the right solver) but I'm sure we can make that nice the PR itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984:765,update,update,765,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984,1,['update'],['update']
Deployability,"> You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits. Yep ! That's what I thought as well..for all the single qubit gate outputs with two targets. I knew I was getting an error but was not sure why it was not the same error as both of you. It was because I was using the released version (like you predicted). . I was trying to put off installing from source for as long as I could because I would have to install conda and other dependencies manually. Now, I did get `ValuError`. Thanks !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555:330,release,released,330,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555,3,"['install', 'release']","['install', 'installing', 'released']"
Deployability,"> `result.measurement` is not the same as `result.expect`, the measurement is an expectation value, but not of the `e_ops` but `m_ops` which are usually automatically generated from the `c_ops` and noise is added to the computed expectation value of the state of the trajectory. The noise is usually larger than the signal and makes it hard to see, but it should converge to mesolve's solution eventually.; > ; > `smesolve`'s `expect` are just the expectation value of the state of each trajectories (averaged or not depending on options) and should average to the master equation solutions with enough trajectories. Plot in cell 8 show the match is quite good. Even with enough trajectories, the numerical error from `smesolve` will be visible.; > ; > The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of a",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:827,integrat,integration,827,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,1,['integrat'],['integration']
Deployability,"@Ericgig any tips how to locally run `pycodestyle` linter so that it follows same settings as `codeclimate`? When I run it locally it show way more warnings than `codeclimate`, seems a lot more restrictive. I'm sure some sort of configuration is missing. I checked the [contribution guide](https://qutip.org/docs/latest/development/contributing.html) but this particular matter is not detailed. If you explain how to run linter locally I would be happy to also update the docs and document it for the future contributors.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655#issuecomment-925558661:229,configurat,configuration,229,https://qutip.org,https://github.com/qutip/qutip/pull/1655#issuecomment-925558661,2,"['configurat', 'update']","['configuration', 'update']"
Deployability,@Ericgig not in any huge hurry. Once there is a nice subset of tests that can be run to test installation I will update the nixpkgs package for qutip. Thanks for being so responsive! For now I'll just delete some of the tests and can always update the package once the ability to test only a subset is added to a release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675:93,install,installation,93,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675,4,"['install', 'release', 'update']","['installation', 'release', 'update']"
Deployability,"@Erotemic Thank you for documenting this. I will merge it shortly & have marked if for inclusion in QuTiP 4.6.3. Note that qutip-qip has also been split out into it's own package (https://github.com/qutip/qutip-qip) in preparation for QuTiP 5 so we should update it there too. `reverse_states` seems to reverse the order of the array of quantum and classical bits. It is a bit odd, so I'm happy to leave it undocumented. The original commit just read:. ```; commit dcf8d363718b6ee5a8a17ec9af00df4bc8aea166; Author: Robert Johansson; Date: Mon May 26 19:11:44 2014 +0900. allow reversing the circuit represenation. added support for multigate symbol; ```. @BoxiLi Just pinging you so you know I merged this and can comment if you like.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1652#issuecomment-914132388:256,update,update,256,https://qutip.org,https://github.com/qutip/qutip/pull/1652#issuecomment-914132388,1,['update'],['update']
Deployability,"@ajgpitch, I think that instance method picking is still somewhat of an issue in python 3, (which is what I use primarily) although I could be wrong. Either way, since the current QuTiP version supports 2.7, we would need to make this backward compatible to do multiprocessing correctly, so I'm glad you agree that option 3 is best. As to dropping python2 support, I think that this would be a good idea for v5.0, since [python is dropping support for 2.7 in two years](https://legacy.python.org/dev/peps/pep-0373/), which could be close to the time that QuTiP v5 is released (depending on how long the changes take). @sahmed95, thanks for making those final changes - sorry, I had forgotten to make the docstring capitalization changes. I'm happy with the state of the module now, so go ahead and merge it. There haven't been any functional changes made to how anything works, so none of my other pull requests ([[1]](https://github.com/qutip/qutip-notebooks/pull/58), [[2]](https://github.com/qutip/qutip-doc/pull/59), [[3]](https://github.com/qutip/qutip.github.io/pull/51)) should need to be updated. In the qutip-docs PR, for the moment I've only added auto-doc documentation, but I'll add more extensive documentation before version 4.3 is released (when is the expected time frame for this?) so that people will have more to refer to when this new feature is announced. . Thanks to everyone involved in this review process for their constructive feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-386413620:567,release,released,567,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-386413620,3,"['release', 'update']","['released', 'updated']"
Deployability,"@cgranade I'm really liking the overall look of the Instrument class -- it's a much easier way to deal with measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:. * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground.; * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases like this where there are essentially an infinite number of possible constructors, it makes sense to not ""bless"" any of them by sticking them on the class.; * It would be good to have one really nice use case that we could turn into a guide entry in the documentation. The current small examples are great, but it would be good to add one slightly bigger worked example that did something more ""exciting"".; * I would not push everything into the `qutip` namespace (largely because we would likely not want that in v5, although I should actually check what v5 is doing in `qutip.__init__` these days).; * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release). Hoping to hear comments from others!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-949022910:1933,release,release,1933,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-949022910,1,['release'],['release']
Deployability,"@goerz I think one of Mølmer's papers (maybe the one I have pointed out) addressed the equivalence of the two methods. Sorry, I don't have a definite paper to point out at this moment. I was actually organizing the Julia community to work on this direction (see [JuliaQuantum](http://juliaquantum.github.io)) from scratch, and hence didn't follow up the efforts in the measurement simulation within QuTiP. . When I was writing my paper on continuous measurement ([PRA, 93.023817](http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817)), I came up the argument that the former method may be more appropriate for measurement models. This is because measurements have to happen in evenly spaced time steps determined by the detector's integrating time, so it is intuitive to use a random number to judge if on each measurement step the quantum jump will happen. There may be a way to use the second method to implement the same measurement simulation model, but I didn't think too much on it. In reality, I developed another more efficient method without actually evolving the density operator in my paper to simulate continuous measurement using a set of stochastic equations for squeezing thousands of atoms' state which has not been included in QuTiP yet. Sorry I don't have more useful reference that explains this point in more details at this moment. Good luck!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-220744432:439,continuous,continuous,439,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-220744432,3,"['continuous', 'integrat']","['continuous', 'integrating']"
Deployability,"@heathcliffYang This seems to be running okay. I hope you can use QuTiP now. Try running this simple code in python. ```; from qutip import *. rho = basis(2, 0); print(rho); ```. P.S. you may also want to update your Anaconda as the latest is Anaconda 5. Let me know if you have any other issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387667826:205,update,update,205,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387667826,1,['update'],['update']
Deployability,@hodgestar . I removed the `_rhs` by changing it so the rhs is built when making the integrator instead of in `__init__`. I also simplified the way options are updated so brmesolve no longer need to overwrite `_apply_options`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940:85,integrat,integrator,85,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940,2,"['integrat', 'update']","['integrator', 'updated']"
Deployability,"@hodgestar I've added some tests for the spin_q_function. At the moment it tests a random density matrix for three different spin values. I'm not very familiar with qutip's style for writing tests, I would normally write a test function that would also take arguments but that doesn't seem to be the norm here. We could also do something similar to the `TestHusimiQ` class of tests. I've had a look at the `spin_wigner` function as well, and I believe that had the same issue of density matrix indexing.; I've re-implemented it (and the `_rho_kq` function) and I've added details to the docstrings including relevant references.; Should I create a separate PR for this or should I expand the scope of this PR?. NB: At the moment I can't think of an easy way to test the spin Wigner function because there is no simpler/alternative definition that I am aware of to verify the implementation against.; There are simple tests such as if the imaginary part is less than some threshold (currently true), does it integrate to 1 (currently not true, not sure why).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617:1007,integrat,integrate,1007,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617,1,['integrat'],['integrate']
Deployability,"@maij The code is looking good to me. I've requested some changes and after that I'd like to do a final review, but I think we're in good shape. My thoughts on the remaining questions:. > Decide if the spin_wigner function should return only real values be default (as is currently done for the spin_q_function). I'm +1 on returning real values since the Wigner function is real valued and this is more consistent (unless you're aware of any strange cases where it might somehow not be?). > Decide whether to integrate the W function normalization in _rho_kq rather than at the top level. We divide all terms by (2*j + 1) only to end up multiplying it back out at the end which is a waste of time (_rho_kq is called d**2 times, d=2*j+1) . The benefit of leaving it as-is is that it reads like most definitions in literature. I'm +1 on sticking to the definitions in literature unless there is a measured speed penalty. `2*j + 1` likely can't be that big and the small number of arithmetic operations required is probably dwarfed by the matrix multiplications happening. . > Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). Here I would try stick as closely as possible to the previous behaviour of these functions (i.e. cases which worked before should hopefully return the same answer now) and then document clearly what the normalization factor is and how it should be added or removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186:509,integrat,integrate,509,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186,2,['integrat'],"['integrate', 'integration']"
Deployability,"@nathanshammah, @Ericgig, @ajgpitch, @nwlambert, @quantshah, @BoxiLi, @hodgestar. I've updated this PR to match what I understand we agreed on. I've also added complete copyright notices to the documentation, including linking the CC-BY-3.0 licence the documentation text is licensed under, and making it clear that it's the documentation _text_ licensed under CC, and that the code is under 3-clause BSD. I've updated the frontmatter, and added a copyright notice to the index, so it's linked from every page in the documentation releases. I have updated the short copyright notice at the bottom of the documentation pages to say ""Copyright 2011 to 2021 inclusive, QuTiP developers and contributors"" to make it consistent with the source code (for the same reasons). As I've added a `_copyright` Sphinx target, the word ""Copyright"" at the bottom of the documentation is now hyperlinked as well. I didn't explicitly split this into more than one PR, but it's split into separate logical commits, which explain their extent and intent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298:87,update,updated,87,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298,4,"['release', 'update']","['releases', 'updated']"
Deployability,@pmenczel I updated the PR again to simplify the new Cython code a lot and shift parts to Python. I'm much happier with this version and hopefully it makes it easier for you to understand too.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1498867381:12,update,updated,12,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1498867381,1,['update'],['updated']
Deployability,"@quantshah Great work, this seems like exactly what we need. ; We already have a section in the release-distribution document about building the docs, so we can add a bit about rebuilding the previous version docs with `is_latest = False` and uploading. ; I don't think that it is feasible to rebuild all the old docs. Would be a lot of work, as we would have to recreate working envs for the versions. Would seem more feasible to edit the HTML - I guess we could script this, as each guide file would need to be fixed. We could also consider just removing some of the older versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1516#issuecomment-468176031:96,release,release-distribution,96,https://qutip.org,https://github.com/qutip/qutip/issues/1516#issuecomment-468176031,1,['release'],['release-distribution']
Deployability,"@quantshah: This has always been the case, and it's part of the installation instructions in the user guide (http://qutip.org/docs/latest/installation.html#platform-independent-installation). If there's anywhere it's missing we should add it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-671444213:64,install,installation,64,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-671444213,3,['install'],['installation']
Deployability,"@sahrak Thank you for reporting this. The parameters for `sesolve` changed slightly since the guide was written and the guide wasn't updated. I will make a PR to fix it shortly, but in the mean time you can run:. ```python; qutip.floquet.fsesolve(H, psi0=psi0, tlist=tlist, e_ops=[qutip.num(2)], args=args); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1663#issuecomment-927605654:133,update,updated,133,https://qutip.org,https://github.com/qutip/qutip/issues/1663#issuecomment-927605654,1,['update'],['updated']
Deployability,"Actually it probably doesn't shake out to a single time-dependent operator like I thought it might at the start. You can still do the Taylor expansion to try (you can find a similar result for 3x3 spin matrices to the 2x2 case), but there's not going to be a cancellation I thought there might have been. Right now, QuTiP doesn't support arbitrary time-dependence in collapse operators, so if you can't find a way to write it in that form, you might have to do the integration manually yourself until we've added it - the QuTiP guide [explains how QuTiP does the integration](http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642:465,integrat,integration,465,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642,2,['integrat'],['integration']
Deployability,"Additionally, from looking through your comments it appears that something; definitely went weird with formatting and/or merging. I'll comb back; through and make to fix any of these issues before I request a re-review. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839:698,integrat,integration,698,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839,2,['integrat'],"['integration', 'integrator']"
Deployability,"After you created a fork to work on #1242, a different PR (#1226) was merged into `master`. It so happens that #1242 and #1226 don't conflict so that merge succeeded, but the new changes you're now trying to make do. This is fundamentally a true merge conflict and so unfortunately there's no fancy way around it, though it could have been avoided if you'd matched the state of our `master` before beginning work here, and it would be a bit easier for you for future PRs to branch off before starting work (GitHub has [some nice material about this workflow](https://guides.github.com/introduction/flow/)). I've rebased your PR onto our `master` and fixed the resulting merge conflict for you. You should _immediately, without doing anything else_ reset your branch state to match mine, and then force-push your changes to GitHub to update the PR. To do this, do; ```bash; git remote add jakelishman https://www.github.com/jakelishman/qutip.git; git fetch jakelishman; git checkout master; git reset --hard jakelishman/Canoming-circuit-patch; git push --force; git remote remove jakelishman; ```; This will destroy anything on `master` that you may have but haven't yet pushed. You should do it anyway, because a lot of the underlying structure has changed from underneath you, and your changes aren't consistent with the current state of `circuit.py`. Please also note that the tests are failing after your modifications in (the current) 10e457e.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121:833,update,update,833,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121,2,"['patch', 'update']","['patch', 'update']"
Deployability,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:368,patch,patch,368,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,1,['patch'],['patch']
Deployability,"All builds pass, besides the build on Python 3.7 without Cython. I would still merge this PR and focus on that issue separately. . Now we need to update places where `nose` is mentioned, I found these in `qutip-doc`; - the [changelog](https://github.com/qutip/qutip-doc), ; - the instructions on the dependencies in the documentation [installation instructions](https://github.com/qutip/qutip-doc/blob/402ec10de7a314ba9f124ddac7514621e92496df/installation.rst), ; - and [development guidelines](https://github.com/qutip/qutip-doc/blob/2ffd6d1cc581e858674d43fe97a9297e9476a278/qutip_dev_contrib.md).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938:146,update,update,146,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938,3,"['install', 'update']","['installation', 'update']"
Deployability,"Arne,. Please propose your patch in a PR on our Github. So long as it is; mathematically sound, then the context does not matter in this case. If you need any advice on how to do this, then let us know. Email me direct; if you prefer. alex.pitchford@gmail.com. Thanks. Alex. On Thu, 21 Jun 2018 at 09:31, Arne Hamann <notifications@github.com> wrote:. > I use the qutip to do some Grover simulations. having a Hilbertspace of; > Grover an an additional entangled Hilbert space. In a simpler version there; > is only one state in the entangled Space so the program automatically; > chooses dimension 1.; > And then there are allot of errors coming because of this qutip error.; > At the moment I fixed it using a patched qutip version.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/823#issuecomment-399020891>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7QOoYa2vq7kgVYNcZdxB3vxO3FJnks5t-1n4gaJpZM4SNkIK>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399033847:27,patch,patch,27,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399033847,2,['patch'],"['patch', 'patched']"
Deployability,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:855,release,released,855,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,2,['release'],"['released', 'releases']"
Deployability,"Can you fully show your build process, and did this work with a previous version of QuTiP? It builds fine for me from pip sdist on all major platforms with a simple; ```; pip install qutip; ```; and the sdist of 4.5.2 seems to be missing the same file. Officially we don't support building with OpenMP from pip sdist (only git), but to be fair, it should have worked. In the interests of better semantics, can you change the new line in `MANIFEST.in` to; ```; graft qutip/**/src; ```; Technically there's only the one file that doesn't get tagged in (I hope), but logically the principle is that anything in a `src` directory should be distributed in the `sdist`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343:175,install,install,175,https://qutip.org,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343,1,['install'],['install']
Deployability,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:815,patch,patch,815,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,1,['patch'],['patch']
Deployability,"Dear @HtPsi , I ran your example code and I got the results as,. ```; >>> import matplotlib.pyplot as plt; >>> import numpy as np; >>> from qutip import *; >>> delta=0.2*2*np.pi;; >>> eps0=1.0*2*np.pi;; >>> A=2.5*2*np.pi;; >>> omega=1.0*2*np.pi;; >>> H0=-delta/2.0*sigmax()-eps0/2.0*sigmaz(); >>> H1=A/2.0*sigmaz(); >>> args={'w':omega}; >>> H=[H0,[H1,'sin(w*t)']]; >>> T=2*np.pi/omega; >>> f_modes_0, f_energies = floquet_modes(H, T, args); >>> print(f_modes_0, f_energies); [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket; Qobj data =; [[ 0.72964231+0.j ]; [-0.39993748+0.55468199j]], Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket; Qobj data =; [[0.39993748+0.55468199j]; [0.72964231+0.j ]]] [-2.83131211 2.83131211]; ```; So it is definitely not an issue of the source code. I advise that you try to install the linux box for windows from the simple instructions for Windows 10 : https://docs.microsoft.com/en-us/windows/wsl/install-win10. Then, you can just install QuTiP again like a standard Linux user and run the floquet solver directly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854#issuecomment-392535672:834,install,install,834,https://qutip.org,https://github.com/qutip/qutip/issues/854#issuecomment-392535672,3,['install'],"['install', 'install-']"
Deployability,"Do you get the same behaviour with QuTiP 4.5.0 in the same environment? The offending parts of `qutip/__init__.py` have been there since then, so it shouldn't be new in 4.5.2 at least. I can't reproduce the error unless `pyximport.install()` has already been run before QuTiP is imported (e.g. if I do `import pyximport; pyximport.install(); import qutip` or `importlib.reload(qutip)`). We have `qutip/__init__.py` organised so that we don't enable `pyximport` until after we've done the test for `qutip.cy.openmp.parfuncs`: first we do. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L100-L105. and only after that do we. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L124-L126. In your error it's trying to build `qutip.cy.openmp.parfuncs`, and the only line that ever attempts to import that (in Python space) is line 101 above in `__init__`. It can only attempt to Cythonize files if `pyximport` is activated, but `qutip` doesn't activate that til a few lines later. It's certainly still a bug that this error appears if you've manually activated `pyximport` before (which would definitely cause it), but I'm struggling to find any other reason that the error could appear. We're looking to simplify the handling of OpenMP in a later version, and this buggy check is certainly a good reason to expedite that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290:231,install,install,231,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290,2,['install'],['install']
Deployability,"Edit: I thought that the original pull request would have been killed such that I would need to submit a new one. I don't think this is the case, as of viewing still open request on Git, so I wont be submitting another pull request unless otherwise informed. I'm going to submit another pull request, and it should be much better this; time. I made these changes:. - Fixed whitespace, blank line, and linting issues as far as I can tell; - I'm not sure that I broke lines up entirely the best way in all ; cases, but I think it looks okay enough as of now.; - Took all of my new functions out of floquet.py and placed them; properly into flimesolve.py; - The version of floquet.py that I'll be submitting was one I; directly copy-pasted from the main repository, such that there; shouldn't be any changes whatsoever to it; - replaced all scipy functions with numpy equivalents; - Fixed the issues in correlation.py, as far as I know; - Turns out the issue here was that I never updated correlation.py to; my most current version, which should only add in flimesolve as an option; for solvers (with an if statement or two to get the Hamiltonian into a; FloquetBasis object if flimesolve is the selected solver). Thanks again for your feedback!. On Mon, Jun 26, 2023 at 6:32 PM Fenton Clawson ***@***.***> wrote:. > Hey Eric,; >; > Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:978,update,updated,978,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,1,['update'],['updated']
Deployability,"Every time you open a new terminal, you will need to activate the conda environment by `conda activate qutip-env`. QuTiP is only installed in this environment. If you are interested, you could check https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html for details.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-736060302:129,install,installed,129,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-736060302,1,['install'],['installed']
Deployability,"Firstly, just to underline @jakelishman comment. We *cannot* change the public interface unless we make a new major release. I also don't like the `.N` property, but it snuck in before my time. We could look to change this in v.5, but not before. . It seems this PR does contain some enhancements that are not part of #1209. However, @mlaguna10 did seem to make quite clear that they were already working on the issue. I believe #1209 is ready to merge, but we'll wait for @BoxiLi to confirm. . So what I suggest is that we merge #1209. @MartinSandeCosta can then merge the master into this PR and see what is left that adds to enhancement request outlined #1208. Assuming (with good reason) that there are valuable additions, then we will merge this too. Thanks everyone for contributing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345:116,release,release,116,https://qutip.org,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345,1,['release'],['release']
Deployability,"Good points. I suggest to simply remove the comment in `test_qobj`, and change to pytest in the `setup.py`. Something like what's [here](https://doc.pytest.org/en/3.0.4/goodpractices.html#integrating-with-setuptools-python-setup-py-test-pytest-runner) should work (basically changing `nose` with `pytest`). It seems however that testing it's a thorny [issue](https://github.com/pypa/setuptools/issues/1684), but these changes for the time being make the whole package at least consistent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587:188,integrat,integrating-with-setuptools-python-setup-py-test-pytest-runner,188,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587,1,['integrat'],['integrating-with-setuptools-python-setup-py-test-pytest-runner']
Deployability,"Hello! As @jakelishman described, you can help debug this issue by trying:. ```python; from qutip.cy.openmp.parfuncs import spmv_csr_openmp; ```. and reading the exception produced. I suspect that the `qutip.cy.openmp.*` packages will simply not have been compiled -- they're only built by QuTiP when ""--with-openmp"" is passed to `setup.py` and I think `conda install ... qutip` will not do that even when OpenMP is already installed. To correct this you will need to install QuTiP from source and pass `--with-openmp` yourself as described in https://qutip.org/docs/latest/installation.html?highlight=openmp#direct-setuptools-source-builds. We probably could make ""openmpi"" and ""no-openmpi"" builds for conda-forge by adapting the pattern in https://conda-forge.org/docs/maintainer/knowledge_base.html#openmp but that would require some work (and be a feature enhancement :).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166:360,install,install,360,https://qutip.org,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166,4,['install'],"['install', 'installation', 'installed']"
Deployability,"Hi @ALasek . You are right, there is a bug in the error handling.; ```; File ""C:\Users\OlekAdmin\anaconda3\lib\site-packages\qutip\qip\circuit.py"", line 2114, in initialize; raise ValueError(""dimension of state is incorrect""); ```; This check is wrong. It assumes that the state is a qubits state. Our test didn't cover the `run` method with multi-level systems. Here are the ways around:; - If you know how to hack the package, you can simply find the file and delete this error handling (lines 2113 and 2114).; - If you don't know how to do that, you can also use; ```; gate_sequence_product(qc.propagators()); ```; to compute the unitary representation of the circuit first and then apply it to the input state. I'll make a bug fix soon. But the next release may still take a while. Using `QubitCirucuit` for qutrits and qudits should be fine, it is rarely used though. So there might be bugs that are uncovered by our test. If you encounter any further questions, feel free to ask!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650:754,release,release,754,https://qutip.org,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650,1,['release'],['release']
Deployability,"Hi @Ericgig , could you be a little more specific about what reworking the kwargs treatment would entail? Also if you could emphasize more concretely what you're looking for in updates to the notebooks and docs, that would be great. I do have some other observations.; 1. I do not get the KeyError message if I run the same jupyter notebook locally with the same versions of code as specified by version_table( ). I get another error instead, which actually seems more reasonable to me (something along the lines of 'use_precond' wasn't found in the keys of the dict, which clearly indicates that there's something off with the optional args thing).; 2. Also using mech_dms = np.asarray(mech_dms) fails, I think because it sees a Qobj instead of a real number.; 3. The direct patch to the KeyError mentioned above, based on my understanding of the code, would simply be to nest the assignment to 'max_iter_refine' in the 'info' dictionary inside a condition that checks if the solver is 'scipy'?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676:177,update,updates,177,https://qutip.org,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676,2,"['patch', 'update']","['patch', 'updates']"
Deployability,"Hi @Ericgig ; Thanks for investigating this so thoroughly. ; I guess it makes sense that unpacking a dict at each call is inefficient, so I think we should drop this idea. As you have suggested previously, users can always use module variables if they wish to avoid passing vars in `args`. So I think we should aim to keep it simple. I think adding `f(t)` as a signature option will be sufficient for what @goerz wanted and would be sufficient for using a Numba jit. So, my suggestion for the next major release (v5) would be that we have only two call sigs:; - `f(t, args)` (default); - `f(t)`. For now we will have to have the three (although I don't think the `rhs_with_state` is not widely used, if at all).; - `f(t, args)` (default); - `f(t)`; - `f(t, state, args)`; The default needs to remain as it is, because it is widely used. I think it makes sense to use introspection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:504,release,release,504,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['release'],['release']
Deployability,"Hi @ariels1234, here is a more detailed guide on how to install those additional packages https://qutip-qip.readthedocs.io/en/stable/installation.html#additional-software-for-plotting-circuits. (It is for the separate package qutip-qip, but the circuit plotting part is the same.). Do you have a valid version of pdflatex with packages like qcircuit and pdfcrop installed?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1888#issuecomment-1112172803:56,install,install,56,https://qutip.org,https://github.com/qutip/qutip/issues/1888#issuecomment-1112172803,3,['install'],"['install', 'installation', 'installed']"
Deployability,"Hi @christian512, thanks for the help! I've increased `nsteps` for that particular simulation and the integration runs fine without any errors. One caveat is I have not checked the correctness of the result. . On the other hand, as soon as I tried `mesolve` on a simple Larmor precession problem, `mesolve` started either (1) throwing the typical ODE integration error or (2) integrating but producing a manifestly incorrect result (the final state is not on the Bloch sphere). The code I am using is ; ```; from qutip import * ; import numpy as np. sz = sigmaz(). init_ket = 2 ** (-1/2) * Qobj([[1], [1]]) # Bloch vector is unit x; init_dm = init_ket * init_ket.dag(). b_0 = 1; gam = 1; h_zeem = gam * b_0 * sz; h = [h_zeem]. larmor_freq = gam * b_0 ; period = 2 * np.pi / (larmor_freq); t = np.linspace(0, period / 2, 100). print(mesolve(h, init_dm, t, options=Options(nsteps=1e6)).states[-1]); ```. Which produces ; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 +0.j -263.5988765-267.24047092j]; [ -2.1425229 +0.49907152j 0.5 +0.j ]]; ```; Edit: I have also tried playing around with `atol` and `rtol` without any success.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503:102,integrat,integration,102,https://qutip.org,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503,3,['integrat'],"['integrating', 'integration']"
Deployability,"Hi @dweigand, this looks interesting. It would you be nice to push this forward, adding some tests for this and integrating @Ericgig suggested changes. I am wondering whether there is a more intuitive (explicit) option than `qfunc_amat `. Something like a Boolean `precompute`?. Writing some documentation for this, in https://github.com/qutip/qutip-doc, would allow users to discover this option more easily at http://qutip.org/docs/latest/guide/guide-visualization.html#husimi-q-function, it's very nice you have some performance checks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-536368295:112,integrat,integrating,112,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-536368295,1,['integrat'],['integrating']
Deployability,"Hi @hodgestar, thank you for reviewing this.; After looking at it I think I can get it done for the next release. El lun, 13 dic 2021 a las 20:11, Simon Cross ***@***.***>); escribió:. > ***@***.**** requested changes on this pull request.; >; > @MrRobot2211 <https://github.com/MrRobot2211> I reviewed the code and it; > looks mostly good now. I've left a few suggestions and questions. Let me; > know if you have some time to finish this off before QuTiP 4.7 is released; > in a month-ish.; >; > @quantshah <https://github.com/quantshah> Could you do a review of the; > mathematics and general superoperator usage here? You're probably much more; > familiar with it than me.; > ------------------------------; >; > In qutip/superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768187678>:; >; > > # Remember the shape of the underlying space,; >; > # as we'll need this to make Kraus operators later.; >; > - dL, dR = map(int, map(sqrt, q_oper.shape)); >; > + from math import ceil; >; >; > ⬇️ Suggested change; >; > - from math import ceil; >; >; > ceil is not used anywhere and we shouldn't import inside functions unless; > necessary -- I'm guessing this was left over from debugging?; > ------------------------------; >; > In qutip/superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768188147>:; >; > > # Remember the shape of the underlying space,; >; > # as we'll need this to make Kraus operators later.; >; > - dL, dR = map(int, map(sqrt, q_oper.shape)); >; > + from math import ceil; >; > +; >; >; > ⬇️ Suggested change; >; > -; >; >; > Leaving this blank line here makes the comments above it confusing.; > ------------------------------; >; > In qutip/superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768189423>:; >; > > # Find the SVD.; >; > U, S, V = svd(q_oper.full()); >; >; >; > # Truncate away the zero singular values, up to a threshold.; >; > - nonzero_idxs = S > thresh; >; > - dK = nonzero_idxs.sum(); >; > - U ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001:105,release,release,105,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001,2,['release'],"['release', 'released']"
Deployability,"Hi @michelinesoley,. Your bug report inspired me to dig into the `qutip.control.optimize_pulse` sparse matrix support which lead to some fixes in #1621. When you increase `N` in your example from 2 to 3, it changes the internal type used by the optimizer to represent propagators. You can also make the `N = 2` case fail by changing the last line to:. ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=True)); ```. Your example can be made to work for `N = 3` (albeit slowly) by changing the following lines:. ```python; mapped = Qobj(mapped, dims=[[N]*4 + [2]*4] * 2); ```; (which was a bug in the example itself -- it created a Qobj with the right shape but wrong dimensions) and the last line to . ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=False)); ```; For me the `N = 3` case was slower with `sparse_eigen_decomp=True`, but perhaps it will be better for your full problem. If you would like to try `sparse_eigen_decomp=True` you are welcome to try the patch in PR #1621 and I would appreciate feedback on any performance issues for larger systems. We are currently working to support bigger systems in QuTiP 5 by using the new flexible Qobj data layer (which supports both sparse and dense matrices already and will hopefully support GPU and TensorFlow matrices in the near future).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386:1075,patch,patch,1075,https://qutip.org,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386,1,['patch'],['patch']
Deployability,"Hi Boxi,. Can you please modify the projects of the Wiki page as you deem best?; All: we can also think of changing the order of them. It may be that; project #3 is deemed the most important. Best wishes,. Nathan. Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com. On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:. > I have some detail information for the GSoC 2020 project ""Error mitigation; > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > Wiki page. I post it here so if anyone finds it nice could copy it to the; > Wiki page.; >; > I add some details based on the original description:; > ------------------------------; > 1. Error mitigation in QuTiP; >; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Request",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:830,release,release,830,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['release'],['release']
Deployability,"Hi Kevin. Thanks for your efforts on this. However, I am not in favor of merging this PR in this form. It is way too intrusive on the old API, it would break backwarks compatibility for no good reason as I see it. Personally I don't think that the _2t and _1t names are that confusing. As you point out, _1t is still a two-time correlation function (a one-time correlation function would not be a correlation function, just a simple expectation value), but the _1t and _2t is intended to refer to the number of free time variables. Perhaps this should be explained more clearly in the docstrings, but I don't think it is worth changing the API for this reason. I would prefer if you added the new mc solvers using the current API conventions, and preferably without changing the me and es based solvers. If you want to propose a new API the correct way to do it would be:; 1. First discuss the idea, so that everyone interested could weight in on the naming of the functions, the style of parameters and arguments etc.; 2. Implement the new API without disrupting the previous API; 3. Deprecate the previous API, so that using it gives a warning (but still works!). ; 4. Then finally after a few release cycles we may drop the old API. This would not happen until qutip 4.0 (see http://semver.org/), which we do not plan to release anytime soon. Therefore, we cannot accept any PRs that with backwarks breaking API changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/218#issuecomment-53827562:1196,release,release,1196,https://qutip.org,https://github.com/qutip/qutip/pull/218#issuecomment-53827562,2,['release'],['release']
Deployability,"Hi Nathan,. I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it seems that there is no way to make a PR to Wiki. I can also send you the markdown source code per email like this, but I’m not sure if it works as I expected. The following is the markdown source code:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:379,release,release,379,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['release'],['release']
Deployability,"Hi albertomercurio, ; Thank you for the contribution. We will need at least one automated test: a function in `qutip/tests/test_correlation.py` that call `steadystate_floquet` and would fail if something is wrong. For example, in the next major version of qutip, `Qobj.data.tocsc()` will fail. We want it to be caught when running the tests in `qutip/tests` instead of having to remember to update it. It could be simply to running your manual test and instead of plotting the result, checking it with `numpy.testing.assert_allclose`. Ideally it should be done twice, once for `sparse=True` and once for `sparse=False`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1660#issuecomment-917454056:391,update,update,391,https://qutip.org,https://github.com/qutip/qutip/pull/1660#issuecomment-917454056,1,['update'],['update']
Deployability,"Hi, if you look at the conda instructions for VS, you will find some alternatives ; https://conda.io/docs/user-guide/tutorials/build-windows.html. There is a VS community edition which might be smaller. . Alternatively, on Windows 10, you can install a Linux subsystem (supported officially by Windows) and then I am hoping that you don't need to deal with a complete VS installation. Please find the instructions to get a native Linux subsystem in Windows 10 below:; https://docs.microsoft.com/en-us/windows/wsl/install-win10. Let me know if you need any help or encounter issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-368383471:243,install,install,243,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-368383471,3,['install'],"['install', 'install-', 'installation']"
Deployability,"Hi, thank you very much for the quick responses and linking the other issues. . > But your making sparse matrices dense. Yes, I agree. But I was trying to just work out a simple problem which looks like. `dp[n]/dt = spre(Q)*p[n-1] + spost(Q)*p[n+1]. where p is a list of flattened density matrices. I understand that a better version of this would be to completely flatten p and write the RHS as a large `L` as Alex points out and then use `cy_ode_rhs`. But here is the issue, in the HEOM case, building `L` runs out of memory if we consider a large size for the set of auxiliary density matrices `p`. As such, I cannot completely build the `L` for the cases I am looking into. The approach that I was trying to take was to keep building the p's as we integrate. In this case, each RHS computation is a small dense matrix-vector computation and I can choose to keep or discard it depending on the max value of its elements. This gives the flexibility to truncate how many auxiliary density matrices I keep. The motivation is that in some papers on the Heom method, there is a dynamic filtering of the auxiliary matrices and it has been shown that with just a few 100s of auxiliary matrices, you can get a reasonable result. But the way we have the code in QuTiP now pre-computes the `L` and gets stuck due to memory limitations. @agpitch Thanks for the suggestions. I am trying to make the HEOM work without building the `L`. Perhaps I will still run into memory issues if I try to initialize the full set of `p` but if the dynamic filtering approach works out, then I can escape the memory problem by only building a few of the `p`'s and deciding to append them or not based on some conditions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/831#issuecomment-368980965:752,integrat,integrate,752,https://qutip.org,https://github.com/qutip/qutip/issues/831#issuecomment-368980965,1,['integrat'],['integrate']
Deployability,"Hi, thanks for the feedback. I will try to update it taking these comments into account. The names of the gates in the table are the same that appear in https://github.com/qutip/qutip/blob/master/qutip/core/gates.py, I can put them in lowercase to exactly match the functions in the code. I also see that the module ""qutip.core.gates"" is missing in [ https://qutip.readthedocs.io/en/master/_modules/index.html](url) so I will also added there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2142731183:43,update,update,43,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2142731183,1,['update'],['update']
Deployability,"Hi,. Yes, I know, that's why I added the md file. I updated it now, thanks,; adding more info on general resources to learn about QuTiP and more; references to the #3 project, i.e. your blog and the talk.; https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2020. Neill, Alex, if you have a lead, please add a HEOM project. Bests,. Nathan. Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com. On Tue, Feb 25, 2020 at 5:10 PM Boxi Li <notifications@github.com> wrote:. > Hi Nathan,; >; > I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it; > seems that there is no way to make a PR to Wiki. I can also send you the; > markdown source code per email like this, but I’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > ht",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:52,update,updated,52,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,2,"['release', 'update']","['release', 'updated']"
Deployability,"Huh, your right, it seems like there is some issue with my install, cleared it all out and it works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526#issuecomment-242815199:59,install,install,59,https://qutip.org,https://github.com/qutip/qutip/issues/526#issuecomment-242815199,1,['install'],['install']
Deployability,"I added a section to the test suite that will skip the tests if pyopencl is not installed in the last commit. To get them working, installing pyopencl via pip will not be sufficient. There are nice guides for setting up OpenCL in [Gentoo](https://wiki.gentoo.org/wiki/OpenCL) and [Arch](https://wiki.archlinux.org/index.php/GPGPU#OpenCL). But most OpenCL implementations are proprietary. I found an example of installing AMDAPP in a travis vm [here](https://github.com/JuliaGPU/OpenCL.jl/blob/master/.travis.yml). This is the OpenCL implementation I would recommend in absence of a GPU. But this script circumvents the license agreement and I am not sure whether this is legal. If you still intent to set this up, you can push changes to this branch as well. As for documentation I feel there is not much to document. There are already notebooks showing how to use `mcsolve` [here](http://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/example-photon_birth_death.ipynb) and [here](http://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-6-Quantum-Monte-Carlo-Trajectories.ipynb). If everything is set up just exchanging `mcsolve` with `mcsolve_cl` should do the trick. The nuances are documented in the docstring.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-258609202:80,install,installed,80,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-258609202,3,['install'],"['installed', 'installing']"
Deployability,I agree with @Ericgig on the possibility of having no template and adding the suggestions for tests in the template. . I understand now that the changelog in qutip/qutip was a bad idea for the reasons you mention.; I still think it would be nice to somehow automate the way the changelog is compiled (right now by whoever is in charge of the release). Is there a simple and smart way to do this? Otherwise we could just look up the changelog section in each PR as per this template.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649:342,release,release,342,https://qutip.org,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649,1,['release'],['release']
Deployability,"I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:; - I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; - I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:963,integrat,integration,963,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462,3,['integrat'],"['integration', 'integrator']"
Deployability,"I am ultimately interested both in open system and closed system dynamics interchangeably. > [...] In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. That's an extremely exciting prospect! I'd love to be able to have internal sparse data for Qobj's that represent Hamiltonians/Liouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.co",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:3461,update,update,3461,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['update'],['update']
Deployability,"I am with the same problem. Note that the QuTiP version and the python version is different. I have installed the python via macports, but I have also tested in anaconda system. The problem is the same in the anaconda. ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0.dev0+3421bc5c; Numpy Version: 1.17.4; Scipy Version: 1.3.2; Cython Version: 0.29.14; Matplotlib Version: 3.1.1; Python Version: 3.8.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.loggin",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:100,install,installed,100,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['install'],['installed']
Deployability,"I do not think it's a _good first issue_...; There are multiple possible solutions and it is not clear which is the best one:. 1. Ensure all eigen values and eigen vectors are computed.; 1.1 This could be done by finding an alternative to scipy to solve for sparse matrix decomposition, but it would add extra requirement and it must be easy to install with pip.; 1.2 Use a third call to `scipy.sparse.linalg.eigs`/ `scipy.sparse.linalg.eigsh` using `sigma` to find all the pseudo degenerate values. It need to be done while being careful about special cases. This would make the sparse eigen solver even slower than it already is.; 2. Allow to sort by other orders, such as the complex value or magnitude. This would not solve the issue, but give some options to go around it. However the dense eigen solver would be expected to behave the same and the dense eigen solver does not have this options, so we need to implement it ourselves. This sorting option would also be required for any other data type we want to support. To go around that, the `Qobj` methods could be responsible for the sorting, the `sort` argument would only be passed to the dispatched function when `sparse=True`.; 3. Refuse to use the sparse solver for the full decomposition as scipy does. The sparse eigensolver is both slow and hard to use in this case. Also the eigen vectors computed by the sparse solver are stored in a dense array, so it is not that useful to save memory...; 4. Implement our own sparse eigen decomposition...; 5. Only document the issue without fixing. The default is the dense solver, which is both faster and safer in almost all cases.; 6. Something else...; ; I would personally go for either 1.2 of 3. ; Adding different sorting options in `Qobj` methods (2) and removing them from the dispatched functions, could be nice, but it's not a fix. The place to start would be to debate on the solution. If you have some opinion on the matter, please let us know.; Once we've made up our mind, you can",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1998#issuecomment-1472150161:345,install,install,345,https://qutip.org,https://github.com/qutip/qutip/issues/1998#issuecomment-1472150161,1,['install'],['install']
Deployability,"I don't have xvfb (pytest-xvfb) installed specifically for qutip, but it is used by other packages (The general use of pytest-xvfb is to facilitate testing of GUI, graphical or windowing functionality without having an normal Xserver active. That is, it can be useful for automated CI testing of gui packages, for instance in chroots or cloud CI infrastructure). Since qutip doesn't use xvfb directly this bug won't be a problem for general CI testing, where only qutip is loaded on a cloud instance (for instance Debian testing done at https://ci.debian.net/packages/q/qutip/). But before I upload a package to the Debian infrastructure, I like to run the tests on my own system to be confident they're likely to pass. So this is where the problem happens, running tests on my own system, where I have pytest-xvfb installed for testing other packages. (pytest has this bad habit of loading all available plugins whether or not they're actually used by the tests being run. It's quite annoying actually. It would be better if it only loaded plugins specified in conftest.py). So the use case is running the qutip tests on my own system, where pytest-xvfb simply happens to be installed for other purposes not related to qutip. There are ways of working around the problem, for instance the `--no-xvfb` option could be explicitly added to the `pytest` command line. But it can be useful if the test code itself can be made robust with respect to the problem (e.g. in this case just replacing `plt.clf()` with `plt.close('all')`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791:32,install,installed,32,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791,3,['install'],['installed']
Deployability,"I got it from here: https://qutip.org/docs/pre-release/guide/guide-heom.html. This is the link that ""online html documentation"" links to in the qutip webpage. Is this not keept up to date, as https://qutip.readthedocs.io/en/master/guide/guide-heom.html is?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2104#issuecomment-1454064987:47,release,release,47,https://qutip.org,https://github.com/qutip/qutip/issues/2104#issuecomment-1454064987,1,['release'],['release']
Deployability,"I had actually tried that before, following the user guide for conda, but it didn't work. Seems that it was fixed in a conda update, though, as it works fine now. Thanks! Will use that to test installation instructions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-150990762:125,update,update,125,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-150990762,2,"['install', 'update']","['installation', 'update']"
Deployability,"I installed visual studio 2015 from https://visualstudio.microsoft.com/vs/older-downloads/ , after that I simply followed instructions of qutip documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-480488981:2,install,installed,2,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-480488981,1,['install'],['installed']
Deployability,"I re-launched the Travis tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:137,install,install,137,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,3,['install'],['install']
Deployability,I resolved the issue with setting the alpha for multiple sets of vectors and added tests for that (and for setting the alpha of points). I'm not going to add tests for Bloch3d now since that uses mayavi which looks like it might be a whole other testing rabbit hole. I will simply run some checks in a notebook manually tomorrow. I still need to update the docstring and look at what the docstring format changes are about. @xspronken @AGaliciaMartinez Reviews of my most recent commits welcomed.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1837#issuecomment-1093447511:346,update,update,346,https://qutip.org,https://github.com/qutip/qutip/pull/1837#issuecomment-1093447511,1,['update'],['update']
Deployability,"I see @christian512, so maybe we can skip that. . With regards to the documentation, Sphinx can be a mess. I wrote some guidelines [here](https://github.com/nathanshammah/scikit-project/blob/master/5-docs.md). I think you could skip installing it properly and just fork the repo and modify; the [guide-qip.rst](https://github.com/qutip/qutip-doc/blob/master/guide/guide-qip.rst) file, adding some information on the visualization of quantum circuits using this LaTeX-based tool. It could be a standalone subsection for simplicity. `.rst` files are restructured text file very similar to markdown.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-602749277:233,install,installing,233,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-602749277,1,['install'],['installing']
Deployability,I see. `propagator` performed better with a system of d=2^5 in a simple test. I better do some testing of even larger systems then before merging this. Any thoughts on why `propagator` might be slower also for small systems and short integration times? Some overhead related to parallelization? Thanks for the info.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-230108497:234,integrat,integration,234,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-230108497,1,['integrat'],['integration']
Deployability,"I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"". I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427:502,install,install,502,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427,1,['install'],['install']
Deployability,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:436,integrat,integrator,436,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,2,['integrat'],['integrator']
Deployability,"I thought we had resolved the installation issues with the Fortran side by making the MC solver a optional (default to False).; I am not that I have fully digested everything in this thread, but @zerothi seems confident that there is just some small change that we need to improve integration with the latest Numpy. Its not clear to me what are the risks or other downsides.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155040632:30,install,installation,30,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155040632,2,"['install', 'integrat']","['installation', 'integration']"
Deployability,"I understand completely!. I'd probably just go to `int64` with your internal CSR implementation for the moment. Would it be very easy to have the `int32`/`int64` boiled down to a single compile-time flag, for those people that compile QuTiP manually and feel they really need the smaller `int32` matrices? The pre-compiled pip/conda releases could be `int64`. That might be a simple way to provide some support for ""both"". Somehow, I thought that SciPy would put a lot more emphasis on performance, and do things like Kronecker products without conversion. It would seem that SciPy should be the place to really optimize the sparse linear algebra implementation, including all the possible combinations like `CSR * DIA`. Then everyone could build on top of that, making custom sparse-matrix implementation unnecessary. Maybe when someone gets some serious funding for working on QuTiP, encapsulating all of this better would be doable. So, just something to keep in mind before bolting on too many things onto the existing custom implementation (like multiple sparse and full storage formats). Once you open up that can of worms, it just might be better to re-design `Oobj.data` to have a very broad base (e.g. SciPy), and keep the custom CSR as an optional, highly efficient implementation for the special case, maybe in a separate package. Either way, it's going to be a lot of work, and not something for a minor-version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384094285:333,release,releases,333,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384094285,2,['release'],"['release', 'releases']"
Deployability,"I use the qutip to do some Grover simulations. having a Hilbertspace of Grover an an additional entangled Hilbert space. In a simpler version there is only one state in the entangled Space so the program automatically chooses dimension 1. ; And then there are allot of errors coming because of this qutip error. ; At the moment I fixed it using a patched qutip version. And I think there are more cases when one has dynamical dimensions of a space, that there are cases in which the dimension is 1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399020891:347,patch,patched,347,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399020891,1,['patch'],['patched']
Deployability,"I was checking the status of this PR, sorry for the delay, @abhisekupadhyaya. . 1) **Address comments**: There's been some updates and CI tests pass. However, my comments are still not addressed, e.g., updates in docstrings, see above. Addressing this before the next months is crucial as then there may be quite some activity on the `qip` module. . 2) **Add tests**: We also need to add at least a couple of tests with some examples circuits. The tests could check:; 2.a) that the circuit does the same thing; 2.b) that the circuit is exactly the same (no change of gates into other gates). 2) **Qasm export**: Adding an export feature, e.g. `to_qasm`, would be great. But this PR could address just the import and be fine (changing name would be best). If the `to_qasm` feature was here, one could simply test it one way and return, and check that, e.g.; ```; read_qasm(qutip_circuit1.to_qasm()) == qutip_circuit1; read_qasm(qasm_circuit2).to_qasm() ==qasm_circuit2; ```; if this feature was there, one could also test randomly generated circuits. @abhisekupadhyaya do you think you can address 1) and 2)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565:123,update,updates,123,https://qutip.org,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565,2,['update'],['updates']
Deployability,"I'll take a look at the merge. It seems like it might have gone bad. I'll add in some tests once I fix the merge, as well. I'll look into the diag method and try to move everything over to separate; everything as you described. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:706,integrat,integration,706,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['integrat'],"['integration', 'integrator']"
Deployability,"I'm a fan of the CodeClimate complexity tests, but I wouldn't be averse to removing its complaints about ""TODO"" comments - I'm not sure what we really gain from that in this sort of open-source development. In a business where people are working full-time then I imagine it can be worth preventing a merge to finalise some details, but in our very decentralised development, really in some cases (especially in the next major release), we do need to merge in parts of code we know to be imperfect. That said, we probably should make an effort to clear out some of the TODOs and FIXMEs that are in the codebase already. Pushed fix-up changes since last review:; - wrapped the steadystate SciPy linalg functions so they're simplified at the point of call, and unknown keywords in old SciPy versions are just silently ""eaten"" (this is the same behaviour that the file used to have, just formalised a little more).; - added `TODO` in a comment in `qutip.cy.pyxbuilder`; - changed the static class attributes in `test_superoper.py` into a `setup_method` function. *edit*: oh yeah, forgot that there were still errors in some old SciPy bits in the control module as well. I'll push a fix to that before this needs reviewing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305:426,release,release,426,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305,1,['release'],['release']
Deployability,"I've done another round of reviewing. I'm still unhappy with `register_feedback` and `add_feedback` on Solvers, but I'd like to propose that we try merge this PR with those in place and then argue about them separately outside of this PR and change things if I manage to convince you. :). I'll try summarize my point of view here (just so that I don't forget my own thinking):. - Solvers provide feedback.; - QobjEvos use feedback.; - Each solver class should define what feedback it can provide.; - Each QobjEvo should define what feedback it uses. The sensible place to do this is when the `QobjEvo` is constructed.; - When a solver is constructed or updated, it should check that it can provide the feedback used by all of the relevant `QobjEvo`s and raise an exception if it can not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1837260911:653,update,updated,653,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1837260911,1,['update'],['updated']
Deployability,"I've had a thorough look. Simplifying the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just pr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:176,integrat,integrator,176,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,1,['integrat'],['integrator']
Deployability,"If you work only with solver, you can only update the args once per step.; To have it apply each time the rhs is used it need to be inserted into `QobjEvo`.; The method `_prepare` is there for that, it's called at the start of `matmul`, and `expect`.; I was thinking of using it like this:. ```; cdef class QobjEvo_With_FeedBack(QobjEvo):; """"""; QobjEvo which support feedback.; """"""; cdef dict feedback. def __init__(self, Q_object=[], args={},; tlist=None, deepcopy=False, copy=True):; self.feedback = {}; super().__init__(Q_object, args, tlist, deepcopy, copy). def add_feedback(self, args_key, function):; self.feedback[args_key] = function. cdef double _prepare(self, double t, Data state=None):; if state is not None:; self.arguments({key: feedback(t, state); for key, feedback in self.feedback.items()}); return t + self._shift_dt ; ```; The state will be column stacked Data object, so the function much reshape and restore dims, etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142273887:43,update,update,43,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142273887,1,['update'],['update']
Deployability,"Interesting observation, the vector_to_operator seems to expect an ""operator-ket"" class, as seen in the examples: . http://qutip.org/docs/3.1.0/guide/guide-states.html. In the code, it expects the dimensions of the operator(""op"") should be: . `op.dims = [ [[rows], [cols]], [1]]`. This is probably to keep in line with the way operator_to_vector sets the dimensions. I am not sure what the expected behavior is supposed to be with a ""ket"" instead of a ""operator-ket"". You are correct to think that this behavior changed in release 4.5 as the shape passed to the sp_reshape function in vector_to_operator changed from:. `n = int(np.sqrt(op.shape[0]))`; `shape = (n, n)`. to . `shape = (np.prod(q.dims[0]), np.prod(q.dims[1]))`. The first preserves the correct ""size"" (which is later used in the check which throws ""Exception: Total size of array must be unchanged."") but the latter one does not for kets. . Maybe we should return the shape assignment to the previous one ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600771828:523,release,release,523,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600771828,1,['release'],['release']
Deployability,"Interesting... You see, the gate `Gate(RY, targets=[0, 1], controls=None)` is clearly wrong because RY acts only on one qubits. I guess you are probably using a released version of QuTiP (4.5.2/3 maybe) and not the master branch. This error was hidden before in those released version. If you try to install from source (http://qutip.org/docs/latest/installation.html#installing-from-source) (which you have to if you want to contribute anyway), you will probably see this error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275:161,release,released,161,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275,5,"['install', 'release']","['install', 'installation', 'installing-from-source', 'released']"
Deployability,"It seems to work now (the failing test is unrelated). I will briefly summarize what I found out and changed. Setting up and using an MPI environment is surprisingly difficult, and I don't think it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:773,install,installed,773,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,2,['install'],['installed']
Deployability,"It will be useful for solver feedback.; In v4 we can define Hamiltonian to depend on the state: `H(t, args, psi/rho)`.; We don't have it working in v5, but we will need to restore it before release.; This `_prepare` catch the time and state at the start of `matmul` and `expect` and update the arguments according to feedback.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575:190,release,release,190,https://qutip.org,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575,2,"['release', 'update']","['release', 'update']"
Deployability,"It's in development. ; If you use qutip v5.0.0a2 on pypi or master branch here with [qutip-jax](https://github.com/qutip/qutip-jax), some solver can work on gpu. (We tested `sesolve` and `mesolve`, mcsolve should work, stochastic, HOEM, brmesolve don't.); The readthedocs of qutip-jax shows how to use it. qutip-jax is not up to date with the latest versions.; If you are interested in trying it, I will make it works with the latest jax version and qutip master.; Any and all feedback appreciated. We expect an official release of these features in March.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944:521,release,release,521,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944,1,['release'],['release']
Deployability,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:180,release,release,180,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,1,['release'],['release']
Deployability,"Just noticed this thread. . I can take a detailed look, perhaps with @arnelg as we recently updated the superoperator functions in 4.5. . My initial reaction is this is ""off label use"" of `vector_to_operator`. If so, then we can update the docs to make this point clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-641690849:92,update,updated,92,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-641690849,2,['update'],"['update', 'updated']"
Deployability,"Looks like there were breaking changes introduced in CVXPY 1.1 that changed some sort of matrix handling? I think the entirely of the `dnorm` function was written by Chris Granade about 5 years ago, and they're off at Microsoft now. As an immediate workaround, you can pin the version of CVXPY in conda to 1.0 (`conda install 'cvxpy=1.0'`) to fix it. Otherwise, probably there's a solution in swapping over a load of `*` to `@` in `qutip/semidefinite.py` and `qutip/metrics.py`, but that might be a bit nontrivial to solve. If you succeed, please do make a pull request. The reason that the ""simple"" cases work is that QuTiP detects them as known results and has fast paths avoiding `cvxpy`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713:318,install,install,318,https://qutip.org,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713,1,['install'],['install']
Deployability,"Many thanks! I solved it!; Now I have this WARNING:matplotlib.animation:MovieWriter avconv; unavailable. Trying to use pillow instead.; *Many thanks*. *P**arfait Atchadé*. *Tel Spain: 0034661205543*; *Tel Deutsch: 00491706659017*. On Wed, 9 Dec 2020 at 15:45, Jake Lishman <notifications@github.com> wrote:. > You'll find it easier installing from conda-forge, since we distribute; > binary releases there: see the installation guide; > <http://qutip.org/docs/latest/installation.html> here.; >; > If you want to install from source using pip, you need to configure your; > C++ development environment correctly - you'll probably need to enable the; > XCode command-line tools (see e.g. this; > <https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/>).; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1404#issuecomment-742038577>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AGKQN3YYS6ZYMTV4HEHFTELST7OW3ANCNFSM4UT7TWQQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650:332,install,installing,332,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650,6,"['install', 'release']","['install', 'install-command-line-tools-mac-os-x', 'installation', 'installing', 'releases']"
Deployability,"Most of it is already in qutip or in development:; - We already have a progress bar.; - We have feedback to support solvers where parameters are changed depending on the current state. Those should not updated at each time-step, but included in the rhs. Otherwise, it will increase runtime and often the numerical error. We mostly use multistep method (Adams and BDF) which are particularly sensible to that.; - In my rework of `mcsolve`, I'm including the capacity to stop after a certain time, (already merged) and after the error bar gets under a certain tolerance. I have not though an equivalent for `me/sesolve` would be needed but it would be simple enough to add. We could have function that takes the expect value and tell the solver to stop or continue. ; - I was thinking of adding the ability to step through the evolution (draft in #1455):; ```; solver = MeSolver(H, c_ops, options=opt); solver.start(t0, rho0); for t in [t1,t2, ...]:; rho_t = solver.step(t, args=new_args); ```; Which would work like a `yield`:; ```; solver = MeSolver(H, c_ops, options=opt); for rho_t in solver.yield_run(rho0, tlist):; if needed:; solver.update_parameter(args=new_args); ```; I prefer using steps since you don't have do define `tlist` first, you could use it in a `while True` loop or interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451:202,update,updated,202,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451,1,['update'],['updated']
Deployability,"No, if `test` is used for the branch name, it will still deploy to testpypi. Both `deploy to ...` jobs were cut and pasted with only 2 lines changed so I merged them so we don't forget to update one without the other. I also added more feedback to the job that would show uploaded files even for a dry run.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342:57,deploy,deploy,57,https://qutip.org,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342,3,"['deploy', 'update']","['deploy', 'update']"
Deployability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:24,install,install,24,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,9,"['install', 'release', 'update']","['install', 'release', 'released', 'updates']"
Deployability,"Numpy interprets the Python base type `complex` as equal to `np.complex128` when passed as a dtype. Personally I think `np.complex128` is much clearer (since it specifies the size in the name too), but I wouldn't worry too much about changing everything everywhere. `cqobjevo.pyx` in particular is going to be nearly entirely rewritten in the next major QuTiP release anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451#issuecomment-785001605:360,release,release,360,https://qutip.org,https://github.com/qutip/qutip/issues/1451#issuecomment-785001605,1,['release'],['release']
Deployability,"Ok so if we have to start we do away with all the * imports first except. ```from qutip.qobj import *```. then we can remove the numpy and scipy checks but numpy is still used to setup pyximport in . ```; # Setup pyximport ; import pyximport; os.environ['CFLAGS'] = '-O2 -w -ffast-math'; pyximport.install(setup_args={'include_dirs': [numpy.get_include()]}); del pyximport; ```. Then we can move the section regarding multiprocessing to some appropiate place. Currently it is used in the following files. Can we put the multiprocessing stuff in a file called `multiprocessing_config.py` and run it to get the settings in `__init__` at all the places where we need multiprocessing.; ```; /Users/shahnawaz/dev/qutip/qutip/__init__.py:; 33 from __future__ import division, print_function, absolute_import; 34 import os; 35: # Fix the multiprocessing issue with NumPy compiled against OPENBLAS; 36 if 'OPENBLAS_MAIN_FREE' not in os.environ:; 37 os.environ['OPENBLAS_MAIN_FREE'] = '1'; ..; 149 # cpu/process configuration; 150 #; 151: import multiprocessing; 152 ; 153 # Check if environ flag for qutip processes is set; ...; 164 qutip.settings.num_cpus = info['cpus']; 165 else:; 166: qutip.settings.num_cpus = multiprocessing.cpu_count(); 167 ; 168 ; ...; 270 # Clean name space; 271 #; 272: del os, sys, numpy, scipy, multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_co",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:298,install,install,298,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['install'],['install']
Deployability,"Ok, it turns out I got the numpy release notes the wrong way round; we have to build our binaries with `1.16.6 <= numpy < 1.20` to maintain ABI compatibility no matter the numpy version. I have updated the compiler infrastructure to take this into account - this is in some ways a temporary restriction until two or three years in the future when we can drop support for all numpy versions less than 1.20. This is ready for final review. If you're fast, you can also try installing from the test PyPI server to see if the wheels work for you. While it's on the temporary server, you need to install `numpy` and `scipy` manually yourself (as they don't exist on test.pypi.org), but pip will do the dependencies correctly for you once it's publishing to the full repo.; ```bash; conda create -n pypi-test; conda install python pip numpy scipy; pip install -i https://test.pypi.org/simple qutip-jakelishman; python -c 'import qutip; qutip.about()'; ```. @hodgestar, @nathanshammah: perhaps you could just glance over this again and make sure everything looks right to you? Simon, I know you already looked over it once, so if you've not got time again, no problem - barely anything has changed since you last saw it. Nathan: in theory once we're in a position where deployments push to PyPI I think I can write an action for qutip/qutip.github.io to push a commit updating the website with the new information too. However, with the docs currently using a completely separate build process in a different repo, they can't really be triggered by a release here. I wrote this PR against `dev.major`, but I suppose in theory I could backport it to the 4.x branch if that's absolutely required. I think some parts of the setup changed for `dev.major`, which is why I didn't originally try to make it to the current version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158:33,release,release,33,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158,8,"['deploy', 'install', 'release', 'update']","['deployments', 'install', 'installing', 'release', 'updated']"
Deployability,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:962,integrat,integrator,962,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,Please refer to [`smesolve` new methods](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) and [benchmark](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb). I think you should just use `c_ops` or `sc_ops`. Keeping this open as the notebook needs to be updated and the Users guide documentation. The [API documentation](http://qutip.org/docs/latest/apidoc/functions.html?highlight=smesolve#qutip.stochastic.smesolve) is updated.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471:392,update,updated,392,https://qutip.org,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471,2,['update'],['updated']
Deployability,"Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wishes,; >; > Nathan; >; > Dr. Nathan Shammah; > Postdoctoral Research Scientist; > Theoretical Quantum Physics Laboratory; > RIKEN, Wako, Saitama, Japan; > www.nathanshammah.com; >; >; >; > On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:; >; > > I have some detail information for the GSoC 2020 project ""Error; > mitigation; > > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > > Wiki page. I post it here so if anyone finds it nice could copy it to the; > > Wiki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > co",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:4451,release,release,4451,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['release'],['release']
Deployability,"Thank you for taking this issue. The contribution to the phase is `np.exp(1.0j * 1 * phi)`, ignoring the `m` and it's not documented. So I guess all ket are `m = 1`...; Since it's wrong and not documented, you are free to choose which ever way you prefer. But please update the docstring so that is is clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839#issuecomment-1082462658:267,update,update,267,https://qutip.org,https://github.com/qutip/qutip/issues/1839#issuecomment-1082462658,1,['update'],['update']
Deployability,"Thank you for your prompt reply. @sahmed95. QuTip was installed on Windows; ```; pyhton 3.6.4; ```; We download anaconda and install QuTip from conda-forge with; ```; conda install -c conda-forge qutip; ```; but when run ; ```; import qutip.testing as qt; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transf",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:54,install,installed,54,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,3,['install'],"['install', 'installed']"
Deployability,"Thanks alot for your great help.; Activating conda solved the problem, but still the command ""import numpy as; np"" leads to the following error:. File ""<stdin>"", line 1; import numpy as np; ^; IndentationError: unexpected indent. Other commands like ""import matplotlib.pyplot as plt"" works fine but; something like ""r=np.random.rand(4,4)"" does not work.; My numpy version is 1.19.2. Would you please help me to solve the problem.; Many thanks. On Tue, Dec 1, 2020 at 12:44 AM Boxi Li <notifications@github.com> wrote:. > Every time you open a new terminal, you will need to activate the conda; > environment by conda activate qutip-env. QuTiP is only installed in this; > environment. If you are interested, you could check; > https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html; > for details.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1391#issuecomment-736060302>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AR53J43QBLGZO3C3WKRB7BDSSQDMJANCNFSM4UGXA6UA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232:651,install,installed,651,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232,1,['install'],['installed']
Deployability,"Thanks for the interest! To be clear, I wasn't trying to suggest that the whole thing is in scope for QuTiP per se; this PR concerns calling a small one-file [client library](https://github.com/cgranade/tskmon-client) from QuTiP. Given the similarity with that and the PiCloud functionality's goal (integrate QuTiP with third-party web services), maybe a good architecture would be something like a `qutip.services` package, where the expectation is that each submodule would require some additional client library?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63312872:299,integrat,integrate,299,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63312872,1,['integrat'],['integrate']
Deployability,"Thanks for the review!. > * Should we stop the user from passing a list of kets to `mcsolve` directly?; > Presently it work but it's not documented (and list `ntraj` don't.). You are right, done. Of course we could also allow the same arguments for `mcsolve` as for `run`, but I thought it might be good to keep the `mcsolve` interface simpler. > * It would be nice to have the trajectories per initial state information stored in the result somewhere. I have added that information and checking it in a test. Edit: I forgot that I still haven't updated the docs. Will do that. Edit 2: Done",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143:546,update,updated,546,https://qutip.org,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143,1,['update'],['updated']
Deployability,"Thanks, it worked! I simply moved it to the library where third-party packages are installed in Canopy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469#issuecomment-215968543:83,install,installed,83,https://qutip.org,https://github.com/qutip/qutip/issues/469#issuecomment-215968543,1,['install'],['installed']
Deployability,"Thanks, this helps track it down. It seems not to be an issue with ENR per se, but with the floquet steadystate solver itself (it also appears without using ENR states). . I think I pinned it down to two small bugs in that seem to have crept in to the solver with the data layer updates, I will make a PR for it and ping you for some feedback, if thats ok. We lack a sufficiently robust test for this solver really, if you can suggest something tractable (very small example, potentially analytical solution we can check against), it would be very helpful.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504:279,update,updates,279,https://qutip.org,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504,1,['update'],['updates']
Deployability,"That is true. I'll try to look into why this is the case. However, it does have three expectation calculated. You can check this with output.expect ! . Edit: . So, I just realized that the noise-spectrum is associated with the coupling operator [sigmax()], I think the correct call to brmesolve must infact be (updated to current qutip standards) . `output = brmesolve(H, psi0, tlist, [[sigmax(), ohmic_spectrum]], e_ops)`. This is in line with the notation we use in example (https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve-time-dependent-Liouvillian.ipynb). I will make a pull request updating both the example notebook (http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) to reflect this and make sure we depreciate the spectra_cb argument in bloch_redfield_tensor to eliminate the confusion. Thanks for bringing this to notice !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703:311,update,updated,311,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703,1,['update'],['updated']
Deployability,"The `Qcircuit.tex` PR was unfortunately many many years ago, long before I made my first commit to QuTiP (according to `git log` it was by Anubhav Vardhan in 2014), so the damage is already done. It was on my mind because there was a PR about updating the version of the code in it (#1187). Nonetheless, we definitely should remove it. @BoxiLi Boxi: `Qcircuit.tex` is a concern for `qutip-qip` more than the main library from 5.0 onwards - it's currently in `qip/circuit_latex.py`, which we'll have removed, but you've gained. It might be most appropriate to handle this the same way Qiskit does - generate code which does `\usepackage{qcircuit}`, and leave it up to the user to have a properly-provisioned LaTeX environment. I note that `qcircuit` is included in MikTeX and TexLive since at least 2018 (but not sure when exactly it was added). > Yeah putting years I think is the correct thing. Didn't know that at the time. Ah, that's good to know, thanks. I'm trying to learn more about licensing - I'm trying to get it sorted now into the right form, but it's a really complicated field. I think if we change `LICENCE.txt` to. ```text; Copyright (c) 2011--2021 Paul Nation and Robert Johansson.; Copyright (c) 2021--2021 QuTiP Admin Team.; All rights reserved. <BSD 3-clause licence>; ```. and update the final `2021` as appropriate, we'll be in the best standing. That's also why we might want to remove the general licence text from each file - it's already redundant, but it'll be much harder to update if we have it scattered everywhere (automation would run the risk of us messing up and changing any external code's licence as well, I think, which would be wrong). > Look forward to talking to you in July!. Me too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845:1298,update,update,1298,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845,2,['update'],['update']
Deployability,"The default Apple `clang` version doesn't recognise `-fopenmp` out-of-the-box, because Apple don't ship an OMP library with macOS. You'll have more luck (with most C/C++ projects!) if you install a fully-featured compiler and environment. On [homebrew](https://brew.sh) you can find both `clang`/`clang++` and `gcc`/`g++`, both of which can be installed with OMP support. Make sure your set `PATH`/`CC`/`CXX` environment variables are set up correctly after you've installed, so you're calling the compiler you've just installed, not just the Xcode versions. This isn't a bug in QuTiP, although we could remember this when somebody's working on modernising the distribution - in C/C++ land, tools like `automake` run through a big list of things to check during build configuration, and one of them is if OMP appears to exist. That way the error message is a little clearer (although in this case it's reasonable clear if you're used to C compilers).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774:188,install,install,188,https://qutip.org,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774,5,"['configurat', 'install']","['configuration', 'install', 'installed']"
Deployability,"The deprecation warning from `scipy==1.11` reads; `DeprecationWarning: scipy.array is deprecated and will be removed in SciPy 2.0.0, use numpy.array instead`. However, clearly this functionality broke before that release; with some discussion here: ; - https://github.com/scipy/scipy/issues/19065#issuecomment-1678439743; - https://github.com/scipy/scipy/pull/19067",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2300#issuecomment-1906274768:213,release,release,213,https://qutip.org,https://github.com/qutip/qutip/issues/2300#issuecomment-1906274768,1,['release'],['release']
Deployability,"The dpsi option worked fine on my mac from jupyter. ; - please update the docstring to highlight this option (could also add the presence of the `name` option, besides directory and format); - It is a nice feature, it could be highlighted in the documentation, here https://github.com/qutip/qutip-doc/blob/master/guide/guide-bloch.rst; - add to 4.4.1 enhancements in the changelog, https://github.com/qutip/qutip-doc/blob/master/changelog.rst; Let's skip the codeclimate issues for the moment, but in the future it might be nice to refactor the Bloch class inner workings, as it took me a while to sort out issue #1027.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574:63,update,update,63,https://qutip.org,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574,1,['update'],['update']
Deployability,"The fermionic stuff looks to me! For the change in the terminator, I see the logic I guess. Also makes it easier for the user to include it or not, without remaking the bath. I have some reservations about it just because I can imagine someone following the examples and using jupyter notebook rerunning the same cell multiple times and continuously modifying their Hsys or something? But that can just be made clear in the examples so lets go ahead and merge this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370:337,continuous,continuously,337,https://qutip.org,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370,1,['continuous'],['continuously']
Deployability,"The main function of the `Options` class is to hold the documentation of the options supported by solver, mostly integrator related ones are an issue. Since sub-packages can add new integration methods, it should be somewhere dynamic that can fetch them at runtime. We can't have them in the description of the function interface directly, but it must be clear from that documentation where to find them.; We can't have them in the documentation of the solver class. It could be in a solver instance, but that too late: needing to initialize a `BrSolver` or `HEOMSolver` just to know which options `bsmesolve` and `heomsolve` support is not user friendly.; The Integrator class is useless for the users: if they want to solve ODE, they should use `scipy.integrate`, for quantum systems evolution, `mesolve` etc. So we should not ask them to look there. `SolverOptions(name)` make it reasonably easy to check the supported options and their default before using the solver. Another approach I see is to fix the integrator when using the functions interface, this way we could properly document the function with all items from both the solver and integrator. When using the class interface, we keep both options separated (and make the choice of integrator it's own keyword):; ```; solver = SeSolver(H, integrator_method='adams', options=solver_options, ode_options=ode_options); solver.options # Solver options only. solver.set_integrator('vern7', ode_options); help(solver.ode_options) # See description of integrator options; ```. That way the function calls is very close to v4 and easy to use, and the class interface give access to new features. ; This also makes `krylovsolve` fit more. Since `method` is used by the solver, not the integrator, it should not be under the `options.ode`, but it seems confusing to have it with the normal options, so having it as an independent parameter could make it clearer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897:113,integrat,integrator,113,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897,8,['integrat'],"['integrate', 'integration', 'integrator']"
Deployability,The notebook book would live in here:; https://github.com/qutip/qutip-notebooks/tree/master/examples; We would then link it in here:; https://github.com/qutip/qutip.github.io/blob/master/tutorials.html; I guess in the Basics section. As for the qutip-docs:; It would be good to update functions.rst. This is for the auto-generated API docs. If you are feeling super keen then you could add a guide-measurement.rst in:; https://github.com/qutip/qutip-doc/tree/master/guide; and link it from:; https://github.com/qutip/qutip-doc/blob/master/guide/guide.rst. Barring a few build problems here and there the docs building has been okay recently (I think).; Instructions can be found here:; https://github.com/qutip/qutip-doc/blob/master/README.md,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-547176797:278,update,update,278,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-547176797,1,['update'],['update']
Deployability,"The tests fail because if one defines `f(t, args, k)` and defines `g = partial(f, k=0.5)` then the signature of g is `<Signature (t, args, *, k=5)>`. There will likely be other cases like this (e.g. many decorators will change the signature). I vote that we give up on all the complicated detection of the old syntax and simply ask users to change `f(t, args)` to `f(t, **args)` when they upgrade to QuTiP 5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881:389,upgrade,upgrade,389,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881,1,['upgrade'],['upgrade']
Deployability,"There are no test code for progress bars yet.; You will need to create a new test file: `qutip/tests/test_progressbar.py`. The test can be as simple as creating the bar, call `update`, call `finished` and check that the total time is a sensible value.; You could also use pytest to catch print with [capsys](https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html#accessing-captured-output-from-a-test-function) and confirm that something was printed when `update` / `finished` is called.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520:176,update,update,176,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520,2,['update'],['update']
Deployability,"There's no link, just bad luck. This won't prevent merge - the tests clearly show your change is fine. Unfortunately our test suite isn't perfect, and sometimes it tries to integrate an insanely stiff system or something like that by accident.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050:173,integrat,integrate,173,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050,1,['integrat'],['integrate']
Deployability,"This error comes from the integration algorithm.; Take a differential equation like dy/dt = -i*y.; With a simple method like euler: ; y(t+dt) = y(t) + f' dt = y(1-i*dt); So the norm increase exponentially *(1+dt**2) at each iteration, not somewhat randomly.; The default method we use is ""adams"" from scipy's solver, which is a lot better than euler, but still have a bias. We also stop the solver for re-normalization of the state from time to time, introducing another bias.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708:26,integrat,integration,26,https://qutip.org,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708,1,['integrat'],['integration']
Deployability,"This issue has a two-fold interest: decreasing test time in general and expand the platforms through which QuTiP is available. . What is the reason it takes so long on Nix? QuTiP, in the [latest PR](https://travis-ci.org/qutip/qutip/builds/628865624?utm_source=github_status&utm_medium=notification), takes on average 20 minutes to run its tests on a given platform. Much of this I think is due to the Cython configurations, indeed the no-cython option takes only 13 minutes. My first suggestion would be to try without Cython if things speed up, from those requirements (@Ericgig set that up and I am not knowledgeable about it). . From your PR on `nixpkgs` do you build on Travis CI or a similar cloud? If you could give a list of time taken by the different tests that would help. . The idea of a subset of tests is interesting (essential tests vs. thorough tests), in general; for example thorough tests could be done only in production and a lighter version could be called with `qutip.testing.run()`. Although, in specific, it is not clear to me how to triage which tests to skip. I would be glad to have the others opinion on this too (pinged them as assignees).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700:409,configurat,configurations,409,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700,1,['configurat'],['configurations']
Deployability,"This looks great and I think it will help a lot in cleanly implementing more complex solvers light the HEOMSolver. I have two suggestions for future improvements:. - I'd like to see `.options = ...` become a method because it now modifies the existing integrator and `.options(...)` would both make that clearer and more flexible. E.g. with a method we could allow both `.options(new_options)` to completely override the options and `.options(key=new_value)` to update just one setting. - The first call to `result.add(t, X)` uses `X = state0` but state0 could be almost anything the user passed in (and not necessarily the canonical form returned by `_restore_state`). It would be better if either there was a separate method to override to convert `state0` into the canonical form, or `result.add(t, X)` was called initially with `X = _restore_state(_data0)`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616:252,integrat,integrator,252,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616,2,"['integrat', 'update']","['integrator', 'update']"
Deployability,"We can in theory drop that requirement for users - it was there in the immediate aftermath of the Numpy 1.20 release, which broke C-ABI compatibility with previous versions, and we had a couple of problems with people building against Numpy 1.20 but trying to run against a prior version. Our CI and release versions will still all need to be built against Numpy 1.16 (or our minimum supported runtime Numpy) as the lowest common denominator until we drop support for all Numpy releases before 1.20, but we enforce that in our build pipelines anyway. Just to be clear (though I think you knew this):. > Can qutip be updated to run with current versions of Numpy?. QuTiP already runs correctly against Numpy 1.20 and Numpy 1.21, and its runtime requirements on Numpy are uncapped. It's just building from source that'll fail, and that was originally a sort of ""fail-safe"" mechanism. Also `pip install -e .` should automatically do build isolation for you, including installing all the build requirements into a temporary virtual environment, so it should have just worked here. Calling `setup.py develop` directly is kind of out-dated now, though it can still be useful if you're planning on doing Cython development; `pip`'s isolation actually usually means that the Cython compiler can't detect changes any more, so it always needs to rebuild everything. `setup.py develop`, because of its much lower-level status, leaves the source and extension-library files well enough untouched that it can do incremental compilation. If you're not doing Cython development (only Python), `pip install -e .` is much better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497:109,release,release,109,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497,8,"['install', 'pipeline', 'release', 'update']","['install', 'installing', 'pipelines', 'release', 'releases', 'updated']"
Deployability,"We can't implement `__hash__` for `Qobj`, sorry - it's just not possible while following the [Python data model](https://docs.python.org/3/reference/datamodel.html#object.__hash__). The two principle points that a hash function must follow from there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs an",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1009,rolling,rolling,1009,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['rolling'],['rolling']
Deployability,"We have made some progress! But I also have some questions for the experts here.; * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?; * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; * The _run_one_traj function now exists 3 times, with practically identical code:; https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. Side note: due to a WSL bug, some of my commit timestamps are messed up. Because of that, some commits seem to be shown out of order here...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901:1062,integrat,integrate,1062,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901,1,['integrat'],['integrate']
Deployability,"We probably shouldn't mutate the given `Options` object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. That said, if we're going to do something different to what the user requested we should at least emit a warning. There's also interplay with `store_final_state` here too; it's questionable technique to do `e_ops=None, store_final_state=True` with a `tlist` with more than two elements, but probably people who aren't familiar with `nsteps` will do something like that, and it seems a bit picky to prevent/warn on that when the intention seems clear. I think that the current behaviour doesn't take this case into account when falling back - it'll store all states, which in the 4.x branch is a fairly major time sink (but much much faster in 5.0). What behaviour would you expect for your use case? I'd probably do something like:; 1. if we change the `Options`, we have to clone it first to prevent leaking our mutations; 2. if we're not going to save anything, we should warn the user but then do it anyway - maybe their time-dependence functions leak state, and they're just doing something weird with that; 3. `store_final_state` should count as ""storing something"", so no need to set `store_states` if `store_final_states=True` and there are no `e_ops`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824:154,integrat,integrator,154,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824,1,['integrat'],['integrator']
Deployability,"What do you think is more efficient than doing; ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```; ?. I'm saying that to do each state independently, `mesolve` and `sesolve` have to independently integrate each state, so even if we added this functionality into those functions directly, it would be little more than that loop I just wrote if you have used the tools I described in the first comment. If you want the entire system propagator, `qutip.propagator` can calculate that for you. Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple, but if you have very specific domain knowledge of your system, you often will be able to write an integrator which is faster for your cases, rather than the full general-purposes ones in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465:274,integrat,integrate,274,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465,2,['integrat'],"['integrate', 'integrator']"
Deployability,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:1113,release,released,1113,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,1,['release'],['released']
Deployability,"Yeah, `qutip-qip` is a much easier build and installation process because you don't need to be concerned about compiler infrastructure, ABI compatibility or stuff like that. In addition in that particular test run, there were three individual calls to change the installed packages, which meant plenty of space for stuff to go wrong. In this case, I think it was a strange interaction between the old `.travis.yml` specifically installing `numpy` and all other dependencies from `conda-forge`, without the channel being in the defaults list. Since `conda uninstall` doesn't specify an additional channel, the dependency calculator considers `defaults` to be higher priority, so it sets various packages to arbitrary allowed ones from `defaults`, which with `openblas` installed like this meant numpy `1.14`. That's my guess at least - it's a pretty weird set up circumstances, but the new `.travis.yml` file that's already in `master` is far simpler about the build process.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609:45,install,installation,45,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609,4,['install'],"['installation', 'installed', 'installing']"
Deployability,"Yeah, this is just one of those silly things caused by ImageMagick choosing a _very_ generic name and then getting burned (hence the swap to `magick`...). Probably the best thing to do is to try and run `convert` once at discovery and to see what happens. If you run `convert -version` on an IM6 install, does it output a string that looks like; > Version: ImageMagick 6.blahblahblah; or something similar?. If so, try this patch: [check_convert.txt](https://github.com/qutip/qutip/files/4397692/check_convert.txt). It rearranged the functions a little for a more logical order (I'll rebase the PR before merge), but the main change is that it now tests the output of `convert -version` to see if it contains the substring `imagemagick` (case insensitive). The reason to do this now is because if we allowed the error to propagate later, we'd have to check it every time and it would mean we'd have to pass through the ""special cases"" more frequently, and it would make the core logic more complex. Also, we _could_ catch a subprocess `CalledProcessError` later (say if one of the other commands were to fail for some reason) and re-raise our own, but to be honest I didn't want to over-engineer what ought to have been a relatively simple PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526:296,install,install,296,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526,2,"['install', 'patch']","['install', 'patch']"
Deployability,"Yes, the QT stuff is bit troublesome.. and it is not a core functionality in qutip. The about() and demos() does not do much harm, so deprecate them in next release we can drop them alltogether in the following release. The progressbar is a bigger problem, because (if I got this right) it is partly due to the event-loop tricks we need to do to get the qt progressbar to work we have problems with catching keyboardinterrupt properly in for example mcsolve, and this makes it difficult to abort a calculation cleanly. This is big problem in IPython notebooks, where one cannot hit Ctrl-C and Ctrl-Z until process is stopped.. Factoring the qt progressbar out of mcsolve should therefore be a priority, and the simplest way to do this would obviously be to drop the qt progressbar function completely... I'll add a note about this in the roadmap wiki and closing this issue now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/19#issuecomment-18917941:157,release,release,157,https://qutip.org,https://github.com/qutip/qutip/issues/19#issuecomment-18917941,2,['release'],['release']
Deployability,"You'll find it easier installing from conda-forge, since we distribute binary releases there: see the [installation guide](http://qutip.org/docs/latest/installation.html) here. If you want to install from source using `pip`, you need to configure your C++ development environment correctly - you'll probably need to enable the XCode command-line tools ([see e.g. this](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577:22,install,installing,22,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577,6,"['install', 'release']","['install', 'install-command-line-tools-mac-os-x', 'installation', 'installing', 'releases']"
Deployability,[![Coverage Status](https://coveralls.io/builds/43080503/badge)](https://coveralls.io/builds/43080503). Coverage increased (+0.004%) to 65.871% when pulling **a377949b2d459876aebac0e60f494924566f7453 on hodgestar:feature/update-floquet-guide-fesolve-call** into **9b235c48217fbc9965f993757b0819ebf8ee1f16 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1675#issuecomment-927639215:221,update,update-floquet-guide-fesolve-call,221,https://qutip.org,https://github.com/qutip/qutip/pull/1675#issuecomment-927639215,1,['update'],['update-floquet-guide-fesolve-call']
Deployability,"[0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245592358>:; >; > > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense; > + ); >; > ⬇️ Suggested change; >; > - solver_instance = FLiMESolver(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + options=options,; > + ); >; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245594985>:; >; > > @@ -929,4 +930,5 @@ def run(self, state0, tlist, *, floquet=False, args=None, e_ops=None):; > stats[""run time""] = progress_bar.total_time(); > # TODO: It would be nice if integrator could give evolution statistics; > # stats.update(_integrator.stats); > +; >; > Why a new empty line here?; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245604228>:; >; > > + self.evecs = _data.permute.indices(; > + evecs, col_perm=np.argsort(perm)); >; > This file already has black ran on it and the style is ok as is.; > (But I just learned that black exclude the newline in it's character count; > while pycodestyle include it.); > Since it's not the main part of your PR, please revert it to it's original; > state.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610200>:; >; > > + total_R_tensor[key] += np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTer",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:2879,integrat,integrator,2879,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['integrat'],['integrator']
Deployability,"`QobjEvo` have a `with_state` method `QobjEvo.with_state(t, psi, args={})` which can be used instead of `__call__` if needed. It compute the coefficient on the python side and send them to the cython part if needed. But I don't like it like this, using `__call__` will raise and error if a psi is needed, and we need to treat it differently in solvers.; How about having the state inserted in the args dictionary.; So if the users have the key ""psi_vec"" or ""psi_Qobj"" in args and mul_vec (spmv)/ expect is used, it is automatically updated. With that definition most solvers could work without a special cases for `rhs_with_state=True`. The present method could still be supported using decorator.; Also it would be relatively simple to support expectation value in args in a similar way:; if a specific key/value is found in the dictonary (`args[""_expect""+name] = Qobj/ QobjEvo` ), it is replaced with the operator expectation value when possible. . For the present case, we should document it more than change it, going back to Qobj will slow the simulation. Maybe `rhs_with_state` could be more than a bool and offer the option?; Here ` expect_rho_vec(data, vec, isherm)` from qutip.expect could be used to skip the vec -> Qobj conversion. . Also, the users should not need to know the matrix format and have to do the conversion themselves. They should never have to use `dense2D_to_fastcsr_fmode`. `QObj((vec2mat(rho))` works and should be sufficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-462591342:532,update,updated,532,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-462591342,1,['update'],['updated']
Deployability,"a maintainer of QuTiP. And it; > seems that there is no way to make a PR to Wiki. I can also send you the; > markdown source code per email like this, but I’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:1651,integrat,integration,1651,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['integrat'],['integration']
Deployability,"ages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5; Scipy Version: 1.8.1; Cython Version: 0.29.30; Matplotlib Version: 3.5.2; Python Version: 3.10.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ====================================================================",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:1297,install,installing,1297,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,1,['install'],['installing']
Deployability,"change; >; > - c_ops = []; > - c_op_rates = []; > - for entry in c_ops_and_rates:; > - c_ops.append(entry[0]); > - c_op_rates.append(entry[1]); > + c_ops, c_op_rates = zip(*c_ops_and_rates); >; > or do the check here while you are looping over all elements.; > ⬇️ Suggested change; >; > - c_ops = []; > - c_op_rates = []; > - for entry in c_ops_and_rates:; > - c_ops.append(entry[0]); > - c_op_rates.append(entry[1]); > + c_ops = []; > + c_op_rates = []; > + for c_op, rate in c_ops_and_rates:; > + if not isinstance(c_op, Qobj):; > + raise TypeError(""c_ops must be type Qobj""); > + c_ops.append(c_op); > + c_op_rates.append(rate); >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245642075>:; >; > > + The state must be initialized first by calling ``start`` or; > + ``run``. If ``run`` is called,``step`` will continue from the last; > + time and state obtained.; > + """"""; > + if args:; > + raise ValueError(; > + ""FMESolver cannot update arguments""); > + state = super().step(t); > + if not floquet:; > + state = self.floquet_basis.from_floquet_basis(; > + state, t); > + elif copy:; > + state = state.copy(); > + return state; > +; > + def run(self, state00, taulist, *, floquet=False, args=None, e_ops=None,):; >; > state00?; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245643705>:; >; > > + elif copy:; > + state = state.copy(); > + return state; > +; > + def run(self, state00, taulist, *, floquet=False, args=None, e_ops=None,):; > + """"""; > + Calculate the evolution of the quantum system.; > +; > + For a ``state0`` at time ``tlist[0]`` do the evolution as directed by; > + ``rhs`` and for each time in ``tlist`` store the state and/or; > + expectation values in a :class:`Result`. The evolution method and; > + stored results are determined by ``options``.; > +; > + Parameters; > + ----------; > + state0 : :class:`Qobj`; >; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:10765,update,update,10765,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['update'],['update']
Deployability,"d check if a variational representation can properly capture the correlations. Trotterize the hamiltonian and get a circuit, without worrying about how to convert from one framework to the other. . I want to start the discussion on this topic eagerly because I am aware that it will take a fairly long time. If there is anything I can do to make your future internal discussions easier, do let me know. > I just want to caution you in case you're trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1475,install,install,1475,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['install'],['install']
Deployability,"d. Right now,; > I am only plotting state_z_plus so I can focus on the T1 decay from 1 to; > -1. However, as the animation and graph indicate, it seems to stop short of; > -1 and I don't see why that should be happening. I appreciate any feedback.; >; > %matplotlib inline; > import matplotlib.pyplot as plt; > import numpy as np; > import qutip as q; > import cmath; > import matplotlib as mpl; > from mpl_toolkits.mplot3d import Axes3D; >; > rc_dict = {; > ""figure.subplot.bottom"": 0.11,; > ""figure.subplot.hspace"": 0.2,; > ""figure.subplot.left"": 0.125,; > ""figure.subplot.right"": 0.9,; > ""figure.subplot.top"": 0.88,; > ""figure.subplot.wspace"": 0.2,; > ""figure.figsize"":(10,10/1.61),; > ""axes.grid"": True,; > ""text.usetex"": True,; > ""grid.linestyle"": "":"",; > ""grid.color"": ""black"", #; > ""legend.fontsize"": 20,; > ""lines.linewidth"": 2.5,; > ""axes.linewidth"": 1.5,; > ""font.family"": [""serif""],; > ""font.sans-serif"": ""Times New Roman Bold"",; > ""font.size"":26,; > }; > plt.rcParams.update(rc_dict); >; > qutip_options = q.Odeoptions(; > store_states=True,; > nsteps=20000000; > ); > si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); > sp, sm=q.sigmap(), q.sigmam(); > state_z_plus=q.basis(2,0); > state_z_minus=q.basis(2,1); > state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); > state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - q.basis(2,1)); > state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j* q.basis(2,1)); > state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j* q.basis(2,1)); >; > h = 6.62607015e-34; > b = 0.1786195317554453 #magnetic field; > b_AC = 3.572390635108906e-05 #oscillating magnetic field; > g = 2 #g-factor; > u = 9.274E-24 #bohr magneton; > w = g*u*b/h #omega; > w0 = 5e9 # omega0 is the rotating frame frequency; > print(w); > gamma_phi = 44200000; > gamma_minus = 100000000; >; > epsilon = g*u*b/h*(2; > *cmath.pi) Delta = g*u*b_AC/h*(2*cmath.pi); >; > H = ((w-w0)/(w))*epsilon/2 * sz #*+ Delta/2*sy; >; > print(abs(((w-w0)/(w)))*epsilon/2); >; > #note h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937:1644,update,update,1644,https://qutip.org,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937,1,['update'],['update']
Deployability,"e input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row about licensing primarily, and then about how we're going to handle tensor networks in general. In order to prevent headaches down the line (and again, very very sorry), would it be ok if we leave this unmerged, and don't attempt to modify it in any way? I don't want to get into a situation where we decide we can't accept non-QuTiP-licenced code, and we want to use/build on your code or implement something similar, but our hands are tied because anything we do will involve our knowledge of IP we don't control.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:4376,release,release,4376,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['release'],['release']
Deployability,"e'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend le",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9133,integrat,integrate,9133,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Deployability,"e-user-images.githubusercontent.com/12125783/337660051-e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjAwNTEtZTRmYTNkMGEtY2E1YS00MGU3LWFiNWItMjgzYzMwZjBkZTA3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk5YmExMTE2NGZhZmFmZWZiYjQ2YTU0ZTlmOWNmZDg1MzI5NWQyM2UxNWIzNDUwYWYwOTdjNmZhYzU2ZDBlZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.c_jkyvIGwDUsmTXLIAr5LI0-u2IhfVNWo2orjBvElfk) with names as strings.; > ; > It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians; > ; > ![image](https://private-user-images.githubusercontent.com/12125783/337661271-ad856f69-e0f2-49a2-9ab0-f88e84444373.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjEyNzEtYWQ4NTZmNjktZTBmMi00OWEyLTlhYjAtZjg4ZTg0NDQ0MzczLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTAzYTljNGFhMDMxY2RkNmU1ZWRiZjk1YzNkODllNjdjOTlkNDIxMDBhNDgxOTI0MWEyNmFlZjM1MTZjY2I5NTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.D6pMkAw1y3WWyirs_J8dFthmGjY4V6rIMr6JUHYZ19Y). Thank you for being so clear with the explanation, now I am able to build the html. I have done this update.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051:2208,update,update,2208,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051,1,['update'],['update']
Deployability,"ead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5972,integrat,integrator,5972,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,"ecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2844,update,update,2844,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['update'],['update']
Deployability,"h higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventually favourable to this, so I propose we focus the discussion only on this point, and leave aside implicit or explicit conversion discussions. . I'll gladly open another issue to discuss implicit conversion, if you want, or we could organise a small round table among a bunch of developers to talk about this on skype, but for now, all i'm asking, is to agree on the design of an interface to ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:2472,integrat,integrating,2472,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['integrat'],['integrating']
Deployability,"han,. I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it seems that there is no way to make a PR to Wiki. I can also send you the markdown source code per email like this, but I’m not sure if it works as I expected. The following is the markdown source code:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:1024,integrat,integration,1024,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['integrat'],['integration']
Deployability,"handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row ab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3486,install,installed,3486,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['install'],['installed']
Deployability,"ing clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a good amount of free time at the same time as a `qutip` release happened, and most of the maintainers took a break for a few weeks. Right now I'm a bit busier with work so my conversion rate has slowed a little. I'll probably be back on it in a week or so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:2053,release,release,2053,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['release'],['release']
Deployability,"ite out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:4363,install,install,4363,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['install'],['install']
Deployability,"ithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit short-sighted. We can define, for example, `Space.__eq__` as; ```python; class Space:; def __eq__(self, other):; return (; self is oth",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:2329,release,release,2329,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['release'],['release']
Deployability,"itten it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/k",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6221,integrat,integrator,6221,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,"just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use othe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:11860,integrat,integration,11860,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,3,['integrat'],"['integration', 'integrator']"
Deployability,"le for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing the same thing alive in the library at once, but we can't detect what version of an interface a downstream package requires (not keen on the idea of a `__qutip_qobj_api_version__` flag!!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:7554,release,release,7554,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['release'],['release']
Deployability,"list and state ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H with constant collapse ... ok; > > > Monte-carlo: Constant H with single collapse operator ... ok; > > > Monte-carlo: Constant H with single expect operator ... ok; > > > Monte-carlo: Collapse terms constant (func format) ... ok; > > > Monte-carlo: Collapse terms constant (str format) ... ok; > > > Monte-carl",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:3397,install,installed,3397,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['install'],['installed']
Deployability,"lready. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new formats), and I think the benefits of a priority queue of allowed converters outweighs it in convenience for users.; - It involves some global state of the `qutip` library, which _may_ cause problems for multiprocessing if somebody tries to register a `lambda` converter (can't pass through `pickle`, though I'm not 100% on whether module-level stuff needs to), and of course there's the query of what happens when converters are registered in separate processes. We already have this ""problem"" in 5.0 though, because that's how the entire underlying dispatch mechanism is handled; we can just require that converters must be pickle-able.; - If a downstream package wants to lazily `import qutip` (we're a pretty heavy import right now), it's harder in this method; you'd basically have to ask a user to call `otherlibrary.register_qutip()`. For one, I'm going to put some effort into making `import qutip` take much less time for 5.0 (the main problem right now is we essentially eagerly import all of scipy and IPython if it's around), so that'll make it a bit easier. For two, a single initialisation statement isn't _necessarily_ a terrible thing; users can decide for themselves if they want to install the implicit integrations, but this is definitely an inconvenience relative to the magic method. ---. Apologies that I'm not responding super quickly to everything - I'm not the only main QuTiP dev (and I can only work on QuTiP occasionally anyway), so I'm giving others time to read and think about the proposals as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:8455,install,install,8455,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,2,"['install', 'integrat']","['install', 'integrations']"
Deployability,"ly useful and will simplify the code inside the propagator a bit. I removed `.evolve_dm`. > **For `.sys_dims`**:; > ; > The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise.; > ; > I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. Changed in HEOMSolver. Since environment only means something for HEOM, so it took some time to understand what it referred to. Adding the change elsewhere would be confusing. ; > **Specifying which solvers support propagators**:; > ; > Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them. There is only one class for propagator and I don't see us needing any other, so there is no use for a `propagator_class` . We could have a `support_propagator` flag, but I prefer it this way as we can set a special error message for `HEOMSolver`. ; `HEOMSolver` is the only exceptions where we could support it but choose not to take the time to implement it. ; All deterministic solver we have can be used for propagator, trajectories solver don't have a properly defined propagator for single trajectory and I don't see any use to create a propagator for the averaged states. It would take a lot of trajectories to obtain what is effectively mesolve's propagator. . We could add the flag to the integrator instead, some krylov integrator cannot evolve 2D states, but it's the only one we have plan for and it's not merged yet...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120:2274,integrat,integrator,2274,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120,2,['integrat'],['integrator']
Deployability,"match is quite good. Even with enough trajectories, the numerical error from `smesolve` will be visible.; > ; > The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of all N quantum trajectories ρ(t)'s expect (**Tr[ρ(t)A] maybe with different dW**), and on the other hand I want to compare the expected average of N quantum trajectories with the result of the master equation(`mesolve.expect`). This is similar to this code in Note (but the result in [Note](https://nbviewer.org/urls/qutip.org/qutip-tutorials/tutorials-v4/time-evolution/016_smesolve-inefficient-detection.ipynb) is `result.measurement`). `fig, ax = plt.subplots(figsize=(8, 4)). for m in result.measurement:; ax.plot(times, m[:, 0].real, ""b"", alpha=0.025). ax.plot(times, result_ref.expect[1], ""k"", lw=2). ax.set_ylim(-25, 25); ax.set_xlim(0",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:1771,continuous,continuous,1771,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,1,['continuous'],['continuous']
Deployability,"mported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245592358>:; >; > > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense; > + ); >; > ⬇️ Suggested change; >; > - solver_instance = FLiMESolver(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:1545,release,release,1545,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['release'],['release']
Deployability,"ng the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just process its options there. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:1027,integrat,integrator,1027,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,4,"['integrat', 'update']","['integrator', 'update']"
Deployability,"ocumentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being so",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3376,configurat,configuration,3376,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['configurat'],['configuration']
Deployability,"or each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfied with how the new rhs functions work I'll merge the branch sme-rhs-restructuring into qutip master and then feel free to submit a pull request with your milstein rhs implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1770,integrat,integrator,1770,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['integrat'],['integrator']
Deployability,"ouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:4331,update,updates,4331,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['update'],['updates']
Deployability,"r (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7041,integrat,integrator,7041,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,"rmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (OO) ... ok; ```. This shows that it is probably not an issue with the source code. I was looking at the output you provided from `qutip.about`, and you seem to be using `QuTiP Version: 4.5.0.dev0+d377c997`. I suspect this could be the issue, since the dev version is probably not stable yet. So I'd recommend you try this with a stable release of QuTiP.; Would you try running the same with QuTiP 4.4.1, by explicitly installing the same in conda as follows, and get back to us? :; `conda install qutip=4.4.1`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:2707,release,release,2707,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,3,"['install', 'release']","['install', 'installing', 'release']"
Deployability,"s (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. ; `step` was renamed to `integrate` a while ago. Good catch!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:2086,integrat,integrate,2086,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,2,['integrat'],['integrate']
Deployability,"seus' ship problem for us if we ever want to re-organise the file that contains this code; after how many modifications is the code no longer NASA's, but QuTiP's? As long as it's not _ours_, we can't separate it out into different files, or mix it with other code (say additional implementations). I'm definitely not a lawyer, but I'm worried that will cause us code organisation problems in the future, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of rou",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:1693,release,release,1693,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['release'],['release']
Deployability,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2590,pipeline,pipeline,2590,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['pipeline'],['pipeline']
Deployability,"started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another con",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1664,update,updates,1664,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['update'],['updates']
Deployability,"te` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L312) in Krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) with something that's reentrant so I don't have to [re-initialize the integrator in every time step](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L244) , that might be a significant performance boost already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:13066,integrat,integrate,13066,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['integrat'],"['integrate', 'integrator']"
Deployability,"tion_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245592358>:; >; > > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense; > + ); >; > ⬇️ Suggested change; >; > - solver_instance = FLiMESolver(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + options=options,; > + ); >; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245594985>:; >; > > @@ -929,4 +930,5 @@ def run(self, state0, tlist, *, floquet=False, args=None, e_ops=None):; > stats[""run time""] = progress_bar.total_time(); > # TODO: It would be nice if integrator could give evolution statistics; > # stats.update(_integrator.stats); > +; >; > Why a new empty line here?; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245604228>:; >; > > + self.evecs = _data.permute.indices(; > + evecs, col_perm=np.argsort(perm)); >; > This file already has black ran on it and the style is ok as is.; > (But I just learned that black exclude the newline in it's character count; > while pycodestyle include it.); > Since it's not the main part of your PR, please revert it to it's original; > state.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610200>:; >; > > + total_R_tensor[key] += np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + re",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:2933,update,update,2933,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['update'],['update']
Deployability,"tip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1400,install,install,1400,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['install'],['install']
Deployability,"um Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://quco",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2364,update,updated,2364,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['update'],['updated']
Deployability,"umerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6118,integrat,integrators,6118,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrators']
Deployability,"ve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the doc",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2096,update,update,2096,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['update'],['update']
Energy Efficiency," module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exactly what I was doing. 6. Yeah, I'm going to add additional `imul`, `ineg` and `idiv` routines as dispatched operations. 7. LAPACK/BLAS as far as we can. I've no pretense to being able to write faster code than hardware-specific optimised stuff for matrices. I haven't actually written most of the numerical code in this PR either - it's just ported from current `qutip`, with the variable names changed to be more descriptive.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:2309,allocate,allocate,2309,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['allocate'],['allocate']
Energy Efficiency," then setting up the dispatcher will be the last item in the `matmul` file. It also means the files stay a bit smaller and easier to manage within themselves - you're less likely to ""lose"" code when each module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exactly what I was doing. 6. Yeah, I'm going to add additional `imul`, `ineg` and `idiv` routines as dispatched operations. 7. LAPACK/BLAS as far as we can. I've no pretense to being able to write faster code than hardware-spec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:1618,allocate,allocates,1618,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['allocate'],['allocates']
Energy Efficiency,"### New changelog. #### <code>test_krylovsolve.py</code>. * [x] We have <code>qutip.rand_herm</code> for a random hamiltonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:830,efficient,efficiently,830,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['efficient'],['efficiently']
Energy Efficiency,"--. Just in the interest of completeness, let me also just bring up some of the sweeping changes we'll bringing in in QuTiP 5.0 as well, which massively overhaul how `Qobj` is constructed, and how its data is stored. These aren't _directly_ applicable to the current discussion, but they're worth keeping in mind since they're a huge overhaul of how things will be handled, and may have some implications for how implementors of this interface might behave. The new `Qobj` will no longer have the same `fast_csr_matrix` type as its `data` attribute, but instead will have an extensible data type. The two that will be distributed with the library will be `Dense` and `CSR` (which simply do what they say on the tin), and all linear algebra operations between multiple `Qobj` are handled by a custom multiple-dispatch system that allows additional specialisations to be added in a similar way to Julia. Say you want to define `matmul` between `Dense` on the left and `CSR` on the right to produce a `CSR` output (a specialisation that we likely won't ship with because it's unlikely to be efficient). You'd write your function; ```python; def matmul_dense_csr_csr(left, right):; ...; return out; ```; and then because unlike Julia it's not built-in, you just manually add it to the dispatch table for `matmul`:; ```python; qutip.data.matmul.add_specialisations(matmul_dense_csr_csr, (Dense, CSR), CSR); ```; QuTiP then knows about it, so it'll get used when appropriate. You can also add entirely new types to the dispatch table by adding them to the ""cast"" table `qutip.data.to`, giving at least one method to convert the new type into an already-known one, and at least one method to convert an already-known type into the new type. QuTiP will then be able to use the entirely new type as `Qobj.data` for every single operation within the library (though it won't be super efficient until you add the linear algebra specialisations you use most). This actually goes a bit beyond what Julia does (at ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:5103,efficient,efficient,5103,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['efficient'],['efficient']
Energy Efficiency,"0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d018e0). Current thread 0x0000000109fe85c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. So these both use `scipy.linalg.eig`, which is suspicious. ## Valgrind checks. To see if I could track it down, I had a go with valgrind. This isn't guaranteed to find everything, because I'm not using a debug build of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:5206,allocate,allocated,5206,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['allocate'],['allocated']
Energy Efficiency,"; > > > warnings.warn(msg); > > > ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/di",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11578,energy,energy,11578,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['energy'],['energy']
Energy Efficiency,"; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse scheduling,; > e.g. Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:1871,schedul,schedule,1871,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['schedul'],['schedule']
Energy Efficiency,"> > Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed.; > ; > Good point! I did not consider that initially. For this case, since it is not possible to define a single arc but rather there are infinite possibilities, I would suggest to simply raise an exception. What do you think @gaurav-iiser ?. Yes, I think raising an exception is a good idea. > ; > > So, is it okay if I take your code above, modify it for the general scenario, make changes to the add_arc, and push it again?; > ; > I think there is an option somewhere to make someone a coauthor of the code, but do not worry about that, it is not necessary here. You can either push the changes to this pull request or, since this will require significant changes to the code, you could create a new one. I personally prefer creating a new PR since it leaves a cleaner commit history, but both are fine. Thanks again for your advice. :); I will probably create a new PR in a day or two by making respective changes to `add_arc`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937583899:76,reduce,reduces,76,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937583899,1,['reduce'],['reduces']
Energy Efficiency,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:574,allocate,allocated,574,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['allocate'],['allocated']
Energy Efficiency,"> Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works.; > ; > Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same. I have now made it so that the measure and measurement_statistics function precisely do this. Should we keep either mode (one mode is of the ""observable"" type and the other with the ""projective"" type) also as a api-exposed function? If that is not the case, what would be the correct way to write doc_strings ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389:378,efficient,efficient,378,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389,1,['efficient'],['efficient']
Energy Efficiency,"> Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed. Good point! I did not consider that initially. For this case, since it is not possible to define a single arc but rather there are infinite possibilities, I would suggest to simply raise an exception. What do you think @gaurav-iiser ?. > So, is it okay if I take your code above, modify it for the general scenario, make changes to the add_arc, and push it again? . I think there is an option somewhere to make someone a coauthor of the code, but do not worry about that, it is not necessary here. You can either push the changes to this pull request or, since this will require significant changes to the code, you could create a new one. I personally prefer creating a new PR since it leaves a cleaner commit history, but both are fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937579234:74,reduce,reduces,74,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937579234,1,['reduce'],['reduces']
Energy Efficiency,"> also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse scheduling,; > e.g. Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages; > or commonly used language e.g. through quantum assembly language (qasm); >; > ------------------------------; >; > Also, the last outcomes have some overlap with the last project. Although; > I also find this circuit importation very important, I guess two projects; > should not have overlap if they are both selected.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67E",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:2631,schedul,scheduling,2631,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['schedul'],['scheduling']
Energy Efficiency,"> thanks for the comment, I didn't know about `qutip.propagator`; > ; > > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple; > ; > cool, can i learn more about this from you?. Sorry, I don't have much experience in it myself - you'll be reading about the methods in papers/lecture note by people smarter than me. We have some tutorial notebooks about optimal control using the QuTiP optimal control package here: http://qutip.org/tutorials.html#optimal-control, which you may be able to adapt to your use case. I believe there are components in there that you can subclass so that the optimiser is RL-based rather than using standard BFGS or something else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258:570,adapt,adapt,570,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258,1,['adapt'],['adapt']
Energy Efficiency,"@Ericgig . - docstrings should be fixed. - coveraged increased with . `e_ops = [callable, qobj]; e_ops = [callable, callable]; e_ops = [qobj, qobj]`. - added a more efficient and clear pytest parametrization; - fixed the repeated sparse test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157:165,efficient,efficient,165,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157,1,['efficient'],['efficient']
Energy Efficiency,"@goerz I think one of Mølmer's papers (maybe the one I have pointed out) addressed the equivalence of the two methods. Sorry, I don't have a definite paper to point out at this moment. I was actually organizing the Julia community to work on this direction (see [JuliaQuantum](http://juliaquantum.github.io)) from scratch, and hence didn't follow up the efforts in the measurement simulation within QuTiP. . When I was writing my paper on continuous measurement ([PRA, 93.023817](http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817)), I came up the argument that the former method may be more appropriate for measurement models. This is because measurements have to happen in evenly spaced time steps determined by the detector's integrating time, so it is intuitive to use a random number to judge if on each measurement step the quantum jump will happen. There may be a way to use the second method to implement the same measurement simulation model, but I didn't think too much on it. In reality, I developed another more efficient method without actually evolving the density operator in my paper to simulate continuous measurement using a set of stochastic equations for squeezing thousands of atoms' state which has not been included in QuTiP yet. Sorry I don't have more useful reference that explains this point in more details at this moment. Good luck!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-220744432:1037,efficient,efficient,1037,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-220744432,1,['efficient'],['efficient']
Energy Efficiency,"@jakelishman this is great, also thanks @dweigand for this PR. I tried out the function and it is very fast and could be great for specific use cases. My idea was a bit more simple - precomputing the `coherent_dm` operators (using qutip.coherent_dm) and using the `expect` function. But that performs worse that the original `qfunc` as well as this implementation of course. So this is great. I would be happy to merge this but have one thought:. This new implementation is sacrificing the ease-of-understanding of how Q-functions are computed with a very efficient and fast, but complicated class-based implementation. This means that users who want to look under the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_d",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:556,efficient,efficient,556,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['efficient'],['efficient']
Energy Efficiency,"@maij Thanks! The test code looks like a good start. Could you add it to `qutip/tests/test_wigner.py`?. Other tests we could add:. * We could write a more general test that compares the output of spin_q_function to a simpler implementation based on the definition -- something like:; ```python; state = qutip.spin_coherent(spin, theta_prime, phi_prime); direct_q = (state.dag() * qutip.ket2dm(psi) * state).norm() / np.pi; ```; Note: I named the angles `theta_prime` and `phi_prime` to emphasize that we can apply this test to cases where the angles for the state psi and the ones passed to spin_q_function are different. * We should also add a test for passing in arrays of theta and phi (i.e. were we really get out a mesh grid for Q values) since that was the primary use case for which `spin_q_function` was defined. Ideas for future PRs:. * It would be nice to also add tests for `spin_wigner` (I am suspicious of it now because of the problems with spin_q_function). Thank you for looking at these and taking charge of this bit of QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408:1015,charge,charge,1015,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408,1,['charge'],['charge']
Energy Efficiency,"A simple example of a operator that is traceless and not a dm is the charge operator, e.g. `charge(4)`. How would we know a difference in this case without further info?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/474#issuecomment-219623485:69,charge,charge,69,https://qutip.org,https://github.com/qutip/qutip/issues/474#issuecomment-219623485,2,['charge'],['charge']
Energy Efficiency,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:1463,allocate,allocated,1463,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,2,['allocate'],['allocated']
Energy Efficiency,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:1856,reduce,reduce,1856,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,1,['reduce'],['reduce']
Energy Efficiency,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:1572,power,power,1572,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,1,['power'],['power']
Energy Efficiency,"Hello! As @jakelishman described, you can help debug this issue by trying:. ```python; from qutip.cy.openmp.parfuncs import spmv_csr_openmp; ```. and reading the exception produced. I suspect that the `qutip.cy.openmp.*` packages will simply not have been compiled -- they're only built by QuTiP when ""--with-openmp"" is passed to `setup.py` and I think `conda install ... qutip` will not do that even when OpenMP is already installed. To correct this you will need to install QuTiP from source and pass `--with-openmp` yourself as described in https://qutip.org/docs/latest/installation.html?highlight=openmp#direct-setuptools-source-builds. We probably could make ""openmpi"" and ""no-openmpi"" builds for conda-forge by adapting the pattern in https://conda-forge.org/docs/maintainer/knowledge_base.html#openmp but that would require some work (and be a feature enhancement :).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166:718,adapt,adapting,718,https://qutip.org,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166,1,['adapt'],['adapting']
Energy Efficiency,"Hi, @abhisekupadhyaya nice work! . Usually a high cognitive complexity indicates that the function is too long or too deep for understanding and maintenance, but sometimes it exaggerates a bit, so it's fine as long as everything is clear. To reduce the function length, for example, if the checking part and each gate parsing can be resued (e.g for QASM v2), they can be defined in a separate function. Another minor thing, what about leaving a short warning when ignoring the unsupported code?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745:242,reduce,reduce,242,https://qutip.org,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745,1,['reduce'],['reduce']
Energy Efficiency,"Hi, interesting, thank you for your detailed description!. > When the transformation is made for DrudeLorentzBath, the result generated differs from that for DrudeLorentzPadeBath (and it is not about the number of frequencies used). First of all, are you sure that either of `DrudeLorentzBath` and `DrudeLorentzPadeBath` give the right solution? Because the `ck_real` / `vk_real` are supposed to be the coefficients / exponents of the real part of the correlation function (and the others the imaginary part), and if you plug in imaginary parameters, then terms that previously were only in the real parts could pick up imaginary parts etc. Perhaps this kind of thing cancels out when you add the two unphysical D-L baths to get the shifted D-L bath?. Regarding your proposed solution -- I would say, in the case where `gamma` is not real, the spectral density is unphysical and there is no *a priori* correct way to handle this case. In other words, in a sense, the code before the change is wrong (or right) and the code after the change is just as wrong (or right). I therefore think it wouldn't hurt to implement this change so that your use case can be supported. However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. A more ""complete"" and probably more efficient solution would be to add a whole new `ShiftedDrudeLorentzBath`, and to put in analytically derived formulas for the Matsubara / Pade expansion coefficients. (As a first step, you could also calculate these coefficients manually and create a `BosonicBath` object from them directly.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2323132801:1412,efficient,efficient,1412,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2323132801,1,['efficient'],['efficient']
Energy Efficiency,I agree with @Ericgig on the possibility of having no template and adding the suggestions for tests in the template. . I understand now that the changelog in qutip/qutip was a bad idea for the reasons you mention.; I still think it would be nice to somehow automate the way the changelog is compiled (right now by whoever is in charge of the release). Is there a simple and smart way to do this? Otherwise we could just look up the changelog section in each PR as per this template.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649:328,charge,charge,328,https://qutip.org,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649,1,['charge'],['charge']
Energy Efficiency,"I am on the side on having 2 `default_dtype` options for the `Qobj` creation functions. I have some question as to how/where to make `default_dtype` more consistent. Applying the default at Qobj creation feels risky to me. In the solver it will end up converting the states before computing the expectation value. It could create strange interactions with operators and unitary transformations (`Qobj[Dense].dag() -> Qobj[CSR]`). `Qobj(scipy_csr)` could be converted to something else... However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion.; It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format? . In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. ps. Should `eigenstates` return the states in one operator instead of a list of kets? I guess the states were used to create the operators fed to `steadystate`, so operator output would be more practical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861:1056,allocate,allocated,1056,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861,1,['allocate'],['allocated']
Energy Efficiency,I have read a bit about the reasons for moving reduce. The main one seems to be that code using it can be unclear. And that in most cases a for loop can be used to achieve the same in a clearer way. I think that may be applicable here. I have spent a while looking at the line that uses it and I am still not sure what it is doing. I think sacrificing a little succinctness for clarity here may be beneficial.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128328061:47,reduce,reduce,47,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128328061,1,['reduce'],['reduce']
Energy Efficiency,"I still vote for keeping it as it is, because I think it makes sense to keep Qobj \* Qobj in the space of Qobj. This is now numpy.ndarray, numpy.matrix and scipy,sparse.spmatrix works, and I think that one would expect Qobj to do the same. A simple example: imagine you get a Qobj x as an argument to a function, and you do some computation like x.dag() \* op \* x with some operator op. If x is a ket you will get a Python complex as a result with your suggested behavior. But if x is an operator instead you will get a Qobj. Or if x is a tensor of an operator and a ket (like in the top of this issue) you will get something in between, a reduced dimensionality operator. I think it makes a lot more sense to keep the results of all these cases as Qobj. Then if one for example want to do the trace of the result it should work in all cases, and no special handing of C-numbers would be required since Qobj([1]).tr() would give something reasonable, but (Python complex).tr() would obviously fail. The use-case you are interested in, abs(some_bra \* some_ket), could easily be implemented in Qobj by implementing the **abs** special function. I think that would be a better way.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/28#issuecomment-28302814:641,reduce,reduced,641,https://qutip.org,https://github.com/qutip/qutip/issues/28#issuecomment-28302814,1,['reduce'],['reduced']
Energy Efficiency,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:127,efficient,efficiently,127,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['efficient'],['efficiently']
Energy Efficiency,"I understand completely!. I'd probably just go to `int64` with your internal CSR implementation for the moment. Would it be very easy to have the `int32`/`int64` boiled down to a single compile-time flag, for those people that compile QuTiP manually and feel they really need the smaller `int32` matrices? The pre-compiled pip/conda releases could be `int64`. That might be a simple way to provide some support for ""both"". Somehow, I thought that SciPy would put a lot more emphasis on performance, and do things like Kronecker products without conversion. It would seem that SciPy should be the place to really optimize the sparse linear algebra implementation, including all the possible combinations like `CSR * DIA`. Then everyone could build on top of that, making custom sparse-matrix implementation unnecessary. Maybe when someone gets some serious funding for working on QuTiP, encapsulating all of this better would be doable. So, just something to keep in mind before bolting on too many things onto the existing custom implementation (like multiple sparse and full storage formats). Once you open up that can of worms, it just might be better to re-design `Oobj.data` to have a very broad base (e.g. SciPy), and keep the custom CSR as an optional, highly efficient implementation for the special case, maybe in a separate package. Either way, it's going to be a lot of work, and not something for a minor-version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384094285:1266,efficient,efficient,1266,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384094285,1,['efficient'],['efficient']
Energy Efficiency,"I was just thinking about this again and came up with a good speed up for the truncated Hilbert space. I can't think of any method to get analytic closed-form solutions for the truncated space, though, so this is just a more efficient numerical method. First we take the generator of the displacement operator `G`, such that `exp(G)` is the displacement operator we're looking for. `G` is anti-Hermitian, and so it shares its eigensystem (up to scaling of the eigenvalues) with the Hermitian `i G` and consequently is diagonalised by a unitary formed of its eigenvectors. Now `S = i G / abs(alpha)` is a tridiagonal Hermitian, and with a similarity transformation we can find a _real-symmetric_ tridiagonal `T = P^-1 . S . P` for some diagonal unitary `P` (which is easy to calculate). The reason for scaling out `alpha` here should become clear at the end. The main diagonal of `T` is all zeros, and the first sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equival",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:225,efficient,efficient,225,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['efficient'],['efficient']
Energy Efficiency,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:83,efficient,efficiently,83,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,1,['efficient'],['efficiently']
Energy Efficiency,"Nah, don't disparage yourself - your code is good and you've done well to copy the style of the rest of the files. Typically consistency is better than having ""the one true style""; code's read more than it's written, and having a module which is clearly written by four different people makes the logic very very difficult to follow, which in turns makes it much harder to spot bugs. If it were up to me (which is isn't, really), I would say that your changes are good as they are. I didn't mean for the comments to be changes you _had_ to make. You can't reduce the number of merge conflicts that are going to happen with #1181 anyway, because that PR is a massive refactor of large swathes of the testing suite. You've done a good job to keep your work consistent with the rest of the file, so it will be very easy to merge in your logical changes. Merge conflicts are pretty much just par for the course; just the fact that we're discussing this here shows that logically, there _is_ a conflict between two pieces of work being done at the same time. I'd suggest merging this as-is. We'll handle the problems caused by the refactor elsewhere.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891:556,reduce,reduce,556,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891,1,['reduce'],['reduce']
Energy Efficiency,"Nothing too clever here. As in cached flag cleared whenever unitarity threatened; The check could probably be more efficient, but as not expected to be used intensively, then this would seem acceptable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364163769:115,efficient,efficient,115,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364163769,1,['efficient'],['efficient']
Energy Efficiency,"Now it gives me one other error and a failure (and I have the impression the I can deal with the prior errors better than with the new one):. > > > import qutip.testing as qt; > > > qt.run(); > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ERROR; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... FAIL; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Sparse: Symmetric Permute ... ok; > > > Sparse: Nonsymmetric Permute ... ok; > > > Sparse: Symmetric Reverse Permute ... ok; > > > Sparse: Nonsymmetric Reverse Permute ... ok; > > > Sparse: Bandwidth ... ok; > > > Transform 2-level to eigenbasis and back ... ok; > > > Transform 10-level real-values to eigenbasis and back ... ok; > > > Transform 10-level to eigenbasis and back ... ok; > > > Transform 10-level imag to eigenbasis and back ... ok; > > > Check diagonalization via eigenbasis transformation ... ok; > > > brmesolve: harmonic oscillator, finite temperature ... ok; > > > brmesolve: harmonic oscillator, finite temperature, states ... ok; > > > brmesolve: harmonic oscillator, zero temperature ... ok; > > > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > > > brmesolve: qubit ... ok; > > > correlation: comparing me and es for oscillator in coherent initial state ... ok; > > > correlation: comparing me and es for oscillator in steady state ... ok; > > > correlation: compare spectrum from eseries and pseudo-inverse methods ... ok; > > > Diagonalization of random two-",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:429,power,power,429,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['power'],['power']
Energy Efficiency,"OK, I see. `complex_array_to_rgb` could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function `matrix_histogram_complex`. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from `matrix_histogram_complex` you get something like. ```; x = np.linspace(-5, 5, 100); X, Y = np.meshgrid(x,x); Z = X + 1j * Y; cdict = {'blue': ((0.00, 0.0, 0.0),; (0.25, 0.0, 0.0),; (0.50, 1.0, 1.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'green': ((0.00, 0.0, 0.0),; (0.25, 1.0, 1.0),; (0.50, 0.0, 0.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'red': ((0.00, 1.0, 1.0),; (0.25, 0.5, 0.5),; (0.50, 0.0, 0.0),; (0.75, 0.0, 0.0),; (1.00, 1.0, 1.0))}. cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); norm = mpl.colors.Normalize(-pi, pi); colors = cmap(norm(np.angle(Z))); colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(). plt.imshow(colors, interpolation='none');; ```. which produces the following map of the complex plane:. ![complex-plane-2](https://cloud.githubusercontent.com/assets/1198183/2809239/c3f6c3cc-cd61-11e3-83a1-cc4fff3f303c.png). compared to. ```; plt.imshow(complex_array_to_rgb(Z), interpolation='none');; ```. which produces. ![complex-plane-1](https://cloud.githubusercontent.com/assets/1198183/2809256/29caad3e-cd63-11e3-8e7a-3187afc2744f.png). Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41473950:806,green,green,806,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41473950,1,['green'],['green']
Energy Efficiency,"Ok, I think I may have some more information. I am fairly sure that this is the same bug as #1120, #963 and #944 (which I believe was not actually ever fixed). I'm going to put the information here. My working theory is currently that this is a MKL bug on Mac. For posterity, let me just dump out some information. ## Things you should know if you've not worked with segfaults before. - `Abort trap 6`, `Segmentation fault` and a few other points can all be from the same cause; - Segmentation faults are typically caused by reading or writing to memory that isn't owned by our process. These often occur by reading/writing too much data to an allocated pointer, or trying to read/write a memory location where the location was read from uninitialised memory.; - Segfaults will not always reliably occur. It's _very_ difficult to prove that swapping tools ""fixes"" a segfault; it can often just move around enough allocations to mask the problem, not fix it.; - Python stack traces are likely to be almost entirely unreliable in these cases, because the segfault may often occur while the garbage collector is running, and that will happen at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation comp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:644,allocate,allocated,644,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['allocate'],['allocated']
Energy Efficiency,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:653,efficient,efficiently,653,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['efficient'],['efficiently']
Energy Efficiency,"Operation `oper @ ket` is a lot faster for `CSR @ Dense` than `CRS @ CSR`. Also for ket, csr matrices still need to have one entry per row, making them not that much more efficient than dense. (A well optimised `COO` would be nice here.). But it is only a good choice when they are used as kets, not when used as building tools for operators... We have functions to create such operators that I thought were more known that are set to use the appropriate sparse default:; `fock_dm(N, n)` is equivalent to `basis(N, n) * basis(N, n).dag()`.; `projection(N, n, m)` is equivalent to `basis(N, n) * basis(N, m).dag()`. For now I added an entry for this case in the migration guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-2028969439:171,efficient,efficient,171,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-2028969439,1,['efficient'],['efficient']
Energy Efficiency,"Perhaps someone else can give a more concrete answer, but I guess the driving frequency is too high for the number of time-steps? Try tweaking the ODE solver with options like the following:. `; options = Options(nsteps=15000, atol=1e-13, rtol=1e-13) ; `. and passing it to mesolve. `result1 = mesolve(Ha, psi0, times, [np.sqrt(T1)*sig01, np.sqrt(T2)*sig02, np.sqrt(gamma*(nth + 1))*a, np.sqrt(gamma*nth)*a.dag()], [a.dag()*a, sig00, sig11, sig22], progress_bar=True, options=options); `. More practically speaking, for the problem you are solving I guess explicitly including the time dependence is unneccessary, since you have already made a RWA on the drive and the coupling? . Moving to an interaction picture in w1, w2 and wph, and removing the explicit time-dependence might simplify the problem and might give you equivalent results, and in the process make your code much simpler and more efficient?. In other words just set w1=w2=wph=0, and put the drive as a time-independent term in the hamiltonian . `; H01 = g*(sig12*a.dag() + sig21*a) + pump1*(sig01 + sig01.dag()); `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514:897,efficient,efficient,897,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514,1,['efficient'],['efficient']
Energy Efficiency,"Picking a new random number at each time step would be an expensive way to do the computation since each call to the random number generator is costly. One could pre-generate a large array of random numbers before hand, but there is no way to know if you generated enough since we are using an adaptive step size ODE method. You are correct about the way mcsolve does its calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE me",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:294,adapt,adaptive,294,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['adapt'],['adaptive']
Energy Efficiency,"Pure numerically speaking, the last `diss_coeff` is a way larger than the others.; ```python; >>>diss_coeff; [0.19836061612310207j,; 0.25470007277190326j,; 0.223606797519535j,; 4925.267477050309j]; ```; With this large frequency, if you want to solve the dynamics using ODE, I don't think there is a way to make it faster. You have to either simplify your model mathematically, or, because there is no time dependency in your system, use the (deprecated) `essolve` that computes the dynamics using eigenvalues. Thinking about the physics, the T2 time is much smaller than your `tlist`, the system has already fully decohered. PS: @jakelishman It seems that the `essolve` does have some use-cases? Like in small systems for verification perpose. I remember there is another PR that also mentions it. As we deprecated it, I'm wondering if there is an efficient alternative in QuTiP?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452:849,efficient,efficient,849,https://qutip.org,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452,1,['efficient'],['efficient']
Energy Efficiency,"Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works. . Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-641961716:371,efficient,efficient,371,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-641961716,1,['efficient'],['efficient']
Energy Efficiency,"Thanks for the useful feedback, both here and in PR #1611 ! From the discussion in PR #1611 it seems that the second option with the modifications proposed by Jake in this issue seems to be the most sensible approach. Hence, if there are no objections, I will open a PR (which I will probably do tomorrow) where I implement the following changes (adapted from Simon's comment in PR #1611):. - `Qobj.__mul__(self, other) ` ; - dispatch to `data.matmul` if `other` is a `Qobj`; - dispatch to `data.mul` otherwise which will return `NotImplemented` if it does not know how to handle `other`. ; - `Qobj.__rmul__(self, other) `:; - Dispatch to `data.mul` (`other` will never be a Qobj): Notice that in this way both left and right multiplication will behave in the same way. This would also ""solve"" the inconsistency PR #1611 was trying to solve but this time `data.mul` will handle it and will raise NotImplemented whenever required. . - `mul_dense` and `mul_csr`:; - Use a thin wrapper that returns `NotImplemeneted` if input is not a complex python scalar. There are a few things I would like to discuss before opening a PR:; 1) These changes will break backwards compatibility as:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # With the changes this also returns NotImplemented.; matrix * qobj # With the changes this also returns NotImplemented; ```; will now behave consistently (""fixes"" PR #1611). Is this acceptable? I would say yes given that we are doing a major version change. However, it may be a good idea to start raising a deprecation warning in QuTiP 4 if these changes go forward. 2) `data.add` has a similar behaviour to `data.mul` in that it accepts `scale` which is not a `Data` (there are a few more specialisations that also accept an argument that is not a `Data`). Should these specialisations behave in the same way allowing arbitrary python objects as ""scale"" and raise NotImplemented when required or should they just allow a complex py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473:347,adapt,adapted,347,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473,1,['adapt'],['adapted']
Energy Efficiency,"Thanks!. I haven't thought about python3 (is it about divisions `//` and `reduce`, or did you spot other problems?). `numpy.prod` - I guess I should rather use it, since `numpy` is already there; (a second thought: at least in python2 for lists of few elements `reduce` is significantly faster; I am not sure though, it in this particular case it makes a difference). ```; from numpy import prod; from operator import mul. prod([1,2,3]) # 22.6 µs; reduce(mul, [1,2,3]) # 737 ns; ```. `plot_qubism` for density matrix it is a different plot. In any case, I will think about it when I doing it (and I will adopt to QuTiP guidelines).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-43737566:74,reduce,reduce,74,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-43737566,3,['reduce'],['reduce']
Energy Efficiency,"Thanks, I'm glad to be of service! I missed that about `functools.reduce` in 2.7, will amend the PR to use that, fix the `xrange` thing and try to make the use of `reduce` a bit more clear. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128407473:66,reduce,reduce,66,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128407473,2,['reduce'],['reduce']
Energy Efficiency,"The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size `dt` is actually good. It ideally should converge to something as the step size goes to zero. QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances. For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here. Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508:226,adapt,adaptive,226,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508,1,['adapt'],['adaptive']
Energy Efficiency,"What do you think is more efficient than doing; ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```; ?. I'm saying that to do each state independently, `mesolve` and `sesolve` have to independently integrate each state, so even if we added this functionality into those functions directly, it would be little more than that loop I just wrote if you have used the tools I described in the first comment. If you want the entire system propagator, `qutip.propagator` can calculate that for you. Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple, but if you have very specific domain knowledge of your system, you often will be able to write an integrator which is faster for your cases, rather than the full general-purposes ones in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465:26,efficient,efficient,26,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465,1,['efficient'],['efficient']
Energy Efficiency,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:1068,reduce,reduce,1068,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,1,['reduce'],['reduce']
Energy Efficiency,"antum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple pulse scheduling, e.g.; > Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other soft",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:2023,schedul,schedule,2023,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['schedul'],['schedule']
Energy Efficiency,"cal. ; (And in quantum mechanics negative values is not much different from any other complex value.). On 26 Apr 2014, at 18:55, Robert Johansson notifications@github.com wrote:. > OK, I see. complex_array_to_rgb could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function matrix_histogram_complex. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from matrix_histogram_complex you get something like; > ; > x = np.linspace(-5, 5, 100); > X, Y = np.meshgrid(x,x); > Z = X + 1j \* Y; > cdict = {'blue': ((0.00, 0.0, 0.0),; > (0.25, 0.0, 0.0),; > (0.50, 1.0, 1.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'green': ((0.00, 0.0, 0.0),; > (0.25, 1.0, 1.0),; > (0.50, 0.0, 0.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'red': ((0.00, 1.0, 1.0),; > (0.25, 0.5, 0.5),; > (0.50, 0.0, 0.0),; > (0.75, 0.0, 0.0),; > (1.00, 1.0, 1.0))}; > ; > cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); > norm = mpl.colors.Normalize(-pi, pi); > colors = cmap(norm(np.angle(Z))); > colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(); > ; > plt.imshow(colors, interpolation='none');; > which produces the following map of the complex plane:; > ; > compared to; > ; > plt.imshow(complex_array_to_rgb(Z), interpolation='none');; > which produces; > ; > Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41480460:1410,green,green,1410,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41480460,1,['green'],['green']
Energy Efficiency,"ded in a similar way to Julia. Say you want to define `matmul` between `Dense` on the left and `CSR` on the right to produce a `CSR` output (a specialisation that we likely won't ship with because it's unlikely to be efficient). You'd write your function; ```python; def matmul_dense_csr_csr(left, right):; ...; return out; ```; and then because unlike Julia it's not built-in, you just manually add it to the dispatch table for `matmul`:; ```python; qutip.data.matmul.add_specialisations(matmul_dense_csr_csr, (Dense, CSR), CSR); ```; QuTiP then knows about it, so it'll get used when appropriate. You can also add entirely new types to the dispatch table by adding them to the ""cast"" table `qutip.data.to`, giving at least one method to convert the new type into an already-known one, and at least one method to convert an already-known type into the new type. QuTiP will then be able to use the entirely new type as `Qobj.data` for every single operation within the library (though it won't be super efficient until you add the linear algebra specialisations you use most). This actually goes a bit beyond what Julia does (at least as far as I know), because QuTiP's new system ""completes"" the dispatch table for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:5889,efficient,efficient,5889,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['efficient'],['efficient']
Energy Efficiency,"e, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. th",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:1374,schedul,schedule,1374,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['schedul'],['schedule']
Energy Efficiency,"ed features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Best; Boxi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:2107,schedul,scheduling,2107,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['schedul'],['scheduling']
Energy Efficiency,"elog. #### <code>test_krylovsolve.py</code>. * [x] We have <code>qutip.rand_herm</code> for a random hamiltonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1010,efficient,efficiently,1010,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['efficient'],['efficiently']
Energy Efficiency,"emal eigenvalues: that is, eigenvalues with large magnitudes. In particular, using which = 'SM' may lead to slow execution time and/or anomalous results. A better approach is to use shift-invert mode."". See also the example on that page. I tried using the 'shift-invert mode' as suggested, and that gave better results. But, they are still pretty bad for the problem I want to solve: I'm trying to find the low lying spectrum for a very large Liouvillian, as I vary a single external Hamiltonian parameter. The smallest one (in magnitude) is always zero, and all others are negative. Supposedly, the vanishing of the real part of the eigenvalue with the second largest (closest to zero) real part can be useful for characterizing phase transitions, see, for example, this recent paper: http://prl.aps.org/abstract/PRL/v110/i15/e150401. I attach a plot where I have computed the eigenvalue with second largest real part (which is also the one with second smallest magnitude; the two criteria coincide) using 1) scipy.linalg.eigvals (green line) and 2) scipy.sparse.linalg.eigs (blue line): https://dl.dropboxusercontent.com/u/6042643/liouvspec.png. As you can see, the results from the sparse solver are pretty poor (I assume the dense solver results are correct). . As far as the physics goes: Another thing to notice is that the system goes through phase transitions at -2.0, 0.5 and 2.0 for the parameter along the x-axis, and there are no signs of that in the plot. On a side note, I also wasn't able to reproduce Fig 2(a), middle panel, of the PRL paper I linked to, although I got qualitative agreement if I tried with different parameters than what is quoted in the figure caption. Do you by any chance happen to have any experience with this way of characterizing dynamical phase transitions?. I might try to make a simpler example illustrating the problem later. The Liouvillian I am considering now is too big to use as an example, as using the dense solver requires a huge amount of memory.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/16#issuecomment-16416062:1363,green,green,1363,https://qutip.org,https://github.com/qutip/qutip/issues/16#issuecomment-16416062,1,['green'],['green']
Energy Efficiency,"er the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit thick here because I understand the overall idea of the code but somehow I am not confident it will be easy for others to understand on first read. Do you think we can make it a bit more transparent how the `_qfunc_alpha_matrix` works and that the crux of the method is computing the operators `coherent_dm` in an efficient way and saving them? If I have understood the code correct, I could try to document it a bit more and simplify it. . Let me know your thoughts and correct me if I misunderstood something @jakelishman @Ericgig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:2444,efficient,efficient,2444,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['efficient'],['efficient']
Energy Efficiency,"ever, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make sense on quantum objects, which are arrays only as an implementation detail - the `Qobj` class is meant to represent an abstract linear algebra object, not specifically a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (m",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:4838,adapt,adaptive,4838,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['adapt'],['adaptive']
Energy Efficiency,"ex_array_to_rgb` could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function `matrix_histogram_complex`. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from `matrix_histogram_complex` you get something like. ```; x = np.linspace(-5, 5, 100); X, Y = np.meshgrid(x,x); Z = X + 1j * Y; cdict = {'blue': ((0.00, 0.0, 0.0),; (0.25, 0.0, 0.0),; (0.50, 1.0, 1.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'green': ((0.00, 0.0, 0.0),; (0.25, 1.0, 1.0),; (0.50, 0.0, 0.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'red': ((0.00, 1.0, 1.0),; (0.25, 0.5, 0.5),; (0.50, 0.0, 0.0),; (0.75, 0.0, 0.0),; (1.00, 1.0, 1.0))}. cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); norm = mpl.colors.Normalize(-pi, pi); colors = cmap(norm(np.angle(Z))); colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(). plt.imshow(colors, interpolation='none');; ```. which produces the following map of the complex plane:. ![complex-plane-2](https://cloud.githubusercontent.com/assets/1198183/2809239/c3f6c3cc-cd61-11e3-83a1-cc4fff3f303c.png). compared to. ```; plt.imshow(complex_array_to_rgb(Z), interpolation='none');; ```. which produces. ![complex-plane-1](https://cloud.githubusercontent.com/assets/1198183/2809256/29caad3e-cd63-11e3-8e7a-3187afc2744f.png). Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to interpret.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41473950:1865,green,green,1865,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41473950,1,['green'],['green']
Energy Efficiency,"h was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring the circuit compiler to allow simple pulse scheduling,; > > e.g. Restriction one pulses that can be turned on at the same time.; > > - Features to perform error mitigation techniques in QuTiP, such as; > > zero-error extrapolation.; > > - APIs to allow import qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:5529,schedul,schedule,5529,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['schedul'],['schedule']
Energy Efficiency,"ing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or `pytest -m ""mark logic""` (e.g. `pytest -m ""not slow""`) to hit specifically marked tests. Perhaps most powerfully, and one I use a lot when writing these, you can do `pytest -k ""substring logic""` to run every test (potentially in the specified file(s)) that contains the elements specified in `""substring logic""`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:3042,power,powerfully,3042,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['power'],['powerfully']
Energy Efficiency,"ion to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there are special_value_kind args given, these are replaced with an arg `{name:value}` with the `value` being the value of the special_value_kind at time t. We should use internal flags (attribs) to control the special_value_kind processing, This will be more efficient than checking the args dict at every time step for special_value_kind keys, e.g.; - `_state_vec_key`: default `None`, or string key to the arg element. So, unless I have missed something regarding the importance of `**args`, then I think this plan covers what we need and makes everything a bit simpler, which is always good.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:2542,efficient,efficient,2542,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['efficient'],['efficient']
Energy Efficiency,"ip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:7677,power,power,7677,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['power'],['power']
Energy Efficiency,ist ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj norm ... ok; > > > Qobj permute ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops pre,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:6697,power,power,6697,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['power'],['power']
Energy Efficiency,"m any other complex value.). On 26 Apr 2014, at 18:55, Robert Johansson notifications@github.com wrote:. > OK, I see. complex_array_to_rgb could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function matrix_histogram_complex. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from matrix_histogram_complex you get something like; > ; > x = np.linspace(-5, 5, 100); > X, Y = np.meshgrid(x,x); > Z = X + 1j \* Y; > cdict = {'blue': ((0.00, 0.0, 0.0),; > (0.25, 0.0, 0.0),; > (0.50, 1.0, 1.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'green': ((0.00, 0.0, 0.0),; > (0.25, 1.0, 1.0),; > (0.50, 0.0, 0.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'red': ((0.00, 1.0, 1.0),; > (0.25, 0.5, 0.5),; > (0.50, 0.0, 0.0),; > (0.75, 0.0, 0.0),; > (1.00, 1.0, 1.0))}; > ; > cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); > norm = mpl.colors.Normalize(-pi, pi); > colors = cmap(norm(np.angle(Z))); > colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(); > ; > plt.imshow(colors, interpolation='none');; > which produces the following map of the complex plane:; > ; > compared to; > ; > plt.imshow(complex_array_to_rgb(Z), interpolation='none');; > which produces; > ; > Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to interpret.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41480460:2270,green,green,2270,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41480460,1,['green'],['green']
Energy Efficiency,"or: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjPower; assert_equal(all(q3.data.todense() - matrix(data) *_ 3), 0); File ""/usr/lib/python2.7/dist-packages/numpy/testing/utils.py"", line 317, in assert_equal; raise AssertionError(msg); AssertionError: ; Items are not equal:; ACTUAL: True; DESIRED: 0. ---. Ran 221 tests in 256.712s. FAILED (SKIP=1, errors=1, failures=1)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:12406,power,power,12406,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['power'],['power']
Energy Efficiency,"ospection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there are special_value_kind args given, these are replaced with an arg `{name:value}` with the `value` being the value of the special_value_kind at time t. We should use internal flags (attribs) to control the special_value_kind processing, This will be more efficient than checking the args dict at every time step for special_value_kind keys, e.g.; - `_state_vec_key`: default `None`, or string key to the arg element. So, unless I have missed something regarding the importance of `**args`, then I think this plan covers what we need and makes everything a bit simpler, which is always ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:1867,efficient,efficient,1867,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['efficient'],['efficient']
Energy Efficiency,"ossible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple pulse scheduling, e.g.; > Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages or; > commonly used language e.g. through quantum assembly language (qasm); > ----------------------------------------------------------------; >; > Best; > Boxi; >; > From: Nathan Shammah<mailto:notifications@github.com>; > Sent: Tuesday, February 25, 2020 8:36 AM; > To: qutip/qutip<mailto:qutip@noreply.github.com>; > Cc: Boxi Li<mailto:etamin1201@gmail.com>; Author<mailto:; > author@noreply.github.com>; > Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:2793,schedul,scheduling,2793,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['schedul'],['scheduling']
Energy Efficiency,"ream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:1181,efficient,efficiently,1181,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['efficient'],['efficiently']
Energy Efficiency,"rget_state); print('Correct: {}'.format(numpy_fidelity)); print('Still correct: {}'.format(qutip_good_fidelity)); print('Wrong: {}'.format(qutip_bad_fidelity)). # Correct: 0.9999999999849929; # Still correct: 0.9999999999849929; # Wrong: 1.0000000026189553; ```. The problem is clearly in the fact that you compute the fidelity of ket states by converting them into density matrices and using the general formula:; https://github.com/qutip/qutip/blob/564c987bdca385ae179730d0aad7b0d1e624e14d/qutip/metrics.py#L88-L113. This is fine in general, but can be very inefficient for large states, and is less numerically stable. An easy solution is to just compute the fidelity as the inner product when both states are kets. Moreover, the general formula might also be improvable: consider the following example (which uses the variables defined in the previous snippet):. ```; final_dm = qutip.ket2dm(final_state); target_dm = qutip.ket2dm(target_state); sqrt_final_dm = final_dm.sqrtm(); sqrt_target_dm = target_dm.sqrtm(); eig_vals = (sqrt_final_dm * target_dm * sqrt_final_dm).eigenenergies(); bad_fid = np.sqrt(eig_vals[eig_vals > 0]).sum(). prod_sqrt = (sqrt_final_dm * sqrt_target_dm); better_fid = scipy.linalg.svdvals(prod_sqrt.full()).sum(). print('bad fid: {}'.format(bad_fid)); print('better fid: {}'.format(better_fid)). # bad fid: 1.000000072436338; # better fid: 0.9999999999849937; ```; Here, I'm proceeding similarly to what qutip currently does, by converting to dms and then applying the general formula. However, I compute the general fidelity by summing the singular values of $\sqrt\rho \sqrt\sigma$, instead of summing the square roots of the eigenvalues of $\sqrt\sigma \rho \sqrt\sigma$. Mathematically, this is equivalent, and in this particular case does at least give a physical fidelity. It does however require to compute the square root of both matrices (though it saved one matrix product), so I honestly don't know whether it would work better/be more efficient in general.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/925#issuecomment-542318121:2596,efficient,efficient,2596,https://qutip.org,https://github.com/qutip/qutip/issues/925#issuecomment-542318121,1,['efficient'],['efficient']
Energy Efficiency,"s tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the tests that are being ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:984,adapt,adapted,984,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['adapt'],['adapted']
Energy Efficiency,"s_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162) being a particular example. In particular, the interface we define there is strictly for a single time step, makes no reference to `tlist` and we use ``H=[H0, [H1, u]]`` where `u` is a scalar for that particular timestep. However, I can easily write a wrapper around an `mesolve` that would work something along the lines of the pseudo-code from https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563:. ~~~; for (i, state) ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:3243,adapt,adapt,3243,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['adapt'],['adapt']
Energy Efficiency,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:3310,efficient,efficient,3310,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['efficient'],['efficient']
Energy Efficiency,"t to think that the unphysical part goes away when two baths are added [1], one with $+i\Omega$ and the other with $-i\Omega$. > However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. You are very much in the right to be absolutely sure before making a change. As far as I understand and have tested, it will not change the real case because the changes are as follows (I have removed all the other lines in between for clarity):. ```python; - ck_real = [np.real(eta) for eta in eta_p]; + ck_real = [eta for eta in eta_p]. - ck_imag = [np.imag(eta_p[0])]; + ck_imag = [-lam*gamma]. - eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0) - 1.0j)]; + eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0))]; ```; if `gamma` is real, `lam * gamma * self._cot(gamma * beta / 2.0)` would be real, and hence `ck_real` would stay the same as before, and the same can be said for `ck_imag`. After all, this is how it is done for `DrudeLorentzBath`, so it should not impact anything. > A more ""complete"" and probably more efficient solution would be to add a whole new ShiftedDrudeLorentzBath, and to put in analytically derived formulas for the Matsubara / Pade expansion coefficients. (As a first step, you could also calculate these coefficients manually and create a BosonicBath object from them directly.). This is what I have been using locally. I have made a `ShiftedDrudeLorentzBath` and have done exactly what you said. I raised this issue to point out a possible extension of use cases with `DrudeLorentzPadeBath`. [2] T. Kramer, M. Noack, A. Reinefeld, M. Rodríguez, and Y. Zelinskyy, “Efficient calculation of open quantum system dynamics and time-resolved spectroscopy with distributed memory HEOM (DM-HEOM),” Journal of Computational Chemistry, vol. 39, no. 22, p. 1779, Jun. 2018, doi: [10.1002/jcc.25354](https://doi.org/10.1002/jcc.25354).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274:2315,efficient,efficient,2315,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274,1,['efficient'],['efficient']
Energy Efficiency,"tigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring the circuit compiler to allow simple pulse scheduling,; > > e.g. Restriction one pulses that can be turned on at the same time.; > > - Features to perform error mitigation techniques in QuTiP, such as; > > zero-error extrapolation.; > > - APIs to allow import quantum circuits from other software packages; > > or commonly used language e.g. through quantum assembly language (qasm); > >; > > ------------------------------; > >; > > Also, the last outcomes have some overlap with the last project. Although; > > I also find this circuit importation very important, I guess two projects; > > should not have overlap if they are both selected.; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <; > https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA; > >,; > > or unsubscribe; > > <; > https://g",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:6321,schedul,scheduling,6321,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['schedul'],['scheduling']
Energy Efficiency,"tonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1112,efficient,efficiently,1112,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['efficient'],['efficiently']
Energy Efficiency,"w the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed exper",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2123,power,powerful,2123,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['power'],['powerful']
Integrability," + Periodic system Hamiltonian as :class:`QobjEvo`. List of; > + [:class:`Qobj`,:class:`Coefficient`] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; >; > ⬇️ Suggested change; >; > - Taulist:*list* / *array*; > + tlist: *list* / *array*; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610938>:; >; > > + H : :class:`Qobj`,:class:`QobjEvo`,:class:`QobjEvo` compatible format.; > + Periodic system Hamiltonian as :class:`QobjEvo`. List of; > + [:class:`Qobj`,:class:`Coefficient`] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; > + List of times for :math:`t`.; > +; > + T : float; > + The period of the time-dependence of the hamiltonian.; > +; > + c_ops_and_rates : list of :class:`qutip.Qobj`.; > + List of lists of [collapse operator,collapse operator rate] pairs; >; > ⬇️ Suggested change; >; > - List of lists of [collapse operator,collapse operator rate] pairs; > + List of lists of [collapse operator, collapse operator rate] pairs; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245611168>:; >; > > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:5425,depend,dependence,5425,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependence']
Integrability," 2020 project ""Error mitigation; > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > Wiki page. I post it here so if anyone finds it nice could copy it to the; > Wiki page.; >; > I add some details based on the original description:; > ------------------------------; > 1. Error mitigation in QuTiP; >; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:1501,integrat,integration,1501,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['integrat'],['integration']
Integrability," Could this issue perhaps be broken into sub-tasks in some way, perhaps, in order to enable work starting on it a bit more feasible?. Also, I can see it's been labelled as a ""good first issue"" but it seems to me the definition of done (i.e., what would a PR - or a set of PRs - that would successfully address the problem entail?), with respect to the entire issue, could be clarified a bit further, and the breakdown into sub-tasks (which itself might result organically from some further discussion) might help a bit in that direction. Regarding possible approaches for handling randomness - I have to admit I've started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on tho",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1176,depend,depend,1176,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['depend'],['depend']
Integrability," Monte-carlo: Time-dependent H (func format) ... ok; > > > Monte-carlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementation",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5383,depend,dependence,5383,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependence']
Integrability," Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately, you've already done most of its setup, so the time penalties should be much less than the current system (i.e. you avoid several Kronecker products and safety checks on the time-dependence terms because you've done them once at the start). In theory, that should already work from at least 4.5 onwards, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:2229,depend,dependence,2229,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['depend'],['dependence']
Integrability," add the linear algebra specialisations you use most). This actually goes a bit beyond what Julia does (at least as far as I know), because QuTiP's new system ""completes"" the dispatch table for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:6936,interface,interface,6936,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interface']
Integrability," can't separate it out into different files, or mix it with other code (say additional implementations). I'm definitely not a lawyer, but I'm worried that will cause us code organisation problems in the future, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of li",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:1895,interface,interface,1895,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['interface'],['interface']
Integrability," excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand 2 to N (using swap) ... ok; gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; gates: expand 3 to 3 with permuTation (using toffoli) ... ok; gates: swap gate ... ok; qutip.tests.test_gates.TestGates.test_are_cliffords ... ok; qutip.tests.test_gates.TestGates.test_clifford_group_len ... ok; Graph: Graph Degree ... ok; Graph: Breadth-First Search ... ok; Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:8532,depend,dependent,8532,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability," in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > > Wiki page. I post it here so if anyone finds it nice could copy it to the; > > Wiki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:5142,integrat,integration,5142,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['integrat'],['integration']
Integrability," is ok when all operations are like `matmul(CSR, CSR) -> CSR`, but which file should the operation `matmul(CSR, Dense) -> COO` go into? Much easier to find what you're looking for if all `matmul` functions are together, and then setting up the dispatcher will be the last item in the `matmul` file. It also means the files stay a bit smaller and easier to manage within themselves - you're less likely to ""lose"" code when each module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exac",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:1415,rout,routine,1415,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['rout'],['routine']
Integrability," it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1183,message,messages,1183,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['message'],['messages']
Integrability," module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exactly what I was doing. 6. Yeah, I'm going to add additional `imul`, `ineg` and `idiv` routines as dispatched operations. 7. LAPACK/BLAS as far as we can. I've no pretense to being able to write faster code than hardware-specific optimised stuff for matrices. I haven't actually written most of the numerical code in this PR either - it's just ported from current `qutip`, with the variable names changed to be more descriptive.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:2508,rout,routines,2508,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['rout'],['routines']
Integrability," of `__qutip_qobj_interface__`, as in the conversion it might be necessary to copy anyway so the downstream implementor is responsible for taking care of the copy if requested. ```python; class QobjMetaclass(type):; def __call__(cls, inpt=None, dims=None, shape=None,; type=None, isherm=None, copy=True,; fast=False, superrep=None, isunitary=None):. if isinstance(inpt, Qobj):; pass; elif hasattr(inpt, ""__qutip_qobj_interface__""):; inpt_data = inpt.__qutip_qobj_interface__(copy=copy). inpt = inpt_data['matrix']; dims = inpt_data['dims']; copy = False. obj = cls.__new__(cls, inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); obj.__init__(inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); return obj. class Qobj(object, metaclass=QobjMetaclass):; ...; ```; I'm quite sure this implementation can be improved, however. On the NetKet side, the implementation is very simple. At the moment we only support operators from H->H.; ```python; class AbstractOperator:; ... ; def __qutip_qobj_interface__(self, dims, copy=True):; return {'matrix': stacked_rows_to_stacked_cols(self.hilbert, self.to_sparse()),; 'dims': [list(self.hilbert.shape), list(self.hilbert.shape)]}; ```. This already is quite nice and allows for quick and simple interoperability. Some comments/questions:; - Qutip uses stacked columns (column major) ordering for the tensor products, as opposed to NumPy `kron` ordering that is stacked rows, right? ; - To signal that an object is a super-operator (Liouvillian) is it sufficient to pass a correctly constructed `dims` or I should also provide `superrep`?; - Is there a reason you don't accept tuples as inputs to `basis(dims, x)` and other similar functions, but only lists? ; - I played around with auto-converting input hamiltonians and jump operators in `qutip.sesolve` and `mesolve` to `Qobj` if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601:1668,interoperab,interoperability,1668,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601,2,"['interface', 'interoperab']","['interface', 'interoperability']"
Integrability," right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:3823,interface,interface,3823,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,4,"['integrat', 'interface']","['integrator', 'integrators', 'interface']"
Integrability," says that its argument should be; > An array, any object exposing the array interface, an object whose `__array__` method returns an array, or any (nested) sequence. and `__array_wrap__` is like the reverse - it's for coercing numpy arrays back into this class. If we were to keep `__array__` in `Qobj`, we should also implement `__array_wrap__` for coercion back (something that isn't currently implemented). At the time and up to inclusively 1.19, the presence of `__array__` caused otherwise scalar types passed alone to `np.array` to return the output of `input.__array__(*args, **kwargs)`, instead of becoming a 0D numpy array (like `np.array(1)` does). Taken purely alone, that could make sense as something we implement. However, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make sense on quantum objects, which are arrays only as an implementation detail - the `Qobj` class is meant to represent an abstract linear algebra object, not specifically a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:4134,interface,interface,4134,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interface']
Integrability," since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent ch",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5991,integrat,integrate,5991,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Integrability," surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9901,integrat,integrator,9901,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['integrat'],"['integrator', 'integrators']"
Integrability," there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy transitive equality (i.e. `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1239,wrap,wraps,1239,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['wrap'],['wraps']
Integrability," time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7069,integrat,integrate,7069,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Integrability," trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1969,message,message,1969,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,2,"['interface', 'message']","['interface', 'message']"
Integrability," x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an issue with QuTiP. I suspect it isn't an issue with `scipy` either, but I'm not sure - it looks like a slight overwrite in MKL on macOS, though it's also possible that `scipy` passes some invalid pointers when dropping down to BLAS/LAPACK. I get the impression that the next steps involve dropping down a level of abstraction, down to Cython to directly call scipy's wrappers, or even fully down to C and link directly against MKL. I _may_ have a look in the future, but I've had enough of it today for sure.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:8331,wrap,wrappers,8331,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['wrap'],['wrappers']
Integrability,"+ self.Rt_timedep_pairs = []; > + for idx, key in enumerate(RateDic.keys()):; > + if key != 0.0:; > + self.Rt_timedep_pairs.append(list([Rate_Qobj_list[idx],; > + 'exp(1j*' + str(; > + key * list(Hargs.values())[0]); > + + '*t)'])); > + self.Rt_timedep_pairs = [list([Rate_Qobj_list[idx],; >; > This is defined twice...; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245675791>:; >; > > + time_sense=0,; > + quicksolve=False,; > + options=None):; > + """"""; > + Parameters; > + ----------; > +; > + H : :class:`Qobj`,:class:`QobjEvo`,:class:`QobjEvo` compatible format.; > + Periodic system Hamiltonian as :class:`QobjEvo`. List of; > + [:class:`Qobj`,:class:`Coefficient`] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; >; > Since time dependent c_ops not being supported is the exception, it would; > be nice to have a note in this regard.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245633903>:; >; > > + List of lists of [collapse operator,collapse operator rate] pairs; > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-independent/most strict; > + secular approximation.; > +; > + quicksolve: Boolean; >; > The function does not seems to use it...; >; > —; > Reply to this email directly, view it on GitHub; > <ht",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:14691,depend,dependent,14691,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependent']
Integrability,", but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density ma",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6359,integrat,integrator,6359,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Integrability,", hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7364,integrat,integrate,7364,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Integrability,". We can also fix QuTiP library code by removing all times we try and put `Qobj` inside numpy arrays on our end, which would also be a fix. I've actually mellowed on my total opposition to `Qobj.__array__`. Thinking more, I'm not actually super unhappy with the idea of deprecating `Qobj.full()` in QuTiP 5.0 (not removing until at least 6.0, since it's such a major function) and promoting `np.array(qobj)` to be the de jure method of getting the dense array out of a `Qobj`. Qiskit recently (Qiskit/qiskit-terra#5402) changed their behaviour to do something very similar to this. You still wouldn't be able to put `Qobj` into numpy arrays except by doing something like; ```python; qobjs = np.empty(3, dtype=object); qobjs[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; ```; but probably that's not _too_ much of a big deal. Leaving QuTiP as it is right now would require that anyway. My main problem is actually just with allowing ufuncs and other numpy interfaces to act directly on `Qobj` without an explicit conversion step, because it promotes the idea that it's ok to act elementwise on a `Qobj`. I don't think we should allow ufuncs at all - `Qobj` is not meant to be like an `ndarray` and ufunc semantics don't make sense. We can set `Qobj.__array_ufunc__ = None` and `Qobj.__array_function__ = None` to disable numpy functions acting on `Qobj` directly. Example with this in place:; ```python; >>> import qutip; >>> import numpy as np; >>> np.array(qutip.qeye(2)); array([[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]); >>> np.array([qutip.qeye(2), qutip.qeye(2)]) # Not ideal, but not our fault.; array([[[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]],. [[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]]); >>> np.sin(qutip.qeye(2)); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); >>> np.sin(np.array(qutip.qeye(2))); array([[0.84147098+0.j, 0. +0.j],; [0. +0.j, 0.84147098+0.j]]); ```; Alternatively, if people _r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:1256,interface,interfaces,1256,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interfaces']
Integrability,".. ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (OO) ... ok; control.pulseoptim: Hadamard",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2859,depend,dependent,2859,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability,"/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x1031237",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:6794,message,message,6794,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['message'],['message']
Integrability,"4-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:8659,message,message,8659,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['message'],['message']
Integrability,"; >; > This is defined twice...; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245675791>:; >; > > + time_sense=0,; > + quicksolve=False,; > + options=None):; > + """"""; > + Parameters; > + ----------; > +; > + H : :class:`Qobj`,:class:`QobjEvo`,:class:`QobjEvo` compatible format.; > + Periodic system Hamiltonian as :class:`QobjEvo`. List of; > + [:class:`Qobj`,:class:`Coefficient`] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; >; > Since time dependent c_ops not being supported is the exception, it would; > be nice to have a note in this regard.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245633903>:; >; > > + List of lists of [collapse operator,collapse operator rate] pairs; > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-independent/most strict; > + secular approximation.; > +; > + quicksolve: Boolean; >; > The function does not seems to use it...; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2186#pullrequestreview-1502921416>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AV5WL5AGKQRG75CR5YOQUD3XNSCP7ANCNFSM6AAAAAAZWI6GRQ>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:15278,depend,dependent,15278,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependent']
Integrability,"; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2803,depend,dependent,2803,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability,"> * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:295,message,message,295,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,1,['message'],['message']
Integrability,"> * What is the reason that the time-dependent weights are still part of the trajectory result? That seems a bit inconsistent to me and I wonder if the `TrajectoryResult` class could perhaps just be removed?. The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I will look into it this week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851:37,depend,dependent,37,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851,2,['depend'],['dependent']
Integrability,"> 1 - we can't have proper namespacing, but let's at least make the magic name __qutip_qobj__ so we realistically prevent any chance of a clash. I think this is a good idea. Indeed jax uses the same trick (they define the `__jax_array__` interface). While I think that Qobj is a very qutip-like principle, I see no problems in namespacing. > 2- having the check in __init__ . Again, I think that your observation is right. I thought about it only after I submitted the post above. The way numpy does it is that `__array__(self, dtype)` takes only one argument, but I think we can do better and better respect the API set by qutip. ; That is why I was suggesting that `object.__qutip_qobj__` should not return a Qobj directly, but rather the data needed by QuTiP to construct a Qobj, and qutip should be free to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : arra",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:238,interface,interface,238,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,1,['interface'],['interface']
Integrability,"> @cgranade When we initially talked about this, we also spoke about storing Kraus superoperators with it, but it's not completely clear to me whether this route covers that case. ""No"" is fine (we don't have to make this work for everything) but if the answer is ""Yes"" or ""Maybe"", what would that look like?. At the moment, no. Following our discussion, it sounded like separating the two features may make the most sense such that I wanted to focus first on representing instruments. > > I've played around with using if_ to compute the noisy channel one gets for state teleportation when operations are perfect but classical outcomes get scrambled; would that be useful, perhaps?; > ; > That sounds like a great example!. Awesome, I'll go add that as a draft PR to the notebooks repo, then, so as to develop both in parallel. > > Fair enough, easy to drop that as well. Would you want everything dropped, or would some things like the core type QInstrument itself be reasonable to keep in qutip.**all**; > ; > Let's keep QInstrument in since that feels at the same level as Qobj and QobjEvo and we can think about other things on a case by case basis (and see what v5 is doing). Sounds good, will do!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951361876:156,rout,route,156,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951361876,1,['rout'],['route']
Integrability,"> General comment about plotting on the Bloch sphere:; > ; > QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are _not_ required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix.; > ; > There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested.; > ; > I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now.; > ; > I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling.; > ; > My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though. Thanks a lot, Simon (@hodgestar). My modification to the bloch.py follows what you have suggested. ; Also, the code can plot arcs inside and outside the bloch sphere too, and the line segment can be drawn between any two points. And the inputs have to be in cartesian coordinates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018:1044,interface,interfaces,1044,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018,1,['interface'],['interfaces']
Integrability,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:918,depend,dependent,918,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['depend'],['dependent']
Integrability,"> I ran some comparisons to the old version, and everything looks good. There seems to be some speedup both to the RHS construction and the ODE solver for most cases. Thanks! I've now streamlined things a little more, so they might be slightly faster still. > Since each individual ADO is naturally a Qobj, having HierarchyADOsState store them an array or list of Qobjs makes sense I guess. I've put this down in the v5 TODO list (just to draw a line under this PR). > 2. How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). I ended up always calling `e_ops` functions with `f(t, ado_state)`. This is a bit different to other solvers, but makes what the HEOMSolver considers the evolution state consistent. The density matrix part of the state is available as `ado_state.rho` so it's not a big hardship to retrieve just the system state. >> 3. Recheck the time dependent case.; > ; > From what I can see it looks good! Seems like basically you treat the entire RHS as an effective qobjevo? I ran through various > examples, and couldn't find any issues!. I simplified things a bit further. In the time-dependent case the RHS matrix is calculated without adding the Liouvillian to the diagonal and then the kron of the Liouvillian is added to the RHS at the end, resulting in a simpler QobjEvo. >> 4. The HEOM can't really take new QObjEvo arguments each time run is called because calculating the RHS again is quite expensive. Maybe something can be done?. Arguments are supported now because the full RHS is a QobjEvo!. >> 5. Compare performance to the HEOM in 4.7.; > ; > On the fermionic examples, with very-large system Hilbert space, there was a little slowdown in the RHS construction. Maybe the slowdown has gone away now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739:1003,depend,dependent,1003,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739,2,['depend'],['dependent']
Integrability,"> I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This is not the case. The answer to your question is to use `QobjEvo` as suggested. For example, here is a simple example using a fast-oscillating array function in a `QobjEvo` and a much shorter `tlist` in `mesolve`. You may need to set the solver options `nsteps`, `atol` and `rtol` to suitable values, as I have done here. ```python; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * 2.91e2 * fast_ts); # This is the behaviour you were suggesting is happening.; bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options). assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # -0.59736575; print(many_times.expect[0][-1]) # -0.59736575; print(bad_times.expect[0][-1]) # -4.5466086e-08; ```. You can see that I was able to do a successful integration with only 2 times in `mesolve`, but many in a fast-oscillating Hamiltonian. Clearly the `bad_times` version (which only has the start and end points so misses all the fast oscillation behaviour) is completely different to the other two versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525:1616,integrat,integration,1616,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525,1,['integrat'],['integration']
Integrability,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:16,integrat,integrate,16,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,9,"['integrat', 'interface']","['integrate', 'integrator', 'interface']"
Integrability,"> If this is supposed to be displayed in the Sphinx-rendered HTML instead of markdown. I think you need double backticks for the monospace font? E.g. `` ``Qobj`` ``. Yes, I do. Fixed.; ; > Does this also serve as a `guide on migrating from v4 to v5` or do we plan to have it separately somewhere else? It would be nice if we could summarize some common Error messages that one may see along with the solution/possible reasons. The error messages are what people usually type into Google search. This does serve as an initial guideline of what to expect, but I think we do also need a proper porting document like the one you mention.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633:359,message,messages,359,https://qutip.org,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633,2,['message'],['messages']
Integrability,"> Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple. For those you worked on, do they include QOC via RL ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660474276:88,protocol,protocols,88,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660474276,1,['protocol'],['protocols']
Integrability,"> The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I do think it would be good to keep the `trace` property on the trajectories, but for the purpose of calculating the weighted averages, it could perhaps be treated like the other types of weights that we have.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958:11,depend,dependent,11,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958,1,['depend'],['dependent']
Integrability,"> There is no agreement on how this should be handled yet. It's been removed from `dev.major` with the plan to restore it before the release, but the exact interface is not fixed. It certainly will not be some special keyword in args. It could be a special value, or a special parameter / method for the solver class. Actually having a method in the solver class seems better, I suppose this is why we are going towards Solvers from the simple `mesolve` function. I am going to try and rewrite my example using the Solver class. We can probably get away with having this functionality only in the new Solver class --- benefit of a major release I guess.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362:156,interface,interface,156,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362,1,['interface'],['interface']
Integrability,"> Users who makes their own SolverOptions are the base case. Using the `??solve` function with an `Options` instance and with documentation for the options items in the `Options` class, is the way in v4 and will probably stay that way for a while. Having a options not knowing about the solver let it accept bad options and typos. Also it hides the options documentation: solver's options could be in the `??solve` function, but not integrator options. The integrator was merged into the solver in v4 and is not made to be used directly by the average user. So the user should not need to know they exist to use qutip, nor refer to them directly to see which options are supported. I'm not sure I am quite following, but my thought was that options would be checked by the solver class when they are passed in. The mechanism the solver class would use for doing the check, would be to pass the description of the allowed options to the SolverOptions class, along with the options themselves. > Not sure I understand why this would be convenient, flat seems a easier to use and less confusing. Ideally the user should not need to know that there are 2 levels of options. The reason for nesting the ode options a little, is to make it clear which options might change if the ODE method changes. If one hides the structure completely, there is nothing to guide the user as to which options are related to what. E.g. If ODE method ""A"" took option ""opt1"" and method ""B"" took ""opt2"" then it's much clearer what is happening if one has to pass `""ode"": {""method"": ""A"", ""opt1"": 1}` and `""ode"": {""method"": ""B""}` than `""method"": ""A"", ""opt1"": 1"" and `""method"": ""B"", ""opt2"": 2`. In the flat case, one might accidentally have `""method"": ""B"": ""opt1"": 1` and ""opt1"" would be ignored. I am not too hung up on the exact approach for this bit though -- I just want it to be clear to the user what is going wrong, and for it to be a little be hard to options for different ODE methods clash with each other or other solve",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647:433,integrat,integrator,433,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647,2,['integrat'],['integrator']
Integrability,"> What if we rethink the approach from the beginning:; > ; > ```; > QobjEvo([op, func], args={""state"": Solver.StateFeedback(default=psi0)}); > QobjEvo([op, func], args={""e1"": SESolver.ExpectFeedback(e_op)}); > QobjEvo([op, func], args={""state"": MESolver.StateFeedback(raw_data=True)}); > QobjEvo([op, func], args={""collapse"": MCSolver.CollapseFeedback()}); > QobjEvo([op, func], args={""W"": SMESolver.WeinerFeedback()}); > ```; > ; > And we remove the `add_feedback` method. This looks great. I really like that it makes it clearer where the feedback comes from and that it is solver dependent. Removing the need to specify the feedback in two places when constructing a `QobjEvo` is really nice too. Let's do it in a separate PR though (unless you strongly want to update this one). I have a slight concern that it might be a bit complicated for users to find the feedback classes (e.g. they have to know to import the right solver) but I'm sure we can make that nice the PR itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984:583,depend,dependent,583,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984,1,['depend'],['dependent']
Integrability,"> You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits. Yep ! That's what I thought as well..for all the single qubit gate outputs with two targets. I knew I was getting an error but was not sure why it was not the same error as both of you. It was because I was using the released version (like you predicted). . I was trying to put off installing from source for as long as I could because I would have to install conda and other dependencies manually. Now, I did get `ValuError`. Thanks !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555:489,depend,dependencies,489,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555,1,['depend'],['dependencies']
Integrability,"> `result.measurement` is not the same as `result.expect`, the measurement is an expectation value, but not of the `e_ops` but `m_ops` which are usually automatically generated from the `c_ops` and noise is added to the computed expectation value of the state of the trajectory. The noise is usually larger than the signal and makes it hard to see, but it should converge to mesolve's solution eventually.; > ; > `smesolve`'s `expect` are just the expectation value of the state of each trajectories (averaged or not depending on options) and should average to the master equation solutions with enough trajectories. Plot in cell 8 show the match is quite good. Even with enough trajectories, the numerical error from `smesolve` will be visible.; > ; > The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of a",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:517,depend,depending,517,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,2,"['depend', 'integrat']","['depending', 'integration']"
Integrability,"> thanks for the comment, I didn't know about `qutip.propagator`; > ; > > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple; > ; > cool, can i learn more about this from you?. Sorry, I don't have much experience in it myself - you'll be reading about the methods in papers/lecture note by people smarter than me. We have some tutorial notebooks about optimal control using the QuTiP optimal control package here: http://qutip.org/tutorials.html#optimal-control, which you may be able to adapt to your use case. I believe there are components in there that you can subclass so that the optimiser is RL-based rather than using standard BFGS or something else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258:160,protocol,protocols,160,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258,1,['protocol'],['protocols']
Integrability,"@BoxiLi . Yes, how to include gates in qutip is not clear to me. Many of them seems specialized so I don't think we should keep them all. Keeping only some of them could be fine but I am not well placed to choose a subset of commonly used gates and the `target` made them quite specialized. It also means that some gates will be defined in both qutip and qutip-qip. I also want all function that create `Qobj` in qutip the follow an common interface (they should all support `dtype`) and if we want these functions to also follow the qip signature, it could get somewhat complex. I think removing them and having the private functions for tests will make it easier for us on the long run. I see the use of `expand_operator` now that you explain it. I would prefer to have it in dimension.py and having users call it manually than being included in the `Qobj` creation function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262:440,interface,interface,440,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262,1,['interface'],['interface']
Integrability,"@Ericgig `.step(...)` looks like a great solution. We should definine more precisely what one is allowed to modify in between calls to `.step` and document that. Aside regarding things we have already implemented: I know -- my point is that there are many such things and we have only implemented one kind of each (for example, what kind of progress bar is appropriate is highly dependent on the environment the code is running in -- if the code is running on a server without a terminal it might be some kind of logging, inside a hypothetical QuTiP UI GUI application it might be a progress bar provided by the GUI toolkit being used, etc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358:379,depend,dependent,379,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358,1,['depend'],['dependent']
Integrability,"@Ericgig we verified the code also for spins.; The code is consistent with previous versions and it seems to run slightly faster when `e_ops` is given.; I checked the results with `mcsolve` from Qutip 4.3.1, also I checked the density matrix with respect to `mesolve` and `steadystate `. However, when the `e_ops` are not given, and the option `average_states=True`, the `mcsolve` in your version requires much more time than in the 4.3.1 case.; Please, check that this is not a machine dependent bug. ; I wrote a code which does that for a simple three spin system:; https://gist.github.com/fminga/c3e75a75dc528cb509c7d82d3eb9823b. There is, moreover, a minor inconsistency: when the option `average_states=False` and `store_final_state=True`, one would expect to obtain a set of wavefunctions, instead the code returns the density matrix at the last time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/991#issuecomment-497925627:487,depend,dependent,487,https://qutip.org,https://github.com/qutip/qutip/pull/991#issuecomment-497925627,1,['depend'],['dependent']
Integrability,"@ajgpitch, I think that instance method picking is still somewhat of an issue in python 3, (which is what I use primarily) although I could be wrong. Either way, since the current QuTiP version supports 2.7, we would need to make this backward compatible to do multiprocessing correctly, so I'm glad you agree that option 3 is best. As to dropping python2 support, I think that this would be a good idea for v5.0, since [python is dropping support for 2.7 in two years](https://legacy.python.org/dev/peps/pep-0373/), which could be close to the time that QuTiP v5 is released (depending on how long the changes take). @sahmed95, thanks for making those final changes - sorry, I had forgotten to make the docstring capitalization changes. I'm happy with the state of the module now, so go ahead and merge it. There haven't been any functional changes made to how anything works, so none of my other pull requests ([[1]](https://github.com/qutip/qutip-notebooks/pull/58), [[2]](https://github.com/qutip/qutip-doc/pull/59), [[3]](https://github.com/qutip/qutip.github.io/pull/51)) should need to be updated. In the qutip-docs PR, for the moment I've only added auto-doc documentation, but I'll add more extensive documentation before version 4.3 is released (when is the expected time frame for this?) so that people will have more to refer to when this new feature is announced. . Thanks to everyone involved in this review process for their constructive feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-386413620:577,depend,depending,577,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-386413620,1,['depend'],['depending']
Integrability,"@cgranade When we initially talked about this, we also spoke about storing Kraus superoperators with it, but it's not completely clear to me whether this route covers that case. ""No"" is fine (we don't have to make this work for everything) but if the answer is ""Yes"" or ""Maybe"", what would that look like?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-949031114:154,rout,route,154,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-949031114,1,['rout'],['route']
Integrability,"@goerz I think one of Mølmer's papers (maybe the one I have pointed out) addressed the equivalence of the two methods. Sorry, I don't have a definite paper to point out at this moment. I was actually organizing the Julia community to work on this direction (see [JuliaQuantum](http://juliaquantum.github.io)) from scratch, and hence didn't follow up the efforts in the measurement simulation within QuTiP. . When I was writing my paper on continuous measurement ([PRA, 93.023817](http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817)), I came up the argument that the former method may be more appropriate for measurement models. This is because measurements have to happen in evenly spaced time steps determined by the detector's integrating time, so it is intuitive to use a random number to judge if on each measurement step the quantum jump will happen. There may be a way to use the second method to implement the same measurement simulation model, but I didn't think too much on it. In reality, I developed another more efficient method without actually evolving the density operator in my paper to simulate continuous measurement using a set of stochastic equations for squeezing thousands of atoms' state which has not been included in QuTiP yet. Sorry I don't have more useful reference that explains this point in more details at this moment. Good luck!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-220744432:742,integrat,integrating,742,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-220744432,1,['integrat'],['integrating']
Integrability,@hodgestar . I removed the `_rhs` by changing it so the rhs is built when making the integrator instead of in `__init__`. I also simplified the way options are updated so brmesolve no longer need to overwrite `_apply_options`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940:85,integrat,integrator,85,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940,1,['integrat'],['integrator']
Integrability,"@hodgestar I've added some tests for the spin_q_function. At the moment it tests a random density matrix for three different spin values. I'm not very familiar with qutip's style for writing tests, I would normally write a test function that would also take arguments but that doesn't seem to be the norm here. We could also do something similar to the `TestHusimiQ` class of tests. I've had a look at the `spin_wigner` function as well, and I believe that had the same issue of density matrix indexing.; I've re-implemented it (and the `_rho_kq` function) and I've added details to the docstrings including relevant references.; Should I create a separate PR for this or should I expand the scope of this PR?. NB: At the moment I can't think of an easy way to test the spin Wigner function because there is no simpler/alternative definition that I am aware of to verify the implementation against.; There are simple tests such as if the imaginary part is less than some threshold (currently true), does it integrate to 1 (currently not true, not sure why).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617:1007,integrat,integrate,1007,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617,1,['integrat'],['integrate']
Integrability,"@jakelishman, about the two issues you raised:. 1. Import time related to `import qutip`; I agree with you that in order to make it frictionless for downstream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:191,interface,interface,191,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['interface'],['interface']
Integrability,"@maij The code is looking good to me. I've requested some changes and after that I'd like to do a final review, but I think we're in good shape. My thoughts on the remaining questions:. > Decide if the spin_wigner function should return only real values be default (as is currently done for the spin_q_function). I'm +1 on returning real values since the Wigner function is real valued and this is more consistent (unless you're aware of any strange cases where it might somehow not be?). > Decide whether to integrate the W function normalization in _rho_kq rather than at the top level. We divide all terms by (2*j + 1) only to end up multiplying it back out at the end which is a waste of time (_rho_kq is called d**2 times, d=2*j+1) . The benefit of leaving it as-is is that it reads like most definitions in literature. I'm +1 on sticking to the definitions in literature unless there is a measured speed penalty. `2*j + 1` likely can't be that big and the small number of arithmetic operations required is probably dwarfed by the matrix multiplications happening. . > Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). Here I would try stick as closely as possible to the previous behaviour of these functions (i.e. cases which worked before should hopefully return the same answer now) and then document clearly what the normalization factor is and how it should be added or removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186:509,integrat,integrate,509,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186,2,['integrat'],"['integrate', 'integration']"
Integrability,"@quantshah @BoxiLi @hodgestar I have wrapped up the two measurement functions in the `measure` and `measurement_statistics` function which calls the required functions based on whether `ops` is a `list of Qobjs` or a `Qobj`. Do we want the individual functions (especially POVM) to be more granular? Moreover, the docstring for the wrapper function is really clunky (given the case-wise output types). Any ideas on how to make that simpler ?(one idea is to not specify return types and only have parameters given it's bound to be clunky!). ps. I'll fix the tests all at once after we decide on the api",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844:37,wrap,wrapped,37,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844,2,['wrap'],"['wrapped', 'wrapper']"
Integrability,"Actually it probably doesn't shake out to a single time-dependent operator like I thought it might at the start. You can still do the Taylor expansion to try (you can find a similar result for 3x3 spin matrices to the 2x2 case), but there's not going to be a cancellation I thought there might have been. Right now, QuTiP doesn't support arbitrary time-dependence in collapse operators, so if you can't find a way to write it in that form, you might have to do the integration manually yourself until we've added it - the QuTiP guide [explains how QuTiP does the integration](http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642:56,depend,dependent,56,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642,4,"['depend', 'integrat']","['dependence', 'dependent', 'integration']"
Integrability,"Additionally, from looking through your comments it appears that something; definitely went weird with formatting and/or merging. I'll comb back; through and make to fix any of these issues before I request a re-review. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839:698,integrat,integration,698,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839,2,['integrat'],"['integration', 'integrator']"
Integrability,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:776,depend,dependent,776,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,1,['depend'],['dependent']
Integrability,"All builds pass, besides the build on Python 3.7 without Cython. I would still merge this PR and focus on that issue separately. . Now we need to update places where `nose` is mentioned, I found these in `qutip-doc`; - the [changelog](https://github.com/qutip/qutip-doc), ; - the instructions on the dependencies in the documentation [installation instructions](https://github.com/qutip/qutip-doc/blob/402ec10de7a314ba9f124ddac7514621e92496df/installation.rst), ; - and [development guidelines](https://github.com/qutip/qutip-doc/blob/2ffd6d1cc581e858674d43fe97a9297e9476a278/qutip_dev_contrib.md).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938:300,depend,dependencies,300,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938,1,['depend'],['dependencies']
Integrability,All of the individual terms in the dense version of the time-dependent BR solver are now tested and working. Now I need to write the codegen module. A sparse version is just a simple extension once the codegen is done.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/676#issuecomment-295576774:61,depend,dependent,61,https://qutip.org,https://github.com/qutip/qutip/pull/676#issuecomment-295576774,1,['depend'],['dependent']
Integrability,"Also, instead of adding a third entry to the nested list characterizing the time-dependence, I think the real and imag parts should be in the [1] list entry as a tuple. That way, all of the time-dependence is in a single list item. We may in the future want to add additional items to the list (e.g. on-off times for the time-dependent terms.). I also think that we should get some feedback from @ajgpitch and @cgranade. Chris has some experience with opencl, and he probably is bette suited for feedback than myself. . Another question would be the issue of maintainability. If, for some reason, you are unable to address bug issues or incompatibilities with future QuTiP versions, then can we support this large code submission without having authored it ourselves. For instance, the mcsolve_f90 routine has largely been non-maintained since Arne added it years ago.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-259879928:81,depend,dependence,81,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-259879928,4,"['depend', 'rout']","['dependence', 'dependent', 'routine']"
Integrability,"Apologies for another long delay. I'd be happy to hop on a video call sometime to discuss the design. I think the `__qutip_qobj__` interface is likely to remain fairly simple and be just:; ```python; def __qutip_qobj__(self, copy=True):; """""" Return a Qobj representation of this object. Parameters; ---------------; copy : {True, False}, default True; If True, a new independent Qobj should be returned. If False, a reference to an existing Qobj; may be returned. Returns; ----------; Qobj; The Qobj representation of this object.; """""" ; return qutip.Qobj(self._stuff, copy=copy); ```; and we can figure out how to make that work on our side. How that looks under the hood depends quite a bit on whether the `Data` object will grow `dims` support or not. We have another use case for `dims` on the data layer (a tensor network data backend that we're starting work on) but it is a bit of a philosophical shift in what the `Data` layer is, so we'll need to think carefully (e.g. all `Data` operations would have to keep track of `dims` which is a big change; and it's also a bit strange because the operations themselves are just 2D matrix operations, where dims are meaningless). @PhilipVinc I'm not sure if we discussed this before, but do you have some short code snippets showing how you see this Qobj support being used in user code? Apologies if I missed such examples elsewhere in the discussion already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-951087841:131,interface,interface,131,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-951087841,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,"As I mentioned in #853, I wonder if it's possible to completely encapsulate any use of sparse matrices to allow for different implementations, assuming a common interface. This would support both int32 and int64, as well as any other specialized implementation anyone might want to use. Obviously, this falls into the ""quite a bit of work"" category, assuming it's possible at all. Personally, I also want to clarify that in #853, I wasn't thinking clearly when I titled it ""moderately big tensor products"" (obviously, it was an insanely large product). I don't actually foresee needing anything bigger than int32. Is there a CPU-time penalty for switching to int64? If so, I would consider that more of a downside than an increase in memory usage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-382528173:161,interface,interface,161,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-382528173,1,['interface'],['interface']
Integrability,"As a comparison, here's the output of `matrix_histogram` from [the example in the _current_ build of the docs](https://qutip.org/docs/latest/guide/guide-visualization.html#visualizing-operators) (QuTiP 4.6.2):. ![QuTiP 4.6.2 guide-visualization-8](https://user-images.githubusercontent.com/5968590/122970595-06e9dc00-d386-11eb-9905-ad65f9254c0a.png). compared to the version produced by this PR:. ![this PR guide-visualization-8](https://user-images.githubusercontent.com/5968590/122970672-19641580-d386-11eb-973b-39423e53637c.png). The original certainly isn't great, but I think its defaults have produced a somewhat better result in this case. It might be worth having a look at some of the defaults here, particularly with regards to the z-axis tic labelling. While we're at it, the rainbow colour scheme is not a good choice - it'd be much better to use a diverging colourmap, and preferably something a bit more perceptually uniform. ---. I'm not completely sold on the idea that our functions should take so many different optional arguments. We return the figure and axes instances, which means anything the user can do anything that's basic matplotlib commands - we don't need to reimplement their interface. Things like the figure size, azimuth and elevation are particular examples of this - it's very simple to set them using matplotlib's interface, and we don't really provide any added benefit by having the options here. Another is the truncated colourbars: why not only accept a `cmap` argument, and allow the user to pass anything that `matplotlib.pyplot.plot` would accept? Then the interface to our function is much simplified, and the user has as much (more, even) control over the colouring.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1573#issuecomment-866187912:1207,interface,interface,1207,https://qutip.org,https://github.com/qutip/qutip/pull/1573#issuecomment-866187912,3,['interface'],['interface']
Integrability,"Firstly, just to underline @jakelishman comment. We *cannot* change the public interface unless we make a new major release. I also don't like the `.N` property, but it snuck in before my time. We could look to change this in v.5, but not before. . It seems this PR does contain some enhancements that are not part of #1209. However, @mlaguna10 did seem to make quite clear that they were already working on the issue. I believe #1209 is ready to merge, but we'll wait for @BoxiLi to confirm. . So what I suggest is that we merge #1209. @MartinSandeCosta can then merge the master into this PR and see what is left that adds to enhancement request outlined #1208. Assuming (with good reason) that there are valuable additions, then we will merge this too. Thanks everyone for contributing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345:79,interface,interface,79,https://qutip.org,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345,1,['interface'],['interface']
Integrability,"For point 2: adding marks right now will cause conflicts, but if #1181 gets merged then it'll be much simpler. The main issue is that a lot of the testing structure has changed for tests up to `test_mcsolve.py` alphabetically, and so in general the tests are just not the same. The principle is pretty straightforwards - just like #1181 introduces a `requires_cython` mark, we would add `uses_cython`, `uses_mkl` and `uses_openmp` marks. These would be even simpler to add than `requires_cython` because unlike it, they don't require any test-generation logic at all. The change would simply be to add them to `pytest.ini`, mark the requisite functions and then change the pytest invocation of the specialised test to `pytest -m ""uses_cython""` or whatever. As far as I'm aware, the only parts of their codebase which modify their behaviour based on whether `Cython` is available is `QobjEvo`. The other parts (like `brmesolve`) just don't work if Cython isn't there. The MKL tests would become very short; by my reckoning, MKL is only used by `steadystate` and `countstat`. OpenMP is much more pervasive, as `sesolve`, `mesolve` and `brmesolve` all use it, and parts which depend on those are generally the slowest tests. The short tests could just become `pytest -m ""not slow""`? That's not super speedy, but it takes about half the time, maybe. If you want more, then a good starting point is `pytest --durations=0` which will tell us which tests are the slowest (perhaps that was what you already did when marking the slow ones?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776:1173,depend,depend,1173,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776,1,['depend'],['depend']
Integrability,"General comment about plotting on the Bloch sphere:. QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are *not* required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix. There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested. I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now. I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling. My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552:1008,interface,interfaces,1008,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552,1,['interface'],['interfaces']
Integrability,"Good points. I suggest to simply remove the comment in `test_qobj`, and change to pytest in the `setup.py`. Something like what's [here](https://doc.pytest.org/en/3.0.4/goodpractices.html#integrating-with-setuptools-python-setup-py-test-pytest-runner) should work (basically changing `nose` with `pytest`). It seems however that testing it's a thorny [issue](https://github.com/pypa/setuptools/issues/1684), but these changes for the time being make the whole package at least consistent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587:188,integrat,integrating-with-setuptools-python-setup-py-test-pytest-runner,188,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587,1,['integrat'],['integrating-with-setuptools-python-setup-py-test-pytest-runner']
Integrability,"Hi @Ericgig , could you be a little more specific about what reworking the kwargs treatment would entail? Also if you could emphasize more concretely what you're looking for in updates to the notebooks and docs, that would be great. I do have some other observations.; 1. I do not get the KeyError message if I run the same jupyter notebook locally with the same versions of code as specified by version_table( ). I get another error instead, which actually seems more reasonable to me (something along the lines of 'use_precond' wasn't found in the keys of the dict, which clearly indicates that there's something off with the optional args thing).; 2. Also using mech_dms = np.asarray(mech_dms) fails, I think because it sees a Qobj instead of a real number.; 3. The direct patch to the KeyError mentioned above, based on my understanding of the code, would simply be to nest the assignment to 'max_iter_refine' in the 'info' dictionary inside a condition that checks if the solver is 'scipy'?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676:298,message,message,298,https://qutip.org,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676,1,['message'],['message']
Integrability,"Hi @VolodyaCO, thanks for reporting this!; I think the reason for `tlist` being overridden is because the result will be independent of `tlist` when the input is a steady-state. This can be seen in the following equations:; ![image](https://user-images.githubusercontent.com/57414022/121327018-5d313680-c913-11eb-9760-ca6004daca18.png); where rho is the initial state (`state0`) and H is the Hamiltonian of the system. I use the fact that rho is a steady-state to remove its temporal dependence. This derivation is simplified assuming unitary evolution (no collapse operators) but the same applies in the most general case where we include the collapse operators. This is my guess on why `tlist=[0]` is employed when using `state0=None`: the result does not depend on `tlist`. Hence, this is probably not a bug as the result should be mathematically correct. That being said, I would also expect the same output shape for the cases shown above unless explicitly mentioned in the docstring of the function. Thus, I think the way to go here is to document this behaviour in the docstring (as well as removing the t appearing in correlation_..._1t docstring) as any change in the output shape will break backwards compatibility. However, it may be worth considering whether this is the intended behaviour for QuTiP 5. I would suggest removing `state0=None` as possible input for simplicity in the maintenance and testing or at least I would make the example shown by @VolodyaCO to be consistent and have the same output. Let us see what the QuTiP admin team thinks :smile:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355:484,depend,dependence,484,https://qutip.org,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355,2,['depend'],"['depend', 'dependence']"
Integrability,"Hi @christian512, thanks for the help! I've increased `nsteps` for that particular simulation and the integration runs fine without any errors. One caveat is I have not checked the correctness of the result. . On the other hand, as soon as I tried `mesolve` on a simple Larmor precession problem, `mesolve` started either (1) throwing the typical ODE integration error or (2) integrating but producing a manifestly incorrect result (the final state is not on the Bloch sphere). The code I am using is ; ```; from qutip import * ; import numpy as np. sz = sigmaz(). init_ket = 2 ** (-1/2) * Qobj([[1], [1]]) # Bloch vector is unit x; init_dm = init_ket * init_ket.dag(). b_0 = 1; gam = 1; h_zeem = gam * b_0 * sz; h = [h_zeem]. larmor_freq = gam * b_0 ; period = 2 * np.pi / (larmor_freq); t = np.linspace(0, period / 2, 100). print(mesolve(h, init_dm, t, options=Options(nsteps=1e6)).states[-1]); ```. Which produces ; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 +0.j -263.5988765-267.24047092j]; [ -2.1425229 +0.49907152j 0.5 +0.j ]]; ```; Edit: I have also tried playing around with `atol` and `rtol` without any success.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503:102,integrat,integration,102,https://qutip.org,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503,3,['integrat'],"['integrating', 'integration']"
Integrability,"Hi @dweigand, this looks interesting. It would you be nice to push this forward, adding some tests for this and integrating @Ericgig suggested changes. I am wondering whether there is a more intuitive (explicit) option than `qfunc_amat `. Something like a Boolean `precompute`?. Writing some documentation for this, in https://github.com/qutip/qutip-doc, would allow users to discover this option more easily at http://qutip.org/docs/latest/guide/guide-visualization.html#husimi-q-function, it's very nice you have some performance checks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-536368295:112,integrat,integrating,112,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-536368295,1,['integrat'],['integrating']
Integrability,"Hi @epelofske-LANL. This behaviour in QuTiP is intentional for the following reason: If the dims of the system are `[2, 2]` then it's unambiguous how the system should be partitioned into two parts because the dims specify what the two parts. If the dims are `[4]` then one could divide the system in multiple ways depending on how one considers the four basis vectors. If one knows that the four basis states are `00`, `01`, `10`, `11`, one can override the dims by writing `dm.dims = [[2, 2], [2, 2]]` or `qutip.Qobj(dm, dims=[[2, 2], [2, 2]])`. Hope this helps. I agree this could be made more intuitive. Perhaps `maximally_mixed_dm` should allow specifying `dims` too instead of just `N`. I'm closing this issue for now, but please feel free to continue the discussion in the comments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2058#issuecomment-1384473486:315,depend,depending,315,https://qutip.org,https://github.com/qutip/qutip/issues/2058#issuecomment-1384473486,1,['depend'],['depending']
Integrability,"Hi @jakelishman you were right about the contraction, I changed the indexes as in http://qutip.org/docs/latest/guide/guide-tensor.html so that it represents a trace-like channel. On the other hand I find that mixed dimensions operator `[[m,n], [m,n ]]` appear in some of the tests that were already in place, I will try to write my thoughts on their meaning later. I am still going to refactor this a little bit more, and tell you when it is ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708:41,contract,contraction,41,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708,1,['contract'],['contraction']
Integrability,"Hi @jakelishman, I like your implementation but this will sometimes return a Qobj and other times a class instance when you call `displace()`. I am not in favour of that just out of the principle that functions should be simple and do one thing only as you also point out. . I would say if we do not want to break the user-interface, we keep the same implementation as `displace()` returning a `Qobj` (even if internally it calls the faster private `_Displace` method). . Users who want to use the class anyway can dig in and find `_Displace`. The use case here for moving to classes is rather specific and related to optimisation/control. We want to compute this operator very fast with multiple values of `alpha`, independently, on multiple cores (this was why we needed the faster implementation to run a GPU optimisation routine). Of course for sigmax(), or sigmay() we do not have any parameters to optimise and it is overkill to make them into classes. I do not suggest that at all. . I understand the inclination to be `functional`. It is how QuTiP was written and is supposed to be used, mostly. But one of the arguments for classes is that for some solvers, or operations we needed to re-use information, eg. qutip.piqs or the heom solvers where we had to make classes anyways. . I would propose just having a private `_Displace` method which is called by `displace` but not changing the output to be conditioned on `alpha`. Later on, if we incline a bit more towards classes we can make `Displace` public. Any other thoughts and opinions? @qutip/core-workers",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646667559:323,interface,interface,323,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646667559,2,"['interface', 'rout']","['interface', 'routine']"
Integrability,"Hi @sarsid, if you are going to play with it. It would be very helpful if you could give some feedback ;) Like if the doc is clear or if the interface is reasonable, or if there are any bugs. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1273#issuecomment-661857844:141,interface,interface,141,https://qutip.org,https://github.com/qutip/qutip/pull/1273#issuecomment-661857844,1,['interface'],['interface']
Integrability,"Hi Filippo,. On Wed, Apr 28, 2021 at 6:03 PM Filippo Vicentini ***@***.***>; wrote:. > However, our foundations do not prevent us to work with time-dependent; > objects.; >; > We simply will need to write the relevant class.; >; Perhaps slightly off-topic: How similar will this class look to QobjEvo? Or; do you not know yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828711218:148,depend,dependent,148,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828711218,1,['depend'],['dependent']
Integrability,"Hi Simon,. No we do not have time-dependent operators at the moment and focus on ground state/steady-state/dynamics of fixed hamiltonians or liouvillians. Actually nobody has (yet) studied with neural networks time-dependent systems as far as i know. However, our foundations do not prevent us to work with time-dependent objects. ; We simply will need to write the relevant class.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828576313:34,depend,dependent,34,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828576313,3,['depend'],['dependent']
Integrability,"Hi Subimal,. This happens because of the truncation of the Fock space. You can see a related discussion here ; https://groups.google.com/g/qutip/c/DD6z8kYUU1I/m/k48XZS1AAgAJ. But in short, with truncation there is always an error in the commutators, so for truncating the Fock states at N photons, I think you find that [a,a.dag()] = \sum_{n=0}^(N-1) |n><n| - N|N><N| (you can check this by writing out these operators as projectors onto fock states, you will notice a*a.dag() is missing a term due to the truncation that should cancel with a term in a.dag()*a). Similarly putting the creation and annihilation operators into the position/momentum definition of the Hamiltonian, you find H = sum_{n=0}^(N-1)(n+0.5) |n><n| + N/2 |N><N|. Hence, since you truncated at 9 photons in your example, there is a degeneracy of the 4.5 eigenvalue. I am not sure if there is much can be done about this in general, perhaps the discussion I linked above might be useful. The main message I suppose is always take a larger cut-off than you think you might need, particularly if you are relying on the commutation relations to simplify things for you (which, given your example, can be a bad idea some times!). . I guess there is an interesting question about what is the best practice in these things, e.g., if you have a non-linear model, what form is it best to put it in before moving to a truncated basis? given your example, I would expect something like normal ordering to be better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770:968,message,message,968,https://qutip.org,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770,1,['message'],['message']
Integrability,"Hi again. I've looked at your notebook and code in some more detail now, and I have attempted to make the change in how the rhs function behaves. I had not seen an example where the contributions form different stochastic collapse operators depended on each other before, but I now see the need for having this possibility from looking at your implementation of the Milstein implementation with multiple Wiener processes. I have created a new branch in qutip called sme-rhs-restructuring (see commit 0b4a1a7a6591aca27ff6cb71310cf73af7ae2d7f and https://github.com/qutip/qutip/tree/sme-rhs-restructuring) where I have experimented with rhs functions that internally loop through the A_ops list. In simple cases it only loops through the list and calculates a contribution for each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and par",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:241,depend,depended,241,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['depend'],['depended']
Integrability,"Hi guys,; yeah, the conflicts are because of the now merged #1224, which we knew about when we merged that one. It's a simple fix, but I'm hesitant to do it directly on this PR, depending on how we want to merge it. The simplest way is that I make the required changes, fix the merge conflict, and we keep going until this whole behemoth merges in one go. This ends up in the commit history being a bit of a mess, and it'll take ages. Instead, I think it might be better if I instead split this PR into a few different ones:; 1. add `pytest` markers and other test niceties; 2. the test files that Eric is checking; 3. the QIP-related ones so that Boxi can check those; 4. `brmesolve` tests; 5. trivially changed files; 6. whatever's left. This has the advantage that I can rebase them all individually to neaten them up with any changes suggested, and we can get parts merged in faster. PRs 2 to 6 will depend on PR 1, so this would require getting that first one merged ASAP, then the others will all be modular and can be merged in any order at any speed. If you're happy with that plan, I'll cherry-pick/rebase out the necessary bits of the history and form the new PRs. The end result will be 6 PRs, which, when merged, will have no conflicts, and will leave the repository in the exact same state it would be if this PR was merged in one lump (with the relevant conflict fixed). For each PR, then we just have a simple process:; 1. you review files; 2. I make suggested changes; 3. repeat until happy; 4. I rebase the PR to squash it into a logical form; 5. you merge",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033:178,depend,depending,178,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033,2,['depend'],"['depend', 'depending']"
Integrability,"Hi!. About the comments: yes, absolutely I'll leave more. It's a bit silly that I haven't yet, since one thing that was frustrating me previously was not understanding what was trying to be done! I think as time goes by I'm getting a bit better about being clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a goo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:775,message,messages,775,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['message'],['messages']
Integrability,"Hi, thank you very much for the quick responses and linking the other issues. . > But your making sparse matrices dense. Yes, I agree. But I was trying to just work out a simple problem which looks like. `dp[n]/dt = spre(Q)*p[n-1] + spost(Q)*p[n+1]. where p is a list of flattened density matrices. I understand that a better version of this would be to completely flatten p and write the RHS as a large `L` as Alex points out and then use `cy_ode_rhs`. But here is the issue, in the HEOM case, building `L` runs out of memory if we consider a large size for the set of auxiliary density matrices `p`. As such, I cannot completely build the `L` for the cases I am looking into. The approach that I was trying to take was to keep building the p's as we integrate. In this case, each RHS computation is a small dense matrix-vector computation and I can choose to keep or discard it depending on the max value of its elements. This gives the flexibility to truncate how many auxiliary density matrices I keep. The motivation is that in some papers on the Heom method, there is a dynamic filtering of the auxiliary matrices and it has been shown that with just a few 100s of auxiliary matrices, you can get a reasonable result. But the way we have the code in QuTiP now pre-computes the `L` and gets stuck due to memory limitations. @agpitch Thanks for the suggestions. I am trying to make the HEOM work without building the `L`. Perhaps I will still run into memory issues if I try to initialize the full set of `p` but if the dynamic filtering approach works out, then I can escape the memory problem by only building a few of the `p`'s and deciding to append them or not based on some conditions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/831#issuecomment-368980965:752,integrat,integrate,752,https://qutip.org,https://github.com/qutip/qutip/issues/831#issuecomment-368980965,2,"['depend', 'integrat']","['depending', 'integrate']"
Integrability,"Hi. Thanks for reporting this problem. I'm not sure if I'd call it a bug or not, but I understand that this behavior can be a bit confusing. With odeOpts.rhs_reuse = True the same function will be use until rhs_clear() is called, which in your case would be. qtp.rhs_clear(); qtp.propagator([H0, [Hint, '1-w*t']], 5, [], {'w':1/5.}, opt=odeOpts). when yo change the time-dependency function strings. . Maybe this needs to be emphasized more in the documentation, or perhaps rhs_clear() could be called automatrically from within propagator, but this could prevent one from really reusing the rhs function for several propagators with the same rhs function (for example with different H0 or Hint). . I'll leave this ticket open for now so we'll remember to think some more about how this issue should be handled in the best way. . Thanks again for your feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17106896:371,depend,dependency,371,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17106896,1,['depend'],['dependency']
Integrability,I agree with @jakelishman's general principle (and maybe we should even move the tests out of the `qutip` package for v5 still) but it's also really important to have an easy way for data layer implementations to run a comprehensive test suite *that is defined by the data layer*. I suspect that if anyone is running tests against master (i.e. what is currently dev.major) they will *want* tests to break if we add new methods. I have a slightly different proposal:. What if we create `qutip.core.data.testing` which is an explicitly exported suite of pytest classes that we intentionally expose for data layers to use? Initially the file can just import test classes from `qutip.tests.core.data`. I would also not use `__all__` in the individual test packages but instead import the test classes explicitly in `qutip.core.data.testing` so that it's 100% clear by reading just that file what the exported interface is (and adding new tests requires explicitly adding them into the exposed package).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874:905,interface,interface,905,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874,1,['interface'],['interface']
Integrability,"I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:; - I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; - I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:194,interface,interface,194,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462,4,"['integrat', 'interface']","['integration', 'integrator', 'interface']"
Integrability,"I believe that all permutation are run with `parametrize`. So the input (`qobj`) is compared to each outputs `(expected`), not just the matching one. Also the rotation matrix (`U = rand_unitary(3)`) must be constant. Here, at least 4 different random operators are created. Instead of `parametrize` and `yield` simply calling the function `case` would work:; ```; yield case(""Test Qobj: trunc_neg works for positive opers.""), \; rand_dm(5), method; ```; to; ```; case(rand_dm(5), method, None); ```; To keep the message, `assert_almost_equal` has a `err_msg` keyword to raise if the test fails. I do not believe the `yield` is the cause of the no cython fails. ps. I will make a branch of this PR and will add `mark` to prepare a subset of tests for faster testing #1147.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523:512,message,message,512,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523,1,['message'],['message']
Integrability,"I don't think it breaks the functional API at all - in fact it almost makes it stronger, since everything is a ""function"" at every stage. This kind of partial application is classic part of functional programming. Perhaps I don't understand _why_ you want to move to a class-based API? I'd be quite strongly against having the user have to instantiate classes to do very simple parts like creating operators. Certainly in Python programming, I don't think a class-based interface is de facto the right sort to aim for, and procedural is much more ""Pythonic"". For one, it's a lot of unnecessary boilerplate for simple operations. It adds cognitive complexity for the advanced user to decide ""should I use `displace` or `Displacer`?"", and in the strong majority of use-cases, the operator creation is not a computational bottleneck so we'd be adding it for no gain. A lot of operators have no meaningful reason to live in a class, like `sigmax` and so on, so now you have a split between operators that need a class and operators that don't, or you do something really crazy like requiring the user to do; ```python; sx_builder = qutip.operators.SigmaX(); sx = sx_builder.get_operator(); sy_builder = qutip.operators.SigmaY(); sy = sy_builder.get_operator(); sz_builder = qutip.operators.SigmaZ(); sz = sz_builder.get_operator(); ```; when all they wanted was `qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()`. Obviously that example is a bit facetious, but what benefit does the user derive from having to write boilerplate to access simple functionality?. All the operators already share a class in `Qobj`, and things like `displace` and `sigmax` are factory methods of `Qobj`. What shared functionality do the factory methods possess that means they should be classes?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332:470,interface,interface,470,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332,1,['interface'],['interface']
Integrability,"I said above):. > Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions.; ; To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. You can see that it didn't work as intended, because they've had to add `__array_function__` and other additional methods on top to start to make it work, and it's still not perfect - even `scipy.sparse` have/had problems implementing them. While it might work in your particular case, making sure that nothing funny happens in the abstract across _all_ possible implementors of the interface while still having it do something useful is a very tricky problem, as evidenced by Numpy. Any conversion is going to be lossy for some people (perhaps not you, but it will be for others), and that means the behaviour for users will be surprising in some cases. In my opinion, if we're going to have a `__qutip_qobj__` interface, the interface should be defined for one operation only, and should never be called implicitly. I'm not entirely close-minded to alternate views here, but given the problems Numpy had (whose team I have no doubt are much smarter than I am), I'm really not enthusiastic about any implicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:2630,interface,interface,2630,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,2,['interface'],['interface']
Integrability,I see. `propagator` performed better with a system of d=2^5 in a simple test. I better do some testing of even larger systems then before merging this. Any thoughts on why `propagator` might be slower also for small systems and short integration times? Some overhead related to parallelization? Thanks for the info.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-230108497:234,integrat,integration,234,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-230108497,1,['integrat'],['integration']
Integrability,I slightly edited the question to make the code easier to read. You should probably consider using the array-based format https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#methods-for-writing-time-dependent-operators. Precompute the `q_0` and `q_02` as NumPy arrays with respect to each `t` in the `t_list` using `np.gradient`. Then give them to the solver.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1834#issuecomment-1065163266:211,depend,dependent-operators,211,https://qutip.org,https://github.com/qutip/qutip/issues/1834#issuecomment-1065163266,1,['depend'],['dependent-operators']
Integrability,"I think the code ciuld be simplified for the user. The interface should be like the other solvers. E.g. no need to call odeint by hand, etc..",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332188600:55,interface,interface,55,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332188600,1,['interface'],['interface']
Integrability,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:322,depend,dependent,322,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,3,"['depend', 'integrat']","['dependent', 'integrator']"
Integrability,"I thought we had resolved the installation issues with the Fortran side by making the MC solver a optional (default to False).; I am not that I have fully digested everything in this thread, but @zerothi seems confident that there is just some small change that we need to improve integration with the latest Numpy. Its not clear to me what are the risks or other downsides.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155040632:281,integrat,integration,281,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155040632,1,['integrat'],['integration']
Integrability,"I was imagining something much simpler for the exception class. There is a backport of the exceptiongroup stuff to older Pythons that we could use if we wanted to: https://pypi.org/project/exceptiongroup/. It's another dependency, but it will mean that on Python 3.11 people could start using ExceptionGroup and `except*` immediately if they wanted to. Users on Python 3.10 and below would have to catch ExceptionGroup or use the backport's ugly `with catch(...)` mechanism. . Then, many years from now when Python 3.10 is obsolete, we could drop the backport entirely. Personally I'm in favour of the simpler `ParallelMapException` that doesn't inherit from all the other exceptions. Then when 3.11 is out we can make `ParallelMapException` inherit from `ExceptionGroup` and 3.11 users will be able to use `except*`. People supporting 3.10 and below will have to use `except ParallelMapException`, but that will work just as well on 3.11.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437:219,depend,dependency,219,https://qutip.org,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437,1,['depend'],['dependency']
Integrability,"I would like to try to build the solution for this. **Task 1:** For chrome, the error seems to be due to the CORS (Cross-origin Resource Sharing) policy of google chrome.; `Access to XMLHttpRequest at 'file:///C:/Users/Sid/Desktop/qutip-doc/QuTiP_tree_plot/d3_data/qutip.json' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.`. To fix this, I created a local server (on port 8080) from the `../qutip-doc/QuTiP_tree_plot` folder and then ran the URL `http://localhost:8082/qutip_org.html` on chrome.; Egde doesn't seemed to have any problem in running `qutip-doc.html`. **Task 2:** ; Clarification - We would right a new script to generate `qutip.json` from `apidoc/functions.rst`, just like `QuTiP_tree_plot/qutip-structure.py`. Am I right?. **Task 4:** ; Can you please elaborate on task 4 as to link to which API docs. **Task 5:**; The script written in Task 2 can be made to run for `classes.rst` and a json file would be created which would be used to generate a tree, right?; Where would we put it in the docs? guide-overview?. PS: I'm sorry if I've asked or stated an obvious thing, I am new to this community and am still trying to fimiliarize myself. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588:374,protocol,protocol,374,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588,1,['protocol'],['protocol']
Integrability,"I would write it as two separate collapse operators, just like you would do for a Hamiltonian with a constant and time-dependent term i.e. c_ops=[Op1,[Op2,’f(t)’]]. See the docs here,. http://qutip.org/docs/3.0.1/guide/dynamics/dynamics-time.html. for more info. Paul; On Sep 3, 2014, at 12:00 AM, Stefan Krastanov notifications@github.com wrote:. > What is the appropriate way to implement a colapse operator in mesolve that can not be expressed as time_dependent_function \* constant_operator (for instance Op1 + Op2*f(t))?; > ; > Is it only possible through rewriting the equation to be solved?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-54382667:119,depend,dependent,119,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-54382667,1,['depend'],['dependent']
Integrability,"I'll take a look at the merge. It seems like it might have gone bad. I'll add in some tests once I fix the merge, as well. I'll look into the diag method and try to move everything over to separate; everything as you described. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:706,integrat,integration,706,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['integrat'],"['integration', 'integrator']"
Integrability,"I'm a fan of the CodeClimate complexity tests, but I wouldn't be averse to removing its complaints about ""TODO"" comments - I'm not sure what we really gain from that in this sort of open-source development. In a business where people are working full-time then I imagine it can be worth preventing a merge to finalise some details, but in our very decentralised development, really in some cases (especially in the next major release), we do need to merge in parts of code we know to be imperfect. That said, we probably should make an effort to clear out some of the TODOs and FIXMEs that are in the codebase already. Pushed fix-up changes since last review:; - wrapped the steadystate SciPy linalg functions so they're simplified at the point of call, and unknown keywords in old SciPy versions are just silently ""eaten"" (this is the same behaviour that the file used to have, just formalised a little more).; - added `TODO` in a comment in `qutip.cy.pyxbuilder`; - changed the static class attributes in `test_superoper.py` into a `setup_method` function. *edit*: oh yeah, forgot that there were still errors in some old SciPy bits in the control module as well. I'll push a fix to that before this needs reviewing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305:663,wrap,wrapped,663,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305,1,['wrap'],['wrapped']
Integrability,"I'm sorry I don't have a huge amount of time at the moment, but just to add an extra point (that it looks like I didn't think about before): if we _do_ add this, then any method that requires an unconditional `import qutip` in downstream packages probably isn't a suitable solution - `import qutip` already takes far too long (though a lot of this is importing various parts of `scipy`, which another library might do on our behalf), and it means that they'd have to do their own import checking to handle optional dependencies. In that sense, (ab)using Python's duck-typing with a magic method might be the best way to break the dependency/import problem. I'm definitely still against implicit conversion to `Qobj` in pretty much any situation - I can imagine we could define a safe, fairly forward-compatible interface for letting people do `qutip.Qobj(x)`, but as it stands, that's the limit that I'd want the interface to be used for. I particularly am really against the idea of implicit conversion. I don't see an advantage to allowing QuTiP functions to act implicitly on other objects; it means our own functions are slower (because we have to explicitly test inputs on _everything_), and it restricts us more from improving `Qobj`'s internals, because we have to maintain compatibility with the interface. We'd never really be able to output anything _other_ than a `Qobj` without this, so there's no reason not to just have the user convert the inputs to `Qobj` explicitly themselves - that isolates the efficiency penalty so you only pay it if you need it, and it'll likely be clearer in the end anyway, because explicit is better for following the logic than implicit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301:515,depend,dependencies,515,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301,5,"['depend', 'interface']","['dependencies', 'dependency', 'interface']"
Integrability,"I've done some simple benchmarks and indeed there seems to be a nice speedup. http://nbviewer.ipython.org/gist/jrjohansson/e63daeb3a41f95f163ad. so it definitely seems worthwhile to add support for this type of time-dependence in QuTiP. But string part of the definition of H is your example can be automatically generated knowning the times array, as I did in the notebook linked above. Therefore, I wonder if it may not be even more convenient if one simply could do. ```; >>> H = [H1, [H2, pulse]]; ```. It would require a few more changes in mesolve/sesolve and in _ode_check.py, but would give a nice clean API for using arrays to define time-dependences. How do you feel about that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44613285:216,depend,dependence,216,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44613285,2,['depend'],"['dependence', 'dependences']"
Integrability,"I've had a thorough look. Simplifying the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just pr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:176,integrat,integrator,176,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,1,['integrat'],['integrator']
Integrability,"I've lost the plot a bit with a whole load of changes to `Coefficient` now merged into this PR. Is there a chance we can split that out into its own PR?. I would expect `QobjEvo.__call__` to be thread-safe/re-entrant. The fact that coefficients seemingly don't support this immediately is worrying to me. A simple call like that changing ""global"" state of the object is dangerous; it has a habit of leaking out even in single-threaded applications, just like the bug I described previously with a call to `mesolve` modifying an existing `QobjEvo` in place. In this case I don't see an immediate bug, but it's very non-obvious behaviour and it would be easy to accidentally introduce one in it in the future (or maybe I just can't think of one now). Having `_BaseElement` be mutable makes all time-dependent operations of `QobjEvo` unresolvably thread-unsafe without copying on every operation. That said, looking again, I'm not sure I understand `_BaseElement`: it seems like `_EvoElement` and `_FuncElement` do entirely different things on `call`? What's the purpose of it, and if we put all speed considerations aside what would the signature and behaviour of `_BaseElement._call` be?. Could you write some docstrings on all the elements to explain their use-cases as well, so we've got it all stored for the future?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122:797,depend,dependent,797,https://qutip.org,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122,1,['depend'],['dependent']
Integrability,"In general in pytest we use the bare keyword `assert` for almost everything. All the functions in `np.testing` are from the ""before times"", when test tooling wasn't as good as it is nowadays - they were a big improvement on available warning messages back before 2015. Nowadays, though, `pytest` does introspection on assertion failures, so it has even better message reporting than the `np.testing` functions, and it lets you write much clearer code. For example, `assert_equal(x, y)` is much better spelled in pytest as `assert x == y`, because it's much faster to read and pytest does better error reporting for it. Similarly, testing for exceptions is better with; ```python; with pytest.raises(ValueError):; call_that_raises(1, ""hello, world""); ```; as opposed to the numpy form `np.testing.assert_raises(ValueError, call_that_raises, 1, ""hello, world"")` - the pytest one is much easier to read, and the error message is better. The only numpy one we still use is `np.testing.assert_allclose` when we're comparing several numpy arrays. That's just because `pytest` doesn't have a good function that's aware of multidimensional arrays (at least not one that I know). This file still has a load of old numpy testing code in it (e.g. `np.testing.assert_equal`) because it was written quite a long time ago, when that was the recommended way of doing things. We're changing over slowly, so we can take advantage of all the nice features of pytest. In this case, I changed `np.testing.assert_allclose(x, y, atol=tol)` to `assert abs(x - y) < tol`. I removed `np.testing.assert_allclose`, because that gives the mistaken impression that we're comparing arrays (we're not, we're comparing two scalars). I could have changed it to `assert x == pytest.approx(y, tol=tol)`, except in this case the test file hasn't been converted to `pytest` style yet, and I wanted to keep the total change of this PR as small as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671:242,message,messages,242,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671,3,['message'],"['message', 'messages']"
Integrability,"In general the biggest thing you should consider is readability, and to be fair, that's a little subjective. You're welcome to comment on my PR if you think I've done anything that's unreadable. You can scope fixtures at whatever level is appropriate. In this particular case, I scoped the `dimension` fixture at the module level, because there's loads of places that needed to test varying dimensions, and it's very convenient to define it just once. In the few cases where we needed to override that (e.g. in `dnorm`), I overrode it by providing a definition in a tighter scope - either at class level or per-function (via `pytest.mark.parametrize` directly). The correct scoping just depends a lot on the type of tests you're writing - if you're going to have to overwrite something constantly then module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:687,depend,depends,687,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['depend'],['depends']
Integrability,"Interesting... You see, the gate `Gate(RY, targets=[0, 1], controls=None)` is clearly wrong because RY acts only on one qubits. I guess you are probably using a released version of QuTiP (4.5.2/3 maybe) and not the master branch. This error was hidden before in those released version. If you try to install from source (http://qutip.org/docs/latest/installation.html#installing-from-source) (which you have to if you want to contribute anyway), you will probably see this error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275:479,message,message,479,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275,1,['message'],['message']
Integrability,"It sounds great, thank you @wrzadkow. I am going to look into it. . * It would be great to add some details about it in the Users Guide, so that they show up in the [States](http://qutip.org/docs/latest/guide/guide-states.html#density-matrices) part. To do so you would need to make an .rst file in [qutip-doc](https://github.com/qutip/qutip-doc). . What actually would be much needed in a broader view is a (short) Metric subsection in the Users Guide, showing which equations are implemented in LaTeX. This is beyond this PR but your expertise might be very helpful. . Also, recently some advanced functionalities relative to metrics were developed in [Qptomographer](https://qptomographer.readthedocs.io/) @phfaist. This library optimally implements the diamond norm and uses QuTiP's classes https://qptomographer.readthedocs.io/en/latest/figures_of_merit/. It would be great to see if this can be used to address an open issue of non-maintained dependencies that @ajgpitch has been assessing, issue #874.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/998#issuecomment-494625047:949,depend,dependencies,949,https://qutip.org,https://github.com/qutip/qutip/pull/998#issuecomment-494625047,1,['depend'],['dependencies']
Integrability,"It will be useful for solver feedback.; In v4 we can define Hamiltonian to depend on the state: `H(t, args, psi/rho)`.; We don't have it working in v5, but we will need to restore it before release.; This `_prepare` catch the time and state at the start of `matmul` and `expect` and update the arguments according to feedback.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575:75,depend,depend,75,https://qutip.org,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575,1,['depend'],['depend']
Integrability,"It would be much better to thoroughly code review this pull request before merging rather than merging sooner and make additional PRs later. You can keep working on the PR while getting feedback on it without merging now. Things like model names and API is better to sort out once and for all before the first merge. . With this PR, I think the ossolve modeule name is not very appropriate. Most of qutip is related to open system solvers. I think rcsolve (reaction coordinate solver) is a more accurate name for this module. Also, depending on how much code you have in mind to include in this module, it might be more appropriate to put all of it in a file called rcsolve rather than creating a new module directory like you propose here. Also, don't use underscores in module names (rc_model -> rcmodel or better yet rcsolve).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-102566203:532,depend,depending,532,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-102566203,1,['depend'],['depending']
Integrability,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:335,message,message,335,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,2,['message'],['message']
Integrability,"Looks cool, you can make the PR against the master branch. We do not have a; dev branch. On Mon, 22 Jul 2019 at 19:14, Michael Goerz <notifications@github.com>; wrote:. > Sorry.. got a little distracted, and wanted to check the contributing; > guidelines on what branch to make the pull request against. Currently it’s; > master. Is that ok? If yes, I’ll undraft it.; >; > Draft PRs are pretty new, and a very nice way to kick off the Continuous; > Integration. Like in this case, I wanted to check if any of the tests; > involve that message. As they don’t, this actually is ready to go.; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1049?email_source=notifications&email_token=ABVFIBCN7YWP77NBJVTZA2LQAXTJDA5CNFSM4IEC7VHKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2QRIRA#issuecomment-513872964>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABVFIBHWIDKPIYAU6NMZXILQAXTJDANCNFSM4IEC7VHA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973:535,message,message,535,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973,1,['message'],['message']
Integrability,"Looks interesting! Possibly a bit out of scope for qutip? In principle you could put this progress bar in a separate module and still use it with qutip (as long as it supports qutip's basic progressbar interface). Then it could also be used in non-qutip related projects. . If its to be included in qutip, I think it should not be added to qutip/ui/progressbar, but as an module of its own that would not be loaded by default, so a user would have to load it explicitly when using it, like the way the current ipynbtools and picloud modules work. . Perhaps it would make sense to move these ""extras"" or ""extensions"" modules to a subdirectory of their own, say ""qutip/extensions"" or ""qutip/ext"" to keep the import paths manageable. In that case I think that qutip.picloud should be moved to that directory as well. I think this would keep these extensions reasonably isolated for the core qutip modules, which I think we should prioritize if we are to allow these kind of peripheral modules to increase in number in the future. @nonhermitian any opinions on this?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63268318:202,interface,interface,202,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63268318,1,['interface'],['interface']
Integrability,"Many thanks for your kind reply. Unfortunately, I can not do that, because there is cases in my hamiltonian in which that matrix is not diagonal, I am just trying from the simplest case, actually my goal is to have a term ""S_vector * D_matrix *S_vector"" . Could you please explain how I am using Qobj incorrectly and how to used right. The error message states that since S_vector is a Qobj I can not multiply it with the D_matrix. If I put Qobj(D_matrix) then I can not multiply them because all terms are Qobj.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266:346,message,message,346,https://qutip.org,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266,1,['message'],['message']
Integrability,"Most of it is already in qutip or in development:; - We already have a progress bar.; - We have feedback to support solvers where parameters are changed depending on the current state. Those should not updated at each time-step, but included in the rhs. Otherwise, it will increase runtime and often the numerical error. We mostly use multistep method (Adams and BDF) which are particularly sensible to that.; - In my rework of `mcsolve`, I'm including the capacity to stop after a certain time, (already merged) and after the error bar gets under a certain tolerance. I have not though an equivalent for `me/sesolve` would be needed but it would be simple enough to add. We could have function that takes the expect value and tell the solver to stop or continue. ; - I was thinking of adding the ability to step through the evolution (draft in #1455):; ```; solver = MeSolver(H, c_ops, options=opt); solver.start(t0, rho0); for t in [t1,t2, ...]:; rho_t = solver.step(t, args=new_args); ```; Which would work like a `yield`:; ```; solver = MeSolver(H, c_ops, options=opt); for rho_t in solver.yield_run(rho0, tlist):; if needed:; solver.update_parameter(args=new_args); ```; I prefer using steps since you don't have do define `tlist` first, you could use it in a `while True` loop or interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451:153,depend,depending,153,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451,1,['depend'],['depending']
Integrability,"No problem. I would suggest that at merge time, this PR is _not_ squashed but is simply rebased onto or merged into master. A merge would ensure that the PR number is included in the git history if that's desired, but all the relevant explanations are also already in the commit messages. It's a very large change, there's a lot of exposition in the commit messages, and each commit is a modular unit of work already, while the PR title won't actually be true (since not all of the tests are converted). I know that the commit messages are all combined on github, but it's much more difficult to search for the small bit you need out of several pages of writing, rather than having only the relevant parts presented to you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885:279,message,messages,279,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885,3,['message'],['messages']
Integrability,"Not sure if it's that simple.; ```; --config-setting=""--global-option=--with-openmp""; ```; actually gives me a build error:; ```shell; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --config-setting=""--global-option=--with-openmp""; * Building wheel...; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5;",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:164,depend,dependency-check,164,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,1,['depend'],['dependency-check']
Integrability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:357,depend,dependencies,357,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,1,['depend'],['dependencies']
Integrability,"Note: the reported changes (other than the deletion of the licence from each source file) are all whitespace-only, or simply a reflow of the hard-wrapped text in `LICENSE.txt`. I didn't change the licence at all, other than the holder. I've also checked this with the same tool that GitHub uses, and it will definitely recognise the licence correctly after this. The whitespace-only changes in other files weren't actually 100% intended, but it was a function of how I did the licence detection - I normalised the whitespace at the ends of lines first. Looking through, I guess I only did that when changing the `doc` folder, not the main source code (I had to handle those two cases separately).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684:146,wrap,wrapped,146,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684,1,['wrap'],['wrapped']
Integrability,"Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions. `__array__` was also originally meant as a method for allowing Numpy's ufuncs to act on other types. This actually caused us rather annoying problems in QuTiP when they decided to change up its semantics a little bit in version 1.20, which is in part is why I'm very cautious around this topic. Since we weren't super careful when we introduced `Qobj.__array__`, we allowed things like `np.sin(qutip.sigmax())` which we shouldn't have, and then the Numpy 1.20 changes completely altered how `ndarray(dtype=object)` arrays behaved when containing objects that all implemented `__array__`. To get around _some_ of these problems, they've introduced `__array_function__` and `__array_ufunc__`, though to me at best these are bandages. Those two concerns aren't immediately applicable in QuTiP, but they're sort of indicative of potential problems when using a `__qutip_qobj__` method implicitly in functions like `Qobj.__add__`. These are where it becomes very evident that Julia-style programming doesn't apply in the same way in Python. Python is only a single-dispatch language, so `a + b` will dispatch using the table of `a` predominantly, whereas `b + a` will dispatch on `b`. In a proper multiple-dispatch library the rules are separate to the classes, so neither class is called preferentially, there's just one rule and either library can define it. My point with this is that if `Qobj.__add__` has a case where it handles Qobj-like types, then we prevent the other library from overriding the method. Multi-methods like this simply don't work the same in Python as they do in Julia, so even if `Qobj` implements interfaces from a variety of other libraries, we'd never get good consistent behaviour with functions like this. Operations that ought to be commutative like `+` would become dependent on operand order. To some degree, implementing the interface would be a ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108:63,interface,interface,63,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108,1,['interface'],['interface']
Integrability,"Ok, cool. I don't think there's any situation we should be mutating the `Options` class we're passed in though - I'd consider that a bug no matter what, since that leaks like your print statement shows. We can just duplicate it on entry, then modify that. To me it's not clear that passing several items in `tlist` should override an explicit `store_states=False` - as long as we allow you to pass an array as time-dependence, there is a sensible reason to pass more items in `tlist` than you need results for. Sure, you may also be able to use `Cubic_Spline`, but if we punish you for using arrays by swapping your options, why do we provide them? I think we should only warn and change the settings if _nothing_ is going to be stored - `store_final_state` should be enough to suppress it and not store the intermediate states, even if that implies the user might not be doing the fastest possible thing. I don't necessarily think we should try to promote ideal usage through runtime warnings if that's more verbose to type - that's what documentation is for, and some people will do stuff because it's faster to type, since they work interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775332513:415,depend,dependence,415,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775332513,1,['depend'],['dependence']
Integrability,"Ok, it turns out I got the numpy release notes the wrong way round; we have to build our binaries with `1.16.6 <= numpy < 1.20` to maintain ABI compatibility no matter the numpy version. I have updated the compiler infrastructure to take this into account - this is in some ways a temporary restriction until two or three years in the future when we can drop support for all numpy versions less than 1.20. This is ready for final review. If you're fast, you can also try installing from the test PyPI server to see if the wheels work for you. While it's on the temporary server, you need to install `numpy` and `scipy` manually yourself (as they don't exist on test.pypi.org), but pip will do the dependencies correctly for you once it's publishing to the full repo.; ```bash; conda create -n pypi-test; conda install python pip numpy scipy; pip install -i https://test.pypi.org/simple qutip-jakelishman; python -c 'import qutip; qutip.about()'; ```. @hodgestar, @nathanshammah: perhaps you could just glance over this again and make sure everything looks right to you? Simon, I know you already looked over it once, so if you've not got time again, no problem - barely anything has changed since you last saw it. Nathan: in theory once we're in a position where deployments push to PyPI I think I can write an action for qutip/qutip.github.io to push a commit updating the website with the new information too. However, with the docs currently using a completely separate build process in a different repo, they can't really be triggered by a release here. I wrote this PR against `dev.major`, but I suppose in theory I could backport it to the 4.x branch if that's absolutely required. I think some parts of the setup changed for `dev.major`, which is why I didn't originally try to make it to the current version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158:697,depend,dependencies,697,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158,1,['depend'],['dependencies']
Integrability,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:848,depend,dependent,848,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,"['depend', 'integrat']","['dependent', 'integrator']"
Integrability,"Perhaps someone else can give a more concrete answer, but I guess the driving frequency is too high for the number of time-steps? Try tweaking the ODE solver with options like the following:. `; options = Options(nsteps=15000, atol=1e-13, rtol=1e-13) ; `. and passing it to mesolve. `result1 = mesolve(Ha, psi0, times, [np.sqrt(T1)*sig01, np.sqrt(T2)*sig02, np.sqrt(gamma*(nth + 1))*a, np.sqrt(gamma*nth)*a.dag()], [a.dag()*a, sig00, sig11, sig22], progress_bar=True, options=options); `. More practically speaking, for the problem you are solving I guess explicitly including the time dependence is unneccessary, since you have already made a RWA on the drive and the coupling? . Moving to an interaction picture in w1, w2 and wph, and removing the explicit time-dependence might simplify the problem and might give you equivalent results, and in the process make your code much simpler and more efficient?. In other words just set w1=w2=wph=0, and put the drive as a time-independent term in the hamiltonian . `; H01 = g*(sig12*a.dag() + sig21*a) + pump1*(sig01 + sig01.dag()); `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514:586,depend,dependence,586,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514,2,['depend'],['dependence']
Integrability,"Pure numerically speaking, the last `diss_coeff` is a way larger than the others.; ```python; >>>diss_coeff; [0.19836061612310207j,; 0.25470007277190326j,; 0.223606797519535j,; 4925.267477050309j]; ```; With this large frequency, if you want to solve the dynamics using ODE, I don't think there is a way to make it faster. You have to either simplify your model mathematically, or, because there is no time dependency in your system, use the (deprecated) `essolve` that computes the dynamics using eigenvalues. Thinking about the physics, the T2 time is much smaller than your `tlist`, the system has already fully decohered. PS: @jakelishman It seems that the `essolve` does have some use-cases? Like in small systems for verification perpose. I remember there is another PR that also mentions it. As we deprecated it, I'm wondering if there is an efficient alternative in QuTiP?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452:407,depend,dependency,407,https://qutip.org,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452,1,['depend'],['dependency']
Integrability,Something is way off about that test failure again... Is it possible Travis isn't cleaning up properly? I can't reproduce the failure (it's also clearly nothing to do with this change) and the error message doesn't match up. If anything it looks like the error message is coming from a hash collision inside QobjEvo _maybe_?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672:199,message,message,199,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672,2,['message'],['message']
Integrability,"Sorry for the slow response... It seems to me like @Ericgig summed it up pretty concisely. Although I'm not sure I understand how #1123 fits in: what is the plan for `Qobjevofunc`, and how would it fit in to specifying time-dependent Hamiltonians?. The only thing that's ever really bothered me was the mandatory `args` as part of the signature, even if it's not used. That's lead to the need for workarounds like the `allow_args` parameter in; https://github.com/qucontrol/qdynpylib/blob/f7b54af3e586683cdfd9b3dd666c5cf540d843e1/src/qdyn/pulse.py#L555. If there's a future `f(t)` option, I should be happy. In the abstract, `f(t, **args)` and `f(t, state_vec, **args)` would be the most elegant, but if there's a severe performance hit, that could be a problem. I'm surprised, though: I would have thought that `f(t, **args)` and `f(t, args)` should be almost the same thing in the Python internals, since you can modify `args` inside of `f` and pass it to lowerlevel function as `**args` again. Even from the user's perspective any current code with signature `f(t, args)` could have its signature replaced with `f(t, **args)` without requiring any change to the function body. But I'm clearly missing something. Can you point me to lines in the code where this becomes a bottleneck?. I'm also quite in favor of introspection to accept a wide variety of signatures: you can even introspect argument names, so the possibilities are endless. The introspection is probably slow, but if it only has to be done in a very high level function, that might be alright.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696:224,depend,dependent,224,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696,1,['depend'],['dependent']
Integrability,"Sorry.. got a little distracted, and wanted to check the contributing guidelines on what branch to make the pull request against. Currently it’s master. Is that ok? If yes, I’ll undraft it. Draft PRs are pretty new, and a very nice way to kick off the Continuous Integration. Like in this case, I wanted to check if any of the tests involve that message. As they don’t, this actually is ready to go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964:346,message,message,346,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964,1,['message'],['message']
Integrability,"Thank you for reporting.; The feedback interface changed a few times (and will change in future version.); The documentation in guide is wrong, but the apidoc should be up to date.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538#issuecomment-1398778915:39,interface,interface,39,https://qutip.org,https://github.com/qutip/qutip/issues/1538#issuecomment-1398778915,1,['interface'],['interface']
Integrability,"Thank you for your prompt reply. @sahmed95. QuTip was installed on Windows; ```; pyhton 3.6.4; ```; We download anaconda and install QuTip from conda-forge with; ```; conda install -c conda-forge qutip; ```; but when run ; ```; import qutip.testing as qt; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transf",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:285,message,message,285,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['message'],['message']
Integrability,"Thanks for the clue, it was helpfull.; The source of problem is localization of `lscpu` util, which used by `_linux_hardware_info()` function.; The function expects `'Socket(s)'`, `'Core(s) per socket'`, etc in `lscpu` output, but in my system it actually `'Потоков на ядро'`, `'Сокетов'`, etc.; I think, maybe better less system dependent ways to calculate cpu count, for example, we could use `multiprocessing` module and it's `cpu_count` function. Or `len(os.sched_getaffinity(0))`for computers with dynamic cpu management (see [this](https://stackoverflow.com/questions/31346974/portable-way-of-detecting-number-of-usable-cpus-in-python) for details).; Or show exception/error, if we try to use lscpu and `LANG` is not english (or we couldn't found mentioned above `'Socket(s)'`).; Ideas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045:330,depend,dependent,330,https://qutip.org,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045,1,['depend'],['dependent']
Integrability,"Thanks for the interest! To be clear, I wasn't trying to suggest that the whole thing is in scope for QuTiP per se; this PR concerns calling a small one-file [client library](https://github.com/cgranade/tskmon-client) from QuTiP. Given the similarity with that and the PiCloud functionality's goal (integrate QuTiP with third-party web services), maybe a good architecture would be something like a `qutip.services` package, where the expectation is that each submodule would require some additional client library?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63312872:299,integrat,integrate,299,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63312872,1,['integrat'],['integrate']
Integrability,"Thanks for the quick response @bencbartlett. . Feel free to ignore the comments regarding the shortening of arguments. That was just a suggestion to make things shorter. But as you said clarity is more important. I will not change `waveguide` to `wg` and I think you should leave the others as they are if you can't think of shorter ones. Same applies to the `temporal_basis_vector`. I think you can even add a `temporal_basis` as you mentioned. Regarding the double line breaks wrapping top-level functions, I know the pep8 standard is two newlines but some other QuTiP modules follow just a single line break, e.g., [floquet](https://github.com/qutip/qutip/blob/master/qutip/floquet.py). But again some other modules in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor perform",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:479,wrap,wrapping,479,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,2,['wrap'],"['wrap', 'wrapping']"
Integrability,"Thanks for the review!. > * Should we stop the user from passing a list of kets to `mcsolve` directly?; > Presently it work but it's not documented (and list `ntraj` don't.). You are right, done. Of course we could also allow the same arguments for `mcsolve` as for `run`, but I thought it might be good to keep the `mcsolve` interface simpler. > * It would be nice to have the trajectories per initial state information stored in the result somewhere. I have added that information and checking it in a test. Edit: I forgot that I still haven't updated the docs. Will do that. Edit 2: Done",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143:326,interface,interface,326,https://qutip.org,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143,1,['interface'],['interface']
Integrability,"Thanks for the useful feedback, both here and in PR #1611 ! From the discussion in PR #1611 it seems that the second option with the modifications proposed by Jake in this issue seems to be the most sensible approach. Hence, if there are no objections, I will open a PR (which I will probably do tomorrow) where I implement the following changes (adapted from Simon's comment in PR #1611):. - `Qobj.__mul__(self, other) ` ; - dispatch to `data.matmul` if `other` is a `Qobj`; - dispatch to `data.mul` otherwise which will return `NotImplemented` if it does not know how to handle `other`. ; - `Qobj.__rmul__(self, other) `:; - Dispatch to `data.mul` (`other` will never be a Qobj): Notice that in this way both left and right multiplication will behave in the same way. This would also ""solve"" the inconsistency PR #1611 was trying to solve but this time `data.mul` will handle it and will raise NotImplemented whenever required. . - `mul_dense` and `mul_csr`:; - Use a thin wrapper that returns `NotImplemeneted` if input is not a complex python scalar. There are a few things I would like to discuss before opening a PR:; 1) These changes will break backwards compatibility as:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # With the changes this also returns NotImplemented.; matrix * qobj # With the changes this also returns NotImplemented; ```; will now behave consistently (""fixes"" PR #1611). Is this acceptable? I would say yes given that we are doing a major version change. However, it may be a good idea to start raising a deprecation warning in QuTiP 4 if these changes go forward. 2) `data.add` has a similar behaviour to `data.mul` in that it accepts `scale` which is not a `Data` (there are a few more specialisations that also accept an argument that is not a `Data`). Should these specialisations behave in the same way allowing arbitrary python objects as ""scale"" and raise NotImplemented when required or should they just allow a complex py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473:975,wrap,wrapper,975,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473,1,['wrap'],['wrapper']
Integrability,Thanks for your contribution. I have merged your changes together with other an implementation of the simplified array-based time-dependence format discussed above in PR #162.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-46521430:130,depend,dependence,130,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-46521430,1,['depend'],['dependence']
Integrability,"Thanks for your suggestion! I tried to increase the sub-steps, but the optimal (a tradeoff between precision and speed) `nsubsteps` is very sensitive to the parameter of the Hamiltonian (bias). To simulate a time-dependent bias, I have to set an extremely large `nsubsteps` then practical unable to complete. Mcsolve works perfect for this setup, but I also want to add some extra c_ops later. I would like to ensure if the `nsubsteps` is the only way to control the precision? If so, I will make things simpler and use mcsolve.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1357#issuecomment-691302246:213,depend,dependent,213,https://qutip.org,https://github.com/qutip/qutip/issues/1357#issuecomment-691302246,1,['depend'],['dependent']
Integrability,"That is true. I'll try to look into why this is the case. However, it does have three expectation calculated. You can check this with output.expect ! . Edit: . So, I just realized that the noise-spectrum is associated with the coupling operator [sigmax()], I think the correct call to brmesolve must infact be (updated to current qutip standards) . `output = brmesolve(H, psi0, tlist, [[sigmax(), ohmic_spectrum]], e_ops)`. This is in line with the notation we use in example (https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve-time-dependent-Liouvillian.ipynb). I will make a pull request updating both the example notebook (http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) to reflect this and make sure we depreciate the spectra_cb argument in bloch_redfield_tensor to eliminate the confusion. Thanks for bringing this to notice !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703:571,depend,dependent-Liouvillian,571,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703,1,['depend'],['dependent-Liouvillian']
Integrability,"The PR is in good shape for merging I believe. I'd like to discuss the parameters API a bit. The parameters used now for measurement function is `ops` and `state`. I guess @hodgestar coined this interface in his PR. It fully made sense for observable and state. However, if we now generalize it to the measurement from the perspective of experimentalists. The parameter `state` becomes a more prominent one whereas `ops` becomes secondary because it only offers a basis for the measurement. This become clearer if one list all the possible use scenarios where:. - `state=Qobj, ops=None`: measure the `state` in default computational basis; - `state=Qobj, ops=ket`: Probability of measure `state` and get `ket`, (together with the post-measurement state); - `state=Qobj, ops=Qobj`: Measure the `state` with one POVM operator specified by `ops`; - `state=Qobj, ops=list of ket`; - `state=Qobj, ops=list of Qobj`. More generally, we can even provide the user with the optional parameter `targets`, where the given `ops` is only for those targets qubits. We can add identity to the measurement operator for the rest of the qubits automatically for the user.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-648113340:195,interface,interface,195,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-648113340,1,['interface'],['interface']
Integrability,"The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size `dt` is actually good. It ideally should converge to something as the step size goes to zero. QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances. For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here. Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508:328,depend,dependent,328,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508,1,['depend'],['dependent']
Integrability,"The block-redfield solver only supports string-based time-dependence, ; http://qutip.org/docs/latest/guide/dynamics/dynamics-bloch-redfield.html#time-dependent-bloch-redfield-dynamics; so in your example something like H=[[initial_H,'1-0.01*{i}*t'.format(i=i)],[final_H,'0.01*{i}*t'.format(i=i)]] should work. I don't know whether that will give you the same issue as reported for repeated calls to mesolve/sesolve. Probably will, if that hasn't been resolved yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1150#issuecomment-575503917:58,depend,dependence,58,https://qutip.org,https://github.com/qutip/qutip/issues/1150#issuecomment-575503917,2,['depend'],"['dependence', 'dependent-bloch-redfield-dynamics']"
Integrability,"The core of `mesolve` is also `scipy.ode`, but the default method is `adams` instead of `bdf` and we use sparse matrix for the liouvillian. There are a lot of small time lost with using mesolve like this. Just looking at rhos' datatype: ; `self.psi0: dense -> rho0: Qobj(sparse matrix) -> dense vector (for ode) -> mesolve return: sparse matrix -> rhot: dense...`; Also `mesolve` will check if the Hamiltonian is really an Hamitonian or a Liouvillian or a function returning an Hamiltonian, if the system depend on time, if all the dimensions match, etc. So the overhead of `mesolve` will be important. Finally, depending on the Hamiltonian there can be a good difference in speed. We use sparse matrix for the Liouvillian, good if the Hamiltonian is large with few non-zeros, but slower that simple dense matrices otherwise.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1180#issuecomment-583781780:505,depend,depend,505,https://qutip.org,https://github.com/qutip/qutip/issues/1180#issuecomment-583781780,2,['depend'],"['depend', 'depending']"
Integrability,"The default Apple `clang` version doesn't recognise `-fopenmp` out-of-the-box, because Apple don't ship an OMP library with macOS. You'll have more luck (with most C/C++ projects!) if you install a fully-featured compiler and environment. On [homebrew](https://brew.sh) you can find both `clang`/`clang++` and `gcc`/`g++`, both of which can be installed with OMP support. Make sure your set `PATH`/`CC`/`CXX` environment variables are set up correctly after you've installed, so you're calling the compiler you've just installed, not just the Xcode versions. This isn't a bug in QuTiP, although we could remember this when somebody's working on modernising the distribution - in C/C++ land, tools like `automake` run through a big list of things to check during build configuration, and one of them is if OMP appears to exist. That way the error message is a little clearer (although in this case it's reasonable clear if you're used to C compilers).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774:846,message,message,846,https://qutip.org,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774,1,['message'],['message']
Integrability,"The difference between those two lines is that left-multiplication by `s_prep.dag()` will project onto the prepared ancilla state, whereas tensor contraction will implement partial trace over the ancilla; they're both perfectly valid channels (up to normalization in the projection case), but have subtly different physical interpretations. I can explain that better in the notebook, and submit as a PR, then. There's some plotting code there as well that I was planning on cleaning up better for a later PR to QuTiP, but I can clean it up now and include it if you like, so that I can simply use it in the tutorial notebook without a page of function definitions first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65412516:146,contract,contraction,146,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65412516,1,['contract'],['contraction']
Integrability,"The error reported here; ```; /Users/goerz/.pyxbld/temp.macosx-10.6-x86_64-3.5/pyrex/rhs72670.cpp:541:10: fatal error: 'complex' file not found; #include <complex>; ```; Suggests that any string format time-dependence would fail to compile. @goerz Could you try to reproduce with simple example, e.g.; ```; H = [[sigmaz(), ""sin(t)""]]; ```; ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-463246180:207,depend,dependence,207,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-463246180,1,['depend'],['dependence']
Integrability,"The main function of the `Options` class is to hold the documentation of the options supported by solver, mostly integrator related ones are an issue. Since sub-packages can add new integration methods, it should be somewhere dynamic that can fetch them at runtime. We can't have them in the description of the function interface directly, but it must be clear from that documentation where to find them.; We can't have them in the documentation of the solver class. It could be in a solver instance, but that too late: needing to initialize a `BrSolver` or `HEOMSolver` just to know which options `bsmesolve` and `heomsolve` support is not user friendly.; The Integrator class is useless for the users: if they want to solve ODE, they should use `scipy.integrate`, for quantum systems evolution, `mesolve` etc. So we should not ask them to look there. `SolverOptions(name)` make it reasonably easy to check the supported options and their default before using the solver. Another approach I see is to fix the integrator when using the functions interface, this way we could properly document the function with all items from both the solver and integrator. When using the class interface, we keep both options separated (and make the choice of integrator it's own keyword):; ```; solver = SeSolver(H, integrator_method='adams', options=solver_options, ode_options=ode_options); solver.options # Solver options only. solver.set_integrator('vern7', ode_options); help(solver.ode_options) # See description of integrator options; ```. That way the function calls is very close to v4 and easy to use, and the class interface give access to new features. ; This also makes `krylovsolve` fit more. Since `method` is used by the solver, not the integrator, it should not be under the `options.ode`, but it seems confusing to have it with the normal options, so having it as an independent parameter could make it clearer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897:113,integrat,integrator,113,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897,12,"['integrat', 'interface']","['integrate', 'integration', 'integrator', 'interface']"
Integrability,"The problem with OPENMP is that the point where parallel processing begins to have an advantage is platform, and hardware dependent. As such, I have added a simple benchmark routine that calculates a good number of NNZ that a matrix should have for OPENMP to be utilized. This also required me to change the way the qutiprc file is done, i.e. it now uses the standard configparser module. This benchmark is called on first run, or anytime where the qutiprc 'openmp_thresh' flag is missing, or the qutiprc file itself does not exist.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/652#issuecomment-283874454:122,depend,dependent,122,https://qutip.org,https://github.com/qutip/qutip/pull/652#issuecomment-283874454,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,"There's no link, just bad luck. This won't prevent merge - the tests clearly show your change is fine. Unfortunately our test suite isn't perfect, and sometimes it tries to integrate an insanely stiff system or something like that by accident.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050:173,integrat,integrate,173,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050,1,['integrat'],['integrate']
Integrability,"This error comes from the integration algorithm.; Take a differential equation like dy/dt = -i*y.; With a simple method like euler: ; y(t+dt) = y(t) + f' dt = y(1-i*dt); So the norm increase exponentially *(1+dt**2) at each iteration, not somewhat randomly.; The default method we use is ""adams"" from scipy's solver, which is a lot better than euler, but still have a bias. We also stop the solver for re-normalization of the state from time to time, introducing another bias.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708:26,integrat,integration,26,https://qutip.org,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708,1,['integrat'],['integration']
Integrability,This fails because time only contain `0.5`. ; You probably meant `time.append(0.5*i)`. The error message is a catch-all for failure in scipy solver and certainly not clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905:97,message,message,97,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905,1,['message'],['message']
Integrability,This is my conda env file for linux; ```yaml; name: nbdev; channels:; - fastai; - defaults; - conda-forge; dependencies:; - _r-mutex; - _tflow_select; - absl-py; - alabaster; - asn1crypto; - astor; - astroid; - attrs; - babel; - backcall; - backports; - backports.functools_lru_cache; - blas; - bleach; - bwidget; - bzip2; - c-ares; - ca-certificates; - cairo; - certifi; - cffi; - chardet; - cloudpickle; - compiler-rt; - constantly; - cryptography; - curl; - cycler; - cython; - dbus; - decorator; - defusedxml; - docutils; - entrypoints; - expat; - fastcache; - flake8; - fontconfig; - freetype; - fribidi; - gast; - gettext; - glib; - gmp; - gmpy2; - graphite2; - grpcio; - gsl; - h5py; - harfbuzz; - hdf5; - html5lib; - icu; - idna; - imagesize; - intel-openmp; - ipykernel; - ipython; - ipython_genutils; - isort; - jbig; - jedi; - jinja2; - jpeg; - jsonschema; - jupyter_client; - jupyter_contrib_core; - jupyter_contrib_nbextensions; - jupyter_core; - jupyter_highlight_selected_word; - jupyter_latex_envs; - jupyter_nbextensions_configurator; - keras-applications; - keras-preprocessing; - keyring; - krb5; - lazy-object-proxy; - libcurl; - libcxx; - libcxxabi; - libedit; - libffi; - libgcc; - libgfortran; - libiconv; - libopenblas; - libpng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python;,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:107,depend,dependencies,107,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['depend'],['dependencies']
Integrability,"This looks great and I think it will help a lot in cleanly implementing more complex solvers light the HEOMSolver. I have two suggestions for future improvements:. - I'd like to see `.options = ...` become a method because it now modifies the existing integrator and `.options(...)` would both make that clearer and more flexible. E.g. with a method we could allow both `.options(new_options)` to completely override the options and `.options(key=new_value)` to update just one setting. - The first call to `result.add(t, X)` uses `X = state0` but state0 could be almost anything the user passed in (and not necessarily the canonical form returned by `_restore_state`). It would be better if either there was a separate method to override to convert `state0` into the canonical form, or `result.add(t, X)` was called initially with `X = _restore_state(_data0)`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616:252,integrat,integrator,252,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616,1,['integrat'],['integrator']
Integrability,"This won't be easy to fix, if the compilation is in the task, `parfor` cannot know about it to wait for it.; The simplest would be to have only the main process able to compile. This code will still raise an error, but the solution would be in the error message.; Otherwise communication between process would be needed and this can get tricky. Also `parfor` will be removed. It says in its [documentation](https://qutip.org/docs/latest/apidoc/functions.html#qutip.parallel.parfor) to use `parallel_map` instead since v3.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433:254,message,message,254,https://qutip.org,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433,1,['message'],['message']
Integrability,"To be honest, I'm not 100% sure myself since it's just turned into a string and cythonized anyways. When it was initially added, I had assumed the purpose was because occasionally a function doesn't work well in the string format or is slow in the list-function format. Though I'm working on adding time-dependence to the Bloch Redfield solver by using piece-wise constant Liouvillians and there I guess the format makes a bit more sense intuitively, PR #525.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-242163512:304,depend,dependence,304,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-242163512,1,['depend'],['dependence']
Integrability,"We have made some progress! But I also have some questions for the experts here.; * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?; * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; * The _run_one_traj function now exists 3 times, with practically identical code:; https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. Side note: due to a WSL bug, some of my commit timestamps are messed up. Because of that, some commits seem to be shown out of order here...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901:375,message,message,375,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901,2,"['integrat', 'message']","['integrate', 'message']"
Integrability,"We probably shouldn't mutate the given `Options` object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. That said, if we're going to do something different to what the user requested we should at least emit a warning. There's also interplay with `store_final_state` here too; it's questionable technique to do `e_ops=None, store_final_state=True` with a `tlist` with more than two elements, but probably people who aren't familiar with `nsteps` will do something like that, and it seems a bit picky to prevent/warn on that when the intention seems clear. I think that the current behaviour doesn't take this case into account when falling back - it'll store all states, which in the 4.x branch is a fairly major time sink (but much much faster in 5.0). What behaviour would you expect for your use case? I'd probably do something like:; 1. if we change the `Options`, we have to clone it first to prevent leaking our mutations; 2. if we're not going to save anything, we should warn the user but then do it anyway - maybe their time-dependence functions leak state, and they're just doing something weird with that; 3. `store_final_state` should count as ""storing something"", so no need to set `store_states` if `store_final_states=True` and there are no `e_ops`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824:154,integrat,integrator,154,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824,2,"['depend', 'integrat']","['dependence', 'integrator']"
Integrability,"What do you think is more efficient than doing; ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```; ?. I'm saying that to do each state independently, `mesolve` and `sesolve` have to independently integrate each state, so even if we added this functionality into those functions directly, it would be little more than that loop I just wrote if you have used the tools I described in the first comment. If you want the entire system propagator, `qutip.propagator` can calculate that for you. Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple, but if you have very specific domain knowledge of your system, you often will be able to write an integrator which is faster for your cases, rather than the full general-purposes ones in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465:274,integrat,integrate,274,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465,3,"['integrat', 'protocol']","['integrate', 'integrator', 'protocols']"
Integrability,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:1002,interface,interface,1002,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,1,['interface'],['interface']
Integrability,"When no options and no e_ops are given, the solver should store the states, otherwise nothing is done. Since the default value si `store_states=False`, the solver don't know that the value was explicitly given or the default. We should have `store_states=None` as the default. This allow us to respect an explicit False while keeping the expected behaviour when no options are given. I will make this change in the v5 solver (And make sure no Options are modified). `tlist` was never meant to control time dependence, it represent the time at which the solver look at the state (+ first and last times). I added array support as coefficient as a shortcut to Cubic_Spline and I used the already existing tlist, but this is clearly a limitation and in v5 they will be controlled independently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775976194:506,depend,dependence,506,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775976194,1,['depend'],['dependence']
Integrability,"While you could probably make it work but manually updating the state at each times of `tlist` is certainly not a usage I planned for... If you could use `mesolve` instead of `mcsolve` it would be simpler:; ```; solver = MeSolver(...); solver.start(rho0, t0); for t in tlist[1:]:; rho_t = solver.step(t); solver.start(rho_t @ projection, t); ```. With `mcsolve`, if you use it like this, it would normalize the state at each step possibly breaking the montecarlo part of the evolution. The way I would do it is by making a child class overwriting the step of `McTrajectorySolver`:. ```; class MyMcTrajectorySolver(McTrajectorySolver):; def _step(self, t):; super()._step(t); _, raw_state = self._integrator.get_state() # state not normalized; new_state = _data.matmul(projector, state) # projector is a Data object: Qobj.data; self._integrator.set_state(t, new_state); return _data.mul(new_state, 1 / _data.norm.l2(new_state)). class MyMcSolver(McSolver):; _traj_solver_class = MyMcTrajectorySolver; ```; If done this way, you should be able to use the normal solver interface. This projection should be done once per call of `step` or per time in `tlist`, but I would confirm it before running simulation. `step` does not return the `collapse` part of the results. So if a collapse happen, it will not output it nor the time at which it happen. But the state evolution is done normally, collapse will happen as expected. To get them, you will need to fetch them with `solver.traj_solvers[i].collapse`. Feel free to comment on the new solver interface. If you think that something is missing or confusing, now is a good time to tell us. We should come back on this PR in April.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1710#issuecomment-1068480013:1067,interface,interface,1067,https://qutip.org,https://github.com/qutip/qutip/pull/1710#issuecomment-1068480013,2,['interface'],['interface']
Integrability,"Yeah, `qutip-qip` is a much easier build and installation process because you don't need to be concerned about compiler infrastructure, ABI compatibility or stuff like that. In addition in that particular test run, there were three individual calls to change the installed packages, which meant plenty of space for stuff to go wrong. In this case, I think it was a strange interaction between the old `.travis.yml` specifically installing `numpy` and all other dependencies from `conda-forge`, without the channel being in the defaults list. Since `conda uninstall` doesn't specify an additional channel, the dependency calculator considers `defaults` to be higher priority, so it sets various packages to arbitrary allowed ones from `defaults`, which with `openblas` installed like this meant numpy `1.14`. That's my guess at least - it's a pretty weird set up circumstances, but the new `.travis.yml` file that's already in `master` is far simpler about the build process.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609:461,depend,dependencies,461,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Yes, we will add a reference to the your paper with the TLS when I submit a; TLS notebook example.; I think I will just make a simple example for now. And then add the more; involved one that compares the RC method later. Thanks for the explanation on Matsubara terms (I might have to spelling to; correct :). I did not realise they were only referred to as such in the; DL spectral density. I will make some corrections now. On 10 March 2016 at 18:30, nwlambert notifications@github.com wrote:. > This looks great!; > ; > The references are sufficient I guess. We can add some more in the example; > notebook?; > ; > One minor terminology point in the explanation: for the Drude-Lorentz bath; > the correlation functions can be exactly analytically expressed as an; > infinite sum of exponentials which depend on the temperature, and these are; > called the Matsubara terms or Matsubara frequencies.; > ; > In general, when not dealing with a Drude-Lorentz bath, or something; > similar, we have to approximate the correlation functions by numerically; > fitting them to exponentials, but in that case they don't have any; > particular name I guess. When we get around to adding it as an option, lets; > call them Fruchtman terms, as it was Amir Fruchtman who told me to try; > doing it that way!; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/pull/455#issuecomment-194752885.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194776953:804,depend,depend,804,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194776953,1,['depend'],['depend']
Integrability,"You have a couple of ways of going about this. The simplest is to use the callback form of `e_ops` - you make a single function which looks like; ```python; def e_op(t, state):; # [...]; return expectation; ```; where `t` is the time and `state` is a `Qobj`. You can return whatever you like here, really, so you can return a tuple of values if you want to track more than one. If you do this, then you do; ```python; result = qutip.sesolve(H, psi0, times, e_ops=e_op); ```; and `result.expect` is a list of the same length as `times`, where `result.expect[k]` is the output of your function at a time `times[k]` (note that this is a slightly different output format to the normal method). Alternatively, you can do the calculation yourself without too much difficulty if your observables can be put in the form `A(t) = sum_k f_k(t) A_k`, like your example here. Because the expectation is a linear operation `expect(A(t), psi(t)) = sum_k f_k(t) expect(A_k, psi(t))`, so you can pass the list of `A_k` to `sesolve` and then just calculate the time-dependent coefficients yourself afterwards and add them up. This will generally be faster than the previous method, but it's more complicated to do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1364#issuecomment-699652426:1048,depend,dependent,1048,https://qutip.org,https://github.com/qutip/qutip/issues/1364#issuecomment-699652426,1,['depend'],['dependent']
Integrability,"[0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245592358>:; >; > > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense; > + ); >; > ⬇️ Suggested change; >; > - solver_instance = FLiMESolver(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + options=options,; > + ); >; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245594985>:; >; > > @@ -929,4 +930,5 @@ def run(self, state0, tlist, *, floquet=False, args=None, e_ops=None):; > stats[""run time""] = progress_bar.total_time(); > # TODO: It would be nice if integrator could give evolution statistics; > # stats.update(_integrator.stats); > +; >; > Why a new empty line here?; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245604228>:; >; > > + self.evecs = _data.permute.indices(; > + evecs, col_perm=np.argsort(perm)); >; > This file already has black ran on it and the style is ok as is.; > (But I just learned that black exclude the newline in it's character count; > while pycodestyle include it.); > Since it's not the main part of your PR, please revert it to it's original; > state.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610200>:; >; > > + total_R_tensor[key] += np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTer",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:2879,integrat,integrator,2879,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['integrat'],['integrator']
Integrability,"] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; > + List of times for :math:`t`.; > +; > + T : float; > + The period of the time-dependence of the hamiltonian.; > +; > + c_ops_and_rates : list of :class:`qutip.Qobj`.; > + List of lists of [collapse operator,collapse operator rate] pairs; >; > ⬇️ Suggested change; >; > - List of lists of [collapse operator,collapse operator rate] pairs; > + List of lists of [collapse operator, collapse operator rate] pairs; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245611168>:; >; > > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-independent/most strict; > + secular approximation.; > +; > + quicksolve: Boolean; > + True to use the quicksolve method,which utilizes the most strict; >; > ⬇️ Suggested change; >; > - True to use the quicksolve method,which utilizes the most strict; > + True to use the quicksolve method, which utilizes the most strict; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245613247>:; >; > > + IVP solvers. Can be overridden if desired (e.g. for; > + debuggin/troubleshooting).; >; > With overwrite you mean using quicksolve with non-zero time_sense?; > If so, how to overwrite it?; > ⬇️ Suggested change; >; > - IVP solvers. Can be overridd",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:6170,depend,dependent,6170,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependent']
Integrability,"_**edit to put the positivity up top!**_: This is a very exciting prospect to me, and I'm always happy when other libraries want to interact with QuTiP! In the interests of inciting more discussion, I've got thrown in some more discussion points below - I'm 100% sure they're all solvable, but it also seems like there isn't one way that's unambiguously correct to do them, so they're worth discussing. ---. In principle I'm happy to implement this, though I don't really agree with your assertion that `othertype.toqobj()` is bad style! It might be so in Julia, but Python doesn't have all the same multiple-dispatch niceties that Julia has, so at the end of the day, we have to add in a method with a ""magic"" name somewhere, and it all just comes down to choosing the name of the method. The downside to having a magic name is that it means we have to eschew proper namespacing; what if another library one day wants to call their interface the same thing? Then it's completely impossible for a downstream library to interoperate with both. Having conversions be a non-special method of the downstream class, and leaving our constructor unaware of them alleviates that issue. Numpy can get away with squatting the `__array__` name because they're _huge_, but I would argue that if we do it, we could actually _harm_ the quantum software ecosystem in the long-run - what happens when a package better than QuTiP comes along that wants to call its objects `Qobj` as well? Let's face it - it's a pretty straightforward name!. All that said, I am very aware that not everyone agrees with me on this, and I _am_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no ot",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:933,interface,interface,933,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interface']
Integrability,"`mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately, you've already done most of its setup, so the time penalties ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:1100,depend,dependent,1100,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['depend'],['dependent']
Integrability,"a maintainer of QuTiP. And it; > seems that there is no way to make a PR to Wiki. I can also send you the; > markdown source code per email like this, but I’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:1651,integrat,integration,1651,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['integrat'],['integration']
Integrability,"and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (mostly elementwise operations or reductions). Several libraries implement only these, but _not_ `__array__`, but given my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`. Discussed more at the top.; - CuPy (CUDA operations on ndarray-likes) explicitly does not allow implicit conversion to `np.ndarray` (see cupy/cupy#3421) for performance reasons, but does implement `__array_ufunc__` and `__array_function__`.; - pydata/sparse (nd-sparse _arrays_ instead of scipy.sparse's sparse _matrices_): always implement `__array_ufunc__` and `__array_function__` because they are try",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:6366,interface,interface,6366,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interface']
Integrability,"asis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hada",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1252,depend,dependent,1252,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['depend'],['dependent']
Integrability,"ast 1.3 (2009 - the oldest docs still on scipy.org), and I imagine long before then too. `__array__` is mentioned (and still is) in the documentation of `np.array`, which is unchanged since 2009 and says that its argument should be; > An array, any object exposing the array interface, an object whose `__array__` method returns an array, or any (nested) sequence. and `__array_wrap__` is like the reverse - it's for coercing numpy arrays back into this class. If we were to keep `__array__` in `Qobj`, we should also implement `__array_wrap__` for coercion back (something that isn't currently implemented). At the time and up to inclusively 1.19, the presence of `__array__` caused otherwise scalar types passed alone to `np.array` to return the output of `input.__array__(*args, **kwargs)`, instead of becoming a 0D numpy array (like `np.array(1)` does). Taken purely alone, that could make sense as something we implement. However, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make sense on quantum objects, which are arrays only as an implementation detail - the `Qobj` class is meant to represent an abstract linear algebra object, not specifically a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra obje",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:3919,interface,interface,3919,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interface']
Integrability,"ate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7663,wrap,wrap,7663,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['wrap'],['wrap']
Integrability,"cally a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (mostly elementwise operations or reductions). Several libraries implement only these, but _not_ `__array__`, but given my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostl",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:5358,protocol,protocol,5358,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['protocol'],['protocol']
Integrability,"ch will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row about licensing primarily, and then about how we're going to handle tensor networks in general. In order to prevent headaches down the line (and again, very very sorry)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3717,rout,routine,3717,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['rout'],['routine']
Integrability,"cy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Q",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2743,depend,dependent,2743,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability,"d64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:14577,message,message,14577,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['message'],['message']
Integrability,"d64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:20495,message,message,20495,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['message'],['message']
Integrability,"e and mc for driven oscillator in ground state ... ERROR; correlation: legacy me and es for oscillator in steady-state ... ok; correlation: comparing me and es for oscillator in steady-state ... ok; correlation: legacy spectrum from es and pi methods ... ok; correlation: comparing spectrum from es and fft methods ... ok; correlation: comparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:2906,message,message,2906,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['message'],['message']
Integrability,"e'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend le",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9133,integrat,integrate,9133,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Integrability,"e\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:15117,message,message,15117,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['message'],['message']
Integrability,"e\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:21121,message,message,21121,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['message'],['message']
Integrability,"ead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5972,integrat,integrator,5972,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Integrability,"eating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.puls",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2700,depend,dependent,2700,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability,"ee to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool = Flag specifying whether Qobj should get a copy of the input data, or use the original.; fast : bool = Flag for fast qobj creation when running ode solvers.; ```. For the case of the usage that netket would have, our objects already define the Hilbert space they are acting on (so `dims` and `shape`). `copy` doesn't really make sense for us, because we would be building the representation . The way I see it, `Qobj(other_pkg_obj,**kwargs)` should behave like `Qobj(qutip_obj, **kwargs)`, so `__qutip_qobj__` should return the matrix data, shape and dims if possible, and qutip will handle i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1802,message,message,1802,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,1,['message'],['message']
Integrability,"en module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files starting from those beginning with ""a"" up to (now) ""metrics"" while I was first getting to know the QuTiP codebase, and hopefully you can see that my early efforts weren't that great, and they get a bit better and easier to read as time went on. (The later files haven't been converted yet.) The main things are to always be thinking about readability both of the code and the error messages that are coming out, and making sure that your tests are really testing that your functions have your behaviour you want them to have. Another thing we really don't have enough of in QuTiP yet is tests for ""negative"" behaviour, i.e. testing that functions _fail_ when they're passed incorrect inputs - consequently, quite a lot of QuTiP actually will just silently do the wrong thing if it's passed nonsense.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:2382,message,messages,2382,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['message'],['messages']
Integrability,enblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark; - ipyparallel; - unittest2pytest; - pytest-benchmark; - pytest-repeat; - pytest-subtests; - fastcore; - fastscript; - asttokens; - cached-property; - crayons; - executing; - flask; - humanize; - ipywidgets; - itsdangerous; - jsonpickle; - jupyter; - littleutils; - nbconvert; - outdated; - portpicker; - sqlalchemy; - widgetsnbextension; - nbdime; - rich; - mayavi; - pip:; - birdseye; - icecream; - nbdev==1.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:2824,wrap,wrapt,2824,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['wrap'],['wrapt']
Integrability,"ensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162) being a particular example. In particular, the interface we define there is strictly for a single time step, makes no reference to `tlist` and we use ``H=[H0, [H1, u]]`` where `u` is a scalar for that particular timestep. However, I can easily write a wrapper around an `mesolve` that would work something along the lines of the pseudo-code from https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563:. ~~~; for (i, state) in enumerate(; mesolve([H0, [H1, ctrl_array]], state0, list); ):; # assuming `state` is at tlist[i]; new_val = calculate_control_value_for_next_step(state); ctrl_array[i] = new_val; ctrl_array[i+1] = new_val # ignoring IndexError; ~~~. So I don't think you'd have to worry about these details: any implementation with low overhead that would allow me to get the states from `mesolve` as well as tweak the control fields for the next time step should be sufficient. In particular, the `.step` that you discuss in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451 looks very much like it's going in the right direction! The one option from the earlier https://github.com/qutip/qutip/issues/1571#issue-917391349 that might *not* work very well is callback functions. I *might* be able to work around that, but it wouldn't really fit into the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:4071,wrap,wrapper,4071,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['wrap'],['wrapper']
Integrability,"fine the `__jax_array__` interface). While I think that Qobj is a very qutip-like principle, I see no problems in namespacing. > 2- having the check in __init__ . Again, I think that your observation is right. I thought about it only after I submitted the post above. The way numpy does it is that `__array__(self, dtype)` takes only one argument, but I think we can do better and better respect the API set by qutip. ; That is why I was suggesting that `object.__qutip_qobj__` should not return a Qobj directly, but rather the data needed by QuTiP to construct a Qobj, and qutip should be free to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1183,interface,interface,1183,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,1,['interface'],['interface']
Integrability,"g propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatev",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:8430,interface,interface,8430,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"g we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tenso",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2610,rout,routine,2610,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['rout'],['routine']
Integrability,"genbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; contro",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1312,depend,dependent,1312,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['depend'],['dependent']
Integrability,"h higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventually favourable to this, so I propose we focus the discussion only on this point, and leave aside implicit or explicit conversion discussions. . I'll gladly open another issue to discuss implicit conversion, if you want, or we could organise a small round table among a bunch of developers to talk about this on skype, but for now, all i'm asking, is to agree on the design of an interface to ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:2472,integrat,integrating,2472,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,2,"['integrat', 'wrap']","['integrating', 'wrap']"
Integrability,"h your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading to surprising behavior. From my point of view, no package really owns `+` so any conversion would be implicit.; But `qutip.groundstate(netket_operator)` is in itself an explicit cast. I am explicitly asking to qutip `please give me the ground state of this obj",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:2261,interface,interface,2261,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['interface'],['interface']
Integrability,"han,. I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it seems that there is no way to make a PR to Wiki. I can also send you the markdown source code per email like this, but I’m not sure if it works as I expected. The following is the markdown source code:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:1024,integrat,integration,1024,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['integrat'],['integration']
Integrability,"hat a scalar is (which classes are scalars) and at what level do we define it (who is responsible for returning NotImplemented). Proposed solutions:; 1) Let the _specialisation_ return `NotImplemented` and set `isherm` only when `complex(other)` is possible. This defines what an scalar is at the _specialisation_ level. However:; - It may cause inconsistent behaviour where some operations are allowed for a data layer (`TfTensor` or any other) but not for another one. I would argue that all specialisations should accept the same input, although operations may be handled differently internally (for example, in tensorflow we want to keep the graph state).; - `NotImplemented` only makes sense for some special binary methods (`__add__`, `__lt__`, etc) as Python employs `NotImplemented` to try `other`'s binary method. My concern is that if the dispatcher is used by itself at some points of the code (such as for the solver) returning `NotImplemented` may cause wrong error messages or even unexpected behaviour with future specialisations ( for instance, although it now raises a deprecation warning, `NotImplemented` is considered as `True` when evaluated as a condition). It seems to me that we should avoid having `NotImplemented` in python space (except for arithmetic operations in a class where they are useful and always make sense).; ; 2) Simon suggested to define what a scalar is at the _dispatcher_ level (or something similar to this but correct me if I am wrong). This would require to have a function that casts any defined scalar to a complex scalar. The dispatcher would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplem",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:1409,message,messages,1409,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['message'],['messages']
Integrability,"her would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that defines what we accept as scalars. We then do: `isinstace(other, _ALLOWED_SCALARS)` and return `NotImplemented` if not there. Two options here:; 1) QuTiP allows only `numbers.Number`:; - In this case `qutip-tensorflow` can extend `_ALLOWED_SCALARS` with tf.Variable and tf.Tensor. However, if the user uses two plug-ins, say qutip-tensorflow and qutip-something-that-does-not-work-well-with-tensorflow (second plug-in), the second plug-in may not work properly. ; - The above point is not a big deal if we make clear that _ALLOWED_SCALARS must accept `complex(other)` for compatibility reasons. In this way the second plug-in can always default to `complex(other)` (this is already the default behaviour of `mul_dense`).; 2) QuTiP allows `numbers.Number`, `ndarray` of shape `(,)`, `tf.Variable` of shape `(,)` and more in the future.; - The upside of this method with respect to 3.1 is that users know which types they must accept.; - This is probably not a good idea as it means qutip has to handle new dependencies (tensorflow and probalby more in the future).; - This _still_ defines what an scalar is at he `Qobj` level. I think this is not bad as it seems to be the only way of avoiding `NotImplemented` at Python space exept for in special methods (`__mul__`, ...). I think that 3.i is the closest to an ideal solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:3692,depend,dependencies,3692,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['depend'],['dependencies']
Integrability,"ict; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245613247>:; >; > > + IVP solvers. Can be overridden if desired (e.g. for; > + debuggin/troubleshooting).; >; > With overwrite you mean using quicksolve with non-zero time_sense?; > If so, how to overwrite it?; > ⬇️ Suggested change; >; > - IVP solvers. Can be overridden if desired (e.g. for; > - debuggin/troubleshooting).; > + IVP solvers. Can be overridden if desired (e.g. for; > + debuggin/troubleshooting).; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245614869>:; >; > > + List of lists of [collapse operator,collapse operator rate] pairs; > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-independent/most strict; > + secular approximation.; > +; > + quicksolve: Boolean; >; > Input that change how the computation is done should be in options.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245616491>:; >; > > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + return total_R_tensor; > +; > +; > +def flimesolve(; > + H,; > + rho0,; > + taulist,; > + T,; > + Nt=None,; >; > There is no docstring entry for Nt.; > ------------------------------; >; > In qutip/solver/fl",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:7767,depend,dependent,7767,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependent']
Integrability,"ing logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:3323,depend,dependent,3323,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,4,['depend'],['dependent']
Integrability,"is about the conversion of operators into operator-kets when moving to the superoperator formalism.; - In theory it should recognise a suitable `dims`, but right now construction will be faster if you provide `type='super'` as well. Construction speed is hugely improved in `dev.major`. You only need to define `superrep` if you're giving us a Choi (`superrep='choi'`) or chi (`superrep='chi'`) matrix instead.; - No, it should really be any indexable quantity (requiring list is a historical artifact, not a conscious choice). The entire parsing structure of dimensions objects are going to change in 5.0 (though the list structure will still work). This should even give you more freedom, if you need it - I've got some plans for vastly improved handling of restricted-entry Hilbert spaces (basically spaces that are small embeddings into a larger space that's all 0).; - I am very strongly against accepting this (like I said above):. > Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions.; ; To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. You can see that it didn't work as intended, because they've had to add `__array_function__` and other additional methods on top to start to make it work, and it's still not perfect - even `scipy.sparse` have/had problems implementing them. While it might work in your particular case, making sure that nothing funny happens in the abstract across _all_ possible implementors of the interface while still having it do something useful is a very tricky problem, as evidenced by Numpy. Any conversion is going to be lossy for some people (perhaps not you, but it will be for others), and that means the behaviour for users will be surprising in some cases. In my opinion, if we're going to have a `__qutip_qobj__` interface, the interface should be defined for one operation only, and should never be called implicit",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:1734,interface,interface,1734,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['interface'],['interface']
Integrability,"is is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using what",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:10881,interface,interface,10881,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"itten it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/k",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6221,integrat,integrator,6221,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Integrability,"just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use othe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:11860,integrat,integration,11860,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,3,['integrat'],"['integration', 'integrator']"
Integrability,"k for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5517,depend,dependence,5517,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependence']
Integrability,"ks directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:11089,interface,interface,11089,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"le for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing the same thing alive in the library at once, but we can't detect what version of an interface a downstream package requires (not keen on the idea of a `__qutip_qobj_api_version__` flag!!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:7359,interoperab,interoperable,7359,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,4,"['interface', 'interoperab']","['interface', 'interoperable']"
Integrability,"les in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance improvement. It improves the organization of the code, allows greater flexibility in adding new things to an existing class and modifying it easily. In terms of user experience, this means less clutter in the code and verbosity of arguments. You can initialize something once and keep re-calculating things by dynamically changing the parameters and calling the `class` method. If it does not hurt to slowly shift in this direction then I think we should go for it. If there is an alternative reason for not having classes then please let us know as the cons @bencbartlett mentions has more to do with following qutip precedent than some fundamental disadvantage in performance or use. @ajgpitch @nonhermitian",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:1754,wrap,wrappers,1754,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,1,['wrap'],['wrappers']
Integrability,"lready. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new formats), and I think the benefits of a priority queue of allowed converters outweighs it in convenience for users.; - It involves some global state of the `qutip` library, which _may_ cause problems for multiprocessing if somebody tries to register a `lambda` converter (can't pass through `pickle`, though I'm not 100% on whether module-level stuff needs to), and of course there's the query of what happens when converters are registered in separate processes. We already have this ""problem"" in 5.0 though, because that's how the entire underlying dispatch mechanism is handled; we can just require that converters must be pickle-able.; - If a downstream package wants to lazily `import qutip` (we're a pretty heavy import right now), it's harder in this method; you'd basically have to ask a user to call `otherlibrary.register_qutip()`. For one, I'm going to put some effort into making `import qutip` take much less time for 5.0 (the main problem right now is we essentially eagerly import all of scipy and IPython if it's around), so that'll make it a bit easier. For two, a single initialisation statement isn't _necessarily_ a terrible thing; users can decide for themselves if they want to install the implicit integrations, but this is definitely an inconvenience relative to the magic method. ---. Apologies that I'm not responding super quickly to everything - I'm not the only main QuTiP dev (and I can only work on QuTiP occasionally anyway), so I'm giving others time to read and think about the proposals as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:8476,integrat,integrations,8476,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['integrat'],['integrations']
Integrability,"lution that works for both. > * What is the advantage of this over using the existing superoperator representations?. I don't think there is one, per se, in the same sense that there's no strict advantage to superoperators over Choi operators over χ operators — each is useful in different contexts, such that QuTiP supports all three in order to allow users to pick the right representation for their problem. Similarly, operator-sum decompositions of channels are quite common and are useful in some special circumstances (e.g.: expressing a Choi-rank–sparse channel without requiring a 4^n × 4^n matrix). In the Quantum Development Kit, for instance, we use `qutip.to_kraus` to express user-supplied superoperators, Choi operators, and χ operators in terms of an operator-sum decomposition that is then passed to the underlying open systems simulator. While the operator-sum decomposition is quite useful internally to the simulator, that's not a detail that we want to enforce upon users, such that QuTiP's support for multiple superoperator representations is quite useful in presenting a user-friendly interface for configuring noise models. > * Can this advantage be carryied over into, e.g., using solvers, eigenvalue finding, etc?. I'm not sure I entirely follow, sorry?. > * Would it be better to have a new object, sort of like QobjEvo but for sums rather than evolutions?. Perhaps, but at least for the operator-sum decomposition of channels, it would feel a bit weird to me to have superoperators, Choi operators and χ operators all have one Python type, but for Kraus representations to have a fully different Python type. Whether I represent Λ(ρ) by 0.9 𝟙ρ𝟙 + 0.1 𝑋ρ𝑋 or {√(0.9) 𝟙, √(0.1) 𝑋}, they both represent the same function from density operators to density operators. > * How do you see the various mathematical operations working?. My thought here would be that an operator-sum decomposition of a channel is just that: a representation of a channel. Thus, if `lambda_` is a `Qo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574:2522,interface,interface,2522,https://qutip.org,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574,1,['interface'],['interface']
Integrability,"lves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately, you've already done most of its setup, so the time penalties should be much less than the current system (i.e. you avoid several Kronecker products and safety checks on the time-dependence terms because you've done them once at the start). In theory, that should already work from at least 4.5 onwards, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internal",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:1825,depend,dependence,1825,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['depend'],['dependence']
Integrability,"ly useful and will simplify the code inside the propagator a bit. I removed `.evolve_dm`. > **For `.sys_dims`**:; > ; > The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise.; > ; > I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. Changed in HEOMSolver. Since environment only means something for HEOM, so it took some time to understand what it referred to. Adding the change elsewhere would be confusing. ; > **Specifying which solvers support propagators**:; > ; > Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them. There is only one class for propagator and I don't see us needing any other, so there is no use for a `propagator_class` . We could have a `support_propagator` flag, but I prefer it this way as we can set a special error message for `HEOMSolver`. ; `HEOMSolver` is the only exceptions where we could support it but choose not to take the time to implement it. ; All deterministic solver we have can be used for propagator, trajectories solver don't have a properly defined propagator for single trajectory and I don't see any use to create a propagator for the averaged states. It would take a lot of trajectories to obtain what is effectively mesolve's propagator. . We could add the flag to the integrator instead, some krylov integrator cannot evolve 2D states, but it's the only one we have plan for and it's not merged yet...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120:1798,message,message,1798,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120,3,"['integrat', 'message']","['integrator', 'message']"
Integrability,"m two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and density matrix ... ok; > > > expect: operator and ket ... ok; > > > expect: operator list and state ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constan",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:3007,depend,dependent,3007,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependent']
Integrability,"m_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no other package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. having the check in `__init__` might not be correct - it feels like it belongs in `__new__` to me. `__init__` modifies an object that's already been created in Python-space, whereas `__new__` allows you to replace the object creation entirely.; 3. we need to take care to do this in a way that still allows QuTiP to iterate and improve `Qobj.__init__` between major versions. If _we_ define a public interface like this rather than having external libraries provide their own implementations, it puts the burden of maintain compatability on us, and takes it off downstream packages, who are able to define version requirements. For example, calling `otherlib.obj.toqobj()` and having it fail with QuTiP next.0 makes it clear that `otherlib` isn't compatible with QuTiP next, whereas `Qobj(otherlib.obj)` failing would (rightly) be taken as QuTiP being at fault, which stymies our development a little because we're forced to be more conservative than we otherwise would be with our constructor. This is going to be a particular problem with handling `dims`, since we're talking about completely changing the structure for how that's managed internally to help us in other parts of our library.; 4. what will happen with all the other keyword arguments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:2505,interface,interface,2505,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interface']
Integrability,"ments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj.__init__` like normal, but now with our new `Qobj` instance as the argument. This would have a slightly nontrivial interaction with the `copy` keyword, I imagine, but not an unsolvable one.; - error if you pass something that defines `__qutip_qobj__` in addition to keywords. This isn't ideal because it gives `Qobj` special treatment - additional kwargs can override `Qobj` settings if they're compatible. ---. Just in the interest of completeness, let me also just bring up some of the sweeping changes we'll bringing in in QuTiP 5.0 as well, which massively overhaul how `Qobj` is constructed, and how its data is stored. These aren't _directly_ applicable to the current discussion, but they're worth keeping in mind since they're a huge overhaul of how things will be handled, and may have some implications for how implementors of this interface might behave. The new `Qobj` will no longer have the same `fast_csr_matrix` type as its `data` attribute, but instead will have an extensible data type. The two that will be distributed with the library will be `Dense` and `CSR` (which simply do what they say on the tin), and all linear algebra operations between multiple `Qobj` are handled by a custom multiple-dispatch system that allows additional specialisations to be added in a similar way to Julia. Say you want to define `matmul` between `Dense` on the left and `CSR` on the right to produce a `CSR` output (a specialisation that we likely won't ship with because it's unlikely to be efficient). You'd write your function; ```python; def matmul_dense_csr_csr(left, right):; ...; return out; ```; and then because unlike Julia it's not built-in, you just manually add it to the dispatch table for `matmul`:; ```python; qutip.data.matm",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:4449,interface,interface,4449,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interface']
Integrability,"most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2834,wrap,wrapper,2834,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['wrap'],['wrapper']
Integrability,"mple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H with constant collapse ... ok; > > > Monte-carlo: Constant H with single collapse operator ... ok; > > > Monte-carlo: Constant H with single expect operator ... ok; > > > Monte-carlo: Collapse terms constant (func format) ... ok; > > > Monte-carlo: Collapse terms constant (str format) ... ok; > > > Monte-carlo: Time-dependent H (func format) ... ok; > > > Monte-carlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:4458,depend,dependent,4458,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependent']
Integrability,"much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or `pytest -m ""mark logic""` (e.g. `pytest -m ""not slow""`) to hit specifically marked tests. Perhaps most powerfully, and one I use a lot when writing these, you can do `pytest -k ""substring logic""` to run every test (potentially in the specified file(s)) that ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:2218,depend,dependency,2218,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['depend'],['dependency']
Integrability,"n at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUC",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2081,message,message,2081,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['message'],['message']
Integrability,"n my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`. Discussed more at the top.; - CuPy (CUDA operations on ndarray-likes) explicitly does not allow implicit conversion to `np.ndarray` (see cupy/cupy#3421) for performance reasons, but does implement `__array_ufunc__` and `__array_function__`.; - pydata/sparse (nd-sparse _arrays_ instead of scipy.sparse's sparse _matrices_): always implement `__array_ufunc__` and `__array_function__` because they are trying to be a sparse version of `ndarray`. By default, they do not implement `__array__` for performance/memory reasons, but they do allow turning it on by an environment variable. Do not implement anything:; - JAX (autodiff) tries really hard to replace numpy rather than interoperate with it; - scipy.sparse matrices are intended for use with a _matrix_ interface, not a broadcast-able _array_ interface. They specifically document that they will not provide this interface (see scipy/scipy#12279). Somewhat weirdly, they do have custom methods for some elementwise ufuncs, though (like `np.sin`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:7727,interface,interface,7727,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,3,['interface'],['interface']
Integrability,"n't have all the same multiple-dispatch niceties that Julia has, so at the end of the day, we have to add in a method with a ""magic"" name somewhere, and it all just comes down to choosing the name of the method. The downside to having a magic name is that it means we have to eschew proper namespacing; what if another library one day wants to call their interface the same thing? Then it's completely impossible for a downstream library to interoperate with both. Having conversions be a non-special method of the downstream class, and leaving our constructor unaware of them alleviates that issue. Numpy can get away with squatting the `__array__` name because they're _huge_, but I would argue that if we do it, we could actually _harm_ the quantum software ecosystem in the long-run - what happens when a package better than QuTiP comes along that wants to call its objects `Qobj` as well? Let's face it - it's a pretty straightforward name!. All that said, I am very aware that not everyone agrees with me on this, and I _am_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no other package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. having the check in `__init__` might not be correct - it feels like it belongs in `__new__` to me. `__init__` modifies an object that's already been created in Python-space, whereas `__new__` allows you to replace the object creation entirely.; 3. we need to take care to do this in a way that still allows QuTiP to iterate and improve `Qobj.__init__` between major versions. If _we_ define a public interface like this rather than having external libraries provide their ow",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:1622,interface,interfaces,1622,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interfaces']
Integrability,"ndarray(dtype=object)` arrays behaved when containing objects that all implemented `__array__`. To get around _some_ of these problems, they've introduced `__array_function__` and `__array_ufunc__`, though to me at best these are bandages. Those two concerns aren't immediately applicable in QuTiP, but they're sort of indicative of potential problems when using a `__qutip_qobj__` method implicitly in functions like `Qobj.__add__`. These are where it becomes very evident that Julia-style programming doesn't apply in the same way in Python. Python is only a single-dispatch language, so `a + b` will dispatch using the table of `a` predominantly, whereas `b + a` will dispatch on `b`. In a proper multiple-dispatch library the rules are separate to the classes, so neither class is called preferentially, there's just one rule and either library can define it. My point with this is that if `Qobj.__add__` has a case where it handles Qobj-like types, then we prevent the other library from overriding the method. Multi-methods like this simply don't work the same in Python as they do in Julia, so even if `Qobj` implements interfaces from a variety of other libraries, we'd never get good consistent behaviour with functions like this. Operations that ought to be commutative like `+` would become dependent on operand order. To some degree, implementing the interface would be a guarantee that an object would always be able to follow QuTiP's semantics, otherwise it would just be annoying to users - _sometimes_ an object would be able to be used implicitly, sometimes not. I know the ""Python way"" is supposedly ""try it and see"", but if you're doing any serious development, that quickly becomes unreasonable if a type works some times, but not others. The other part of the Python way is ""explicit is better than implicit"", and here having an explicit type conversion to me is just being explicit about which library's semantics you want to follow, which is easier to read and easier to debug.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108:1744,interface,interfaces,1744,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108,3,"['depend', 'interface']","['dependent', 'interface', 'interfaces']"
Integrability,"ng the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just process its options there. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:1027,integrat,integrator,1027,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,3,['integrat'],['integrator']
Integrability,"on makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162) being a particular example. In particular, the interface we define there is strictly for a single time step, makes no reference to `tlist` and we use ``H=[H0, [H1, u]]`` where `u` is a scalar for that particular timestep. However, I can easily write a wrapper around an `mesolve` that would work something along the lines of the pseudo-code from https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563:. ~~~; for (i, state) in enumerate(; mesolve([H0, [H1, ctrl_array]], state0, list); ):; # assuming `state` is at tlist[i]; new_val = calculate_control_value_for_next_step(state); ctrl_array[i] = new_val; ctrl_array[i+1] = new_val # ignoring IndexError; ~~~. So I don't think you'd have to worry about these details: any implementation with low overhead that would allow me to get the states from `mesolve` as well as tweak the control fields for the next time step should be sufficient. In particular, the `.step` that you discuss in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451 looks very much like it's going in the right direction! The one option from the earlier https://github.com/qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:3866,interface,interface,3866,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['interface'],['interface']
Integrability,"or Newton polynomials). That work hasn't really been going anywhere lately, though. It may or may not end up being faster than `mesolve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes ava",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:1938,depend,dependencies,1938,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['depend'],['dependencies']
Integrability,"or each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfied with how the new rhs functions work I'll merge the branch sme-rhs-restructuring into qutip master and then feel free to submit a pull request with your milstein rhs implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1770,integrat,integrator,1770,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['integrat'],['integrator']
Integrability,"oscillator in ground state ... ERROR; > correlation: legacy me and es for oscillator in steady-state ... ok; > correlation: comparing me and es for oscillator in steady-state ... ok; > correlation: legacy spectrum from es and pi methods ... ok; > correlation: comparing spectrum from es and fft methods ... ok; > correlation: comparing spectrum from es and pi methods ... ok; > correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:3276,message,message,3276,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['message'],['message']
Integrability,"plicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:3921,message,message,3921,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['message'],['message']
Integrability,"pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:9113,message,message,9113,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['message'],['message']
Integrability,"r (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7041,integrat,integrator,7041,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Integrability,"r guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method for converting `Qobj` to `ndarray` - `Qobj.full()`, similar to `scipy`'s `spmatrix.toarray()` - so `Qobj.__array__` was never a _necessity_, just a convenience in some workflows. Given the tools we can use to suppress the ufunc behaviour, the only question we need to decide on is whether that particular convenience (converting a single `Qobj` to `ndarray` with `np.array` rather than `Qobj.full`) is worth the loss of another (it's now rather faffy to put `Qobj` into an `ndarray`). Both have simple alternatives and I'll go along with either, though my personal preference is not to define `Qobj.__array__`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:3159,interface,interface,3159,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['interface'],['interface']
Integrability,"rate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:10158,interface,interface,10158,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"rator we're looking for. `G` is anti-Hermitian, and so it shares its eigensystem (up to scaling of the eigenvalues) with the Hermitian `i G` and consequently is diagonalised by a unitary formed of its eigenvectors. Now `S = i G / abs(alpha)` is a tridiagonal Hermitian, and with a similarity transformation we can find a _real-symmetric_ tridiagonal `T = P^-1 . S . P` for some diagonal unitary `P` (which is easy to calculate). The reason for scaling out `alpha` here should become clear at the end. The main diagonal of `T` is all zeros, and the first sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:1353,wrap,wrapped,1353,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['wrap'],['wrapped']
Integrability,"ray. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>dot</code> method that act the same a sparse array's one. This is not needed.; * [x] The <code>dims</code> of the output are not kept at <code>evolved_states = map(Qobj, evolved_states[1:-1]</code> --> **Separated into two variables. Now dimensions are also be kept.**; * [x] Why make <code>lanczos_algorithm</code> part of the public interface? --> **Mistake; corrected**",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:2946,interface,interface,2946,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['interface'],['interface']
Integrability,"re, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2073,contract,contraction,2073,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['contract'],['contraction']
Integrability,"rer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does /not/ depend on the truncation ; > parameter. Specifically, the upper-left portion of the matrix that ; > |qutip.squeeze| outputs converges to my |squeeze| function for large |n|.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661>, or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqdPPw6WOAYMpYw_kA9pRxVhgVyxIks5rlYF9gaJpZM4MbmLX>.; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284316:1989,depend,depend,1989,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284316,2,['depend'],['depend']
Integrability,"rlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5446,depend,dependence,5446,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependence']
Integrability,"rmed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventual",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:2185,interface,interface,2185,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['interface'],['interface']
Integrability,"ropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:8198,interface,interface,8198,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"rray. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (mostly elementwise operations or reductions). Several libraries implement only these, but _not_ `__array__`, but given my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:6032,rout,route,6032,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['rout'],['route']
Integrability,"s (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. ; `step` was renamed to `integrate` a while ago. Good catch!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:2086,integrat,integrate,2086,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,2,['integrat'],['integrate']
Integrability,"s and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (O",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1368,depend,dependent,1368,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['depend'],['dependent']
Integrability,"s tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the tests that are being ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:1048,depend,dependent,1048,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['depend'],['dependent']
Integrability,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2780,depend,depending,2780,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['depend'],['depending']
Integrability,"stalled.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H with constant collapse ... ok; > > > Monte-carlo: Constant H with single collapse operator ... ok; > > > Monte-carlo: Constant H with single expect operator ... ok; > > > Monte-carlo: Collapse terms constant (func format) ... ok; > > > Monte-carlo: Collapse terms constant (str format) ... ok; > > > Monte-carlo: Time-dependent H (func format) ... ok; > > > Monte-carlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as fu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:4400,depend,dependent,4400,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependent']
Integrability,"t handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventually favourable to this, so I propose we focus the discussion only on this point, and leave aside implicit or explicit conversion discussions. . I'll gladly open another issue to discuss implicit conversion, if you want, or we could organise a small round table among a bunch of developers to talk about this on skype, but for now, all i'm asking, is to agree on the design of an interface to allow easy conversion of objects to qutip objects.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:3536,interface,interface,3536,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['interface'],['interface']
Integrability,"te` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L312) in Krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) with something that's reentrant so I don't have to [re-initialize the integrator in every time step](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L244) , that might be a significant performance boost already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:13066,integrat,integrate,13066,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['integrat'],"['integrate', 'integrator']"
Integrability,"thanks for the comment, I didn't know about `qutip.propagator`. > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple. cool, can i learn more about this from you?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660472157:152,protocol,protocols,152,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660472157,1,['protocol'],['protocols']
Integrability,"the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2007,depend,depend,2007,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['depend'],['depend']
Integrability,"tip.qeye(2))); array([[0.84147098+0.j, 0. +0.j],; [0. +0.j, 0.84147098+0.j]]); ```; Alternatively, if people _really_ want to be able to use ufuncs on `Qobj`, it is possible to define `__array_ufunc__` in such a way that we allow only some `ufuncs` to operate. Doing this leaves us susceptible to problems interacting with other libraries that implement this, though, beacuse whichever class has the highest `__array_priority__` gets to dictate what makes sense. Unless there's a really clear _need_ for this, I don't think it's a good idea. For completeness, the rest of this comment is stuff I find out while researching. ## The `__array__()` and `__array_wrap__()` methods. These have been special methods understood by numpy since at least 1.3 (2009 - the oldest docs still on scipy.org), and I imagine long before then too. `__array__` is mentioned (and still is) in the documentation of `np.array`, which is unchanged since 2009 and says that its argument should be; > An array, any object exposing the array interface, an object whose `__array__` method returns an array, or any (nested) sequence. and `__array_wrap__` is like the reverse - it's for coercing numpy arrays back into this class. If we were to keep `__array__` in `Qobj`, we should also implement `__array_wrap__` for coercion back (something that isn't currently implemented). At the time and up to inclusively 1.19, the presence of `__array__` caused otherwise scalar types passed alone to `np.array` to return the output of `input.__array__(*args, **kwargs)`, instead of becoming a 0D numpy array (like `np.array(1)` does). Taken purely alone, that could make sense as something we implement. However, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:3198,interface,interface,3198,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interface']
Integrability,"tructure of dimensions objects are going to change in 5.0 (though the list structure will still work). This should even give you more freedom, if you need it - I've got some plans for vastly improved handling of restricted-entry Hilbert spaces (basically spaces that are small embeddings into a larger space that's all 0).; - I am very strongly against accepting this (like I said above):. > Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions.; ; To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. You can see that it didn't work as intended, because they've had to add `__array_function__` and other additional methods on top to start to make it work, and it's still not perfect - even `scipy.sparse` have/had problems implementing them. While it might work in your particular case, making sure that nothing funny happens in the abstract across _all_ possible implementors of the interface while still having it do something useful is a very tricky problem, as evidenced by Numpy. Any conversion is going to be lossy for some people (perhaps not you, but it will be for others), and that means the behaviour for users will be surprising in some cases. In my opinion, if we're going to have a `__qutip_qobj__` interface, the interface should be defined for one operation only, and should never be called implicitly. I'm not entirely close-minded to alternate views here, but given the problems Numpy had (whose team I have no doubt are much smarter than I am), I'm really not enthusiastic about any implicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:2301,interface,interface,2301,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['interface'],['interface']
Integrability,"umerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6118,integrat,integrators,6118,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrators']
Integrability,"updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Total run time: 0.90s; Total run time: 1.13s; Total run time: 1.15s; Total run time: 1.41s; Total run time: 1.66s; Total run time: 2.03s; Total run time: 2.47s; {'solver': 'pc-euler'}; Total run time: 0.38s; Total run time: 0.46s; Total run time: 0.58s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.00s; Total run time: 1.26s; Total run time: 1.49s; {'solver': 'milstein'}; Total run time: 0.31s; Total run time: 0.39s; Total run time: 0.46s; Total run time: 0.56s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.05s; Total run time: 1.24s; {'solver': 'milstein-imp'}; Total r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:1618,depend,dependence,1618,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['depend'],['dependence']
Integrability,"ver-package=qutip qutip; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear in",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1209,depend,dependent,1209,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['depend'],['dependent']
Integrability,"will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:4959,interface,interface,4959,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['interface'],['interface']
Modifiability," br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (OO) ... ok; control.pulseoptim: Hadamard gate gradient check ... ok; control.pulseoptim: QFT gate with linear initial pulses ... ok; control.pulseoptim: QFT gate with linear initial pulses (bounds) ... ok; control: data dumping ... ok; control: unitarity checking (via dump) ... ok; control.pulseoptim: state-to-state transfer ... ok; control.pulseoptim: state-to-state transfer (Qobj) ... ok; control.pulseoptim: amplitude damping channel ... ok; control.pulseoptim: coupled oscillators (symplectic dynamics) ... ok; control.pulseoptim: Hadamard gate using CRAB algorithm ... ok; control.pulseoptim: Hadamard gate (loading config from file) ... ok; control.pulsegen: Check periodic control functions ... ok; control.pulseoptim: Hadamard gate with fixed and time varying drift ... ok; control.pulseoptim: Hadamard gate with fixed and time varying ctrls ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in fock state ... ok; correlation: legacy me and es for oscillator in steady-state ... ok; correlation: comparing me and es for oscillator in steady-state ... ok; correlation: legacy spectrum from es and pi methods ... ok; correlation: comparing spectrum from es and fft methods ... ok; correlation: comparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission corr., H td (str-list td format) ... ok; correlation: comparing TLS emission corr., H td (np-list td format) ... ok; correlation: comparing TLS emission ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:4447,config,config,4447,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['config'],['config']
Modifiability," module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exactly what I was doing. 6. Yeah, I'm going to add additional `imul`, `ineg` and `idiv` routines as dispatched operations. 7. LAPACK/BLAS as far as we can. I've no pretense to being able to write faster code than hardware-specific optimised stuff for matrices. I haven't actually written most of the numerical code in this PR either - it's just ported from current `qutip`, with the variable names changed to be more descriptive.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:2803,variab,variable,2803,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['variab'],['variable']
Modifiability,"'t access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6497,refactor,refactoring,6497,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['refactor'],['refactoring']
Modifiability,"(target). numpy_fidelity = np.abs(np.vdot(final_state.full(), target_state.full())); qutip_good_fidelity = np.abs((final_state.dag() * target_state)[0, 0]); qutip_bad_fidelity = qutip.fidelity(final_state, target_state); print('Correct: {}'.format(numpy_fidelity)); print('Still correct: {}'.format(qutip_good_fidelity)); print('Wrong: {}'.format(qutip_bad_fidelity)). # Correct: 0.9999999999849929; # Still correct: 0.9999999999849929; # Wrong: 1.0000000026189553; ```. The problem is clearly in the fact that you compute the fidelity of ket states by converting them into density matrices and using the general formula:; https://github.com/qutip/qutip/blob/564c987bdca385ae179730d0aad7b0d1e624e14d/qutip/metrics.py#L88-L113. This is fine in general, but can be very inefficient for large states, and is less numerically stable. An easy solution is to just compute the fidelity as the inner product when both states are kets. Moreover, the general formula might also be improvable: consider the following example (which uses the variables defined in the previous snippet):. ```; final_dm = qutip.ket2dm(final_state); target_dm = qutip.ket2dm(target_state); sqrt_final_dm = final_dm.sqrtm(); sqrt_target_dm = target_dm.sqrtm(); eig_vals = (sqrt_final_dm * target_dm * sqrt_final_dm).eigenenergies(); bad_fid = np.sqrt(eig_vals[eig_vals > 0]).sum(). prod_sqrt = (sqrt_final_dm * sqrt_target_dm); better_fid = scipy.linalg.svdvals(prod_sqrt.full()).sum(). print('bad fid: {}'.format(bad_fid)); print('better fid: {}'.format(better_fid)). # bad fid: 1.000000072436338; # better fid: 0.9999999999849937; ```; Here, I'm proceeding similarly to what qutip currently does, by converting to dms and then applying the general formula. However, I compute the general fidelity by summing the singular values of $\sqrt\rho \sqrt\sigma$, instead of summing the square roots of the eigenvalues of $\sqrt\sigma \rho \sqrt\sigma$. Mathematically, this is equivalent, and in this particular case does at least give a ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/925#issuecomment-542318121:1439,variab,variables,1439,https://qutip.org,https://github.com/qutip/qutip/issues/925#issuecomment-542318121,1,['variab'],['variables']
Modifiability,"* imports first except. ```from qutip.qobj import *```. then we can remove the numpy and scipy checks but numpy is still used to setup pyximport in . ```; # Setup pyximport ; import pyximport; os.environ['CFLAGS'] = '-O2 -w -ffast-math'; pyximport.install(setup_args={'include_dirs': [numpy.get_include()]}); del pyximport; ```. Then we can move the section regarding multiprocessing to some appropiate place. Currently it is used in the following files. Can we put the multiprocessing stuff in a file called `multiprocessing_config.py` and run it to get the settings in `__init__` at all the places where we need multiprocessing.; ```; /Users/shahnawaz/dev/qutip/qutip/__init__.py:; 33 from __future__ import division, print_function, absolute_import; 34 import os; 35: # Fix the multiprocessing issue with NumPy compiled against OPENBLAS; 36 if 'OPENBLAS_MAIN_FREE' not in os.environ:; 37 os.environ['OPENBLAS_MAIN_FREE'] = '1'; ..; 149 # cpu/process configuration; 150 #; 151: import multiprocessing; 152 ; 153 # Check if environ flag for qutip processes is set; ...; 164 qutip.settings.num_cpus = info['cpus']; 165 else:; 166: qutip.settings.num_cpus = multiprocessing.cpu_count(); 167 ; 168 ; ...; 270 # Clean name space; 271 #; 272: del os, sys, numpy, scipy, multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_count()); 94 return {'os': 'Windows', 'cpus': ncpus",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:1003,config,configuration,1003,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['config'],['configuration']
Modifiability,", multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_count()); 94 return {'os': 'Windows', 'cpus': ncpus}; 95 . /Users/shahnawaz/dev/qutip/qutip/mcsolve.py:; 225 if config.options.num_cpus == 1:; 226 # fallback on serial_map if num_cpu == 1, since there is no; 227: # benefit of starting multiprocessing in this case; 228 config.map_func = serial_map; 229 ; ...; 264 time_type, h_stuff, c_stuff = _td_format_check(H, c_ops, 'mc'); 265 c_terms = len(c_stuff[0]) + len(c_stuff[1]) + len(c_stuff[2]); 266: # set time_type for use in multiprocessing; 267 config.tflag = time_type; 268 . /Users/shahnawaz/dev/qutip/qutip/parallel.py:; 33 """"""; 34 This function provides functions for parallel execution of loops and function; 35: mappings, using the builtin Python module multiprocessing.; 36 """"""; 37 __all__ = ['parfor', 'parallel_map', 'serial_map']; 38 ; 39 from scipy import array; 40: from multiprocessing import Pool; 41 from functools import partial; 42 import os. /Users/shahnawaz/dev/qutip/qutip/settings.py:; 32 ###############################################################################; 33 """"""; 34: This module contains settings for the QuTiP graphics, multiprocessing, and; 35 tidyup functionality, etc.; 36 """"""; ```. Can the `pyximport` be dealt in a similar way by having a pyximport_config.py and running it from all the places which needs C compilation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:2497,config,config,2497,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['config'],['config']
Modifiability,"> General comment about plotting on the Bloch sphere:; > ; > QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are _not_ required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix.; > ; > There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested.; > ; > I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now.; > ; > I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling.; > ; > My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though. Thanks a lot, Simon (@hodgestar). My modification to the bloch.py follows what you have suggested. ; Also, the code can plot arcs inside and outside the bloch sphere too, and the line segment can be drawn between any two points. And the inputs have to be in cartesian coordinates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018:985,flexible,flexible,985,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018,1,['flexible'],['flexible']
Modifiability,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:1456,layers,layers,1456,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['layers'],['layers']
Modifiability,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:1146,evolve,evolver,1146,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,1,['evolve'],['evolver']
Modifiability,"> It's very clean, I really like the `set & set` and reusing the classes. Thanks!. > But in v4, while we used `f(t, args)` in most examples, we never said that it should be the exact signature up to variable name, so I don't think it an appropriate check for which version to use. Ideally, the check should be good enough we don't need to change any tests not directly related to the addition of this feature. I'm open to modifying the check for QuTiP v4 functions, but I would like to keep the check simple. To quote the Zen of Python, ""If the implementation is hard to explain, it's a bad idea."". :). > Also what should; > ; > ```; > def f(t, w, a=1):; > return a; > ; > coeff = coefficient(f, args={'w':1}); > coeff.replace_arguments(a=2)(0); > ```; > ; > give? Since `a` is not given, it's not our job to update it, or should we add it to `_f_arg_names`?. I think this works fine already in this branch. `a` is included in `_f_arg_names`, so it can be specified via `.replace_arguments(...)` but since it has a default it can also be left out.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390:199,variab,variable,199,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390,1,['variab'],['variable']
Modifiability,"> There is no agreement on how this should be handled yet. It's been removed from `dev.major` with the plan to restore it before the release, but the exact interface is not fixed. It certainly will not be some special keyword in args. It could be a special value, or a special parameter / method for the solver class. Actually having a method in the solver class seems better, I suppose this is why we are going towards Solvers from the simple `mesolve` function. I am going to try and rewrite my example using the Solver class. We can probably get away with having this functionality only in the new Solver class --- benefit of a major release I guess.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362:486,rewrite,rewrite,486,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362,1,['rewrite'],['rewrite']
Modifiability,"> thanks for the comment, I didn't know about `qutip.propagator`; > ; > > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple; > ; > cool, can i learn more about this from you?. Sorry, I don't have much experience in it myself - you'll be reading about the methods in papers/lecture note by people smarter than me. We have some tutorial notebooks about optimal control using the QuTiP optimal control package here: http://qutip.org/tutorials.html#optimal-control, which you may be able to adapt to your use case. I believe there are components in there that you can subclass so that the optimiser is RL-based rather than using standard BFGS or something else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258:570,adapt,adapt,570,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258,1,['adapt'],['adapt']
Modifiability,"@Ericgig any tips how to locally run `pycodestyle` linter so that it follows same settings as `codeclimate`? When I run it locally it show way more warnings than `codeclimate`, seems a lot more restrictive. I'm sure some sort of configuration is missing. I checked the [contribution guide](https://qutip.org/docs/latest/development/contributing.html) but this particular matter is not detailed. If you explain how to run linter locally I would be happy to also update the docs and document it for the future contributors.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655#issuecomment-925558661:229,config,configuration,229,https://qutip.org,https://github.com/qutip/qutip/pull/1655#issuecomment-925558661,1,['config'],['configuration']
Modifiability,"@arnelg and @cgranade, you are both raising good points here. I'm not exactly sure what the best solution for this particular issue is, but do tend to agree with @arnelg that we do not want functions that perform unexpected actions, if possible, and that explicit is better than implicit. However, ultimately, it has to be the docstrings that should resolve any ambiguities, because not all functions can be intuitive to everyone, since we all have different backgrounds and expectations. So if the current behaviour is clearly described in the docstring, it should also be an acceptable solution I think. But one important thing that @arnelg also alluded to is that if at some point we expect that we might want to use `composite(S, O)` to mean something different than `composite(S, to_super(O))`, then we should better not implement the operator-to-superoperator promotion implicitly in `composite` now. Since the `composite` function is brand new it might be a good idea at this point to avoid doing these implicit assumptions on how it will be used until various use-cases has been explored in more details. I absolutely agree that it is great to have discussions about these kind of design issues, and it's great that you both have taken an interest in this particular issue. I also agree that Qobj.dims is a bit obscure and not that flexible, and maybe insufficient for complex cases with mixes of operators, kets, superoperators along different subsystems. This would not be an easy thing to change, but having a discussion about the short-comings and possible solutions would be great. I've created a new page on the wiki for listing various issues and design short-comings in qutip:. https://github.com/qutip/qutip/wiki/Future-Design-Changes. Feel free to add to this page and edit what's already on it (and of course, propose solutions!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58190164:1340,flexible,flexible,1340,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58190164,1,['flexible'],['flexible']
Modifiability,"@elfring The first line of the PEP `There are two main reasons for adding this feature to Python: simplicity of expression, and support for in-place operations` and the `in-place operations` mentioned are part of why `a = a + 5` is not equivalent to `a += 5` (as Jake took the time to demonstrate). I'm closing the issue, but feel free to continue the discussion here & thank you for suggesting an enhancement to QuTiP and please feel free to suggest others.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-972730767:398,enhance,enhancement,398,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-972730767,1,['enhance'],['enhancement']
Modifiability,"@hodgestar Thanks for doing it!; The custom `m_ops`, as far as I understand, would be of a form `[np.sqrt(coef)*(a+a.dag()), -1i*np.sqrt(coef)*(a - a.dag())]` where `a` would be an annihilation operator for a photon in a mode that is detected, and `coef` represents whatever happens between the emission and the detection (cavity-guide coupling, detection efficiency etc). In the current implementation it would be subset of default `m_ops`, that are formed as; ```python; for c in sso.sc_ops:; m_ops += [c + c.dag(), -1j * (c - c.dag())]; ```. As for the tests, I can think of something like this; ```python; def test_heterodyne_mesolve():; b = 1 # drive amplitude; gamma = 1 # spont. emission rate; eta = 0.3 # coupling efficiency; n_steps = 1000; n_traj = 50; ; H = np.sqrt(eta*gamma) * b * sigmay(); c_ops = [np.sqrt(gamma)*sigmam()]; psi0 = basis(2); times = np.linspace(0, np.pi*2, n_steps). n_tr = 3. sme_het = smesolve(; H,; psi0,; times,; [],; c_ops,; e_ops=[sigmax(), sigmay(), sigmaz()],; store_measurement = True,; dW_factors=[1e-5, 1e-5], # to make tests simpler; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay()],; ntraj=n_traj,; noise=123, # random seed; ); ; assert np.array(sme_het.measurement).shape == (n_traj, n_steps, 1, 2); assert all(np.isclose(np.array(sme_het.measurement).mean(axis=0)[:,0,0].T, np.sqrt(eta)*sme_het.expect[0], atol=2e-2)); ; def test_incorrect_m_ops_heterodyne_mesolve():; ; with pytest.raises(ValueError, match=""The measured operators for the heterodyne method supposed to be pairs of quadratures: m_ops should have even length.""):; sme_het_bad_mops = smesolve(; sigmax(),; basis(2),; np.linspace(0,1,10),; [],; [sigmam()],; e_ops=[],; store_measurement = True,; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay(), np.sqrt(eta)*sigmaz()], # three operators; ntraj=10,; ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548:336,coupling,coupling,336,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548,2,['coupling'],['coupling']
Modifiability,"@nathanshammah @ajgpitch @Ericgig @quantshah ; Thanks a lot for the feedback and patience. I have fixed the variable names issue, hopefully. I can make time these days. Please advise the next steps.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1066#issuecomment-568178589:108,variab,variable,108,https://qutip.org,https://github.com/qutip/qutip/pull/1066#issuecomment-568178589,1,['variab'],['variable']
Modifiability,"A few comments and questions. 1. Why are file separated by function and not by datatype? So adding a new datatype will result in modification im a lot of file making support (PR evaluation) harder.; 2. `__repr__` return a very clean output in `Qobj`. `CSR`'s is quite simple. This is because data layers are never meant to be printed directly?; 3. For solver states, we mostly use Fortran ordered array, not C ordered. Will you support both?; 4. In matmul, you use `malloc`, `calloc`, `free`. It is better to use the python PyDataMem_NEW. I never had any issue, but there can be some on windows: https://github.com/numpy/numpy/issues/8253; 5. `mat_mul` can be used inplace, but no `add_csr`. ; 6. It would be good to have inplace multiplication with a scalar instead of always making a copy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648255315:297,layers,layers,297,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648255315,1,['layers'],['layers']
Modifiability,"Additionally, from looking through your comments it appears that something; definitely went weird with formatting and/or merging. I'll comb back; through and make to fix any of these issues before I request a re-review. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839:443,variab,variable,443,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839,1,['variab'],['variable']
Modifiability,"Also, instead of adding a third entry to the nested list characterizing the time-dependence, I think the real and imag parts should be in the [1] list entry as a tuple. That way, all of the time-dependence is in a single list item. We may in the future want to add additional items to the list (e.g. on-off times for the time-dependent terms.). I also think that we should get some feedback from @ajgpitch and @cgranade. Chris has some experience with opencl, and he probably is bette suited for feedback than myself. . Another question would be the issue of maintainability. If, for some reason, you are unable to address bug issues or incompatibilities with future QuTiP versions, then can we support this large code submission without having authored it ourselves. For instance, the mcsolve_f90 routine has largely been non-maintained since Arne added it years ago.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-259879928:559,maintainab,maintainability,559,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-259879928,1,['maintainab'],['maintainability']
Modifiability,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:644,variab,variable,644,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,1,['variab'],['variable']
Modifiability,"Example implementation of `Qobj(thing)` with caveat noted below:; ```python; # qq.py; """""" A quick experiment with a Qobj creation API. """""". import qutip; import qutip.core.data. class NetketThing:; """""" An object with a __qutip_qobj__ method. """"""; def __init__(self, stuff):; self._stuff = stuff. def __qutip_qobj__(self, copy=True):; return qutip.Qobj(self._stuff, copy=copy). def _has_qutip_qobj_method(arg):; return getattr(arg, ""__qutip_qobj__"", None) is not None. def _call_qutip_qobj(arg, shape, copy=True):; # Note 1: shape argument intentionally ignored here -- arg should already; # know its dims and shape (possible a sanity check would be good); # Note 2: unfortunately, the .data object does not know the dims of; # of the Qobj, so the dims are lost. :/; return arg.__qutip_qobj__(copy=True).data. qutip.core.data.create.add_creators([; (_has_qutip_qobj_method, _call_qutip_qobj, 10),; ]); ```; Example usage:; ```python; # try_qq.py; """""" Trying out the experiment. """""". import qutip; import qq. nk = qq.NetketThing([0, 2]); q = qutip.Qobj(nk); qn = q.norm(); print(q); print(qn); ```; Explanation:; * `qutip.core.data.create` is the new Qobj data layer creation dispatcher. It's already called by `Qobj.__init__` after a few hardwired cases.; * We register a creator (i.e. a pair of functions) with priority 10. The first function checks whether `__qutip_qobj__` exists and the second function calls it if it does. Caveat:; * The creator provides no way to retrieve the `dims` from `arg` if the `arg` already knows what the `dims` should be. I can see a lot of uses for this so I propose we fix this part now regardless. Bonus:; * Adding this as a default creator gives us a good way to keep the creator list short while still supporting simple conversion of many objects to Qobjs in a flexible way. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908336732:1798,flexible,flexible,1798,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908336732,1,['flexible'],['flexible']
Modifiability,"Firstly, just to underline @jakelishman comment. We *cannot* change the public interface unless we make a new major release. I also don't like the `.N` property, but it snuck in before my time. We could look to change this in v.5, but not before. . It seems this PR does contain some enhancements that are not part of #1209. However, @mlaguna10 did seem to make quite clear that they were already working on the issue. I believe #1209 is ready to merge, but we'll wait for @BoxiLi to confirm. . So what I suggest is that we merge #1209. @MartinSandeCosta can then merge the master into this PR and see what is left that adds to enhancement request outlined #1208. Assuming (with good reason) that there are valuable additions, then we will merge this too. Thanks everyone for contributing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345:284,enhance,enhancements,284,https://qutip.org,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345,2,['enhance'],"['enhancement', 'enhancements']"
Modifiability,"General comment about plotting on the Bloch sphere:. QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are *not* required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix. There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested. I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now. I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling. My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552:956,flexible,flexible,956,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552,1,['flexible'],['flexible']
Modifiability,"Hello @hodgestar, we missed your last comment, but Nathan just notified us. We will get it all sorted out by wednesday at most. I leave a todolist to keep track of everything that @Ericgig mentioned. To-do. * [x] Include some tests like test_sesolve.py --> **Included tests with random Hamiltonian, ising transverse field and SHO. Both for states and expectation values. Lacking a testing example for callable e_ops**. * [x] Why <code>krylov_dim=30?</code> ? --> **There was a subtle physical reason, but we conclude its better to leave it as a free input without a predefined variable.**. * [x] <code>tolerance</code>, <code>store_states</code> and <code>store_final_state</code> --> **Changed as an Options qutip class, now tolerance is <code>Options.atol</code> property**. * [x] <code>e_ops</code> should also take a callable or list of mixed function and <code>Qobj</code> --> **Added support**. * [x] Remove support for <code>np.ndarray</code> --> **Removed for qutip cleanliness**. * [x] Assertion errors to specififc errors --> **Modified.**. * [x] Check that psi0 is a ket --> **Added**. * [x] If both <code>store_states</code> and <code>store_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.spar",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:577,variab,variable,577,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,1,['variab'],['variable']
Modifiability,"Hello! As @jakelishman described, you can help debug this issue by trying:. ```python; from qutip.cy.openmp.parfuncs import spmv_csr_openmp; ```. and reading the exception produced. I suspect that the `qutip.cy.openmp.*` packages will simply not have been compiled -- they're only built by QuTiP when ""--with-openmp"" is passed to `setup.py` and I think `conda install ... qutip` will not do that even when OpenMP is already installed. To correct this you will need to install QuTiP from source and pass `--with-openmp` yourself as described in https://qutip.org/docs/latest/installation.html?highlight=openmp#direct-setuptools-source-builds. We probably could make ""openmpi"" and ""no-openmpi"" builds for conda-forge by adapting the pattern in https://conda-forge.org/docs/maintainer/knowledge_base.html#openmp but that would require some work (and be a feature enhancement :).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166:718,adapt,adapting,718,https://qutip.org,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166,2,"['adapt', 'enhance']","['adapting', 'enhancement']"
Modifiability,"Hey guys, thanks for the feedback (this is the first time I have logged in to github in about a year!).. Just some replies to Paul's comments. The method is basically general, under certain assumptions about the bath spectrum density and bath temperature, so the 'system' can, in principle, be anything. I will also do so minor tweaking so it can deal with multiple baths and correlated baths. We will add some notebooks showing different examples and explaining when its valid later. . > Why is it not possible to directly calculate expectation values other than the coupling term?. Yeah there was a list of expectation values at some point, but it disappeared while we were making edits. Thanks for the reminder. Thanks for the other points, we will fix the various issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-103750029:568,coupling,coupling,568,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-103750029,1,['coupling'],['coupling']
Modifiability,"Hi @Ericgig ; Thanks for investigating this so thoroughly. ; I guess it makes sense that unpacking a dict at each call is inefficient, so I think we should drop this idea. As you have suggested previously, users can always use module variables if they wish to avoid passing vars in `args`. So I think we should aim to keep it simple. I think adding `f(t)` as a signature option will be sufficient for what @goerz wanted and would be sufficient for using a Numba jit. So, my suggestion for the next major release (v5) would be that we have only two call sigs:; - `f(t, args)` (default); - `f(t)`. For now we will have to have the three (although I don't think the `rhs_with_state` is not widely used, if at all).; - `f(t, args)` (default); - `f(t)`; - `f(t, state, args)`; The default needs to remain as it is, because it is widely used. I think it makes sense to use introspection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:234,variab,variables,234,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['variab'],['variables']
Modifiability,"Hi @jakelishman you were right about the contraction, I changed the indexes as in http://qutip.org/docs/latest/guide/guide-tensor.html so that it represents a trace-like channel. On the other hand I find that mixed dimensions operator `[[m,n], [m,n ]]` appear in some of the tests that were already in place, I will try to write my thoughts on their meaning later. I am still going to refactor this a little bit more, and tell you when it is ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708:385,refactor,refactor,385,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708,1,['refactor'],['refactor']
Modifiability,"Hi @michelinesoley,. Your bug report inspired me to dig into the `qutip.control.optimize_pulse` sparse matrix support which lead to some fixes in #1621. When you increase `N` in your example from 2 to 3, it changes the internal type used by the optimizer to represent propagators. You can also make the `N = 2` case fail by changing the last line to:. ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=True)); ```. Your example can be made to work for `N = 3` (albeit slowly) by changing the following lines:. ```python; mapped = Qobj(mapped, dims=[[N]*4 + [2]*4] * 2); ```; (which was a bug in the example itself -- it created a Qobj with the right shape but wrong dimensions) and the last line to . ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=False)); ```; For me the `N = 3` case was slower with `sparse_eigen_decomp=True`, but perhaps it will be better for your full problem. If you would like to try `sparse_eigen_decomp=True` you are welcome to try the patch in PR #1621 and I would appreciate feedback on any performance issues for larger systems. We are currently working to support bigger systems in QuTiP 5 by using the new flexible Qobj data layer (which supports both sparse and dense matrices already and will hopefully support GPU and TensorFlow matrices in the near future).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386:1250,flexible,flexible,1250,https://qutip.org,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386,1,['flexible'],['flexible']
Modifiability,"Hi Boxi,. Can you please modify the projects of the Wiki page as you deem best?; All: we can also think of changing the order of them. It may be that; project #3 is deemed the most important. Best wishes,. Nathan. Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com. On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:. > I have some detail information for the GSoC 2020 project ""Error mitigation; > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > Wiki page. I post it here so if anyone finds it nice could copy it to the; > Wiki page.; >; > I add some details based on the original description:; > ------------------------------; > 1. Error mitigation in QuTiP; >; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Request",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:949,enhance,enhanced,949,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['enhance'],['enhanced']
Modifiability,"Hi Kevin. Thanks for your efforts on this. However, I am not in favor of merging this PR in this form. It is way too intrusive on the old API, it would break backwarks compatibility for no good reason as I see it. Personally I don't think that the _2t and _1t names are that confusing. As you point out, _1t is still a two-time correlation function (a one-time correlation function would not be a correlation function, just a simple expectation value), but the _1t and _2t is intended to refer to the number of free time variables. Perhaps this should be explained more clearly in the docstrings, but I don't think it is worth changing the API for this reason. I would prefer if you added the new mc solvers using the current API conventions, and preferably without changing the me and es based solvers. If you want to propose a new API the correct way to do it would be:; 1. First discuss the idea, so that everyone interested could weight in on the naming of the functions, the style of parameters and arguments etc.; 2. Implement the new API without disrupting the previous API; 3. Deprecate the previous API, so that using it gives a warning (but still works!). ; 4. Then finally after a few release cycles we may drop the old API. This would not happen until qutip 4.0 (see http://semver.org/), which we do not plan to release anytime soon. Therefore, we cannot accept any PRs that with backwarks breaking API changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/218#issuecomment-53827562:521,variab,variables,521,https://qutip.org,https://github.com/qutip/qutip/pull/218#issuecomment-53827562,1,['variab'],['variables']
Modifiability,"Hi Nathan,. I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it seems that there is no way to make a PR to Wiki. I can also send you the markdown source code per email like this, but I’m not sure if it works as I expected. The following is the markdown source code:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:495,enhance,enhanced,495,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['enhance'],['enhanced']
Modifiability,"Hi, this is ready for review. It probably needs a lot of refactoring but I have documented all functions and provided unit tests. I made a simple script for my lab where you can specify a circuit in a text file and the outputs will be generated. You can check it out here: https://github.com/sahmed95/icm. I have an example describing the use of this module. Where do the examples go ? @ajgpitch @nonhermitian . As I mentioned, @alexandrupaler should be the right person for review. Dr. Devitt also mentioned Damian from ProjectQ (?) who could help perhaps.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-275668058:57,refactor,refactoring,57,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-275668058,1,['refactor'],['refactoring']
Modifiability,I agree with @jakelishman's general principle (and maybe we should even move the tests out of the `qutip` package for v5 still) but it's also really important to have an easy way for data layer implementations to run a comprehensive test suite *that is defined by the data layer*. I suspect that if anyone is running tests against master (i.e. what is currently dev.major) they will *want* tests to break if we add new methods. I have a slightly different proposal:. What if we create `qutip.core.data.testing` which is an explicitly exported suite of pytest classes that we intentionally expose for data layers to use? Initially the file can just import test classes from `qutip.tests.core.data`. I would also not use `__all__` in the individual test packages but instead import the test classes explicitly in `qutip.core.data.testing` so that it's 100% clear by reading just that file what the exported interface is (and adding new tests requires explicitly adding them into the exposed package).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874:605,layers,layers,605,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874,1,['layers'],['layers']
Modifiability,"I completely agree with you that random tests really aren't the right way to go in general, but right now our problem is that basically QuTiP's entire testing suite is based on randomised tests, and that's an awful lot of technical debt to overcome any time soon :(. . The `dnorm` tests have historically been a huge problem, even though basically nobody's worked on `dnorm` for a long long time now (for context, see in particular #880 and #874). We don't actually even know if the failures in `dnorm` are deterministic and reproducible, although it turns out that I had a brief look into this when I joined as a GSoC student about a year ago... I don't remember doing it at all!. I know this is super inelegant and not the perfect method, but it's kind of a nasty trade-off - I don't have time to really dig into `dnorm` (a topic I know almost nothing about) to work out an appropriate solution to temperamental errors, we do want `dnorm` to be tested since we're shipping it, and the slight flakiness keeps causing us test suite failures about 1 in 10 times. I'm somewhat opposed to fixing the random seed because having the variance over several test runs does actually help us cover more ground (eventually) - fixing it to a ""known good"" seed actually seems to me to be more of a mask of potential problems than this. Of note: the pytest plugin I'm using reports the number of reruns it performed in the analysis at the bottom - they show up in a yellow alongside the ""skips"" and ""xfails"" - so it's not completely hidden. I'd love to have a property-based testing suite like hypothesis up and running - that definitely seems like the proper solution to this in the end. In the meantime, I'm open to swapping to a fixed random seed if you think that's much better - testing is one place where I'm really aware of my lack of formal experience in software engineering, so I'm basically just learning as I go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227:1343,plugin,plugin,1343,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227,1,['plugin'],['plugin']
Modifiability,"I don't have xvfb (pytest-xvfb) installed specifically for qutip, but it is used by other packages (The general use of pytest-xvfb is to facilitate testing of GUI, graphical or windowing functionality without having an normal Xserver active. That is, it can be useful for automated CI testing of gui packages, for instance in chroots or cloud CI infrastructure). Since qutip doesn't use xvfb directly this bug won't be a problem for general CI testing, where only qutip is loaded on a cloud instance (for instance Debian testing done at https://ci.debian.net/packages/q/qutip/). But before I upload a package to the Debian infrastructure, I like to run the tests on my own system to be confident they're likely to pass. So this is where the problem happens, running tests on my own system, where I have pytest-xvfb installed for testing other packages. (pytest has this bad habit of loading all available plugins whether or not they're actually used by the tests being run. It's quite annoying actually. It would be better if it only loaded plugins specified in conftest.py). So the use case is running the qutip tests on my own system, where pytest-xvfb simply happens to be installed for other purposes not related to qutip. There are ways of working around the problem, for instance the `--no-xvfb` option could be explicitly added to the `pytest` command line. But it can be useful if the test code itself can be made robust with respect to the problem (e.g. in this case just replacing `plt.clf()` with `plt.close('all')`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791:905,plugin,plugins,905,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791,2,['plugin'],['plugins']
Modifiability,"I think `hypothesis` is the best method here in the long term, but it will most likely have to be a long-term goal. I think the main pro in favour of it is that it actually is making an attempt to remove randomness; it's attempting to comprehensively test a spanning set of input parameters, rather than just Monte-Carlo'ing our way through and hoping. There's a couple of points which make it difficult to implement:. 1. QuTiP can be quite fragile with respect to unexpected input formats, particularly in older parts of the code.; 2. Various components are only accurate up to some tolerance, and the error propagation to work out how that corresponds to useful measurable quantities can be rather tricky. Those are certainly both solvable problems, and point 1 in particular is just general improvement of usability. The second point is about designing the tests well, which again is certainly doable, but will take a while (it takes long enough just to refactor them, let alone a total rewrite of large chunks of them!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663:957,refactor,refactor,957,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663,2,"['refactor', 'rewrite']","['refactor', 'rewrite']"
Modifiability,"I was imagining something much simpler for the exception class. There is a backport of the exceptiongroup stuff to older Pythons that we could use if we wanted to: https://pypi.org/project/exceptiongroup/. It's another dependency, but it will mean that on Python 3.11 people could start using ExceptionGroup and `except*` immediately if they wanted to. Users on Python 3.10 and below would have to catch ExceptionGroup or use the backport's ugly `with catch(...)` mechanism. . Then, many years from now when Python 3.10 is obsolete, we could drop the backport entirely. Personally I'm in favour of the simpler `ParallelMapException` that doesn't inherit from all the other exceptions. Then when 3.11 is out we can make `ParallelMapException` inherit from `ExceptionGroup` and 3.11 users will be able to use `except*`. People supporting 3.10 and below will have to use `except ParallelMapException`, but that will work just as well on 3.11.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437:646,inherit,inherit,646,https://qutip.org,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437,2,['inherit'],['inherit']
Modifiability,"I would rather have the styling checks part of CI than pre-commit. Pre-commit hooks are a nice way to automate repetitive tasks, but for coding conventions, each developer tends to have their own setup (e.g. I would run black or pyflakes as a plugin in my editor, so that I get immediate feedback or fixes long before making a commit). Pre-commit hooks are also a poor choice for checking that coding style is followed, because developers will have different operating systems, difference versions of Python, black, pyflakes, etc, etc and so there are certain to be differences between what is considered correct by the scripts run by different developers. Finally, there are many valid reasons to commit broken code into branches, and I would not want to prevent that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1742#issuecomment-1001477467:243,plugin,plugin,243,https://qutip.org,https://github.com/qutip/qutip/issues/1742#issuecomment-1001477467,1,['plugin'],['plugin']
Modifiability,"I'll take a look at the merge. It seems like it might have gone bad. I'll add in some tests once I fix the merge, as well. I'll look into the diag method and try to move everything over to separate; everything as you described. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:451,variab,variable,451,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,1,['variab'],['variable']
Modifiability,"I'm not entirely sure what's being asked here. `mcsolve` evolves the state `psi0` by the given Hamiltonian for the given times, and returns a `qutip.solver.Result` object that contains various quantities, such as how the state evolved for each of the trajectories at a given time, and values of expectation operators at those times if `e_ops` is given. This looks like a question that's best answered by [reading the user guide on solving system dynamics](http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1189#issuecomment-809405566:57,evolve,evolves,57,https://qutip.org,https://github.com/qutip/qutip/issues/1189#issuecomment-809405566,2,['evolve'],"['evolved', 'evolves']"
Modifiability,"It looks like the loop on line 64 https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/qobjevo_codegen.py#L64 completes on the first try, but doesn't manage to import any objects, so the import_list remains empty. Could you use pdb to access local variables?. ---; P.S. You can use Markdown to format the traceback in a user-friendly way:; e.g. ; \`\`\`python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; \`\`\`. Renders to:; ```python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108:278,variab,variables,278,https://qutip.org,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108,1,['variab'],['variables']
Modifiability,"It refers to the system's Liouvillian, I'd say. I think all the `C_n` there are stochastic jumps, `sc_ops `, while the system Liouvillian is the constant part, `c_ops`. But I am not 100% sure. . The user guide is partly out of date there, @Ericgig and others have considerably extended the functionalities of the stochastic solvers. Looking at the [API documentation](http://qutip.org/docs/latest/apidoc/functions.html#module-qutip.stochastic) is safer, and the [source code](http://qutip.org/docs/latest/modules/qutip/stochastic.html) is even more complete. . Meanwhile, you can also have a look at these development notebooks [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-milstein-speed-test.ipynb), [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb), and [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) with regards to the new methods (you can find them all, a bit hidden, at the bottom of the http://qutip.org/tutorials.html list). Technically this issue could be transferred under [`qutip/qutip-doc`](https://github.com/qutip/qutip-doc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702:277,extend,extended,277,https://qutip.org,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702,1,['extend'],['extended']
Modifiability,"Many thanks! I solved it!; Now I have this WARNING:matplotlib.animation:MovieWriter avconv; unavailable. Trying to use pillow instead.; *Many thanks*. *P**arfait Atchadé*. *Tel Spain: 0034661205543*; *Tel Deutsch: 00491706659017*. On Wed, 9 Dec 2020 at 15:45, Jake Lishman <notifications@github.com> wrote:. > You'll find it easier installing from conda-forge, since we distribute; > binary releases there: see the installation guide; > <http://qutip.org/docs/latest/installation.html> here.; >; > If you want to install from source using pip, you need to configure your; > C++ development environment correctly - you'll probably need to enable the; > XCode command-line tools (see e.g. this; > <https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/>).; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1404#issuecomment-742038577>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AGKQN3YYS6ZYMTV4HEHFTELST7OW3ANCNFSM4UT7TWQQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650:556,config,configure,556,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650,1,['config'],['configure']
Modifiability,"Nah, don't disparage yourself - your code is good and you've done well to copy the style of the rest of the files. Typically consistency is better than having ""the one true style""; code's read more than it's written, and having a module which is clearly written by four different people makes the logic very very difficult to follow, which in turns makes it much harder to spot bugs. If it were up to me (which is isn't, really), I would say that your changes are good as they are. I didn't mean for the comments to be changes you _had_ to make. You can't reduce the number of merge conflicts that are going to happen with #1181 anyway, because that PR is a massive refactor of large swathes of the testing suite. You've done a good job to keep your work consistent with the rest of the file, so it will be very easy to merge in your logical changes. Merge conflicts are pretty much just par for the course; just the fact that we're discussing this here shows that logically, there _is_ a conflict between two pieces of work being done at the same time. I'd suggest merging this as-is. We'll handle the problems caused by the refactor elsewhere.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891:666,refactor,refactor,666,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891,2,['refactor'],['refactor']
Modifiability,"No, it's mostly here on qutip and direct email. There is only a few of us. We have a qutip-dev google group on invitation managed by @nathanshammah. agarwal1998 is not a maintainer but cgranade was. Last year, we took time to review old issues and let some less pressing with ""help wanted"". We would be happy if you can propose a solution that would close the issue and help with Qutip in general. The only use I personally see from this would be case like:; ```; out = qzero(dims); for i in range(N):; out += f(i, dims); ```; Cases were the qobj is more of a dummy variable than a physical operator. `coherent` and `create` have a physical meaning and I would not know what `coherent([2,10])` is supposed to be, but I understand what `tensor(coherent(2), coherent(10))` is. For `projector`, it could be added, it's meaning is clear. To make it consistent, removing the list support from `qeye`, etc. and fixing the few case that it is used, might be a better option. The dimension can easily be corrected after the creation of the object.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/363#issuecomment-575811864:566,variab,variable,566,https://qutip.org,https://github.com/qutip/qutip/issues/363#issuecomment-575811864,1,['variab'],['variable']
Modifiability,"Not sure if it's that simple.; ```; --config-setting=""--global-option=--with-openmp""; ```; actually gives me a build error:; ```shell; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --config-setting=""--global-option=--with-openmp""; * Building wheel...; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5;",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:38,config,config-setting,38,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,2,['config'],['config-setting']
Modifiability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:1115,variab,variability,1115,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,1,['variab'],['variability']
Modifiability,"Ok, it looks like the tests are finally going to pass. As the number of commits suggests, this was a pain. Not because the code was wrong, but because:. 1) The default config used by Travis has GCC 4.6 which contains an error that happens to get raised in our case. Thus, had to move to the Trusty build stack. 2) Although it took forever to hunt down, it appears that when .pyx files are included as package data, Py27 may try to rebuild them upon calling **init**. This would throw a missing header error. Since these files are not needed after building, removing them clears up this issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/551#issuecomment-254497807:168,config,config,168,https://qutip.org,https://github.com/qutip/qutip/pull/551#issuecomment-254497807,1,['config'],['config']
Modifiability,"Perhaps someone else can give a more concrete answer, but I guess the driving frequency is too high for the number of time-steps? Try tweaking the ODE solver with options like the following:. `; options = Options(nsteps=15000, atol=1e-13, rtol=1e-13) ; `. and passing it to mesolve. `result1 = mesolve(Ha, psi0, times, [np.sqrt(T1)*sig01, np.sqrt(T2)*sig02, np.sqrt(gamma*(nth + 1))*a, np.sqrt(gamma*nth)*a.dag()], [a.dag()*a, sig00, sig11, sig22], progress_bar=True, options=options); `. More practically speaking, for the problem you are solving I guess explicitly including the time dependence is unneccessary, since you have already made a RWA on the drive and the coupling? . Moving to an interaction picture in w1, w2 and wph, and removing the explicit time-dependence might simplify the problem and might give you equivalent results, and in the process make your code much simpler and more efficient?. In other words just set w1=w2=wph=0, and put the drive as a time-independent term in the hamiltonian . `; H01 = g*(sig12*a.dag() + sig21*a) + pump1*(sig01 + sig01.dag()); `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514:669,coupling,coupling,669,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514,1,['coupling'],['coupling']
Modifiability,"Picking a new random number at each time step would be an expensive way to do the computation since each call to the random number generator is costly. One could pre-generate a large array of random numbers before hand, but there is no way to know if you generated enough since we are using an adaptive step size ODE method. You are correct about the way mcsolve does its calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE me",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:294,adapt,adaptive,294,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['adapt'],['adaptive']
Modifiability,"So, while I agree that having a flexible storage format is a good way to go, the truth of the matter is that no one has time to implement such a big change. SciPy supports both 32 and 64-bit ints, and checks to see which ones are needed at runtime. e.g. a tensor product of two sparse matrices with int32, may need int64 in the result since their shape is larger. We could also do a similar thing, but it is a lot of work. The reason why we no longer use standard SciPy sparse objects is: 1) They tend to have a sizeable overhead when being created and/or manipulated do to redundant safety checks. 2) Many of the sparse operations are not well optimized. Because SciPy supports many different sparse formats, they had to generalize many of their core operations, making them slower. For example, the sparse kronecker product first converts to COO format, does the tensoring, and then converts back to the original format. Our method is much faster. Supporting more than just the current CSR format is also problematic. As already mentioned, there would be type checks, conditionals, and format conversions everywhere. e.g. what happens when DIA * CSR. As usual, available time is the limiting factor here. Support for both int32 and int64 is not that hard, but would take some time. Just int64 would make smaller matrices larger, but would allow for much greater system dimensions. In this later case, it would be a simple switch `int` -> `int64` and `size_t` -> `uint64` in the Cython code, and the fastsparse module (plus probably other places.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384005667:32,flexible,flexible,32,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384005667,1,['flexible'],['flexible']
Modifiability,"Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (**1-P(no jump)**), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable? . I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the **array[1, 10, 11]**? ... . At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response. Cheers,; Qi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42091087:456,evolve,evolve,456,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42091087,2,"['evolve', 'variab']","['evolve', 'variables']"
Modifiability,"Thank you for the suggestions. (2) It should be easy. We could reuse the `parallel_map` as you said. I would make a good first contribution. . (1) We need to be careful about this. ; I can see case where the user think the correlation is gone by `tlist[-1]` but it is not, so it should be clear which output are `0` and which are not computed.; Also if we do that, maybe finer control could be given. We could have a variable `max_t_plus_tau` with default `np.inf`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2315#issuecomment-1925474043:417,variab,variable,417,https://qutip.org,https://github.com/qutip/qutip/issues/2315#issuecomment-1925474043,1,['variab'],['variable']
Modifiability,Thanks @Ericgig for feedback.; I see (having read more carefully) in; https://github.com/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb; there is an example showing the equivalence of using `smesolve` and `general_stochastic` with a clear performance enhancement in the former. So I think I can easily switch my example to use `smesolve`. Thanks.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581:284,enhance,enhancement,284,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581,1,['enhance'],['enhancement']
Modifiability,Thanks Chris. This is looking good. I'll try it out in more detail in the comings days. Some immediate comments:; - I don't think we should keep two code-paths for parsing the config file. So either we keep using the old manual parsing or we make configobj the official and only way to parse the config file. In that case I think it would be Ok to simply fail to parse the config file if configobj is not available. I don't think many users use the config file so would be to worried about breaking backwards compatibility with respect to this.; - I think I'd prefer to have the logging module called logging.py rather than _logging.py even though it is supposed to internal to qutip. ; - Please add a `__all__` list in logging.py; - Shouldn't configspec.ini be added to the setup.py file?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248#issuecomment-61393881:176,config,config,176,https://qutip.org,https://github.com/qutip/qutip/pull/248#issuecomment-61393881,7,['config'],"['config', 'configobj', 'configspec']"
Modifiability,"Thanks for the clue, it was helpfull.; The source of problem is localization of `lscpu` util, which used by `_linux_hardware_info()` function.; The function expects `'Socket(s)'`, `'Core(s) per socket'`, etc in `lscpu` output, but in my system it actually `'Потоков на ядро'`, `'Сокетов'`, etc.; I think, maybe better less system dependent ways to calculate cpu count, for example, we could use `multiprocessing` module and it's `cpu_count` function. Or `len(os.sched_getaffinity(0))`for computers with dynamic cpu management (see [this](https://stackoverflow.com/questions/31346974/portable-way-of-detecting-number-of-usable-cpus-in-python) for details).; Or show exception/error, if we try to use lscpu and `LANG` is not english (or we couldn't found mentioned above `'Socket(s)'`).; Ideas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045:583,portab,portable-way-of-detecting-number-of-usable-cpus-in-python,583,https://qutip.org,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045,1,['portab'],['portable-way-of-detecting-number-of-usable-cpus-in-python']
Modifiability,"Thanks for the feedback. I am very keen to spend some time making the control modules more QuTiP like in style. In particular trying to utilise QuTiP elements, e.g. maintaining Qobjs throughout the code. I am however focussed on trying to get some results out using the library, so it will probably be a month of so before I can start on this. ; Re the documentation, there is some theory in the first of our notebooks example-pulse_optim-Hadamard, however it could be a lot more detailed and better presented. I should be able to make a start on a general overview of the control modules though, i.e. one notebook that outlines the theory and then explains the different functions and classes and how / when to use them. Is that the kind of thing you mean?; I was wondering about the auto-generated API docs, how it deals with inherited and overidden methods etc. Do you use some specific tool to generate these? Can you point me to some docs about how it works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/338#issuecomment-97736382:828,inherit,inherited,828,https://qutip.org,https://github.com/qutip/qutip/pull/338#issuecomment-97736382,1,['inherit'],['inherited']
Modifiability,"Thanks for the useful feedback, both here and in PR #1611 ! From the discussion in PR #1611 it seems that the second option with the modifications proposed by Jake in this issue seems to be the most sensible approach. Hence, if there are no objections, I will open a PR (which I will probably do tomorrow) where I implement the following changes (adapted from Simon's comment in PR #1611):. - `Qobj.__mul__(self, other) ` ; - dispatch to `data.matmul` if `other` is a `Qobj`; - dispatch to `data.mul` otherwise which will return `NotImplemented` if it does not know how to handle `other`. ; - `Qobj.__rmul__(self, other) `:; - Dispatch to `data.mul` (`other` will never be a Qobj): Notice that in this way both left and right multiplication will behave in the same way. This would also ""solve"" the inconsistency PR #1611 was trying to solve but this time `data.mul` will handle it and will raise NotImplemented whenever required. . - `mul_dense` and `mul_csr`:; - Use a thin wrapper that returns `NotImplemeneted` if input is not a complex python scalar. There are a few things I would like to discuss before opening a PR:; 1) These changes will break backwards compatibility as:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # With the changes this also returns NotImplemented.; matrix * qobj # With the changes this also returns NotImplemented; ```; will now behave consistently (""fixes"" PR #1611). Is this acceptable? I would say yes given that we are doing a major version change. However, it may be a good idea to start raising a deprecation warning in QuTiP 4 if these changes go forward. 2) `data.add` has a similar behaviour to `data.mul` in that it accepts `scale` which is not a `Data` (there are a few more specialisations that also accept an argument that is not a `Data`). Should these specialisations behave in the same way allowing arbitrary python objects as ""scale"" and raise NotImplemented when required or should they just allow a complex py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473:347,adapt,adapted,347,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473,1,['adapt'],['adapted']
Modifiability,"Thanks, @jakelishman. Even you say that you didn't look into very details, your comments were very inspiring and helpful!. What code climate is complaining about is mostly left from the previous code structure. I do plan on further cleaning them. Another refactor probably. Actually, the `_EvoElement` here is a simplified ""copy"" of the `EvoElement` in `QobjEvo`, not directly referring to that. Switch to `dev.major` won't break it. I did this long ago because I was having problems initialize `QobjEvo` in my particular use case. But indeed exposing a private class is fragile and dangerous. Planning on remove it too.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1444#issuecomment-815048230:255,refactor,refactor,255,https://qutip.org,https://github.com/qutip/qutip/pull/1444#issuecomment-815048230,1,['refactor'],['refactor']
Modifiability,"That is true. I'll try to look into why this is the case. However, it does have three expectation calculated. You can check this with output.expect ! . Edit: . So, I just realized that the noise-spectrum is associated with the coupling operator [sigmax()], I think the correct call to brmesolve must infact be (updated to current qutip standards) . `output = brmesolve(H, psi0, tlist, [[sigmax(), ohmic_spectrum]], e_ops)`. This is in line with the notation we use in example (https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve-time-dependent-Liouvillian.ipynb). I will make a pull request updating both the example notebook (http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) to reflect this and make sure we depreciate the spectra_cb argument in bloch_redfield_tensor to eliminate the confusion. Thanks for bringing this to notice !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703:227,coupling,coupling,227,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703,1,['coupling'],['coupling']
Modifiability,"The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size `dt` is actually good. It ideally should converge to something as the step size goes to zero. QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances. For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here. Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508:226,adapt,adaptive,226,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508,1,['adapt'],['adaptive']
Modifiability,"The default Apple `clang` version doesn't recognise `-fopenmp` out-of-the-box, because Apple don't ship an OMP library with macOS. You'll have more luck (with most C/C++ projects!) if you install a fully-featured compiler and environment. On [homebrew](https://brew.sh) you can find both `clang`/`clang++` and `gcc`/`g++`, both of which can be installed with OMP support. Make sure your set `PATH`/`CC`/`CXX` environment variables are set up correctly after you've installed, so you're calling the compiler you've just installed, not just the Xcode versions. This isn't a bug in QuTiP, although we could remember this when somebody's working on modernising the distribution - in C/C++ land, tools like `automake` run through a big list of things to check during build configuration, and one of them is if OMP appears to exist. That way the error message is a little clearer (although in this case it's reasonable clear if you're used to C compilers).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774:421,variab,variables,421,https://qutip.org,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774,2,"['config', 'variab']","['configuration', 'variables']"
Modifiability,"The dpsi option worked fine on my mac from jupyter. ; - please update the docstring to highlight this option (could also add the presence of the `name` option, besides directory and format); - It is a nice feature, it could be highlighted in the documentation, here https://github.com/qutip/qutip-doc/blob/master/guide/guide-bloch.rst; - add to 4.4.1 enhancements in the changelog, https://github.com/qutip/qutip-doc/blob/master/changelog.rst; Let's skip the codeclimate issues for the moment, but in the future it might be nice to refactor the Bloch class inner workings, as it took me a while to sort out issue #1027.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574:351,enhance,enhancements,351,https://qutip.org,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574,2,"['enhance', 'refactor']","['enhancements', 'refactor']"
Modifiability,"The problem with OPENMP is that the point where parallel processing begins to have an advantage is platform, and hardware dependent. As such, I have added a simple benchmark routine that calculates a good number of NNZ that a matrix should have for OPENMP to be utilized. This also required me to change the way the qutiprc file is done, i.e. it now uses the standard configparser module. This benchmark is called on first run, or anytime where the qutiprc 'openmp_thresh' flag is missing, or the qutiprc file itself does not exist.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/652#issuecomment-283874454:368,config,configparser,368,https://qutip.org,https://github.com/qutip/qutip/pull/652#issuecomment-283874454,1,['config'],['configparser']
Modifiability,"This issue has a two-fold interest: decreasing test time in general and expand the platforms through which QuTiP is available. . What is the reason it takes so long on Nix? QuTiP, in the [latest PR](https://travis-ci.org/qutip/qutip/builds/628865624?utm_source=github_status&utm_medium=notification), takes on average 20 minutes to run its tests on a given platform. Much of this I think is due to the Cython configurations, indeed the no-cython option takes only 13 minutes. My first suggestion would be to try without Cython if things speed up, from those requirements (@Ericgig set that up and I am not knowledgeable about it). . From your PR on `nixpkgs` do you build on Travis CI or a similar cloud? If you could give a list of time taken by the different tests that would help. . The idea of a subset of tests is interesting (essential tests vs. thorough tests), in general; for example thorough tests could be done only in production and a lighter version could be called with `qutip.testing.run()`. Although, in specific, it is not clear to me how to triage which tests to skip. I would be glad to have the others opinion on this too (pinged them as assignees).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700:409,config,configurations,409,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700,1,['config'],['configurations']
Modifiability,"This looks great and I think it will help a lot in cleanly implementing more complex solvers light the HEOMSolver. I have two suggestions for future improvements:. - I'd like to see `.options = ...` become a method because it now modifies the existing integrator and `.options(...)` would both make that clearer and more flexible. E.g. with a method we could allow both `.options(new_options)` to completely override the options and `.options(key=new_value)` to update just one setting. - The first call to `result.add(t, X)` uses `X = state0` but state0 could be almost anything the user passed in (and not necessarily the canonical form returned by `_restore_state`). It would be better if either there was a separate method to override to convert `state0` into the canonical form, or `result.add(t, X)` was called initially with `X = _restore_state(_data0)`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616:321,flexible,flexible,321,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616,1,['flexible'],['flexible']
Modifiability,"You are measuring the expectation of sigmax, if you measure the expectation value of sigmaz, or the population, you will not observe such a big oscillation but very small oscillations. Not sure what you want to achieve, but your detuning is negligibly small compared to the frequency. It has little effect. Also I'm not sure if there is a typo `v_0` and `drive_detuning` seems to have the unit of frequency, and 2*pi* frequency. You have a time-independent Hamiltonian, so if you want to compute the ZZ interaction, you can simply diagonalize the matrix and see if you have a ZZ coupling term.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2549#issuecomment-2449988908:579,coupling,coupling,579,https://qutip.org,https://github.com/qutip/qutip/issues/2549#issuecomment-2449988908,1,['coupling'],['coupling']
Modifiability,"You'll find it easier installing from conda-forge, since we distribute binary releases there: see the [installation guide](http://qutip.org/docs/latest/installation.html) here. If you want to install from source using `pip`, you need to configure your C++ development environment correctly - you'll probably need to enable the XCode command-line tools ([see e.g. this](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577:237,config,configure,237,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577,1,['config'],['configure']
Modifiability,"cpus = multiprocessing.cpu_count(); 167 ; 168 ; ...; 270 # Clean name space; 271 #; 272: del os, sys, numpy, scipy, multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_count()); 94 return {'os': 'Windows', 'cpus': ncpus}; 95 . /Users/shahnawaz/dev/qutip/qutip/mcsolve.py:; 225 if config.options.num_cpus == 1:; 226 # fallback on serial_map if num_cpu == 1, since there is no; 227: # benefit of starting multiprocessing in this case; 228 config.map_func = serial_map; 229 ; ...; 264 time_type, h_stuff, c_stuff = _td_format_check(H, c_ops, 'mc'); 265 c_terms = len(c_stuff[0]) + len(c_stuff[1]) + len(c_stuff[2]); 266: # set time_type for use in multiprocessing; 267 config.tflag = time_type; 268 . /Users/shahnawaz/dev/qutip/qutip/parallel.py:; 33 """"""; 34 This function provides functions for parallel execution of loops and function; 35: mappings, using the builtin Python module multiprocessing.; 36 """"""; 37 __all__ = ['parfor', 'parallel_map', 'serial_map']; 38 ; 39 from scipy import array; 40: from multiprocessing import Pool; 41 from functools import partial; 42 import os. /Users/shahnawaz/dev/qutip/qutip/settings.py:; 32 ###############################################################################; 33 """"""; 34: This module contains settings for the QuTiP graphics, multiprocessing, and; 35 tidyup functionality, etc.; 36 """"""; ```. Can the `pyximport` be dea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:2268,config,config,2268,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['config'],['config']
Modifiability,"cy, like you suggest. For the Milstein solver it might be the best, or at least the quickest, way to implement heterodyne, but I don't really agree that the current method is overcomplicated. It is in fact basically the same as the method you suggest, so I don't see that either would be more complicated or simpler than the other. The only issue is whether the two stochastic increments are divided up in several stochastic collapse operators or if the d2 function internally takes care of the both stochastic increments for a given stochastic collapse operator. The complexity is just shifted from the d2 function to somewhere else, which in general doesn't simplify anything. However, since the milstein solver you submitted is written so that it only support one increment per collapse operators, then there might be a real advantage of splitting the heterodyne process into two homodyne processes. . I've tried to make the qutip stochastic solver API as general as I could (and it is still a work in process), so that it will be as flexible as possible for implementing custom types of SMEs. Having support for multiple stochastic increments per collapse operators seems to be useful in certain applications. Although such SMEs could probably always be rewritten as multiple collapse operators with single stochastic increments, it might not always be the most natural way to define the SME. The heterodyne detection is one example of this, and it can be formulated in both ways, but I want the qutip SME API to work with both methods (at least with the basic euler solver, not necessarily with every solver we implement). However, that doesn't mean that the implementation of heterodyne for a particular solver has to use one way or the other. We should just document which solvers support multiple increments per operators and which solvers don't. So if it is easier to get the milstein solver working for heterodyne by simulating two homodyne detections, then let's go ahead use that method f",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22543416:1163,flexible,flexible,1163,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22543416,1,['flexible'],['flexible']
Modifiability,"e computation since each call to the random number generator is costly. One could pre-generate a large array of random numbers before hand, but there is no way to know if you generated enough since we are using an adaptive step size ODE method. You are correct about the way mcsolve does its calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the array[1, 10, 11]? ...; > ; > At this stage, I have to resort ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:1182,evolve,evolve,1182,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['evolve'],['evolve']
Modifiability,"epresentations to have a fully different Python type. Whether I represent Λ(ρ) by 0.9 𝟙ρ𝟙 + 0.1 𝑋ρ𝑋 or {√(0.9) 𝟙, √(0.1) 𝑋}, they both represent the same function from density operators to density operators. > * How do you see the various mathematical operations working?. My thought here would be that an operator-sum decomposition of a channel is just that: a representation of a channel. Thus, if `lambda_` is a `Qobj` representing the operator-sum decomposition of Λ and `phi` is the representation of Φ, then `lambda_ + phi` should be some superoperator representation (most likely Kraus to match inputs) of the function (Λ + Φ)(ρ) = Λ﴾ρ) + Φ(ρ). Similarly, multiplying by a scalar 𝑠 would rescale each term by √𝑠 so that the corresponding function is (𝑠Λ)(ρ) = s · (Λ(ρ)) and multiplying two channels in Kraus decomposition would return their decomposition, (ΦΛ)(ρ) = (Φ ∘ Λ)(ρ) = Φ(Λ(ρ)). > Given that currently `dims` describe the dimension of the Hilbert space and that the dimension isn't changing, I feel `dims` is perhaps an odd place to put the number of elements in the sum, but that doesn't prevent this becoming a feature of Qobj in some other way. Fair enough; I guess my thinking there was that the term index is indeed just another kind of index, but if there's a better way to represent that in the metadata for a Qobj than in `dims`, I'm all for it!. > Either way, QobjEvo would need to support this too (probably not a giant amount of work, but some careful checking would be needed) & some other parts of the code might be surprised.; > ; > @jakelishman had some ideas for revamping dims support in QuTiP. I don't think it's the same idea, but the two definitely overlap in terms of which parts of QuTiP they'd evolve. Jake, would you mind posting the link to your dims proposal here if you have it handy (apologies, I seem to have lost it). Even if dims isn't the right place for this, it would be good for me to reread it. Ah, nice, I hadn't realized! I'll take a look, then!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574:4731,evolve,evolve,4731,https://qutip.org,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574,1,['evolve'],['evolve']
Modifiability,"er the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit thick here because I understand the overall idea of the code but somehow I am not confident it will be easy for others to understand on first read. Do you think we can make it a bit more transparent how the `_qfunc_alpha_matrix` works and that the crux of the method is computing the operators `coherent_dm` in an efficient way and saving them? If I have understood the code correct, I could try to document it a bit more and simplify it. . Let me know your thoughts and correct me if I misunderstood something @jakelishman @Ericgig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:2042,extend,extends,2042,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['extend'],['extends']
Modifiability,"ever, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make sense on quantum objects, which are arrays only as an implementation detail - the `Qobj` class is meant to represent an abstract linear algebra object, not specifically a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (m",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:4838,adapt,adaptive,4838,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['adapt'],['adaptive']
Modifiability,"handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row ab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3452,plug-in,plug-in,3452,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['plug-in'],['plug-in']
Modifiability,"her would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that defines what we accept as scalars. We then do: `isinstace(other, _ALLOWED_SCALARS)` and return `NotImplemented` if not there. Two options here:; 1) QuTiP allows only `numbers.Number`:; - In this case `qutip-tensorflow` can extend `_ALLOWED_SCALARS` with tf.Variable and tf.Tensor. However, if the user uses two plug-ins, say qutip-tensorflow and qutip-something-that-does-not-work-well-with-tensorflow (second plug-in), the second plug-in may not work properly. ; - The above point is not a big deal if we make clear that _ALLOWED_SCALARS must accept `complex(other)` for compatibility reasons. In this way the second plug-in can always default to `complex(other)` (this is already the default behaviour of `mul_dense`).; 2) QuTiP allows `numbers.Number`, `ndarray` of shape `(,)`, `tf.Variable` of shape `(,)` and more in the future.; - The upside of this method with respect to 3.1 is that users know which types they must accept.; - This is probably not a good idea as it means qutip has to handle new dependencies (tensorflow and probalby more in the future).; - This _still_ defines what an scalar is at he `Qobj` level. I think this is not bad as it seems to be the only way of avoiding `NotImplemented` at Python space exept for in special methods (`__mul__`, ...). I think that 3.i is the closest to an ideal solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:2998,plug-in,plug-ins,2998,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,4,['plug-in'],"['plug-in', 'plug-ins']"
Modifiability,"ide that (e.g. in `dnorm`), I overrode it by providing a definition in a tighter scope - either at class level or per-function (via `pytest.mark.parametrize` directly). The correct scoping just depends a lot on the type of tests you're writing - if you're going to have to overwrite something constantly then module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files starting from those beginning with ""a"" up to (now) ""metrics"" while I was first getting to know the QuTiP codebase, and hopefully you can see that my early efforts weren't that great, and they get a bit better and easier to read as time went on. (The later files haven't been converted yet.) The main things are to always be thinking about readability both of the code and the error messages that are coming out, and making sure that your tests are really testing that your functions have your ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:1448,variab,variables,1448,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['variab'],['variables']
Modifiability,"is is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using what",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:10914,refactor,refactor,10914,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['refactor'],['refactor']
Modifiability,"is set; ...; 164 qutip.settings.num_cpus = info['cpus']; 165 else:; 166: qutip.settings.num_cpus = multiprocessing.cpu_count(); 167 ; 168 ; ...; 270 # Clean name space; 271 #; 272: del os, sys, numpy, scipy, multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_count()); 94 return {'os': 'Windows', 'cpus': ncpus}; 95 . /Users/shahnawaz/dev/qutip/qutip/mcsolve.py:; 225 if config.options.num_cpus == 1:; 226 # fallback on serial_map if num_cpu == 1, since there is no; 227: # benefit of starting multiprocessing in this case; 228 config.map_func = serial_map; 229 ; ...; 264 time_type, h_stuff, c_stuff = _td_format_check(H, c_ops, 'mc'); 265 c_terms = len(c_stuff[0]) + len(c_stuff[1]) + len(c_stuff[2]); 266: # set time_type for use in multiprocessing; 267 config.tflag = time_type; 268 . /Users/shahnawaz/dev/qutip/qutip/parallel.py:; 33 """"""; 34 This function provides functions for parallel execution of loops and function; 35: mappings, using the builtin Python module multiprocessing.; 36 """"""; 37 __all__ = ['parfor', 'parallel_map', 'serial_map']; 38 ; 39 from scipy import array; 40: from multiprocessing import Pool; 41 from functools import partial; 42 import os. /Users/shahnawaz/dev/qutip/qutip/settings.py:; 32 ###############################################################################; 33 """"""; 34: This module contains settings for the QuTiP graphics, ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:2111,config,config,2111,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['config'],['config']
Modifiability,"les in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance improvement. It improves the organization of the code, allows greater flexibility in adding new things to an existing class and modifying it easily. In terms of user experience, this means less clutter in the code and verbosity of arguments. You can initialize something once and keep re-calculating things by dynamically changing the parameters and calling the `class` method. If it does not hurt to slowly shift in this direction then I think we should go for it. If there is an alternative reason for not having classes then please let us know as the cons @bencbartlett mentions has more to do with following qutip precedent than some fundamental disadvantage in performance or use. @ajgpitch @nonhermitian",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:1746,rewrite,rewrite,1746,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,1,['rewrite'],['rewrite']
Modifiability,"lution that works for both. > * What is the advantage of this over using the existing superoperator representations?. I don't think there is one, per se, in the same sense that there's no strict advantage to superoperators over Choi operators over χ operators — each is useful in different contexts, such that QuTiP supports all three in order to allow users to pick the right representation for their problem. Similarly, operator-sum decompositions of channels are quite common and are useful in some special circumstances (e.g.: expressing a Choi-rank–sparse channel without requiring a 4^n × 4^n matrix). In the Quantum Development Kit, for instance, we use `qutip.to_kraus` to express user-supplied superoperators, Choi operators, and χ operators in terms of an operator-sum decomposition that is then passed to the underlying open systems simulator. While the operator-sum decomposition is quite useful internally to the simulator, that's not a detail that we want to enforce upon users, such that QuTiP's support for multiple superoperator representations is quite useful in presenting a user-friendly interface for configuring noise models. > * Can this advantage be carryied over into, e.g., using solvers, eigenvalue finding, etc?. I'm not sure I entirely follow, sorry?. > * Would it be better to have a new object, sort of like QobjEvo but for sums rather than evolutions?. Perhaps, but at least for the operator-sum decomposition of channels, it would feel a bit weird to me to have superoperators, Choi operators and χ operators all have one Python type, but for Kraus representations to have a fully different Python type. Whether I represent Λ(ρ) by 0.9 𝟙ρ𝟙 + 0.1 𝑋ρ𝑋 or {√(0.9) 𝟙, √(0.1) 𝑋}, they both represent the same function from density operators to density operators. > * How do you see the various mathematical operations working?. My thought here would be that an operator-sum decomposition of a channel is just that: a representation of a channel. Thus, if `lambda_` is a `Qo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574:2536,config,configuring,2536,https://qutip.org,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574,1,['config'],['configuring']
Modifiability,"ly useful and will simplify the code inside the propagator a bit. I removed `.evolve_dm`. > **For `.sys_dims`**:; > ; > The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise.; > ; > I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. Changed in HEOMSolver. Since environment only means something for HEOM, so it took some time to understand what it referred to. Adding the change elsewhere would be confusing. ; > **Specifying which solvers support propagators**:; > ; > Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them. There is only one class for propagator and I don't see us needing any other, so there is no use for a `propagator_class` . We could have a `support_propagator` flag, but I prefer it this way as we can set a special error message for `HEOMSolver`. ; `HEOMSolver` is the only exceptions where we could support it but choose not to take the time to implement it. ; All deterministic solver we have can be used for propagator, trajectories solver don't have a properly defined propagator for single trajectory and I don't see any use to create a propagator for the averaged states. It would take a lot of trajectories to obtain what is effectively mesolve's propagator. . We could add the flag to the integrator instead, some krylov integrator cannot evolve 2D states, but it's the only one we have plan for and it's not merged yet...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120:2324,evolve,evolve,2324,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120,1,['evolve'],['evolve']
Modifiability,"m wrong). This would require to have a function that casts any defined scalar to a complex scalar. The dispatcher would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that defines what we accept as scalars. We then do: `isinstace(other, _ALLOWED_SCALARS)` and return `NotImplemented` if not there. Two options here:; 1) QuTiP allows only `numbers.Number`:; - In this case `qutip-tensorflow` can extend `_ALLOWED_SCALARS` with tf.Variable and tf.Tensor. However, if the user uses two plug-ins, say qutip-tensorflow and qutip-something-that-does-not-work-well-with-tensorflow (second plug-in), the second plug-in may not work properly. ; - The above point is not a big deal if we make clear that _ALLOWED_SCALARS must accept `complex(other)` for compatibility reasons. In this way the second plug-in can always default to `complex(other)` (this is already the default behaviour of `mul_dense`).; 2) QuTiP allows `numbers.Number`, `ndarray` of shape `(,)`, `tf.Variable` of shape `(,)` and more in the future.; - The upside of this method with respect to 3.1 is that users know which types they must accept.; - This is probably not a good idea as it means qutip has to handle new dependencies (tensorflow and probalby more in the future).; - This _still_ defines what an scalar is at he `Qobj` level. I think this is not bad as it seems to be the only way of avoiding `NotImplemented` at Pyt",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:2910,extend,extend,2910,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['extend'],['extend']
Modifiability,"modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time for cte` could be more explanatory. Similarly elsewhere. * I wonder whether instead `QobjEvo`, `Qobjt` could be even more intuitive for the user. * I would really encourage you to write one notebook (or more), about the new functionalities of the stochastic solvers, as well as the old methods. This could be the to-go resource, beyond documentation, to understand how these stochastic solvers are now expanded and coherently defined. It does not need to be a lot of work, it can copy a lot of stuff from the development notebooks. It would be fundamental to have the solvers' master equations written down, explaining for each solver what each term is, e.g., the jump operator. Also, in `development-smesolve-tests`, the equations are already there for example. Block 23 is beautiful, and it could be reproduced in the tutorial. . * Similarly, a user guide entry would really enhance the adoption of these solvers. At a later stage, some more refined example applications could be provided. * Review is still ongoing, I will provide comments on the .py files and other solvers files. Help from other developers is welcome as these are massive changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:3849,enhance,enhance,3849,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['enhance'],['enhance']
Modifiability,"n my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`. Discussed more at the top.; - CuPy (CUDA operations on ndarray-likes) explicitly does not allow implicit conversion to `np.ndarray` (see cupy/cupy#3421) for performance reasons, but does implement `__array_ufunc__` and `__array_function__`.; - pydata/sparse (nd-sparse _arrays_ instead of scipy.sparse's sparse _matrices_): always implement `__array_ufunc__` and `__array_function__` because they are trying to be a sparse version of `ndarray`. By default, they do not implement `__array__` for performance/memory reasons, but they do allow turning it on by an environment variable. Do not implement anything:; - JAX (autodiff) tries really hard to replace numpy rather than interoperate with it; - scipy.sparse matrices are intended for use with a _matrix_ interface, not a broadcast-able _array_ interface. They specifically document that they will not provide this interface (see scipy/scipy#12279). Somewhat weirdly, they do have custom methods for some elementwise ufuncs, though (like `np.sin`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:7542,variab,variable,7542,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['variab'],['variable']
Modifiability,"n you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wishes,; >; > Nathan; >; > Dr. Nathan Shammah; > Postdoctoral Research Scientist; > Theoretical Quantum Physics Laboratory; > RIKEN, Wako, Saitama, Japan; > www.nathanshammah.com; >; >; >; > On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:; >; > > I have some detail information for the GSoC 2020 project ""Error; > mitigation; > > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > > Wiki page. I post it here so if anyone finds it nice could copy it to the; > > Wiki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:4572,enhance,enhanced,4572,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['enhance'],['enhanced']
Modifiability,"nfo on general resources to learn about QuTiP and more; references to the #3 project, i.e. your blog and the talk.; https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2020. Neill, Alex, if you have a lead, please add a HEOM project. Bests,. Nathan. Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com. On Tue, Feb 25, 2020 at 5:10 PM Boxi Li <notifications@github.com> wrote:. > Hi Nathan,; >; > I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it; > seems that there is no way to make a PR to Wiki. I can also send you the; > markdown source code per email like this, but I’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:1095,enhance,enhanced,1095,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['enhance'],['enhanced']
Modifiability,"ng=""--global-option=--with-openmp""; * Building wheel...; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5; Scipy Version: 1.8.1; Cython Version: 0.29.30; Matplotlib Version: 3.5.2; Python Version: 3.10.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); I",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:1177,config,config-setting,1177,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,1,['config'],['config-setting']
Modifiability,"o a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Instead, I have a nested list like `[L0, [L1, control1], ...]` where `L0`, `L1`, ... are super-operators. I should also note that I use `mesolve` both for Schrödinger equations and Lindblad equations (relying on `mesolve` delegating to `sesolve`), and the Krotov package uses `H` as a variable/attribute name to refer to nested-Lindbladians or nested Hamiltonians interchangeable. Sorry if that's causing a bit of confusion. I am ultimately interested both in open system and closed system dynamics interchangeably. > [...] In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. That's an extremely exciting prospect! I'd love to be able to have internal sparse data for Qobj's that",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:2282,variab,variable,2282,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['variab'],['variable']
Modifiability,"ocumentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being so",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3376,config,configuration,3376,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['config'],['configuration']
Modifiability,"omplicated class-based implementation. This means that users who want to look under the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit thick here because I understand the overall idea of the code but somehow I am not confident it will be easy for others to understand on first read. Do you think we can make it a bit more transparent how the `_qfunc_alpha_matrix` works and that the crux of the method is computing the operators `coherent_dm` in an efficient way and saving them? If I have understood the code correct, I could try to document it a bit more and simplify it. . Let me kno",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:1576,variab,variable,1576,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['variab'],['variable']
Modifiability,"or each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfied with how the new rhs functions work I'll merge the branch sme-rhs-restructuring into qutip master and then feel free to submit a pull request with your milstein rhs implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1998,parameteriz,parameterize,1998,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['parameteriz'],['parameterize']
Modifiability,"ray. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>dot</code> method that act the same a sparse array's one. This is not needed.; * [x] The <code>dims</code> of the output are not kept at <code>evolved_states = map(Qobj, evolved_states[1:-1]</code> --> **Separated into two variables. Now dimensions are also be kept.**; * [x] Why make <code>lanczos_algorithm</code> part of the public interface? --> **Mistake; corrected**",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:2834,variab,variables,2834,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['variab'],['variables']
Modifiability,"reated it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There is a bug in eigh on mac with openblas. --> **Switched to <code>qutip.sparse.eigh</code>**; * [x] What does this <code>optimizer</code> function optimize? Could you add a simple description. --> **This functions finds the optimal number of Lanczos algorithm iterations inside Krylov, added as small description**; * [x] <code>_estimate_norm</code> is nerver used. --> **Removed**; * [x] Why is tlist here and not in solve? It seems strange that you can reuse one instance for multiple H and psi0, but you cannot change tlist. --> **Removed when deprecating <code>KSolve</code> class**; * [x] Why do you need KSolve? --> **It was a workaround to the cognitive complexity check of github. But we decided to revert back to a non Class solver, as it adds another type of complexity.**; * [x] Increasing pdx here when it is already controlled by enumerate is strange. The best would be to include the first partition here too. Otherwise using update_progress_bar(pdx + 1) is clearer. --> **Changed ""pdx"" into ""idx"". Added the first lazy iteration inside the loop, now it is more clear with <code>update_progress_bar(idx)</code>.**; * [x] There is no work done between update_progress_bar(0) and update_progress_bar(1). Did you start it? --> **Fixed simultaneously by the previous change.**; * [x] Shouldn't this also double the last element? prepare_next_step remove the first and last so the last state is not stored. --> **Good catch, it was a bug. Fixed.**; * [x] <code>_happy_breadkown</code> never used... --> **Should be fixed, performing extra checks**; * [x] evolved states It should keep the input state dims. --> **Checked all situations that came to mind and output dimensions seem to be working properly.**; * [x] Why import <code>mcsolve</code>? --> **Removed**",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:3580,evolve,evolved,3580,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,1,['evolve'],['evolved']
Modifiability,"rence between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:10192,refactor,refactoring,10192,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['refactor'],['refactoring']
Modifiability,"rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (mostly elementwise operations or reductions). Several libraries implement only these, but _not_ `__array__`, but given my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out m",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:5574,extend,extended,5574,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['extend'],['extended']
Modifiability,"s tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the tests that are being ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:984,adapt,adapted,984,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['adapt'],['adapted']
Modifiability,"s_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162) being a particular example. In particular, the interface we define there is strictly for a single time step, makes no reference to `tlist` and we use ``H=[H0, [H1, u]]`` where `u` is a scalar for that particular timestep. However, I can easily write a wrapper around an `mesolve` that would work something along the lines of the pseudo-code from https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563:. ~~~; for (i, state) ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:3243,adapt,adapt,3243,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['adapt'],['adapt']
Modifiability,"started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another con",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1582,coupling,coupling,1582,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['coupling'],['coupling']
Modifiability,"ts calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the array[1, 10, 11]? ...; > ; > At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response.; > ; > Cheers,; > Qi; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:1953,variab,variables,1953,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['variab'],['variables']
Modifiability,"uld still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (mostly elementwise operations or reductions). Several libraries implement only these, but _not_ `__array__`, but given my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`. Discussed more at the top.; - CuPy (CUDA operations on ndarray-likes) explicitly does not allow implicit conversion to `np.ndarray` (see cupy/cupy#3421) for performance reasons, but does implement `__array_ufunc__` and `__array_function__`.; - pydata/sparse (nd-sparse _arrays_ instead of scipy.sparse's sparse _matrices_): always implement `__array_ufunc__` and `__array_function__` because they are trying to be a sparse version of `ndarray`. By default, they do not implement `__array__` for performance/memory reasons, but they do allow turning it on by an environment variable. Do not implement anything:; - JAX (autodiff) tries really hard to replace numpy rather than interoperate with it; - scipy.sparse matrices are intended for use with a _matrix_ interfa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:6688,extend,extends,6688,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['extend'],['extends']
Modifiability,"w the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed exper",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2080,coupling,coupling,2080,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,2,"['coupling', 'flexible']","['coupling', 'flexible']"
Modifiability,"which makes reading the code much easier, but bad because it adds unnecessary chaff which makes scanning lines take longer. I hadn't put much thought into it before, and I think I was just generally writing in my default style. #### Test ordering; I hadn't much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:1925,plugin,plugin,1925,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['plugin'],['plugin']
Modifiability,"would something like this be to you? Do you think you'd keep an implementation based on this long term? Or would you end up implementing your own thing in the end anyway?. It would be *extremely* useful. It would become the default propagator for the krotov package. I would expect that with the ability to propagate single time steps with `mesolve`, optimization becomes feasible for any system that `mesolve` can propagate over the entire time grid in less than a few seconds. That would be a huge improvement over the current situation, where the lack of a good propagator limits the optimization effectively to toy problems. We *may* still try to implement in Cython some polynomial propagators (propagators that evaluate `exp[-i H dt] Ψ` or `exp[L dt] ρ` via expansion into a polynomial series - think Taylor series but faster converging, through the use of Chebychev or Newton polynomials). That work hasn't really been going anywhere lately, though. It may or may not end up being faster than `mesolve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:1117,flexible,flexible,1117,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['flexible'],['flexible']
Performance," 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. That's an extremely exciting prospect! I'd love to be able to have internal sparse data for Qobj's that represent Hamiltonians/Liouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:3562,optimiz,optimize,3562,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['optimiz'],['optimize']
Performance," br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (OO) ... ok; control.pulseoptim: Hadamard gate gradient check ... ok; control.pulseoptim: QFT gate with linear initial pulses ... ok; control.pulseoptim: QFT gate with linear initial pulses (bounds) ... ok; control: data dumping ... ok; control: unitarity checking (via dump) ... ok; control.pulseoptim: state-to-state transfer ... ok; control.pulseoptim: state-to-state transfer (Qobj) ... ok; control.pulseoptim: amplitude damping channel ... ok; control.pulseoptim: coupled oscillators (symplectic dynamics) ... ok; control.pulseoptim: Hadamard gate using CRAB algorithm ... ok; control.pulseoptim: Hadamard gate (loading config from file) ... ok; control.pulsegen: Check periodic control functions ... ok; control.pulseoptim: Hadamard gate with fixed and time varying drift ... ok; control.pulseoptim: Hadamard gate with fixed and time varying ctrls ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in fock state ... ok; correlation: legacy me and es for oscillator in steady-state ... ok; correlation: comparing me and es for oscillator in steady-state ... ok; correlation: legacy spectrum from es and pi methods ... ok; correlation: comparing spectrum from es and fft methods ... ok; correlation: comparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission corr., H td (str-list td format) ... ok; correlation: comparing TLS emission corr., H td (np-list td format) ... ok; correlation: comparing TLS emission ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:4439,load,loading,4439,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['load'],['loading']
Performance," conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring the circuit compiler to allow simple pulse scheduling,; > > e.g. Restriction one pulses that can be turned on at the same time.; > > - Features to perform error mitigation techniques in QuTiP, such as; > > zero-error extrapolation.; > > - APIs to allow import quantum circuits from other software packages; > > or commonly used language e.g. through quantum assembly language (qasm); > >; > > ------------------------------; > >; > > Also, the last outcomes have some overlap with the last project. Although; > > I also find this circuit importation very important, I guess two projects; > > should not have overlap if they are both selected.; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <; > https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA; > >,; > > or unsubscribe; > > <; > https://github.com/notifications/unsubscribe-auth/ADPF67EWECDUIOQMTKK2N2DREGE2LANCNFSM4KZUPCQQ; > >; > > .; > >; >; >; > —; > You are receiving this because you authored t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:6425,perform,perform,6425,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['perform'],['perform']
Performance," could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the tests that are being performed. . * I wonder whether `qobjevo_codegen.py` should stay there. It stands out from all other modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:2023,perform,performed,2023,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['perform'],['performed']
Performance,".36s; Total run time: 5.51s; Total run time: 6.58s; Total run time: 9.64s; Total run time: 10.74s; Total run time: 12.29s; {'solver': 'pc-euler-2'}; Total run time: 1.54s; Total run time: 1.86s; Total run time: 2.50s; Total run time: 2.79s; Total run time: 3.36s; Total run time: 4.03s; Total run time: 4.98s; Total run time: 6.56s; {'solver': 'explicit1.5'}; Total run time: 5.28s; Total run time: 6.35s; Total run time: 7.74s; Total run time: 8.99s; Total run time: 10.34s; Total run time: 12.41s; Total run time: 15.40s; Total run time: 21.40s; {'solver': 'taylor1.5'}; Total run time: 3.30s; Total run time: 3.85s; Total run time: 4.52s; Total run time: 5.63s; Total run time: 7.22s; Total run time: 8.72s; Total run time: 9.51s; Total run time: 11.84s; {'solver': 'taylor1.5-imp'}; Total run time: 5.43s; Total run time: 6.81s; Total run time: 7.60s; Total run time: 10.05s; Total run time: 11.88s; Total run time: 12.88s; Total run time: 15.63s; Total run time: 22.31s. ```; ; **Minor issue: plots breaking notebook rendering**; Jupyter Notebooks have a broken rendering when cells with plots are run; refreshing the notebook sometimes works fine. This is sometimes fixed in the first place by adding; ```; plt.show(); plt.close(); ```; but not always. Maybe we can have a look at this minor issue in the development notebooks. . **Documentation**; It would really increase the adoption rate if the API doc and User Guide could be updated to highlight the stochastic solvers and new methods. The development notebooks are so well written that drawing from their examples should be simple. . Congratulations @Ericgig for this refurbishment, improvement, optimization and thorough benchmarking investigations of the stochastic solvers, which I hope will be widely tested by @nwlambert @ajgpitch @quantshah (and @fminga) for robustness once merged in the development master branch. I am merging this and the montecarlo split PR, hoping there are no incompatibility issues (#990 --> #991 --> #969).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:6241,optimiz,optimization,6241,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['optimiz'],['optimization']
Performance,"15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2043,optimiz,optimizer,2043,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['optimiz'],['optimizer']
Performance,"; ```; Map(Space(Map(Space, Space)), Space(Map(Space, Space))); ```; to; ```; Super(Space(Map(Space, Space)), Space(Map(Space, Space)), rep='super'); ```; and I definitely like having the superop rep included in it. The user is never ever meant to write any of this themselves, so the literal length shouldn't be too much of a problem. You'd still specify dimensions using the exact same list syntax that we currently use, it's just we'd immediately parse it into this internal representation and internally operate on this, because it's much faster. Essentially what I'm describing here is an abstract syntax tree for relevant linear algebra structures. We _could_ even have the tensor index dimensions stored within the `Compound` objects, to help with `ptrace`, `permute`, the future `local_multiply` algorithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. Y",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:1480,perform,performance,1480,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['perform'],['performance']
Performance,"========================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input lis",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2222,load,loadparams,2222,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['load'],['loadparams']
Performance,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:770,perform,performance,770,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['perform'],['performance']
Performance,"> I ran some comparisons to the old version, and everything looks good. There seems to be some speedup both to the RHS construction and the ODE solver for most cases. Thanks! I've now streamlined things a little more, so they might be slightly faster still. > Since each individual ADO is naturally a Qobj, having HierarchyADOsState store them an array or list of Qobjs makes sense I guess. I've put this down in the v5 TODO list (just to draw a line under this PR). > 2. How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). I ended up always calling `e_ops` functions with `f(t, ado_state)`. This is a bit different to other solvers, but makes what the HEOMSolver considers the evolution state consistent. The density matrix part of the state is available as `ado_state.rho` so it's not a big hardship to retrieve just the system state. >> 3. Recheck the time dependent case.; > ; > From what I can see it looks good! Seems like basically you treat the entire RHS as an effective qobjevo? I ran through various > examples, and couldn't find any issues!. I simplified things a bit further. In the time-dependent case the RHS matrix is calculated without adding the Liouvillian to the diagonal and then the kron of the Liouvillian is added to the RHS at the end, resulting in a simpler QobjEvo. >> 4. The HEOM can't really take new QObjEvo arguments each time run is called because calculating the RHS again is quite expensive. Maybe something can be done?. Arguments are supported now because the full RHS is a QobjEvo!. >> 5. Compare performance to the HEOM in 4.7.; > ; > On the fermionic examples, with very-large system Hilbert space, there was a little slowdown in the RHS construction. Maybe the slowdown has gone away now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739:1677,perform,performance,1677,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739,1,['perform'],['performance']
Performance,"@arnelg and @cgranade, you are both raising good points here. I'm not exactly sure what the best solution for this particular issue is, but do tend to agree with @arnelg that we do not want functions that perform unexpected actions, if possible, and that explicit is better than implicit. However, ultimately, it has to be the docstrings that should resolve any ambiguities, because not all functions can be intuitive to everyone, since we all have different backgrounds and expectations. So if the current behaviour is clearly described in the docstring, it should also be an acceptable solution I think. But one important thing that @arnelg also alluded to is that if at some point we expect that we might want to use `composite(S, O)` to mean something different than `composite(S, to_super(O))`, then we should better not implement the operator-to-superoperator promotion implicitly in `composite` now. Since the `composite` function is brand new it might be a good idea at this point to avoid doing these implicit assumptions on how it will be used until various use-cases has been explored in more details. I absolutely agree that it is great to have discussions about these kind of design issues, and it's great that you both have taken an interest in this particular issue. I also agree that Qobj.dims is a bit obscure and not that flexible, and maybe insufficient for complex cases with mixes of operators, kets, superoperators along different subsystems. This would not be an easy thing to change, but having a discussion about the short-comings and possible solutions would be great. I've created a new page on the wiki for listing various issues and design short-comings in qutip:. https://github.com/qutip/qutip/wiki/Future-Design-Changes. Feel free to add to this page and edit what's already on it (and of course, propose solutions!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58190164:205,perform,perform,205,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58190164,1,['perform'],['perform']
Performance,"@cgranade I'm really liking the overall look of the Instrument class -- it's a much easier way to deal with measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:. * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground.; * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases like this where there are essentially an infinite number of possible constructors, it makes sense to not ""bless"" any of them by sticking them on the class.; * It would be good to have one really nice use case that we could turn into a guide entry in the documentation. The current small examples are great, but it would be good to add one slightly bigger worked example that did something more ""exciting"".; * I would not push everything into the `qutip` namespace (largely because we would likely not want that in v5, although I should actually check what v5 is doing in `qutip.__init__` these days).; * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release). Hoping to hear comments from others!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-949022910:865,perform,performed,865,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-949022910,1,['perform'],['performed']
Performance,"@jakelishman this is great, also thanks @dweigand for this PR. I tried out the function and it is very fast and could be great for specific use cases. My idea was a bit more simple - precomputing the `coherent_dm` operators (using qutip.coherent_dm) and using the `expect` function. But that performs worse that the original `qfunc` as well as this implementation of course. So this is great. I would be happy to merge this but have one thought:. This new implementation is sacrificing the ease-of-understanding of how Q-functions are computed with a very efficient and fast, but complicated class-based implementation. This means that users who want to look under the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_d",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:292,perform,performs,292,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['perform'],['performs']
Performance,"@jakelishman, about the two issues you raised:. 1. Import time related to `import qutip`; I agree with you that in order to make it frictionless for downstream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:234,load,loading,234,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['load'],['loading']
Performance,"A few points which came up:. - We can make the solve call very similar to `mesolve` where the user specifies a Hamiltonian, the coefficients describing the system and the size of the system as an argument dictionary. ```; system = {""N"": 100, ""emmission"": 0.5, ""loss"": 0.1}; pisolve(H, tlist, c_ops, e_ops, args=system); ```; - However this only works for Hamiltonians constructed with some specific operators. As the method is for dicke states only, the distinction between this solver and `mesolve` should be stated clearly. This is to prevent someone trying to pass a generic Hamiltonian. - Checks have to be included to make sure that the Hamiltonian and the operators specified are proper for the dicke states. - Since the user will not be concerned with the matrix M which governs the evolution `dp/dt = Mp`, we should probably find better ways to represent it and perform the dot product to generate RHS. @nonhermitian We have the M matrix as a pure dictionary of {(row, col): val}. We can write our own function for the dot product just by using this dictionary. Or, is it better to convert it into a sparse matrix and use Scipy's dot product function ? Converting from the dictionary to sparse M has some overhead.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332725530:870,perform,perform,870,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332725530,1,['perform'],['perform']
Performance,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:393,queue,queue,393,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,2,"['concurren', 'queue']","['concurrent', 'queue']"
Performance,"Great feedback @hodgestar. Let me add this: It would be nice to clarify explicitly benchmarks from the beginning. ; A bit like you did when mentioning the 14 qubit cap for QFT gate simulation. ; For example, goals of this would be:; - For qutip/qutip: Faster `mesolve` (add details of a typical example with current times/bottlenecks); - - For qutip/qutip: More qubits simulated in `mesolve` and `steadystate` ; - For qutip/qutip-qip: Capability to simulate more qubits (add current example with benchmark + code). For all examples we could add details of a typical example with current times/bottlenecks (we could use gists). This can be of very wide interest, but finding physical examples of interests and use cases would be helpful. For example, qubit space nevertheless explodes exponentially. But adding even a bit more qubits in `steadystate` can impact state of the art simulation of dissipative phase transitions in many-body systems. I also think that having a sort of code design template could help. This is a more general point triggered by this issue. This may be a QuTiP idea but looks at some point more technical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489:322,bottleneck,bottlenecks,322,https://qutip.org,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489,2,['bottleneck'],['bottlenecks']
Performance,"Hi @dweigand, this looks interesting. It would you be nice to push this forward, adding some tests for this and integrating @Ericgig suggested changes. I am wondering whether there is a more intuitive (explicit) option than `qfunc_amat `. Something like a Boolean `precompute`?. Writing some documentation for this, in https://github.com/qutip/qutip-doc, would allow users to discover this option more easily at http://qutip.org/docs/latest/guide/guide-visualization.html#husimi-q-function, it's very nice you have some performance checks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-536368295:520,perform,performance,520,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-536368295,1,['perform'],['performance']
Performance,"Hi @michelinesoley,. Your bug report inspired me to dig into the `qutip.control.optimize_pulse` sparse matrix support which lead to some fixes in #1621. When you increase `N` in your example from 2 to 3, it changes the internal type used by the optimizer to represent propagators. You can also make the `N = 2` case fail by changing the last line to:. ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=True)); ```. Your example can be made to work for `N = 3` (albeit slowly) by changing the following lines:. ```python; mapped = Qobj(mapped, dims=[[N]*4 + [2]*4] * 2); ```; (which was a bug in the example itself -- it created a Qobj with the right shape but wrong dimensions) and the last line to . ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=False)); ```; For me the `N = 3` case was slower with `sparse_eigen_decomp=True`, but perhaps it will be better for your full problem. If you would like to try `sparse_eigen_decomp=True` you are welcome to try the patch in PR #1621 and I would appreciate feedback on any performance issues for larger systems. We are currently working to support bigger systems in QuTiP 5 by using the new flexible Qobj data layer (which supports both sparse and dense matrices already and will hopefully support GPU and TensorFlow matrices in the near future).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386:245,optimiz,optimizer,245,https://qutip.org,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386,2,"['optimiz', 'perform']","['optimizer', 'performance']"
Performance,"Hi Louis,. There is work in development that will allow `QobjEvo` to be build from callback also, not just list. This will make callback work anywhere easily. . I was in the impression that H callback worked already for mcsolve. I rewrote part of mcsolve and broke it. Looking at your commit, I inverted `_funcrhs_with_state` and `_funcrhs`...; Sorry to have you take time to correct it. The 20x is big, but the list format allows for optimizations that are hard to do with a callback. A big one is that you don't need to create a new matrix/Qobj when calling `mul_vec`, just use it. With this code, I see a 20x between `mul_vec` and creating a Qobj a python function. . ```; import numpy as np; import qutip as qt. qoe = qt.QobjEvo([qt.qeye(3),[qt.destroy(3), lambda t,_:np.sin(t)]]); qoe.compile(). o1 = qt.qeye(3); o2 = qt.destroy(3) ; def H(t):; return o1 + o2 * np.sin(t). v = np.ones(3)+0j; %timeit qoe(0); %timeit qoe.mul_vec(0, v); %timeit H(0); %timeit H(0).data * v; ```. One optimization you could do is having the callback return a `np.array` instead of a Qobj. In `mcsolve`, this would probably be simple to implement and I expect some speed gain. But it can't really be officially supported in Qutip, for now. . ps. All those 'redundant' argument setting are for reusing the system (`ss`) in multiple call of `mcsolve` with different args, used in `correlation`. Using string coefficient, the compilation step can take a few second, so it is set to be able to reuse a compiled system, changing the `psi0`, `args`, `e_ops`, etc. This will become a less obscure feature in v5 when solver object are available.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634:435,optimiz,optimizations,435,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"Hi paul,. Thanks for the feedback. I think maybe Rob had originally included the mkl stuff, but I took it out when I was bug fixing. Will put it in, I didn't realize it gave such a big performance boost. thats cool. I will also follow your advice and stick in a finite frequency to make sure all the solvers work. . I had a poke around in discussion forums for numpy and scipy, and it seems like the problem is that they throw an exception when they decide L is ""exactly singular"" (which technically it is). Sometimes numerical rounding errors prevent this exception, as occurs in larger systems, or adding a finite frequency, so it tries to solve it anyway and succeeds, because the projector Q on the right-hand side guarantees a solution. Conversely, matlab will just throw a warning, and try and solve it anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/528#issuecomment-243988381:185,perform,performance,185,https://qutip.org,https://github.com/qutip/qutip/pull/528#issuecomment-243988381,1,['perform'],['performance']
Performance,"Hi!. About the comments: yes, absolutely I'll leave more. It's a bit silly that I haven't yet, since one thing that was frustrating me previously was not understanding what was trying to be done! I think as time goes by I'm getting a bit better about being clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a goo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:618,load,load,618,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['load'],['load']
Performance,"I completely agree with you that random tests really aren't the right way to go in general, but right now our problem is that basically QuTiP's entire testing suite is based on randomised tests, and that's an awful lot of technical debt to overcome any time soon :(. . The `dnorm` tests have historically been a huge problem, even though basically nobody's worked on `dnorm` for a long long time now (for context, see in particular #880 and #874). We don't actually even know if the failures in `dnorm` are deterministic and reproducible, although it turns out that I had a brief look into this when I joined as a GSoC student about a year ago... I don't remember doing it at all!. I know this is super inelegant and not the perfect method, but it's kind of a nasty trade-off - I don't have time to really dig into `dnorm` (a topic I know almost nothing about) to work out an appropriate solution to temperamental errors, we do want `dnorm` to be tested since we're shipping it, and the slight flakiness keeps causing us test suite failures about 1 in 10 times. I'm somewhat opposed to fixing the random seed because having the variance over several test runs does actually help us cover more ground (eventually) - fixing it to a ""known good"" seed actually seems to me to be more of a mask of potential problems than this. Of note: the pytest plugin I'm using reports the number of reruns it performed in the analysis at the bottom - they show up in a yellow alongside the ""skips"" and ""xfails"" - so it's not completely hidden. I'd love to have a property-based testing suite like hypothesis up and running - that definitely seems like the proper solution to this in the end. In the meantime, I'm open to swapping to a fixed random seed if you think that's much better - testing is one place where I'm really aware of my lack of formal experience in software engineering, so I'm basically just learning as I go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227:1392,perform,performed,1392,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227,1,['perform'],['performed']
Performance,"I don't have xvfb (pytest-xvfb) installed specifically for qutip, but it is used by other packages (The general use of pytest-xvfb is to facilitate testing of GUI, graphical or windowing functionality without having an normal Xserver active. That is, it can be useful for automated CI testing of gui packages, for instance in chroots or cloud CI infrastructure). Since qutip doesn't use xvfb directly this bug won't be a problem for general CI testing, where only qutip is loaded on a cloud instance (for instance Debian testing done at https://ci.debian.net/packages/q/qutip/). But before I upload a package to the Debian infrastructure, I like to run the tests on my own system to be confident they're likely to pass. So this is where the problem happens, running tests on my own system, where I have pytest-xvfb installed for testing other packages. (pytest has this bad habit of loading all available plugins whether or not they're actually used by the tests being run. It's quite annoying actually. It would be better if it only loaded plugins specified in conftest.py). So the use case is running the qutip tests on my own system, where pytest-xvfb simply happens to be installed for other purposes not related to qutip. There are ways of working around the problem, for instance the `--no-xvfb` option could be explicitly added to the `pytest` command line. But it can be useful if the test code itself can be made robust with respect to the problem (e.g. in this case just replacing `plt.clf()` with `plt.close('all')`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791:473,load,loaded,473,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791,3,['load'],"['loaded', 'loading']"
Performance,"I don't think it breaks the functional API at all - in fact it almost makes it stronger, since everything is a ""function"" at every stage. This kind of partial application is classic part of functional programming. Perhaps I don't understand _why_ you want to move to a class-based API? I'd be quite strongly against having the user have to instantiate classes to do very simple parts like creating operators. Certainly in Python programming, I don't think a class-based interface is de facto the right sort to aim for, and procedural is much more ""Pythonic"". For one, it's a lot of unnecessary boilerplate for simple operations. It adds cognitive complexity for the advanced user to decide ""should I use `displace` or `Displacer`?"", and in the strong majority of use-cases, the operator creation is not a computational bottleneck so we'd be adding it for no gain. A lot of operators have no meaningful reason to live in a class, like `sigmax` and so on, so now you have a split between operators that need a class and operators that don't, or you do something really crazy like requiring the user to do; ```python; sx_builder = qutip.operators.SigmaX(); sx = sx_builder.get_operator(); sy_builder = qutip.operators.SigmaY(); sy = sy_builder.get_operator(); sz_builder = qutip.operators.SigmaZ(); sz = sz_builder.get_operator(); ```; when all they wanted was `qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()`. Obviously that example is a bit facetious, but what benefit does the user derive from having to write boilerplate to access simple functionality?. All the operators already share a class in `Qobj`, and things like `displace` and `sigmax` are factory methods of `Qobj`. What shared functionality do the factory methods possess that means they should be classes?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332:819,bottleneck,bottleneck,819,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332,1,['bottleneck'],['bottleneck']
Performance,I see. `propagator` performed better with a system of d=2^5 in a simple test. I better do some testing of even larger systems then before merging this. Any thoughts on why `propagator` might be slower also for small systems and short integration times? Some overhead related to parallelization? Thanks for the info.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-230108497:20,perform,performed,20,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-230108497,1,['perform'],['performed']
Performance,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:481,perform,perform,481,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['perform'],['perform']
Performance,"I understand completely!. I'd probably just go to `int64` with your internal CSR implementation for the moment. Would it be very easy to have the `int32`/`int64` boiled down to a single compile-time flag, for those people that compile QuTiP manually and feel they really need the smaller `int32` matrices? The pre-compiled pip/conda releases could be `int64`. That might be a simple way to provide some support for ""both"". Somehow, I thought that SciPy would put a lot more emphasis on performance, and do things like Kronecker products without conversion. It would seem that SciPy should be the place to really optimize the sparse linear algebra implementation, including all the possible combinations like `CSR * DIA`. Then everyone could build on top of that, making custom sparse-matrix implementation unnecessary. Maybe when someone gets some serious funding for working on QuTiP, encapsulating all of this better would be doable. So, just something to keep in mind before bolting on too many things onto the existing custom implementation (like multiple sparse and full storage formats). Once you open up that can of worms, it just might be better to re-design `Oobj.data` to have a very broad base (e.g. SciPy), and keep the custom CSR as an optional, highly efficient implementation for the special case, maybe in a separate package. Either way, it's going to be a lot of work, and not something for a minor-version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384094285:486,perform,performance,486,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384094285,2,"['optimiz', 'perform']","['optimize', 'performance']"
Performance,"I was not referring to the implementation, I agree that the method you implemented is clearly much better, because as you say it only calculates matrix-vector product and trace in one go. However, you could have kept the same function API as previous cy_expect_rho_vec function and I doubt it would make any difference in the performance (perhaps a a small difference, and in that case we can keep both, but then the old cy_expect_rho_vec should use the same implementation as the one you suggested for cy_expect_rho_vec_fast).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/56#issuecomment-25358782:326,perform,performance,326,https://qutip.org,https://github.com/qutip/qutip/pull/56#issuecomment-25358782,1,['perform'],['performance']
Performance,"I've lost the plot a bit with a whole load of changes to `Coefficient` now merged into this PR. Is there a chance we can split that out into its own PR?. I would expect `QobjEvo.__call__` to be thread-safe/re-entrant. The fact that coefficients seemingly don't support this immediately is worrying to me. A simple call like that changing ""global"" state of the object is dangerous; it has a habit of leaking out even in single-threaded applications, just like the bug I described previously with a call to `mesolve` modifying an existing `QobjEvo` in place. In this case I don't see an immediate bug, but it's very non-obvious behaviour and it would be easy to accidentally introduce one in it in the future (or maybe I just can't think of one now). Having `_BaseElement` be mutable makes all time-dependent operations of `QobjEvo` unresolvably thread-unsafe without copying on every operation. That said, looking again, I'm not sure I understand `_BaseElement`: it seems like `_EvoElement` and `_FuncElement` do entirely different things on `call`? What's the purpose of it, and if we put all speed considerations aside what would the signature and behaviour of `_BaseElement._call` be?. Could you write some docstrings on all the elements to explain their use-cases as well, so we've got it all stored for the future?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122:38,load,load,38,https://qutip.org,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122,1,['load'],['load']
Performance,"In [3e530c0](https://github.com/qutip/qutip/pull/1854/commits/3e530c01d9cf686fc195c38c2cc26d0ee5bccfa8) I borrowed @nonhermitian's suggestion and switched to `concurrent.futures.ProcessPoolExecutor` in the hopes that the core Python developers have figured out how to make that works on Windows too. It also simplifies the management of the pool of workers, which is a win by itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854#issuecomment-1168954175:159,concurren,concurrent,159,https://qutip.org,https://github.com/qutip/qutip/pull/1854#issuecomment-1168954175,1,['concurren'],['concurrent']
Performance,"In general in pytest we use the bare keyword `assert` for almost everything. All the functions in `np.testing` are from the ""before times"", when test tooling wasn't as good as it is nowadays - they were a big improvement on available warning messages back before 2015. Nowadays, though, `pytest` does introspection on assertion failures, so it has even better message reporting than the `np.testing` functions, and it lets you write much clearer code. For example, `assert_equal(x, y)` is much better spelled in pytest as `assert x == y`, because it's much faster to read and pytest does better error reporting for it. Similarly, testing for exceptions is better with; ```python; with pytest.raises(ValueError):; call_that_raises(1, ""hello, world""); ```; as opposed to the numpy form `np.testing.assert_raises(ValueError, call_that_raises, 1, ""hello, world"")` - the pytest one is much easier to read, and the error message is better. The only numpy one we still use is `np.testing.assert_allclose` when we're comparing several numpy arrays. That's just because `pytest` doesn't have a good function that's aware of multidimensional arrays (at least not one that I know). This file still has a load of old numpy testing code in it (e.g. `np.testing.assert_equal`) because it was written quite a long time ago, when that was the recommended way of doing things. We're changing over slowly, so we can take advantage of all the nice features of pytest. In this case, I changed `np.testing.assert_allclose(x, y, atol=tol)` to `assert abs(x - y) < tol`. I removed `np.testing.assert_allclose`, because that gives the mistaken impression that we're comparing arrays (we're not, we're comparing two scalars). I could have changed it to `assert x == pytest.approx(y, tol=tol)`, except in this case the test file hasn't been converted to `pytest` style yet, and I wanted to keep the total change of this PR as small as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671:1193,load,load,1193,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671,1,['load'],['load']
Performance,"In general the biggest thing you should consider is readability, and to be fair, that's a little subjective. You're welcome to comment on my PR if you think I've done anything that's unreadable. You can scope fixtures at whatever level is appropriate. In this particular case, I scoped the `dimension` fixture at the module level, because there's loads of places that needed to test varying dimensions, and it's very convenient to define it just once. In the few cases where we needed to override that (e.g. in `dnorm`), I overrode it by providing a definition in a tighter scope - either at class level or per-function (via `pytest.mark.parametrize` directly). The correct scoping just depends a lot on the type of tests you're writing - if you're going to have to overwrite something constantly then module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:347,load,loads,347,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['load'],['loads']
Performance,"Looks interesting! Possibly a bit out of scope for qutip? In principle you could put this progress bar in a separate module and still use it with qutip (as long as it supports qutip's basic progressbar interface). Then it could also be used in non-qutip related projects. . If its to be included in qutip, I think it should not be added to qutip/ui/progressbar, but as an module of its own that would not be loaded by default, so a user would have to load it explicitly when using it, like the way the current ipynbtools and picloud modules work. . Perhaps it would make sense to move these ""extras"" or ""extensions"" modules to a subdirectory of their own, say ""qutip/extensions"" or ""qutip/ext"" to keep the import paths manageable. In that case I think that qutip.picloud should be moved to that directory as well. I think this would keep these extensions reasonably isolated for the core qutip modules, which I think we should prioritize if we are to allow these kind of peripheral modules to increase in number in the future. @nonhermitian any opinions on this?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63268318:408,load,loaded,408,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63268318,2,['load'],"['load', 'loaded']"
Performance,"Looks like there were breaking changes introduced in CVXPY 1.1 that changed some sort of matrix handling? I think the entirely of the `dnorm` function was written by Chris Granade about 5 years ago, and they're off at Microsoft now. As an immediate workaround, you can pin the version of CVXPY in conda to 1.0 (`conda install 'cvxpy=1.0'`) to fix it. Otherwise, probably there's a solution in swapping over a load of `*` to `@` in `qutip/semidefinite.py` and `qutip/metrics.py`, but that might be a bit nontrivial to solve. If you succeed, please do make a pull request. The reason that the ""simple"" cases work is that QuTiP detects them as known results and has fast paths avoiding `cvxpy`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713:409,load,load,409,https://qutip.org,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713,1,['load'],['load']
Performance,"Not directly testing for commuting operators, but Qobj implements **eq** and **ne** which means that you can test for commuting operators simply by doing. ```; if a * b == b * a:; # a and b commutes; ```. Maybe it could be useful with function that performs this test for two Qobj instances, but currently we do not have such a function. The PR looks good so I'll merge it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/41#issuecomment-22768490:249,perform,performs,249,https://qutip.org,https://github.com/qutip/qutip/pull/41#issuecomment-22768490,1,['perform'],['performs']
Performance,"Nothing too clever here. As in cached flag cleared whenever unitarity threatened; The check could probably be more efficient, but as not expected to be used intensively, then this would seem acceptable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364163769:31,cache,cached,31,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364163769,1,['cache'],['cached']
Performance,"Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1458,optimiz,optimizer,1458,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['optimiz'],['optimizer']
Performance,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:1007,perform,perform,1007,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['perform'],['perform']
Performance,"One thing to consider is that CSR and Dense already _dno't_ return the same result for every operation. For example, for matmul:; ```python; size = 100; random = np.random.random((size, size)); a = qt.data.Dense(random); b = qt.data.to['CSR'](a); np.all((a).to_array() == (b).to_array()) # True; np.all((a+a).to_array() == (b+b).to_array()) # True; # This one is different for Dense and CSR even though the operation is the same. ; # This seems to be due to the order at which the operations are performed with Dense; # and CSR matmul and the fact that floating point addition is not associative. ; # (something I learned by reading the test_mathematics in qutip); np.all((a@a).to_array() == (b@b).to_array()) # False.; ```; Although the change in `auto_tidyup` will probably make the difference bigger, given that with tidy-up ""all"" we can not ensure the same output for every operation, I would say that it should be ok to set auto_tidyup to `[CSR]`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1610#issuecomment-882012839:496,perform,performed,496,https://qutip.org,https://github.com/qutip/qutip/pull/1610#issuecomment-882012839,1,['perform'],['performed']
Performance,"So, while I agree that having a flexible storage format is a good way to go, the truth of the matter is that no one has time to implement such a big change. SciPy supports both 32 and 64-bit ints, and checks to see which ones are needed at runtime. e.g. a tensor product of two sparse matrices with int32, may need int64 in the result since their shape is larger. We could also do a similar thing, but it is a lot of work. The reason why we no longer use standard SciPy sparse objects is: 1) They tend to have a sizeable overhead when being created and/or manipulated do to redundant safety checks. 2) Many of the sparse operations are not well optimized. Because SciPy supports many different sparse formats, they had to generalize many of their core operations, making them slower. For example, the sparse kronecker product first converts to COO format, does the tensoring, and then converts back to the original format. Our method is much faster. Supporting more than just the current CSR format is also problematic. As already mentioned, there would be type checks, conditionals, and format conversions everywhere. e.g. what happens when DIA * CSR. As usual, available time is the limiting factor here. Support for both int32 and int64 is not that hard, but would take some time. Just int64 would make smaller matrices larger, but would allow for much greater system dimensions. In this later case, it would be a simple switch `int` -> `int64` and `size_t` -> `uint64` in the Cython code, and the fastsparse module (plus probably other places.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384005667:645,optimiz,optimized,645,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384005667,1,['optimiz'],['optimized']
Performance,"Sorry for the slow response... It seems to me like @Ericgig summed it up pretty concisely. Although I'm not sure I understand how #1123 fits in: what is the plan for `Qobjevofunc`, and how would it fit in to specifying time-dependent Hamiltonians?. The only thing that's ever really bothered me was the mandatory `args` as part of the signature, even if it's not used. That's lead to the need for workarounds like the `allow_args` parameter in; https://github.com/qucontrol/qdynpylib/blob/f7b54af3e586683cdfd9b3dd666c5cf540d843e1/src/qdyn/pulse.py#L555. If there's a future `f(t)` option, I should be happy. In the abstract, `f(t, **args)` and `f(t, state_vec, **args)` would be the most elegant, but if there's a severe performance hit, that could be a problem. I'm surprised, though: I would have thought that `f(t, **args)` and `f(t, args)` should be almost the same thing in the Python internals, since you can modify `args` inside of `f` and pass it to lowerlevel function as `**args` again. Even from the user's perspective any current code with signature `f(t, args)` could have its signature replaced with `f(t, **args)` without requiring any change to the function body. But I'm clearly missing something. Can you point me to lines in the code where this becomes a bottleneck?. I'm also quite in favor of introspection to accept a wide variety of signatures: you can even introspect argument names, so the possibilities are endless. The introspection is probably slow, but if it only has to be done in a very high level function, that might be alright.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696:721,perform,performance,721,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696,2,"['bottleneck', 'perform']","['bottleneck', 'performance']"
Performance,Thanks @Ericgig for feedback.; I see (having read more carefully) in; https://github.com/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb; there is an example showing the equivalence of using `smesolve` and `general_stochastic` with a clear performance enhancement in the former. So I think I can easily switch my example to use `smesolve`. Thanks.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581:272,perform,performance,272,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581,1,['perform'],['performance']
Performance,"Thanks Robert. As far as the problems with the sparse solver in scipy, I have read around a bit and found that the solver doesn't perform well for finding eigenvalues with small magnitude. From a scipy tutorial:. http://docs.scipy.org/doc/scipy/reference/tutorial/arpack.html. > Note that ARPACK is generally better at finding extremal eigenvalues: that is, eigenvalues with large magnitudes. In particular, using which = 'SM' may lead to slow execution time and/or anomalous results. A better approach is to use shift-invert mode."". See also the example on that page. I tried using the 'shift-invert mode' as suggested, and that gave better results. But, they are still pretty bad for the problem I want to solve: I'm trying to find the low lying spectrum for a very large Liouvillian, as I vary a single external Hamiltonian parameter. The smallest one (in magnitude) is always zero, and all others are negative. Supposedly, the vanishing of the real part of the eigenvalue with the second largest (closest to zero) real part can be useful for characterizing phase transitions, see, for example, this recent paper: http://prl.aps.org/abstract/PRL/v110/i15/e150401. I attach a plot where I have computed the eigenvalue with second largest real part (which is also the one with second smallest magnitude; the two criteria coincide) using 1) scipy.linalg.eigvals (green line) and 2) scipy.sparse.linalg.eigs (blue line): https://dl.dropboxusercontent.com/u/6042643/liouvspec.png. As you can see, the results from the sparse solver are pretty poor (I assume the dense solver results are correct). . As far as the physics goes: Another thing to notice is that the system goes through phase transitions at -2.0, 0.5 and 2.0 for the parameter along the x-axis, and there are no signs of that in the plot. On a side note, I also wasn't able to reproduce Fig 2(a), middle panel, of the PRL paper I linked to, although I got qualitative agreement if I tried with different parameters than what is quoted in th",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/16#issuecomment-16416062:130,perform,perform,130,https://qutip.org,https://github.com/qutip/qutip/issues/16#issuecomment-16416062,1,['perform'],['perform']
Performance,"The problem seems pretty simple, I think I could take care of it. However, I don't have much experience in collaborative programming, in particular I don't know what the local customs are. (I know how to use git, but I'm not familiar with the layout of the library, what tests should I perform [or even add my own, since this issue wasn't noticed before 5.0.0] etc.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2129#issuecomment-1483294457:286,perform,perform,286,https://qutip.org,https://github.com/qutip/qutip/issues/2129#issuecomment-1483294457,1,['perform'],['perform']
Performance,"We can't implement `__hash__` for `Qobj`, sorry - it's just not possible while following the [Python data model](https://docs.python.org/3/reference/datamodel.html#object.__hash__). The two principle points that a hash function must follow from there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs an",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:847,cache,cache,847,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,2,['cache'],['cache']
Performance,"Wow! Thanks for getting on this!. Let me elaborate a little. First,. > How useful would something like this be to you? Do you think you'd keep an implementation based on this long term? Or would you end up implementing your own thing in the end anyway?. It would be *extremely* useful. It would become the default propagator for the krotov package. I would expect that with the ability to propagate single time steps with `mesolve`, optimization becomes feasible for any system that `mesolve` can propagate over the entire time grid in less than a few seconds. That would be a huge improvement over the current situation, where the lack of a good propagator limits the optimization effectively to toy problems. We *may* still try to implement in Cython some polynomial propagators (propagators that evaluate `exp[-i H dt] Ψ` or `exp[L dt] ρ` via expansion into a polynomial series - think Taylor series but faster converging, through the use of Chebychev or Newton polynomials). That work hasn't really been going anywhere lately, though. It may or may not end up being faster than `mesolve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:433,optimiz,optimization,433,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,2,['optimiz'],['optimization']
Performance,"alse; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1637,load,loadparams,1637,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['load'],['loadparams']
Performance,"ame time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading to surprising behavior. From my point of view, no package really owns `+` so any conversion would be implicit.; But `qutip.groundstate(netket_operator)` is in itself an explicit cast. I am explicitly asking to qutip `please give me the ground state of this object`. I do expect to get a Qobj out, and qutip to make an effort converting this object to whatever format he internally wants to work with. Same goes with time evolution. . > For greater discussion, here's an alternate approach: instead of objects defining __qutip_qobj__, instead we expose an entry-point qutip.Qobj.register_conversion_function(converter, type, priority, version=None), and downstream libraries register functions rather than defining methods on their classes. I do prefer such an approach. I just did not think that was an option in QuTiP.; In fact we have redesigned NetKet to allow for something similar using multiple dispatch. (I’m not familiar with Tensorflow either.). I do agree with all your points, especially the first. As for your last point, about downstream packages having to import qutip: This is indeed a potential issue. I’ll try to investigate this: maybe there is a solution whereby a callback executed on package load can be registered with importlib?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:4188,load,load,4188,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['load'],['load']
Performance,"be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:8997,perform,performs,8997,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['perform'],['performs']
Performance,"e whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is identical to `Seq(1, 2, 3, 4)` and `Seq(1, Par(2), 3)` is identical to `Seq(1, 2, 3)` but distinct from `Seq(1, Par(2, 3))`). One alternative may be to have a single subclass `Outcome` of `tuple` instead of both, then overload operators like `|` to mean parallel. Internally, could use two subclasses like `Seq` and `Par` but display visually as `Outcome(1, 2 | 3, 4)` instead of `Outcome(1, Par(2, 3), 4)`. > * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:1612,perform,performed,1612,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['perform'],['performed']
Performance,"e_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There is a bug in eigh on mac with openblas. --> **Switched to <code>qutip.sparse.eigh</code>**; * [x] What does this <code>optimizer</code> function optimize? Could you add a simple description. --> **This functions finds the optimal number of Lanczos algorithm iterations inside Krylov, added as small description**; * [x] <code>_estimate_norm</code> is nerver used. --> **Removed**; * [x] Why is tlist here and not in solve? It seems strange that you can reuse one instance for multiple H and psi0, but you cannot change tlist. --> **Removed when deprecating <code>KSolve</code> class**; * [x] Why do you need KSolve? --> **It was a workaround to the cognitive complexity check of github. But we decided to revert back to a non Class solver, as it adds another type of complexity.**; * [x] Increasing pdx here when it is already controlled by enumerate is strange. The best would be to include the first partition here too. Otherwise using update_progress_bar(pdx + 1) is clearer. --> **Changed ""pdx"" into ""idx"". Added the first lazy iteration inside the loop, now it is more clear with <code>update_progress_bar(idx)</code>.**; * [x] T",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:2137,optimiz,optimizer,2137,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,2,['optimiz'],"['optimize', 'optimizer']"
Performance,"ed features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Best; Boxi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:2202,perform,perform,2202,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['perform'],['perform']
Performance,enblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark; - ipyparallel; - unittest2pytest; - pytest-benchmark; - pytest-repeat; - pytest-subtests; - fastcore; - fastscript; - asttokens; - cached-property; - crayons; - executing; - flask; - humanize; - ipywidgets; - itsdangerous; - jsonpickle; - jupyter; - littleutils; - nbconvert; - outdated; - portpicker; - sqlalchemy; - widgetsnbextension; - nbdime; - rich; - mayavi; - pip:; - birdseye; - icecream; - nbdev==1.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:3333,cache,cached-property,3333,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['cache'],['cached-property']
Performance,"er the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit thick here because I understand the overall idea of the code but somehow I am not confident it will be easy for others to understand on first read. Do you think we can make it a bit more transparent how the `_qfunc_alpha_matrix` works and that the crux of the method is computing the operators `coherent_dm` in an efficient way and saving them? If I have understood the code correct, I could try to document it a bit more and simplify it. . Let me know your thoughts and correct me if I misunderstood something @jakelishman @Ericgig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:1979,cache,caches,1979,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['cache'],['caches']
Performance,"higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventually favourable to this, so I propose we focus the discussion only on this point, and leave aside implicit or explicit conversion discussions. . I'll gladly open another issue to discuss implicit conv",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:2381,perform,performed,2381,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['perform'],['performed']
Performance,"https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162) being a particular example. In particular, the interface we define there is strictly for a single time step, makes no reference to `tlist` and we use ``H=[H0, [H1, u]]`` where `u` is a scalar for that particular timestep. However, I can easily write a wrapper around an `mesolve` that would work something along the lines of the pseudo-code from https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563:. ~~~; for (i, state) in enumerate(; mesolve([H0, [H1, ctrl_array]], state0, list); ):; # assuming `state` is at tlist[i]; new_val = calculate_control_value_for_next_step(state); ctrl_array[i] = new_val; ctrl_array[i+1] = new_val # ignoring IndexError; ~~~. So I don't think you'd have to worry about these details: any implementation with low overhead that would allow me to get the states from `mesolve` as well as tweak the control fields for the next time step should be sufficient. In particular, the `.step` that you discuss in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451 looks very much like it's going in the right direction! The one option from the earlier https://github.com/qutip/qutip/issues/1571#issue-917391349 that might *not* work very well is callback functions. I *might* be able to work around that, but it wouldn't really fit into the control flow of an optimization. The code. ~~~; solver = MeSolver(H, c_ops, options=opt); solver.start(t0, rho0); for t in [t1,t2, ...]:; rho_t = solver.step(t, args=new_args); ~~~. from https://github.com/qutip/qutip/issues/1571#issuecomment-858740451 on the other hand would definitely fit the bill, assuming that `args=new_args` is the way to modify the control fields. Sorry for the long explanation, but I hope this clarifies the use case. If not, I'll be happy to try to explain better! ;-)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:5130,optimiz,optimization,5130,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['optimiz'],['optimization']
Performance,"ier to separate out different versions, and detect what to register as the conversion function with QuTiP. This is a particular advantage for Python classes compiled as C-extensions (like from C or Cython), which typically don't allow assigning methods dynamically.; - A library could even register multiple versions of the conversion function with us, and let QuTiP handle API versioning centrally, rather than requiring downstream libraries to roll their own checks.; - We're basically already set up to do this in `dev.major` already. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new formats), and I think the benefits of a priority queue of allowed converters outweighs it in convenience for users.; - It involves some global state of the `qutip` library, which _may_ cause problems for multiprocessing if somebody tries to register a `lambda` converter (can't pass through `pickle`, though I'm not 100% on whether module-level stuff needs to), and of course there's the query of what happens when converters are registered in separate processes. We already have this ""problem"" in 5.0 though, because that's how the entire underlying dispatch mechanism is handled; we can just require that converters must be pickle-able.; - If a downstream package wants to lazily `import qutip` (we're a pretty heavy import right now), it's harder in this method; you'd basically have to ask a user to call `otherlibrary.register_qutip()`. For one, I'm going to put some effort into making `import qutip` take much less time for 5.0 (the main problem right now is we essentially eagerly import all ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:7304,queue,queue,7304,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['queue'],['queue']
Performance,"igation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse scheduling,; > e.g. Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages; > or commonly used language e.g. through quantum assembly language (qasm); >; > ------------------------------; >; > Also, the last outcomes have some overlap with the last project. Although; > I also find this circuit importation very important, I guess two projects; > should not have overlap if they are both selected.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67EWECDUIOQMTKK2N2DREGE2LANCNFSM4KZUPCQQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:2731,perform,perform,2731,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['perform'],['perform']
Performance,"instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy transitive equality (i.e. `a == b and b == c` does not imply `a == c`). The primary consequence of this is that the cache will simply be a little un",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1372,cache,cache,1372,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['cache'],['cache']
Performance,"is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy transitive equality (i.e. `a == b and b == c` does not imply `a == c`). The primary consequence of this is that the cache will simply be a little under-zealous, and sometimes it will calculate the value twice for three similar `Qobj`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1470,cache,cache,1470,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,7,"['cache', 'perform']","['cache', 'cached', 'performance']"
Performance,"les in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance improvement. It improves the organization of the code, allows greater flexibility in adding new things to an existing class and modifying it easily. In terms of user experience, this means less clutter in the code and verbosity of arguments. You can initialize something once and keep re-calculating things by dynamically changing the parameters and calling the `class` method. If it does not hurt to slowly shift in this direction then I think we should go for it. If there is an alternative reason for not having classes then please let us know as the cons @bencbartlett mentions has more to do with following qutip precedent than some fundamental disadvantage in performance or use. @ajgpitch @nonhermitian",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:1994,perform,performance,1994,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,2,['perform'],['performance']
Performance,"ly by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. That's an extremely exciting prospect! I'd love to be able to have internal sparse data for Qobj's that represent Hamiltonians/Liouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with nump",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:3901,optimiz,optimization,3901,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['optimiz'],['optimization']
Performance,"n my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`. Discussed more at the top.; - CuPy (CUDA operations on ndarray-likes) explicitly does not allow implicit conversion to `np.ndarray` (see cupy/cupy#3421) for performance reasons, but does implement `__array_ufunc__` and `__array_function__`.; - pydata/sparse (nd-sparse _arrays_ instead of scipy.sparse's sparse _matrices_): always implement `__array_ufunc__` and `__array_function__` because they are trying to be a sparse version of `ndarray`. By default, they do not implement `__array__` for performance/memory reasons, but they do allow turning it on by an environment variable. Do not implement anything:; - JAX (autodiff) tries really hard to replace numpy rather than interoperate with it; - scipy.sparse matrices are intended for use with a _matrix_ interface, not a broadcast-able _array_ interface. They specifically document that they will not provide this interface (see scipy/scipy#12279). Somewhat weirdly, they do have custom methods for some elementwise ufuncs, though (like `np.sin`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:7126,perform,performance,7126,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,2,['perform'],['performance']
Performance,"ouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:4238,optimiz,optimization,4238,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['optimiz'],['optimization']
Performance,"p` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:1567,perform,perform,1567,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['perform'],['perform']
Performance,"q__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy transitive equality (i.e. `a == b and b == c` does not imply `a == c`). The pr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1309,cache,cache,1309,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['cache'],['cache']
Performance,"ray. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>dot</code> method that act the same a sparse array's one. This is not needed.; * [x] The <code>dims</code> of the output are not kept at <code>evolved_states = map(Qobj, evolved_states[1:-1]</code> --> **Separated into two variables. Now dimensions are also be kept.**; * [x] Why make <code>lanczos_algorithm</code> part of the public interface? --> **Mistake; corrected**",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:2105,optimiz,optimize,2105,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,3,['optimiz'],"['optimize', 'optimizer']"
Performance,"ream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:1152,perform,performed,1152,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['perform'],['performed']
Performance,"reated it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There is a bug in eigh on mac with openblas. --> **Switched to <code>qutip.sparse.eigh</code>**; * [x] What does this <code>optimizer</code> function optimize? Could you add a simple description. --> **This functions finds the optimal number of Lanczos algorithm iterations inside Krylov, added as small description**; * [x] <code>_estimate_norm</code> is nerver used. --> **Removed**; * [x] Why is tlist here and not in solve? It seems strange that you can reuse one instance for multiple H and psi0, but you cannot change tlist. --> **Removed when deprecating <code>KSolve</code> class**; * [x] Why do you need KSolve? --> **It was a workaround to the cognitive complexity check of github. But we decided to revert back to a non Class solver, as it adds another type of complexity.**; * [x] Increasing pdx here when it is already controlled by enumerate is strange. The best would be to include the first partition here too. Otherwise using update_progress_bar(pdx + 1) is clearer. --> **Changed ""pdx"" into ""idx"". Added the first lazy iteration inside the loop, now it is more clear with <code>update_progress_bar(idx)</code>.**; * [x] There is no work done between update_progress_bar(0) and update_progress_bar(1). Did you start it? --> **Fixed simultaneously by the previous change.**; * [x] Shouldn't this also double the last element? prepare_next_step remove the first and last so the last state is not stored. --> **Good catch, it was a bug. Fixed.**; * [x] <code>_happy_breadkown</code> never used... --> **Should be fixed, performing extra checks**; * [x] evolved states It should keep the input state dims. --> **Checked all situations that came to mind and output dimensions seem to be working properly.**; * [x] Why import <code>mcsolve</code>? --> **Removed**",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:3547,perform,performing,3547,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,1,['perform'],['performing']
Performance,"resentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple pulse scheduling, e.g.; > Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages or; > commonly used language e.g. through quantum assembly language (qasm); > ----------------------------------------------------------------; >; > Best; > Boxi; >; > From: Nathan Shammah<mailto:notifications@github.com>; > Sent: Tuesday, February 25, 2020 8:36 AM; > To: qutip/qutip<mailto:qutip@noreply.github.com>; > Cc: Boxi Li<mailto:etamin1201@gmail.com>; Author<mailto:; > author@noreply.github.com>; > Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wishes,; >; > Nathan; >; > Dr. Nathan Shammah; > Postdoctoral Research Scientist; > Theoretical Quantum Physics Laboratory; > RIKEN, Wako, Saitama, Japan; > www.n",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:2893,perform,perform,2893,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['perform'],['perform']
Performance,"sh function must follow from there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1211,cache,cache,1211,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['cache'],['cache']
Performance,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:3063,perform,performing,3063,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['perform'],['performing']
Performance,"te` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L312) in Krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) with something that's reentrant so I don't have to [re-initialize the integrator in every time step](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L244) , that might be a significant performance boost already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:13598,perform,performance,13598,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['perform'],['performance']
Performance,"turn same result, ... ok; > > > Non-composite system, operator on Hilbert space. ... ok; > > > Non-composite system, operator on Liouville space. ... ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_choi(q) returns q if q is already Choi. ... ok; > > > Superoperator: Test that converting a two-qubit superoperator through ... /usr/local/lib/python2.7/dist-packages/qutip/qobj.py:412: UserWarning: Multiplying superoperators with different representations; > > > warnings.warn(msg); > > > ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj ad",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11083,optimiz,optimized,11083,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['optimiz'],['optimized']
Safety," (3,); >>> arr[0]; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. This change purely affects `np.array` and similar constructors when passed sequences of objects that all implement `__array__`. It is still possible to make a Numpy array of `Qobj` even with `Qobj.__array__` defined in Numpy 1.20, but you have to be rather more indirect about it:. ```python; >>> arr = np.empty((3,), dtype=object); >>> arr[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; >>> arr.shape; (3,); >>> arr[0]; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. The reason numpy does this now is because (my understanding is that) defining `__array__` was meant to be a much stronger guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:2129,safe,safely,2129,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['safe'],['safely']
Safety," Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately, you've already done most of its setup, so the time penalties should be much less than the current system (i.e. you avoid several Kronecker products and safety checks on the time-dependence terms because you've done them once at the start). In theory, that should already work from at least 4.5 onwards, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:2166,avoid,avoid,2166,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,2,"['avoid', 'safe']","['avoid', 'safety']"
Safety," excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand 2 to N (using swap) ... ok; gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; gates: expand 3 to 3 with permuTation (using toffoli) ... ok; gates: swap gate ... ok; qutip.tests.test_gates.TestGates.test_are_cliffords ... ok; qutip.tests.test_gates.TestGates.test_clifford_group_len ... ok; Graph: Graph Degree ... ok; Graph: Breadth-First Search ... ok; Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:8454,detect,detection,8454,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['detect'],['detection']
Safety," it is not clear which is the best one:. 1. Ensure all eigen values and eigen vectors are computed.; 1.1 This could be done by finding an alternative to scipy to solve for sparse matrix decomposition, but it would add extra requirement and it must be easy to install with pip.; 1.2 Use a third call to `scipy.sparse.linalg.eigs`/ `scipy.sparse.linalg.eigsh` using `sigma` to find all the pseudo degenerate values. It need to be done while being careful about special cases. This would make the sparse eigen solver even slower than it already is.; 2. Allow to sort by other orders, such as the complex value or magnitude. This would not solve the issue, but give some options to go around it. However the dense eigen solver would be expected to behave the same and the dense eigen solver does not have this options, so we need to implement it ourselves. This sorting option would also be required for any other data type we want to support. To go around that, the `Qobj` methods could be responsible for the sorting, the `sort` argument would only be passed to the dispatched function when `sparse=True`.; 3. Refuse to use the sparse solver for the full decomposition as scipy does. The sparse eigensolver is both slow and hard to use in this case. Also the eigen vectors computed by the sparse solver are stored in a dense array, so it is not that useful to save memory...; 4. Implement our own sparse eigen decomposition...; 5. Only document the issue without fixing. The default is the dense solver, which is both faster and safer in almost all cases.; 6. Something else...; ; I would personally go for either 1.2 of 3. ; Adding different sorting options in `Qobj` methods (2) and removing them from the dispatched functions, could be nice, but it's not a fix. The place to start would be to debate on the solution. If you have some opinion on the matter, please let us know.; Once we've made up our mind, you can implement it, but only 5 would be an easy fix in line with other _good first issue_.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1998#issuecomment-1472150161:1613,safe,safer,1613,https://qutip.org,https://github.com/qutip/qutip/issues/1998#issuecomment-1472150161,1,['safe'],['safer']
Safety,"'t access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6577,safe,safe,6577,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['safe'],['safe']
Safety,"0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d018e0). Current thread 0x0000000109fe85c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. So these both use `scipy.linalg.eig`, which is suspicious. ## Valgrind checks. To see if I could track it down, I had a go with valgrind. This isn't guaranteed to find everything, because I'm not using a debug build of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:5297,detect,detected,5297,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['detect'],['detected']
Safety,"; ```; Map(Space(Map(Space, Space)), Space(Map(Space, Space))); ```; to; ```; Super(Space(Map(Space, Space)), Space(Map(Space, Space)), rep='super'); ```; and I definitely like having the superop rep included in it. The user is never ever meant to write any of this themselves, so the literal length shouldn't be too much of a problem. You'd still specify dimensions using the exact same list syntax that we currently use, it's just we'd immediately parse it into this internal representation and internally operate on this, because it's much faster. Essentially what I'm describing here is an abstract syntax tree for relevant linear algebra structures. We _could_ even have the tensor index dimensions stored within the `Compound` objects, to help with `ptrace`, `permute`, the future `local_multiply` algorithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. Y",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:1455,safe,safety,1455,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['safe'],['safety']
Safety,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:761,safe,safe,761,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,1,['safe'],['safe']
Safety,"> It would be good if our naming can help avoid confusion between the concept of a `dtype` (which is the type of elements within an array) and our `data backend type` (which is how the array itself is represented). I'm not sure what a good convention is, but ensuring the docstrings for the backend type have specific examples of valid inputs would definitely help (e.g. `dense` or `csr`). We actually deliberately called this `dtype` to make it familiar to Numpy syntax. The concept of the Numpy `dtype` is mostly irrelevant when using QuTiP, because all data is invariably `double complex`, and this `dtype` is the larger data type of `Qobj`. I suppose it could be `fmt` instead (as a common abbreviation of `format`)? Or even the full word `format` I suppose. Agree on the docstrings - we should have an alias like Numpy's `array_like` that we define clearly in documentation in one place.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1420#issuecomment-809213365:42,avoid,avoid,42,https://qutip.org,https://github.com/qutip/qutip/pull/1420#issuecomment-809213365,1,['avoid'],['avoid']
Safety,"> What's the preferred method to link functions that are not public APIs?. I don't think we should link to non-public API in the doc. Non-public API should not (at least no encouraged) be used outside of QuTiP because we may change it without issuing a deprecation warning. Besides, [`check_unitary`](http://qutip.org/docs/latest/apidoc/classes.html?highlight=check_isunitary#qutip.Qobj.check_isunitary) is a public API, it is a class method under `Qobj`, rather than a function, see bellow. > Qobj vs qobj link. `qutip.qobj.isoperbra` and `qutip.Qobj.isoperbra` are different. The lower case `qobj` is a submodule in QuTiP (qobj.py) while `Qobj` is a class. `isoperbra` is not a class method under `Qobj`. It is a function defined under the submodule `qobj`. So only `qutip.qobj.isoperbra` is the correct path. To make the life simpler, I would recommend to use the shortcut ``:func:`.isoperbra` `` for functions and ``:meth:`.Qobj.class_method` ``. Or even simpler: ``:obj:`.isoperbra` ``. Sphinx will automatically look for the correct match. As long as there are no two functions with the same name, we are safe. This isalso because `qutip.qobj.isoperbra` will be a wrong path in qutip 5.0. The file is moved.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1499#issuecomment-824624079:1111,safe,safe,1111,https://qutip.org,https://github.com/qutip/qutip/pull/1499#issuecomment-824624079,1,['safe'],['safe']
Safety,"> You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits. Yep ! That's what I thought as well..for all the single qubit gate outputs with two targets. I knew I was getting an error but was not sure why it was not the same error as both of you. It was because I was using the released version (like you predicted). . I was trying to put off installing from source for as long as I could because I would have to install conda and other dependencies manually. Now, I did get `ValuError`. Thanks !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555:357,predict,predicted,357,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555,1,['predict'],['predicted']
Safety,"@arnelg and @cgranade, you are both raising good points here. I'm not exactly sure what the best solution for this particular issue is, but do tend to agree with @arnelg that we do not want functions that perform unexpected actions, if possible, and that explicit is better than implicit. However, ultimately, it has to be the docstrings that should resolve any ambiguities, because not all functions can be intuitive to everyone, since we all have different backgrounds and expectations. So if the current behaviour is clearly described in the docstring, it should also be an acceptable solution I think. But one important thing that @arnelg also alluded to is that if at some point we expect that we might want to use `composite(S, O)` to mean something different than `composite(S, to_super(O))`, then we should better not implement the operator-to-superoperator promotion implicitly in `composite` now. Since the `composite` function is brand new it might be a good idea at this point to avoid doing these implicit assumptions on how it will be used until various use-cases has been explored in more details. I absolutely agree that it is great to have discussions about these kind of design issues, and it's great that you both have taken an interest in this particular issue. I also agree that Qobj.dims is a bit obscure and not that flexible, and maybe insufficient for complex cases with mixes of operators, kets, superoperators along different subsystems. This would not be an easy thing to change, but having a discussion about the short-comings and possible solutions would be great. I've created a new page on the wiki for listing various issues and design short-comings in qutip:. https://github.com/qutip/qutip/wiki/Future-Design-Changes. Feel free to add to this page and edit what's already on it (and of course, propose solutions!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58190164:992,avoid,avoid,992,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58190164,1,['avoid'],['avoid']
Safety,"@goerz I think one of Mølmer's papers (maybe the one I have pointed out) addressed the equivalence of the two methods. Sorry, I don't have a definite paper to point out at this moment. I was actually organizing the Julia community to work on this direction (see [JuliaQuantum](http://juliaquantum.github.io)) from scratch, and hence didn't follow up the efforts in the measurement simulation within QuTiP. . When I was writing my paper on continuous measurement ([PRA, 93.023817](http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817)), I came up the argument that the former method may be more appropriate for measurement models. This is because measurements have to happen in evenly spaced time steps determined by the detector's integrating time, so it is intuitive to use a random number to judge if on each measurement step the quantum jump will happen. There may be a way to use the second method to implement the same measurement simulation model, but I didn't think too much on it. In reality, I developed another more efficient method without actually evolving the density operator in my paper to simulate continuous measurement using a set of stochastic equations for squeezing thousands of atoms' state which has not been included in QuTiP yet. Sorry I don't have more useful reference that explains this point in more details at this moment. Good luck!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-220744432:731,detect,detector,731,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-220744432,1,['detect'],['detector']
Safety,"@hodgestar Thanks for doing it!; The custom `m_ops`, as far as I understand, would be of a form `[np.sqrt(coef)*(a+a.dag()), -1i*np.sqrt(coef)*(a - a.dag())]` where `a` would be an annihilation operator for a photon in a mode that is detected, and `coef` represents whatever happens between the emission and the detection (cavity-guide coupling, detection efficiency etc). In the current implementation it would be subset of default `m_ops`, that are formed as; ```python; for c in sso.sc_ops:; m_ops += [c + c.dag(), -1j * (c - c.dag())]; ```. As for the tests, I can think of something like this; ```python; def test_heterodyne_mesolve():; b = 1 # drive amplitude; gamma = 1 # spont. emission rate; eta = 0.3 # coupling efficiency; n_steps = 1000; n_traj = 50; ; H = np.sqrt(eta*gamma) * b * sigmay(); c_ops = [np.sqrt(gamma)*sigmam()]; psi0 = basis(2); times = np.linspace(0, np.pi*2, n_steps). n_tr = 3. sme_het = smesolve(; H,; psi0,; times,; [],; c_ops,; e_ops=[sigmax(), sigmay(), sigmaz()],; store_measurement = True,; dW_factors=[1e-5, 1e-5], # to make tests simpler; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay()],; ntraj=n_traj,; noise=123, # random seed; ); ; assert np.array(sme_het.measurement).shape == (n_traj, n_steps, 1, 2); assert all(np.isclose(np.array(sme_het.measurement).mean(axis=0)[:,0,0].T, np.sqrt(eta)*sme_het.expect[0], atol=2e-2)); ; def test_incorrect_m_ops_heterodyne_mesolve():; ; with pytest.raises(ValueError, match=""The measured operators for the heterodyne method supposed to be pairs of quadratures: m_ops should have even length.""):; sme_het_bad_mops = smesolve(; sigmax(),; basis(2),; np.linspace(0,1,10),; [],; [sigmam()],; e_ops=[],; store_measurement = True,; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay(), np.sqrt(eta)*sigmaz()], # three operators; ntraj=10,; ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548:234,detect,detected,234,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548,3,['detect'],"['detected', 'detection']"
Safety,"After you created a fork to work on #1242, a different PR (#1226) was merged into `master`. It so happens that #1242 and #1226 don't conflict so that merge succeeded, but the new changes you're now trying to make do. This is fundamentally a true merge conflict and so unfortunately there's no fancy way around it, though it could have been avoided if you'd matched the state of our `master` before beginning work here, and it would be a bit easier for you for future PRs to branch off before starting work (GitHub has [some nice material about this workflow](https://guides.github.com/introduction/flow/)). I've rebased your PR onto our `master` and fixed the resulting merge conflict for you. You should _immediately, without doing anything else_ reset your branch state to match mine, and then force-push your changes to GitHub to update the PR. To do this, do; ```bash; git remote add jakelishman https://www.github.com/jakelishman/qutip.git; git fetch jakelishman; git checkout master; git reset --hard jakelishman/Canoming-circuit-patch; git push --force; git remote remove jakelishman; ```; This will destroy anything on `master` that you may have but haven't yet pushed. You should do it anyway, because a lot of the underlying structure has changed from underneath you, and your changes aren't consistent with the current state of `circuit.py`. Please also note that the tests are failing after your modifications in (the current) 10e457e.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121:340,avoid,avoided,340,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121,1,['avoid'],['avoided']
Safety,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:191,safe,safer,191,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,3,"['safe', 'sanity check', 'unsafe']","['safer', 'sanity checks', 'unsafely']"
Safety,"Example implementation of `Qobj(thing)` with caveat noted below:; ```python; # qq.py; """""" A quick experiment with a Qobj creation API. """""". import qutip; import qutip.core.data. class NetketThing:; """""" An object with a __qutip_qobj__ method. """"""; def __init__(self, stuff):; self._stuff = stuff. def __qutip_qobj__(self, copy=True):; return qutip.Qobj(self._stuff, copy=copy). def _has_qutip_qobj_method(arg):; return getattr(arg, ""__qutip_qobj__"", None) is not None. def _call_qutip_qobj(arg, shape, copy=True):; # Note 1: shape argument intentionally ignored here -- arg should already; # know its dims and shape (possible a sanity check would be good); # Note 2: unfortunately, the .data object does not know the dims of; # of the Qobj, so the dims are lost. :/; return arg.__qutip_qobj__(copy=True).data. qutip.core.data.create.add_creators([; (_has_qutip_qobj_method, _call_qutip_qobj, 10),; ]); ```; Example usage:; ```python; # try_qq.py; """""" Trying out the experiment. """""". import qutip; import qq. nk = qq.NetketThing([0, 2]); q = qutip.Qobj(nk); qn = q.norm(); print(q); print(qn); ```; Explanation:; * `qutip.core.data.create` is the new Qobj data layer creation dispatcher. It's already called by `Qobj.__init__` after a few hardwired cases.; * We register a creator (i.e. a pair of functions) with priority 10. The first function checks whether `__qutip_qobj__` exists and the second function calls it if it does. Caveat:; * The creator provides no way to retrieve the `dims` from `arg` if the `arg` already knows what the `dims` should be. I can see a lot of uses for this so I propose we fix this part now regardless. Bonus:; * Adding this as a default creator gives us a good way to keep the creator list short while still supporting simple conversion of many objects to Qobjs in a flexible way. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908336732:627,sanity check,sanity check,627,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908336732,1,['sanity check'],['sanity check']
Safety,"Hi @Ericgig ; Thanks for investigating this so thoroughly. ; I guess it makes sense that unpacking a dict at each call is inefficient, so I think we should drop this idea. As you have suggested previously, users can always use module variables if they wish to avoid passing vars in `args`. So I think we should aim to keep it simple. I think adding `f(t)` as a signature option will be sufficient for what @goerz wanted and would be sufficient for using a Numba jit. So, my suggestion for the next major release (v5) would be that we have only two call sigs:; - `f(t, args)` (default); - `f(t)`. For now we will have to have the three (although I don't think the `rhs_with_state` is not widely used, if at all).; - `f(t, args)` (default); - `f(t)`; - `f(t, state, args)`; The default needs to remain as it is, because it is widely used. I think it makes sense to use introspection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:260,avoid,avoid,260,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['avoid'],['avoid']
Safety,"Hi @sarsid, there are still some tests failing. When you think the PR is really, just make it a ready-for-review PR and request a review. Besides, it would be great to address some of the style issues in code climate like ""Continuation line under-indented for visual indent"". Not all of them must be fixed though, it's more like a guide. The `pycodestyle` package can help you detect them locally if you would like to use it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-646002967:377,detect,detect,377,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-646002967,1,['detect'],['detect']
Safety,"Hi Emily,. The photocurrent is the number of detector clicks (i.e., jumps) per unit time, averaged over all trajectories. For sufficiently many trajectories, it will approximate $tr[C_n \rho(t) C_n^\dagger]$. If I'm not mistaken, you should find that; ```math; x = \frac{1}{\Delta t} \frac{1}{N_t}; ```; where $\Delta t$ is the spacing in your `tlist` and $N_t$ the number of trajectories. The integer (photocurrent/x) is simply the number of clicks in that time interval in all trajectories; we multiply with x for the ""per unit time, averaged over all trajectories"" that I wrote above. Paul. (PS. I only noticed your username now - is it possible we had a chat at QTD in August? Hope you are doing well!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2539#issuecomment-2403687615:45,detect,detector,45,https://qutip.org,https://github.com/qutip/qutip/issues/2539#issuecomment-2403687615,1,['detect'],['detector']
Safety,"Hi Louis,. There is work in development that will allow `QobjEvo` to be build from callback also, not just list. This will make callback work anywhere easily. . I was in the impression that H callback worked already for mcsolve. I rewrote part of mcsolve and broke it. Looking at your commit, I inverted `_funcrhs_with_state` and `_funcrhs`...; Sorry to have you take time to correct it. The 20x is big, but the list format allows for optimizations that are hard to do with a callback. A big one is that you don't need to create a new matrix/Qobj when calling `mul_vec`, just use it. With this code, I see a 20x between `mul_vec` and creating a Qobj a python function. . ```; import numpy as np; import qutip as qt. qoe = qt.QobjEvo([qt.qeye(3),[qt.destroy(3), lambda t,_:np.sin(t)]]); qoe.compile(). o1 = qt.qeye(3); o2 = qt.destroy(3) ; def H(t):; return o1 + o2 * np.sin(t). v = np.ones(3)+0j; %timeit qoe(0); %timeit qoe.mul_vec(0, v); %timeit H(0); %timeit H(0).data * v; ```. One optimization you could do is having the callback return a `np.array` instead of a Qobj. In `mcsolve`, this would probably be simple to implement and I expect some speed gain. But it can't really be officially supported in Qutip, for now. . ps. All those 'redundant' argument setting are for reusing the system (`ss`) in multiple call of `mcsolve` with different args, used in `correlation`. Using string coefficient, the compilation step can take a few second, so it is set to be able to reuse a compiled system, changing the `psi0`, `args`, `e_ops`, etc. This will become a less obscure feature in v5 when solver object are available.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634:1241,redund,redundant,1241,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634,1,['redund'],['redundant']
Safety,"Hi Vutshi. Yes, it is perfectly possible to implement the heterodyne detection using two homodyne detections with 50% efficiency, like you suggest. For the Milstein solver it might be the best, or at least the quickest, way to implement heterodyne, but I don't really agree that the current method is overcomplicated. It is in fact basically the same as the method you suggest, so I don't see that either would be more complicated or simpler than the other. The only issue is whether the two stochastic increments are divided up in several stochastic collapse operators or if the d2 function internally takes care of the both stochastic increments for a given stochastic collapse operator. The complexity is just shifted from the d2 function to somewhere else, which in general doesn't simplify anything. However, since the milstein solver you submitted is written so that it only support one increment per collapse operators, then there might be a real advantage of splitting the heterodyne process into two homodyne processes. . I've tried to make the qutip stochastic solver API as general as I could (and it is still a work in process), so that it will be as flexible as possible for implementing custom types of SMEs. Having support for multiple stochastic increments per collapse operators seems to be useful in certain applications. Although such SMEs could probably always be rewritten as multiple collapse operators with single stochastic increments, it might not always be the most natural way to define the SME. The heterodyne detection is one example of this, and it can be formulated in both ways, but I want the qutip SME API to work with both methods (at least with the basic euler solver, not necessarily with every solver we implement). However, that doesn't mean that the implementation of heterodyne for a particular solver has to use one way or the other. We should just document which solvers support multiple increments per operators and which solvers don't. So if it is easier t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22543416:69,detect,detection,69,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22543416,2,['detect'],"['detection', 'detections']"
Safety,"I am not sure what your example of 'n' photons represents. However, if ; you mean what is the probability of a single-photon in the state, as ; measured by calculating the expectation value,the answer converges to ; 0.272 at about 14 states to one-part in a thousand. > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 18:08; >; > OK, if it's intended then there's nothing to change in the code. But I ; > think it would be helpful to document this in a clearer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does /not/ depend on th",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284316:498,risk,risk,498,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284316,1,['risk'],['risk']
Safety,"I am on the side on having 2 `default_dtype` options for the `Qobj` creation functions. I have some question as to how/where to make `default_dtype` more consistent. Applying the default at Qobj creation feels risky to me. In the solver it will end up converting the states before computing the expectation value. It could create strange interactions with operators and unitary transformations (`Qobj[Dense].dag() -> Qobj[CSR]`). `Qobj(scipy_csr)` could be converted to something else... However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion.; It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format? . In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. ps. Should `eigenstates` return the states in one operator instead of a list of kets? I guess the states were used to create the operators fed to `steadystate`, so operator output would be more practical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861:210,risk,risky,210,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861,1,['risk'],['risky']
Safety,"I did this work some time ago, and so I did a git rebase in order to try and avoid any conflicts; I was advised this is the thing to do in such circumstances.; It seemed to go okay, some feedback on whether I did the right thing and did it correctly would be welcome",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/350#issuecomment-113537434:77,avoid,avoid,77,https://qutip.org,https://github.com/qutip/qutip/pull/350#issuecomment-113537434,1,['avoid'],['avoid']
Safety,"I think this is still relevant and could be a topic of work for future google SoC students or other students. . Recently I met Johannes Bausch who at Caltech used the algorithm toolbox for some fun example (predict the winner of the [world cup](https://quantumfrontiers.com/2018/07/02/the-world-cup-from-a-quantum-perspective/)), but this points to the fact that the QIP suite is still used. . Also, there might be room for basic I/O functionality to QiSKit and Rigetti. This quantum compiler integrability would further drive interest from the educational point of view. QuTiP is the best playground to learn realistic quantum mechanics and the notion of a compiler back-end could prove enticing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/441#issuecomment-464298751:207,predict,predict,207,https://qutip.org,https://github.com/qutip/qutip/issues/441#issuecomment-464298751,1,['predict'],['predict']
Safety,"I thought we had resolved the installation issues with the Fortran side by making the MC solver a optional (default to False).; I am not that I have fully digested everything in this thread, but @zerothi seems confident that there is just some small change that we need to improve integration with the latest Numpy. Its not clear to me what are the risks or other downsides.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155040632:349,risk,risks,349,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155040632,1,['risk'],['risks']
Safety,"I'm sorry I don't have a huge amount of time at the moment, but just to add an extra point (that it looks like I didn't think about before): if we _do_ add this, then any method that requires an unconditional `import qutip` in downstream packages probably isn't a suitable solution - `import qutip` already takes far too long (though a lot of this is importing various parts of `scipy`, which another library might do on our behalf), and it means that they'd have to do their own import checking to handle optional dependencies. In that sense, (ab)using Python's duck-typing with a magic method might be the best way to break the dependency/import problem. I'm definitely still against implicit conversion to `Qobj` in pretty much any situation - I can imagine we could define a safe, fairly forward-compatible interface for letting people do `qutip.Qobj(x)`, but as it stands, that's the limit that I'd want the interface to be used for. I particularly am really against the idea of implicit conversion. I don't see an advantage to allowing QuTiP functions to act implicitly on other objects; it means our own functions are slower (because we have to explicitly test inputs on _everything_), and it restricts us more from improving `Qobj`'s internals, because we have to maintain compatibility with the interface. We'd never really be able to output anything _other_ than a `Qobj` without this, so there's no reason not to just have the user convert the inputs to `Qobj` explicitly themselves - that isolates the efficiency penalty so you only pay it if you need it, and it'll likely be clearer in the end anyway, because explicit is better for following the logic than implicit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301:779,safe,safe,779,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301,1,['safe'],['safe']
Safety,"I've lost the plot a bit with a whole load of changes to `Coefficient` now merged into this PR. Is there a chance we can split that out into its own PR?. I would expect `QobjEvo.__call__` to be thread-safe/re-entrant. The fact that coefficients seemingly don't support this immediately is worrying to me. A simple call like that changing ""global"" state of the object is dangerous; it has a habit of leaking out even in single-threaded applications, just like the bug I described previously with a call to `mesolve` modifying an existing `QobjEvo` in place. In this case I don't see an immediate bug, but it's very non-obvious behaviour and it would be easy to accidentally introduce one in it in the future (or maybe I just can't think of one now). Having `_BaseElement` be mutable makes all time-dependent operations of `QobjEvo` unresolvably thread-unsafe without copying on every operation. That said, looking again, I'm not sure I understand `_BaseElement`: it seems like `_EvoElement` and `_FuncElement` do entirely different things on `call`? What's the purpose of it, and if we put all speed considerations aside what would the signature and behaviour of `_BaseElement._call` be?. Could you write some docstrings on all the elements to explain their use-cases as well, so we've got it all stored for the future?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122:201,safe,safe,201,https://qutip.org,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122,2,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,"If those editors claim to provide terminal emulation it should be reported as bugs to them. However, even if it is fixed there it will take a long time before such a fix would reach end-users. I think in the interest of avoiding regressions I think we should restore the previous TextProgressBar and rename the current one to EnhancedTextProgressBar or something like that. Then this new progress bar would not disrupt peoples workflow and users who wants to use it can do so by creating an instance of it and pass it to progress-bar enabled functions using the progress_bar keyword argument.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63267628:220,avoid,avoiding,220,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63267628,1,['avoid'],['avoiding']
Safety,"It could be that a pulse is too thin and missed.; When working with pulse, it's safer to always set [max_step](https://qutip.readthedocs.io/en/latest/guide/dynamics/dynamics-time.html#working-with-pulses).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552#issuecomment-2455520658:80,safe,safer,80,https://qutip.org,https://github.com/qutip/qutip/issues/2552#issuecomment-2455520658,1,['safe'],['safer']
Safety,It is not so much the safety checks as the order in which a simple single operator is converted internally to a list vs. when the safety checks are run. This is fixed in #631.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/630#issuecomment-272360048:22,safe,safety,22,https://qutip.org,https://github.com/qutip/qutip/issues/630#issuecomment-272360048,2,['safe'],['safety']
Safety,"It refers to the system's Liouvillian, I'd say. I think all the `C_n` there are stochastic jumps, `sc_ops `, while the system Liouvillian is the constant part, `c_ops`. But I am not 100% sure. . The user guide is partly out of date there, @Ericgig and others have considerably extended the functionalities of the stochastic solvers. Looking at the [API documentation](http://qutip.org/docs/latest/apidoc/functions.html#module-qutip.stochastic) is safer, and the [source code](http://qutip.org/docs/latest/modules/qutip/stochastic.html) is even more complete. . Meanwhile, you can also have a look at these development notebooks [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-milstein-speed-test.ipynb), [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb), and [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) with regards to the new methods (you can find them all, a bit hidden, at the bottom of the http://qutip.org/tutorials.html list). Technically this issue could be transferred under [`qutip/qutip-doc`](https://github.com/qutip/qutip-doc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702:447,safe,safer,447,https://qutip.org,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702,1,['safe'],['safer']
Safety,"Looks like there were breaking changes introduced in CVXPY 1.1 that changed some sort of matrix handling? I think the entirely of the `dnorm` function was written by Chris Granade about 5 years ago, and they're off at Microsoft now. As an immediate workaround, you can pin the version of CVXPY in conda to 1.0 (`conda install 'cvxpy=1.0'`) to fix it. Otherwise, probably there's a solution in swapping over a load of `*` to `@` in `qutip/semidefinite.py` and `qutip/metrics.py`, but that might be a bit nontrivial to solve. If you succeed, please do make a pull request. The reason that the ""simple"" cases work is that QuTiP detects them as known results and has fast paths avoiding `cvxpy`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713:625,detect,detects,625,https://qutip.org,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713,2,"['avoid', 'detect']","['avoiding', 'detects']"
Safety,"Note: the reported changes (other than the deletion of the licence from each source file) are all whitespace-only, or simply a reflow of the hard-wrapped text in `LICENSE.txt`. I didn't change the licence at all, other than the holder. I've also checked this with the same tool that GitHub uses, and it will definitely recognise the licence correctly after this. The whitespace-only changes in other files weren't actually 100% intended, but it was a function of how I did the licence detection - I normalised the whitespace at the ends of lines first. Looking through, I guess I only did that when changing the `doc` folder, not the main source code (I had to handle those two cases separately).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684:485,detect,detection,485,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684,1,['detect'],['detection']
Safety,"OK, if it's intended then there's nothing to change in the code. But I think it would be helpful to document this in a clearer way: there's a big risk of misinterpreting the operator.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286282270:146,risk,risk,146,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286282270,1,['risk'],['risk']
Safety,"Ok, yeah, I definitely see the use-case here. I'll leave it removed from `matmul` for the time being because I hadn't really organised that code to allow safe calling of the function with an `out` parameter, but I'll look to re-instate it, similarly with `add`. For `add`: I envisage a nice possibility for `QobjEvo` using `CSR` backing along the vein of `CQobjEvoTdMatched`: on instantiation we add together all the matrices, then we `memset` all zeroes along the `data` array and store it as `self._structure`. Then each time we `__call__` the object, we simply do `out = self._structure.copy()`, and use that as the output matrix, because we guarantee we'll always have enough space and the correct structure. There's a couple of minor kinks in the logic of `add_csr` that we might have to iron out in order to avoid an additional matrix addition, but the savings in memory allocation could be good. You're absolutely right about the `pxd` files - I haven't taken enough care to make sure they've got all the definitions in yet. Basically everything that isn't prefixed with an underscore in the `.pyx` files _should_ be in the `.pxd` files. I'll add them in tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648371869:154,safe,safe,154,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648371869,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"Repeating just changes the probability of failure, rather than actually detecting whether it was a rare fail, and `mesolve` tests aren't always the fastest, so repetition here isn't great. For simple unitary qubit operations, I think it should be easy enough to work out how the tolerance translates. It's difficult to say that if there's a numerical error then the error will be much greater - I caught some errors in the `test_gates.py` (I think) that were sneaking through because the tolerances were set too high. It's probably best to keep as tight a tolerance as is reasonable - here I think `2 * qutip.Options.rtol` would always be correct if the numerics are.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751:72,detect,detecting,72,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751,1,['detect'],['detecting']
Safety,"So, while I agree that having a flexible storage format is a good way to go, the truth of the matter is that no one has time to implement such a big change. SciPy supports both 32 and 64-bit ints, and checks to see which ones are needed at runtime. e.g. a tensor product of two sparse matrices with int32, may need int64 in the result since their shape is larger. We could also do a similar thing, but it is a lot of work. The reason why we no longer use standard SciPy sparse objects is: 1) They tend to have a sizeable overhead when being created and/or manipulated do to redundant safety checks. 2) Many of the sparse operations are not well optimized. Because SciPy supports many different sparse formats, they had to generalize many of their core operations, making them slower. For example, the sparse kronecker product first converts to COO format, does the tensoring, and then converts back to the original format. Our method is much faster. Supporting more than just the current CSR format is also problematic. As already mentioned, there would be type checks, conditionals, and format conversions everywhere. e.g. what happens when DIA * CSR. As usual, available time is the limiting factor here. Support for both int32 and int64 is not that hard, but would take some time. Just int64 would make smaller matrices larger, but would allow for much greater system dimensions. In this later case, it would be a simple switch `int` -> `int64` and `size_t` -> `uint64` in the Cython code, and the fastsparse module (plus probably other places.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384005667:574,redund,redundant,574,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384005667,2,"['redund', 'safe']","['redundant', 'safety']"
Safety,"Sorry I didn't get round to commenting on this PR sooner. Since it's now come up in #1579 around the subject of sorting out licensing in general in QuTiP, let me also note some stuff about that here. #1579 proposes to remove all individual-file licence text, because it is in general redundant, and makes it harder for us to centrally manage our licence. There is some concern (mostly mine), that it will be a little difficult for us to manage additional code which does not sign over copyright to the QuTiP admin team; if we accept it, we will have to keep the notice in perpetuity. This will pose a bit of a Theseus' ship problem for us if we ever want to re-organise the file that contains this code; after how many modifications is the code no longer NASA's, but QuTiP's? As long as it's not _ours_, we can't separate it out into different files, or mix it with other code (say additional implementations). I'm definitely not a lawyer, but I'm worried that will cause us code organisation problems in the future, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:284,redund,redundant,284,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['redund'],['redundant']
Safety,Thanks @Ericgig for feedback.; I see (having read more carefully) in; https://github.com/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb; there is an example showing the equivalence of using `smesolve` and `general_stochastic` with a clear performance enhancement in the former. So I think I can easily switch my example to use `smesolve`. Thanks.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581:153,detect,detection,153,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581,1,['detect'],['detection']
Safety,"Thanks for reporting this - it's an important bug that's snuck in. Right now, there's a few errors in your code that you can fix to get on your way again, but we need to fix the error on our side. You're using `sigmap()` which is the Pauli excitation operator and is only defined for a Hilbert space with dimension 2. You actually are working with a Hilbert space of dimension `nmax * nmax` (a tensor-product space), so your `e_ops` argument to `sesolve` is wrong - it's difficult to know exactly what you meant here. `destroy(2)` is equivalent to `sigmap()`, so it's possible you intended to have `e_ops` be `[qutip.tensor(a1, a2)]`?. ---. Maintainers: The error is actually a segfault, because QuTiP 4.5 (probably 4.4 too) does not do sufficient error checking on`e_ops` arguments - probably they're missing in the conversion to `CQobjEvo`. When the expectation is called, it has already sidestepped `Qobj`'s dimensions check and there is no matrix size check, so it simply segfaults on OOB access. The fix for the 4.x branch is to have a very loud Python-space error due to mismatched `Qobj` dimensions on entry to the solvers, or insert a size check within `CQobjEvo`. High priority: there's no reason we should be segfaulting here. Partially fixed in the 5.x branch; all matrix multiplications that take place in C-space have a size check and throw a Python exception, however the solvers still sidestep the `Qobj` dimension check so a tensor-product-space mismatch will not be detected.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492:1483,detect,detected,1483,https://qutip.org,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492,1,['detect'],['detected']
Safety,"Thanks for the clue, it was helpfull.; The source of problem is localization of `lscpu` util, which used by `_linux_hardware_info()` function.; The function expects `'Socket(s)'`, `'Core(s) per socket'`, etc in `lscpu` output, but in my system it actually `'Потоков на ядро'`, `'Сокетов'`, etc.; I think, maybe better less system dependent ways to calculate cpu count, for example, we could use `multiprocessing` module and it's `cpu_count` function. Or `len(os.sched_getaffinity(0))`for computers with dynamic cpu management (see [this](https://stackoverflow.com/questions/31346974/portable-way-of-detecting-number-of-usable-cpus-in-python) for details).; Or show exception/error, if we try to use lscpu and `LANG` is not english (or we couldn't found mentioned above `'Socket(s)'`).; Ideas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045:599,detect,detecting-number-of-usable-cpus-in-python,599,https://qutip.org,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045,1,['detect'],['detecting-number-of-usable-cpus-in-python']
Safety,"The `Qcircuit.tex` PR was unfortunately many many years ago, long before I made my first commit to QuTiP (according to `git log` it was by Anubhav Vardhan in 2014), so the damage is already done. It was on my mind because there was a PR about updating the version of the code in it (#1187). Nonetheless, we definitely should remove it. @BoxiLi Boxi: `Qcircuit.tex` is a concern for `qutip-qip` more than the main library from 5.0 onwards - it's currently in `qip/circuit_latex.py`, which we'll have removed, but you've gained. It might be most appropriate to handle this the same way Qiskit does - generate code which does `\usepackage{qcircuit}`, and leave it up to the user to have a properly-provisioned LaTeX environment. I note that `qcircuit` is included in MikTeX and TexLive since at least 2018 (but not sure when exactly it was added). > Yeah putting years I think is the correct thing. Didn't know that at the time. Ah, that's good to know, thanks. I'm trying to learn more about licensing - I'm trying to get it sorted now into the right form, but it's a really complicated field. I think if we change `LICENCE.txt` to. ```text; Copyright (c) 2011--2021 Paul Nation and Robert Johansson.; Copyright (c) 2021--2021 QuTiP Admin Team.; All rights reserved. <BSD 3-clause licence>; ```. and update the final `2021` as appropriate, we'll be in the best standing. That's also why we might want to remove the general licence text from each file - it's already redundant, but it'll be much harder to update if we have it scattered everywhere (automation would run the risk of us messing up and changing any external code's licence as well, I think, which would be wrong). > Look forward to talking to you in July!. Me too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845:1464,redund,redundant,1464,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845,2,"['redund', 'risk']","['redundant', 'risk']"
Safety,"The problem is recognising what a true 0 is from a small value. In your example on the new data layer, there will already be exactly 0 items explicitly stored (and `data.add_csr` is going to get faster and smarter in another PR, too) without `tidyup`, but much more concerningly `1e-15 * qutip.rand_herm(5)` will end up in a zero matrix, which is clearly absolutely wrong. The argument from Liouvillian doesn't work here - even before the new data layer, `liouvillian` never called the `tidyup` code because it accessed the `Qobj.data` field directly, rather than used `Qobj`. Since it then goes into `CQobjEvo` in most of the solvers, which also don't touch the `tidyup` code, it doesn't get called. I don't think there's any safe way to know if small values should actually be zero, or if they're just small values. It makes sense that we want to maintain as much sparsity as possible when values are truly zero, but I think having the QuTiP default be to attempt to tidy up after every addition, multiplication and matrix multiplication is quite unsafe, and for people who aren't doing very very sparse calculations, it's actually a slow down.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384:727,safe,safe,727,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384,2,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,"The tests fail because if one defines `f(t, args, k)` and defines `g = partial(f, k=0.5)` then the signature of g is `<Signature (t, args, *, k=5)>`. There will likely be other cases like this (e.g. many decorators will change the signature). I vote that we give up on all the complicated detection of the old syntax and simply ask users to change `f(t, args)` to `f(t, **args)` when they upgrade to QuTiP 5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881:289,detect,detection,289,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881,1,['detect'],['detection']
Safety,"We can in theory drop that requirement for users - it was there in the immediate aftermath of the Numpy 1.20 release, which broke C-ABI compatibility with previous versions, and we had a couple of problems with people building against Numpy 1.20 but trying to run against a prior version. Our CI and release versions will still all need to be built against Numpy 1.16 (or our minimum supported runtime Numpy) as the lowest common denominator until we drop support for all Numpy releases before 1.20, but we enforce that in our build pipelines anyway. Just to be clear (though I think you knew this):. > Can qutip be updated to run with current versions of Numpy?. QuTiP already runs correctly against Numpy 1.20 and Numpy 1.21, and its runtime requirements on Numpy are uncapped. It's just building from source that'll fail, and that was originally a sort of ""fail-safe"" mechanism. Also `pip install -e .` should automatically do build isolation for you, including installing all the build requirements into a temporary virtual environment, so it should have just worked here. Calling `setup.py develop` directly is kind of out-dated now, though it can still be useful if you're planning on doing Cython development; `pip`'s isolation actually usually means that the Cython compiler can't detect changes any more, so it always needs to rebuild everything. `setup.py develop`, because of its much lower-level status, leaves the source and extension-library files well enough untouched that it can do incremental compilation. If you're not doing Cython development (only Python), `pip install -e .` is much better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497:865,safe,safe,865,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497,2,"['detect', 'safe']","['detect', 'safe']"
Safety,"Yes, the QT stuff is bit troublesome.. and it is not a core functionality in qutip. The about() and demos() does not do much harm, so deprecate them in next release we can drop them alltogether in the following release. The progressbar is a bigger problem, because (if I got this right) it is partly due to the event-loop tricks we need to do to get the qt progressbar to work we have problems with catching keyboardinterrupt properly in for example mcsolve, and this makes it difficult to abort a calculation cleanly. This is big problem in IPython notebooks, where one cannot hit Ctrl-C and Ctrl-Z until process is stopped.. Factoring the qt progressbar out of mcsolve should therefore be a priority, and the simplest way to do this would obviously be to drop the qt progressbar function completely... I'll add a note about this in the roadmap wiki and closing this issue now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/19#issuecomment-18917941:490,abort,abort,490,https://qutip.org,https://github.com/qutip/qutip/issues/19#issuecomment-18917941,1,['abort'],['abort']
Safety,"Yes, the operator is acting like it should. When working with ; oscillators, you need to truncate at some point, and so issues similar ; to the one you raise are part of the territory. However, if one wants ; to be self-consistent, then you start with truncated operators, and then ; build all other operators / states and whatnot from there. -P. > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 18:08; >; > OK, if it's intended then there's nothing to change in the code. But I ; > think it would be helpful to document this in a clearer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.e",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284923:577,risk,risk,577,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284923,1,['risk'],['risk']
Safety,Your welcome and thanks for looking into this. I understand that there are functionality considerations to be made. Perhaps a simple assertion check would strike the right balance -- giving the functionality you want while avoiding the danger of faulty assumptions.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17175299:223,avoid,avoiding,223,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17175299,1,['avoid'],['avoiding']
Safety,"arately, you've already done most of its setup, so the time penalties should be much less than the current system (i.e. you avoid several Kronecker products and safety checks on the time-dependence terms because you've done them once at the start). In theory, that should already work from at least 4.5 onwards, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:3061,safe,safe,3061,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['safe'],['safe']
Safety,"braries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most libraries, and makes their class definitions more complex.; - Control between different versions is perhaps a little easier (though a minor point): this _feels_ easier to separate out different versions, and detect what to register as the conversion function with QuTiP. This is a particular advantage for Python classes compiled as C-extensions (like from C or Cython), which typically don't allow assigning methods dynamically.; - A library could even register multiple versions of the conversion function with us, and let QuTiP handle API versioning centrally, rather than requiring downstream libraries to roll their own checks.; - We're basically already set up to do this in `dev.major` already. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:6299,detect,detect,6299,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['detect'],['detect']
Safety,"ecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2704,safe,safe,2704,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['safe'],['safe']
Safety,"ers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2243,detect,detected,2243,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['detect'],['detected']
Safety,"fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2383,detect,detection,2383,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['detect'],['detection']
Safety,"her would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that defines what we accept as scalars. We then do: `isinstace(other, _ALLOWED_SCALARS)` and return `NotImplemented` if not there. Two options here:; 1) QuTiP allows only `numbers.Number`:; - In this case `qutip-tensorflow` can extend `_ALLOWED_SCALARS` with tf.Variable and tf.Tensor. However, if the user uses two plug-ins, say qutip-tensorflow and qutip-something-that-does-not-work-well-with-tensorflow (second plug-in), the second plug-in may not work properly. ; - The above point is not a big deal if we make clear that _ALLOWED_SCALARS must accept `complex(other)` for compatibility reasons. In this way the second plug-in can always default to `complex(other)` (this is already the default behaviour of `mul_dense`).; 2) QuTiP allows `numbers.Number`, `ndarray` of shape `(,)`, `tf.Variable` of shape `(,)` and more in the future.; - The upside of this method with respect to 3.1 is that users know which types they must accept.; - This is probably not a good idea as it means qutip has to handle new dependencies (tensorflow and probalby more in the future).; - This _still_ defines what an scalar is at he `Qobj` level. I think this is not bad as it seems to be the only way of avoiding `NotImplemented` at Python space exept for in special methods (`__mul__`, ...). I think that 3.i is the closest to an ideal solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:3871,avoid,avoiding,3871,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['avoid'],['avoiding']
Safety,"le for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing the same thing alive in the library at once, but we can't detect what version of an interface a downstream package requires (not keen on the idea of a `__qutip_qobj_api_version__` flag!!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:7965,detect,detect,7965,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['detect'],['detect']
Safety,"lement heterodyne, but I don't really agree that the current method is overcomplicated. It is in fact basically the same as the method you suggest, so I don't see that either would be more complicated or simpler than the other. The only issue is whether the two stochastic increments are divided up in several stochastic collapse operators or if the d2 function internally takes care of the both stochastic increments for a given stochastic collapse operator. The complexity is just shifted from the d2 function to somewhere else, which in general doesn't simplify anything. However, since the milstein solver you submitted is written so that it only support one increment per collapse operators, then there might be a real advantage of splitting the heterodyne process into two homodyne processes. . I've tried to make the qutip stochastic solver API as general as I could (and it is still a work in process), so that it will be as flexible as possible for implementing custom types of SMEs. Having support for multiple stochastic increments per collapse operators seems to be useful in certain applications. Although such SMEs could probably always be rewritten as multiple collapse operators with single stochastic increments, it might not always be the most natural way to define the SME. The heterodyne detection is one example of this, and it can be formulated in both ways, but I want the qutip SME API to work with both methods (at least with the basic euler solver, not necessarily with every solver we implement). However, that doesn't mean that the implementation of heterodyne for a particular solver has to use one way or the other. We should just document which solvers support multiple increments per operators and which solvers don't. So if it is easier to get the milstein solver working for heterodyne by simulating two homodyne detections, then let's go ahead use that method for that solver. The required preprocessing can be done in the smesolve function, or something like that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22543416:1538,detect,detection,1538,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22543416,2,['detect'],"['detection', 'detections']"
Safety,"minate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` tha",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5740,safe,safely,5740,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['safe'],['safely']
Safety,"mization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself bein",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5262,safe,safe,5262,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['safe'],['safe']
Safety,"nstructors when passed sequences of objects that all implement `__array__`. It is still possible to make a Numpy array of `Qobj` even with `Qobj.__array__` defined in Numpy 1.20, but you have to be rather more indirect about it:. ```python; >>> arr = np.empty((3,), dtype=object); >>> arr[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; >>> arr.shape; (3,); >>> arr[0]; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. The reason numpy does this now is because (my understanding is that) defining `__array__` was meant to be a much stronger guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:2381,safe,safely,2381,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['safe'],['safely']
Safety,"or each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfied with how the new rhs functions work I'll merge the branch sme-rhs-restructuring into qutip master and then feel free to submit a pull request with your milstein rhs implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1913,detect,detection,1913,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,2,"['avoid', 'detect']","['avoided', 'detection']"
Safety,"re those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of all N quantum trajectories ρ(t)'s expect (**Tr[ρ(t)A] maybe with different dW**), and on the other hand I want to compare the expected average of N quantum trajectories with the result of the master equation(`mesolve.expect`). This is similar to this code in Note (but the result in [Note](https://nbviewer.org/urls/qutip.org/qutip-tutorials/tutorials-v4/time-evolution/016_smesolve-inefficient-detection.ipynb) is `result.measurement`). `fig, ax = plt.subplots(figsize=(8, 4)). for m in result.measurement:; ax.plot(times, m[:, 0].real, ""b"", alpha=0.025). ax.plot(times, result_ref.expect[1], ""k"", lw=2). ax.set_ylim(-25, 25); ax.set_xlim(0, times.max()); ax.set_xlabel(""time"", fontsize=12); ax.plot(times, np.array(result.measurement).mean(axis=0)[:, 0].real, ""b"", lw=2);`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:2395,detect,detection,2395,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,1,['detect'],['detection']
Safety,"restructuring) where I have experimented with rhs functions that internally loop through the A_ops list. In simple cases it only loops through the list and calculates a contribution for each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfie",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1591,detect,detection,1591,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['detect'],['detection']
Safety,"s defines what an scalar is at the _specialisation_ level. However:; - It may cause inconsistent behaviour where some operations are allowed for a data layer (`TfTensor` or any other) but not for another one. I would argue that all specialisations should accept the same input, although operations may be handled differently internally (for example, in tensorflow we want to keep the graph state).; - `NotImplemented` only makes sense for some special binary methods (`__add__`, `__lt__`, etc) as Python employs `NotImplemented` to try `other`'s binary method. My concern is that if the dispatcher is used by itself at some points of the code (such as for the solver) returning `NotImplemented` may cause wrong error messages or even unexpected behaviour with future specialisations ( for instance, although it now raises a deprecation warning, `NotImplemented` is considered as `True` when evaluated as a condition). It seems to me that we should avoid having `NotImplemented` in python space (except for arithmetic operations in a class where they are useful and always make sense).; ; 2) Simon suggested to define what a scalar is at the _dispatcher_ level (or something similar to this but correct me if I am wrong). This would require to have a function that casts any defined scalar to a complex scalar. The dispatcher would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that define",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:1640,avoid,avoid,1640,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['avoid'],['avoid']
Safety,"series and pseudo-inverse methods ... ok; > > > Diagonalization of random two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and density matrix ... ok; > > > expect: operator and ket ... ok; > > > expect: operator list and state ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:2943,detect,detection,2943,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['detect'],['detection']
Safety,"t into this internal representation and internally operate on this, because it's much faster. Essentially what I'm describing here is an abstract syntax tree for relevant linear algebra structures. We _could_ even have the tensor index dimensions stored within the `Compound` objects, to help with `ptrace`, `permute`, the future `local_multiply` algorithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:2021,safe,safe,2021,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['safe'],['safe']
Safety,"te` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L312) in Krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) with something that's reentrant so I don't have to [re-initialize the integrator in every time step](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L244) , that might be a significant performance boost already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:12872,safe,safe,12872,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['safe'],['safe']
Safety,"the quick response @bencbartlett. . Feel free to ignore the comments regarding the shortening of arguments. That was just a suggestion to make things shorter. But as you said clarity is more important. I will not change `waveguide` to `wg` and I think you should leave the others as they are if you can't think of shorter ones. Same applies to the `temporal_basis_vector`. I think you can even add a `temporal_basis` as you mentioned. Regarding the double line breaks wrapping top-level functions, I know the pep8 standard is two newlines but some other QuTiP modules follow just a single line break, e.g., [floquet](https://github.com/qutip/qutip/blob/master/qutip/floquet.py). But again some other modules in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance impro",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:1025,redund,redundancy,1025,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,1,['redund'],['redundancy']
Safety,"the tensor index dimensions stored within the `Compound` objects, to help with `ptrace`, `permute`, the future `local_multiply` algorithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:2265,safe,safety,2265,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['safe'],['safety']
Safety,"to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:4241,avoid,avoid,4241,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['avoid'],['avoid']
Safety,"ucer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an issue with QuTiP. I suspect it isn't an issue with `scipy` either, but I'm not sure - it looks like a slight overwrite in MKL on macOS, though it's also possible that `scipy` passes some invalid pointers when dropping down to BLAS/LAPACK. I get the impression that the next steps involve dropping down a level of abstraction, down to Cython to directly call scipy's wrappers, or even fully down t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:7339,detect,detector,7339,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['detect'],['detector']
Safety,"umerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6159,safe,safely,6159,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['safe'],['safely']
Security," right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:4177,access,accessible,4177,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,3,['access'],"['access', 'accessible']"
Security," the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/nami",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:11490,access,accessible,11490,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['access'],['accessible']
Security,", and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:5132,expose,expose,5132,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['expose'],['expose']
Security,"----------------------; >; > Best; > Boxi; >; > From: Nathan Shammah<mailto:notifications@github.com>; > Sent: Tuesday, February 25, 2020 8:36 AM; > To: qutip/qutip<mailto:qutip@noreply.github.com>; > Cc: Boxi Li<mailto:etamin1201@gmail.com>; Author<mailto:; > author@noreply.github.com>; > Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wishes,; >; > Nathan; >; > Dr. Nathan Shammah; > Postdoctoral Research Scientist; > Theoretical Quantum Physics Laboratory; > RIKEN, Wako, Saitama, Japan; > www.nathanshammah.com; >; >; >; > On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:; >; > > I have some detail information for the GSoC 2020 project ""Error; > mitigation; > > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > > Wiki page. I post it here so if anyone finds it nice could copy it to the; > > Wiki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:4166,access,access,4166,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['access'],['access']
Security,"5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:12182,expose,expose,12182,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['expose'],['expose']
Security,": ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:6951,checksum,checksum,6951,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['checksum'],['checksum']
Security,"> Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works.; > ; > Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same. I have now made it so that the measure and measurement_statistics function precisely do this. Should we keep either mode (one mode is of the ""observable"" type and the other with the ""projective"" type) also as a api-exposed function? If that is not the case, what would be the correct way to write doc_strings ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389:751,expose,exposed,751,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389,1,['expose'],['exposed']
Security,"@Ericgig I think it's unavoidable to have some sort of global state that tells the C compiler which type to choose, and I think passing it as a compilation option is a simple and straight forward solution. Using macros won't change the need for a compilation flag and will make fetching the correct numpy type trickier. If cython does eventually provide a nicer option, I am happy to use it, but they are still having long discussions about the right direction to take. One thing that would make things nicer would be to expose the compilation options used in, for example, `qutip.utilities` so that compilation becomes `compile_time_env=qutip.utilities.compile_time_env()`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-1104929052:521,expose,expose,521,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-1104929052,1,['expose'],['expose']
Security,"@jakelishman, about the two issues you raised:. 1. Import time related to `import qutip`; I agree with you that in order to make it frictionless for downstream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:965,expose,exposed,965,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['expose'],['exposed']
Security,"@jrjohansson Thanks for comments, and I am happy you like it!. I will fix things (also, there is some internal stuff). With respect to plots - still I learnt them how to _make_ plots instead of just _using_ them, so after I make fixes I would appreciate . `complex_array_to_rgb` I am exposing it on purpose, not by an accident (see `__init__.py`).; The rationale is following: in QM one works with complex numbers, be it in wave functions, density matrices or other operators. However, I am not aware of cmap-like functions for complex numbers in Scipy (except for some dedicated packages; see also: [my answer to this StackOverflow question](http://stackoverflow.com/questions/15207255/is-there-any-way-to-use-bivariate-colormaps-in-matplotlib/17113417#17113417)). If you do know a more standard/supported/general/canonical method of mapping complex numbers to colors, I would be happy to use it (instead of `complex_array_to_rgb`). Otherwise, having `complex_array_to_rgb` exposed allows plotting other kinds of things.; For example:. ```; imshow(complex_array_to_rgb(a_density_matrix.full()), interpolation='none'); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41377018:975,expose,exposed,975,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41377018,1,['expose'],['exposed']
Security,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:871,access,access,871,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,2,['access'],['access']
Security,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:1002,access,access,1002,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,1,['access'],['access']
Security,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:427,access,access,427,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,1,['access'],['access']
Security,"Early thought:. The `solver.add_feedback` approach doesn't look too bad, but it does seem a bit odd because on does to specify the state parameters when constructing the operators that the define the system -- i.e. H, c_ops, etc. Could we not expose the feedback on the QobjEvo itself so that users can then do:. ```python; H = QobjEvo([op, lambda t, ket: bra @ ket], feedback={""ket"": ""qobj""}); ...; ```. or; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); H.add_feedback(ket=""qobj""); ...; ```. or even; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); solver = Solver(...); solver.rhs.add_feedback(ket=""qobj""); ```. Thoughts?. It will get a bit trickier for the feedback that is less easily available from the state, but perhaps solvers can just check whether the ops they're using need the special feedback?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538:243,expose,expose,243,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538,1,['expose'],['expose']
Security,"Hi Boxi,. Can you please modify the projects of the Wiki page as you deem best?; All: we can also think of changing the order of them. It may be that; project #3 is deemed the most important. Best wishes,. Nathan. Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com. On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:. > I have some detail information for the GSoC 2020 project ""Error mitigation; > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > Wiki page. I post it here so if anyone finds it nice could copy it to the; > Wiki page.; >; > I add some details based on the original description:; > ------------------------------; > 1. Error mitigation in QuTiP; >; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Request",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:561,access,access,561,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['access'],['access']
Security,I agree with @jakelishman's general principle (and maybe we should even move the tests out of the `qutip` package for v5 still) but it's also really important to have an easy way for data layer implementations to run a comprehensive test suite *that is defined by the data layer*. I suspect that if anyone is running tests against master (i.e. what is currently dev.major) they will *want* tests to break if we add new methods. I have a slightly different proposal:. What if we create `qutip.core.data.testing` which is an explicitly exported suite of pytest classes that we intentionally expose for data layers to use? Initially the file can just import test classes from `qutip.tests.core.data`. I would also not use `__all__` in the individual test packages but instead import the test classes explicitly in `qutip.core.data.testing` so that it's 100% clear by reading just that file what the exported interface is (and adding new tests requires explicitly adding them into the exposed package).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874:589,expose,expose,589,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874,2,['expose'],"['expose', 'exposed']"
Security,"I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:; - I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; - I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:593,access,accessible,593,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462,2,"['access', 'expose']","['accessible', 'expose']"
Security,"I don't think it breaks the functional API at all - in fact it almost makes it stronger, since everything is a ""function"" at every stage. This kind of partial application is classic part of functional programming. Perhaps I don't understand _why_ you want to move to a class-based API? I'd be quite strongly against having the user have to instantiate classes to do very simple parts like creating operators. Certainly in Python programming, I don't think a class-based interface is de facto the right sort to aim for, and procedural is much more ""Pythonic"". For one, it's a lot of unnecessary boilerplate for simple operations. It adds cognitive complexity for the advanced user to decide ""should I use `displace` or `Displacer`?"", and in the strong majority of use-cases, the operator creation is not a computational bottleneck so we'd be adding it for no gain. A lot of operators have no meaningful reason to live in a class, like `sigmax` and so on, so now you have a split between operators that need a class and operators that don't, or you do something really crazy like requiring the user to do; ```python; sx_builder = qutip.operators.SigmaX(); sx = sx_builder.get_operator(); sy_builder = qutip.operators.SigmaY(); sy = sy_builder.get_operator(); sz_builder = qutip.operators.SigmaZ(); sz = sz_builder.get_operator(); ```; when all they wanted was `qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()`. Obviously that example is a bit facetious, but what benefit does the user derive from having to write boilerplate to access simple functionality?. All the operators already share a class in `Qobj`, and things like `displace` and `sigmax` are factory methods of `Qobj`. What shared functionality do the factory methods possess that means they should be classes?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332:1525,access,access,1525,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332,1,['access'],['access']
Security,"I know this is a very simple change, but could we add a test that it works? E.g. maybe a test in which we subclass `Data` and then create an instance of it and access shape?. And perhaps a test that shows that shape is immutable?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663:160,access,access,160,https://qutip.org,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663,1,['access'],['access']
Security,"I re-launched the Travis tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:322,hash,hash,322,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['hash'],['hash']
Security,"It looks like the loop on line 64 https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/qobjevo_codegen.py#L64 completes on the first try, but doesn't manage to import any objects, so the import_list remains empty. Could you use pdb to access local variables?. ---; P.S. You can use Markdown to format the traceback in a user-friendly way:; e.g. ; \`\`\`python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; \`\`\`. Renders to:; ```python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108:265,access,access,265,https://qutip.org,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108,1,['access'],['access']
Security,"Nothing too clever here. As in cached flag cleared whenever unitarity threatened; The check could probably be more efficient, but as not expected to be used intensively, then this would seem acceptable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364163769:70,threat,threatened,70,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364163769,1,['threat'],['threatened']
Security,Something is way off about that test failure again... Is it possible Travis isn't cleaning up properly? I can't reproduce the failure (it's also clearly nothing to do with this change) and the error message doesn't match up. If anything it looks like the error message is coming from a hash collision inside QobjEvo _maybe_?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672:286,hash,hash,286,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672,1,['hash'],['hash']
Security,"Thanks for reporting this - it's an important bug that's snuck in. Right now, there's a few errors in your code that you can fix to get on your way again, but we need to fix the error on our side. You're using `sigmap()` which is the Pauli excitation operator and is only defined for a Hilbert space with dimension 2. You actually are working with a Hilbert space of dimension `nmax * nmax` (a tensor-product space), so your `e_ops` argument to `sesolve` is wrong - it's difficult to know exactly what you meant here. `destroy(2)` is equivalent to `sigmap()`, so it's possible you intended to have `e_ops` be `[qutip.tensor(a1, a2)]`?. ---. Maintainers: The error is actually a segfault, because QuTiP 4.5 (probably 4.4 too) does not do sufficient error checking on`e_ops` arguments - probably they're missing in the conversion to `CQobjEvo`. When the expectation is called, it has already sidestepped `Qobj`'s dimensions check and there is no matrix size check, so it simply segfaults on OOB access. The fix for the 4.x branch is to have a very loud Python-space error due to mismatched `Qobj` dimensions on entry to the solvers, or insert a size check within `CQobjEvo`. High priority: there's no reason we should be segfaulting here. Partially fixed in the 5.x branch; all matrix multiplications that take place in C-space have a size check and throw a Python exception, however the solvers still sidestep the `Qobj` dimension check so a tensor-product-space mismatch will not be detected.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492:993,access,access,993,https://qutip.org,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492,1,['access'],['access']
Security,"The main function of the `Options` class is to hold the documentation of the options supported by solver, mostly integrator related ones are an issue. Since sub-packages can add new integration methods, it should be somewhere dynamic that can fetch them at runtime. We can't have them in the description of the function interface directly, but it must be clear from that documentation where to find them.; We can't have them in the documentation of the solver class. It could be in a solver instance, but that too late: needing to initialize a `BrSolver` or `HEOMSolver` just to know which options `bsmesolve` and `heomsolve` support is not user friendly.; The Integrator class is useless for the users: if they want to solve ODE, they should use `scipy.integrate`, for quantum systems evolution, `mesolve` etc. So we should not ask them to look there. `SolverOptions(name)` make it reasonably easy to check the supported options and their default before using the solver. Another approach I see is to fix the integrator when using the functions interface, this way we could properly document the function with all items from both the solver and integrator. When using the class interface, we keep both options separated (and make the choice of integrator it's own keyword):; ```; solver = SeSolver(H, integrator_method='adams', options=solver_options, ode_options=ode_options); solver.options # Solver options only. solver.set_integrator('vern7', ode_options); help(solver.ode_options) # See description of integrator options; ```. That way the function calls is very close to v4 and easy to use, and the class interface give access to new features. ; This also makes `krylovsolve` fit more. Since `method` is used by the solver, not the integrator, it should not be under the `options.ode`, but it seems confusing to have it with the normal options, so having it as an independent parameter could make it clearer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897:1627,access,access,1627,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897,1,['access'],['access']
Security,"The problem is recognising what a true 0 is from a small value. In your example on the new data layer, there will already be exactly 0 items explicitly stored (and `data.add_csr` is going to get faster and smarter in another PR, too) without `tidyup`, but much more concerningly `1e-15 * qutip.rand_herm(5)` will end up in a zero matrix, which is clearly absolutely wrong. The argument from Liouvillian doesn't work here - even before the new data layer, `liouvillian` never called the `tidyup` code because it accessed the `Qobj.data` field directly, rather than used `Qobj`. Since it then goes into `CQobjEvo` in most of the solvers, which also don't touch the `tidyup` code, it doesn't get called. I don't think there's any safe way to know if small values should actually be zero, or if they're just small values. It makes sense that we want to maintain as much sparsity as possible when values are truly zero, but I think having the QuTiP default be to attempt to tidy up after every addition, multiplication and matrix multiplication is quite unsafe, and for people who aren't doing very very sparse calculations, it's actually a slow down.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384:511,access,accessed,511,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384,1,['access'],['accessed']
Security,"There are no test code for progress bars yet.; You will need to create a new test file: `qutip/tests/test_progressbar.py`. The test can be as simple as creating the bar, call `update`, call `finished` and check that the total time is a sensible value.; You could also use pytest to catch print with [capsys](https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html#accessing-captured-output-from-a-test-function) and confirm that something was printed when `update` / `finished` is called.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520:375,access,accessing-captured-output-from-a-test-function,375,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520,1,['access'],['accessing-captured-output-from-a-test-function']
Security,"We can't implement `__hash__` for `Qobj`, sorry - it's just not possible while following the [Python data model](https://docs.python.org/3/reference/datamodel.html#object.__hash__). The two principle points that a hash function must follow from there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs an",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:214,hash,hash,214,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,6,['hash'],"['hash', 'hashable', 'hashing']"
Security,"`namedtuple` is not a bad idea, although it's a bit odd because `e_ops` is never a namedtuple and it doesn't solve the problem of what type `.e_ops` has. And `namedtuple` forbids attributes which aren't identifiers, which is also problematic. I guess we could write our own type, `Expect`, that acts enough like a list for numpy, etc but still allows item and attribute access. That feels a bit crazy, but maybe it is worth it?. I still feel that all of these options are overly complicated. `e_ops` is not a list conceptually. Lists are typically ordered, but unstructured. The `e_ops` are clearly not ordered because `e_ops[0]` doesn't ""come before"" `e_ops[1]` in any meaningful way. The order of the indexes in a list `e_ops` are meaningless -- they exist only because that is how Python lists work. *Sometimes* there may be a natural ordering to e_ops -- e.g. if they happen to be the projectors onto a complete set of basis elements -- but this a small subset of the more general situation where e_ops might be any set of operators and functions. I do see that you feel lists are the most important case though, so it would be good to support them well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1142339185:370,access,access,370,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1142339185,1,['access'],['access']
Security,"ame time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading to surprising behavior. From my point of view, no package really owns `+` so any conversion would be implicit.; But `qutip.groundstate(netket_operator)` is in itself an explicit cast. I am explicitly asking to qutip `please give me the ground state of this object`. I do expect to get a Qobj out, and qutip to make an effort converting this object to whatever format he internally wants to work with. Same goes with time evolution. . > For greater discussion, here's an alternate approach: instead of objects defining __qutip_qobj__, instead we expose an entry-point qutip.Qobj.register_conversion_function(converter, type, priority, version=None), and downstream libraries register functions rather than defining methods on their classes. I do prefer such an approach. I just did not think that was an option in QuTiP.; In fact we have redesigned NetKet to allow for something similar using multiple dispatch. (I’m not familiar with Tensorflow either.). I do agree with all your points, especially the first. As for your last point, about downstream packages having to import qutip: This is indeed a potential issue. I’ll try to investigate this: maybe there is a solution whereby a callback executed on package load can be registered with importlib?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:3520,expose,expose,3520,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['expose'],['expose']
Security,enblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark; - ipyparallel; - unittest2pytest; - pytest-benchmark; - pytest-repeat; - pytest-subtests; - fastcore; - fastscript; - asttokens; - cached-property; - crayons; - executing; - flask; - humanize; - ipywidgets; - itsdangerous; - jsonpickle; - jupyter; - littleutils; - nbconvert; - outdated; - portpicker; - sqlalchemy; - widgetsnbextension; - nbdime; - rich; - mayavi; - pip:; - birdseye; - icecream; - nbdev==1.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:3150,encrypt,encrypt,3150,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['encrypt'],['encrypt']
Security,"ers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2325,checksum,checksumming,2325,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['checksum'],['checksumming']
Security,functools_lru_cache; - blas; - bleach; - bwidget; - bzip2; - c-ares; - ca-certificates; - cairo; - certifi; - cffi; - chardet; - cloudpickle; - compiler-rt; - constantly; - cryptography; - curl; - cycler; - cython; - dbus; - decorator; - defusedxml; - docutils; - entrypoints; - expat; - fastcache; - flake8; - fontconfig; - freetype; - fribidi; - gast; - gettext; - glib; - gmp; - gmpy2; - graphite2; - grpcio; - gsl; - h5py; - harfbuzz; - hdf5; - html5lib; - icu; - idna; - imagesize; - intel-openmp; - ipykernel; - ipython; - ipython_genutils; - isort; - jbig; - jedi; - jinja2; - jpeg; - jsonschema; - jupyter_client; - jupyter_contrib_core; - jupyter_contrib_nbextensions; - jupyter_core; - jupyter_highlight_selected_word; - jupyter_latex_envs; - jupyter_nbextensions_configurator; - keras-applications; - keras-preprocessing; - keyring; - krb5; - lazy-object-proxy; - libcurl; - libcxx; - libcxxabi; - libedit; - libffi; - libgcc; - libgfortran; - libiconv; - libopenblas; - libpng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python;,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:338,certificate,certificates,338,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['certificate'],['certificates']
Security,"g propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatev",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:8552,access,accessible,8552,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['access'],"['access', 'accessible']"
Security,"ixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object tha",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5588,access,access,5588,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['access'],['access']
Security,"me out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the under",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9849,access,accessible,9849,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['access'],['accessible']
Security,"rator we're looking for. `G` is anti-Hermitian, and so it shares its eigensystem (up to scaling of the eigenvalues) with the Hermitian `i G` and consequently is diagonalised by a unitary formed of its eigenvectors. Now `S = i G / abs(alpha)` is a tridiagonal Hermitian, and with a similarity transformation we can find a _real-symmetric_ tridiagonal `T = P^-1 . S . P` for some diagonal unitary `P` (which is easy to calculate). The reason for scaling out `alpha` here should become clear at the end. The main diagonal of `T` is all zeros, and the first sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:1361,access,access,1361,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['access'],['access']
Security,"rds, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. We're unlikely to add `yield` to `mesolve` directly because that's a very",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:3387,access,access,3387,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['access'],['access']
Testability," (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1703,log,logger,1703,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability," + N = int(N); > + rho = np.zeros((2**N, 2**N)); > + for i in range(0, 2**N):; > + rho[i, i] = 1; > +; > + spin_dim = [2 for i in range(0, N)]; > + spins_dims = list((spin_dim, spin_dim)); > + identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802965>:; >; > > + num_ladders = _num_dicke_ladders(N); > + jm_operator = dok_matrix((nds, nds)); > +; > + s = 0; > + for k in range(0, num_ladders):; > + j = 0.5 * N - k; > + mmax = int(2 * j + 1); > + for i in range(0, mmax):; > + m = j - i; > + if (s - 1) in range(0,nds):; > + jm_operator[s,s-1] = am(j,m+1); > + s = s + 1; > +; > + return Qobj(jm_operator); > +; > +def ap( j, m):; >; > no space before j; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#di",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:8034,test,tests,8034,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['test'],['tests']
Testability," -----------; >; > heading. It formats nicely in the docs; > see:; > http://qutip.org/docs/latest/apidoc/functions.html#quantum-states; > file qutip.states.py; > for example; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168800674>:; >; > > + -------; > + identity: Qobj matrix (QuTiP class); > + With the correct dimensions (dims); > + """"""; > + N = int(N); > + rho = np.zeros((2**N, 2**N)); > + for i in range(0, 2**N):; > + rho[i, i] = 1; > +; > + spin_dim = [2 for i in range(0, N)]; > + spins_dims = list((spin_dim, spin_dim)); > + identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802965>:; >; > > + num_ladders = _num_dicke_ladders(N); > + jm_operator = dok_matrix((nds, nds)); > +; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:7621,test,tests,7621,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['test'],['tests']
Testability, /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_op,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1929,log,logger,1929,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability," = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1544,test,tested,1544,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['test'],['tested']
Testability," BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1612,log,logger,1612,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability," Could this issue perhaps be broken into sub-tasks in some way, perhaps, in order to enable work starting on it a bit more feasible?. Also, I can see it's been labelled as a ""good first issue"" but it seems to me the definition of done (i.e., what would a PR - or a set of PRs - that would successfully address the problem entail?), with respect to the entire issue, could be clarified a bit further, and the breakdown into sub-tasks (which itself might result organically from some further discussion) might help a bit in that direction. Regarding possible approaches for handling randomness - I have to admit I've started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on tho",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:967,test,tests,967,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,2,['test'],"['testing', 'tests']"
Testability," corr., H td (fn td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (str-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6511,test,tests,6511,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability," could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the tests that are being performed. . * I wonder whether `qobjevo_codegen.py` should stay there. It stands out from all other modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:2002,test,tests,2002,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['test'],['tests']
Testability," excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand 2 to N (using swap) ... ok; gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; gates: expand 3 to 3 with permuTation (using toffoli) ... ok; gates: swap gate ... ok; qutip.tests.test_gates.TestGates.test_are_cliffords ... ok; qutip.tests.test_gates.TestGates.test_clifford_group_len ... ok; Graph: Graph Degree ... ok; Graph: Breadth-First Search ... ok; Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:8501,test,test,8501,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,3,['test'],"['test', 'tests']"
Testability," run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landsc",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1781,mock,mock,1781,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['mock'],['mock']
Testability," use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most libraries, and makes their class definitions more complex.; - Control between different versions is perhaps a little easier (though a minor point): this _feels_ easier to separate out different versions, and detect what to register as the conversion function with QuTiP. This is a pa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:5333,log,logic,5333,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['log'],['logic']
Testability,"### New changelog. #### <code>test_krylovsolve.py</code>. * [x] We have <code>qutip.rand_herm</code> for a random hamiltonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:289,test,test,289,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['test'],['test']
Testability,"$ nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; co",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1176,test,tests,1176,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['test'],['tests']
Testability,"**Benchmarking**; The results of [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). * development-smesolve-milstein-speed-test.ipynb; * development-smesolver-new-methods.ipynb; * development-smesolve-tests.ipynb; * development-ssesolver-new-methods. all seem consistent with previous notebook results. **Time Benchmarking**; All the stochastic solvers in those notebooks now run much faster: between a factor 2 and 30 in speedup from last time I ran them, which was consistent with times obtained by @Ericgig and saved in the folder. . I am on Python 3.7.3, I recently updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Tota",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:162,test,test,162,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,2,['test'],"['test', 'tests']"
Testability,"... ok; correlation: comparing 3LS emission corr., c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Ent",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6620,test,tests,6620,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,".36s; Total run time: 5.51s; Total run time: 6.58s; Total run time: 9.64s; Total run time: 10.74s; Total run time: 12.29s; {'solver': 'pc-euler-2'}; Total run time: 1.54s; Total run time: 1.86s; Total run time: 2.50s; Total run time: 2.79s; Total run time: 3.36s; Total run time: 4.03s; Total run time: 4.98s; Total run time: 6.56s; {'solver': 'explicit1.5'}; Total run time: 5.28s; Total run time: 6.35s; Total run time: 7.74s; Total run time: 8.99s; Total run time: 10.34s; Total run time: 12.41s; Total run time: 15.40s; Total run time: 21.40s; {'solver': 'taylor1.5'}; Total run time: 3.30s; Total run time: 3.85s; Total run time: 4.52s; Total run time: 5.63s; Total run time: 7.22s; Total run time: 8.72s; Total run time: 9.51s; Total run time: 11.84s; {'solver': 'taylor1.5-imp'}; Total run time: 5.43s; Total run time: 6.81s; Total run time: 7.60s; Total run time: 10.05s; Total run time: 11.88s; Total run time: 12.88s; Total run time: 15.63s; Total run time: 22.31s. ```; ; **Minor issue: plots breaking notebook rendering**; Jupyter Notebooks have a broken rendering when cells with plots are run; refreshing the notebook sometimes works fine. This is sometimes fixed in the first place by adding; ```; plt.show(); plt.close(); ```; but not always. Maybe we can have a look at this minor issue in the development notebooks. . **Documentation**; It would really increase the adoption rate if the API doc and User Guide could be updated to highlight the stochastic solvers and new methods. The development notebooks are so well written that drawing from their examples should be simple. . Congratulations @Ericgig for this refurbishment, improvement, optimization and thorough benchmarking investigations of the stochastic solvers, which I hope will be widely tested by @nwlambert @ajgpitch @quantshah (and @fminga) for robustness once merged in the development master branch. I am merging this and the montecarlo split PR, hoping there are no incompatibility issues (#990 --> #991 --> #969).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:6267,benchmark,benchmarking,6267,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,2,"['benchmark', 'test']","['benchmarking', 'tested']"
Testability,"5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1237,test,tested,1237,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,2,"['assert', 'test']","['assert', 'tested']"
Testability,": comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and k",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6799,test,tests,6799,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"; > + s = s + 1; > +; > + return Qobj(jm_operator); > +; > +def ap( j, m):; >; > no space before j; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168803599>:; >; > > +; > + if collective_emission != 0:; > + c_ops.append(np.sqrt(collective_emission) * jm); > +; > + if collective_dephasing != 0:; > + c_ops.append(np.sqrt(collective_dephasing) * jz); > +; > + if collective_pumping != 0:; > + c_ops.append(np.sqrt(collective_pumping) * jp); > +; > + return c_ops; > +; > +# ============================================================================; > +# State definitions in the Dicke basis with an option for basis transformation; > +# ============================================================================; > +def dicke_basis(N, jmm1 = None, basis = ""dicke""):; >; > pep8: no spaces in kwargs jmm1 = None should be jmm1=None.; > There are lots of examples in this file. I'll not mark them all; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168803988>:; >; > > + assert_equal(d3, d3_correct); > + assert_equal(d4, d4_correct); > +; > + def test_lindbladian(self):; > + """"""; > + Test the generation of the Lindbladian matrix; > + """"""; > + N = 1; > + gCE = 0.5; > + gCD = 0.5; > + gCP = 0.5; > + gE = 0.1; > + gD = 0.1; > + gP = 0.1; > +; > + system = Piqs(N = N, emission = gE, pumping = gP, dephasing = gD,; >; > spaces in kwargs. Quite a few other examples too, which I will not mark; > all of them; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168804323>:; >; > > @@ -0,0 +1,645 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168807920>:; >; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:9804,test,tests,9804,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['test'],['tests']
Testability,"; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_op",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1344,log,logger,1344,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability,"; ```; Map(Space(Map(Space, Space)), Space(Map(Space, Space))); ```; to; ```; Super(Space(Map(Space, Space)), Space(Map(Space, Space)), rep='super'); ```; and I definitely like having the superop rep included in it. The user is never ever meant to write any of this themselves, so the literal length shouldn't be too much of a problem. You'd still specify dimensions using the exact same list syntax that we currently use, it's just we'd immediately parse it into this internal representation and internally operate on this, because it's much faster. Essentially what I'm describing here is an abstract syntax tree for relevant linear algebra structures. We _could_ even have the tensor index dimensions stored within the `Compound` objects, to help with `ptrace`, `permute`, the future `local_multiply` algorithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. Y",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:1591,test,test,1591,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['test'],['test']
Testability,"===================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2108,log,logger,2108,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"> * What is the reason that the time-dependent weights are still part of the trajectory result? That seems a bit inconsistent to me and I wonder if the `TrajectoryResult` class could perhaps just be removed?. The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I will look into it this week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851:482,log,logic,482,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851,1,['log'],['logic']
Testability,"> > I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ?; > ; > Maybe, but I find teleportation already a very short circuit, isn't it?; > ; > > Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ?; > ; > Yes, if we have n qubit measurements, we will have 2^n possible final state. One can calculate the state for each of them along with its probability and then get the exact statistics. I have changed the run_statistics function to now do this method in place of running it a number of times. This solves the problem of slow testing of the function as well !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730645:88,test,test,88,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730645,3,['test'],"['test', 'testing']"
Testability,> > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj norm ... ok; > > > Qobj permute ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks ,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:6428,test,tests,6428,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['tests']
Testability,"> A possible addition could be to check the trace condition of the steady-state solution and throw a warning if it is violated more than some epsilon. But for now, everything looks good. @davidschlegel That's a good idea, so I added some assertions to all the tests where it was simple to do so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1802#issuecomment-1035153689:238,assert,assertions,238,https://qutip.org,https://github.com/qutip/qutip/pull/1802#issuecomment-1035153689,2,"['assert', 'test']","['assertions', 'tests']"
Testability,"> Consider what you're doing from a statistical sense here. If everything works correctly, then you're effectively trying a two-tail hypothesis test that your test binomial distribution has a probability of 0.25, given you made `n` observations of it. The analytic success rate of your test is then; > ; > ```python; > import scipy.stats; > def success(n, p, tol):; > dist = scipy.stats.binom(n, p); > return dist.cdf(n * (p+tol)) - dist.cdf(n * (p-tol)); > ```; > ; > where `success(4096, 0.25, 0.02)` is 99.67%. Since there are 5 independent runs on Travis, that's equivalent to a failure rate of 1.6% on every single CI run, which is several orders of magnitude too high. It's probably just luck that it was Python 3.8 on both occasions - it's a one-in-five chance that in two failing CI runs, it was the same setup both times.; > ; > You have to consider what is most appropriate to fix the test, and what you can reasonably test in ~1 second of runtime. You don't want to increase the tolerance too much, because then you can get a lot of false positives even if something is broken.; > ; > If you can bump the number of runs up to 100,000 and set the tolerance at 0.01, you'll have a per-test failure rate of ~3e-13, which is more like what we'd want. If you keep it at 4096, the tolerance should be more like 0.05 (which is pretty big tbh). Thanks for the excellent analysis. I don't think it's feasible to do 100,000 given the current. efficiency. It did give me incentive to make it somewhat faster. What is a good guideline for the maximum time a test can take. It seems like I can maybe do 150 runs in ~ 1s. In any case, it doesnt seem feasible to do even 4096 claims without taking quite a bit of time. Any ideas on how to structure the test differently ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689:144,test,test,144,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689,8,['test'],['test']
Testability,"> Here are some tests of the proposed modifications. Thank you! I actually meant ""unit tests"" -- as in, adding the tests to `qutip/tests/test_steadystate.py`. It's also not clear to me from your examples how we should see the difference. > This may change the final steady state in some circumstances, but I could not rapidly find a situation where this is actually important. In this example, the two steady states are the same even though the weights are very different. I agree it would be good for the sparse and dense algorithms to align where its sensible to, but it's a bit tricky to evaluate the code if we don't have a concrete idea of the kind of situation in which the new code should be better (and in which situations it might be worse). > The current version gives:; > ; > ```; > Ldense = L.data.todense(); > Ldense[0, :] = np.diag(weight*np.ones(n)).reshape((1, n ** 2)); > np.linalg.solve(Ldense, b); > >> array([0.+0.j, 0.-0.j, 0.-0.j, 1.+0.j]); > ```; > ; > The proposed modification gives:; > ; > ```; > Ldense = L.data.todense(); > Ldense[0, :] += np.diag(weight*np.ones(n)).reshape((1, n ** 2)); > np.linalg.solve(Ldense, b); > >> array([1.e-16+0.j, 0.e+00-0.j, 0.e+00-0.j, 1.e+00+0.j]); > ```; >; > This is a better result than the one obtained with the current version. I can't see any difference between the old and new results other than that the floating point numbers are formatted a bit differently? Perhaps I am missing something.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-988058511:16,test,tests,16,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-988058511,4,['test'],['tests']
Testability,"> Hmmm... 4000/150~25 second. That's not very short actually. The total time for a whole round of qutip CI test costs 15min~20min on Travis.; > ; > Just ideas. Tests here seem to be two-folded:; > ; > * Test classical controlled gates in a circuit; > * Test the measurement functions; > ; > So maybe we can split it. The teleportation circuit test can be done without measurement. Just check the final state tracing out the ancillary qubits. The test for measurement can probably be done for single or two `Qobj` along without circuit. But `run_circuit_statistics`... Probably we then only need to check if the number of elements in the result is correct after some 50 runs?; > ; > On a different matter, I'm wondering if running the statistics takes so long, for such a small teleportation circuit, is it still advantageous in any case? Since we are doing simulation and have the full quantum state, one can actually calculate all 4 possible final states, classically mix them into a density matrix with the corresponding measurement probability and calculate the exact statistics distribution. I doubt that will be slower than 25s, although coding will be harder I suppose. I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ? . Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ? Seems like a decent idea !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640107253:107,test,test,107,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640107253,5,['test'],['test']
Testability,"> I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This is not the case. The answer to your question is to use `QobjEvo` as suggested. For example, here is a simple example using a fast-oscillating array function in a `QobjEvo` and a much shorter `tlist` in `mesolve`. You may need to set the solver options `nsteps`, `atol` and `rtol` to suitable values, as I have done here. ```python; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * 2.91e2 * fast_ts); # This is the behaviour you were suggesting is happening.; bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options). assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # -0.59736575; print(many_times.expect[0][-1]) # -0.59736575; print(bad_times.expect[0][-1]) # -4.5466086e-08; ```. You can see that I was able to do a successful integration with only 2 times in `mesolve`, but many in a fast-oscillating Hamiltonian. Clearly the `bad_times` version (which only has the start and end points so misses all the fast oscillation behaviour) is completely different to the other two versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525:1342,assert,assert,1342,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525,2,['assert'],['assert']
Testability,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:1447,log,logic,1447,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,1,['log'],['logic']
Testability,"> It's very clean, I really like the `set & set` and reusing the classes. Thanks!. > But in v4, while we used `f(t, args)` in most examples, we never said that it should be the exact signature up to variable name, so I don't think it an appropriate check for which version to use. Ideally, the check should be good enough we don't need to change any tests not directly related to the addition of this feature. I'm open to modifying the check for QuTiP v4 functions, but I would like to keep the check simple. To quote the Zen of Python, ""If the implementation is hard to explain, it's a bad idea."". :). > Also what should; > ; > ```; > def f(t, w, a=1):; > return a; > ; > coeff = coefficient(f, args={'w':1}); > coeff.replace_arguments(a=2)(0); > ```; > ; > give? Since `a` is not given, it's not our job to update it, or should we add it to `_f_arg_names`?. I think this works fine already in this branch. `a` is included in `_f_arg_names`, so it can be specified via `.replace_arguments(...)` but since it has a default it can also be left out.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390:350,test,tests,350,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390,1,['test'],['tests']
Testability,"> Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Something is strange in floquet.py, did you include change not meant to; >> be here?; >> Both floquet.py and flimesolve.py have the original fmesolve and the new; >> flimesolve...; >>; >> Tests should pass.; >> Right now, scipy 1.11 breaks cvxpy which we use so this breaks a few; >> tests, but the changes you made to correlation.py also break the tests.; >> We will want tests for the new solver.; >>; >> Could you also review the style (pep8).; >>; >> - There are some very long line, we use the official 80 characters; >> width.; >> - space are not uniform, sometime they are doubled, other time; >> missing.; >> - There are rules for empty lines, there should not be 3 empty lines; >> in a function.; >>; >> —; >> Reply to this email directly, view it on GitHub; >> <https://github.com/qutip/qutip/pull/2140#pullrequestreview-1499406717>,; >> or unsubscribe; >> <https://github.com/notifications/unsubscribe-auth/AV5WL5EA3UU23BHDUONIEN3XNHYVNANCNFSM6AAAAAAWLGP4AU>; >> .; >> You are receiving this because you authored the thread.Message ID:; >> ***@***.***>; >>; >. -- ; Best Regards,; Fenton Clawson",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:2506,test,tests,2506,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,3,['test'],['tests']
Testability,"> Nice work!; > ; > > I have removed self.gates as well as self.gates_and_measurements. The replacement is the more ""general"" (and less of a mouthful) self.circuit_ops which contains both.; > ; > I like this merge of to attributes. However, we shouldn't change the attribute name `gates`, at least not in this PR here. It's an open attribute API and as you see we used it a lot in tests. It's very likely that others are using it too.; > ; > Personally, I would keep the attribute `gates` since even for measurement operations, people still usually say ""measurement gates"". `circuit_ops` is certainly more accurate, but might be hard to remember and thus makes the learning curve steeper. Rolled back to self.gates",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-647834648:381,test,tests,381,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-647834648,1,['test'],['tests']
Testability,"> The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I do think it would be good to keep the `trace` property on the trajectories, but for the purpose of calculating the weighted averages, it could perhaps be treated like the other types of weights that we have.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958:275,log,logic,275,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958,1,['log'],['logic']
Testability,"> We allow the user to supply the `QobjEvo` class to use as an option, and allow them to specify either the class itself or a name for the class. E.g. `qobjevo_cls=QobjEvoHerm` or `qobjevo_cls=herm`. I would prefer the user not needing to know how we do it, just that there an option that speed up the simulation by 40 % in normal cases. Knowing that we forced it in an alternative qobjevo class is not useful and I hope we won't be forced to add many kinds of qobjevo. > Perhaps we should also not allow users to switch the class later by changing options? That might simplify the logic because we wouldn't need to modify the RHS when options are updated. Since changing options does not change the physic, I would like them to be changeable. But the `rhs`, and `_rhs` is certainly not great. I will rethink the way to do it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203:582,log,logic,582,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203,1,['log'],['logic']
Testability,"> What is the main difference between `expect` and `measure`? That's the main thing that comes up ; > to my mind. What different question are you answering? I also wonder if `expect` could be called. . `expect` returns the expectation value (i.e. probability weighted average of the measurements). `measure` returns a *single* measurement (i.e. an eigenvalue and an eigenstate, selected randomly with weighted probabilities). > The description of the `measure` function is a bit general maybe with this regard. But I might have ; > missed the point completely (my bad). Open to suggestions. I will also re-read it and see if I can think of something clearer.; ; > Somehow `smesolve` tests fail with Travis CI, not sure how this PR could have affected it. I'll dig a bit and see if the failure is related somehow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408:683,test,tests,683,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408,1,['test'],['tests']
Testability,"> does this floquet formalism supports any hamiltonian or just it works for two level systems?. It should support any hamiltonian. I have simulations test cases with harmonic oscillators for instance. However, you should have a look at the code from #766 since the code currently in QuTiP repository seems to have been tested only with two-level systems and contains some bugs. > Also the code uploaded is not working, how to plot this wigner function?. I'm sorry, I have no idea what you are talking about. > Floquet formalism is totally not working fro me. plz help. I think you should first try to make it work with simple two-level systems. See http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html and https://gitlab.inria.fr/lverney/qutip_floquet_example/blob/master/Example.ipynb. Note that there are some bugs in the current QuTiP code which are fixed by #766 but this one is not yet merged.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-355973074:150,test,test,150,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-355973074,2,['test'],"['test', 'tested']"
Testability,">I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ?. Maybe, but I find teleportation already a very short circuit, isn't it?. >Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ?. Yes, if we have n qubit measurements, we will have 2^n possible final state. One can calculate the state for each of them along with its probability and then get the exact statistics.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640113087:85,test,test,85,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640113087,2,['test'],['test']
Testability,"@BoxiLi . Yes, how to include gates in qutip is not clear to me. Many of them seems specialized so I don't think we should keep them all. Keeping only some of them could be fine but I am not well placed to choose a subset of commonly used gates and the `target` made them quite specialized. It also means that some gates will be defined in both qutip and qutip-qip. I also want all function that create `Qobj` in qutip the follow an common interface (they should all support `dtype`) and if we want these functions to also follow the qip signature, it could get somewhat complex. I think removing them and having the private functions for tests will make it easier for us on the long run. I see the use of `expand_operator` now that you explain it. I would prefer to have it in dimension.py and having users call it manually than being included in the `Qobj` creation function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262:639,test,tests,639,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262,1,['test'],['tests']
Testability,"@BoxiLi Sure, the tests looks not too complex. I'm working on it. I'm grouping the gates for better error handling. @jakelishman Thanks. Sorry, I was just too lazy to set up the tests on my machine, LOL. I simply create the pull request and see if the code pass. That's why there are always one or two minor fixes here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104:18,test,tests,18,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104,2,['test'],['tests']
Testability,"@Ericgig . - docstrings should be fixed. - coveraged increased with . `e_ops = [callable, qobj]; e_ops = [callable, callable]; e_ops = [qobj, qobj]`. - added a more efficient and clear pytest parametrization; - fixed the repeated sparse test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157:237,test,test,237,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157,1,['test'],['test']
Testability,@Ericgig Can you please guide me through (step-by-step developing test function or test classes) writing tests for progressbar? I don't have much experience with writing python tests? But I am a quick learner and can easily grasp the fundamentals.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1474760220:66,test,test,66,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1474760220,4,['test'],"['test', 'tests']"
Testability,"@Ericgig `.step(...)` looks like a great solution. We should definine more precisely what one is allowed to modify in between calls to `.step` and document that. Aside regarding things we have already implemented: I know -- my point is that there are many such things and we have only implemented one kind of each (for example, what kind of progress bar is appropriate is highly dependent on the environment the code is running in -- if the code is running on a server without a terminal it might be some kind of logging, inside a hypothetical QuTiP UI GUI application it might be a progress bar provided by the GUI toolkit being used, etc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358:513,log,logging,513,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358,1,['log'],['logging']
Testability,@Ericgig not in any huge hurry. Once there is a nice subset of tests that can be run to test installation I will update the nixpkgs package for qutip. Thanks for being so responsive! For now I'll just delete some of the tests and can always update the package once the ability to test only a subset is added to a release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675:63,test,tests,63,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675,4,['test'],"['test', 'tests']"
Testability,@HarshKhilawala Would you be interested in adding some tests for the progress bars in another PR?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1462010251:55,test,tests,55,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1462010251,1,['test'],['tests']
Testability,"@bopardikarsoham It can definitely still be looked at, but the situation needs to be untangled before any code change is made:. - If one is using Lindblad operators (see the equation with `L_i` on https://en.wikipedia.org/wiki/Lindbladian) then `a` and `b` are the same and the code is currently correct.; - If one is using some other set of basis operators `A_n` for the bounder operators on `H`, then you will need to include terms for both `n, m` and `m, n` and the sum of the those two terms will again be the same for the current code and the proposed change. So the physics will not change from what it is now if we make the proposed change and it appears that how the terms are organized within the larger sum is a convention. So the question is whether there is a standard convention to follow or not, and I don't know the answer. Step 1 is probably to find some textbooks or canonical references which make the choice clear. Step 2 would be to write some tests for the behaviour in the case where `a != b`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1719#issuecomment-1062919358:964,test,tests,964,https://qutip.org,https://github.com/qutip/qutip/issues/1719#issuecomment-1062919358,1,['test'],['tests']
Testability,"@hodgestar , I think I responded to all your comments.; The tests for core/blochredfield.py are present, I think it has a 100% coverage.; I did little cut and paste, but stayed close to the original cython code when possible. The question I still have is about the `a_ops` format: I made breaking changes from v4, so I want to be sure the new way is clear. I think `matmul_var_data` should be available in `core/data` not implemented here, but I don't want to touch that part in this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890:60,test,tests,60,https://qutip.org,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890,1,['test'],['tests']
Testability,"@hodgestar Apologies for taking as long, but went on and rebased my PR to 5.0 and addressed some of your comments. In particular, factory methods have been moved out into ordinary functions, and I added a simple string-based format for outcome labels (leaving `Seq` and `Par` for more complex cases as needed). For the notebook, I ran into the slight issue that the qutip-notebooks repo uses a more copyleft license, but in the meantime I put together a notebook at https://gist.github.com/cgranade/7c2a5a0827dddc4281666ad45763b1ec that includes a few examples of the API in use, including for modeling a simple teleportation channel. I still need to address PEP8 issues and add tests, but I think it should be a bit further along; thanks for all your help and feedback! 💕",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-1010581128:679,test,tests,679,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-1010581128,1,['test'],['tests']
Testability,@hodgestar I am not much aware with writing tests. Can you help me write test for progressbar file? How to write a test? How to check coverage for the entire file? How to check coverage for each line of code as to know where and what to add test? From where can I learn more about testing? Any documentation for writing tests specifically for qutip repository?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1464861603:44,test,tests,44,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1464861603,6,['test'],"['test', 'testing', 'tests']"
Testability,@hodgestar I decided to add the `spin_wigner` changes in which I've resolved the normalization issue and indexing problems that were also in the `spin_q_function`. I've added a simple test to check for normalization and real-ness of the spin Wigner.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-894939089:184,test,test,184,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-894939089,1,['test'],['test']
Testability,"@hodgestar I've added some tests for the spin_q_function. At the moment it tests a random density matrix for three different spin values. I'm not very familiar with qutip's style for writing tests, I would normally write a test function that would also take arguments but that doesn't seem to be the norm here. We could also do something similar to the `TestHusimiQ` class of tests. I've had a look at the `spin_wigner` function as well, and I believe that had the same issue of density matrix indexing.; I've re-implemented it (and the `_rho_kq` function) and I've added details to the docstrings including relevant references.; Should I create a separate PR for this or should I expand the scope of this PR?. NB: At the moment I can't think of an easy way to test the spin Wigner function because there is no simpler/alternative definition that I am aware of to verify the implementation against.; There are simple tests such as if the imaginary part is less than some threshold (currently true), does it integrate to 1 (currently not true, not sure why).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617:27,test,tests,27,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617,7,['test'],"['test', 'tests']"
Testability,"@hodgestar Sure, do I need to be assigned another issue? Can I create new issue for writing tests for progress bar and get assigned to work on it?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1462049113:92,test,tests,92,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1462049113,1,['test'],['tests']
Testability,"@hodgestar Thanks for doing it!; The custom `m_ops`, as far as I understand, would be of a form `[np.sqrt(coef)*(a+a.dag()), -1i*np.sqrt(coef)*(a - a.dag())]` where `a` would be an annihilation operator for a photon in a mode that is detected, and `coef` represents whatever happens between the emission and the detection (cavity-guide coupling, detection efficiency etc). In the current implementation it would be subset of default `m_ops`, that are formed as; ```python; for c in sso.sc_ops:; m_ops += [c + c.dag(), -1j * (c - c.dag())]; ```. As for the tests, I can think of something like this; ```python; def test_heterodyne_mesolve():; b = 1 # drive amplitude; gamma = 1 # spont. emission rate; eta = 0.3 # coupling efficiency; n_steps = 1000; n_traj = 50; ; H = np.sqrt(eta*gamma) * b * sigmay(); c_ops = [np.sqrt(gamma)*sigmam()]; psi0 = basis(2); times = np.linspace(0, np.pi*2, n_steps). n_tr = 3. sme_het = smesolve(; H,; psi0,; times,; [],; c_ops,; e_ops=[sigmax(), sigmay(), sigmaz()],; store_measurement = True,; dW_factors=[1e-5, 1e-5], # to make tests simpler; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay()],; ntraj=n_traj,; noise=123, # random seed; ); ; assert np.array(sme_het.measurement).shape == (n_traj, n_steps, 1, 2); assert all(np.isclose(np.array(sme_het.measurement).mean(axis=0)[:,0,0].T, np.sqrt(eta)*sme_het.expect[0], atol=2e-2)); ; def test_incorrect_m_ops_heterodyne_mesolve():; ; with pytest.raises(ValueError, match=""The measured operators for the heterodyne method supposed to be pairs of quadratures: m_ops should have even length.""):; sme_het_bad_mops = smesolve(; sigmax(),; basis(2),; np.linspace(0,1,10),; [],; [sigmam()],; e_ops=[],; store_measurement = True,; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay(), np.sqrt(eta)*sigmaz()], # three operators; ntraj=10,; ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548:556,test,tests,556,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548,4,"['assert', 'test']","['assert', 'tests']"
Testability,@hodgestar The test is now included. It turned out to be quite simple with monkeypatch. Thanks for the suggestion!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1636#issuecomment-939918060:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/1636#issuecomment-939918060,1,['test'],['test']
Testability,"@hodgestar the `.h` file imported from `base.pxd` makes is a lot simpler.; Changing the header file force recompilation, but the cythonization step is skipped.; If tests passes, it's ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1874#issuecomment-1106675195:164,test,tests,164,https://qutip.org,https://github.com/qutip/qutip/pull/1874#issuecomment-1106675195,1,['test'],['tests']
Testability,"@maij Thanks! The test code looks like a good start. Could you add it to `qutip/tests/test_wigner.py`?. Other tests we could add:. * We could write a more general test that compares the output of spin_q_function to a simpler implementation based on the definition -- something like:; ```python; state = qutip.spin_coherent(spin, theta_prime, phi_prime); direct_q = (state.dag() * qutip.ket2dm(psi) * state).norm() / np.pi; ```; Note: I named the angles `theta_prime` and `phi_prime` to emphasize that we can apply this test to cases where the angles for the state psi and the ones passed to spin_q_function are different. * We should also add a test for passing in arrays of theta and phi (i.e. were we really get out a mesh grid for Q values) since that was the primary use case for which `spin_q_function` was defined. Ideas for future PRs:. * It would be nice to also add tests for `spin_wigner` (I am suspicious of it now because of the problems with spin_q_function). Thank you for looking at these and taking charge of this bit of QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408:18,test,test,18,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408,7,['test'],"['test', 'tests']"
Testability,"@nathanshammah I think it has nothing to do with this PR, I didn't change anything in `qobj.py` where the test failed before. I guess it might have something to do with Erig's commit ""mac without mkl"" and I simply merged it from master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1042#issuecomment-511355307:106,test,test,106,https://qutip.org,https://github.com/qutip/qutip/pull/1042#issuecomment-511355307,1,['test'],['test']
Testability,"@nathanshammah OK, my ""tests"" were just creating instances of `Bloch()` with and without `plt.figure()` instance passed in the constructor and then repeatedly executing the `show()` function. Now after I had a look at `qutip/tests` my small testing snippets indeed don't fit into that. Hence at this stage I don't see the benefit from adding these trivial ""tests"" I did to the repo. Thank you for the review and all the guidance.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-494119661:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-494119661,4,['test'],"['testing', 'tests']"
Testability,"@nathanshammah, @Ericgig, @ajgpitch, @nwlambert, @quantshah, @BoxiLi, @hodgestar. I've updated this PR to match what I understand we agreed on. I've also added complete copyright notices to the documentation, including linking the CC-BY-3.0 licence the documentation text is licensed under, and making it clear that it's the documentation _text_ licensed under CC, and that the code is under 3-clause BSD. I've updated the frontmatter, and added a copyright notice to the index, so it's linked from every page in the documentation releases. I have updated the short copyright notice at the bottom of the documentation pages to say ""Copyright 2011 to 2021 inclusive, QuTiP developers and contributors"" to make it consistent with the source code (for the same reasons). As I've added a `_copyright` Sphinx target, the word ""Copyright"" at the bottom of the documentation is now hyperlinked as well. I didn't explicitly split this into more than one PR, but it's split into separate logical commits, which explain their extent and intent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298:979,log,logical,979,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298,1,['log'],['logical']
Testability,"@nathanshammah: It seems that travis fails before it even gets to the testing, when calibrating openmp. I cannot replicate the error on my end, the calibration takes only about a second for me. I did make 535010d more similar to 5501b2e by no longer using numpy.testing.assert_raises, numpy.testing.assert_warns and a ResourceWarning. Instead I use a try-except construction now. That seems to have fixed things, so I suspect that importing/calling one of the functions or the warning makes openmp fail on the rig used by travis. As I'm pretty sure the reason for the previous failure is either a numpy or openmp issue and therefore a hard fix, I would propose to simply not use those functions, the try-except construction does well enough.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-567132755:70,test,testing,70,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-567132755,3,['test'],['testing']
Testability,"@quantshah @BoxiLi @hodgestar I have wrapped up the two measurement functions in the `measure` and `measurement_statistics` function which calls the required functions based on whether `ops` is a `list of Qobjs` or a `Qobj`. Do we want the individual functions (especially POVM) to be more granular? Moreover, the docstring for the wrapper function is really clunky (given the case-wise output types). Any ideas on how to make that simpler ?(one idea is to not specify return types and only have parameters given it's bound to be clunky!). ps. I'll fix the tests all at once after we decide on the api",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844:557,test,tests,557,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844,1,['test'],['tests']
Testability,"@quantshah: Simon and I had temporarily stepped back from this one at the time, because we weren't entirely confident that the physics was being handled correctly - the initial version of the PR certainly had invalid physics, and it was hard to evaluate the new stuff from that perspective. It's changed since then, and it might be ok now, but it'll be easier to re-review now we've cleared the old context from our minds. About your Choi matrices - right now, `Qobj` doesn't have an `act` method, but that could well be a useful addition. It _does_ have `Qobj.__call__` which does a similar thing in a very few cases, so we could properly beef that up, but we might want to discuss exactly what spec it should have. @MrRobot2211: I very quickly glanced through the diff of this, but there still seem to be several points where I asked for changes that haven't been changed: things like removing unnecessary calls to `np.array`, and explaining _why_ dimensions needed to be changed in some tests. Can you go back through the PR and make sure you've addressed everything? Also, since you're trying to add new functionality, please make sure you add tests of explicit, analytically known cases against the whole matrix, in addition to the properties like the dimensions (also asked above). In a super ideal world it'd be great if you could find a published reference for those tests, but if the maths is simple enough that we can verify it by hand, then showing us would be ok. It could be good practice for the rest of GSoC if you try and go through the diff yourself to spot places that might want clarifying, and fix them ahead of review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-847759512:990,test,tests,990,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-847759512,3,['test'],['tests']
Testability,"@theodotk Thank you for the bug report. I cherry-picked your fix into this PR. Any thoughts on a simple test case we could add? Ideally we could just pass in custom m_ops in something like `test_smesolve_heterodyne` but I don't know what the custom m_ops should be, how to calculate the expected result or how to be sure the right m_ops were used.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424035216:104,test,test,104,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424035216,1,['test'],['test']
Testability,"@vikas-chaudhary-2802 can you add the test to this PR? it can be very simple. if you feel like it will take some time, i can merge this and you can do a separate one later. @ytdHuang thanks for the suggestion, do you think it would be better to use that as the default method? in any case, lets do that in a separate issue/PR",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2371#issuecomment-2042114519:38,test,test,38,https://qutip.org,https://github.com/qutip/qutip/pull/2371#issuecomment-2042114519,1,['test'],['test']
Testability,"Additionally, from looking through your comments it appears that something; definitely went weird with formatting and/or merging. I'll comb back; through and make to fix any of these issues before I request a re-review. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839:562,test,tests,562,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839,1,['test'],['tests']
Testability,"After you created a fork to work on #1242, a different PR (#1226) was merged into `master`. It so happens that #1242 and #1226 don't conflict so that merge succeeded, but the new changes you're now trying to make do. This is fundamentally a true merge conflict and so unfortunately there's no fancy way around it, though it could have been avoided if you'd matched the state of our `master` before beginning work here, and it would be a bit easier for you for future PRs to branch off before starting work (GitHub has [some nice material about this workflow](https://guides.github.com/introduction/flow/)). I've rebased your PR onto our `master` and fixed the resulting merge conflict for you. You should _immediately, without doing anything else_ reset your branch state to match mine, and then force-push your changes to GitHub to update the PR. To do this, do; ```bash; git remote add jakelishman https://www.github.com/jakelishman/qutip.git; git fetch jakelishman; git checkout master; git reset --hard jakelishman/Canoming-circuit-patch; git push --force; git remote remove jakelishman; ```; This will destroy anything on `master` that you may have but haven't yet pushed. You should do it anyway, because a lot of the underlying structure has changed from underneath you, and your changes aren't consistent with the current state of `circuit.py`. Please also note that the tests are failing after your modifications in (the current) 10e457e.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121:1379,test,tests,1379,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121,1,['test'],['tests']
Testability,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:386,test,test,386,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,2,['test'],['test']
Testability,Ahh well then there is no more issues with this. Just waiting for the minor changes to the mcsolver tests to clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300#issuecomment-68425710:100,test,tests,100,https://qutip.org,https://github.com/qutip/qutip/pull/300#issuecomment-68425710,1,['test'],['tests']
Testability,"Ahh, you're right. I never managed to get it to work right before now, but I just tried again and managed to get `DeprecationWarning` to show up in all of `python warn.py`, direct calls from the IPython terminal and from Jupyter notebooks. I think perhaps I learned about stacklevel _after_ the last time I tried to get that to work. My reading of the docs before that had always just ended up with me assuming that somebody using a library interactively was an ""end-user"", so `FutureWarning` was appropriate. I'll change this PR when I've got time - I needed to fix up a few warning controls in tests before it was ready anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-814036449:596,test,tests,596,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-814036449,1,['test'],['tests']
Testability,"All looks good to me. Thanks a lot for changing all of that - this is all clearly good stuff and should in principle be merged. We should the Linux tests again after #1381 is merged because there is Linux-specific code in the changes that needs to be tested (the tests fail for unrelated reasons at the moment). I can't see any reason why the changes here should cause any true test failures, though - it's more a formality.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648:148,test,tests,148,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648,4,['test'],"['test', 'tested', 'tests']"
Testability,All of the individual terms in the dense version of the time-dependent BR solver are now tested and working. Now I need to write the codegen module. A sparse version is just a simple extension once the codegen is done.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/676#issuecomment-295576774:89,test,tested,89,https://qutip.org,https://github.com/qutip/qutip/pull/676#issuecomment-295576774,1,['test'],['tested']
Testability,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:1541,test,test,1541,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,1,['test'],['test']
Testability,"As this was a simple bug fix and all tested passed, then merging now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/563#issuecomment-263523282:37,test,tested,37,https://qutip.org,https://github.com/qutip/qutip/pull/563#issuecomment-263523282,1,['test'],['tested']
Testability,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:565,test,testing,565,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,4,['test'],"['test', 'testing', 'tests']"
Testability,"Can you fully show your build process, and did this work with a previous version of QuTiP? It builds fine for me from pip sdist on all major platforms with a simple; ```; pip install qutip; ```; and the sdist of 4.5.2 seems to be missing the same file. Officially we don't support building with OpenMP from pip sdist (only git), but to be fair, it should have worked. In the interests of better semantics, can you change the new line in `MANIFEST.in` to; ```; graft qutip/**/src; ```; Technically there's only the one file that doesn't get tagged in (I hope), but logically the principle is that anything in a `src` directory should be distributed in the `sdist`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343:564,log,logically,564,https://qutip.org,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343,1,['log'],['logically']
Testability,"Changes to the test:; ```; case_1= repr(QobjEvo([qeye(3), lambda t: t])); expected_repr_1= 'QobjEvo: dims=[[3], [3]], shape=(3, 3), type=oper, superrep=None, isconstant=False, num_elements=1'; assert case_1 == expected_repr_1. case_2= repr(QobjEvo(qeye(2))); expected_repr_2= 'QobjEvo: dims=[[2], [2]], shape=(2, 2), type=oper, superrep=None, isconstant=True, num_elements=1'; assert case_2 == expected_repr_2; ; case_3= repr(QobjEvo(basis(5, 2))); expected_repr_3= 'QobjEvo: dims=[[5], [1]], shape=(5, 1), type=ket, superrep=None, isconstant=True, num_elements=1'; assert case_3 == expected_repr_3. X = sigmax(); S = spre(X) * spost(X.dag()); case_4= repr(QobjEvo(to_choi(S))); expected_repr_4= 'QobjEvo: dims=[[[2], [2]], [[2], [2]]], shape=(4, 4), type=super, superrep=choi, isconstant=True, num_elements=1'; assert case_4 == expected_repr_4. case_5= repr(QobjEvo([[qeye(4), lambda t: t], [qeye(4), lambda t: t]], compress=False)); expected_repr_5= 'QobjEvo: dims=[[4], [4]], shape=(4, 4), type=oper, superrep=None, isconstant=False, num_elements=2'; assert case_5 == expected_repr_5; ```. Changes to the `cython` code have also been undone. @Ericgig @AGaliciaMartinez Kindly let me know if there are any more changes to be done.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111#issuecomment-1472176308:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/2111#issuecomment-1472176308,6,"['assert', 'test']","['assert', 'test']"
Testability,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:91,test,tests,91,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,2,['test'],"['testing', 'tests']"
Testability,"Do you get the same behaviour with QuTiP 4.5.0 in the same environment? The offending parts of `qutip/__init__.py` have been there since then, so it shouldn't be new in 4.5.2 at least. I can't reproduce the error unless `pyximport.install()` has already been run before QuTiP is imported (e.g. if I do `import pyximport; pyximport.install(); import qutip` or `importlib.reload(qutip)`). We have `qutip/__init__.py` organised so that we don't enable `pyximport` until after we've done the test for `qutip.cy.openmp.parfuncs`: first we do. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L100-L105. and only after that do we. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L124-L126. In your error it's trying to build `qutip.cy.openmp.parfuncs`, and the only line that ever attempts to import that (in Python space) is line 101 above in `__init__`. It can only attempt to Cythonize files if `pyximport` is activated, but `qutip` doesn't activate that til a few lines later. It's certainly still a bug that this error appears if you've manually activated `pyximport` before (which would definitely cause it), but I'm struggling to find any other reason that the error could appear. We're looking to simplify the handling of OpenMP in a later version, and this buggy check is certainly a good reason to expedite that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290:488,test,test,488,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290,1,['test'],['test']
Testability,"Every `Qobj` created by qutip have `dims[0]` and `dims[1]` being list. `dims=[2, 2]` is an error that we should catch. The main issue is that there is no clear documentation or tests that clearly says what is a valid dims format. . There are some strange dimension that are produced by our function that would raise an error with `np.stack` like; `tensor(operator_to_vector(oper), oper)` but I don't think we should accept these kind of `Qobj` in the first place, so I am fine failing there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366:177,test,tests,177,https://qutip.org,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366,1,['test'],['tests']
Testability,"For point 2: adding marks right now will cause conflicts, but if #1181 gets merged then it'll be much simpler. The main issue is that a lot of the testing structure has changed for tests up to `test_mcsolve.py` alphabetically, and so in general the tests are just not the same. The principle is pretty straightforwards - just like #1181 introduces a `requires_cython` mark, we would add `uses_cython`, `uses_mkl` and `uses_openmp` marks. These would be even simpler to add than `requires_cython` because unlike it, they don't require any test-generation logic at all. The change would simply be to add them to `pytest.ini`, mark the requisite functions and then change the pytest invocation of the specialised test to `pytest -m ""uses_cython""` or whatever. As far as I'm aware, the only parts of their codebase which modify their behaviour based on whether `Cython` is available is `QobjEvo`. The other parts (like `brmesolve`) just don't work if Cython isn't there. The MKL tests would become very short; by my reckoning, MKL is only used by `steadystate` and `countstat`. OpenMP is much more pervasive, as `sesolve`, `mesolve` and `brmesolve` all use it, and parts which depend on those are generally the slowest tests. The short tests could just become `pytest -m ""not slow""`? That's not super speedy, but it takes about half the time, maybe. If you want more, then a good starting point is `pytest --durations=0` which will tell us which tests are the slowest (perhaps that was what you already did when marking the slow ones?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776:147,test,testing,147,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776,10,"['log', 'test']","['logic', 'test', 'test-generation', 'testing', 'tests']"
Testability,"Good points. I suggest to simply remove the comment in `test_qobj`, and change to pytest in the `setup.py`. Something like what's [here](https://doc.pytest.org/en/3.0.4/goodpractices.html#integrating-with-setuptools-python-setup-py-test-pytest-runner) should work (basically changing `nose` with `pytest`). It seems however that testing it's a thorny [issue](https://github.com/pypa/setuptools/issues/1684), but these changes for the time being make the whole package at least consistent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587:232,test,test-pytest-runner,232,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587,2,['test'],"['test-pytest-runner', 'testing']"
Testability,"Great feedback @hodgestar. Let me add this: It would be nice to clarify explicitly benchmarks from the beginning. ; A bit like you did when mentioning the 14 qubit cap for QFT gate simulation. ; For example, goals of this would be:; - For qutip/qutip: Faster `mesolve` (add details of a typical example with current times/bottlenecks); - - For qutip/qutip: More qubits simulated in `mesolve` and `steadystate` ; - For qutip/qutip-qip: Capability to simulate more qubits (add current example with benchmark + code). For all examples we could add details of a typical example with current times/bottlenecks (we could use gists). This can be of very wide interest, but finding physical examples of interests and use cases would be helpful. For example, qubit space nevertheless explodes exponentially. But adding even a bit more qubits in `steadystate` can impact state of the art simulation of dissipative phase transitions in many-body systems. I also think that having a sort of code design template could help. This is a more general point triggered by this issue. This may be a QuTiP idea but looks at some point more technical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489:83,benchmark,benchmarks,83,https://qutip.org,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Happy to create a notebook with some examples. Should it live at https://github.com/qutip/qutip-notebooks/tree/master/docs/guide ? If so, I'll make a PR there. For documentation, do I add them at https://github.com/qutip/qutip-doc/blob/master/apidoc/functions.rst?. Re measurement and teleportation -- that sounds like ordinary quantum teleportation, and probably would be a fun test to write once we get there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-547162310:379,test,test,379,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-547162310,1,['test'],['test']
Testability,"Hardware info is only used to get the number of cpus... It may hve been used for benchmark in the past, it also fetch the cpu frequency and memsize... I would be for simply removing it in the next version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395#issuecomment-736660709:81,benchmark,benchmark,81,https://qutip.org,https://github.com/qutip/qutip/issues/1395#issuecomment-736660709,1,['benchmark'],['benchmark']
Testability,"Hello @hodgestar, we missed your last comment, but Nathan just notified us. We will get it all sorted out by wednesday at most. I leave a todolist to keep track of everything that @Ericgig mentioned. To-do. * [x] Include some tests like test_sesolve.py --> **Included tests with random Hamiltonian, ising transverse field and SHO. Both for states and expectation values. Lacking a testing example for callable e_ops**. * [x] Why <code>krylov_dim=30?</code> ? --> **There was a subtle physical reason, but we conclude its better to leave it as a free input without a predefined variable.**. * [x] <code>tolerance</code>, <code>store_states</code> and <code>store_final_state</code> --> **Changed as an Options qutip class, now tolerance is <code>Options.atol</code> property**. * [x] <code>e_ops</code> should also take a callable or list of mixed function and <code>Qobj</code> --> **Added support**. * [x] Remove support for <code>np.ndarray</code> --> **Removed for qutip cleanliness**. * [x] Assertion errors to specififc errors --> **Modified.**. * [x] Check that psi0 is a ket --> **Added**. * [x] If both <code>store_states</code> and <code>store_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.spar",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:226,test,tests,226,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,3,['test'],"['testing', 'tests']"
Testability,"Hey Simon and Eric,. - I've gone through and fixed (I hope!) the formatting and code issues due to the bad merge I did last week; - I've added in flimesolve_test.py as a test script for flimesolve; - I've tried to format everything according to PEP8, although there are likely some issues here. I've not had any formal training on PEP8 formatting (and python in general, to be honest), such that even with the help of the PEP8 style guide and Spyder's auto-formatting tool for PEP8, I'm sure there are some small fixes that need to be made; - I'm not entirely sure what Eric meant about separating out the physics from the data container, etc. I moved anything having to do with the precalculation of the Floquet states into its own function, but to kill this precalculation off entirely would severely hinder the speed of flimesolve, as an large advantage of Floquet theory comes from being able to accurately create the basis states at any time once you have the initial basis states. If this is still an issue (or if I've misinterpreted Eric's comment entirely and need to change something else in this regard), please let me know. Maybe we could have a live discussion over the issue, if that would work better. Thanks for your help!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1624220778:170,test,test,170,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1624220778,1,['test'],['test']
Testability,"Hey guys, thanks for the feedback (this is the first time I have logged in to github in about a year!).. Just some replies to Paul's comments. The method is basically general, under certain assumptions about the bath spectrum density and bath temperature, so the 'system' can, in principle, be anything. I will also do so minor tweaking so it can deal with multiple baths and correlated baths. We will add some notebooks showing different examples and explaining when its valid later. . > Why is it not possible to directly calculate expectation values other than the coupling term?. Yeah there was a list of expectation values at some point, but it disappeared while we were making edits. Thanks for the reminder. Thanks for the other points, we will fix the various issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-103750029:65,log,logged,65,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-103750029,1,['log'],['logged']
Testability,"Hi @ALasek . You are right, there is a bug in the error handling.; ```; File ""C:\Users\OlekAdmin\anaconda3\lib\site-packages\qutip\qip\circuit.py"", line 2114, in initialize; raise ValueError(""dimension of state is incorrect""); ```; This check is wrong. It assumes that the state is a qubits state. Our test didn't cover the `run` method with multi-level systems. Here are the ways around:; - If you know how to hack the package, you can simply find the file and delete this error handling (lines 2113 and 2114).; - If you don't know how to do that, you can also use; ```; gate_sequence_product(qc.propagators()); ```; to compute the unitary representation of the circuit first and then apply it to the input state. I'll make a bug fix soon. But the next release may still take a while. Using `QubitCirucuit` for qutrits and qudits should be fine, it is rarely used though. So there might be bugs that are uncovered by our test. If you encounter any further questions, feel free to ask!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650:302,test,test,302,https://qutip.org,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650,2,['test'],['test']
Testability,"Hi @VolodyaCO, thanks for reporting this!; I think the reason for `tlist` being overridden is because the result will be independent of `tlist` when the input is a steady-state. This can be seen in the following equations:; ![image](https://user-images.githubusercontent.com/57414022/121327018-5d313680-c913-11eb-9760-ca6004daca18.png); where rho is the initial state (`state0`) and H is the Hamiltonian of the system. I use the fact that rho is a steady-state to remove its temporal dependence. This derivation is simplified assuming unitary evolution (no collapse operators) but the same applies in the most general case where we include the collapse operators. This is my guess on why `tlist=[0]` is employed when using `state0=None`: the result does not depend on `tlist`. Hence, this is probably not a bug as the result should be mathematically correct. That being said, I would also expect the same output shape for the cases shown above unless explicitly mentioned in the docstring of the function. Thus, I think the way to go here is to document this behaviour in the docstring (as well as removing the t appearing in correlation_..._1t docstring) as any change in the output shape will break backwards compatibility. However, it may be worth considering whether this is the intended behaviour for QuTiP 5. I would suggest removing `state0=None` as possible input for simplicity in the maintenance and testing or at least I would make the example shown by @VolodyaCO to be consistent and have the same output. Let us see what the QuTiP admin team thinks :smile:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355:1410,test,testing,1410,https://qutip.org,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355,1,['test'],['testing']
Testability,"Hi @dweigand, this looks interesting. It would you be nice to push this forward, adding some tests for this and integrating @Ericgig suggested changes. I am wondering whether there is a more intuitive (explicit) option than `qfunc_amat `. Something like a Boolean `precompute`?. Writing some documentation for this, in https://github.com/qutip/qutip-doc, would allow users to discover this option more easily at http://qutip.org/docs/latest/guide/guide-visualization.html#husimi-q-function, it's very nice you have some performance checks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-536368295:93,test,tests,93,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-536368295,1,['test'],['tests']
Testability,"Hi @jakelishman , Thanks for the great work and effort! I'm reading your code and also try to learn some pytest. . If I may, I have a minor suggestion. Could you maybe leave some more descriptive comments in the tests? I find it a bit hard to follow the logic when tests are automatically generated or parametrized, e.g. in test_control_pulseoptim. A lot of things are defined for the fixtures in the beging. It took me some time to understand what is happening. I guess it is because I'm not yet very familiar with the tools in pytest. Maybe some description like ; > We first define 4 test cases: ... or. > Test function1 against case1, case2 ... This might make it easier for whoever wants to add more tests later to understand what has been tested without too much digging. And another personal idea, maybe it is good to make a separate PR every 10 or 15 tests? A new branch can still base on this one. Just after the old PR is merged, fewer changes will be shown the new PR. It might make the later review a bit easier. Just personal ideas. Thanks again!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591399487:212,test,tests,212,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591399487,7,"['log', 'test']","['logic', 'test', 'tested', 'tests']"
Testability,"Hi @jakelishman you were right about the contraction, I changed the indexes as in http://qutip.org/docs/latest/guide/guide-tensor.html so that it represents a trace-like channel. On the other hand I find that mixed dimensions operator `[[m,n], [m,n ]]` appear in some of the tests that were already in place, I will try to write my thoughts on their meaning later. I am still going to refactor this a little bit more, and tell you when it is ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708:275,test,tests,275,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708,1,['test'],['tests']
Testability,"Hi @nathanshammah,. Could this issue perhaps be broken into sub-tasks in some way, perhaps, in order to enable work starting on it a bit more feasible?. Also, I can see it's been labelled as a ""good first issue"" but it seems to me the definition of done (i.e., what would a PR - or a set of PRs - that would successfully address the problem entail?), with respect to the entire issue, could be clarified a bit further, and the breakdown into sub-tasks (which itself might result organically from some further discussion) might help a bit in that direction. Regarding possible approaches for handling randomness - I have to admit I've started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:786,test,tests,786,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,2,['test'],"['test', 'tests']"
Testability,"Hi @nwlambert,. Sure! This is the code I used to test the changes:. ```; import numpy as np; from qutip import *. Gamma_r = 0.5; Gamma_l = 0.1. n_ket = (1)/(Gamma_l + Gamma_r)*Qobj([[Gamma_r],[Gamma_l]], ); n_bra = Qobj([[1, 1]]). Id = Qobj([[1, 0], [0, 1]]). L = Qobj([[-Gamma_l, Gamma_r], [Gamma_l, -Gamma_r]],). I_ops = Qobj([[0, Gamma_r], [0, 0]]). L_s = sprepost(L, Id). I_s = sprepost(I_ops, Id). current, noise, skw = third_cumulant(L_s, rhoss=n_ket*n_bra, J_ops=[I_s], I_ops=[I_s], sparse=True, method=""pinv""). print(current, noise, skw); ```; It is based in a simple analytical example I found in a paper, which contains the expressions to check the results. This is the paper (page 7, the section ""Toy model""): [here is the paper](https://orbit.dtu.dk/en/publications/current-and-current-fluctuations-in-quantum-shuttles). As you can see it is really simple, although I had to make some changes to be able to applied in QuTip (I hope this doesn't lead to major fails). The effect of the frequency for the case when it is not defined in the function can be observed using the same example, just don't modify that part and you will see it, then you can try the solution I propose ( I don't know if I explained myself correctly).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2435#issuecomment-2126527531:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/2435#issuecomment-2126527531,1,['test'],['test']
Testability,"Hi @sarsid, there are still some tests failing. When you think the PR is really, just make it a ready-for-review PR and request a review. Besides, it would be great to address some of the style issues in code climate like ""Continuation line under-indented for visual indent"". Not all of them must be fixed though, it's more like a guide. The `pycodestyle` package can help you detect them locally if you would like to use it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-646002967:33,test,tests,33,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-646002967,1,['test'],['tests']
Testability,"Hi albertomercurio, ; Thank you for the contribution. We will need at least one automated test: a function in `qutip/tests/test_correlation.py` that call `steadystate_floquet` and would fail if something is wrong. For example, in the next major version of qutip, `Qobj.data.tocsc()` will fail. We want it to be caught when running the tests in `qutip/tests` instead of having to remember to update it. It could be simply to running your manual test and instead of plotting the result, checking it with `numpy.testing.assert_allclose`. Ideally it should be done twice, once for `sparse=True` and once for `sparse=False`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1660#issuecomment-917454056:90,test,test,90,https://qutip.org,https://github.com/qutip/qutip/pull/1660#issuecomment-917454056,6,['test'],"['test', 'testing', 'tests']"
Testability,"Hi guys,; yeah, the conflicts are because of the now merged #1224, which we knew about when we merged that one. It's a simple fix, but I'm hesitant to do it directly on this PR, depending on how we want to merge it. The simplest way is that I make the required changes, fix the merge conflict, and we keep going until this whole behemoth merges in one go. This ends up in the commit history being a bit of a mess, and it'll take ages. Instead, I think it might be better if I instead split this PR into a few different ones:; 1. add `pytest` markers and other test niceties; 2. the test files that Eric is checking; 3. the QIP-related ones so that Boxi can check those; 4. `brmesolve` tests; 5. trivially changed files; 6. whatever's left. This has the advantage that I can rebase them all individually to neaten them up with any changes suggested, and we can get parts merged in faster. PRs 2 to 6 will depend on PR 1, so this would require getting that first one merged ASAP, then the others will all be modular and can be merged in any order at any speed. If you're happy with that plan, I'll cherry-pick/rebase out the necessary bits of the history and form the new PRs. The end result will be 6 PRs, which, when merged, will have no conflicts, and will leave the repository in the exact same state it would be if this PR was merged in one lump (with the relevant conflict fixed). For each PR, then we just have a simple process:; 1. you review files; 2. I make suggested changes; 3. repeat until happy; 4. I rebase the PR to squash it into a logical form; 5. you merge",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033:560,test,test,560,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033,4,"['log', 'test']","['logical', 'test', 'tests']"
Testability,"Hi!. #### Imports; Honestly it wasn't really a particularly conscious decision, and there's no problem with `from qutip import (x, y, z)` lines though I don't think `from qutip import *` is a very good idea, especially with quite how many names `qutip` exports. The `from qutip.very.deep.nested.module import name` is certainly good, and I think I've generally left those. I think I started converting in a few places because there were things like `from qutip import Cubic_Spline` and `from scipy.interpolate import CubicSpline`, and then the test was unreadable as to which was which. Having `qutip.Cubic_Spline` and `scipy.interpolate.CubicSpline` is unambiguous. The smaller cases like `from qutip import Qobj` are highly unlikely to have any conflicts, but in general I just went for consistency. That all said, there's certainly arguments both ways, e.g. explicit `qutip.member` is good because it's clearly explicit at point of use which makes reading the code much easier, but bad because it adds unnecessary chaff which makes scanning lines take longer. I hadn't put much thought into it before, and I think I was just generally writing in my default style. #### Test ordering; I hadn't much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:544,test,test,544,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['test'],['test']
Testability,"Hi!. About the comments: yes, absolutely I'll leave more. It's a bit silly that I haven't yet, since one thing that was frustrating me previously was not understanding what was trying to be done! I think as time goes by I'm getting a bit better about being clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a goo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:637,test,test,637,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,2,['test'],"['test', 'tests']"
Testability,"Hi, this is ready for review. It probably needs a lot of refactoring but I have documented all functions and provided unit tests. I made a simple script for my lab where you can specify a circuit in a text file and the outputs will be generated. You can check it out here: https://github.com/sahmed95/icm. I have an example describing the use of this module. Where do the examples go ? @ajgpitch @nonhermitian . As I mentioned, @alexandrupaler should be the right person for review. Dr. Devitt also mentioned Damian from ProjectQ (?) who could help perhaps.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-275668058:123,test,tests,123,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-275668058,1,['test'],['tests']
Testability,"Hmmm. You're right that there will be some nasty merge conflicts with #1181, but I don't see anyway around those, to be honest without that PR being merged before this one (which doesn't look very likely). Barring #1181 getting merged in the next day or two, I'd just go ahead with these commits as written. If the new-style tests were merged, `test_gates.py` would have a much tinier diff. The single-qubit gates would just go between lines 222 and 223 in https://github.com/qutip/qutip/blob/77c21f8a97ddfff2353490d3587cc1effdfe9abc/qutip/tests/test_gates.py#L222-L239 as; ```python; pytest.param(gates.x_gate, 0, ""X""),; pytest.param(gates.y_gate, 0, ""Y""),; ...; ```; (and we'd probably change the function name to `test_one_qubit`). The controlled qubits would similarly go into the next test's parametrisation list: https://github.com/qutip/qutip/blob/77c21f8a97ddfff2353490d3587cc1effdfe9abc/qutip/tests/test_gates.py#L241-L259. Overall, it's clear that you can't write sensible new-style tests without #1181 having been merged, so I wouldn't worry about it too much. I did drop in a couple of comments in-line (minor nitpicking), but given that this file may well get pretty much overwritten - keeping the actual tests, of course! - in short order, I wouldn't consider them changes that need to be made, unless Boxi asks. Also, as you noted, `test_gates.py` doesn't really do much testing of the actual form of the gates yet. I haven't actually been adding new tests as I go, because I wanted to keep #1181 roughly focussed on just converting what we've got so far.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607833088:325,test,tests,325,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607833088,8,['test'],"['test', 'testing', 'tests']"
Testability,"I added a section to the test suite that will skip the tests if pyopencl is not installed in the last commit. To get them working, installing pyopencl via pip will not be sufficient. There are nice guides for setting up OpenCL in [Gentoo](https://wiki.gentoo.org/wiki/OpenCL) and [Arch](https://wiki.archlinux.org/index.php/GPGPU#OpenCL). But most OpenCL implementations are proprietary. I found an example of installing AMDAPP in a travis vm [here](https://github.com/JuliaGPU/OpenCL.jl/blob/master/.travis.yml). This is the OpenCL implementation I would recommend in absence of a GPU. But this script circumvents the license agreement and I am not sure whether this is legal. If you still intent to set this up, you can push changes to this branch as well. As for documentation I feel there is not much to document. There are already notebooks showing how to use `mcsolve` [here](http://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/example-photon_birth_death.ipynb) and [here](http://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-6-Quantum-Monte-Carlo-Trajectories.ipynb). If everything is set up just exchanging `mcsolve` with `mcsolve_cl` should do the trick. The nuances are documented in the docstring.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-258609202:25,test,test,25,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-258609202,2,['test'],"['test', 'tests']"
Testability,"I adjusted the test to be sensitive to the original issues. new test is just a driven two-level system. not sure why the old test of a driven boson was insensitive to that test. i could make it sensitive by making the drive act on the frequency, like the example in #2386 but this is simpler. . also adjusted the test to compare a period of the dynamics from mesolve to the result from the steadystate solver.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2393#issuecomment-2053629426:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/2393#issuecomment-2053629426,5,['test'],['test']
Testability,I agree with @Ericgig on the possibility of having no template and adding the suggestions for tests in the template. . I understand now that the changelog in qutip/qutip was a bad idea for the reasons you mention.; I still think it would be nice to somehow automate the way the changelog is compiled (right now by whoever is in charge of the release). Is there a simple and smart way to do this? Otherwise we could just look up the changelog section in each PR as per this template.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649:94,test,tests,94,https://qutip.org,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649,1,['test'],['tests']
Testability,I agree with @jakelishman's general principle (and maybe we should even move the tests out of the `qutip` package for v5 still) but it's also really important to have an easy way for data layer implementations to run a comprehensive test suite *that is defined by the data layer*. I suspect that if anyone is running tests against master (i.e. what is currently dev.major) they will *want* tests to break if we add new methods. I have a slightly different proposal:. What if we create `qutip.core.data.testing` which is an explicitly exported suite of pytest classes that we intentionally expose for data layers to use? Initially the file can just import test classes from `qutip.tests.core.data`. I would also not use `__all__` in the individual test packages but instead import the test classes explicitly in `qutip.core.data.testing` so that it's 100% clear by reading just that file what the exported interface is (and adding new tests requires explicitly adding them into the exposed package).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874:81,test,tests,81,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874,11,['test'],"['test', 'testing', 'tests']"
Testability,"I agree with @nwlambert that we should go without shifted object and simply add the shift in the times.; This shift method predate me, but I believe at some time solve would not work properly if not started at `0`...; But this should have been fixed a while ago. @victor-onofre, would you also remove the shifted operator, this should be right.; Also the `tlist` type is not tested and it could be a list instead of an array.; Ideally the same fixes should be made to `_correlation_mc_2t`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1929#issuecomment-1153946989:375,test,tested,375,https://qutip.org,https://github.com/qutip/qutip/pull/1929#issuecomment-1153946989,1,['test'],['tested']
Testability,"I am with the same problem. Note that the QuTiP version and the python version is different. I have installed the python via macports, but I have also tested in anaconda system. The problem is the same in the anaconda. ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0.dev0+3421bc5c; Numpy Version: 1.17.4; Scipy Version: 1.3.2; Cython Version: 0.29.14; Matplotlib Version: 3.1.1; Python Version: 3.8.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.loggin",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:151,test,tested,151,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['test'],['tested']
Testability,"I believe that all permutation are run with `parametrize`. So the input (`qobj`) is compared to each outputs `(expected`), not just the matching one. Also the rotation matrix (`U = rand_unitary(3)`) must be constant. Here, at least 4 different random operators are created. Instead of `parametrize` and `yield` simply calling the function `case` would work:; ```; yield case(""Test Qobj: trunc_neg works for positive opers.""), \; rand_dm(5), method; ```; to; ```; case(rand_dm(5), method, None); ```; To keep the message, `assert_almost_equal` has a `err_msg` keyword to raise if the test fails. I do not believe the `yield` is the cause of the no cython fails. ps. I will make a branch of this PR and will add `mark` to prepare a subset of tests for faster testing #1147.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523:583,test,test,583,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523,3,['test'],"['test', 'testing', 'tests']"
Testability,"I completely agree with you that random tests really aren't the right way to go in general, but right now our problem is that basically QuTiP's entire testing suite is based on randomised tests, and that's an awful lot of technical debt to overcome any time soon :(. . The `dnorm` tests have historically been a huge problem, even though basically nobody's worked on `dnorm` for a long long time now (for context, see in particular #880 and #874). We don't actually even know if the failures in `dnorm` are deterministic and reproducible, although it turns out that I had a brief look into this when I joined as a GSoC student about a year ago... I don't remember doing it at all!. I know this is super inelegant and not the perfect method, but it's kind of a nasty trade-off - I don't have time to really dig into `dnorm` (a topic I know almost nothing about) to work out an appropriate solution to temperamental errors, we do want `dnorm` to be tested since we're shipping it, and the slight flakiness keeps causing us test suite failures about 1 in 10 times. I'm somewhat opposed to fixing the random seed because having the variance over several test runs does actually help us cover more ground (eventually) - fixing it to a ""known good"" seed actually seems to me to be more of a mask of potential problems than this. Of note: the pytest plugin I'm using reports the number of reruns it performed in the analysis at the bottom - they show up in a yellow alongside the ""skips"" and ""xfails"" - so it's not completely hidden. I'd love to have a property-based testing suite like hypothesis up and running - that definitely seems like the proper solution to this in the end. In the meantime, I'm open to swapping to a fixed random seed if you think that's much better - testing is one place where I'm really aware of my lack of formal experience in software engineering, so I'm basically just learning as I go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227,9,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"I don't have xvfb (pytest-xvfb) installed specifically for qutip, but it is used by other packages (The general use of pytest-xvfb is to facilitate testing of GUI, graphical or windowing functionality without having an normal Xserver active. That is, it can be useful for automated CI testing of gui packages, for instance in chroots or cloud CI infrastructure). Since qutip doesn't use xvfb directly this bug won't be a problem for general CI testing, where only qutip is loaded on a cloud instance (for instance Debian testing done at https://ci.debian.net/packages/q/qutip/). But before I upload a package to the Debian infrastructure, I like to run the tests on my own system to be confident they're likely to pass. So this is where the problem happens, running tests on my own system, where I have pytest-xvfb installed for testing other packages. (pytest has this bad habit of loading all available plugins whether or not they're actually used by the tests being run. It's quite annoying actually. It would be better if it only loaded plugins specified in conftest.py). So the use case is running the qutip tests on my own system, where pytest-xvfb simply happens to be installed for other purposes not related to qutip. There are ways of working around the problem, for instance the `--no-xvfb` option could be explicitly added to the `pytest` command line. But it can be useful if the test code itself can be made robust with respect to the problem (e.g. in this case just replacing `plt.clf()` with `plt.close('all')`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791:148,test,testing,148,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791,10,['test'],"['test', 'testing', 'tests']"
Testability,"I had actually tried that before, following the user guide for conda, but it didn't work. Seems that it was fixed in a conda update, though, as it works fine now. Thanks! Will use that to test installation instructions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-150990762:188,test,test,188,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-150990762,1,['test'],['test']
Testability,"I have finally gotten around to look at this. Compared to usual ODE evolution, the expm_multiply (as of SciPy 0.18) is over an order of magnitude slower when testing against simple harmonic oscillator evolution. Profiling showed that the inf and one norms were the main issue as they cannot call BLAS functions for complex numbers. I wrote Cython versions that were ~5x faster. The next profile suggested replacing the dot calls with our own spmv. All together, I could get a factor of 3x improvement over the base SciPy code, but the spmv is still the dominate time consumer, so there is nothing further I could do to speed things up.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/84#issuecomment-242475532:158,test,testing,158,https://qutip.org,https://github.com/qutip/qutip/issues/84#issuecomment-242475532,1,['test'],['testing']
Testability,"I know this is a very simple change, but could we add a test that it works? E.g. maybe a test in which we subclass `Data` and then create an instance of it and access shape?. And perhaps a test that shows that shape is immutable?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663:56,test,test,56,https://qutip.org,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663,3,['test'],['test']
Testability,"I re-launched the Travis tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:25,test,tests,25,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['test'],['tests']
Testability,I resolved the issue with setting the alpha for multiple sets of vectors and added tests for that (and for setting the alpha of points). I'm not going to add tests for Bloch3d now since that uses mayavi which looks like it might be a whole other testing rabbit hole. I will simply run some checks in a notebook manually tomorrow. I still need to update the docstring and look at what the docstring format changes are about. @xspronken @AGaliciaMartinez Reviews of my most recent commits welcomed.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1837#issuecomment-1093447511:83,test,tests,83,https://qutip.org,https://github.com/qutip/qutip/pull/1837#issuecomment-1093447511,3,['test'],"['testing', 'tests']"
Testability,I see. `propagator` performed better with a system of d=2^5 in a simple test. I better do some testing of even larger systems then before merging this. Any thoughts on why `propagator` might be slower also for small systems and short integration times? Some overhead related to parallelization? Thanks for the info.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-230108497:72,test,test,72,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-230108497,2,['test'],"['test', 'testing']"
Testability,"I think `hypothesis` is the best method here in the long term, but it will most likely have to be a long-term goal. I think the main pro in favour of it is that it actually is making an attempt to remove randomness; it's attempting to comprehensively test a spanning set of input parameters, rather than just Monte-Carlo'ing our way through and hoping. There's a couple of points which make it difficult to implement:. 1. QuTiP can be quite fragile with respect to unexpected input formats, particularly in older parts of the code.; 2. Various components are only accurate up to some tolerance, and the error propagation to work out how that corresponds to useful measurable quantities can be rather tricky. Those are certainly both solvable problems, and point 1 in particular is just general improvement of usability. The second point is about designing the tests well, which again is certainly doable, but will take a while (it takes long enough just to refactor them, let alone a total rewrite of large chunks of them!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663:251,test,test,251,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663,2,['test'],"['test', 'tests']"
Testability,I think you can get one running for your fork by simply logging in.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607482278:56,log,logging,56,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607482278,1,['log'],['logging']
Testability,"I was checking the status of this PR, sorry for the delay, @abhisekupadhyaya. . 1) **Address comments**: There's been some updates and CI tests pass. However, my comments are still not addressed, e.g., updates in docstrings, see above. Addressing this before the next months is crucial as then there may be quite some activity on the `qip` module. . 2) **Add tests**: We also need to add at least a couple of tests with some examples circuits. The tests could check:; 2.a) that the circuit does the same thing; 2.b) that the circuit is exactly the same (no change of gates into other gates). 2) **Qasm export**: Adding an export feature, e.g. `to_qasm`, would be great. But this PR could address just the import and be fine (changing name would be best). If the `to_qasm` feature was here, one could simply test it one way and return, and check that, e.g.; ```; read_qasm(qutip_circuit1.to_qasm()) == qutip_circuit1; read_qasm(qasm_circuit2).to_qasm() ==qasm_circuit2; ```; if this feature was there, one could also test randomly generated circuits. @abhisekupadhyaya do you think you can address 1) and 2)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565:138,test,tests,138,https://qutip.org,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565,6,['test'],"['test', 'tests']"
Testability,"I will vote for a deprecation warning being raised for a few versions of QuTiP with a `compile()` function that does nothing. The deprecation warning can briefly explain what changed and how to tackle it (in this case simply not use `.compile()`). It can also raise an error based on QuTiP's version such that our tests warn us about needing to remove it. Even if its a rarely used function and mostly employed internal, I still think that we should deprecate it appropriately as it will help making a smother transition to QuTiP 5.0.0. A HOW TO with some of the most significant porting changes is a also useful but I would prefer if it does not substitute deprecation warnings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1176355115:314,test,tests,314,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1176355115,1,['test'],['tests']
Testability,"I'd be vastly surprised if there's a way of permitting a test which passes 99% of the time - on any particular test run how would it know?. I don't remember having seen anything about setting the initial seeds, but relying on a previous test to set a seed isn't a good idea - you'd always have to ensure that no tests were ever added or changed in-between that ever used random state or everything would get lost. We could fix the random seed for any test which uses random methods with a fixture to get around that. I actually think this is a true failure; the default solver `rtol = 1e-6`, but here we're using `rtol=1e-7` as the test, so the test is bugged (it's probably not the only one, and I may have missed some of these in `mcsolve` too). I should change this when I convert `test_mesolve.py`. Also, I clearly didn't read the log properly on that one - I thought it was one of the random errors from before!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625290303:57,test,test,57,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625290303,8,"['log', 'test']","['log', 'test', 'tests']"
Testability,"I'll take a look at the merge. It seems like it might have gone bad. I'll add in some tests once I fix the merge, as well. I'll look into the diag method and try to move everything over to separate; everything as you described. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:86,test,tests,86,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['test'],['tests']
Testability,"I'm a fan of the CodeClimate complexity tests, but I wouldn't be averse to removing its complaints about ""TODO"" comments - I'm not sure what we really gain from that in this sort of open-source development. In a business where people are working full-time then I imagine it can be worth preventing a merge to finalise some details, but in our very decentralised development, really in some cases (especially in the next major release), we do need to merge in parts of code we know to be imperfect. That said, we probably should make an effort to clear out some of the TODOs and FIXMEs that are in the codebase already. Pushed fix-up changes since last review:; - wrapped the steadystate SciPy linalg functions so they're simplified at the point of call, and unknown keywords in old SciPy versions are just silently ""eaten"" (this is the same behaviour that the file used to have, just formalised a little more).; - added `TODO` in a comment in `qutip.cy.pyxbuilder`; - changed the static class attributes in `test_superoper.py` into a `setup_method` function. *edit*: oh yeah, forgot that there were still errors in some old SciPy bits in the control module as well. I'll push a fix to that before this needs reviewing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305,1,['test'],['tests']
Testability,"I'm sorry I don't have a huge amount of time at the moment, but just to add an extra point (that it looks like I didn't think about before): if we _do_ add this, then any method that requires an unconditional `import qutip` in downstream packages probably isn't a suitable solution - `import qutip` already takes far too long (though a lot of this is importing various parts of `scipy`, which another library might do on our behalf), and it means that they'd have to do their own import checking to handle optional dependencies. In that sense, (ab)using Python's duck-typing with a magic method might be the best way to break the dependency/import problem. I'm definitely still against implicit conversion to `Qobj` in pretty much any situation - I can imagine we could define a safe, fairly forward-compatible interface for letting people do `qutip.Qobj(x)`, but as it stands, that's the limit that I'd want the interface to be used for. I particularly am really against the idea of implicit conversion. I don't see an advantage to allowing QuTiP functions to act implicitly on other objects; it means our own functions are slower (because we have to explicitly test inputs on _everything_), and it restricts us more from improving `Qobj`'s internals, because we have to maintain compatibility with the interface. We'd never really be able to output anything _other_ than a `Qobj` without this, so there's no reason not to just have the user convert the inputs to `Qobj` explicitly themselves - that isolates the efficiency penalty so you only pay it if you need it, and it'll likely be clearer in the end anyway, because explicit is better for following the logic than implicit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301:1163,test,test,1163,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301,2,"['log', 'test']","['logic', 'test']"
Testability,"I've done some simple benchmarks and indeed there seems to be a nice speedup. http://nbviewer.ipython.org/gist/jrjohansson/e63daeb3a41f95f163ad. so it definitely seems worthwhile to add support for this type of time-dependence in QuTiP. But string part of the definition of H is your example can be automatically generated knowning the times array, as I did in the notebook linked above. Therefore, I wonder if it may not be even more convenient if one simply could do. ```; >>> H = [H1, [H2, pulse]]; ```. It would require a few more changes in mesolve/sesolve and in _ode_check.py, but would give a nice clean API for using arrays to define time-dependences. How do you feel about that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44613285:22,benchmark,benchmarks,22,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44613285,1,['benchmark'],['benchmarks']
Testability,"If we moved normalization into the solvers, then we wouldn't need the preprocessors. The copy logic for processors could be kept so that the state is only copied by the results if the processors require it, but we'd then need the solver to tell the result whether it had already copied the state. We'd also need to make sure that the normalization logic in the solver was re-usable and override-able. The _post_init() would still be useful for processing options (e.g. the HEOMResult already does that to process the ado_return option).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1142321531:94,log,logic,94,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1142321531,2,['log'],['logic']
Testability,"In `brtools`'s tests, we could check that the results `eigenvector` are mathematically right, without matching `scipy`'s result. Should be quite simple and we would more resilient to changes in scipy. . Did anybody check if it solves the segfault issues on Mac yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299#issuecomment-649523632:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/issues/1299#issuecomment-649523632,1,['test'],['tests']
Testability,"In general in pytest we use the bare keyword `assert` for almost everything. All the functions in `np.testing` are from the ""before times"", when test tooling wasn't as good as it is nowadays - they were a big improvement on available warning messages back before 2015. Nowadays, though, `pytest` does introspection on assertion failures, so it has even better message reporting than the `np.testing` functions, and it lets you write much clearer code. For example, `assert_equal(x, y)` is much better spelled in pytest as `assert x == y`, because it's much faster to read and pytest does better error reporting for it. Similarly, testing for exceptions is better with; ```python; with pytest.raises(ValueError):; call_that_raises(1, ""hello, world""); ```; as opposed to the numpy form `np.testing.assert_raises(ValueError, call_that_raises, 1, ""hello, world"")` - the pytest one is much easier to read, and the error message is better. The only numpy one we still use is `np.testing.assert_allclose` when we're comparing several numpy arrays. That's just because `pytest` doesn't have a good function that's aware of multidimensional arrays (at least not one that I know). This file still has a load of old numpy testing code in it (e.g. `np.testing.assert_equal`) because it was written quite a long time ago, when that was the recommended way of doing things. We're changing over slowly, so we can take advantage of all the nice features of pytest. In this case, I changed `np.testing.assert_allclose(x, y, atol=tol)` to `assert abs(x - y) < tol`. I removed `np.testing.assert_allclose`, because that gives the mistaken impression that we're comparing arrays (we're not, we're comparing two scalars). I could have changed it to `assert x == pytest.approx(y, tol=tol)`, except in this case the test file hasn't been converted to `pytest` style yet, and I wanted to keep the total change of this PR as small as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671:46,assert,assert,46,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671,16,"['assert', 'test']","['assert', 'assertion', 'test', 'testing']"
Testability,"In general the biggest thing you should consider is readability, and to be fair, that's a little subjective. You're welcome to comment on my PR if you think I've done anything that's unreadable. You can scope fixtures at whatever level is appropriate. In this particular case, I scoped the `dimension` fixture at the module level, because there's loads of places that needed to test varying dimensions, and it's very convenient to define it just once. In the few cases where we needed to override that (e.g. in `dnorm`), I overrode it by providing a definition in a tighter scope - either at class level or per-function (via `pytest.mark.parametrize` directly). The correct scoping just depends a lot on the type of tests you're writing - if you're going to have to overwrite something constantly then module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:378,test,test,378,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,4,['test'],"['test', 'tests']"
Testability,"It is a really nice test. It clearly shows how bad is the 'iterative' method. For dim=20 the discrepancy between 'iterative' and 'clenshaw' is 1e-12 and for dim=50 it already becomes 1e-5, whereas 'laguerre' agrees with 'clenshaw' up to 1e-14 independent of dim.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526#issuecomment-242816743:20,test,test,20,https://qutip.org,https://github.com/qutip/qutip/issues/526#issuecomment-242816743,1,['test'],['test']
Testability,"It is a simple fix. Just replace ""append"" with ""add_gate"" in ""temp.append(self.gates[self.N - i - 1])"". I tested myself and it works like a charm now.; You are welcome. I love QuTip and it is an honor to help the developers.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/682#issuecomment-292738008:106,test,tested,106,https://qutip.org,https://github.com/qutip/qutip/issues/682#issuecomment-292738008,1,['test'],['tested']
Testability,"It refers to the system's Liouvillian, I'd say. I think all the `C_n` there are stochastic jumps, `sc_ops `, while the system Liouvillian is the constant part, `c_ops`. But I am not 100% sure. . The user guide is partly out of date there, @Ericgig and others have considerably extended the functionalities of the stochastic solvers. Looking at the [API documentation](http://qutip.org/docs/latest/apidoc/functions.html#module-qutip.stochastic) is safer, and the [source code](http://qutip.org/docs/latest/modules/qutip/stochastic.html) is even more complete. . Meanwhile, you can also have a look at these development notebooks [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-milstein-speed-test.ipynb), [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb), and [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) with regards to the new methods (you can find them all, a bit hidden, at the bottom of the http://qutip.org/tutorials.html list). Technically this issue could be transferred under [`qutip/qutip-doc`](https://github.com/qutip/qutip-doc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702:753,test,test,753,https://qutip.org,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702,2,['test'],"['test', 'tests']"
Testability,"It seems to work now (the failing test is unrelated). I will briefly summarize what I found out and changed. Setting up and using an MPI environment is surprisingly difficult, and I don't think it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:34,test,test,34,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,3,['test'],"['test', 'tests']"
Testability,It's certainly easier if it was multiple smaller ones but we can do it like this. You can simply continue in another Pr for the remaining tests.; I will start evaluating file by file starting with parts of the code I am the most familiar with:; - [x] test_mcsolve.py; - [x] test_lattice.py ; - [x] test_interpolate.py ; - [x] test_fastsparse.py ; - [ ] test_expect.py ; - [ ] test_eigenstates.py ; - [ ] test_dimensions.py ; - [ ] test_cy_structs.py,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-609960145:138,test,tests,138,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-609960145,1,['test'],['tests']
Testability,"It's in development. ; If you use qutip v5.0.0a2 on pypi or master branch here with [qutip-jax](https://github.com/qutip/qutip-jax), some solver can work on gpu. (We tested `sesolve` and `mesolve`, mcsolve should work, stochastic, HOEM, brmesolve don't.); The readthedocs of qutip-jax shows how to use it. qutip-jax is not up to date with the latest versions.; If you are interested in trying it, I will make it works with the latest jax version and qutip master.; Any and all feedback appreciated. We expect an official release of these features in March.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944:166,test,tested,166,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944,1,['test'],['tested']
Testability,"I’ve never enforced this, so I am no expert. Though, would enforcing the options in a dynamical solver work? Maybe you do not need the dynamical solver, but checking if that works could help understanding this issue too. I would test it by creating an Options object and passing it to a dynamical solver. http://qutip.org/docs/latest/guide/dynamics/dynamics-options.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1175#issuecomment-582772817:229,test,test,229,https://qutip.org,https://github.com/qutip/qutip/issues/1175#issuecomment-582772817,1,['test'],['test']
Testability,"Let me do that until I get the hang of the pulling and pushing. . On Aug 29, 2014, at 2:58 PM, Robert Johansson notifications@github.com wrote:. > You do as you wish, but I much prefer when you submit things via pull requests rather than pushing directly to master, because it gives an opportunity to give feedback or at least being aware of what is happening before it lands in master. Also travis tests is a good way of making sure that everything is in a good state before merged. However, this is just my preference, and if you prefer pushing into master you can go ahead and do that of course.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221#issuecomment-53840133:399,test,tests,399,https://qutip.org,https://github.com/qutip/qutip/pull/221#issuecomment-53840133,1,['test'],['tests']
Testability,"Looks cool, you can make the PR against the master branch. We do not have a; dev branch. On Mon, 22 Jul 2019 at 19:14, Michael Goerz <notifications@github.com>; wrote:. > Sorry.. got a little distracted, and wanted to check the contributing; > guidelines on what branch to make the pull request against. Currently it’s; > master. Is that ok? If yes, I’ll undraft it.; >; > Draft PRs are pretty new, and a very nice way to kick off the Continuous; > Integration. Like in this case, I wanted to check if any of the tests; > involve that message. As they don’t, this actually is ready to go.; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1049?email_source=notifications&email_token=ABVFIBCN7YWP77NBJVTZA2LQAXTJDA5CNFSM4IEC7VHKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2QRIRA#issuecomment-513872964>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABVFIBHWIDKPIYAU6NMZXILQAXTJDANCNFSM4IEC7VHA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973:513,test,tests,513,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973,1,['test'],['tests']
Testability,"May I propose another approach for testing normalization: use a non-hermitian Hamiltonian and `qeye` as the e_ops.; Then it is clear if the normalization step does it's work or not. Otherwise the `tol` should be very strict, the error between before and after the normalization is usually quite small. `sesolve` does not differentiate between an `unitary` and a `dm`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1148806235:35,test,testing,35,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1148806235,1,['test'],['testing']
Testability,"Nah, don't disparage yourself - your code is good and you've done well to copy the style of the rest of the files. Typically consistency is better than having ""the one true style""; code's read more than it's written, and having a module which is clearly written by four different people makes the logic very very difficult to follow, which in turns makes it much harder to spot bugs. If it were up to me (which is isn't, really), I would say that your changes are good as they are. I didn't mean for the comments to be changes you _had_ to make. You can't reduce the number of merge conflicts that are going to happen with #1181 anyway, because that PR is a massive refactor of large swathes of the testing suite. You've done a good job to keep your work consistent with the rest of the file, so it will be very easy to merge in your logical changes. Merge conflicts are pretty much just par for the course; just the fact that we're discussing this here shows that logically, there _is_ a conflict between two pieces of work being done at the same time. I'd suggest merging this as-is. We'll handle the problems caused by the refactor elsewhere.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891:297,log,logic,297,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891,4,"['log', 'test']","['logic', 'logical', 'logically', 'testing']"
Testability,"Nice work!. > I have removed self.gates as well as self.gates_and_measurements. The replacement is the more ""general"" (and less of a mouthful) self.circuit_ops which contains both. I like this merge of to attributes. However, we shouldn't change the attribute name `gates`, at least not in this PR here. It's an open attribute API and as you see we used it a lot in tests. It's very likely that others are using it too. . Personally, I would keep the attribute `gates` since even for measurement operations, people still usually say ""measurement gates"". `circuit_ops` is certainly more accurate, but might be hard to remember and thus makes the learning curve steeper.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-647396416:366,test,tests,366,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-647396416,1,['test'],['tests']
Testability,"No `.compile()` in v5. ; I don't think we need a porting guide either, `compile` is called internally in evolution but users very rarely call it themselves. 99.9% of users don't know it exist. Where is it causing issues? I only remember using it in a developer notebook showing benchmarks. This notebook can be removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1176207837:278,benchmark,benchmarks,278,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1176207837,1,['benchmark'],['benchmarks']
Testability,"No problem. I would suggest that at merge time, this PR is _not_ squashed but is simply rebased onto or merged into master. A merge would ensure that the PR number is included in the git history if that's desired, but all the relevant explanations are also already in the commit messages. It's a very large change, there's a lot of exposition in the commit messages, and each commit is a modular unit of work already, while the PR title won't actually be true (since not all of the tests are converted). I know that the commit messages are all combined on github, but it's much more difficult to search for the small bit you need out of several pages of writing, rather than having only the relevant parts presented to you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885,1,['test'],['tests']
Testability,"No, if `test` is used for the branch name, it will still deploy to testpypi. Both `deploy to ...` jobs were cut and pasted with only 2 lines changed so I merged them so we don't forget to update one without the other. I also added more feedback to the job that would show uploaded files even for a dry run.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342:8,test,test,8,https://qutip.org,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342,2,['test'],"['test', 'testpypi']"
Testability,"Not directly testing for commuting operators, but Qobj implements **eq** and **ne** which means that you can test for commuting operators simply by doing. ```; if a * b == b * a:; # a and b commutes; ```. Maybe it could be useful with function that performs this test for two Qobj instances, but currently we do not have such a function. The PR looks good so I'll merge it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/41#issuecomment-22768490:13,test,testing,13,https://qutip.org,https://github.com/qutip/qutip/pull/41#issuecomment-22768490,3,['test'],"['test', 'testing']"
Testability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:47,test,test,47,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,5,['test'],"['test', 'testing']"
Testability,"Now it gives me one other error and a failure (and I have the impression the I can deal with the prior errors better than with the new one):. > > > import qutip.testing as qt; > > > qt.run(); > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ERROR; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... FAIL; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Sparse: Symmetric Permute ... ok; > > > Sparse: Nonsymmetric Permute ... ok; > > > Sparse: Symmetric Reverse Permute ... ok; > > > Sparse: Nonsymmetric Reverse Permute ... ok; > > > Sparse: Bandwidth ... ok; > > > Transform 2-level to eigenbasis and back ... ok; > > > Transform 10-level real-values to eigenbasis and back ... ok; > > > Transform 10-level to eigenbasis and back ... ok; > > > Transform 10-level imag to eigenbasis and back ... ok; > > > Check diagonalization via eigenbasis transformation ... ok; > > > brmesolve: harmonic oscillator, finite temperature ... ok; > > > brmesolve: harmonic oscillator, finite temperature, states ... ok; > > > brmesolve: harmonic oscillator, zero temperature ... ok; > > > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > > > brmesolve: qubit ... ok; > > > correlation: comparing me and es for oscillator in coherent initial state ... ok; > > > correlation: comparing me and es for oscillator in steady state ... ok; > > > correlation: compare spectrum from eseries and pseudo-inverse methods ... ok; > > > Diagonalization of random two-",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:161,test,testing,161,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['testing']
Testability,"Ok, it looks like the tests are finally going to pass. As the number of commits suggests, this was a pain. Not because the code was wrong, but because:. 1) The default config used by Travis has GCC 4.6 which contains an error that happens to get raised in our case. Thus, had to move to the Trusty build stack. 2) Although it took forever to hunt down, it appears that when .pyx files are included as package data, Py27 may try to rebuild them upon calling **init**. This would throw a missing header error. Since these files are not needed after building, removing them clears up this issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/551#issuecomment-254497807:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/551#issuecomment-254497807,1,['test'],['tests']
Testability,"Ok, it turns out I got the numpy release notes the wrong way round; we have to build our binaries with `1.16.6 <= numpy < 1.20` to maintain ABI compatibility no matter the numpy version. I have updated the compiler infrastructure to take this into account - this is in some ways a temporary restriction until two or three years in the future when we can drop support for all numpy versions less than 1.20. This is ready for final review. If you're fast, you can also try installing from the test PyPI server to see if the wheels work for you. While it's on the temporary server, you need to install `numpy` and `scipy` manually yourself (as they don't exist on test.pypi.org), but pip will do the dependencies correctly for you once it's publishing to the full repo.; ```bash; conda create -n pypi-test; conda install python pip numpy scipy; pip install -i https://test.pypi.org/simple qutip-jakelishman; python -c 'import qutip; qutip.about()'; ```. @hodgestar, @nathanshammah: perhaps you could just glance over this again and make sure everything looks right to you? Simon, I know you already looked over it once, so if you've not got time again, no problem - barely anything has changed since you last saw it. Nathan: in theory once we're in a position where deployments push to PyPI I think I can write an action for qutip/qutip.github.io to push a commit updating the website with the new information too. However, with the docs currently using a completely separate build process in a different repo, they can't really be triggered by a release here. I wrote this PR against `dev.major`, but I suppose in theory I could backport it to the 4.x branch if that's absolutely required. I think some parts of the setup changed for `dev.major`, which is why I didn't originally try to make it to the current version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158:491,test,test,491,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158,4,['test'],['test']
Testability,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:18,benchmark,benchmarking,18,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['benchmark'],['benchmarking']
Testability,"Ok, yeah, I definitely see the use-case here. I'll leave it removed from `matmul` for the time being because I hadn't really organised that code to allow safe calling of the function with an `out` parameter, but I'll look to re-instate it, similarly with `add`. For `add`: I envisage a nice possibility for `QobjEvo` using `CSR` backing along the vein of `CQobjEvoTdMatched`: on instantiation we add together all the matrices, then we `memset` all zeroes along the `data` array and store it as `self._structure`. Then each time we `__call__` the object, we simply do `out = self._structure.copy()`, and use that as the output matrix, because we guarantee we'll always have enough space and the correct structure. There's a couple of minor kinks in the logic of `add_csr` that we might have to iron out in order to avoid an additional matrix addition, but the savings in memory allocation could be good. You're absolutely right about the `pxd` files - I haven't taken enough care to make sure they've got all the definitions in yet. Basically everything that isn't prefixed with an underscore in the `.pyx` files _should_ be in the `.pxd` files. I'll add them in tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648371869:752,log,logic,752,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648371869,1,['log'],['logic']
Testability,"PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7fa2ddc04270). Current thread 0x00000001123d55c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. ## Relation to `to_kraus`. The above `Malloc.py` file uses `scipy.linalg.eig` via use of an `eseries` version of `correlation`. The current test of superoperator representations uses `choi_to_kraus` which also calls `scipy.linalg.eig`. Here is a file `kraus.py` that can reproduce these segfaults semi-reliably (may need to run it a few times to get it to trigger):. ```python; import qutip. s = qutip.rand_super(); c = qutip.to_choi(s); k = qutip.to_kraus(c); ```. For example, here's a similar command on this file:. ```; Debug memory block at address p=0x7f98cc467db0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:3740,test,test,3740,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['test'],['test']
Testability,Please refer to [`smesolve` new methods](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) and [benchmark](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb). I think you should just use `c_ops` or `sc_ops`. Keeping this open as the notebook needs to be updated and the Users guide documentation. The [API documentation](http://qutip.org/docs/latest/apidoc/functions.html?highlight=smesolve#qutip.stochastic.smesolve) is updated.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471:169,benchmark,benchmark,169,https://qutip.org,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"Repeating just changes the probability of failure, rather than actually detecting whether it was a rare fail, and `mesolve` tests aren't always the fastest, so repetition here isn't great. For simple unitary qubit operations, I think it should be easy enough to work out how the tolerance translates. It's difficult to say that if there's a numerical error then the error will be much greater - I caught some errors in the `test_gates.py` (I think) that were sneaking through because the tolerances were set too high. It's probably best to keep as tight a tolerance as is reasonable - here I think `2 * qutip.Options.rtol` would always be correct if the numerics are.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751:124,test,tests,124,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751,1,['test'],['tests']
Testability,Something is way off about that test failure again... Is it possible Travis isn't cleaning up properly? I can't reproduce the failure (it's also clearly nothing to do with this change) and the error message doesn't match up. If anything it looks like the error message is coming from a hash collision inside QobjEvo _maybe_?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672,1,['test'],['test']
Testability,"Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (**1-P(no jump)**), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable? . I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the **array[1, 10, 11]**? ... . At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response. Cheers,; Qi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42091087:1464,test,test,1464,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42091087,1,['test'],['test']
Testability,"Sorry.. got a little distracted, and wanted to check the contributing guidelines on what branch to make the pull request against. Currently it’s master. Is that ok? If yes, I’ll undraft it. Draft PRs are pretty new, and a very nice way to kick off the Continuous Integration. Like in this case, I wanted to check if any of the tests involve that message. As they don’t, this actually is ready to go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964:327,test,tests,327,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964,1,['test'],['tests']
Testability,"Sounds good, we should definitely make sure that the tests all work for 3.2; final. In the meantime, I think we should continue to merge in fixes when; its clear that the test failures are unrelated. On Mon, Feb 15, 2016 at 4:52 PM Alexander Pitchford <; notifications@github.com> wrote:. > Yes, I was thinking the same thing. I will open an issue now.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/pull/428#issuecomment-184074750.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/428#issuecomment-184074941:53,test,tests,53,https://qutip.org,https://github.com/qutip/qutip/pull/428#issuecomment-184074941,2,['test'],"['test', 'tests']"
Testability,"Thank you @hodgestar, glad to see many details coming with this nicely drafted PR. . Functions design seems sensible. ; What is the main difference between `expect` and `measure`? That's the main thing that comes up to my mind. What different question are you answering? I also wonder if `expect` could be called. The description of the `measure` function is a bit general maybe with this regard. But I might have missed the point completely (my bad). . Tests seem quite elaborate, I wouldn't know how to add more. They can be even very simple in general. . Somehow `smesolve` tests fail with Travis CI, not sure how this PR could have affected it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-536360074:577,test,tests,577,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-536360074,1,['test'],['tests']
Testability,"Thank you for such a quick response. I'm sorry for not getting back to you sooner. > First of all, are you sure that either of DrudeLorentzBath and DrudeLorentzPadeBath give the right solution? Because the ck_real / vk_real are supposed to be the coefficients / exponents of the real part of the correlation function (and the others the imaginary part), and if you plug in imaginary parameters, then terms that previously were only in the real parts could pick up imaginary parts etc. Perhaps this kind of thing cancels out when you add the two unphysical D-L baths to get the shifted D-L bath?. One can use the analytic expression for monomer absorption spectra to test which Drude-Lorentz bath is correct. Also, one can use [DM-HEOM](https://github.com/noma/dm-heom) [2], where they have implemented the ""Shifted Drude Lorentz Bath"" [1]. Compared with their Matsubara implementation, it gives the same density matrix evolution (up to the numerical accuracy) as QuTiP's HEOM gives with `DrudeLorentzBath` and $\gamma \rightarrow \gamma \pm \Omega$ and $\lambda \rightarrow \lambda/2$. But it is not the case for `DrudeLorentzPadeBath`. You are right to think that the unphysical part goes away when two baths are added [1], one with $+i\Omega$ and the other with $-i\Omega$. > However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. You are very much in the right to be absolutely sure before making a change. As far as I understand and have tested, it will not change the real case because the changes are as follows (I have removed all the other lines in between for clarity):. ```python; - ck_real = [np.real(eta) for eta in eta_p]; + ck_real = [eta for eta in eta_p]. - ck_imag = [np.imag(eta_p[0])]; + ck_imag = [-lam*gamma]. - eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0) - 1.0j)]; + eta_p = [lam * gamma * (self._cot(gamma * beta / 2",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274:666,test,test,666,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274,1,['test'],['test']
Testability,Thank you for your feedback. I will write tests and documentation when I have some more time (might be in a month or so).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1369#issuecomment-759365480:42,test,tests,42,https://qutip.org,https://github.com/qutip/qutip/pull/1369#issuecomment-759365480,1,['test'],['tests']
Testability,"Thank you for your prompt reply. @sahmed95. QuTip was installed on Windows; ```; pyhton 3.6.4; ```; We download anaconda and install QuTip from conda-forge with; ```; conda install -c conda-forge qutip; ```; but when run ; ```; import qutip.testing as qt; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transf",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:241,test,testing,241,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,4,"['log', 'test']","['logger', 'testing']"
Testability,"Thank you very much. I have documented most of the code and written simple unit tests. I would be happy to answer any questions regarding the code. If it helps, I can explain things over a short hangout session. Suggestions and comments are welcome.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-275864859:80,test,tests,80,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-275864859,1,['test'],['tests']
Testability,Thanks Chris. This is looking good. I'll try it out in more detail in the comings days. Some immediate comments:; - I don't think we should keep two code-paths for parsing the config file. So either we keep using the old manual parsing or we make configobj the official and only way to parse the config file. In that case I think it would be Ok to simply fail to parse the config file if configobj is not available. I don't think many users use the config file so would be to worried about breaking backwards compatibility with respect to this.; - I think I'd prefer to have the logging module called logging.py rather than _logging.py even though it is supposed to internal to qutip. ; - Please add a `__all__` list in logging.py; - Shouldn't configspec.ini be added to the setup.py file?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248#issuecomment-61393881:579,log,logging,579,https://qutip.org,https://github.com/qutip/qutip/pull/248#issuecomment-61393881,3,['log'],['logging']
Testability,"Thanks for the quick response @bencbartlett. . Feel free to ignore the comments regarding the shortening of arguments. That was just a suggestion to make things shorter. But as you said clarity is more important. I will not change `waveguide` to `wg` and I think you should leave the others as they are if you can't think of shorter ones. Same applies to the `temporal_basis_vector`. I think you can even add a `temporal_basis` as you mentioned. Regarding the double line breaks wrapping top-level functions, I know the pep8 standard is two newlines but some other QuTiP modules follow just a single line break, e.g., [floquet](https://github.com/qutip/qutip/blob/master/qutip/floquet.py). But again some other modules in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor perform",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:951,test,test,951,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,1,['test'],['test']
Testability,"Thanks for the review!. > * Should we stop the user from passing a list of kets to `mcsolve` directly?; > Presently it work but it's not documented (and list `ntraj` don't.). You are right, done. Of course we could also allow the same arguments for `mcsolve` as for `run`, but I thought it might be good to keep the `mcsolve` interface simpler. > * It would be nice to have the trajectories per initial state information stored in the result somewhere. I have added that information and checking it in a test. Edit: I forgot that I still haven't updated the docs. Will do that. Edit 2: Done",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143:504,test,test,504,https://qutip.org,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143,1,['test'],['test']
Testability,"Thanks, this helps track it down. It seems not to be an issue with ENR per se, but with the floquet steadystate solver itself (it also appears without using ENR states). . I think I pinned it down to two small bugs in that seem to have crept in to the solver with the data layer updates, I will make a PR for it and ping you for some feedback, if thats ok. We lack a sufficiently robust test for this solver really, if you can suggest something tractable (very small example, potentially analytical solution we can check against), it would be very helpful.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504:387,test,test,387,https://qutip.org,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504,1,['test'],['test']
Testability,"The `Qcircuit.tex` PR was unfortunately many many years ago, long before I made my first commit to QuTiP (according to `git log` it was by Anubhav Vardhan in 2014), so the damage is already done. It was on my mind because there was a PR about updating the version of the code in it (#1187). Nonetheless, we definitely should remove it. @BoxiLi Boxi: `Qcircuit.tex` is a concern for `qutip-qip` more than the main library from 5.0 onwards - it's currently in `qip/circuit_latex.py`, which we'll have removed, but you've gained. It might be most appropriate to handle this the same way Qiskit does - generate code which does `\usepackage{qcircuit}`, and leave it up to the user to have a properly-provisioned LaTeX environment. I note that `qcircuit` is included in MikTeX and TexLive since at least 2018 (but not sure when exactly it was added). > Yeah putting years I think is the correct thing. Didn't know that at the time. Ah, that's good to know, thanks. I'm trying to learn more about licensing - I'm trying to get it sorted now into the right form, but it's a really complicated field. I think if we change `LICENCE.txt` to. ```text; Copyright (c) 2011--2021 Paul Nation and Robert Johansson.; Copyright (c) 2021--2021 QuTiP Admin Team.; All rights reserved. <BSD 3-clause licence>; ```. and update the final `2021` as appropriate, we'll be in the best standing. That's also why we might want to remove the general licence text from each file - it's already redundant, but it'll be much harder to update if we have it scattered everywhere (automation would run the risk of us messing up and changing any external code's licence as well, I think, which would be wrong). > Look forward to talking to you in July!. Me too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845:124,log,log,124,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845,1,['log'],['log']
Testability,"The code change look good, but could we also add a test for this so it doesn't fail again in the future? Maybe there is a simple example from a notebook that can be borrowed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1952#issuecomment-1197371391:51,test,test,51,https://qutip.org,https://github.com/qutip/qutip/pull/1952#issuecomment-1197371391,1,['test'],['test']
Testability,"The equation for `d_{2,i}` for `ssesolve` seems to be missing a 1/2 term. I checked two sources: Quantum Measurement and Control, Wiseman and Milburn (equation 4.76, page 162), and [the development notebook for SSE](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-ssesolve-tests.ipynb). In both cases, the expression for d_{2, i} for the SSE is: . <img width=""278"" alt=""Untitled"" src=""https://user-images.githubusercontent.com/39472087/145735966-85d0c932-a247-42e7-91e1-98fc0f6d0c49.png"">. For the stochastic master equation, I also found a different expression for `d_{2,i}`. Both book (equations 4.24 and 4.72 in pages 152 and 161, respectively) and development notebook, state that it should be written:. <img width=""483"" alt=""d2master"" src=""https://user-images.githubusercontent.com/39472087/145737189-9e3996a5-186a-47e3-9e2f-7e365e00e5ea.png"">. To test the current qutip implementation, I tried to replicate the results of both [SSE](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-ssesolve-tests.ipynb) and [SME](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb) development notebooks. The results obtained with QuTiP homodyne and heterodyne methods were similar to the results obtained with the d_1 and d_2 implemented 'by hand' in the notebooks, which used the expressions I listed above. In my tests, I used QuTiP 4.5.2. The equations above are also the current reported equations in the [stochastic solver documentation](https://qutip.org/docs/latest/guide/dynamics/dynamics-stochastic.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706#issuecomment-992023974:319,test,tests,319,https://qutip.org,https://github.com/qutip/qutip/issues/1706#issuecomment-992023974,5,['test'],"['test', 'tests']"
Testability,"The fermionic stuff looks to me! For the change in the terminator, I see the logic I guess. Also makes it easier for the user to include it or not, without remaking the bath. I have some reservations about it just because I can imagine someone following the examples and using jupyter notebook rerunning the same cell multiple times and continuously modifying their Hsys or something? But that can just be made clear in the examples so lets go ahead and merge this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370:77,log,logic,77,https://qutip.org,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370,1,['log'],['logic']
Testability,"The function `rand_herm` doesn't return a uniformly random sample from the space of Hermitean matrices -- instead it uses by default a simpler procedure of generating a random matrix with moderately sized entries and then calculating `M + M.conj().transpose()`. The following note in the `rand_herm` documentation explains how to select the eigenvalues:. > If given a list/ndarray as input 'N', this function returns a; > random Hermitian object with eigenvalues given in the list/ndarray.; > This is accomplished via complex Jacobi rotations. While this method; > is ~50% faster than the corresponding (real only) Matlab code, it should; > not be repeatedly used for generating matrices larger than ~1000x1000. Specifically one may generate random eigenvalues and supply those. I don't think anyone is against improving the `rand_XXX` function to have better statistical properties, but they're primarily used for testing and simple trial data at the moment, so their implementations have been good enough so far.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642#issuecomment-905691827:915,test,testing,915,https://qutip.org,https://github.com/qutip/qutip/issues/1642#issuecomment-905691827,1,['test'],['testing']
Testability,"The mcsolve is Ok. But I did not test it on windows yet.; td_Qobj work fine for the solvers. However, there are probably a few methods/properties that would be useful but I did not think about. If somebody would have the time to try it and send feedback, that would be great.; For now, sesolve and mesolve also accept td_Qobj. I am working, in another branch, to have the stochastic solvers work with it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/774#issuecomment-351799673:33,test,test,33,https://qutip.org,https://github.com/qutip/qutip/pull/774#issuecomment-351799673,1,['test'],['test']
Testability,"The problem seems pretty simple, I think I could take care of it. However, I don't have much experience in collaborative programming, in particular I don't know what the local customs are. (I know how to use git, but I'm not familiar with the layout of the library, what tests should I perform [or even add my own, since this issue wasn't noticed before 5.0.0] etc.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2129#issuecomment-1483294457:271,test,tests,271,https://qutip.org,https://github.com/qutip/qutip/issues/2129#issuecomment-1483294457,1,['test'],['tests']
Testability,"The problem with OPENMP is that the point where parallel processing begins to have an advantage is platform, and hardware dependent. As such, I have added a simple benchmark routine that calculates a good number of NNZ that a matrix should have for OPENMP to be utilized. This also required me to change the way the qutiprc file is done, i.e. it now uses the standard configparser module. This benchmark is called on first run, or anytime where the qutiprc 'openmp_thresh' flag is missing, or the qutiprc file itself does not exist.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/652#issuecomment-283874454:164,benchmark,benchmark,164,https://qutip.org,https://github.com/qutip/qutip/pull/652#issuecomment-283874454,2,['benchmark'],['benchmark']
Testability,"The tests fail because if one defines `f(t, args, k)` and defines `g = partial(f, k=0.5)` then the signature of g is `<Signature (t, args, *, k=5)>`. There will likely be other cases like this (e.g. many decorators will change the signature). I vote that we give up on all the complicated detection of the old syntax and simply ask users to change `f(t, args)` to `f(t, **args)` when they upgrade to QuTiP 5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881,1,['test'],['tests']
Testability,"There are no test code for progress bars yet.; You will need to create a new test file: `qutip/tests/test_progressbar.py`. The test can be as simple as creating the bar, call `update`, call `finished` and check that the total time is a sensible value.; You could also use pytest to catch print with [capsys](https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html#accessing-captured-output-from-a-test-function) and confirm that something was printed when `update` / `finished` is called.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520:13,test,test,13,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520,5,['test'],"['test', 'test-function', 'tests']"
Testability,"There's no link, just bad luck. This won't prevent merge - the tests clearly show your change is fine. Unfortunately our test suite isn't perfect, and sometimes it tries to integrate an insanely stiff system or something like that by accident.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050:63,test,tests,63,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050,2,['test'],"['test', 'tests']"
Testability,"These could be my final modifications before pushing this if all is smooth.; There are some other things that it would be nice to include but it’s best; to wait for the next round as this is already quite a complete library. Shortly I will also upload a bunch of notebooks in my folder with different; physical models studied there and I would be happy to frame them in the; best shape for qutip examples / tutorials if they are not already ok. Some state definitions overlap with state definitions in qutip.states, here; using this new Dicke basis. For the sake of simplicity we thought for now; that it would be best to keep these states bundled in the Piqs model.; Thanks. Il giorno lun 5 mar 2018 alle 19:07 Alexander Pitchford <; notifications@github.com> ha scritto:. > Also, all tests are failing. The one I checked showed:; >; > ImportError: No module named dicke; >; > I assume that this will affect all the builds; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/753#issuecomment-370370268>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AN5ffN6PK_jI4M8IgYNWBk3qKS4OXCtMks5tbQ5ugaJpZM4PgbIo>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-370377840:786,test,tests,786,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-370377840,1,['test'],['tests']
Testability,"This issue has a two-fold interest: decreasing test time in general and expand the platforms through which QuTiP is available. . What is the reason it takes so long on Nix? QuTiP, in the [latest PR](https://travis-ci.org/qutip/qutip/builds/628865624?utm_source=github_status&utm_medium=notification), takes on average 20 minutes to run its tests on a given platform. Much of this I think is due to the Cython configurations, indeed the no-cython option takes only 13 minutes. My first suggestion would be to try without Cython if things speed up, from those requirements (@Ericgig set that up and I am not knowledgeable about it). . From your PR on `nixpkgs` do you build on Travis CI or a similar cloud? If you could give a list of time taken by the different tests that would help. . The idea of a subset of tests is interesting (essential tests vs. thorough tests), in general; for example thorough tests could be done only in production and a lighter version could be called with `qutip.testing.run()`. Although, in specific, it is not clear to me how to triage which tests to skip. I would be glad to have the others opinion on this too (pinged them as assignees).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700:47,test,test,47,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700,9,['test'],"['test', 'testing', 'tests']"
Testability,"Yeah, `qutip-qip` is a much easier build and installation process because you don't need to be concerned about compiler infrastructure, ABI compatibility or stuff like that. In addition in that particular test run, there were three individual calls to change the installed packages, which meant plenty of space for stuff to go wrong. In this case, I think it was a strange interaction between the old `.travis.yml` specifically installing `numpy` and all other dependencies from `conda-forge`, without the channel being in the defaults list. Since `conda uninstall` doesn't specify an additional channel, the dependency calculator considers `defaults` to be higher priority, so it sets various packages to arbitrary allowed ones from `defaults`, which with `openblas` installed like this meant numpy `1.14`. That's my guess at least - it's a pretty weird set up circumstances, but the new `.travis.yml` file that's already in `master` is far simpler about the build process.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609:205,test,test,205,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609,1,['test'],['test']
Testability,"Yeah, this is just one of those silly things caused by ImageMagick choosing a _very_ generic name and then getting burned (hence the swap to `magick`...). Probably the best thing to do is to try and run `convert` once at discovery and to see what happens. If you run `convert -version` on an IM6 install, does it output a string that looks like; > Version: ImageMagick 6.blahblahblah; or something similar?. If so, try this patch: [check_convert.txt](https://github.com/qutip/qutip/files/4397692/check_convert.txt). It rearranged the functions a little for a more logical order (I'll rebase the PR before merge), but the main change is that it now tests the output of `convert -version` to see if it contains the substring `imagemagick` (case insensitive). The reason to do this now is because if we allowed the error to propagate later, we'd have to check it every time and it would mean we'd have to pass through the ""special cases"" more frequently, and it would make the core logic more complex. Also, we _could_ catch a subprocess `CalledProcessError` later (say if one of the other commands were to fail for some reason) and re-raise our own, but to be honest I didn't want to over-engineer what ought to have been a relatively simple PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526:564,log,logical,564,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526,3,"['log', 'test']","['logic', 'logical', 'tests']"
Testability,"Yes, something very simple would work, I guess. . ```; from numpy.testing import assert_,assert_almost_equal; assert_(molmer_sorensen(0)==tensor(qeye(2),qeye(2))); assert_almost_equal(molmer_sorensen(np.pi/2).full(),(np.array([[0.70710678+0.j, 0.+0.j,0. +0.j, 0.-0.70710678j],; [0. +0.j , 0.70710678+0.j,0.-0.70710678j, 0.+0.j],; [0. +0.j , 0. -0.70710678j,0.70710678+0.j, 0. +0.j],; [0.-0.70710678j, 0. +0.j , 0.+0.j , 0.70710678+0.j ]]))); ```; and something for N>3 if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1028#issuecomment-505109850:66,test,testing,66,https://qutip.org,https://github.com/qutip/qutip/pull/1028#issuecomment-505109850,1,['test'],['testing']
Testability,"You do as you wish, but I much prefer when you submit things via pull requests rather than pushing directly to master, because it gives an opportunity to give feedback or at least being aware of what is happening before it lands in master. Also travis tests is a good way of making sure that everything is in a good state before merged. However, this is just my preference, and if you prefer pushing into master you can go ahead and do that of course.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221#issuecomment-53840086:252,test,tests,252,https://qutip.org,https://github.com/qutip/qutip/pull/221#issuecomment-53840086,1,['test'],['tests']
Testability,"You should take care of the fact that both `H` and `rho0` are allowed to be superoperators as well. `H` can be a Liouvillian, and `rho0` can be a superoperator to allow for the type of situation mentioned in #384. If one of the two, but not both, are supers, your simple test will fail. . We should fix the docstring of `mesolve` so that it mentions that rho0 can be a super.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/481#issuecomment-222396968:271,test,test,271,https://qutip.org,https://github.com/qutip/qutip/pull/481#issuecomment-222396968,1,['test'],['test']
Testability,"You simple need to create a function starting with `test_` that use the progress bar. Ideally you would use it in a way that ensure all lines of code are used at least once. Then if there is an error in the code, python will raise an error and the test will fail. There should be some tutorials for pytest on the web, writing a step per step guide on making tests is more work than making the tests themselves so please have mercy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1478014084:248,test,test,248,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1478014084,3,['test'],"['test', 'tests']"
Testability,Your welcome and thanks for looking into this. I understand that there are functionality considerations to be made. Perhaps a simple assertion check would strike the right balance -- giving the functionality you want while avoiding the danger of faulty assumptions.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17175299:133,assert,assertion,133,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17175299,1,['assert'],['assertion']
Testability,"_**edit to put the positivity up top!**_: This is a very exciting prospect to me, and I'm always happy when other libraries want to interact with QuTiP! In the interests of inciting more discussion, I've got thrown in some more discussion points below - I'm 100% sure they're all solvable, but it also seems like there isn't one way that's unambiguously correct to do them, so they're worth discussing. ---. In principle I'm happy to implement this, though I don't really agree with your assertion that `othertype.toqobj()` is bad style! It might be so in Julia, but Python doesn't have all the same multiple-dispatch niceties that Julia has, so at the end of the day, we have to add in a method with a ""magic"" name somewhere, and it all just comes down to choosing the name of the method. The downside to having a magic name is that it means we have to eschew proper namespacing; what if another library one day wants to call their interface the same thing? Then it's completely impossible for a downstream library to interoperate with both. Having conversions be a non-special method of the downstream class, and leaving our constructor unaware of them alleviates that issue. Numpy can get away with squatting the `__array__` name because they're _huge_, but I would argue that if we do it, we could actually _harm_ the quantum software ecosystem in the long-run - what happens when a package better than QuTiP comes along that wants to call its objects `Qobj` as well? Let's face it - it's a pretty straightforward name!. All that said, I am very aware that not everyone agrees with me on this, and I _am_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no ot",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:488,assert,assertion,488,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['assert'],['assertion']
Testability,"_Edit 2020-08-25:_ reporting to Coveralls is now fixed. As a bonus, I also fixed the tree reporting in Coveralls, so now you can get line-by-line coverage analysis within the files in the Coveralls webapp. _Orginal comment from when Coveralls reported at 0%:_; Ok, that Coveralls report is clearly broken, but you can see in the test log that the coverage reporting is correctly fixed (see the Linux, Python 3.7 report). I suspect that my directory hopping has caused the generated `.coverage` file to get lost, which I'll fix tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347#issuecomment-679418397:329,test,test,329,https://qutip.org,https://github.com/qutip/qutip/pull/1347#issuecomment-679418397,2,"['log', 'test']","['log', 'test']"
Testability,"`; pyhton 3.6.4; ```; We download anaconda and install QuTip from conda-forge with; ```; conda install -c conda-forge qutip; ```; but when run ; ```; import qutip.testing as qt; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eige",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1081,log,logger,1081,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability,"`__array_wrap__` for coercion back (something that isn't currently implemented). At the time and up to inclusively 1.19, the presence of `__array__` caused otherwise scalar types passed alone to `np.array` to return the output of `input.__array__(*args, **kwargs)`, instead of becoming a 0D numpy array (like `np.array(1)` does). Taken purely alone, that could make sense as something we implement. However, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make sense on quantum objects, which are arrays only as an implementation detail - the `Qobj` class is meant to represent an abstract linear algebra object, not specifically a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-arra",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:4420,test,test,4420,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['test'],['test']
Testability,"``; conda install -c conda-forge qutip; ```; but when run ; ```; import qutip.testing as qt; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations m",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1166,log,logger,1166,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability,"admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0.dev0+3421bc5c; Numpy Version: 1.17.4; Scipy Version: 1.3.2; Cython Version: 0.29.14; Matplotlib Version: 3.1.1; Python Version: 3.8.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Tra",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1399,log,logger,1399,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"ate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7600,benchmark,benchmarking,7600,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['benchmark'],['benchmarking']
Testability,b Version: 3.1.1; Python Version: 3.8.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations m,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1751,log,logger,1751,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,bc5c; Numpy Version: 1.17.4; Scipy Version: 1.3.2; Cython Version: 0.29.14; Matplotlib Version: 3.1.1; Python Version: 3.8.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eige,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1666,log,logger,1666,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangli",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6671,test,tests,6671,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,e collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0.dev0+3421bc5c; Numpy Version: 1.17.4; Scipy Version: 1.3.2; Cython Version: 0.29.14; Matplotlib Version: 3.1.1; Python Version: 3.8.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency be,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1577,log,logger,1577,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"e fixtures at whatever level is appropriate. In this particular case, I scoped the `dimension` fixture at the module level, because there's loads of places that needed to test varying dimensions, and it's very convenient to define it just once. In the few cases where we needed to override that (e.g. in `dnorm`), I overrode it by providing a definition in a tighter scope - either at class level or per-function (via `pytest.mark.parametrize` directly). The correct scoping just depends a lot on the type of tests you're writing - if you're going to have to overwrite something constantly then module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files starting from those beginning with ""a"" up to (now) ""metrics"" while I was first getting to know the QuTiP codebase, and hopefully you can see that my early efforts weren't that great, and they get a bit better",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:1204,test,tests,1204,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['test'],['tests']
Testability,"e just dump out some information. ## Things you should know if you've not worked with segfaults before. - `Abort trap 6`, `Segmentation fault` and a few other points can all be from the same cause; - Segmentation faults are typically caused by reading or writing to memory that isn't owned by our process. These often occur by reading/writing too much data to an allocated pointer, or trying to read/write a memory location where the location was read from uninitialised memory.; - Segfaults will not always reliably occur. It's _very_ difficult to prove that swapping tools ""fixes"" a segfault; it can often just move around enough allocations to mask the problem, not fix it.; - Python stack traces are likely to be almost entirely unreliable in these cases, because the segfault may often occur while the garbage collector is running, and that will happen at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, wh",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:1248,test,test,1248,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['test'],['test']
Testability,"e; >; > -; >; >; > Leaving this blank line here makes the comments above it confusing.; > ------------------------------; >; > In qutip/superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768189423>:; >; > > # Find the SVD.; >; > U, S, V = svd(q_oper.full()); >; >; >; > # Truncate away the zero singular values, up to a threshold.; >; > - nonzero_idxs = S > thresh; >; > - dK = nonzero_idxs.sum(); >; > - U = U[:, nonzero_idxs]; >; > - S = sqrt(S[nonzero_idxs]); >; > +; >; > + dK = np.count_nonzero(S > thresh); >; >; > I'm just checking why this code was changed. Yes, svd returns the; > singular values in descending order, but what was wrong with previous code; > that didn't rely on that?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768191681>:; >; > > ***@***.***(scope=""function"", params=[; >; > + pytest.param(rand_super, id=""super""); >; > +]); >; > +def superoperator(request, dimension):; >; > + return request.param(dimension); >; >; > This is quite a strange function to read given that it could have just; > been:; >; > @pytest.fixture; >; > def superoperator(dimension):; >; > return rand_super(dimension); >; >; > Maybe there was a plan to do something more? Could we either add another; > param or use the simpler implementation?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768192756>:; >; > > + # FIXME: problem if Kraus index is implicitly; >; > + # ptraced!; >; >; > Could you explain the FIXME a bit more? Was this an existing issue? Can we; > just fix it?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1491#pullrequestreview-830847431>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AFTMVKGNCG4DDNE5NVOSMRTUQZ4STANCNFSM42RMIOQA>; > .; >. -- ; *φ*",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001:2978,test,tests,2978,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001,1,['test'],['tests']
Testability,"e=time_sense); > +; > + Rate_Qobj_list = [Qobj(; > + RateMat, dims=[[self.Hdim, self.Hdim], [; > + self.Hdim, self.Hdim]],; > + type=""super"",; > + superrep=""super"",; > + copy=False; > + ) for RateMat in RateDic.values()]; > + self.R0 = Rate_Qobj_list[0]; > +; > + self.Rt_timedep_pairs = []; >; > These self.Rt_timedep_pairs are never used?; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245667295>:; >; > > + floquet : bool,optional {False}; > + Whether to return the state in the floquet basis or laboratory; > + basis.; > +; > + args : dict,optional {None}; > + Not supported; > +; > + .. note::; > + The state must be initialized first by calling ``start`` or; > + ``run``. If ``run`` is called,``step`` will continue from the last; > + time and state obtained.; > + """"""; > + if args:; > + raise ValueError(; > + ""FMESolver cannot update arguments""); > + state = super().step(t); >; > Did you test this?; > I am pretty sure it would not work when time_sense=0.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245668542>:; >; > > + RateMat, dims=[[self.Hdim, self.Hdim], [; > + self.Hdim, self.Hdim]],; > + type=""super"",; > + superrep=""super"",; > + copy=False; > + ) for RateMat in RateDic.values()]; > + self.R0 = Rate_Qobj_list[0]; > +; > + self.Rt_timedep_pairs = []; > + for idx, key in enumerate(RateDic.keys()):; > + if key != 0.0:; > + self.Rt_timedep_pairs.append(list([Rate_Qobj_list[idx],; > + 'exp(1j*' + str(; > + key * list(Hargs.values())[0]); > + + '*t)'])); > + self.Rt_timedep_pairs = [list([Rate_Qobj_list[idx],; >; > This is defined twice...; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245675791>:; >; > > + time_sense=0,; > + quicksolve=False,; > + options=None):; > + """"""; > + Parameters; > + ----------; > +; > + H : :class:`Qobj`,",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:13289,test,test,13289,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['test'],['test']
Testability,"en module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files starting from those beginning with ""a"" up to (now) ""metrics"" while I was first getting to know the QuTiP codebase, and hopefully you can see that my early efforts weren't that great, and they get a bit better and easier to read as time went on. (The later files haven't been converted yet.) The main things are to always be thinking about readability both of the code and the error messages that are coming out, and making sure that your tests are really testing that your functions have your behaviour you want them to have. Another thing we really don't have enough of in QuTiP yet is tests for ""negative"" behaviour, i.e. testing that functions _fail_ when they're passed incorrect inputs - consequently, quite a lot of QuTiP actually will just silently do the wrong thing if it's passed nonsense.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:1959,test,testing,1959,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,6,['test'],"['testing', 'tests']"
Testability,enblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark; - ipyparallel; - unittest2pytest; - pytest-benchmark; - pytest-repeat; - pytest-subtests; - fastcore; - fastscript; - asttokens; - cached-property; - crayons; - executing; - flask; - humanize; - ipywidgets; - itsdangerous; - jsonpickle; - jupyter; - littleutils; - nbconvert; - outdated; - portpicker; - sqlalchemy; - widgetsnbextension; - nbdime; - rich; - mayavi; - pip:; - birdseye; - icecream; - nbdev==1.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:2689,test,testpath,2689,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,2,"['benchmark', 'test']","['benchmark', 'testpath']"
Testability,"es occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - th",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1831,mock,mock,1831,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['mock'],['mock']
Testability,"hon Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1523,log,logger,1523,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability,"icit `qutip.member` is good because it's clearly explicit at point of use which makes reading the code much easier, but bad because it adds unnecessary chaff which makes scanning lines take longer. I hadn't put much thought into it before, and I think I was just generally writing in my default style. #### Test ordering; I hadn't much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:1846,log,logic,1846,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,2,"['log', 'test']","['logic', 'tests']"
Testability,"ing clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a good amount of free time at the same time as a `qutip` release happened, and most of the maintainers took a break for a few weeks. Right now I'm a bit busier with work so my conversion rate has slowed a little. I'll probably be back on it in a week or so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:1339,test,tests,1339,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,2,"['log', 'test']","['log', 'tests']"
Testability,"ing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or `pytest -m ""mark logic""` (e.g. `pytest -m ""not slow""`) to hit specifically marked tests. Perhaps most powerfully, and one I use a lot when writing these, you can do `pytest -k ""substring logic""` to run every test (potentially in the specified file(s)) that contains the elements specified in `""substring logic""`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:2288,log,logical,2288,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,7,"['log', 'test']","['logic', 'logical', 'test', 'testing', 'tests']"
Testability,"ing logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:3290,test,tests,3290,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['test'],['tests']
Testability,"ission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6737,test,tests,6737,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"j.py:412: UserWarning: Multiplying superoperators with different representations; > > > warnings.warn(msg); > > > ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11496,test,tests,11496,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['tests']
Testability,just testing with simple decaying exponential one gets about 5% or so improvement compared to np functions and no difference with cmath,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/251#issuecomment-61603338:5,test,testing,5,https://qutip.org,https://github.com/qutip/qutip/pull/251#issuecomment-61603338,1,['test'],['testing']
Testability,"l Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0.dev0+3421bc5c; Numpy Version: 1.17.4; Scipy Version: 1.3.2; Cython Version: 0.29.14; Matplotlib Version: 3.1.1; Python Version: 3.8.0; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigen",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1485,log,logger,1485,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"ly by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. That's an extremely exciting prospect! I'd love to be able to have internal sparse data for Qobj's that represent Hamiltonians/Liouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with nump",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:3870,benchmark,benchmarking,3870,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['benchmark'],['benchmarking']
Testability,"m two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and density matrix ... ok; > > > expect: operator and ket ... ok; > > > expect: operator list and state ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constan",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:2976,test,test,2976,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['test']
Testability,"ming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>dot</code> method that act the same a sparse array's one. This is not needed.; * [x] The <code>dims</code> of the outp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1734,assert,assert,1734,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['assert'],['assert']
Testability,"mo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic os",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1433,log,logger,1433,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability,"modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time for cte` could be more explanatory. Similarly elsewhere. * I wonder whether instead `QobjEvo`, `Qobjt` could be even more intuitive for the user. * I would really encourage you to write one notebook (or more), about the new functionalities of the stochastic solvers, as well as the old methods. This could be the to-go resource, beyond documentation, to understand how these stochastic solvers are now expanded and coherently defined. It does not need to be a lot of work, it can copy a lot of stuff from the development notebooks. It would be fundamental to have the solvers' master equations written down, explaining for each solver what each term is, e.g., the jump operator. Also, in `development-smesolve-tests`, the equations are already there for example. Block 23 is beautiful, and it could be reproduced in the tutorial. . * Similarly, a user guide entry would really enhance the adoption of these solvers. At a later stage, some more refined example applications could be provided. * Review is still ongoing, I will provide comments on the .py files and other solvers files. Help from other developers is welcome as these are massive changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:3682,test,tests,3682,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['test'],['tests']
Testability,"n't put much thought into it before, and I think I was just generally writing in my default style. #### Test ordering; I hadn't much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or `pytest -m ""mark logic""` (e.g. `pytest -m ""not slow""`) to hit specifically marked tests. Perhaps most powerfully, and one I use a",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:2074,log,logic,2074,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['log'],['logic']
Testability,"n.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2197,log,logger,2197,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"ng 3LS emission corr., c_ops td (str-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concur",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6567,test,tests,6567,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + return total_R_tensor; > +; > +; > +def flimesolve(; > + H,; > + rho0,; > + taulist,; > + T,; > + Nt=None,; >; > There is no docstring entry for Nt.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245620508>:; >; > > + if isinstance(floquet_basis, FloquetBasis):; > + self.floquet_basis = floquet_basis; > + else:; > + raise TypeError(; > + ""The ``floquet_basis`` must be a FloquetBasis""); >; > Check done twice; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245632475>:; >; > > + Rate_Qobj_list = [Qobj(; > + RateMat, dims=[[self.Hdim, self.Hdim], [; > + self.Hdim, self.Hdim]],; >; > You go the Hdim from the shape, not the dimension. dims has the; > information about subsystem, shape does not. This should make test fail if; > there where some.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245632794>:; >; > > + c_ops = []; > + c_op_rates = []; > + for entry in c_ops_and_rates:; > + c_ops.append(entry[0]); > + c_op_rates.append(entry[1]); >; > Small trick:; > ⬇️ Suggested change; >; > - c_ops = []; > - c_op_rates = []; > - for entry in c_ops_and_rates:; > - c_ops.append(entry[0]); > - c_op_rates.append(entry[1]); > + c_ops, c_op_rates = zip(*c_ops_and_rates); >; > or do the check here while you are looping over all elements.; > ⬇️ Suggested change; >; > - c_ops = []; > - c_op_rates = []; > - for entry in c_ops_and_rates:; > - c_ops.append(entry[0]); > - c_op_rates.append(entry[1]); > + c_ops = []; > + c_op_rates = []; > + for c_op, rate in c_ops_and_rates:; > + if not isinstance(c_op, Qobj):; > + raise TypeError(""c_ops must be type Qobj""); > + c_ops.append(c_op); > + c_op_rates.append(rate); >; > ------------------------",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:9403,test,test,9403,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['test'],['test']
Testability,"ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6855,test,tests,6855,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"or instance, if we start from the most excited state for N = 2,; >; > Here where you give an example you could use the; >; > Example; > -----------; >; > heading. It formats nicely in the docs; > see:; > http://qutip.org/docs/latest/apidoc/functions.html#quantum-states; > file qutip.states.py; > for example; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168800674>:; >; > > + -------; > + identity: Qobj matrix (QuTiP class); > + With the correct dimensions (dims); > + """"""; > + N = int(N); > + rho = np.zeros((2**N, 2**N)); > + for i in range(0, 2**N):; > + rho[i, i] = 1; > +; > + spin_dim = [2 for i in range(0, N)]; > + spins_dims = list((spin_dim, spin_dim)); > + identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:7462,test,tests,7462,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['test'],['tests']
Testability,"or: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjPower; assert_equal(all(q3.data.todense() - matrix(data) *_ 3), 0); File ""/usr/lib/python2.7/dist-packages/numpy/testing/utils.py"", line 317, in assert_equal; raise AssertionError(msg); AssertionError: ; Items are not equal:; ACTUAL: True; DESIRED: 0. ---. Ran 221 tests in 256.712s. FAILED (SKIP=1, errors=1, failures=1)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:12182,test,test,12182,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,6,['test'],"['test', 'testing', 'tests']"
Testability,"qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic os",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2018,log,logger,2018,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"r convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2288,log,logger,2288,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"r: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjPower; assert_equal(all(q3.data.todense() - matrix(data) *_ 3), 0); File """,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11699,test,test,11699,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['test']
Testability,"rer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does /not/ depend on the truncation ; > parameter. Specifically, the upper-left portion of the matrix that ; > |qutip.squeeze| outputs converges to my |squeeze| function for large |n|.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661>, or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqdPPw6WOAYMpYw_kA9pRxVhgVyxIks5rlYF9gaJpZM4MbmLX>.; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284316:1689,log,log,1689,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284316,2,['log'],['log']
Testability,"rmat) ... ok; correlation: comparing TLS emission corr., H td (fn td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (str-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6462,test,tests,6462,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"s to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Total run time: 0.90s; Total run time: 1.13s; Total run time: 1.15s; Total run time: 1.41s; Total run time: 1.66s; Total run time: 2.03s; Total run time: 2.47s; {'solver': 'pc-euler'}; Total run time: 0.38s; Total run time: 0.46s; Total run time: 0.58s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.00s; Total run time: 1.26s; Total run time: 1.49s; {'solver': 'milstein'}; Total run time: 0.31s; Total run time: 0.39s; Total run time: 0.46s; Total run time: 0.56s; Total run time: 0.70s; Total run time: 0.84s; Total run time: 1.05s; Total run time: 1.24s; {'solver': 'milstein-imp'}; Total run time: 1.69s; Total run time: 2.10s; Total run time: 2.48s; Total run time: 2.96s; Total run time: 3.62s; Total run tim",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:1684,benchmark,benchmarking,1684,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['benchmark'],['benchmarking']
Testability,"sis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit short-sighted. We can define, for example, `Space.__eq__` as; ```python; class Space:; def __eq__(self, other):; return (; self is other; or (; isinstance(other, Space); and self.size == other.size; and self.basis == other.basis; ); ); ```; so we'll almost invariably get the benefits right now, but we're rather more future-proof in the code. By analogy, it's clearly wrong to do `(1, 2) is (1, 2)` to compare tuples, even though `tuple` produces singletons in CPython (and that code will generally be `True`). The Python `tuple` class is basically what inspired me, and I'm 100% certain that the Python devs are smarter than I am, so we should probab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:2921,test,test,2921,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,3,"['log', 'test']","['logic', 'test']"
Testability,"sorption spectra to test which Drude-Lorentz bath is correct. Also, one can use [DM-HEOM](https://github.com/noma/dm-heom) [2], where they have implemented the ""Shifted Drude Lorentz Bath"" [1]. Compared with their Matsubara implementation, it gives the same density matrix evolution (up to the numerical accuracy) as QuTiP's HEOM gives with `DrudeLorentzBath` and $\gamma \rightarrow \gamma \pm \Omega$ and $\lambda \rightarrow \lambda/2$. But it is not the case for `DrudeLorentzPadeBath`. You are right to think that the unphysical part goes away when two baths are added [1], one with $+i\Omega$ and the other with $-i\Omega$. > However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. You are very much in the right to be absolutely sure before making a change. As far as I understand and have tested, it will not change the real case because the changes are as follows (I have removed all the other lines in between for clarity):. ```python; - ck_real = [np.real(eta) for eta in eta_p]; + ck_real = [eta for eta in eta_p]. - ck_imag = [np.imag(eta_p[0])]; + ck_imag = [-lam*gamma]. - eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0) - 1.0j)]; + eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0))]; ```; if `gamma` is real, `lam * gamma * self._cot(gamma * beta / 2.0)` would be real, and hence `ck_real` would stay the same as before, and the same can be said for `ck_imag`. After all, this is how it is done for `DrudeLorentzBath`, so it should not impact anything. > A more ""complete"" and probably more efficient solution would be to add a whole new ShiftedDrudeLorentzBath, and to put in analytically derived formulas for the Matsubara / Pade expansion coefficients. (As a first step, you could also calculate these coefficients manually and create a BosonicBath object from them directly.). This is what I have been using locally. I",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274:1594,test,tested,1594,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274,1,['test'],['tested']
Testability,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2428,test,test,2428,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,9,['test'],"['test', 'test-run-completion', 'testing', 'tests']"
Testability,stalled: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; b,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1841,log,logger,1841,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,"started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another con",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1618,log,logic,1618,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,2,"['log', 'test']","['logic', 'tests']"
Testability,"t; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; b",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1256,log,logger,1256,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability,"th policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with li",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2667,test,tests,2667,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"the quick response @bencbartlett. . Feel free to ignore the comments regarding the shortening of arguments. That was just a suggestion to make things shorter. But as you said clarity is more important. I will not change `waveguide` to `wg` and I think you should leave the others as they are if you can't think of shorter ones. Same applies to the `temporal_basis_vector`. I think you can even add a `temporal_basis` as you mentioned. Regarding the double line breaks wrapping top-level functions, I know the pep8 standard is two newlines but some other QuTiP modules follow just a single line break, e.g., [floquet](https://github.com/qutip/qutip/blob/master/qutip/floquet.py). But again some other modules in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance impro",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:989,test,test,989,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,1,['test'],['test']
Testability,"tip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1447,test,test,1447,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['test'],['test']
Testability,"torial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes than the number of available slots.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1732,test,tests,1732,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,3,"['log', 'test']","['logical', 'test', 'tests']"
Testability,"ts calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the array[1, 10, 11]? ...; > ; > At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response.; > ; > Cheers,; > Qi; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:2196,test,test,2196,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['test'],['test']
Testability,"uperop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768188147>:; >; > > # Remember the shape of the underlying space,; >; > # as we'll need this to make Kraus operators later.; >; > - dL, dR = map(int, map(sqrt, q_oper.shape)); >; > + from math import ceil; >; > +; >; >; > ⬇️ Suggested change; >; > -; >; >; > Leaving this blank line here makes the comments above it confusing.; > ------------------------------; >; > In qutip/superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768189423>:; >; > > # Find the SVD.; >; > U, S, V = svd(q_oper.full()); >; >; >; > # Truncate away the zero singular values, up to a threshold.; >; > - nonzero_idxs = S > thresh; >; > - dK = nonzero_idxs.sum(); >; > - U = U[:, nonzero_idxs]; >; > - S = sqrt(S[nonzero_idxs]); >; > +; >; > + dK = np.count_nonzero(S > thresh); >; >; > I'm just checking why this code was changed. Yes, svd returns the; > singular values in descending order, but what was wrong with previous code; > that didn't rely on that?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768191681>:; >; > > ***@***.***(scope=""function"", params=[; >; > + pytest.param(rand_super, id=""super""); >; > +]); >; > +def superoperator(request, dimension):; >; > + return request.param(dimension); >; >; > This is quite a strange function to read given that it could have just; > been:; >; > @pytest.fixture; >; > def superoperator(dimension):; >; > return rand_super(dimension); >; >; > Maybe there was a plan to do something more? Could we either add another; > param or use the simpler implementation?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768192756>:; >; > > + # FIXME: problem if Kraus index is implicitly; >; > + # ptraced!; >; >; > Could you explain the FIXME a bit more? Was this an existing issue? Can we; > just fix it?; >; > —; > ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001:2337,test,tests,2337,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001,1,['test'],['tests']
Testability,"verting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjP",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11624,test,test,11624,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['test']
Testability,"y.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a totally fair test, and simply replicate the full functionality of `qutip.displace` (including creating a `Qobj` at the end), my method is ~4x faster on small matrices (`1 <= dim <= 20`) and it only goes up from there (I found it's about ~10x faster at `dim = 1000`, and beyond that `qutip.displace` is too slow to bother). If I store the calculation of the eigensystem, and output an `ndarray` instead of converting to `csr_matrix` (and so don't produce a `Qobj`), then I find speed ups in getting the operator for a new `alpha` as ~100x for small matrices and ~25x for large ones. The larger a matrix is, the more the computational time is dominated by the dense dot product at the end. Code:; ```python; class Displacer:; def __init__(self, n):; # The off-diagonal of the real-symmetric similar matrix T.; sym = (2*(np.arange(1, n)%2) - 1) * np.sqrt(np.arange(1, n)); # Solve the eigensystem.; self.evals, self.evecs = scipy.linalg.eigh_tridiagonal(np.zeros(n), sym); self.range = np.arange(n); self.t_scale = 1j**(self.range % ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:2369,test,test,2369,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['test'],['test']
Testability,ycler; - cython; - dbus; - decorator; - defusedxml; - docutils; - entrypoints; - expat; - fastcache; - flake8; - fontconfig; - freetype; - fribidi; - gast; - gettext; - glib; - gmp; - gmpy2; - graphite2; - grpcio; - gsl; - h5py; - harfbuzz; - hdf5; - html5lib; - icu; - idna; - imagesize; - intel-openmp; - ipykernel; - ipython; - ipython_genutils; - isort; - jbig; - jedi; - jinja2; - jpeg; - jsonschema; - jupyter_client; - jupyter_contrib_core; - jupyter_contrib_nbextensions; - jupyter_core; - jupyter_highlight_selected_word; - jupyter_latex_envs; - jupyter_nbextensions_configurator; - keras-applications; - keras-preprocessing; - keyring; - krb5; - lazy-object-proxy; - libcurl; - libcxx; - libcxxabi; - libedit; - libffi; - libgcc; - libgfortran; - libiconv; - libopenblas; - libpng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-ser,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:1460,mock,mock,1460,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['mock'],['mock']
Usability," Currently it is used in the following files. Can we put the multiprocessing stuff in a file called `multiprocessing_config.py` and run it to get the settings in `__init__` at all the places where we need multiprocessing.; ```; /Users/shahnawaz/dev/qutip/qutip/__init__.py:; 33 from __future__ import division, print_function, absolute_import; 34 import os; 35: # Fix the multiprocessing issue with NumPy compiled against OPENBLAS; 36 if 'OPENBLAS_MAIN_FREE' not in os.environ:; 37 os.environ['OPENBLAS_MAIN_FREE'] = '1'; ..; 149 # cpu/process configuration; 150 #; 151: import multiprocessing; 152 ; 153 # Check if environ flag for qutip processes is set; ...; 164 qutip.settings.num_cpus = info['cpus']; 165 else:; 166: qutip.settings.num_cpus = multiprocessing.cpu_count(); 167 ; 168 ; ...; 270 # Clean name space; 271 #; 272: del os, sys, numpy, scipy, multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_count()); 94 return {'os': 'Windows', 'cpus': ncpus}; 95 . /Users/shahnawaz/dev/qutip/qutip/mcsolve.py:; 225 if config.options.num_cpus == 1:; 226 # fallback on serial_map if num_cpu == 1, since there is no; 227: # benefit of starting multiprocessing in this case; 228 config.map_func = serial_map; 229 ; ...; 264 time_type, h_stuff, c_stuff = _td_format_check(H, c_ops, 'mc'); 265 c_terms = len(c_stuff[0]) + len(c_stuff[1]) + len(c_stuff[2]); 266: # set time",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:1511,simpl,simply,1511,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['simpl'],['simply']
Usability," Fixed the issues in correlation.py, as far as I know; - Turns out the issue here was that I never updated correlation.py to; my most current version, which should only add in flimesolve as an option; for solvers (with an if statement or two to get the Hamiltonian into a; FloquetBasis object if flimesolve is the selected solver). Thanks again for your feedback!. On Mon, Jun 26, 2023 at 6:32 PM Fenton Clawson ***@***.***> wrote:. > Hey Eric,; >; > Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Something is strange in floquet.py, did you include change not meant to; >> be here?; >> Both floquet.py and flimesolve.py have the original fmesolve and the new; >> flimesolve...; >>; >> Tests should pass.; >> Right now, scipy 1.11 breaks cvxpy which we use so this breaks a few; >> tests, but the changes you made to correlation.py also break the tests.; >> We will want tests for the new solver.; >>; >> Could you also review the style (pep8).; >>; >> - There are some very long line, we use the official 80 characters; >> width.; >> - space are not uniform, sometime they are doubled, other time; >> missing.; >> - There are rules for empty lines, there ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:1809,simpl,simply,1809,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,1,['simpl'],['simply']
Usability," Monte-carlo: Time-dependent H (func format) ... ok; > > > Monte-carlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementation",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5371,simpl,simple,5371,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability," a bit silly that I haven't yet, since one thing that was frustrating me previously was not understanding what was trying to be done! I think as time goes by I'm getting a bit better about being clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a good amount of free time at the same time as a `qutip` release h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:1027,learn,learning,1027,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['learn'],['learning']
Usability," excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand 2 to N (using swap) ... ok; gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; gates: expand 3 to 3 with permuTation (using toffoli) ... ok; gates: swap gate ... ok; qutip.tests.test_gates.TestGates.test_are_cliffords ... ok; qutip.tests.test_gates.TestGates.test_clifford_group_len ... ok; Graph: Graph Degree ... ok; Graph: Breadth-First Search ... ok; Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:9091,simpl,simple,9091,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['simpl'],['simple']
Usability," for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2263,simpl,simple,2263,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['simpl'],['simple']
Usability," like it might have gone bad. I'll add in some tests once I fix the merge, as well. I'll look into the diag method and try to move everything over to separate; everything as you described. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > -------------",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:1050,guid,guide,1050,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,1,['guid'],['guide']
Usability," of `__qutip_qobj_interface__`, as in the conversion it might be necessary to copy anyway so the downstream implementor is responsible for taking care of the copy if requested. ```python; class QobjMetaclass(type):; def __call__(cls, inpt=None, dims=None, shape=None,; type=None, isherm=None, copy=True,; fast=False, superrep=None, isunitary=None):. if isinstance(inpt, Qobj):; pass; elif hasattr(inpt, ""__qutip_qobj_interface__""):; inpt_data = inpt.__qutip_qobj_interface__(copy=copy). inpt = inpt_data['matrix']; dims = inpt_data['dims']; copy = False. obj = cls.__new__(cls, inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); obj.__init__(inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); return obj. class Qobj(object, metaclass=QobjMetaclass):; ...; ```; I'm quite sure this implementation can be improved, however. On the NetKet side, the implementation is very simple. At the moment we only support operators from H->H.; ```python; class AbstractOperator:; ... ; def __qutip_qobj_interface__(self, dims, copy=True):; return {'matrix': stacked_rows_to_stacked_cols(self.hilbert, self.to_sparse()),; 'dims': [list(self.hilbert.shape), list(self.hilbert.shape)]}; ```. This already is quite nice and allows for quick and simple interoperability. Some comments/questions:; - Qutip uses stacked columns (column major) ordering for the tensor products, as opposed to NumPy `kron` ordering that is stacked rows, right? ; - To signal that an object is a super-operator (Liouvillian) is it sufficient to pass a correctly constructed `dims` or I should also provide `superrep`?; - Is there a reason you don't accept tuples as inputs to `basis(dims, x)` and other similar functions, but only lists? ; - I played around with auto-converting input hamiltonians and jump operators in `qutip.sesolve` and `mesolve` to `Qobj` if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601:1661,simpl,simple,1661,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601,1,['simpl'],['simple']
Usability," place:; ```python; >>> import qutip; >>> import numpy as np; >>> np.array(qutip.qeye(2)); array([[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]); >>> np.array([qutip.qeye(2), qutip.qeye(2)]) # Not ideal, but not our fault.; array([[[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]],. [[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]]); >>> np.sin(qutip.qeye(2)); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); >>> np.sin(np.array(qutip.qeye(2))); array([[0.84147098+0.j, 0. +0.j],; [0. +0.j, 0.84147098+0.j]]); ```; Alternatively, if people _really_ want to be able to use ufuncs on `Qobj`, it is possible to define `__array_ufunc__` in such a way that we allow only some `ufuncs` to operate. Doing this leaves us susceptible to problems interacting with other libraries that implement this, though, beacuse whichever class has the highest `__array_priority__` gets to dictate what makes sense. Unless there's a really clear _need_ for this, I don't think it's a good idea. For completeness, the rest of this comment is stuff I find out while researching. ## The `__array__()` and `__array_wrap__()` methods. These have been special methods understood by numpy since at least 1.3 (2009 - the oldest docs still on scipy.org), and I imagine long before then too. `__array__` is mentioned (and still is) in the documentation of `np.array`, which is unchanged since 2009 and says that its argument should be; > An array, any object exposing the array interface, an object whose `__array__` method returns an array, or any (nested) sequence. and `__array_wrap__` is like the reverse - it's for coercing numpy arrays back into this class. If we were to keep `__array__` in `Qobj`, we should also implement `__array_wrap__` for coercion back (something that isn't currently implemented). At the time and up to inclusively 1.19, the presence of `__array__` caused otherwise scalar types passed alone to `np.array` to return the output of `inp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:2670,clear,clear,2670,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['clear'],['clear']
Usability,"### New changelog. #### <code>test_krylovsolve.py</code>. * [x] We have <code>qutip.rand_herm</code> for a random hamiltonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:644,simpl,simply,644,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['simpl'],['simply']
Usability,". If it was only kwargs the implementation could be more terse. I assumed that the `copy` argument gets passed as part of `__qutip_qobj_interface__`, as in the conversion it might be necessary to copy anyway so the downstream implementor is responsible for taking care of the copy if requested. ```python; class QobjMetaclass(type):; def __call__(cls, inpt=None, dims=None, shape=None,; type=None, isherm=None, copy=True,; fast=False, superrep=None, isunitary=None):. if isinstance(inpt, Qobj):; pass; elif hasattr(inpt, ""__qutip_qobj_interface__""):; inpt_data = inpt.__qutip_qobj_interface__(copy=copy). inpt = inpt_data['matrix']; dims = inpt_data['dims']; copy = False. obj = cls.__new__(cls, inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); obj.__init__(inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); return obj. class Qobj(object, metaclass=QobjMetaclass):; ...; ```; I'm quite sure this implementation can be improved, however. On the NetKet side, the implementation is very simple. At the moment we only support operators from H->H.; ```python; class AbstractOperator:; ... ; def __qutip_qobj_interface__(self, dims, copy=True):; return {'matrix': stacked_rows_to_stacked_cols(self.hilbert, self.to_sparse()),; 'dims': [list(self.hilbert.shape), list(self.hilbert.shape)]}; ```. This already is quite nice and allows for quick and simple interoperability. Some comments/questions:; - Qutip uses stacked columns (column major) ordering for the tensor products, as opposed to NumPy `kron` ordering that is stacked rows, right? ; - To signal that an object is a super-operator (Liouvillian) is it sufficient to pass a correctly constructed `dims` or I should also provide `superrep`?; - Is there a reason you don't accept tuples as inputs to `basis(dims, x)` and other similar functions, but only lists? ; - I played around with auto-converting input hamiltonians and jump operators in `qutip.sesolve` and `mesolve` to `Qobj` if they are not Qobj but suppor",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601:1304,simpl,simple,1304,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601,1,['simpl'],['simple']
Usability,".36s; Total run time: 5.51s; Total run time: 6.58s; Total run time: 9.64s; Total run time: 10.74s; Total run time: 12.29s; {'solver': 'pc-euler-2'}; Total run time: 1.54s; Total run time: 1.86s; Total run time: 2.50s; Total run time: 2.79s; Total run time: 3.36s; Total run time: 4.03s; Total run time: 4.98s; Total run time: 6.56s; {'solver': 'explicit1.5'}; Total run time: 5.28s; Total run time: 6.35s; Total run time: 7.74s; Total run time: 8.99s; Total run time: 10.34s; Total run time: 12.41s; Total run time: 15.40s; Total run time: 21.40s; {'solver': 'taylor1.5'}; Total run time: 3.30s; Total run time: 3.85s; Total run time: 4.52s; Total run time: 5.63s; Total run time: 7.22s; Total run time: 8.72s; Total run time: 9.51s; Total run time: 11.84s; {'solver': 'taylor1.5-imp'}; Total run time: 5.43s; Total run time: 6.81s; Total run time: 7.60s; Total run time: 10.05s; Total run time: 11.88s; Total run time: 12.88s; Total run time: 15.63s; Total run time: 22.31s. ```; ; **Minor issue: plots breaking notebook rendering**; Jupyter Notebooks have a broken rendering when cells with plots are run; refreshing the notebook sometimes works fine. This is sometimes fixed in the first place by adding; ```; plt.show(); plt.close(); ```; but not always. Maybe we can have a look at this minor issue in the development notebooks. . **Documentation**; It would really increase the adoption rate if the API doc and User Guide could be updated to highlight the stochastic solvers and new methods. The development notebooks are so well written that drawing from their examples should be simple. . Congratulations @Ericgig for this refurbishment, improvement, optimization and thorough benchmarking investigations of the stochastic solvers, which I hope will be widely tested by @nwlambert @ajgpitch @quantshah (and @fminga) for robustness once merged in the development master branch. I am merging this and the montecarlo split PR, hoping there are no incompatibility issues (#990 --> #991 --> #969).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:6169,simpl,simple,6169,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,1,['simpl'],['simple']
Usability,"1. Adding a new data type is a large undertaking which will likely be very infrequent, so it's perhaps not so sensible to optimise in favour of making this especially simple. More likely is that new operations will be added to the data layer more frequently (e.g. you found that you wanted specific things for `CQobjEvo`), and this format makes _those_ PRs much easier to review. But mostly, because organising by file type is ok when all operations are like `matmul(CSR, CSR) -> CSR`, but which file should the operation `matmul(CSR, Dense) -> COO` go into? Much easier to find what you're looking for if all `matmul` functions are together, and then setting up the dispatcher will be the last item in the `matmul` file. It also means the files stay a bit smaller and easier to manage within themselves - you're less likely to ""lose"" code when each module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:167,simpl,simple,167,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['simpl'],['simple']
Usability,"5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:12051,simpl,simply,12051,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['simpl'],['simply']
Usability,; - libgfortran; - libiconv; - libopenblas; - libpng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:2197,learn,learn,2197,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['learn'],['learn']
Usability,"> * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:100,guid,guide,100,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,1,['guid'],['guide']
Usability,"> * What is the reason that the time-dependent weights are still part of the trajectory result? That seems a bit inconsistent to me and I wonder if the `TrajectoryResult` class could perhaps just be removed?. The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I will look into it this week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851:510,simpl,simplify,510,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851,1,['simpl'],['simplify']
Usability,"> + if (N < 1):; > + raise ValueError(""Number of TLS should be non-negative""); > +; > + nds = (N / 2 + 1)**2 - (N % 2) / 4; > + return int(nds); > +; > +; >; > pep8: single line space between funcs; > Lots of other examples in this file; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168809572>:; >; > > + g8 = self.gamma8(jmm1_8); > + c8 = jmm1_inv[jmm1_8]; > +; > + lindblad_row.append(int(r)); > + lindblad_col.append(int(c8)); > + lindblad_data.append(g8); > +; > + if jmm1_9 in jmm1_inv:; > + g9 = self.gamma9(jmm1_9); > + c9 = jmm1_inv[jmm1_9]; > +; > + lindblad_row.append(int(r)); > + lindblad_col.append(int(c9)); > + lindblad_data.append(g9); > +; > + cdef lindblad_matrix = csr_matrix((lindblad_data, (lindblad_row, lindblad_col)),; >; > pep8: line character overrun here (max 79 chars per line); > A few other examples in this file too; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168811435>:; >; > > + """"""; > + cdef float j, m, m1; > + j, m, m1 = jmm1; > +; > + cdef float yP; > + cdef float N; > + N = float(self.N); > +; > + cdef complex g7; > +; > + yP = self.pumping; > +; > + if (yP == 0) or (j <= 0):; > + g7 = 0.0; > + else:; > + g7 = yP / 2 * np.sqrt((j - m - 1) * (j - m) * (j - m1 - 1) * (j - m1)) * (N / 2 + j + 1) / (j * (2 * j + 1)); >; > You could probably shorten this line by removing what I would consider; > some unnecessary spaces, e.g.; >; > (N/2 + j + 1) / (j*(2*j + 1)); >; > Not everyone agrees on this kind of thing though. I suggest whatever you; > think looks most clear in terms of precedence; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/753#pullrequestreview-97200601>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AN5ffBfQ4ecfHwcSs6wWmQ4ZphhDhNUqks5tVbPRgaJpZM4PgbIo>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:12643,clear,clear,12643,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['clear'],['clear']
Usability,"> > I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ?; > ; > Maybe, but I find teleportation already a very short circuit, isn't it?; > ; > > Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ?; > ; > Yes, if we have n qubit measurements, we will have 2^n possible final state. One can calculate the state for each of them along with its probability and then get the exact statistics. I have changed the run_statistics function to now do this method in place of running it a number of times. This solves the problem of slow testing of the function as well !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730645:63,simpl,simple,63,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730645,2,['simpl'],"['simple', 'simpler']"
Usability,"> > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5566,simpl,simple,5566,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"> > Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed.; > ; > Good point! I did not consider that initially. For this case, since it is not possible to define a single arc but rather there are infinite possibilities, I would suggest to simply raise an exception. What do you think @gaurav-iiser ?. Yes, I think raising an exception is a good idea. > ; > > So, is it okay if I take your code above, modify it for the general scenario, make changes to the add_arc, and push it again?; > ; > I think there is an option somewhere to make someone a coauthor of the code, but do not worry about that, it is not necessary here. You can either push the changes to this pull request or, since this will require significant changes to the code, you could create a new one. I personally prefer creating a new PR since it leaves a cleaner commit history, but both are fine. Thanks again for your advice. :); I will probably create a new PR in a day or two by making respective changes to `add_arc`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937583899:397,simpl,simply,397,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937583899,1,['simpl'],['simply']
Usability,"> @Ericgig Tests added for the type changes.; > ; > Note that `QobjEvo.__rmatmul__` is not currently callable. Calling `qobj @ qevo` will call `QobjEvo.__matmul__(qobj, qevo)` first, which will return the result. If I am not missing a case where `__rmatmul__` is called, I vote that we simply delete the implementation of `__rmatmul__` (in a separate PR). @Ericgig Explained that in Cython 3 `__rmatmul__` will be called, so we can keep it for now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1152371837:286,simpl,simply,286,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1152371837,1,['simpl'],['simply']
Usability,"> @cgranade I'm really liking the overall look of the Instrument class -- it's a much easier way to deal with measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. Thank you for the kind words!. > I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:; > ; > * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; > * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is id",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:294,feedback,feedback,294,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['feedback'],['feedback']
Usability,"> @cgranade When we initially talked about this, we also spoke about storing Kraus superoperators with it, but it's not completely clear to me whether this route covers that case. ""No"" is fine (we don't have to make this work for everything) but if the answer is ""Yes"" or ""Maybe"", what would that look like?. At the moment, no. Following our discussion, it sounded like separating the two features may make the most sense such that I wanted to focus first on representing instruments. > > I've played around with using if_ to compute the noisy channel one gets for state teleportation when operations are perfect but classical outcomes get scrambled; would that be useful, perhaps?; > ; > That sounds like a great example!. Awesome, I'll go add that as a draft PR to the notebooks repo, then, so as to develop both in parallel. > > Fair enough, easy to drop that as well. Would you want everything dropped, or would some things like the core type QInstrument itself be reasonable to keep in qutip.**all**; > ; > Let's keep QInstrument in since that feels at the same level as Qobj and QobjEvo and we can think about other things on a case by case basis (and see what v5 is doing). Sounds good, will do!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951361876:131,clear,clear,131,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951361876,1,['clear'],['clear']
Usability,"> A possible addition could be to check the trace condition of the steady-state solution and throw a warning if it is violated more than some epsilon. But for now, everything looks good. @davidschlegel That's a good idea, so I added some assertions to all the tests where it was simple to do so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1802#issuecomment-1035153689:279,simpl,simple,279,https://qutip.org,https://github.com/qutip/qutip/pull/1802#issuecomment-1035153689,1,['simpl'],['simple']
Usability,> Any new progress on this? The API doc is generated successfully. Although it would be nice to have more detailed description to each functions.; > ; > The rendered user guide now reads like ![image](https://private-user-images.githubusercontent.com/12125783/337660051-e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjAwNTEtZTRmYTNkMGEtY2E1YS00MGU3LWFiNWItMjgzYzMwZjBkZTA3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk5YmExMTE2NGZhZmFmZWZiYjQ2YTU0ZTlmOWNmZDg1MzI5NWQyM2UxNWIzNDUwYWYwOTdjNmZhYzU2ZDBlZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.c_jkyvIGwDUsmTXLIAr5LI0-u2IhfVNWo2orjBvElfk) with names as strings.; > ; > It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians; > ; > ![image](https://private-user-images.githubusercontent.com/12125783/337661271-ad856f69-e0f2-49a2-9ab0-f88e84444373.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjEyNzEtYWQ4NTZmNjktZTBmMi00OWEyLTlhYjAtZjg4ZTg0NDQ0MzczLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTAzYTljNGFhMDMxY2RkNmU1ZWRiZjk1YzNkODllNjdjOTlkNDIxMDBhNDgxOTI0MWEyNmFlZjM1MTZjY2I5NTkmWC1BbXotU2lnbmVk,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051:171,guid,guide,171,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051,1,['guid'],['guide']
Usability,"> Consider what you're doing from a statistical sense here. If everything works correctly, then you're effectively trying a two-tail hypothesis test that your test binomial distribution has a probability of 0.25, given you made `n` observations of it. The analytic success rate of your test is then; > ; > ```python; > import scipy.stats; > def success(n, p, tol):; > dist = scipy.stats.binom(n, p); > return dist.cdf(n * (p+tol)) - dist.cdf(n * (p-tol)); > ```; > ; > where `success(4096, 0.25, 0.02)` is 99.67%. Since there are 5 independent runs on Travis, that's equivalent to a failure rate of 1.6% on every single CI run, which is several orders of magnitude too high. It's probably just luck that it was Python 3.8 on both occasions - it's a one-in-five chance that in two failing CI runs, it was the same setup both times.; > ; > You have to consider what is most appropriate to fix the test, and what you can reasonably test in ~1 second of runtime. You don't want to increase the tolerance too much, because then you can get a lot of false positives even if something is broken.; > ; > If you can bump the number of runs up to 100,000 and set the tolerance at 0.01, you'll have a per-test failure rate of ~3e-13, which is more like what we'd want. If you keep it at 4096, the tolerance should be more like 0.05 (which is pretty big tbh). Thanks for the excellent analysis. I don't think it's feasible to do 100,000 given the current. efficiency. It did give me incentive to make it somewhat faster. What is a good guideline for the maximum time a test can take. It seems like I can maybe do 150 runs in ~ 1s. In any case, it doesnt seem feasible to do even 4096 claims without taking quite a bit of time. Any ideas on how to structure the test differently ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689:1524,guid,guideline,1524,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689,1,['guid'],['guideline']
Usability,"> Does this entail any extra steps not encompassed in the contributing guidelines, or is it just a matter of branching from and PRing to `dev.major` instead of `master`?. Just branching from and PRing to `dev.major` -- the contribution guidelines are the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1893#issuecomment-1147245506:71,guid,guidelines,71,https://qutip.org,https://github.com/qutip/qutip/issues/1893#issuecomment-1147245506,2,['guid'],['guidelines']
Usability,"> General comment about plotting on the Bloch sphere:; > ; > QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are _not_ required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix.; > ; > There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested.; > ; > I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now.; > ; > I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling.; > ; > My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though. Thanks a lot, Simon (@hodgestar). My modification to the bloch.py follows what you have suggested. ; Also, the code can plot arcs inside and outside the bloch sphere too, and the line segment can be drawn between any two points. And the inputs have to be in cartesian coordinates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018:885,intuit,intuitive,885,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018,1,['intuit'],['intuitive']
Usability,"> Here are some tests of the proposed modifications. Thank you! I actually meant ""unit tests"" -- as in, adding the tests to `qutip/tests/test_steadystate.py`. It's also not clear to me from your examples how we should see the difference. > This may change the final steady state in some circumstances, but I could not rapidly find a situation where this is actually important. In this example, the two steady states are the same even though the weights are very different. I agree it would be good for the sparse and dense algorithms to align where its sensible to, but it's a bit tricky to evaluate the code if we don't have a concrete idea of the kind of situation in which the new code should be better (and in which situations it might be worse). > The current version gives:; > ; > ```; > Ldense = L.data.todense(); > Ldense[0, :] = np.diag(weight*np.ones(n)).reshape((1, n ** 2)); > np.linalg.solve(Ldense, b); > >> array([0.+0.j, 0.-0.j, 0.-0.j, 1.+0.j]); > ```; > ; > The proposed modification gives:; > ; > ```; > Ldense = L.data.todense(); > Ldense[0, :] += np.diag(weight*np.ones(n)).reshape((1, n ** 2)); > np.linalg.solve(Ldense, b); > >> array([1.e-16+0.j, 0.e+00-0.j, 0.e+00-0.j, 1.e+00+0.j]); > ```; >; > This is a better result than the one obtained with the current version. I can't see any difference between the old and new results other than that the floating point numbers are formatted a bit differently? Perhaps I am missing something.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-988058511:173,clear,clear,173,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-988058511,1,['clear'],['clear']
Usability,"> Hmmm... 4000/150~25 second. That's not very short actually. The total time for a whole round of qutip CI test costs 15min~20min on Travis.; > ; > Just ideas. Tests here seem to be two-folded:; > ; > * Test classical controlled gates in a circuit; > * Test the measurement functions; > ; > So maybe we can split it. The teleportation circuit test can be done without measurement. Just check the final state tracing out the ancillary qubits. The test for measurement can probably be done for single or two `Qobj` along without circuit. But `run_circuit_statistics`... Probably we then only need to check if the number of elements in the result is correct after some 50 runs?; > ; > On a different matter, I'm wondering if running the statistics takes so long, for such a small teleportation circuit, is it still advantageous in any case? Since we are doing simulation and have the full quantum state, one can actually calculate all 4 possible final states, classically mix them into a density matrix with the corresponding measurement probability and calculate the exact statistics distribution. I doubt that will be slower than 25s, although coding will be harder I suppose. I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ? . Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ? Seems like a decent idea !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640107253:1235,simpl,simple,1235,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640107253,2,['simpl'],"['simple', 'simpler']"
Usability,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:113,clear,clear,113,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['clear'],['clear']
Usability,"> I also made a [`einsum` dispatched function](https://github.com/Ericgig/qutip/tree/einsum) as an alternative to this, (with a working `einsum_csr` for a pair of csr matrices). Cool! I agree that element-wise multiply is a pretty common and simple operation though, so it's probably worthwhile having regardless of whether we have einsum or not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1670#issuecomment-926922437:242,simpl,simple,242,https://qutip.org,https://github.com/qutip/qutip/pull/1670#issuecomment-926922437,1,['simpl'],['simple']
Usability,"> I am using Anaconda on windows 10 and installed qutip from conda-forge package, I don't have VS-15 on my system, Is it possible that that I could run qutip with VS-15 runtime liberaries instead of complete installation of visual studio. If it is possible please guide me. Dear Bilal I am quite new to use python and qutip.... some how i am not able installed qutip from conda-forge package on window 10..... can you please let us know the step wise installation. (waseem)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-480478000:264,guid,guide,264,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-480478000,1,['guid'],['guide']
Usability,"> I ran some comparisons to the old version, and everything looks good. There seems to be some speedup both to the RHS construction and the ODE solver for most cases. Thanks! I've now streamlined things a little more, so they might be slightly faster still. > Since each individual ADO is naturally a Qobj, having HierarchyADOsState store them an array or list of Qobjs makes sense I guess. I've put this down in the v5 TODO list (just to draw a line under this PR). > 2. How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). I ended up always calling `e_ops` functions with `f(t, ado_state)`. This is a bit different to other solvers, but makes what the HEOMSolver considers the evolution state consistent. The density matrix part of the state is available as `ado_state.rho` so it's not a big hardship to retrieve just the system state. >> 3. Recheck the time dependent case.; > ; > From what I can see it looks good! Seems like basically you treat the entire RHS as an effective qobjevo? I ran through various > examples, and couldn't find any issues!. I simplified things a bit further. In the time-dependent case the RHS matrix is calculated without adding the Liouvillian to the diagonal and then the kron of the Liouvillian is added to the RHS at the end, resulting in a simpler QobjEvo. >> 4. The HEOM can't really take new QObjEvo arguments each time run is called because calculating the RHS again is quite expensive. Maybe something can be done?. Arguments are supported now because the full RHS is a QobjEvo!. >> 5. Compare performance to the HEOM in 4.7.; > ; > On the fermionic examples, with very-large system Hilbert space, there was a little slowdown in the RHS construction. Maybe the slowdown has gone away now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739:1199,simpl,simplified,1199,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739,2,['simpl'],"['simpler', 'simplified']"
Usability,"> I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This is not the case. The answer to your question is to use `QobjEvo` as suggested. For example, here is a simple example using a fast-oscillating array function in a `QobjEvo` and a much shorter `tlist` in `mesolve`. You may need to set the solver options `nsteps`, `atol` and `rtol` to suitable values, as I have done here. ```python; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * 2.91e2 * fast_ts); # This is the behaviour you were suggesting is happening.; bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options). assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # -0.59736575; print(many_times.expect[0][-1]) # -0.59736575; print(bad_times.expect[0][-1]) # -4.5466086e-08; ```. You can see that I was able to do a successful integration with only 2 times in `mesolve`, but many in a fast-oscillating Hamiltonian. Clearly the `bad_times` version (which only has the start and end points so misses all the fast oscillation behaviour) is completely different to the other two versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525:375,simpl,simple,375,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525,1,['simpl'],['simple']
Usability,"> I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"".; > ; > I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension.; > ; > Thank you. Thank you so much for sharing this!. The cell outputs that included Qobj with Latex code wasn't rendering properly for me just like your issue (although Latex code in the Markdown cells was rendering correctly). I spent hours and tried countless online suggestions to fix the issue with no success, until I re-installed the the 'Jupyter Notebook 'Renderers' extension to the old version (v1.0.4) before it removed the latex support. Now I have the option to 'change presentation' of the output cells so it uses the old version of the extension, and now it finally displays the output with the Latex rendered correctly!. Thank you again for suggesting the only solution that worked for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1633135302:239,simpl,simply,239,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1633135302,1,['simpl'],['simply']
Usability,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:187,simpl,simpler,187,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,1,['simpl'],['simpler']
Usability,"> I think you don't need to generate the apidoc manually. To add the API docs, all you need is to add the path `qutip.core.gates` to https://github.com/qutip/qutip/blob/master/doc/apidoc/functions.rst#quantum-objects. `make html` should then automatically read all the functions in the file and generate the API doc. To modify the API doc, e.g. adding new things, one simply edits the docstrings in each of the Python function. Yes, that was the first thing that I have tried but I think there is a problem with the env and the python version. I did the same with qutip-qip docs with no problems.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2148198178:368,simpl,simply,368,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2148198178,1,['simpl'],['simply']
Usability,"> If this is supposed to be displayed in the Sphinx-rendered HTML instead of markdown. I think you need double backticks for the monospace font? E.g. `` ``Qobj`` ``. Yes, I do. Fixed.; ; > Does this also serve as a `guide on migrating from v4 to v5` or do we plan to have it separately somewhere else? It would be nice if we could summarize some common Error messages that one may see along with the solution/possible reasons. The error messages are what people usually type into Google search. This does serve as an initial guideline of what to expect, but I think we do also need a proper porting document like the one you mention.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633:216,guid,guide,216,https://qutip.org,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633,2,['guid'],"['guide', 'guideline']"
Usability,"> It would be good if our naming can help avoid confusion between the concept of a `dtype` (which is the type of elements within an array) and our `data backend type` (which is how the array itself is represented). I'm not sure what a good convention is, but ensuring the docstrings for the backend type have specific examples of valid inputs would definitely help (e.g. `dense` or `csr`). We actually deliberately called this `dtype` to make it familiar to Numpy syntax. The concept of the Numpy `dtype` is mostly irrelevant when using QuTiP, because all data is invariably `double complex`, and this `dtype` is the larger data type of `Qobj`. I suppose it could be `fmt` instead (as a common abbreviation of `format`)? Or even the full word `format` I suppose. Agree on the docstrings - we should have an alias like Numpy's `array_like` that we define clearly in documentation in one place.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1420#issuecomment-809213365:854,clear,clearly,854,https://qutip.org,https://github.com/qutip/qutip/pull/1420#issuecomment-809213365,1,['clear'],['clearly']
Usability,"> It's nice to merge `McResultImprovedSampling` into `McResult`, but the overall complexity has increased... I believe it would be better to move `MultiTrajResult` to it's own file.; > ; > Did you review the `dynamics-nmmonte,rst`? Adding a note/example of using the improved sampling option there would be good. Thank you for the review. The complexity has increased, more than I expected when I started writing. I hope it is worth it?; I have extracted the `MultiTrajResult` and its subclasses to a new module, `qutip.solver.multitrajresult`. I have added a mention about the improved sampling option in the guide, and I will have a look at the tutorial notebook whether it makes sense to include somewhere there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369#issuecomment-2095318521:610,guid,guide,610,https://qutip.org,https://github.com/qutip/qutip/pull/2369#issuecomment-2095318521,1,['guid'],['guide']
Usability,"> It's very clean, I really like the `set & set` and reusing the classes. Thanks!. > But in v4, while we used `f(t, args)` in most examples, we never said that it should be the exact signature up to variable name, so I don't think it an appropriate check for which version to use. Ideally, the check should be good enough we don't need to change any tests not directly related to the addition of this feature. I'm open to modifying the check for QuTiP v4 functions, but I would like to keep the check simple. To quote the Zen of Python, ""If the implementation is hard to explain, it's a bad idea."". :). > Also what should; > ; > ```; > def f(t, w, a=1):; > return a; > ; > coeff = coefficient(f, args={'w':1}); > coeff.replace_arguments(a=2)(0); > ```; > ; > give? Since `a` is not given, it's not our job to update it, or should we add it to `_f_arg_names`?. I think this works fine already in this branch. `a` is included in `_f_arg_names`, so it can be specified via `.replace_arguments(...)` but since it has a default it can also be left out.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390:501,simpl,simple,501,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390,1,['simpl'],['simple']
Usability,"> Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple. For those you worked on, do they include QOC via RL ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660474276:79,learn,learning,79,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660474276,1,['learn'],['learning']
Usability,"> My biggest concern is with the addition of `**_` to some of the functions, I would argue that it is best to raise an error if the function does not have arguments. this may lead to code that works on jax being incompatible with code that works on just qutip though, so it is something to think about. We pass unused arguments when we mix different types of coefficients in solver and `QobjEvo`. So we cannot raise an error. > I could be an interesting idea for the future to consider adding a similar context manager that removes other dtypes (`CSR` and `Dense`) so that it is clear what the code is doing?. I don't understand what you mean by this... A context manager that remove dtype from those known to the dispatcher?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2015#issuecomment-1438679479:579,clear,clear,579,https://qutip.org,https://github.com/qutip/qutip/pull/2015#issuecomment-1438679479,1,['clear'],['clear']
Usability,"> Nice work!; > ; > > I have removed self.gates as well as self.gates_and_measurements. The replacement is the more ""general"" (and less of a mouthful) self.circuit_ops which contains both.; > ; > I like this merge of to attributes. However, we shouldn't change the attribute name `gates`, at least not in this PR here. It's an open attribute API and as you see we used it a lot in tests. It's very likely that others are using it too.; > ; > Personally, I would keep the attribute `gates` since even for measurement operations, people still usually say ""measurement gates"". `circuit_ops` is certainly more accurate, but might be hard to remember and thus makes the learning curve steeper. Rolled back to self.gates",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-647834648:665,learn,learning,665,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-647834648,1,['learn'],['learning']
Usability,"> One thing to consider when you're adding syntactic sugar is making sure that you don't accidentally reuse the same syntax to mean two completely different things. Thanks @jakelishman A more elegant way is to define a meta gate like `All(X)` in ProjectQ, which acts like `Tensor`. But it is true that this syntax sugar is not as simple as it looks like.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1489#issuecomment-817773509:330,simpl,simple,330,https://qutip.org,https://github.com/qutip/qutip/pull/1489#issuecomment-817773509,1,['simpl'],['simple']
Usability,"> Since now there's no need of anything because the output is a copy paste of mine, how about a simple `..plot::` into `..code-block:: python`?. I'm worried that code blocks are never run so the code in them is by definition broken.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1125773090:96,simpl,simple,96,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1125773090,1,['simpl'],['simple']
Usability,"> Thank you for looking at this.; > ; > `store_state` should still be the final factor whether states are stored or not. It's the one available everywhere and for v4. `mesolve` with `store_state` will have `result.states` being the output density matrix. `mcsolve` with the same `store_state` and default options should return a similar result.; > ; > So it would be better to have the new option be `precompute_average_states` and have it only control if the average is compute when all trajectories is stored. The if the `average_states` property it use, it could compute the average then, but never do so if not used.; > ; > Please keep `result.states` and `result.final_states` as is. They have the same behaviour as in v4 and we want to keep them for backward compatibility.; > ; > `runs_...` and `average_...` are new to v5 and could be renamed, but it's not clear that `density_matricies` is the average while `final_states` are for each trajectories. `smesolve` and sometime for `mcsolve` individual trajectories states are already density matrices. Thus `smesolve`'s result density_matricies could work as well for all states from all trajectories, causing confusion.; > ; > You implemented the `density_matricies` property twice.; > ; > Having the options to keep only the final states without keeping all the trajectories is a good idea. Be careful that the trajectory result have the final state stored. So I'm not entirely sure what you want the behaviour to be for each set of options. I think it is confusing to return a density matrix if you request store_states - the density matrix is not the same as the state of the system, and surely v5 is the perfect time to clear up issues like this. Personally I found this behaviour very surprising when updating to V5. I do agree that `density_matricies` should maybe be `average_density_matricies`. I am happy to change `mesolve` as part of this for consistency. If you want to keep it backwards compatible would it be possible to send a li",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023:865,clear,clear,865,https://qutip.org,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023,1,['clear'],['clear']
Usability,"> Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works.; > ; > Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same. I have now made it so that the measure and measurement_statistics function precisely do this. Should we keep either mode (one mode is of the ""observable"" type and the other with the ""projective"" type) also as a api-exposed function? If that is not the case, what would be the correct way to write doc_strings ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389:105,simpl,simplifying,105,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389,4,"['simpl', 'user experience']","['simple', 'simpler', 'simplifying', 'user experience']"
Usability,"> Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed. Good point! I did not consider that initially. For this case, since it is not possible to define a single arc but rather there are infinite possibilities, I would suggest to simply raise an exception. What do you think @gaurav-iiser ?. > So, is it okay if I take your code above, modify it for the general scenario, make changes to the add_arc, and push it again? . I think there is an option somewhere to make someone a coauthor of the code, but do not worry about that, it is not necessary here. You can either push the changes to this pull request or, since this will require significant changes to the code, you could create a new one. I personally prefer creating a new PR since it leaves a cleaner commit history, but both are fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937579234:388,simpl,simply,388,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937579234,1,['simpl'],['simply']
Usability,"> The current `.evolve_dm` and `.sys_dims` concepts both seem a bit awkward, so I'd like to suggest the following:; > ; > **For `.evolve_dm`**:; > ; > Replace `.evolve_dm` with a `.unitary` attribute on the solver itself. The attribute should be `True` if that particular instance of the solver can guarantee that the evolution it produces is unitary, and `False` otherwise.; > ; > This will be more generally useful and will simplify the code inside the propagator a bit. I removed `.evolve_dm`. > **For `.sys_dims`**:; > ; > The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise.; > ; > I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. Changed in HEOMSolver. Since environment only means something for HEOM, so it took some time to understand what it referred to. Adding the change elsewhere would be confusing. ; > **Specifying which solvers support propagators**:; > ; > Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them. There is only one class for propagator and I don't see us needing any other, so there is no use for a `propagator_class` . We could have a `support_propagator` flag, but I prefer it this way as we can set a special error message for `HEOMSolver`. ; `HEOMSolver` is the only exceptions where we could support it but choose not to take the time to implement it. ; All deterministic solver we have can be used for propagator, t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120:426,simpl,simplify,426,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120,1,['simpl'],['simplify']
Usability,"> The fear I have with removing them is I expect we will forget some in untested code...; > But let's go with removing them. Woot. Code that is entirely untested is probably already broken. ;) . > Do we keep the ones with scalar: `Data / scalar`, `-Data`?; > They probably won't cause problems, but to be consistent I would also remove them. I'm happy with those being removed or being simple calls to other methods on the Data class. The fewer methods Data layer classes have to implement themselves, the better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1647#issuecomment-909064274:386,simpl,simple,386,https://qutip.org,https://github.com/qutip/qutip/pull/1647#issuecomment-909064274,1,['simpl'],['simple']
Usability,"> The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I do think it would be good to keep the `trace` property on the trajectories, but for the purpose of calculating the weighted averages, it could perhaps be treated like the other types of weights that we have.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958:303,simpl,simplify,303,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958,1,['simpl'],['simplify']
Usability,"> There are other issues with scipy 1.12 for v4 in steadystate. . At a glance, it is not clear to me where the issues are. I confirmed that each `scipy` function used by `steadystate.py` exists and is successfully imported.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2305#issuecomment-1908552067:89,clear,clear,89,https://qutip.org,https://github.com/qutip/qutip/pull/2305#issuecomment-1908552067,1,['clear'],['clear']
Usability,"> There is no agreement on how this should be handled yet. It's been removed from `dev.major` with the plan to restore it before the release, but the exact interface is not fixed. It certainly will not be some special keyword in args. It could be a special value, or a special parameter / method for the solver class. Actually having a method in the solver class seems better, I suppose this is why we are going towards Solvers from the simple `mesolve` function. I am going to try and rewrite my example using the Solver class. We can probably get away with having this functionality only in the new Solver class --- benefit of a major release I guess.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362:437,simpl,simple,437,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362,1,['simpl'],['simple']
Usability,"> We allow the user to supply the `QobjEvo` class to use as an option, and allow them to specify either the class itself or a name for the class. E.g. `qobjevo_cls=QobjEvoHerm` or `qobjevo_cls=herm`. I would prefer the user not needing to know how we do it, just that there an option that speed up the simulation by 40 % in normal cases. Knowing that we forced it in an alternative qobjevo class is not useful and I hope we won't be forced to add many kinds of qobjevo. > Perhaps we should also not allow users to switch the class later by changing options? That might simplify the logic because we wouldn't need to modify the RHS when options are updated. Since changing options does not change the physic, I would like them to be changeable. But the `rhs`, and `_rhs` is certainly not great. I will rethink the way to do it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203:569,simpl,simplify,569,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203,1,['simpl'],['simplify']
Usability,"> What exactly is this `dev.major` branch?. Hi @eendebakpt. `dev.major` is the branch in which we are developing QuTiP version 5. We're still doing important fixes for 4.7.1, but we're not planning to release any more feature for the 4.X series (although *maybe* that could change -- we'll see how the move to 5 goes). I'll update the contributing guidelines to mention QuTiP 5. QuTiP 5 has been in the works for a long time, but we're now in the ""cleaning things up"" phase, and hope to release an alpha version in the next month or so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1943#issuecomment-1168823150:348,guid,guidelines,348,https://qutip.org,https://github.com/qutip/qutip/pull/1943#issuecomment-1168823150,1,['guid'],['guidelines']
Usability,"> What if we rethink the approach from the beginning:; > ; > ```; > QobjEvo([op, func], args={""state"": Solver.StateFeedback(default=psi0)}); > QobjEvo([op, func], args={""e1"": SESolver.ExpectFeedback(e_op)}); > QobjEvo([op, func], args={""state"": MESolver.StateFeedback(raw_data=True)}); > QobjEvo([op, func], args={""collapse"": MCSolver.CollapseFeedback()}); > QobjEvo([op, func], args={""W"": SMESolver.WeinerFeedback()}); > ```; > ; > And we remove the `add_feedback` method. This looks great. I really like that it makes it clearer where the feedback comes from and that it is solver dependent. Removing the need to specify the feedback in two places when constructing a `QobjEvo` is really nice too. Let's do it in a separate PR though (unless you strongly want to update this one). I have a slight concern that it might be a bit complicated for users to find the feedback classes (e.g. they have to know to import the right solver) but I'm sure we can make that nice the PR itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984:523,clear,clearer,523,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984,4,"['clear', 'feedback']","['clearer', 'feedback']"
Usability,"> What is the main difference between `expect` and `measure`? That's the main thing that comes up ; > to my mind. What different question are you answering? I also wonder if `expect` could be called. . `expect` returns the expectation value (i.e. probability weighted average of the measurements). `measure` returns a *single* measurement (i.e. an eigenvalue and an eigenstate, selected randomly with weighted probabilities). > The description of the `measure` function is a bit general maybe with this regard. But I might have ; > missed the point completely (my bad). Open to suggestions. I will also re-read it and see if I can think of something clearer.; ; > Somehow `smesolve` tests fail with Travis CI, not sure how this PR could have affected it. I'll dig a bit and see if the failure is related somehow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408:650,clear,clearer,650,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408,1,['clear'],['clearer']
Usability,"> What's the preferred method to link functions that are not public APIs?. I don't think we should link to non-public API in the doc. Non-public API should not (at least no encouraged) be used outside of QuTiP because we may change it without issuing a deprecation warning. Besides, [`check_unitary`](http://qutip.org/docs/latest/apidoc/classes.html?highlight=check_isunitary#qutip.Qobj.check_isunitary) is a public API, it is a class method under `Qobj`, rather than a function, see bellow. > Qobj vs qobj link. `qutip.qobj.isoperbra` and `qutip.Qobj.isoperbra` are different. The lower case `qobj` is a submodule in QuTiP (qobj.py) while `Qobj` is a class. `isoperbra` is not a class method under `Qobj`. It is a function defined under the submodule `qobj`. So only `qutip.qobj.isoperbra` is the correct path. To make the life simpler, I would recommend to use the shortcut ``:func:`.isoperbra` `` for functions and ``:meth:`.Qobj.class_method` ``. Or even simpler: ``:obj:`.isoperbra` ``. Sphinx will automatically look for the correct match. As long as there are no two functions with the same name, we are safe. This isalso because `qutip.qobj.isoperbra` will be a wrong path in qutip 5.0. The file is moved.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1499#issuecomment-824624079:829,simpl,simpler,829,https://qutip.org,https://github.com/qutip/qutip/pull/1499#issuecomment-824624079,2,['simpl'],['simpler']
Usability,"> You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits. Yep ! That's what I thought as well..for all the single qubit gate outputs with two targets. I knew I was getting an error but was not sure why it was not the same error as both of you. It was because I was using the released version (like you predicted). . I was trying to put off installing from source for as long as I could because I would have to install conda and other dependencies manually. Now, I did get `ValuError`. Thanks !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555:63,clear,clearly,63,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555,1,['clear'],['clearly']
Usability,"> also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse scheduling,; > e.g. Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages; > or commonly used language e.g. through quantum assembly language (qasm); >; > ------------------------------; >; > Also, the last outcomes have some overlap with the last project. Although; > I also find this circuit importation very important, I guess two projects; > should not have overlap if they are both selected.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67E",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:2618,simpl,simple,2618,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['simpl'],['simple']
Usability,"> does this floquet formalism supports any hamiltonian or just it works for two level systems?. It should support any hamiltonian. I have simulations test cases with harmonic oscillators for instance. However, you should have a look at the code from #766 since the code currently in QuTiP repository seems to have been tested only with two-level systems and contains some bugs. > Also the code uploaded is not working, how to plot this wigner function?. I'm sorry, I have no idea what you are talking about. > Floquet formalism is totally not working fro me. plz help. I think you should first try to make it work with simple two-level systems. See http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html and https://gitlab.inria.fr/lverney/qutip_floquet_example/blob/master/Example.ipynb. Note that there are some bugs in the current QuTiP code which are fixed by #766 but this one is not yet merged.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-355973074:619,simpl,simple,619,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-355973074,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"> thanks for the comment, I didn't know about `qutip.propagator`; > ; > > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple; > ; > cool, can i learn more about this from you?. Sorry, I don't have much experience in it myself - you'll be reading about the methods in papers/lecture note by people smarter than me. We have some tutorial notebooks about optimal control using the QuTiP optimal control package here: http://qutip.org/tutorials.html#optimal-control, which you may be able to adapt to your use case. I believe there are components in there that you can subclass so that the optimiser is RL-based rather than using standard BFGS or something else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258:151,learn,learning,151,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258,2,['learn'],"['learn', 'learning']"
Usability,">I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ?. Maybe, but I find teleportation already a very short circuit, isn't it?. >Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ?. Yes, if we have n qubit measurements, we will have 2^n possible final state. One can calculate the state for each of them along with its probability and then get the exact statistics.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640113087:60,simpl,simple,60,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640113087,2,['simpl'],"['simple', 'simpler']"
Usability,"@AGaliciaMartinez What exactly is this `dev.major` branch? . `dev.major` diverged from the qutip `master` quite a lot.; I could not find anything relevant on https://qutip.org/docs/latest/development/contributing.html. The only thing I could find is https://github.com/qutip/qutip/milestone/18, but it is not clear what the timeline is for that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1943#issuecomment-1166623619:309,clear,clear,309,https://qutip.org,https://github.com/qutip/qutip/pull/1943#issuecomment-1166623619,1,['clear'],['clear']
Usability,@AckslD thank you for the feedback.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/916#issuecomment-464658045:26,feedback,feedback,26,https://qutip.org,https://github.com/qutip/qutip/issues/916#issuecomment-464658045,1,['feedback'],['feedback']
Usability,"@BoxiLi . Yes, how to include gates in qutip is not clear to me. Many of them seems specialized so I don't think we should keep them all. Keeping only some of them could be fine but I am not well placed to choose a subset of commonly used gates and the `target` made them quite specialized. It also means that some gates will be defined in both qutip and qutip-qip. I also want all function that create `Qobj` in qutip the follow an common interface (they should all support `dtype`) and if we want these functions to also follow the qip signature, it could get somewhat complex. I think removing them and having the private functions for tests will make it easier for us on the long run. I see the use of `expand_operator` now that you explain it. I would prefer to have it in dimension.py and having users call it manually than being included in the `Qobj` creation function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262:52,clear,clear,52,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262,1,['clear'],['clear']
Usability,"@BoxiLi I'm -1 on adding such complexity to `qutip.about`. It's often used for bug reporting, and complexity has cause use issue in such places in the past. Especially the importing by name and the calls to inspect look like trouble. I would suggest a simpler solution, which is to have `about_family_pkg(title, extra_lines)`. That way family packages can supply their own title and extras and `about()` in qutip and other packages can just call `about_family_pkg` with the correct arguments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1870#issuecomment-1104938167:252,simpl,simpler,252,https://qutip.org,https://github.com/qutip/qutip/pull/1870#issuecomment-1104938167,1,['simpl'],['simpler']
Usability,"@BoxiLi Sure, the tests looks not too complex. I'm working on it. I'm grouping the gates for better error handling. @jakelishman Thanks. Sorry, I was just too lazy to set up the tests on my machine, LOL. I simply create the pull request and see if the code pass. That's why there are always one or two minor fixes here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104:206,simpl,simply,206,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104,1,['simpl'],['simply']
Usability,"@Canoming: if this gets merged, it's much easier to bring your `master` up-to-date because we'd want to overwrite everything on it. In that case, it would be as simple as; ```; git remote add qutip https://github.com/qutip/qutip.git; git fetch qutip; git reset --hard qutip/master; ```; and you'd have forced your `master` to mirror ours (destructively - if you had additional work you wanted saving, this would overwrite it). In the future, it will be a bit easier for you if you develop pull requests on a separate branch, and always keep `master` as mirroring ours.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629826086:161,simpl,simple,161,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629826086,1,['simpl'],['simple']
Usability,"@Ericgig . - docstrings should be fixed. - coveraged increased with . `e_ops = [callable, qobj]; e_ops = [callable, callable]; e_ops = [qobj, qobj]`. - added a more efficient and clear pytest parametrization; - fixed the repeated sparse test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157:179,clear,clear,179,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157,1,['clear'],['clear']
Usability,"@Ericgig @AGaliciaMartinez I've approved this PR and I'd like to merge it once @trentfridey has fixed the ""Verify Towncrier entry added"". I actually preferred the situation before @trentfridey removed the requirement for the PR number -- it was simpler and didn't rely on us to remember to write those numbers into the changelog. For UnitaryHack, I think we have to merge it before the end of tomorrow for it to count, and I'd like to do that since it's a big improvement and now probably we just need to try it and tweak how it is set up if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927#issuecomment-1158111426:245,simpl,simpler,245,https://qutip.org,https://github.com/qutip/qutip/pull/1927#issuecomment-1158111426,1,['simpl'],['simpler']
Usability,@Ericgig Can you please guide me through (step-by-step developing test function or test classes) writing tests for progressbar? I don't have much experience with writing python tests? But I am a quick learner and can easily grasp the fundamentals.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1474760220:24,guid,guide,24,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1474760220,2,"['guid', 'learn']","['guide', 'learner']"
Usability,@Ericgig Could we check whether tlist is monotonic when `_safe_mode` is true? It might make the error clearer.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879184807:102,clear,clearer,102,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879184807,1,['clear'],['clearer']
Usability,"@Ericgig Hi. I made ```anim_wigner_sphere``` again to make it clear that users use an animation function. If it is ok, I will do the same for other functions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2203#issuecomment-1678682976:62,clear,clear,62,https://qutip.org,https://github.com/qutip/qutip/pull/2203#issuecomment-1678682976,1,['clear'],['clear']
Usability,"@Ericgig Hi. I merged animation functions with functions in visualization.py. Now, users can have animations simply by passing a list.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2203#issuecomment-1667219957:109,simpl,simply,109,https://qutip.org,https://github.com/qutip/qutip/pull/2203#issuecomment-1667219957,1,['simpl'],['simply']
Usability,@Ericgig I decided it was easiest to try out some of my ideas for how to simplify this by coding. The result is #1633. Let me know what you think.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-894208587:73,simpl,simplify,73,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-894208587,1,['simpl'],['simplify']
Usability,"@Ericgig I think it's unavoidable to have some sort of global state that tells the C compiler which type to choose, and I think passing it as a compilation option is a simple and straight forward solution. Using macros won't change the need for a compilation flag and will make fetching the correct numpy type trickier. If cython does eventually provide a nicer option, I am happy to use it, but they are still having long discussions about the right direction to take. One thing that would make things nicer would be to expose the compilation options used in, for example, `qutip.utilities` so that compilation becomes `compile_time_env=qutip.utilities.compile_time_env()`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-1104929052:168,simpl,simple,168,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-1104929052,1,['simpl'],['simple']
Usability,"@Ericgig I'm back from vacation so I'm keen to restart the discussion on this and hopefully get it merge. Any suggestions for a better way to tell whether the coefficient function expects the old-style arguments? I'm happy to do the coding, but I'd like to keep the check simple and I don't have a better idea for it right now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-904725956:272,simpl,simple,272,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-904725956,1,['simpl'],['simple']
Usability,"@Ericgig Tests added for the type changes. Note that `QobjEvo.__rmatmul__` is not currently callable. Calling `qobj @ qevo` will call `QobjEvo.__matmul__(qobj, qevo)` first, which will return the result. If I am not missing a case where `__rmatmul__` is called, I vote that we simply delete the implementation of `__rmatmul__` (in a separate PR).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1149772678:277,simpl,simply,277,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1149772678,1,['simpl'],['simply']
Usability,"@Ericgig You'll see I have made a full review. Lots of comments, but mainly small things. Some are just suggestions (which I make clear). Just a general idea... as far as the solver method goes, you have a code and name, and some other properties.; Is it worth considering a class? Like `SSolveMethod` with properties like `name`, `code`, `photocurrent` etc. Could have a function `get_stochastic_solve_method`? Just an idea.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-458109888:130,clear,clear,130,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-458109888,1,['clear'],['clear']
Usability,"@Ericgig `.step(...)` looks like a great solution. We should definine more precisely what one is allowed to modify in between calls to `.step` and document that. Aside regarding things we have already implemented: I know -- my point is that there are many such things and we have only implemented one kind of each (for example, what kind of progress bar is appropriate is highly dependent on the environment the code is running in -- if the code is running on a server without a terminal it might be some kind of logging, inside a hypothetical QuTiP UI GUI application it might be a progress bar provided by the GUI toolkit being used, etc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358:341,progress bar,progress bar,341,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358,2,['progress bar'],['progress bar']
Usability,"@Ericgig and I had a brief discussion about how to handle `inf` and `nan` generally. One option is forbid them entirely from the data layer -- i.e. to check and raise an error whenever a new data layer is created. A potential downside to this is we'd have to check often to be sure, since any operation can potentially create `nan` and `inf`, even simple addition:; ```python; >>> 1e308 + 1e308; inf; >>> (1e308 + 1e308) - (1e308 + 1e308); nan; ```; an alternative is to try propagate `nan` and `inf` only as correctly as, e.g., `BLAS`. What happens with `BLAS` is that `nan` and `inf` propagate reasonably correctly, but are considered fairly interchangeable -- i.e. `nan`, `inf`, and `-inf` are all just bad values.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1208234717:348,simpl,simple,348,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1208234717,1,['simpl'],['simple']
Usability,"@Ericgig any tips how to locally run `pycodestyle` linter so that it follows same settings as `codeclimate`? When I run it locally it show way more warnings than `codeclimate`, seems a lot more restrictive. I'm sure some sort of configuration is missing. I checked the [contribution guide](https://qutip.org/docs/latest/development/contributing.html) but this particular matter is not detailed. If you explain how to run linter locally I would be happy to also update the docs and document it for the future contributors.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655#issuecomment-925558661:283,guid,guide,283,https://qutip.org,https://github.com/qutip/qutip/pull/1655#issuecomment-925558661,1,['guid'],['guide']
Usability,@Ericgig not in any huge hurry. Once there is a nice subset of tests that can be run to test installation I will update the nixpkgs package for qutip. Thanks for being so responsive! For now I'll just delete some of the tests and can always update the package once the ability to test only a subset is added to a release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675:171,responsiv,responsive,171,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675,1,['responsiv'],['responsive']
Usability,"@Ericgig we verified the code also for spins.; The code is consistent with previous versions and it seems to run slightly faster when `e_ops` is given.; I checked the results with `mcsolve` from Qutip 4.3.1, also I checked the density matrix with respect to `mesolve` and `steadystate `. However, when the `e_ops` are not given, and the option `average_states=True`, the `mcsolve` in your version requires much more time than in the 4.3.1 case.; Please, check that this is not a machine dependent bug. ; I wrote a code which does that for a simple three spin system:; https://gist.github.com/fminga/c3e75a75dc528cb509c7d82d3eb9823b. There is, moreover, a minor inconsistency: when the option `average_states=False` and `store_final_state=True`, one would expect to obtain a set of wavefunctions, instead the code returns the density matrix at the last time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/991#issuecomment-497925627:541,simpl,simple,541,https://qutip.org,https://github.com/qutip/qutip/pull/991#issuecomment-497925627,1,['simpl'],['simple']
Usability,"@Erotemic Thank you for documenting this. I will merge it shortly & have marked if for inclusion in QuTiP 4.6.3. Note that qutip-qip has also been split out into it's own package (https://github.com/qutip/qutip-qip) in preparation for QuTiP 5 so we should update it there too. `reverse_states` seems to reverse the order of the array of quantum and classical bits. It is a bit odd, so I'm happy to leave it undocumented. The original commit just read:. ```; commit dcf8d363718b6ee5a8a17ec9af00df4bc8aea166; Author: Robert Johansson; Date: Mon May 26 19:11:44 2014 +0900. allow reversing the circuit represenation. added support for multigate symbol; ```. @BoxiLi Just pinging you so you know I merged this and can comment if you like.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1652#issuecomment-914132388:407,undo,undocumented,407,https://qutip.org,https://github.com/qutip/qutip/pull/1652#issuecomment-914132388,1,['undo'],['undocumented']
Usability,@HarshKhilawala Would you be interested in adding some tests for the progress bars in another PR?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1462010251:69,progress bar,progress bars,69,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1462010251,1,['progress bar'],['progress bars']
Usability,@IamSeti please explain the feature request clearly.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808413846:44,clear,clearly,44,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808413846,1,['clear'],['clearly']
Usability,@PZJuly I have posted an answer to your question on; https://groups.google.com/forum/#!topic/qutip/BqUZQEQN1c4. I agree the docs http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html do *not* seem to include an example using `rhs_with_state`,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-461408955:158,guid,guide,158,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-461408955,1,['guid'],['guide']
Usability,"@PhilipVinc Hello! Apologies for the long wait -- I think this got lost in people's holidays and other goings on. I realized a few things while re-reading the long issue discussion:. 1. We need to define clearly what we want to propose. E.g. Initially the request was just for the constructor to work, i.e. `Qobj(netket_operator)`, and later in the discussion it expanded to include all operations and methods, e.g. `qutip.groundstate(netket_operator)`, `qobj * netket_operator`, ... . These are proposals of quite different scope. 2. There clearly isn't a huge advantage either way to having `Qobj(netket_operator)` vs `netket_operator.to_qobj()` except perhaps that people don't need to remember to what kind of thing `netket_operator` is exactly if they are swapping between libraries. 3. It is already *almost* possible to implement `Qobj(netket_operator)` on top of QuTiP v5 (i.e. the dev.major branch) without any changes to QuTiP itself and it might be beneficial to close that slight gap for multiple reasons. Posting example implementation in next comment.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908328150:204,clear,clearly,204,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908328150,2,['clear'],['clearly']
Usability,@VolodyaCO Fix merged. Thank you for contributing it and apologies that such a simple fix took a long time to be merged.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1707#issuecomment-1056809216:79,simpl,simple,79,https://qutip.org,https://github.com/qutip/qutip/pull/1707#issuecomment-1056809216,1,['simpl'],['simple']
Usability,"@ajgpitch Hi, it should be all clear now. Tell me if there is any new issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1065#issuecomment-522978891:31,clear,clear,31,https://qutip.org,https://github.com/qutip/qutip/pull/1065#issuecomment-522978891,1,['clear'],['clear']
Usability,"@ajgpitch I've started a guide and docs in https://github.com/qutip/qutip-doc/pull/113. Would you mind having a quick look and letting me know if the direction is good. I'll try finish the measurement_statistics section tomrrow. Could we perhaps land this PR with just the guide? I'm happy to add a notebook straight afterwards (and it should be fairly straight forward once we have the guide), I just don't want to end up having too many different pieces in flight and holding up @sarsid more than necessary.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-633748439:25,guid,guide,25,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-633748439,3,['guid'],['guide']
Usability,"@ajgpitch, I think that instance method picking is still somewhat of an issue in python 3, (which is what I use primarily) although I could be wrong. Either way, since the current QuTiP version supports 2.7, we would need to make this backward compatible to do multiprocessing correctly, so I'm glad you agree that option 3 is best. As to dropping python2 support, I think that this would be a good idea for v5.0, since [python is dropping support for 2.7 in two years](https://legacy.python.org/dev/peps/pep-0373/), which could be close to the time that QuTiP v5 is released (depending on how long the changes take). @sahmed95, thanks for making those final changes - sorry, I had forgotten to make the docstring capitalization changes. I'm happy with the state of the module now, so go ahead and merge it. There haven't been any functional changes made to how anything works, so none of my other pull requests ([[1]](https://github.com/qutip/qutip-notebooks/pull/58), [[2]](https://github.com/qutip/qutip-doc/pull/59), [[3]](https://github.com/qutip/qutip.github.io/pull/51)) should need to be updated. In the qutip-docs PR, for the moment I've only added auto-doc documentation, but I'll add more extensive documentation before version 4.3 is released (when is the expected time frame for this?) so that people will have more to refer to when this new feature is announced. . Thanks to everyone involved in this review process for their constructive feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-386413620:1453,feedback,feedback,1453,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-386413620,1,['feedback'],['feedback']
Usability,"@andriusdc If you are having trouble formatting the code nicely, I suggest reading the GitHub markdown guide -- https://guides.github.com/features/mastering-markdown/.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879106109:103,guid,guide,103,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879106109,2,['guid'],"['guide', 'guides']"
Usability,@anna-naden This PR also seems to include the changes to guide-basics.rst that were in the PR I rejected. Could you remove those changes from here and then I can review the rest?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1773#issuecomment-1027766437:57,guid,guide-basics,57,https://qutip.org,https://github.com/qutip/qutip/pull/1773#issuecomment-1027766437,1,['guid'],['guide-basics']
Usability,"@arnelg and @cgranade, you are both raising good points here. I'm not exactly sure what the best solution for this particular issue is, but do tend to agree with @arnelg that we do not want functions that perform unexpected actions, if possible, and that explicit is better than implicit. However, ultimately, it has to be the docstrings that should resolve any ambiguities, because not all functions can be intuitive to everyone, since we all have different backgrounds and expectations. So if the current behaviour is clearly described in the docstring, it should also be an acceptable solution I think. But one important thing that @arnelg also alluded to is that if at some point we expect that we might want to use `composite(S, O)` to mean something different than `composite(S, to_super(O))`, then we should better not implement the operator-to-superoperator promotion implicitly in `composite` now. Since the `composite` function is brand new it might be a good idea at this point to avoid doing these implicit assumptions on how it will be used until various use-cases has been explored in more details. I absolutely agree that it is great to have discussions about these kind of design issues, and it's great that you both have taken an interest in this particular issue. I also agree that Qobj.dims is a bit obscure and not that flexible, and maybe insufficient for complex cases with mixes of operators, kets, superoperators along different subsystems. This would not be an easy thing to change, but having a discussion about the short-comings and possible solutions would be great. I've created a new page on the wiki for listing various issues and design short-comings in qutip:. https://github.com/qutip/qutip/wiki/Future-Design-Changes. Feel free to add to this page and edit what's already on it (and of course, propose solutions!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58190164:408,intuit,intuitive,408,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58190164,2,"['clear', 'intuit']","['clearly', 'intuitive']"
Usability,"@bopardikarsoham It can definitely still be looked at, but the situation needs to be untangled before any code change is made:. - If one is using Lindblad operators (see the equation with `L_i` on https://en.wikipedia.org/wiki/Lindbladian) then `a` and `b` are the same and the code is currently correct.; - If one is using some other set of basis operators `A_n` for the bounder operators on `H`, then you will need to include terms for both `n, m` and `m, n` and the sum of the those two terms will again be the same for the current code and the proposed change. So the physics will not change from what it is now if we make the proposed change and it appears that how the terms are organized within the larger sum is a convention. So the question is whether there is a standard convention to follow or not, and I don't know the answer. Step 1 is probably to find some textbooks or canonical references which make the choice clear. Step 2 would be to write some tests for the behaviour in the case where `a != b`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1719#issuecomment-1062919358:927,clear,clear,927,https://qutip.org,https://github.com/qutip/qutip/issues/1719#issuecomment-1062919358,1,['clear'],['clear']
Usability,"@cgranade I'm really liking the overall look of the Instrument class -- it's a much easier way to deal with measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:. * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground.; * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases like this where there are essentially an infinite number of possible constructors, it makes sense to not ""bless"" any of them by sticking them on the class.; * It would be good to have one really nice use case that we could turn into a guide entry in the documentation. The current small examples are great, but it would be good to add one slightly bigger worked example that did something more ""exciting"".; * I would not push everything into the `qutip` namespace (largely because we would likely not want that in v5, although I should actually check what v5 is doing in `qutip.__init__` these days).; * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release). Hoping to hear comments from others!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-949022910:259,feedback,feedback,259,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-949022910,4,"['clear', 'feedback', 'guid', 'simpl']","['clear', 'feedback', 'guide', 'simple']"
Usability,"@cgranade When we initially talked about this, we also spoke about storing Kraus superoperators with it, but it's not completely clear to me whether this route covers that case. ""No"" is fine (we don't have to make this work for everything) but if the answer is ""Yes"" or ""Maybe"", what would that look like?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-949031114:129,clear,clear,129,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-949031114,1,['clear'],['clear']
Usability,"@elfring The first line of the PEP `There are two main reasons for adding this feature to Python: simplicity of expression, and support for in-place operations` and the `in-place operations` mentioned are part of why `a = a + 5` is not equivalent to `a += 5` (as Jake took the time to demonstrate). I'm closing the issue, but feel free to continue the discussion here & thank you for suggesting an enhancement to QuTiP and please feel free to suggest others.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-972730767:98,simpl,simplicity,98,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-972730767,1,['simpl'],['simplicity']
Usability,@emilianomfortes Thanks. I've merged this one and will close the related issue. Feel free to open new PRs for any improvements you want to make (either to the guide or the solver). Thanks for contributing this!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1126038943:159,guid,guide,159,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1126038943,1,['guid'],['guide']
Usability,"@goerz I think one of Mølmer's papers (maybe the one I have pointed out) addressed the equivalence of the two methods. Sorry, I don't have a definite paper to point out at this moment. I was actually organizing the Julia community to work on this direction (see [JuliaQuantum](http://juliaquantum.github.io)) from scratch, and hence didn't follow up the efforts in the measurement simulation within QuTiP. . When I was writing my paper on continuous measurement ([PRA, 93.023817](http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817)), I came up the argument that the former method may be more appropriate for measurement models. This is because measurements have to happen in evenly spaced time steps determined by the detector's integrating time, so it is intuitive to use a random number to judge if on each measurement step the quantum jump will happen. There may be a way to use the second method to implement the same measurement simulation model, but I didn't think too much on it. In reality, I developed another more efficient method without actually evolving the density operator in my paper to simulate continuous measurement using a set of stochastic equations for squeezing thousands of atoms' state which has not been included in QuTiP yet. Sorry I don't have more useful reference that explains this point in more details at this moment. Good luck!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-220744432:769,intuit,intuitive,769,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-220744432,1,['intuit'],['intuitive']
Usability,"@heathcliffYang This seems to be running okay. I hope you can use QuTiP now. Try running this simple code in python. ```; from qutip import *. rho = basis(2, 0); print(rho); ```. P.S. you may also want to update your Anaconda as the latest is Anaconda 5. Let me know if you have any other issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387667826:94,simpl,simple,94,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387667826,1,['simpl'],['simple']
Usability,@hiliuzheng no problem! It was a fun learning experience. Thanks for pointing me in the right direction!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2017#issuecomment-1351838277:37,learn,learning,37,https://qutip.org,https://github.com/qutip/qutip/pull/2017#issuecomment-1351838277,1,['learn'],['learning']
Usability,"@hodgestar , I think I responded to all your comments.; The tests for core/blochredfield.py are present, I think it has a 100% coverage.; I did little cut and paste, but stayed close to the original cython code when possible. The question I still have is about the `a_ops` format: I made breaking changes from v4, so I want to be sure the new way is clear. I think `matmul_var_data` should be available in `core/data` not implemented here, but I don't want to touch that part in this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890:350,clear,clear,350,https://qutip.org,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890,1,['clear'],['clear']
Usability,@hodgestar . I removed the `_rhs` by changing it so the rhs is built when making the integrator instead of in `__init__`. I also simplified the way options are updated so brmesolve no longer need to overwrite `_apply_options`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940:129,simpl,simplified,129,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940,1,['simpl'],['simplified']
Usability,"@hodgestar . Since now there's no need of anything because the output is a copy paste of mine, how about a simple `..plot::` into `..code-block:: python`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1125718559:107,simpl,simple,107,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1125718559,1,['simpl'],['simple']
Usability,"@hodgestar ; It's ready for another look.; I made it so the feedback can be set at `QobjEvo` creation, with `QobjEvo.add_feedback` method and with a method of the solver. `QobjEvo` with feedback can be used outside solver with a default value for the argument passed at creation. This default value is needed when creating the coefficient. When used in a solver an error will be raised if the solver cannot provide the feedback. The `QobjEvo` print will show it has feedback. . The solver method is mostly there for documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1789631286:60,feedback,feedback,60,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1789631286,4,['feedback'],['feedback']
Usability,"@hodgestar Apologies for taking as long, but went on and rebased my PR to 5.0 and addressed some of your comments. In particular, factory methods have been moved out into ordinary functions, and I added a simple string-based format for outcome labels (leaving `Seq` and `Par` for more complex cases as needed). For the notebook, I ran into the slight issue that the qutip-notebooks repo uses a more copyleft license, but in the meantime I put together a notebook at https://gist.github.com/cgranade/7c2a5a0827dddc4281666ad45763b1ec that includes a few examples of the API in use, including for modeling a simple teleportation channel. I still need to address PEP8 issues and add tests, but I think it should be a bit further along; thanks for all your help and feedback! 💕",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-1010581128:205,simpl,simple,205,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-1010581128,3,"['feedback', 'simpl']","['feedback', 'simple']"
Usability,"@hodgestar Hi Simon, really sorry about the delay. ; All the requested changes look good to me. I am happy this is ready to merge this now. . Normally we ask for a new feature PR to be accompanied by an example notebook and a section in the documentation. I guess we can work on the documentation later, it is a bit of a hassle getting the doc build working. However, an example Jupyter notebook would be really nice to go along with this. Can be quite simple - just take the examples from the docstring. Would be good to show the maths as well. We can then build on the notebook as we add more measuring features.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-546811896:453,simpl,simple,453,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-546811896,1,['simpl'],['simple']
Usability,@hodgestar I am not much aware with writing tests. Can you help me write test for progressbar file? How to write a test? How to check coverage for the entire file? How to check coverage for each line of code as to know where and what to add test? From where can I learn more about testing? Any documentation for writing tests specifically for qutip repository?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1464861603:264,learn,learn,264,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1464861603,1,['learn'],['learn']
Usability,@hodgestar I decided to add the `spin_wigner` changes in which I've resolved the normalization issue and indexing problems that were also in the `spin_q_function`. I've added a simple test to check for normalization and real-ness of the spin Wigner.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-894939089:177,simpl,simple,177,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-894939089,1,['simpl'],['simple']
Usability,"@hodgestar I've added some tests for the spin_q_function. At the moment it tests a random density matrix for three different spin values. I'm not very familiar with qutip's style for writing tests, I would normally write a test function that would also take arguments but that doesn't seem to be the norm here. We could also do something similar to the `TestHusimiQ` class of tests. I've had a look at the `spin_wigner` function as well, and I believe that had the same issue of density matrix indexing.; I've re-implemented it (and the `_rho_kq` function) and I've added details to the docstrings including relevant references.; Should I create a separate PR for this or should I expand the scope of this PR?. NB: At the moment I can't think of an easy way to test the spin Wigner function because there is no simpler/alternative definition that I am aware of to verify the implementation against.; There are simple tests such as if the imaginary part is less than some threshold (currently true), does it integrate to 1 (currently not true, not sure why).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617:811,simpl,simpler,811,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617,2,['simpl'],"['simple', 'simpler']"
Usability,"@hodgestar Sure, do I need to be assigned another issue? Can I create new issue for writing tests for progress bar and get assigned to work on it?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1462049113:102,progress bar,progress bar,102,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1462049113,1,['progress bar'],['progress bar']
Usability,"@hodgestar Thanks for doing it!; The custom `m_ops`, as far as I understand, would be of a form `[np.sqrt(coef)*(a+a.dag()), -1i*np.sqrt(coef)*(a - a.dag())]` where `a` would be an annihilation operator for a photon in a mode that is detected, and `coef` represents whatever happens between the emission and the detection (cavity-guide coupling, detection efficiency etc). In the current implementation it would be subset of default `m_ops`, that are formed as; ```python; for c in sso.sc_ops:; m_ops += [c + c.dag(), -1j * (c - c.dag())]; ```. As for the tests, I can think of something like this; ```python; def test_heterodyne_mesolve():; b = 1 # drive amplitude; gamma = 1 # spont. emission rate; eta = 0.3 # coupling efficiency; n_steps = 1000; n_traj = 50; ; H = np.sqrt(eta*gamma) * b * sigmay(); c_ops = [np.sqrt(gamma)*sigmam()]; psi0 = basis(2); times = np.linspace(0, np.pi*2, n_steps). n_tr = 3. sme_het = smesolve(; H,; psi0,; times,; [],; c_ops,; e_ops=[sigmax(), sigmay(), sigmaz()],; store_measurement = True,; dW_factors=[1e-5, 1e-5], # to make tests simpler; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay()],; ntraj=n_traj,; noise=123, # random seed; ); ; assert np.array(sme_het.measurement).shape == (n_traj, n_steps, 1, 2); assert all(np.isclose(np.array(sme_het.measurement).mean(axis=0)[:,0,0].T, np.sqrt(eta)*sme_het.expect[0], atol=2e-2)); ; def test_incorrect_m_ops_heterodyne_mesolve():; ; with pytest.raises(ValueError, match=""The measured operators for the heterodyne method supposed to be pairs of quadratures: m_ops should have even length.""):; sme_het_bad_mops = smesolve(; sigmax(),; basis(2),; np.linspace(0,1,10),; [],; [sigmam()],; e_ops=[],; store_measurement = True,; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay(), np.sqrt(eta)*sigmaz()], # three operators; ntraj=10,; ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548:330,guid,guide,330,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548,2,"['guid', 'simpl']","['guide', 'simpler']"
Usability,@hodgestar The test is now included. It turned out to be quite simple with monkeypatch. Thanks for the suggestion!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1636#issuecomment-939918060:63,simpl,simple,63,https://qutip.org,https://github.com/qutip/qutip/pull/1636#issuecomment-939918060,1,['simpl'],['simple']
Usability,"@hodgestar the `.h` file imported from `base.pxd` makes is a lot simpler.; Changing the header file force recompilation, but the cythonization step is skipped.; If tests passes, it's ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1874#issuecomment-1106675195:65,simpl,simpler,65,https://qutip.org,https://github.com/qutip/qutip/pull/1874#issuecomment-1106675195,1,['simpl'],['simpler']
Usability,"@hodgestar. > I don't know what this measures exactly (e.g. is there clock scaling of some sort so that the measured CPU frequency might not be the maximum CPU frequency?) and it seems a lot of work to get a piece of information that isn't used directly by QuTiP, ... My code implementation is actually very simple. The [script](https://github.com/BitesPotatoBacks/osx-cpufreq/blob/main/osx-cpufreq/main.m) works by measuring the time it takes to execute a decrementing loop (the loop will take a certain amount of CPU cycles to complete based on the CPUs frequency). The loop is executed using inline assembly. The assembly is `volatile` to prevent the loop from being moved and reprioritized by the system (This increases accuracy). Then we do some calculations with some very special numbers and voila -- we've found our CPUs current frequency. I've gotten this trick to work on x86 now as well. > ... so I just fixed the result to 3.2 GHz for now (which according to Wikipedia is the clock speed for current M1s). I believe it would be best to refrain from setting a fixed value of 3.2 Ghz, because this may create issues for future machines with newer silicon that (may) run at higher or lower frequencies. On Apple Silicon, if you _must_ use sysctl, use `sysctl hw.tbfrequency`. This is basically Apple Silicon's version of `sysctl hw.cpufrequency`. The value it returns is still not very accurate, but it varies based on the system silicon, so it will be better than setting a static value. 👍",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1008344027:308,simpl,simple,308,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1008344027,1,['simpl'],['simple']
Usability,"@hodgestar: I'll leave this for a bit if you want to review it, but it's _almost_ all just code that we've already included in `master`. There's several points where things can clearly be improved (`__init__.py`), but that's also the case on `master`, and so far it's not been a super high priority.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1574#issuecomment-861647038:177,clear,clearly,177,https://qutip.org,https://github.com/qutip/qutip/pull/1574#issuecomment-861647038,1,['clear'],['clearly']
Usability,@hodgestar; Can we close this?; We now use simple dict for options and `Options` exist for backward compatibility.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1891#issuecomment-1414283362:43,simpl,simple,43,https://qutip.org,https://github.com/qutip/qutip/issues/1891#issuecomment-1414283362,1,['simpl'],['simple']
Usability,"@jakelishman . - in my case it would be different; - i am using it to train a reinforcement learning agent, which is highly sample inefficient and will take so many steps that even 10 times slower is much slower for a human; - you can refer to this paper from Google's Quantum Artificial Intelligence lab: [Universal quantum control through deep reinforcement learning](https://www.nature.com/articles/s41534-019-0141-3); - it would be great if you guys can add this feature, but i think i am just gonna write my own evolution code right now",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660468848:92,learn,learning,92,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660468848,2,['learn'],['learning']
Usability,@jakelishman @hodgestar. I would like to merge this PR soon.; Is the only missing part is a term for `dtype : type or str`?. Numpy use `data-type` which point to https://numpy.org/doc/stable/reference/arrays.dtypes.html; The closest equivalent we have would be `qutip.core.Data`.; Here would `data-type` works if we have a page in the documentation pointing to it?; Otherwise all I can think is `layer-type` or `qdata-type` which feels wrong. I would prefer to keep the explicit; ```; dtype : type or str; Storage representation. Any data type known to `qutip.data.to` is; accepted.; ```; over creating a new term for users to learn.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1420#issuecomment-847295308:627,learn,learn,627,https://qutip.org,https://github.com/qutip/qutip/pull/1420#issuecomment-847295308,1,['learn'],['learn']
Usability,"@jakelishman Given what I've learned in this issue, I suspect our PyPI wheels were all build with `numpy == 1.19.5`. Does that sound right to you? If it is, I guess I should build all the new wheels with 1.19.5 too? Or should I ""fix"" things and go back to 1.16.6 or oldest-supported-numpy if that is more recent?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-989884557:29,learn,learned,29,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-989884557,1,['learn'],['learned']
Usability,@jakelishman Shall I rebase it after the review or better merge the master into this branch now to resolve the conflicts? The conflicts are minor and I'm pretty clear what caused them.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1444#issuecomment-810016097:161,clear,clear,161,https://qutip.org,https://github.com/qutip/qutip/pull/1444#issuecomment-810016097,1,['clear'],['clear']
Usability,@jakelishman my last comment was written in a bad way. I edited that. Is it clear now?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-739107555:76,clear,clear,76,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-739107555,1,['clear'],['clear']
Usability,"@jakelishman this is great, also thanks @dweigand for this PR. I tried out the function and it is very fast and could be great for specific use cases. My idea was a bit more simple - precomputing the `coherent_dm` operators (using qutip.coherent_dm) and using the `expect` function. But that performs worse that the original `qfunc` as well as this implementation of course. So this is great. I would be happy to merge this but have one thought:. This new implementation is sacrificing the ease-of-understanding of how Q-functions are computed with a very efficient and fast, but complicated class-based implementation. This means that users who want to look under the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_d",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:174,simpl,simple,174,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['simpl'],['simple']
Usability,"@jakelishman well, I haven't paid yet anything on Travis CI platform. However, I used my GitHub account (which I think it has some benefits since it's associated with an educational institution) to connect to the service, then I don't know if there was an exception due to that or it's just simply free.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607483835:291,simpl,simply,291,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607483835,1,['simpl'],['simply']
Usability,"@jakelishman, about the two issues you raised:. 1. Import time related to `import qutip`; I agree with you that in order to make it frictionless for downstream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:783,simpl,simpler,783,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['simpl'],['simpler']
Usability,@jrjohansson ....feedback?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-102937926:17,feedback,feedback,17,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-102937926,1,['feedback'],['feedback']
Usability,"@jrjohansson Thanks for comments, and I am happy you like it!. I will fix things (also, there is some internal stuff). With respect to plots - still I learnt them how to _make_ plots instead of just _using_ them, so after I make fixes I would appreciate . `complex_array_to_rgb` I am exposing it on purpose, not by an accident (see `__init__.py`).; The rationale is following: in QM one works with complex numbers, be it in wave functions, density matrices or other operators. However, I am not aware of cmap-like functions for complex numbers in Scipy (except for some dedicated packages; see also: [my answer to this StackOverflow question](http://stackoverflow.com/questions/15207255/is-there-any-way-to-use-bivariate-colormaps-in-matplotlib/17113417#17113417)). If you do know a more standard/supported/general/canonical method of mapping complex numbers to colors, I would be happy to use it (instead of `complex_array_to_rgb`). Otherwise, having `complex_array_to_rgb` exposed allows plotting other kinds of things.; For example:. ```; imshow(complex_array_to_rgb(a_density_matrix.full()), interpolation='none'); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41377018:151,learn,learnt,151,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41377018,1,['learn'],['learnt']
Usability,"@maij Thanks! The test code looks like a good start. Could you add it to `qutip/tests/test_wigner.py`?. Other tests we could add:. * We could write a more general test that compares the output of spin_q_function to a simpler implementation based on the definition -- something like:; ```python; state = qutip.spin_coherent(spin, theta_prime, phi_prime); direct_q = (state.dag() * qutip.ket2dm(psi) * state).norm() / np.pi; ```; Note: I named the angles `theta_prime` and `phi_prime` to emphasize that we can apply this test to cases where the angles for the state psi and the ones passed to spin_q_function are different. * We should also add a test for passing in arrays of theta and phi (i.e. were we really get out a mesh grid for Q values) since that was the primary use case for which `spin_q_function` was defined. Ideas for future PRs:. * It would be nice to also add tests for `spin_wigner` (I am suspicious of it now because of the problems with spin_q_function). Thank you for looking at these and taking charge of this bit of QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408:217,simpl,simpler,217,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408,1,['simpl'],['simpler']
Usability,"@maij The code is looking good to me. I've requested some changes and after that I'd like to do a final review, but I think we're in good shape. My thoughts on the remaining questions:. > Decide if the spin_wigner function should return only real values be default (as is currently done for the spin_q_function). I'm +1 on returning real values since the Wigner function is real valued and this is more consistent (unless you're aware of any strange cases where it might somehow not be?). > Decide whether to integrate the W function normalization in _rho_kq rather than at the top level. We divide all terms by (2*j + 1) only to end up multiplying it back out at the end which is a waste of time (_rho_kq is called d**2 times, d=2*j+1) . The benefit of leaving it as-is is that it reads like most definitions in literature. I'm +1 on sticking to the definitions in literature unless there is a measured speed penalty. `2*j + 1` likely can't be that big and the small number of arithmetic operations required is probably dwarfed by the matrix multiplications happening. . > Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). Here I would try stick as closely as possible to the previous behaviour of these functions (i.e. cases which worked before should hopefully return the same answer now) and then document clearly what the normalization factor is and how it should be added or removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186:1468,clear,clearly,1468,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186,1,['clear'],['clearly']
Usability,"@mcditoos Thanks more making the PR. Would you mind reverting all the unrelated changes? We don't mind small clean ups, but big clean ups should rather go into separate PRs and it should be clear why they are being made. Once you're ready for this to be reviewed, remove the draft status and ping me on the PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2261#issuecomment-1824959705:190,clear,clear,190,https://qutip.org,https://github.com/qutip/qutip/pull/2261#issuecomment-1824959705,1,['clear'],['clear']
Usability,"@nathanshammah @ajgpitch @Ericgig @quantshah ; Thanks a lot for the feedback and patience. I have fixed the variable names issue, hopefully. I can make time these days. Please advise the next steps.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1066#issuecomment-568178589:68,feedback,feedback,68,https://qutip.org,https://github.com/qutip/qutip/pull/1066#issuecomment-568178589,1,['feedback'],['feedback']
Usability,"@nathanshammah I think it has nothing to do with this PR, I didn't change anything in `qobj.py` where the test failed before. I guess it might have something to do with Erig's commit ""mac without mkl"" and I simply merged it from master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1042#issuecomment-511355307:207,simpl,simply,207,https://qutip.org,https://github.com/qutip/qutip/pull/1042#issuecomment-511355307,1,['simpl'],['simply']
Usability,"@nathanshammah OK, my ""tests"" were just creating instances of `Bloch()` with and without `plt.figure()` instance passed in the constructor and then repeatedly executing the `show()` function. Now after I had a look at `qutip/tests` my small testing snippets indeed don't fit into that. Hence at this stage I don't see the benefit from adding these trivial ""tests"" I did to the repo. Thank you for the review and all the guidance.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-494119661:420,guid,guidance,420,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-494119661,1,['guid'],['guidance']
Usability,"@nathanshammah, @Ericgig, @ajgpitch, @nwlambert, @quantshah, @BoxiLi, @hodgestar. I've updated this PR to match what I understand we agreed on. I've also added complete copyright notices to the documentation, including linking the CC-BY-3.0 licence the documentation text is licensed under, and making it clear that it's the documentation _text_ licensed under CC, and that the code is under 3-clause BSD. I've updated the frontmatter, and added a copyright notice to the index, so it's linked from every page in the documentation releases. I have updated the short copyright notice at the bottom of the documentation pages to say ""Copyright 2011 to 2021 inclusive, QuTiP developers and contributors"" to make it consistent with the source code (for the same reasons). As I've added a `_copyright` Sphinx target, the word ""Copyright"" at the bottom of the documentation is now hyperlinked as well. I didn't explicitly split this into more than one PR, but it's split into separate logical commits, which explain their extent and intent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298:305,clear,clear,305,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298,1,['clear'],['clear']
Usability,"@nathanshammah: It seems that travis fails before it even gets to the testing, when calibrating openmp. I cannot replicate the error on my end, the calibration takes only about a second for me. I did make 535010d more similar to 5501b2e by no longer using numpy.testing.assert_raises, numpy.testing.assert_warns and a ResourceWarning. Instead I use a try-except construction now. That seems to have fixed things, so I suspect that importing/calling one of the functions or the warning makes openmp fail on the rig used by travis. As I'm pretty sure the reason for the previous failure is either a numpy or openmp issue and therefore a hard fix, I would propose to simply not use those functions, the try-except construction does well enough.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-567132755:664,simpl,simply,664,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-567132755,1,['simpl'],['simply']
Usability,"@nathanshammah: already on the agenda. The splitting seems like a good plan. I would have thought that part of making it uniform would be to remove the lines from each file, so it can be centrally managed. That way, only files that have different licence terms need to note it. This is the way that Numpy, Scipy, CuPy, pandas, scikit-learn, etc etc all handle licensing - none of those specify copyright information in each file, and they all use the exact same licence as QuTiP (except CuPy, which is MIT). If we were GPL'd (like mitiq), we'd have to include the licence, as I understand it, but 3-clause BSD only requires you include the licence file itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864092614:334,learn,learn,334,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864092614,1,['learn'],['learn']
Usability,"@nonhermitian can you please code review this when you have time. I've kept the parallel_map functions and I don't really want to meddle with the current implementation of parfor because I think it will break backwards compatibility. Also, I don't really want to work with parfor as it is because I think it is overly complicated and trying to do funny things with the input (for example, I don't even remember what the following lines are supposed to do:. ```; var = [[args[j][i] for j in range(len(args))]; for i in range(len(list(args[0])))]; ```. ) and it also tries to return numpy arrays which I don't think is necessary and it doesn't work well with how I want to use parallel_map in the stochastic module, where the task function returns a tuple of various computation results of different types which should not be put into a numpy array. So for this reason I would like to add these new parallel_map functions to the qutip api. I think that this implementation is cleaner and more easy to understand and use, and it supports using progress bars, so I think this justifies duplicating the functionality of parfor function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/253#issuecomment-63582703:1041,progress bar,progress bars,1041,https://qutip.org,https://github.com/qutip/qutip/pull/253#issuecomment-63582703,1,['progress bar'],['progress bars']
Usability,@pmenczel I updated the PR again to simplify the new Cython code a lot and shift parts to Python. I'm much happier with this version and hopefully it makes it easier for you to understand too.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1498867381:36,simpl,simplify,36,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1498867381,1,['simpl'],['simplify']
Usability,"@quantshah @BoxiLi @hodgestar I have wrapped up the two measurement functions in the `measure` and `measurement_statistics` function which calls the required functions based on whether `ops` is a `list of Qobjs` or a `Qobj`. Do we want the individual functions (especially POVM) to be more granular? Moreover, the docstring for the wrapper function is really clunky (given the case-wise output types). Any ideas on how to make that simpler ?(one idea is to not specify return types and only have parameters given it's bound to be clunky!). ps. I'll fix the tests all at once after we decide on the api",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844:432,simpl,simpler,432,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844,1,['simpl'],['simpler']
Usability,"@quantshah Great work, this seems like exactly what we need. ; We already have a section in the release-distribution document about building the docs, so we can add a bit about rebuilding the previous version docs with `is_latest = False` and uploading. ; I don't think that it is feasible to rebuild all the old docs. Would be a lot of work, as we would have to recreate working envs for the versions. Would seem more feasible to edit the HTML - I guess we could script this, as each guide file would need to be fixed. We could also consider just removing some of the older versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1516#issuecomment-468176031:485,guid,guide,485,https://qutip.org,https://github.com/qutip/qutip/issues/1516#issuecomment-468176031,1,['guid'],['guide']
Usability,"@quantshah: Simon and I had temporarily stepped back from this one at the time, because we weren't entirely confident that the physics was being handled correctly - the initial version of the PR certainly had invalid physics, and it was hard to evaluate the new stuff from that perspective. It's changed since then, and it might be ok now, but it'll be easier to re-review now we've cleared the old context from our minds. About your Choi matrices - right now, `Qobj` doesn't have an `act` method, but that could well be a useful addition. It _does_ have `Qobj.__call__` which does a similar thing in a very few cases, so we could properly beef that up, but we might want to discuss exactly what spec it should have. @MrRobot2211: I very quickly glanced through the diff of this, but there still seem to be several points where I asked for changes that haven't been changed: things like removing unnecessary calls to `np.array`, and explaining _why_ dimensions needed to be changed in some tests. Can you go back through the PR and make sure you've addressed everything? Also, since you're trying to add new functionality, please make sure you add tests of explicit, analytically known cases against the whole matrix, in addition to the properties like the dimensions (also asked above). In a super ideal world it'd be great if you could find a published reference for those tests, but if the maths is simple enough that we can verify it by hand, then showing us would be ok. It could be good practice for the rest of GSoC if you try and go through the diff yourself to spot places that might want clarifying, and fix them ahead of review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-847759512:383,clear,cleared,383,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-847759512,2,"['clear', 'simpl']","['cleared', 'simple']"
Usability,"@quantshah: This has always been the case, and it's part of the installation instructions in the user guide (http://qutip.org/docs/latest/installation.html#platform-independent-installation). If there's anywhere it's missing we should add it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-671444213:102,guid,guide,102,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-671444213,1,['guid'],['guide']
Usability,"@quantshah: what about if we make a PR uniforming all code in QuTiP with `black` and automatically enforce also the 79 line limit? Also, what about adding it to the guidelines for contributions?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1046#issuecomment-529485255:165,guid,guidelines,165,https://qutip.org,https://github.com/qutip/qutip/pull/1046#issuecomment-529485255,1,['guid'],['guidelines']
Usability,"@sahmed95 ok, just to be clear, are we saying merge this and close #691",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/693#issuecomment-300531039:25,clear,clear,25,https://qutip.org,https://github.com/qutip/qutip/pull/693#issuecomment-300531039,1,['clear'],['clear']
Usability,"@sahrak Thank you for reporting this. The parameters for `sesolve` changed slightly since the guide was written and the guide wasn't updated. I will make a PR to fix it shortly, but in the mean time you can run:. ```python; qutip.floquet.fsesolve(H, psi0=psi0, tlist=tlist, e_ops=[qutip.num(2)], args=args); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1663#issuecomment-927605654:94,guid,guide,94,https://qutip.org,https://github.com/qutip/qutip/issues/1663#issuecomment-927605654,2,['guid'],['guide']
Usability,"@sbisw002 I'm closing this in favour of #1819 which applies my simpler fix from #1697 and also adds the necessary deprecation warnings for QuTiP 5. We should continue the development of qutip.lattice in https://github.com/qutip/qutip-lattice. As a first step, we should apply the same simple fix there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1702#issuecomment-1058039020:63,simpl,simpler,63,https://qutip.org,https://github.com/qutip/qutip/pull/1702#issuecomment-1058039020,2,['simpl'],"['simple', 'simpler']"
Usability,"@tacruc for future reference you should really create a new branch on your fork and submit that as a PR for qutip. It's okay in this case, as it is a simple change, but would cause issue if you were possibly making multiple PRs at the same time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/886#issuecomment-399055698:150,simpl,simple,150,https://qutip.org,https://github.com/qutip/qutip/pull/886#issuecomment-399055698,1,['simpl'],['simple']
Usability,"@tesla-cat this is because of the convention between how the bosonic basis and the two-level-system basis, the way ground states are set, as explained [here](http://qutip.org/docs/latest/guide/guide-states.html#qubit-two-level-systems) in the documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1294#issuecomment-646626641:187,guid,guide,187,https://qutip.org,https://github.com/qutip/qutip/issues/1294#issuecomment-646626641,2,['guid'],"['guide', 'guide-states']"
Usability,"@theodotk Thank you for the bug report. I cherry-picked your fix into this PR. Any thoughts on a simple test case we could add? Ideally we could just pass in custom m_ops in something like `test_smesolve_heterodyne` but I don't know what the custom m_ops should be, how to calculate the expected result or how to be sure the right m_ops were used.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424035216:97,simpl,simple,97,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424035216,1,['simpl'],['simple']
Usability,"@vikas-chaudhary-2802 can you add the test to this PR? it can be very simple. if you feel like it will take some time, i can merge this and you can do a separate one later. @ytdHuang thanks for the suggestion, do you think it would be better to use that as the default method? in any case, lets do that in a separate issue/PR",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2371#issuecomment-2042114519:70,simpl,simple,70,https://qutip.org,https://github.com/qutip/qutip/pull/2371#issuecomment-2042114519,1,['simpl'],['simple']
Usability,"A few comments and questions. 1. Why are file separated by function and not by datatype? So adding a new datatype will result in modification im a lot of file making support (PR evaluation) harder.; 2. `__repr__` return a very clean output in `Qobj`. `CSR`'s is quite simple. This is because data layers are never meant to be printed directly?; 3. For solver states, we mostly use Fortran ordered array, not C ordered. Will you support both?; 4. In matmul, you use `malloc`, `calloc`, `free`. It is better to use the python PyDataMem_NEW. I never had any issue, but there can be some on windows: https://github.com/numpy/numpy/issues/8253; 5. `mat_mul` can be used inplace, but no `add_csr`. ; 6. It would be good to have inplace multiplication with a scalar instead of always making a copy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648255315:268,simpl,simple,268,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648255315,1,['simpl'],['simple']
Usability,"A few points which came up:. - We can make the solve call very similar to `mesolve` where the user specifies a Hamiltonian, the coefficients describing the system and the size of the system as an argument dictionary. ```; system = {""N"": 100, ""emmission"": 0.5, ""loss"": 0.1}; pisolve(H, tlist, c_ops, e_ops, args=system); ```; - However this only works for Hamiltonians constructed with some specific operators. As the method is for dicke states only, the distinction between this solver and `mesolve` should be stated clearly. This is to prevent someone trying to pass a generic Hamiltonian. - Checks have to be included to make sure that the Hamiltonian and the operators specified are proper for the dicke states. - Since the user will not be concerned with the matrix M which governs the evolution `dp/dt = Mp`, we should probably find better ways to represent it and perform the dot product to generate RHS. @nonhermitian We have the M matrix as a pure dictionary of {(row, col): val}. We can write our own function for the dot product just by using this dictionary. Or, is it better to convert it into a sparse matrix and use Scipy's dot product function ? Converting from the dictionary to sparse M has some overhead.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332725530:517,clear,clearly,517,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332725530,1,['clear'],['clearly']
Usability,"A great piece of work @Ericgig. This has been wanting for a long time. Such an abstraction of the ODE solver should allow for easier development of other types of solver, and make the physics clearer in the code. I should also mean that we could add in new methods for solving ODEs more easily. Thanks for taking on this massive challenge.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1409#issuecomment-788726639:192,clear,clearer,192,https://qutip.org,https://github.com/qutip/qutip/pull/1409#issuecomment-788726639,1,['clear'],['clearer']
Usability,"A minor documentation issue: the link to the Bloch sphere video, at the end of the [page](http://qutip.org/docs/latest/guide/guide-bloch.html) (with latest =4.2) is broken, as [googlecode]( http://qutip.googlecode.com/svn/doc/figures/bloch_decay.mp4) changed domain (now https://code.google.com/).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/799#issuecomment-466312650:119,guid,guide,119,https://qutip.org,https://github.com/qutip/qutip/issues/799#issuecomment-466312650,2,['guid'],"['guide', 'guide-bloch']"
Usability,"A simple example of a operator that is traceless and not a dm is the charge operator, e.g. `charge(4)`. How would we know a difference in this case without further info?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/474#issuecomment-219623485:2,simpl,simple,2,https://qutip.org,https://github.com/qutip/qutip/issues/474#issuecomment-219623485,1,['simpl'],['simple']
Usability,"Actually it probably doesn't shake out to a single time-dependent operator like I thought it might at the start. You can still do the Taylor expansion to try (you can find a similar result for 3x3 spin matrices to the 2x2 case), but there's not going to be a cancellation I thought there might have been. Right now, QuTiP doesn't support arbitrary time-dependence in collapse operators, so if you can't find a way to write it in that form, you might have to do the integration manually yourself until we've added it - the QuTiP guide [explains how QuTiP does the integration](http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642:528,guid,guide,528,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642,2,['guid'],['guide']
Usability,"After you created a fork to work on #1242, a different PR (#1226) was merged into `master`. It so happens that #1242 and #1226 don't conflict so that merge succeeded, but the new changes you're now trying to make do. This is fundamentally a true merge conflict and so unfortunately there's no fancy way around it, though it could have been avoided if you'd matched the state of our `master` before beginning work here, and it would be a bit easier for you for future PRs to branch off before starting work (GitHub has [some nice material about this workflow](https://guides.github.com/introduction/flow/)). I've rebased your PR onto our `master` and fixed the resulting merge conflict for you. You should _immediately, without doing anything else_ reset your branch state to match mine, and then force-push your changes to GitHub to update the PR. To do this, do; ```bash; git remote add jakelishman https://www.github.com/jakelishman/qutip.git; git fetch jakelishman; git checkout master; git reset --hard jakelishman/Canoming-circuit-patch; git push --force; git remote remove jakelishman; ```; This will destroy anything on `master` that you may have but haven't yet pushed. You should do it anyway, because a lot of the underlying structure has changed from underneath you, and your changes aren't consistent with the current state of `circuit.py`. Please also note that the tests are failing after your modifications in (the current) 10e457e.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121:567,guid,guides,567,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121,1,['guid'],['guides']
Usability,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:48,clear,clear,48,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,1,['clear'],['clear']
Usability,Ahh well then there is no more issues with this. Just waiting for the minor changes to the mcsolver tests to clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300#issuecomment-68425710:109,clear,clear,109,https://qutip.org,https://github.com/qutip/qutip/pull/300#issuecomment-68425710,1,['clear'],['clear']
Usability,"Ahh, you're right. I never managed to get it to work right before now, but I just tried again and managed to get `DeprecationWarning` to show up in all of `python warn.py`, direct calls from the IPython terminal and from Jupyter notebooks. I think perhaps I learned about stacklevel _after_ the last time I tried to get that to work. My reading of the docs before that had always just ended up with me assuming that somebody using a library interactively was an ""end-user"", so `FutureWarning` was appropriate. I'll change this PR when I've got time - I needed to fix up a few warning controls in tests before it was ready anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-814036449:258,learn,learned,258,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-814036449,1,['learn'],['learned']
Usability,"All builds pass, besides the build on Python 3.7 without Cython. I would still merge this PR and focus on that issue separately. . Now we need to update places where `nose` is mentioned, I found these in `qutip-doc`; - the [changelog](https://github.com/qutip/qutip-doc), ; - the instructions on the dependencies in the documentation [installation instructions](https://github.com/qutip/qutip-doc/blob/402ec10de7a314ba9f124ddac7514621e92496df/installation.rst), ; - and [development guidelines](https://github.com/qutip/qutip-doc/blob/2ffd6d1cc581e858674d43fe97a9297e9476a278/qutip_dev_contrib.md).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938:483,guid,guidelines,483,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938,1,['guid'],['guidelines']
Usability,"All looks good to me. Thanks a lot for changing all of that - this is all clearly good stuff and should in principle be merged. We should the Linux tests again after #1381 is merged because there is Linux-specific code in the changes that needs to be tested (the tests fail for unrelated reasons at the moment). I can't see any reason why the changes here should cause any true test failures, though - it's more a formality.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648:74,clear,clearly,74,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648,1,['clear'],['clearly']
Usability,All of the individual terms in the dense version of the time-dependent BR solver are now tested and working. Now I need to write the codegen module. A sparse version is just a simple extension once the codegen is done.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/676#issuecomment-295576774:176,simpl,simple,176,https://qutip.org,https://github.com/qutip/qutip/pull/676#issuecomment-295576774,1,['simpl'],['simple']
Usability,"All open issues and PRs have now been labeled with the `code` and `physics` labels, some of them with both. I would add in the contributing to QuTiP guidelines something about this for new issues and PRs.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1130#issuecomment-560242929:149,guid,guidelines,149,https://qutip.org,https://github.com/qutip/qutip/issues/1130#issuecomment-560242929,1,['guid'],['guidelines']
Usability,"Also, I like the second visualization which is linear and not circular. It helps to clearly see different submodules. So, if you are trying this then start with that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469794023:84,clear,clearly,84,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469794023,1,['clear'],['clearly']
Usability,"Also, instead of adding a third entry to the nested list characterizing the time-dependence, I think the real and imag parts should be in the [1] list entry as a tuple. That way, all of the time-dependence is in a single list item. We may in the future want to add additional items to the list (e.g. on-off times for the time-dependent terms.). I also think that we should get some feedback from @ajgpitch and @cgranade. Chris has some experience with opencl, and he probably is bette suited for feedback than myself. . Another question would be the issue of maintainability. If, for some reason, you are unable to address bug issues or incompatibilities with future QuTiP versions, then can we support this large code submission without having authored it ourselves. For instance, the mcsolve_f90 routine has largely been non-maintained since Arne added it years ago.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-259879928:382,feedback,feedback,382,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-259879928,2,['feedback'],['feedback']
Usability,Any new progress on this? The API doc is generated successfully. Although it would be nice to have more detailed description to each functions. The rendered user guide now reads like; ![image](https://github.com/qutip/qutip/assets/12125783/e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07); with names as strings. It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians. ![image](https://github.com/qutip/qutip/assets/12125783/ad856f69-e0f2-49a2-9ab0-f88e84444373),MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2154798793:162,guid,guide,162,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2154798793,3,['guid'],"['guide', 'guide-tensor']"
Usability,"Anything we do will be made on the `dev.major` branch, where the constructor is _much_ simpler and easier to work with, which hopefully should make things rather easier for you. The dimensions objects will probably change a lot before then as well (they should in principle accept any type, it's just historical that they only accept `list`). The `Qobj` constructor is intended to allow the first argument to be passed positionally, but all others are _expected_ to be keyword-only. We'll probably start enforcing those semantics from 5.0 onwards (we need to issue deprecation warnings before we change behaviour). Answers to questions:; - For tensor products, we use the same ordering as `np.kron`. The column-stacking convention is about the conversion of operators into operator-kets when moving to the superoperator formalism.; - In theory it should recognise a suitable `dims`, but right now construction will be faster if you provide `type='super'` as well. Construction speed is hugely improved in `dev.major`. You only need to define `superrep` if you're giving us a Choi (`superrep='choi'`) or chi (`superrep='chi'`) matrix instead.; - No, it should really be any indexable quantity (requiring list is a historical artifact, not a conscious choice). The entire parsing structure of dimensions objects are going to change in 5.0 (though the list structure will still work). This should even give you more freedom, if you need it - I've got some plans for vastly improved handling of restricted-entry Hilbert spaces (basically spaces that are small embeddings into a larger space that's all 0).; - I am very strongly against accepting this (like I said above):. > Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions.; ; To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. You can see that it didn't work as intended, because they've had to add `__array_fu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:87,simpl,simpler,87,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['simpl'],['simpler']
Usability,"Apologies for another long delay. I'd be happy to hop on a video call sometime to discuss the design. I think the `__qutip_qobj__` interface is likely to remain fairly simple and be just:; ```python; def __qutip_qobj__(self, copy=True):; """""" Return a Qobj representation of this object. Parameters; ---------------; copy : {True, False}, default True; If True, a new independent Qobj should be returned. If False, a reference to an existing Qobj; may be returned. Returns; ----------; Qobj; The Qobj representation of this object.; """""" ; return qutip.Qobj(self._stuff, copy=copy); ```; and we can figure out how to make that work on our side. How that looks under the hood depends quite a bit on whether the `Data` object will grow `dims` support or not. We have another use case for `dims` on the data layer (a tensor network data backend that we're starting work on) but it is a bit of a philosophical shift in what the `Data` layer is, so we'll need to think carefully (e.g. all `Data` operations would have to keep track of `dims` which is a big change; and it's also a bit strange because the operations themselves are just 2D matrix operations, where dims are meaningless). @PhilipVinc I'm not sure if we discussed this before, but do you have some short code snippets showing how you see this Qobj support being used in user code? Apologies if I missed such examples elsewhere in the discussion already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-951087841:168,simpl,simple,168,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-951087841,1,['simpl'],['simple']
Usability,"Arne,. Please propose your patch in a PR on our Github. So long as it is; mathematically sound, then the context does not matter in this case. If you need any advice on how to do this, then let us know. Email me direct; if you prefer. alex.pitchford@gmail.com. Thanks. Alex. On Thu, 21 Jun 2018 at 09:31, Arne Hamann <notifications@github.com> wrote:. > I use the qutip to do some Grover simulations. having a Hilbertspace of; > Grover an an additional entangled Hilbert space. In a simpler version there; > is only one state in the entangled Space so the program automatically; > chooses dimension 1.; > And then there are allot of errors coming because of this qutip error.; > At the moment I fixed it using a patched qutip version.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/823#issuecomment-399020891>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7QOoYa2vq7kgVYNcZdxB3vxO3FJnks5t-1n4gaJpZM4SNkIK>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399033847:483,simpl,simpler,483,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399033847,1,['simpl'],['simpler']
Usability,"As I mentioned in #853, I wonder if it's possible to completely encapsulate any use of sparse matrices to allow for different implementations, assuming a common interface. This would support both int32 and int64, as well as any other specialized implementation anyone might want to use. Obviously, this falls into the ""quite a bit of work"" category, assuming it's possible at all. Personally, I also want to clarify that in #853, I wasn't thinking clearly when I titled it ""moderately big tensor products"" (obviously, it was an insanely large product). I don't actually foresee needing anything bigger than int32. Is there a CPU-time penalty for switching to int64? If so, I would consider that more of a downside than an increase in memory usage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-382528173:448,clear,clearly,448,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-382528173,1,['clear'],['clearly']
Usability,"As a comparison, here's the output of `matrix_histogram` from [the example in the _current_ build of the docs](https://qutip.org/docs/latest/guide/guide-visualization.html#visualizing-operators) (QuTiP 4.6.2):. ![QuTiP 4.6.2 guide-visualization-8](https://user-images.githubusercontent.com/5968590/122970595-06e9dc00-d386-11eb-9905-ad65f9254c0a.png). compared to the version produced by this PR:. ![this PR guide-visualization-8](https://user-images.githubusercontent.com/5968590/122970672-19641580-d386-11eb-973b-39423e53637c.png). The original certainly isn't great, but I think its defaults have produced a somewhat better result in this case. It might be worth having a look at some of the defaults here, particularly with regards to the z-axis tic labelling. While we're at it, the rainbow colour scheme is not a good choice - it'd be much better to use a diverging colourmap, and preferably something a bit more perceptually uniform. ---. I'm not completely sold on the idea that our functions should take so many different optional arguments. We return the figure and axes instances, which means anything the user can do anything that's basic matplotlib commands - we don't need to reimplement their interface. Things like the figure size, azimuth and elevation are particular examples of this - it's very simple to set them using matplotlib's interface, and we don't really provide any added benefit by having the options here. Another is the truncated colourbars: why not only accept a `cmap` argument, and allow the user to pass anything that `matplotlib.pyplot.plot` would accept? Then the interface to our function is much simplified, and the user has as much (more, even) control over the colouring.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1573#issuecomment-866187912:141,guid,guide,141,https://qutip.org,https://github.com/qutip/qutip/pull/1573#issuecomment-866187912,6,"['guid', 'simpl']","['guide', 'guide-visualization', 'guide-visualization-', 'simple', 'simplified']"
Usability,"As a minor note, as of qutip 4.5 you can achieve the tensor product basis state creation simply with; ```python; qutip.basis([2]*n_qubits, [0]*n_qubits); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600614619:89,simpl,simply,89,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600614619,1,['simpl'],['simply']
Usability,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:1531,simpl,simply,1531,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,1,['simpl'],['simply']
Usability,"As mentioned in the commit comment, this latest change was simply a return to something that works. How it got broken is a mystery.; Regarding this pull request as a whole, the changes are just small fixes to some feature that has been in the library from the beginning. I have tried to tidy it up a few times, but I appreciated that more work is required. This I would prefer to do in some future pull request.; To be clear, the default behaviour does not write anything to the file system.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/313#issuecomment-73526258:59,simpl,simply,59,https://qutip.org,https://github.com/qutip/qutip/pull/313#issuecomment-73526258,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"As this was a simple bug fix and all tested passed, then merging now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/563#issuecomment-263523282:14,simpl,simple,14,https://qutip.org,https://github.com/qutip/qutip/pull/563#issuecomment-263523282,1,['simpl'],['simple']
Usability,"Awesome, I'll do my best!. > Note that this would be a PR againt the `dev.major` branch. Does this entail any extra steps not encompassed in the contributing guidelines, or is it just a matter of branching from and PRing to `dev.major` instead of `master`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1893#issuecomment-1147241501:158,guid,guidelines,158,https://qutip.org,https://github.com/qutip/qutip/issues/1893#issuecomment-1147241501,1,['guid'],['guidelines']
Usability,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:1673,learn,learning,1673,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,1,['learn'],['learning']
Usability,"Can you fully show your build process, and did this work with a previous version of QuTiP? It builds fine for me from pip sdist on all major platforms with a simple; ```; pip install qutip; ```; and the sdist of 4.5.2 seems to be missing the same file. Officially we don't support building with OpenMP from pip sdist (only git), but to be fair, it should have worked. In the interests of better semantics, can you change the new line in `MANIFEST.in` to; ```; graft qutip/**/src; ```; Technically there's only the one file that doesn't get tagged in (I hope), but logically the principle is that anything in a `src` directory should be distributed in the `sdist`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343:158,simpl,simple,158,https://qutip.org,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343,1,['simpl'],['simple']
Usability,"Changes to the test:; ```; case_1= repr(QobjEvo([qeye(3), lambda t: t])); expected_repr_1= 'QobjEvo: dims=[[3], [3]], shape=(3, 3), type=oper, superrep=None, isconstant=False, num_elements=1'; assert case_1 == expected_repr_1. case_2= repr(QobjEvo(qeye(2))); expected_repr_2= 'QobjEvo: dims=[[2], [2]], shape=(2, 2), type=oper, superrep=None, isconstant=True, num_elements=1'; assert case_2 == expected_repr_2; ; case_3= repr(QobjEvo(basis(5, 2))); expected_repr_3= 'QobjEvo: dims=[[5], [1]], shape=(5, 1), type=ket, superrep=None, isconstant=True, num_elements=1'; assert case_3 == expected_repr_3. X = sigmax(); S = spre(X) * spost(X.dag()); case_4= repr(QobjEvo(to_choi(S))); expected_repr_4= 'QobjEvo: dims=[[[2], [2]], [[2], [2]]], shape=(4, 4), type=super, superrep=choi, isconstant=True, num_elements=1'; assert case_4 == expected_repr_4. case_5= repr(QobjEvo([[qeye(4), lambda t: t], [qeye(4), lambda t: t]], compress=False)); expected_repr_5= 'QobjEvo: dims=[[4], [4]], shape=(4, 4), type=oper, superrep=None, isconstant=False, num_elements=2'; assert case_5 == expected_repr_5; ```. Changes to the `cython` code have also been undone. @Ericgig @AGaliciaMartinez Kindly let me know if there are any more changes to be done.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111#issuecomment-1472176308:1137,undo,undone,1137,https://qutip.org,https://github.com/qutip/qutip/pull/2111#issuecomment-1472176308,1,['undo'],['undone']
Usability,"Could you send the example?; If it's constant, I am surprised that you cannot get under one minute after converting to csr. Looking back at the code and it's clearly optimised for dense. ; `from_eigbasis` does something like `Dense @ CSR @ Dense.dag()`, since we don't have `Dense @ CSR` it convert to dense representation. It would work better with anything but CSR...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2530#issuecomment-2400673404:158,clear,clearly,158,https://qutip.org,https://github.com/qutip/qutip/issues/2530#issuecomment-2400673404,1,['clear'],['clearly']
Usability,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:245,simpl,simple,245,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Dear @HtPsi , I ran your example code and I got the results as,. ```; >>> import matplotlib.pyplot as plt; >>> import numpy as np; >>> from qutip import *; >>> delta=0.2*2*np.pi;; >>> eps0=1.0*2*np.pi;; >>> A=2.5*2*np.pi;; >>> omega=1.0*2*np.pi;; >>> H0=-delta/2.0*sigmax()-eps0/2.0*sigmaz(); >>> H1=A/2.0*sigmaz(); >>> args={'w':omega}; >>> H=[H0,[H1,'sin(w*t)']]; >>> T=2*np.pi/omega; >>> f_modes_0, f_energies = floquet_modes(H, T, args); >>> print(f_modes_0, f_energies); [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket; Qobj data =; [[ 0.72964231+0.j ]; [-0.39993748+0.55468199j]], Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket; Qobj data =; [[0.39993748+0.55468199j]; [0.72964231+0.j ]]] [-2.83131211 2.83131211]; ```; So it is definitely not an issue of the source code. I advise that you try to install the linux box for windows from the simple instructions for Windows 10 : https://docs.microsoft.com/en-us/windows/wsl/install-win10. Then, you can just install QuTiP again like a standard Linux user and run the floquet solver directly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854#issuecomment-392535672:877,simpl,simple,877,https://qutip.org,https://github.com/qutip/qutip/issues/854#issuecomment-392535672,1,['simpl'],['simple']
Usability,"Dear @bencbartlett, thanks for implementing all the changes. If you agree that a class-based implementation is better then you can go ahead and combine the two main functions into a class and we can get this merged soon. . However, let us wait for a day to get some feedback from @nonhermitian and @ajgpitch on this. Otherwise, I am in favor of having a cleaner class-based implementation of your module.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-385944128:266,feedback,feedback,266,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-385944128,1,['feedback'],['feedback']
Usability,"Dear Ahmed,. One issue is the way you are sending c_ops to mesolve. It should be a list; of separate operators, like; c_ops=[cmath.sqrt(gamma_phi/2)*sz, cmath.sqrt(gamma_minus)*sm]. not sure if this fixes your issue. On Wed, Jan 20, 2021 at 12:12 AM Ahmed Malik <notifications@github.com>; wrote:. > This code produces an animation of the Bloch sphere vector evolution. I; > have implemented a rotating frame approximation as defined by H. The goal; > is to model T1 and T2 decay. I am still experimenting with different; > gamma_phi and gamma_minus values, but right now they're big enough to have; > a visible effect over the 10^-7 time scale that's being plotted. Right now,; > I am only plotting state_z_plus so I can focus on the T1 decay from 1 to; > -1. However, as the animation and graph indicate, it seems to stop short of; > -1 and I don't see why that should be happening. I appreciate any feedback.; >; > %matplotlib inline; > import matplotlib.pyplot as plt; > import numpy as np; > import qutip as q; > import cmath; > import matplotlib as mpl; > from mpl_toolkits.mplot3d import Axes3D; >; > rc_dict = {; > ""figure.subplot.bottom"": 0.11,; > ""figure.subplot.hspace"": 0.2,; > ""figure.subplot.left"": 0.125,; > ""figure.subplot.right"": 0.9,; > ""figure.subplot.top"": 0.88,; > ""figure.subplot.wspace"": 0.2,; > ""figure.figsize"":(10,10/1.61),; > ""axes.grid"": True,; > ""text.usetex"": True,; > ""grid.linestyle"": "":"",; > ""grid.color"": ""black"", #; > ""legend.fontsize"": 20,; > ""lines.linewidth"": 2.5,; > ""axes.linewidth"": 1.5,; > ""font.family"": [""serif""],; > ""font.sans-serif"": ""Times New Roman Bold"",; > ""font.size"":26,; > }; > plt.rcParams.update(rc_dict); >; > qutip_options = q.Odeoptions(; > store_states=True,; > nsteps=20000000; > ); > si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); > sp, sm=q.sigmap(), q.sigmam(); > state_z_plus=q.basis(2,0); > state_z_minus=q.basis(2,1); > state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); > state_x_minus=1.0/cmath.sqrt(2)* (q",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937:902,feedback,feedback,902,https://qutip.org,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937,1,['feedback'],['feedback']
Usability,"Do you get the same behaviour with QuTiP 4.5.0 in the same environment? The offending parts of `qutip/__init__.py` have been there since then, so it shouldn't be new in 4.5.2 at least. I can't reproduce the error unless `pyximport.install()` has already been run before QuTiP is imported (e.g. if I do `import pyximport; pyximport.install(); import qutip` or `importlib.reload(qutip)`). We have `qutip/__init__.py` organised so that we don't enable `pyximport` until after we've done the test for `qutip.cy.openmp.parfuncs`: first we do. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L100-L105. and only after that do we. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L124-L126. In your error it's trying to build `qutip.cy.openmp.parfuncs`, and the only line that ever attempts to import that (in Python space) is line 101 above in `__init__`. It can only attempt to Cythonize files if `pyximport` is activated, but `qutip` doesn't activate that til a few lines later. It's certainly still a bug that this error appears if you've manually activated `pyximport` before (which would definitely cause it), but I'm struggling to find any other reason that the error could appear. We're looking to simplify the handling of OpenMP in a later version, and this buggy check is certainly a good reason to expedite that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290:1292,simpl,simplify,1292,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290,1,['simpl'],['simplify']
Usability,Do you have time to add some of the documentation for krylovsolve to the QuTiP documentation? Converting the example Jupyter notebook and blog post to a guide (under `doc/guide/` in the qutip repository) might be one sensible approach.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1668#issuecomment-1097168085:153,guid,guide,153,https://qutip.org,https://github.com/qutip/qutip/issues/1668#issuecomment-1097168085,2,['guid'],['guide']
Usability,"Don't overthink anything in lattice, it was rough to get anything usable from that GSoC. We only checked that the functions worked, but were lenient about the style and code-structure.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1313#issuecomment-655156522:66,usab,usable,66,https://qutip.org,https://github.com/qutip/qutip/pull/1313#issuecomment-655156522,1,['usab'],['usable']
Usability,"Early thought:. The `solver.add_feedback` approach doesn't look too bad, but it does seem a bit odd because on does to specify the state parameters when constructing the operators that the define the system -- i.e. H, c_ops, etc. Could we not expose the feedback on the QobjEvo itself so that users can then do:. ```python; H = QobjEvo([op, lambda t, ket: bra @ ket], feedback={""ket"": ""qobj""}); ...; ```. or; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); H.add_feedback(ket=""qobj""); ...; ```. or even; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); solver = Solver(...); solver.rhs.add_feedback(ket=""qobj""); ```. Thoughts?. It will get a bit trickier for the feedback that is less easily available from the state, but perhaps solvers can just check whether the ops they're using need the special feedback?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538:254,feedback,feedback,254,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538,4,['feedback'],['feedback']
Usability,"Every `Qobj` created by qutip have `dims[0]` and `dims[1]` being list. `dims=[2, 2]` is an error that we should catch. The main issue is that there is no clear documentation or tests that clearly says what is a valid dims format. . There are some strange dimension that are produced by our function that would raise an error with `np.stack` like; `tensor(operator_to_vector(oper), oper)` but I don't think we should accept these kind of `Qobj` in the first place, so I am fine failing there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366:154,clear,clear,154,https://qutip.org,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366,2,['clear'],"['clear', 'clearly']"
Usability,"Every time you open a new terminal, you will need to activate the conda environment by `conda activate qutip-env`. QuTiP is only installed in this environment. If you are interested, you could check https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html for details.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-736060302:251,guid,guide,251,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-736060302,1,['guid'],['guide']
Usability,"Everything else works correctly the issue appears when going to high dimensions only, 8 to be clear. I tried myself on other environments and as long as scipy is changed the instability in 8 dimensions disappears, I do not imagine what type of error can appear only in big dimensions and in a specific scipy version other than a numeric stability in the scipy version itself. Do you have any guess?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-817212665:94,clear,clear,94,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-817212665,1,['clear'],['clear']
Usability,"Example implementation of `Qobj(thing)` with caveat noted below:; ```python; # qq.py; """""" A quick experiment with a Qobj creation API. """""". import qutip; import qutip.core.data. class NetketThing:; """""" An object with a __qutip_qobj__ method. """"""; def __init__(self, stuff):; self._stuff = stuff. def __qutip_qobj__(self, copy=True):; return qutip.Qobj(self._stuff, copy=copy). def _has_qutip_qobj_method(arg):; return getattr(arg, ""__qutip_qobj__"", None) is not None. def _call_qutip_qobj(arg, shape, copy=True):; # Note 1: shape argument intentionally ignored here -- arg should already; # know its dims and shape (possible a sanity check would be good); # Note 2: unfortunately, the .data object does not know the dims of; # of the Qobj, so the dims are lost. :/; return arg.__qutip_qobj__(copy=True).data. qutip.core.data.create.add_creators([; (_has_qutip_qobj_method, _call_qutip_qobj, 10),; ]); ```; Example usage:; ```python; # try_qq.py; """""" Trying out the experiment. """""". import qutip; import qq. nk = qq.NetketThing([0, 2]); q = qutip.Qobj(nk); qn = q.norm(); print(q); print(qn); ```; Explanation:; * `qutip.core.data.create` is the new Qobj data layer creation dispatcher. It's already called by `Qobj.__init__` after a few hardwired cases.; * We register a creator (i.e. a pair of functions) with priority 10. The first function checks whether `__qutip_qobj__` exists and the second function calls it if it does. Caveat:; * The creator provides no way to retrieve the `dims` from `arg` if the `arg` already knows what the `dims` should be. I can see a lot of uses for this so I propose we fix this part now regardless. Bonus:; * Adding this as a default creator gives us a good way to keep the creator list short while still supporting simple conversion of many objects to Qobjs in a flexible way. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908336732:1750,simpl,simple,1750,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908336732,1,['simpl'],['simple']
Usability,"Firstly, just to underline @jakelishman comment. We *cannot* change the public interface unless we make a new major release. I also don't like the `.N` property, but it snuck in before my time. We could look to change this in v.5, but not before. . It seems this PR does contain some enhancements that are not part of #1209. However, @mlaguna10 did seem to make quite clear that they were already working on the issue. I believe #1209 is ready to merge, but we'll wait for @BoxiLi to confirm. . So what I suggest is that we merge #1209. @MartinSandeCosta can then merge the master into this PR and see what is left that adds to enhancement request outlined #1208. Assuming (with good reason) that there are valuable additions, then we will merge this too. Thanks everyone for contributing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345:368,clear,clear,368,https://qutip.org,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345,1,['clear'],['clear']
Usability,Floquet related examples in `doc/guide/scripts` fail. ; I am looking at it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1850#issuecomment-1095190980:33,guid,guide,33,https://qutip.org,https://github.com/qutip/qutip/pull/1850#issuecomment-1095190980,1,['guid'],['guide']
Usability,"For `guide-basics.rst` and `guide-overview.rst`, we will keep #1768 where Asier did a review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762#issuecomment-1015728713:5,guid,guide-basics,5,https://qutip.org,https://github.com/qutip/qutip/pull/1762#issuecomment-1015728713,2,['guid'],"['guide-basics', 'guide-overview']"
Usability,"For future posterity: we simply can never issue `-march=native` commands to build wheels for distribution via pip or conda; we have to have these appeal to the lowest common denominator instruction set. We have hard-coded SSE2 instructions in `zspmv.cpp`, but these are ancient, and that's probably the baseline we need to support at least for now (it's been working without issue for a few years now). Computing clusters don't have the latest and greatest hardware, but usually are just a weird amalgam of other bits. The CFLAGS changes were merged already, so I'm closing this now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/951#issuecomment-809676750:25,simpl,simply,25,https://qutip.org,https://github.com/qutip/qutip/issues/951#issuecomment-809676750,1,['simpl'],['simply']
Usability,"For point 2: adding marks right now will cause conflicts, but if #1181 gets merged then it'll be much simpler. The main issue is that a lot of the testing structure has changed for tests up to `test_mcsolve.py` alphabetically, and so in general the tests are just not the same. The principle is pretty straightforwards - just like #1181 introduces a `requires_cython` mark, we would add `uses_cython`, `uses_mkl` and `uses_openmp` marks. These would be even simpler to add than `requires_cython` because unlike it, they don't require any test-generation logic at all. The change would simply be to add them to `pytest.ini`, mark the requisite functions and then change the pytest invocation of the specialised test to `pytest -m ""uses_cython""` or whatever. As far as I'm aware, the only parts of their codebase which modify their behaviour based on whether `Cython` is available is `QobjEvo`. The other parts (like `brmesolve`) just don't work if Cython isn't there. The MKL tests would become very short; by my reckoning, MKL is only used by `steadystate` and `countstat`. OpenMP is much more pervasive, as `sesolve`, `mesolve` and `brmesolve` all use it, and parts which depend on those are generally the slowest tests. The short tests could just become `pytest -m ""not slow""`? That's not super speedy, but it takes about half the time, maybe. If you want more, then a good starting point is `pytest --durations=0` which will tell us which tests are the slowest (perhaps that was what you already did when marking the slow ones?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776:102,simpl,simpler,102,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776,3,['simpl'],"['simpler', 'simply']"
Usability,"For these kind of problems, you should use `smesolve`, you can see what equation it solve [here](https://qutip.org/docs/latest/guide/dynamics/dynamics-stochastic.html#stochastic-master-equation). `general_stochastic` should be used only in last resort. While it allow to use the stochastic solver mechanic with your own functions, it use the same options and mix of `Qobj`, `Qobj.data` and `array`, etc., without the layer to glue everything together... Here, the issue is that it use the same options as `ssesolve` and `smesolve`, which per default normalize the state before computing the expectation values, but do not know that it's supposed to be an density matrix, thus normalizing the state as if it was a ket... You can pass `normalize=False` to `general_stochastic` to obtain results closer to `mesolve`, but I would recommend not to use `general_stochastic` in the state it is now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1935#issuecomment-1156499606:127,guid,guide,127,https://qutip.org,https://github.com/qutip/qutip/issues/1935#issuecomment-1156499606,1,['guid'],['guide']
Usability,"From my point of view parallel_map is superior to the old parfor function, because of it simpler and has more features, so we could simply have parfor call parallel_map as I've done in the ipynbtools. However, the problem with this is that we will likely break backwards compatibility, which can be annoying for users using the existing parfor function (myself included, in older projects). . Anyways, I'll merge this soon and we can think about unification of parfor and parallel_map in the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/253#issuecomment-63926759:89,simpl,simpler,89,https://qutip.org,https://github.com/qutip/qutip/pull/253#issuecomment-63926759,2,['simpl'],"['simpler', 'simply']"
Usability,"General comment about plotting on the Bloch sphere:. QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are *not* required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix. There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested. I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now. I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling. My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552:856,intuit,intuitive,856,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552,1,['intuit'],['intuitive']
Usability,"Good catch. I think we can add a check [here](https://github.com/qutip/qutip/blob/master/qutip/qobj.py#L253) and [there](https://github.com/qutip/qutip/blob/master/qutip/qobj.py#L300) in `qutip.qobj`. ```; elif inpt is None:; # initialize an empty Qobj with correct dimensions and shape. if any(dims):; if shape:; check_dims(dims, shape); N, M = np.prod(dims[0]), np.prod(dims[1]); self.dims = dims; ; elif shape:; N, M = shape; if dims:; check_dims(dims, shape); self.dims = [[N], [M]]; ```; where we can define a simple `check_dims` function for consistency checks. But this is also really not a bug perhaps but more to do with minimizing user mistake. ; @ajgpitch",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/978#issuecomment-489461187:515,simpl,simple,515,https://qutip.org,https://github.com/qutip/qutip/issues/978#issuecomment-489461187,1,['simpl'],['simple']
Usability,"Good point, I didn't notice that it is under the basic guide section. What about add it as a subsection (Quantum Gates) after [Qubit (two-level) systems](https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-states.html#qubit-two-level-systems).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2141948066:55,guid,guide,55,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2141948066,3,['guid'],"['guide', 'guide-states']"
Usability,"Good point. It used to be possible to disable the progress bar when we still used Qt, but for some reason that feature got lost when we restructured the code to use the text-based progress bar. In PR #220 I've added back this feature. You should now (when the PR is merged) be able to do. ```; >>> result = mcsolve(...., progress_bar=None); ```. to disable the progress bar.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/219#issuecomment-53663345:50,progress bar,progress bar,50,https://qutip.org,https://github.com/qutip/qutip/issues/219#issuecomment-53663345,3,['progress bar'],['progress bar']
Usability,"Good points. I suggest to simply remove the comment in `test_qobj`, and change to pytest in the `setup.py`. Something like what's [here](https://doc.pytest.org/en/3.0.4/goodpractices.html#integrating-with-setuptools-python-setup-py-test-pytest-runner) should work (basically changing `nose` with `pytest`). It seems however that testing it's a thorny [issue](https://github.com/pypa/setuptools/issues/1684), but these changes for the time being make the whole package at least consistent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587:26,simpl,simply,26,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587,1,['simpl'],['simply']
Usability,"Good work. ; Removing pxi is great. This was really old cython. I would have put solvers in core since the core usage of qutip is evolution of quantum systems. But I am thinking more in what would stay in the main package and what would become spin-off (qip, control). . The OpenMP check seems too complicated for something that should be simple. I would like to remove the need of this flag. But for now, if you set it in the `__init__` of `core` instead of `qutip`, could you then not use the `try` as before?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282#issuecomment-638485105:339,simpl,simple,339,https://qutip.org,https://github.com/qutip/qutip/pull/1282#issuecomment-638485105,1,['simpl'],['simple']
Usability,"Great feedback @hodgestar. Let me add this: It would be nice to clarify explicitly benchmarks from the beginning. ; A bit like you did when mentioning the 14 qubit cap for QFT gate simulation. ; For example, goals of this would be:; - For qutip/qutip: Faster `mesolve` (add details of a typical example with current times/bottlenecks); - - For qutip/qutip: More qubits simulated in `mesolve` and `steadystate` ; - For qutip/qutip-qip: Capability to simulate more qubits (add current example with benchmark + code). For all examples we could add details of a typical example with current times/bottlenecks (we could use gists). This can be of very wide interest, but finding physical examples of interests and use cases would be helpful. For example, qubit space nevertheless explodes exponentially. But adding even a bit more qubits in `steadystate` can impact state of the art simulation of dissipative phase transitions in many-body systems. I also think that having a sort of code design template could help. This is a more general point triggered by this issue. This may be a QuTiP idea but looks at some point more technical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489:6,feedback,feedback,6,https://qutip.org,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489,1,['feedback'],['feedback']
Usability,"Happy to create a notebook with some examples. Should it live at https://github.com/qutip/qutip-notebooks/tree/master/docs/guide ? If so, I'll make a PR there. For documentation, do I add them at https://github.com/qutip/qutip-doc/blob/master/apidoc/functions.rst?. Re measurement and teleportation -- that sounds like ordinary quantum teleportation, and probably would be a fun test to write once we get there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-547162310:123,guid,guide,123,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-547162310,1,['guid'],['guide']
Usability,"Hardware info is only used to get the number of cpus... It may hve been used for benchmark in the past, it also fetch the cpu frequency and memsize... I would be for simply removing it in the next version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395#issuecomment-736660709:166,simpl,simply,166,https://qutip.org,https://github.com/qutip/qutip/issues/1395#issuecomment-736660709,1,['simpl'],['simply']
Usability,"He did - he's the original feature requester, but given super super weird interactions with ufuncs (see #1433), it's not so clear to me that it was _necessarily_ the right idea to implement especially now it's causing problems with how numpy arrays are used in the library. There always was a work-around; allowing `np.array(qobj)` was more to save him from writing `x = x.full() if isinstance(x, Qobj) else np.asarray(x)`. That said, I came round to the idea more as I read more about the control we can have over the rest of the numpy infrastructure. We can allow `np.array` on `Qobj` (satisfying Michael's original request), and with a little bit of extra code we can prevent all the super weird ufunc/implicit casting behaviour, because `Qobj` shouldn't be able to implicitly interoperate with raw arrays. I know in my personal code I'd rather use `Qobj.full()`, but I no longer think it's _wrong_ to allow `np.array(qobj)` given that other people like it, even with these numpy 1.20 problems. It does make it difficult to put `Qobj` in arrays, but numpy 1.20 has ruled out being able to have `np.array(qobj)` and `np.array([qobj1, qobj2], dtype=object)`, so that's not really our fault.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1434#issuecomment-772665656:124,clear,clear,124,https://qutip.org,https://github.com/qutip/qutip/pull/1434#issuecomment-772665656,1,['clear'],['clear']
Usability,"Hello! As @jakelishman described, you can help debug this issue by trying:. ```python; from qutip.cy.openmp.parfuncs import spmv_csr_openmp; ```. and reading the exception produced. I suspect that the `qutip.cy.openmp.*` packages will simply not have been compiled -- they're only built by QuTiP when ""--with-openmp"" is passed to `setup.py` and I think `conda install ... qutip` will not do that even when OpenMP is already installed. To correct this you will need to install QuTiP from source and pass `--with-openmp` yourself as described in https://qutip.org/docs/latest/installation.html?highlight=openmp#direct-setuptools-source-builds. We probably could make ""openmpi"" and ""no-openmpi"" builds for conda-forge by adapting the pattern in https://conda-forge.org/docs/maintainer/knowledge_base.html#openmp but that would require some work (and be a feature enhancement :).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166:235,simpl,simply,235,https://qutip.org,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166,1,['simpl'],['simply']
Usability,"Here too, branches are mixed. Changes from `doc/guide/guide-states.rst` etc. are included and it will probably have a conflict with #1762.; This PR should only have the changes from dynamics. If you can remove that conflict, it would be great.; If easier, you can also restart with `qutip/master` and cherry pick the changes to dynamics in a new PR. That said, adding an overview file to introduce the diverse dynamic function is nice. I will review it once the PR is cleaned, in case you choose to open a new one.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1761#issuecomment-1014771546:48,guid,guide,48,https://qutip.org,https://github.com/qutip/qutip/pull/1761#issuecomment-1014771546,2,['guid'],"['guide', 'guide-states']"
Usability,"Hey Simon and Eric,. - I've gone through and fixed (I hope!) the formatting and code issues due to the bad merge I did last week; - I've added in flimesolve_test.py as a test script for flimesolve; - I've tried to format everything according to PEP8, although there are likely some issues here. I've not had any formal training on PEP8 formatting (and python in general, to be honest), such that even with the help of the PEP8 style guide and Spyder's auto-formatting tool for PEP8, I'm sure there are some small fixes that need to be made; - I'm not entirely sure what Eric meant about separating out the physics from the data container, etc. I moved anything having to do with the precalculation of the Floquet states into its own function, but to kill this precalculation off entirely would severely hinder the speed of flimesolve, as an large advantage of Floquet theory comes from being able to accurately create the basis states at any time once you have the initial basis states. If this is still an issue (or if I've misinterpreted Eric's comment entirely and need to change something else in this regard), please let me know. Maybe we could have a live discussion over the issue, if that would work better. Thanks for your help!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1624220778:433,guid,guide,433,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1624220778,1,['guid'],['guide']
Usability,"Hey guys, thanks for the feedback (this is the first time I have logged in to github in about a year!).. Just some replies to Paul's comments. The method is basically general, under certain assumptions about the bath spectrum density and bath temperature, so the 'system' can, in principle, be anything. I will also do so minor tweaking so it can deal with multiple baths and correlated baths. We will add some notebooks showing different examples and explaining when its valid later. . > Why is it not possible to directly calculate expectation values other than the coupling term?. Yeah there was a list of expectation values at some point, but it disappeared while we were making edits. Thanks for the reminder. Thanks for the other points, we will fix the various issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-103750029:25,feedback,feedback,25,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-103750029,1,['feedback'],['feedback']
Usability,"Hi @ALasek . You are right, there is a bug in the error handling.; ```; File ""C:\Users\OlekAdmin\anaconda3\lib\site-packages\qutip\qip\circuit.py"", line 2114, in initialize; raise ValueError(""dimension of state is incorrect""); ```; This check is wrong. It assumes that the state is a qubits state. Our test didn't cover the `run` method with multi-level systems. Here are the ways around:; - If you know how to hack the package, you can simply find the file and delete this error handling (lines 2113 and 2114).; - If you don't know how to do that, you can also use; ```; gate_sequence_product(qc.propagators()); ```; to compute the unitary representation of the circuit first and then apply it to the input state. I'll make a bug fix soon. But the next release may still take a while. Using `QubitCirucuit` for qutrits and qudits should be fine, it is rarely used though. So there might be bugs that are uncovered by our test. If you encounter any further questions, feel free to ask!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650:437,simpl,simply,437,https://qutip.org,https://github.com/qutip/qutip/issues/1803#issuecomment-1039660650,1,['simpl'],['simply']
Usability,"Hi @Ericgig , could you be a little more specific about what reworking the kwargs treatment would entail? Also if you could emphasize more concretely what you're looking for in updates to the notebooks and docs, that would be great. I do have some other observations.; 1. I do not get the KeyError message if I run the same jupyter notebook locally with the same versions of code as specified by version_table( ). I get another error instead, which actually seems more reasonable to me (something along the lines of 'use_precond' wasn't found in the keys of the dict, which clearly indicates that there's something off with the optional args thing).; 2. Also using mech_dms = np.asarray(mech_dms) fails, I think because it sees a Qobj instead of a real number.; 3. The direct patch to the KeyError mentioned above, based on my understanding of the code, would simply be to nest the assignment to 'max_iter_refine' in the 'info' dictionary inside a condition that checks if the solver is 'scipy'?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676:574,clear,clearly,574,https://qutip.org,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676,2,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"Hi @Ericgig ; Thanks for investigating this so thoroughly. ; I guess it makes sense that unpacking a dict at each call is inefficient, so I think we should drop this idea. As you have suggested previously, users can always use module variables if they wish to avoid passing vars in `args`. So I think we should aim to keep it simple. I think adding `f(t)` as a signature option will be sufficient for what @goerz wanted and would be sufficient for using a Numba jit. So, my suggestion for the next major release (v5) would be that we have only two call sigs:; - `f(t, args)` (default); - `f(t)`. For now we will have to have the three (although I don't think the `rhs_with_state` is not widely used, if at all).; - `f(t, args)` (default); - `f(t)`; - `f(t, state, args)`; The default needs to remain as it is, because it is widely used. I think it makes sense to use introspection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:326,simpl,simple,326,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"Hi @Ericgig, thank you for your feedback. I have already implemented the changes. To correct the error when plotting points with style 'l' I have made the script only sort the points when styles 'm' and 's' are specified as it was in V4.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2308#issuecomment-1911930396:32,feedback,feedback,32,https://qutip.org,https://github.com/qutip/qutip/pull/2308#issuecomment-1911930396,1,['feedback'],['feedback']
Usability,"Hi @VolodyaCO, thanks for reporting this!; I think the reason for `tlist` being overridden is because the result will be independent of `tlist` when the input is a steady-state. This can be seen in the following equations:; ![image](https://user-images.githubusercontent.com/57414022/121327018-5d313680-c913-11eb-9760-ca6004daca18.png); where rho is the initial state (`state0`) and H is the Hamiltonian of the system. I use the fact that rho is a steady-state to remove its temporal dependence. This derivation is simplified assuming unitary evolution (no collapse operators) but the same applies in the most general case where we include the collapse operators. This is my guess on why `tlist=[0]` is employed when using `state0=None`: the result does not depend on `tlist`. Hence, this is probably not a bug as the result should be mathematically correct. That being said, I would also expect the same output shape for the cases shown above unless explicitly mentioned in the docstring of the function. Thus, I think the way to go here is to document this behaviour in the docstring (as well as removing the t appearing in correlation_..._1t docstring) as any change in the output shape will break backwards compatibility. However, it may be worth considering whether this is the intended behaviour for QuTiP 5. I would suggest removing `state0=None` as possible input for simplicity in the maintenance and testing or at least I would make the example shown by @VolodyaCO to be consistent and have the same output. Let us see what the QuTiP admin team thinks :smile:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355:515,simpl,simplified,515,https://qutip.org,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355,2,['simpl'],"['simplicity', 'simplified']"
Usability,"Hi @anna-naden, thank you for the correction. But the branches and PR are mixed. This PR correct issues in your first one, (#1757). Normally fixes of a PR should be done in the same PR.; So having the fixes here cause confusion and I would like to close either #1757 or this one. This one have the fixes in `doc/guide/guide-basics.rst`, but does not include the changes in `doc/guide/guide-states.rst`.; Which one do you want to keep?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762#issuecomment-1014771366:312,guid,guide,312,https://qutip.org,https://github.com/qutip/qutip/pull/1762#issuecomment-1014771366,4,['guid'],"['guide', 'guide-basics', 'guide-states']"
Usability,"Hi @ariels1234, here is a more detailed guide on how to install those additional packages https://qutip-qip.readthedocs.io/en/stable/installation.html#additional-software-for-plotting-circuits. (It is for the separate package qutip-qip, but the circuit plotting part is the same.). Do you have a valid version of pdflatex with packages like qcircuit and pdfcrop installed?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1888#issuecomment-1112172803:40,guid,guide,40,https://qutip.org,https://github.com/qutip/qutip/issues/1888#issuecomment-1112172803,1,['guid'],['guide']
Usability,"Hi @christian512, thanks for the help! I've increased `nsteps` for that particular simulation and the integration runs fine without any errors. One caveat is I have not checked the correctness of the result. . On the other hand, as soon as I tried `mesolve` on a simple Larmor precession problem, `mesolve` started either (1) throwing the typical ODE integration error or (2) integrating but producing a manifestly incorrect result (the final state is not on the Bloch sphere). The code I am using is ; ```; from qutip import * ; import numpy as np. sz = sigmaz(). init_ket = 2 ** (-1/2) * Qobj([[1], [1]]) # Bloch vector is unit x; init_dm = init_ket * init_ket.dag(). b_0 = 1; gam = 1; h_zeem = gam * b_0 * sz; h = [h_zeem]. larmor_freq = gam * b_0 ; period = 2 * np.pi / (larmor_freq); t = np.linspace(0, period / 2, 100). print(mesolve(h, init_dm, t, options=Options(nsteps=1e6)).states[-1]); ```. Which produces ; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 +0.j -263.5988765-267.24047092j]; [ -2.1425229 +0.49907152j 0.5 +0.j ]]; ```; Edit: I have also tried playing around with `atol` and `rtol` without any success.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503:263,simpl,simple,263,https://qutip.org,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503,1,['simpl'],['simple']
Usability,"Hi @dweigand, this looks interesting. It would you be nice to push this forward, adding some tests for this and integrating @Ericgig suggested changes. I am wondering whether there is a more intuitive (explicit) option than `qfunc_amat `. Something like a Boolean `precompute`?. Writing some documentation for this, in https://github.com/qutip/qutip-doc, would allow users to discover this option more easily at http://qutip.org/docs/latest/guide/guide-visualization.html#husimi-q-function, it's very nice you have some performance checks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-536368295:191,intuit,intuitive,191,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-536368295,3,"['guid', 'intuit']","['guide', 'guide-visualization', 'intuitive']"
Usability,"Hi @eendebakpt ,; the link you provided refers to an old version of the docs for QuTiP Version 4.0.2.; You can find the documentation for the unitary evolution of the current QuTiP version here: [https://qutip.org/docs/latest/guide/dynamics/dynamics-master.html#unitary-evolution](https://qutip.org/docs/latest/guide/dynamics/dynamics-master.html#unitary-evolution). The code in the latest docs seems to be correct: ; `np.linspace(0.0, 10.0, 20)`. I suggest to close this issue!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1944#issuecomment-1165721180:226,guid,guide,226,https://qutip.org,https://github.com/qutip/qutip/issues/1944#issuecomment-1165721180,2,['guid'],['guide']
Usability,"Hi @epelofske-LANL. This behaviour in QuTiP is intentional for the following reason: If the dims of the system are `[2, 2]` then it's unambiguous how the system should be partitioned into two parts because the dims specify what the two parts. If the dims are `[4]` then one could divide the system in multiple ways depending on how one considers the four basis vectors. If one knows that the four basis states are `00`, `01`, `10`, `11`, one can override the dims by writing `dm.dims = [[2, 2], [2, 2]]` or `qutip.Qobj(dm, dims=[[2, 2], [2, 2]])`. Hope this helps. I agree this could be made more intuitive. Perhaps `maximally_mixed_dm` should allow specifying `dims` too instead of just `N`. I'm closing this issue for now, but please feel free to continue the discussion in the comments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2058#issuecomment-1384473486:597,intuit,intuitive,597,https://qutip.org,https://github.com/qutip/qutip/issues/2058#issuecomment-1384473486,1,['intuit'],['intuitive']
Usability,"Hi @goerz ,. I tried to replicate your issue on my Linux machine, and it seems to work fine :. ```(qutip-env) tarun@trolldem0rt:~/miniconda3/envs/qutip-env/bin$ nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:734,simpl,simple,734,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['simpl'],['simple']
Usability,"Hi @jakelishman , Thanks for the great work and effort! I'm reading your code and also try to learn some pytest. . If I may, I have a minor suggestion. Could you maybe leave some more descriptive comments in the tests? I find it a bit hard to follow the logic when tests are automatically generated or parametrized, e.g. in test_control_pulseoptim. A lot of things are defined for the fixtures in the beging. It took me some time to understand what is happening. I guess it is because I'm not yet very familiar with the tools in pytest. Maybe some description like ; > We first define 4 test cases: ... or. > Test function1 against case1, case2 ... This might make it easier for whoever wants to add more tests later to understand what has been tested without too much digging. And another personal idea, maybe it is good to make a separate PR every 10 or 15 tests? A new branch can still base on this one. Just after the old PR is merged, fewer changes will be shown the new PR. It might make the later review a bit easier. Just personal ideas. Thanks again!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591399487:94,learn,learn,94,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591399487,1,['learn'],['learn']
Usability,"Hi @jakelishman do you have any further doubts about the issues with scipy 1.4 `linallg.eigenh() API` ? To me it is clear that we have to deprecate support for it, as any code that relies on calculating eigenvalues for large matrices has this MKL error, which it often does not show, and instead of terminating returns an incorrect numeric value. This affects not just this code but any possible high dimensional calculation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-818701546:116,clear,clear,116,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-818701546,1,['clear'],['clear']
Usability,"Hi @jakelishman you were right about the contraction, I changed the indexes as in http://qutip.org/docs/latest/guide/guide-tensor.html so that it represents a trace-like channel. On the other hand I find that mixed dimensions operator `[[m,n], [m,n ]]` appear in some of the tests that were already in place, I will try to write my thoughts on their meaning later. I am still going to refactor this a little bit more, and tell you when it is ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708:111,guid,guide,111,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708,2,['guid'],"['guide', 'guide-tensor']"
Usability,"Hi @jakelishman, I like your implementation but this will sometimes return a Qobj and other times a class instance when you call `displace()`. I am not in favour of that just out of the principle that functions should be simple and do one thing only as you also point out. . I would say if we do not want to break the user-interface, we keep the same implementation as `displace()` returning a `Qobj` (even if internally it calls the faster private `_Displace` method). . Users who want to use the class anyway can dig in and find `_Displace`. The use case here for moving to classes is rather specific and related to optimisation/control. We want to compute this operator very fast with multiple values of `alpha`, independently, on multiple cores (this was why we needed the faster implementation to run a GPU optimisation routine). Of course for sigmax(), or sigmay() we do not have any parameters to optimise and it is overkill to make them into classes. I do not suggest that at all. . I understand the inclination to be `functional`. It is how QuTiP was written and is supposed to be used, mostly. But one of the arguments for classes is that for some solvers, or operations we needed to re-use information, eg. qutip.piqs or the heom solvers where we had to make classes anyways. . I would propose just having a private `_Displace` method which is called by `displace` but not changing the output to be conditioned on `alpha`. Later on, if we incline a bit more towards classes we can make `Displace` public. Any other thoughts and opinions? @qutip/core-workers",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646667559:221,simpl,simple,221,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646667559,1,['simpl'],['simple']
Usability,"Hi @michelinesoley,. Your bug report inspired me to dig into the `qutip.control.optimize_pulse` sparse matrix support which lead to some fixes in #1621. When you increase `N` in your example from 2 to 3, it changes the internal type used by the optimizer to represent propagators. You can also make the `N = 2` case fail by changing the last line to:. ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=True)); ```. Your example can be made to work for `N = 3` (albeit slowly) by changing the following lines:. ```python; mapped = Qobj(mapped, dims=[[N]*4 + [2]*4] * 2); ```; (which was a bug in the example itself -- it created a Qobj with the right shape but wrong dimensions) and the last line to . ```python; result = cpo.optimize_pulse_unitary(..., dyn_params=dict(oper_dtype=Qobj, sparse_eigen_decomp=False)); ```; For me the `N = 3` case was slower with `sparse_eigen_decomp=True`, but perhaps it will be better for your full problem. If you would like to try `sparse_eigen_decomp=True` you are welcome to try the patch in PR #1621 and I would appreciate feedback on any performance issues for larger systems. We are currently working to support bigger systems in QuTiP 5 by using the new flexible Qobj data layer (which supports both sparse and dense matrices already and will hopefully support GPU and TensorFlow matrices in the near future).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386:1116,feedback,feedback,1116,https://qutip.org,https://github.com/qutip/qutip/issues/1617#issuecomment-885064386,1,['feedback'],['feedback']
Usability,"Hi @nathanshammah ,. Indeed you are right, but I was concerned that with large Hilbert spaces as in my case storing the individual states at all measuring times would be simply unaffordable. That is why I was wondering if mcsolve could provide not only averaged observables but also the associated statistical errors. I hope this clarifies my problem. Thanks for the example too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1032#issuecomment-533216900:170,simpl,simply,170,https://qutip.org,https://github.com/qutip/qutip/issues/1032#issuecomment-533216900,1,['simpl'],['simply']
Usability,"Hi @nathanshammah! This seems to be a pretty simple issue. If you don't mind, can I work on this? ; On some preliminary searches, I found that there are 65 .py files in [qutip/qutip](https://github.com/qutip/qutip), each having some PEP8 formatting issues. How do you suggest I go about formatting them and submitting a pull request?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1527#issuecomment-785633970:45,simpl,simple,45,https://qutip.org,https://github.com/qutip/qutip/issues/1527#issuecomment-785633970,1,['simpl'],['simple']
Usability,"Hi @nwlambert,. Sure! This is the code I used to test the changes:. ```; import numpy as np; from qutip import *. Gamma_r = 0.5; Gamma_l = 0.1. n_ket = (1)/(Gamma_l + Gamma_r)*Qobj([[Gamma_r],[Gamma_l]], ); n_bra = Qobj([[1, 1]]). Id = Qobj([[1, 0], [0, 1]]). L = Qobj([[-Gamma_l, Gamma_r], [Gamma_l, -Gamma_r]],). I_ops = Qobj([[0, Gamma_r], [0, 0]]). L_s = sprepost(L, Id). I_s = sprepost(I_ops, Id). current, noise, skw = third_cumulant(L_s, rhoss=n_ket*n_bra, J_ops=[I_s], I_ops=[I_s], sparse=True, method=""pinv""). print(current, noise, skw); ```; It is based in a simple analytical example I found in a paper, which contains the expressions to check the results. This is the paper (page 7, the section ""Toy model""): [here is the paper](https://orbit.dtu.dk/en/publications/current-and-current-fluctuations-in-quantum-shuttles). As you can see it is really simple, although I had to make some changes to be able to applied in QuTip (I hope this doesn't lead to major fails). The effect of the frequency for the case when it is not defined in the function can be observed using the same example, just don't modify that part and you will see it, then you can try the solution I propose ( I don't know if I explained myself correctly).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2435#issuecomment-2126527531:569,simpl,simple,569,https://qutip.org,https://github.com/qutip/qutip/pull/2435#issuecomment-2126527531,2,['simpl'],['simple']
Usability,"Hi @rajathshetty20, Thanks for the interest. What you described sounds good. Would you like to make a Pull Request? You can go to the Pull Requests page and create one from a branch of your repository. There will be a template guiding you once you choose a branch.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1292#issuecomment-655742038:227,guid,guiding,227,https://qutip.org,https://github.com/qutip/qutip/issues/1292#issuecomment-655742038,1,['guid'],['guiding']
Usability,"Hi @sarsid, if you are going to play with it. It would be very helpful if you could give some feedback ;) Like if the doc is clear or if the interface is reasonable, or if there are any bugs. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1273#issuecomment-661857844:94,feedback,feedback,94,https://qutip.org,https://github.com/qutip/qutip/pull/1273#issuecomment-661857844,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Hi @sarsid, there are still some tests failing. When you think the PR is really, just make it a ready-for-review PR and request a review. Besides, it would be great to address some of the style issues in code climate like ""Continuation line under-indented for visual indent"". Not all of them must be fixed though, it's more like a guide. The `pycodestyle` package can help you detect them locally if you would like to use it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-646002967:331,guid,guide,331,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-646002967,1,['guid'],['guide']
Usability,"Hi @tehruhn, I also have the error but it does not appear when using jupyter so I missed it. The error comes from a line inside a `try` block, so I am not sure why it is not properly suppressed... I did touch much in that area so it should be a simple fix.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1109#issuecomment-542708686:245,simpl,simple,245,https://qutip.org,https://github.com/qutip/qutip/issues/1109#issuecomment-542708686,1,['simpl'],['simple']
Usability,"Hi @yuli139304,. I can't really make out from the code you have written what you are trying to achieve -- it simply looks like you are using numpy and Qobj incorrectly. Could you type out in terms of Sx_nv, ... and D_xx, ... what you want using simple arithmetic? E.g. maybe you want `D_xx * Sx_nv + D_yy * Sy_nv + D_zz * Sz_nv` (which just works as is)?. Then once you have the simple expression written down, you can make it fancier (e.g. use np.dot, etc) if you need to. I'm going to close this for now because this doesn't look like a QuTiP bug, but feel free to ask more questions, either here or preferably on the mailing list.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1848#issuecomment-1093459741:109,simpl,simply,109,https://qutip.org,https://github.com/qutip/qutip/issues/1848#issuecomment-1093459741,3,['simpl'],"['simple', 'simply']"
Usability,"Hi Anna, thank you for replying can you please give some more information about which particular part/s of the user guides you are finding these errors?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322:116,guid,guides,116,https://qutip.org,https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322,1,['guid'],['guides']
Usability,"Hi Boxi, thanks for the response. > If you are interested, we could propagate it as a ""QuTiP affilliated packages"". That would be great! It's not clear from the roadmap document exactly what ""QuTiP affiliated"" means in practice. I guess there will just be a list in the qutip docs/website with links to such packages?. The GSoC project looks interesting. I may apply if it looks like I will have time this summer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1439#issuecomment-778671906:146,clear,clear,146,https://qutip.org,https://github.com/qutip/qutip/issues/1439#issuecomment-778671906,1,['clear'],['clear']
Usability,"Hi Emily,. The photocurrent is the number of detector clicks (i.e., jumps) per unit time, averaged over all trajectories. For sufficiently many trajectories, it will approximate $tr[C_n \rho(t) C_n^\dagger]$. If I'm not mistaken, you should find that; ```math; x = \frac{1}{\Delta t} \frac{1}{N_t}; ```; where $\Delta t$ is the spacing in your `tlist` and $N_t$ the number of trajectories. The integer (photocurrent/x) is simply the number of clicks in that time interval in all trajectories; we multiply with x for the ""per unit time, averaged over all trajectories"" that I wrote above. Paul. (PS. I only noticed your username now - is it possible we had a chat at QTD in August? Hope you are doing well!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2539#issuecomment-2403687615:422,simpl,simply,422,https://qutip.org,https://github.com/qutip/qutip/issues/2539#issuecomment-2403687615,1,['simpl'],['simply']
Usability,"Hi Eric, I would love to but I simply don't know what the git diff issue is, might it be that only the file that I modified should show in the diff?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2136#issuecomment-1485494643:31,simpl,simply,31,https://qutip.org,https://github.com/qutip/qutip/pull/2136#issuecomment-1485494643,1,['simpl'],['simply']
Usability,"Hi Eric,. Thanks for looking at this and your feedback!. Alright, I'll close this PR and submit a new one for `dev.major`, and will split up the function as you suggest.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1708#issuecomment-965150452:46,feedback,feedback,46,https://qutip.org,https://github.com/qutip/qutip/pull/1708#issuecomment-965150452,1,['feedback'],['feedback']
Usability,"Hi Filippo,. On Wed, Apr 28, 2021 at 6:03 PM Filippo Vicentini ***@***.***>; wrote:. > However, our foundations do not prevent us to work with time-dependent; > objects.; >; > We simply will need to write the relevant class.; >; Perhaps slightly off-topic: How similar will this class look to QobjEvo? Or; do you not know yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828711218:179,simpl,simply,179,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828711218,1,['simpl'],['simply']
Usability,"Hi Jake, ; Thank you for the guide, quite complete. If you have time, an explanation on what can be found where (core vs core.data etc.) could be nice. . I believe we decided to move all the documentation to this repository. @nathanshammah should the devguide go in a docs folder here?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1359#issuecomment-696796867:29,guid,guide,29,https://qutip.org,https://github.com/qutip/qutip/issues/1359#issuecomment-696796867,1,['guid'],['guide']
Usability,"Hi Kevin. Thanks for your efforts on this. However, I am not in favor of merging this PR in this form. It is way too intrusive on the old API, it would break backwarks compatibility for no good reason as I see it. Personally I don't think that the _2t and _1t names are that confusing. As you point out, _1t is still a two-time correlation function (a one-time correlation function would not be a correlation function, just a simple expectation value), but the _1t and _2t is intended to refer to the number of free time variables. Perhaps this should be explained more clearly in the docstrings, but I don't think it is worth changing the API for this reason. I would prefer if you added the new mc solvers using the current API conventions, and preferably without changing the me and es based solvers. If you want to propose a new API the correct way to do it would be:; 1. First discuss the idea, so that everyone interested could weight in on the naming of the functions, the style of parameters and arguments etc.; 2. Implement the new API without disrupting the previous API; 3. Deprecate the previous API, so that using it gives a warning (but still works!). ; 4. Then finally after a few release cycles we may drop the old API. This would not happen until qutip 4.0 (see http://semver.org/), which we do not plan to release anytime soon. Therefore, we cannot accept any PRs that with backwarks breaking API changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/218#issuecomment-53827562:426,simpl,simple,426,https://qutip.org,https://github.com/qutip/qutip/pull/218#issuecomment-53827562,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"Hi Louis,. There is work in development that will allow `QobjEvo` to be build from callback also, not just list. This will make callback work anywhere easily. . I was in the impression that H callback worked already for mcsolve. I rewrote part of mcsolve and broke it. Looking at your commit, I inverted `_funcrhs_with_state` and `_funcrhs`...; Sorry to have you take time to correct it. The 20x is big, but the list format allows for optimizations that are hard to do with a callback. A big one is that you don't need to create a new matrix/Qobj when calling `mul_vec`, just use it. With this code, I see a 20x between `mul_vec` and creating a Qobj a python function. . ```; import numpy as np; import qutip as qt. qoe = qt.QobjEvo([qt.qeye(3),[qt.destroy(3), lambda t,_:np.sin(t)]]); qoe.compile(). o1 = qt.qeye(3); o2 = qt.destroy(3) ; def H(t):; return o1 + o2 * np.sin(t). v = np.ones(3)+0j; %timeit qoe(0); %timeit qoe.mul_vec(0, v); %timeit H(0); %timeit H(0).data * v; ```. One optimization you could do is having the callback return a `np.array` instead of a Qobj. In `mcsolve`, this would probably be simple to implement and I expect some speed gain. But it can't really be officially supported in Qutip, for now. . ps. All those 'redundant' argument setting are for reusing the system (`ss`) in multiple call of `mcsolve` with different args, used in `correlation`. Using string coefficient, the compilation step can take a few second, so it is set to be able to reuse a compiled system, changing the `psi0`, `args`, `e_ops`, etc. This will become a less obscure feature in v5 when solver object are available.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634:1111,simpl,simple,1111,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-629231634,1,['simpl'],['simple']
Usability,"Hi Paul,; Sorry let me clarify. ; 1. If the number of nonzero elements is very large, is Liouvillian still preferred to defining derivatives from Hamiltonian and collapse operators (Eq.(3) in the link below)?; 2. By constructing Liouvillian from Hamiltonian and collapse operators and defining the derivative as L*rho, is it computationally faster than Eq.(3) in http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-master.html. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/531#issuecomment-244283656:391,guid,guide,391,https://qutip.org,https://github.com/qutip/qutip/issues/531#issuecomment-244283656,1,['guid'],['guide']
Usability,"Hi Qi, thanks for your post. If you want to work on this it would be a very welcome contribution, and we can assist you and guide you along the way. However, I think it is difficult to write a general solver using waiting time distributions, because they usually require some analytical treatment and are therefore problem specific. As far as I know, if you don't have an analytical mean of finding the correct waiting time distribution you need to use the comparison of the decaying norm and a random number. In the paper by Dum et al that you refer to they also use this method, which is very similar to the one we use in mcsolve (the description you give in the first paragraph is not quite correct; we do use the decay of the wavefunction norm in the condition for when jumps occurs, like in Dum et al). See Fig. 1 in that paper for example. However, in some problems the waiting time distribution can be obtained analytically, and then it could be beneficial to be able to specify this waiting time distribution for the mcsolver in some way. Is that the kind of feature you are asking for?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-41977425:124,guid,guide,124,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-41977425,1,['guid'],['guide']
Usability,"Hi Robert, I apologize for this issue, this is my first time working on an open source project. That being said, I should have been more clear that I was not in favor of meeting the project in its current form. I expected you would want the whole api left in tact - I will leave the API untouched. The main point here is that only one internal function is necessary (for each me, es, and mc) to solve for all of the public api calls. I would like to keep this as is and have the public functions call these three functions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/218#issuecomment-53828769:137,clear,clear,137,https://qutip.org,https://github.com/qutip/qutip/pull/218#issuecomment-53828769,1,['clear'],['clear']
Usability,"Hi Simon,. No we do not have time-dependent operators at the moment and focus on ground state/steady-state/dynamics of fixed hamiltonians or liouvillians. Actually nobody has (yet) studied with neural networks time-dependent systems as far as i know. However, our foundations do not prevent us to work with time-dependent objects. ; We simply will need to write the relevant class.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828576313:336,simpl,simply,336,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828576313,1,['simpl'],['simply']
Usability,"Hi Subimal,. This happens because of the truncation of the Fock space. You can see a related discussion here ; https://groups.google.com/g/qutip/c/DD6z8kYUU1I/m/k48XZS1AAgAJ. But in short, with truncation there is always an error in the commutators, so for truncating the Fock states at N photons, I think you find that [a,a.dag()] = \sum_{n=0}^(N-1) |n><n| - N|N><N| (you can check this by writing out these operators as projectors onto fock states, you will notice a*a.dag() is missing a term due to the truncation that should cancel with a term in a.dag()*a). Similarly putting the creation and annihilation operators into the position/momentum definition of the Hamiltonian, you find H = sum_{n=0}^(N-1)(n+0.5) |n><n| + N/2 |N><N|. Hence, since you truncated at 9 photons in your example, there is a degeneracy of the 4.5 eigenvalue. I am not sure if there is much can be done about this in general, perhaps the discussion I linked above might be useful. The main message I suppose is always take a larger cut-off than you think you might need, particularly if you are relying on the commutation relations to simplify things for you (which, given your example, can be a bad idea some times!). . I guess there is an interesting question about what is the best practice in these things, e.g., if you have a non-linear model, what form is it best to put it in before moving to a truncated basis? given your example, I would expect something like normal ordering to be better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770:1113,simpl,simplify,1113,https://qutip.org,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770,1,['simpl'],['simplify']
Usability,"Hi Vutshi. Yes, it is perfectly possible to implement the heterodyne detection using two homodyne detections with 50% efficiency, like you suggest. For the Milstein solver it might be the best, or at least the quickest, way to implement heterodyne, but I don't really agree that the current method is overcomplicated. It is in fact basically the same as the method you suggest, so I don't see that either would be more complicated or simpler than the other. The only issue is whether the two stochastic increments are divided up in several stochastic collapse operators or if the d2 function internally takes care of the both stochastic increments for a given stochastic collapse operator. The complexity is just shifted from the d2 function to somewhere else, which in general doesn't simplify anything. However, since the milstein solver you submitted is written so that it only support one increment per collapse operators, then there might be a real advantage of splitting the heterodyne process into two homodyne processes. . I've tried to make the qutip stochastic solver API as general as I could (and it is still a work in process), so that it will be as flexible as possible for implementing custom types of SMEs. Having support for multiple stochastic increments per collapse operators seems to be useful in certain applications. Although such SMEs could probably always be rewritten as multiple collapse operators with single stochastic increments, it might not always be the most natural way to define the SME. The heterodyne detection is one example of this, and it can be formulated in both ways, but I want the qutip SME API to work with both methods (at least with the basic euler solver, not necessarily with every solver we implement). However, that doesn't mean that the implementation of heterodyne for a particular solver has to use one way or the other. We should just document which solvers support multiple increments per operators and which solvers don't. So if it is easier t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22543416:434,simpl,simpler,434,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22543416,2,['simpl'],"['simpler', 'simplify']"
Usability,"Hi again. I've looked at your notebook and code in some more detail now, and I have attempted to make the change in how the rhs function behaves. I had not seen an example where the contributions form different stochastic collapse operators depended on each other before, but I now see the need for having this possibility from looking at your implementation of the Milstein implementation with multiple Wiener processes. I have created a new branch in qutip called sme-rhs-restructuring (see commit 0b4a1a7a6591aca27ff6cb71310cf73af7ae2d7f and https://github.com/qutip/qutip/tree/sme-rhs-restructuring) where I have experimented with rhs functions that internally loop through the A_ops list. In simple cases it only loops through the list and calculates a contribution for each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and par",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:697,simpl,simple,697,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['simpl'],['simple']
Usability,"Hi albertomercurio, ; Thank you for the contribution. We will need at least one automated test: a function in `qutip/tests/test_correlation.py` that call `steadystate_floquet` and would fail if something is wrong. For example, in the next major version of qutip, `Qobj.data.tocsc()` will fail. We want it to be caught when running the tests in `qutip/tests` instead of having to remember to update it. It could be simply to running your manual test and instead of plotting the result, checking it with `numpy.testing.assert_allclose`. Ideally it should be done twice, once for `sparse=True` and once for `sparse=False`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1660#issuecomment-917454056:414,simpl,simply,414,https://qutip.org,https://github.com/qutip/qutip/pull/1660#issuecomment-917454056,1,['simpl'],['simply']
Usability,"Hi everyone,. the table in [https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#accesing-the-state-from-solver](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#accesing-the-state-from-solver) confuses me. What is 'name'? Can I chose it? I tried using custom names which did not work for me. Instead, using the keywords as explained in the section in [https://qutip.org/docs/latest/apidoc/classes.html?highlight=qobjevo#qobjevo](https://qutip.org/docs/latest/apidoc/classes.html?highlight=qobjevo#qobjevo) without any 'name' worked for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538#issuecomment-1398734865:58,guid,guide,58,https://qutip.org,https://github.com/qutip/qutip/issues/1538#issuecomment-1398734865,2,['guid'],['guide']
Usability,"Hi guys,; yeah, the conflicts are because of the now merged #1224, which we knew about when we merged that one. It's a simple fix, but I'm hesitant to do it directly on this PR, depending on how we want to merge it. The simplest way is that I make the required changes, fix the merge conflict, and we keep going until this whole behemoth merges in one go. This ends up in the commit history being a bit of a mess, and it'll take ages. Instead, I think it might be better if I instead split this PR into a few different ones:; 1. add `pytest` markers and other test niceties; 2. the test files that Eric is checking; 3. the QIP-related ones so that Boxi can check those; 4. `brmesolve` tests; 5. trivially changed files; 6. whatever's left. This has the advantage that I can rebase them all individually to neaten them up with any changes suggested, and we can get parts merged in faster. PRs 2 to 6 will depend on PR 1, so this would require getting that first one merged ASAP, then the others will all be modular and can be merged in any order at any speed. If you're happy with that plan, I'll cherry-pick/rebase out the necessary bits of the history and form the new PRs. The end result will be 6 PRs, which, when merged, will have no conflicts, and will leave the repository in the exact same state it would be if this PR was merged in one lump (with the relevant conflict fixed). For each PR, then we just have a simple process:; 1. you review files; 2. I make suggested changes; 3. repeat until happy; 4. I rebase the PR to squash it into a logical form; 5. you merge",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033:119,simpl,simple,119,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033,3,['simpl'],"['simple', 'simplest']"
Usability,"Hi paul,. Thanks for the feedback. I think maybe Rob had originally included the mkl stuff, but I took it out when I was bug fixing. Will put it in, I didn't realize it gave such a big performance boost. thats cool. I will also follow your advice and stick in a finite frequency to make sure all the solvers work. . I had a poke around in discussion forums for numpy and scipy, and it seems like the problem is that they throw an exception when they decide L is ""exactly singular"" (which technically it is). Sometimes numerical rounding errors prevent this exception, as occurs in larger systems, or adding a finite frequency, so it tries to solve it anyway and succeeds, because the projector Q on the right-hand side guarantees a solution. Conversely, matlab will just throw a warning, and try and solve it anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/528#issuecomment-243988381:25,feedback,feedback,25,https://qutip.org,https://github.com/qutip/qutip/pull/528#issuecomment-243988381,1,['feedback'],['feedback']
Usability,"Hi! I'm working on this issue and was wondering if the alpha value should be an array-like that would apply to each point or vector individually, similarly to the color option I've seen in dev.major, or make it more simple. Where a single value would apply to all the rendered vectors or points in their add method.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1287#issuecomment-1066956078:216,simpl,simple,216,https://qutip.org,https://github.com/qutip/qutip/issues/1287#issuecomment-1066956078,1,['simpl'],['simple']
Usability,"Hi!. #### Imports; Honestly it wasn't really a particularly conscious decision, and there's no problem with `from qutip import (x, y, z)` lines though I don't think `from qutip import *` is a very good idea, especially with quite how many names `qutip` exports. The `from qutip.very.deep.nested.module import name` is certainly good, and I think I've generally left those. I think I started converting in a few places because there were things like `from qutip import Cubic_Spline` and `from scipy.interpolate import CubicSpline`, and then the test was unreadable as to which was which. Having `qutip.Cubic_Spline` and `scipy.interpolate.CubicSpline` is unambiguous. The smaller cases like `from qutip import Qobj` are highly unlikely to have any conflicts, but in general I just went for consistency. That all said, there's certainly arguments both ways, e.g. explicit `qutip.member` is good because it's clearly explicit at point of use which makes reading the code much easier, but bad because it adds unnecessary chaff which makes scanning lines take longer. I hadn't put much thought into it before, and I think I was just generally writing in my default style. #### Test ordering; I hadn't much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:906,clear,clearly,906,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['clear'],['clearly']
Usability,"Hi!. About the comments: yes, absolutely I'll leave more. It's a bit silly that I haven't yet, since one thing that was frustrating me previously was not understanding what was trying to be done! I think as time goes by I'm getting a bit better about being clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a goo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:257,clear,clearer,257,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['clear'],['clearer']
Usability,"Hi, @abhisekupadhyaya nice work! . Usually a high cognitive complexity indicates that the function is too long or too deep for understanding and maintenance, but sometimes it exaggerates a bit, so it's fine as long as everything is clear. To reduce the function length, for example, if the checking part and each gate parsing can be resued (e.g for QASM v2), they can be defined in a separate function. Another minor thing, what about leaving a short warning when ignoring the unsupported code?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745:232,clear,clear,232,https://qutip.org,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745,1,['clear'],['clear']
Usability,"Hi, I would like to contribute to this issue as part of the UnitaryHack2024. I will incorporate a basic use of gates module to guide-basics.rst and a table of the available gates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389#issuecomment-2140841510:127,guid,guide-basics,127,https://qutip.org,https://github.com/qutip/qutip/issues/2389#issuecomment-2140841510,1,['guid'],['guide-basics']
Usability,"Hi, I'm now still working on cleaning the codes, make them better documented and making the notebook more clear. After I finished everything, I will push my job to github and leave a comment here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/282#issuecomment-77509684:106,clear,clear,106,https://qutip.org,https://github.com/qutip/qutip/pull/282#issuecomment-77509684,1,['clear'],['clear']
Usability,"Hi, if you look at the conda instructions for VS, you will find some alternatives ; https://conda.io/docs/user-guide/tutorials/build-windows.html. There is a VS community edition which might be smaller. . Alternatively, on Windows 10, you can install a Linux subsystem (supported officially by Windows) and then I am hoping that you don't need to deal with a complete VS installation. Please find the instructions to get a native Linux subsystem in Windows 10 below:; https://docs.microsoft.com/en-us/windows/wsl/install-win10. Let me know if you need any help or encounter issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-368383471:111,guid,guide,111,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-368383471,1,['guid'],['guide']
Usability,"Hi, interesting, thank you for your detailed description!. > When the transformation is made for DrudeLorentzBath, the result generated differs from that for DrudeLorentzPadeBath (and it is not about the number of frequencies used). First of all, are you sure that either of `DrudeLorentzBath` and `DrudeLorentzPadeBath` give the right solution? Because the `ck_real` / `vk_real` are supposed to be the coefficients / exponents of the real part of the correlation function (and the others the imaginary part), and if you plug in imaginary parameters, then terms that previously were only in the real parts could pick up imaginary parts etc. Perhaps this kind of thing cancels out when you add the two unphysical D-L baths to get the shifted D-L bath?. Regarding your proposed solution -- I would say, in the case where `gamma` is not real, the spectral density is unphysical and there is no *a priori* correct way to handle this case. In other words, in a sense, the code before the change is wrong (or right) and the code after the change is just as wrong (or right). I therefore think it wouldn't hurt to implement this change so that your use case can be supported. However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. A more ""complete"" and probably more efficient solution would be to add a whole new `ShiftedDrudeLorentzBath`, and to put in analytically derived formulas for the Matsubara / Pade expansion coefficients. (As a first step, you could also calculate these coefficients manually and create a `BosonicBath` object from them directly.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2323132801:1347,clear,clear,1347,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2323132801,1,['clear'],['clear']
Usability,"Hi, thak you for the feedback it is really helpful. Using lower density matrices is reducing my time by 10%, and without the fix it produces error; it is an excellent finding.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822574194:21,feedback,feedback,21,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822574194,1,['feedback'],['feedback']
Usability,"Hi, thank you all for the answers, and sorry for the delay. I understand there is some confusion because what I'm trying to do doesn't really have a physical meaning, I simply wanted to convert between matrices and vectors because I'm looking for computational gains by doing so. ; If this was numpy, I would simply use numpy.reshape. ; I guess it actually makes sense if this is not a permitted operation in qutip, I was just exploiting the operator_to_vector function for a different reason. @quantshah ; Thanks, I tried the code, but even the test_vec implementation fails with error ; File ""qutip\superoperator.py"", line 278, in vector_to_operator; shape = (np.prod(q.dims[0]), np.prod(q.dims[1])). IndexError: list index out of range. @jakelishman ; Thanks for the tip for the tensor product basis state creation.; It's not a density matrix that I want to do, I just wanted to reshape the array. As a side note, I notice that I have a very large computational cost when I work with dense matrices and state vectors, as you do when you simulate a quantum circuit with parametric rotations on each qubit, and this is due to the fact that qutip uses a sparse matrix representation. If I do the same operations with numpy I get a large computational gain, because the arrays are dense. Is there any way that I don't know about to save the Qobj data in dense form?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-601662221:169,simpl,simply,169,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-601662221,2,['simpl'],['simply']
Usability,"Hi, thank you very much for the quick responses and linking the other issues. . > But your making sparse matrices dense. Yes, I agree. But I was trying to just work out a simple problem which looks like. `dp[n]/dt = spre(Q)*p[n-1] + spost(Q)*p[n+1]. where p is a list of flattened density matrices. I understand that a better version of this would be to completely flatten p and write the RHS as a large `L` as Alex points out and then use `cy_ode_rhs`. But here is the issue, in the HEOM case, building `L` runs out of memory if we consider a large size for the set of auxiliary density matrices `p`. As such, I cannot completely build the `L` for the cases I am looking into. The approach that I was trying to take was to keep building the p's as we integrate. In this case, each RHS computation is a small dense matrix-vector computation and I can choose to keep or discard it depending on the max value of its elements. This gives the flexibility to truncate how many auxiliary density matrices I keep. The motivation is that in some papers on the Heom method, there is a dynamic filtering of the auxiliary matrices and it has been shown that with just a few 100s of auxiliary matrices, you can get a reasonable result. But the way we have the code in QuTiP now pre-computes the `L` and gets stuck due to memory limitations. @agpitch Thanks for the suggestions. I am trying to make the HEOM work without building the `L`. Perhaps I will still run into memory issues if I try to initialize the full set of `p` but if the dynamic filtering approach works out, then I can escape the memory problem by only building a few of the `p`'s and deciding to append them or not based on some conditions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/831#issuecomment-368980965:171,simpl,simple,171,https://qutip.org,https://github.com/qutip/qutip/issues/831#issuecomment-368980965,1,['simpl'],['simple']
Usability,"Hi, thanks for the feedback. I will try to update it taking these comments into account. The names of the gates in the table are the same that appear in https://github.com/qutip/qutip/blob/master/qutip/core/gates.py, I can put them in lowercase to exactly match the functions in the code. I also see that the module ""qutip.core.gates"" is missing in [ https://qutip.readthedocs.io/en/master/_modules/index.html](url) so I will also added there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2142731183:19,feedback,feedback,19,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2142731183,1,['feedback'],['feedback']
Usability,"Hi, this is ready for review. It probably needs a lot of refactoring but I have documented all functions and provided unit tests. I made a simple script for my lab where you can specify a circuit in a text file and the outputs will be generated. You can check it out here: https://github.com/sahmed95/icm. I have an example describing the use of this module. Where do the examples go ? @ajgpitch @nonhermitian . As I mentioned, @alexandrupaler should be the right person for review. Dr. Devitt also mentioned Damian from ProjectQ (?) who could help perhaps.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-275668058:139,simpl,simple,139,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-275668058,1,['simpl'],['simple']
Usability,"Hi,. Yes, I know, that's why I added the md file. I updated it now, thanks,; adding more info on general resources to learn about QuTiP and more; references to the #3 project, i.e. your blog and the talk.; https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2020. Neill, Alex, if you have a lead, please add a HEOM project. Bests,. Nathan. Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com. On Tue, Feb 25, 2020 at 5:10 PM Boxi Li <notifications@github.com> wrote:. > Hi Nathan,; >; > I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it; > seems that there is no way to make a PR to Wiki. I can also send you the; > markdown source code per email like this, but I’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > ht",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:118,learn,learn,118,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['learn'],['learn']
Usability,"Hi,; The documentation is not clear for this and propagator is a little strange for `t`. Propagator uses the `t` as a list the same way `tlist` is used by `sesovle` or `mesolve` and those solver support continuing an evolution:; ```; H = [op1, [op2, f]]; res1 = qutip.sesolve(H, psi0, tlist=[0,1,2,3,4]); res2 = qutip.sesolve(H, res1.states[-1], tlist=[4,5,3,7,8]); ```; So if `tlist` is a list with one element, it does no evolution and the propagator is 1 (`qeye`). If you were to compute propagators with `tlist` with 3 or more elements, you would receive a list of propagator and the first one would always be 1. I am not sure where or if it is documented that evolution starts at the first element of the list of time, not at zero. Hope this help.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/950#issuecomment-463457230:30,clear,clear,30,https://qutip.org,https://github.com/qutip/qutip/issues/950#issuecomment-463457230,1,['clear'],['clear']
Usability,"Hi. Thanks for reporting this problem. I'm not sure if I'd call it a bug or not, but I understand that this behavior can be a bit confusing. With odeOpts.rhs_reuse = True the same function will be use until rhs_clear() is called, which in your case would be. qtp.rhs_clear(); qtp.propagator([H0, [Hint, '1-w*t']], 5, [], {'w':1/5.}, opt=odeOpts). when yo change the time-dependency function strings. . Maybe this needs to be emphasized more in the documentation, or perhaps rhs_clear() could be called automatrically from within propagator, but this could prevent one from really reusing the rhs function for several propagators with the same rhs function (for example with different H0 or Hint). . I'll leave this ticket open for now so we'll remember to think some more about how this issue should be handled in the best way. . Thanks again for your feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17106896:852,feedback,feedback,852,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17106896,1,['feedback'],['feedback']
Usability,"Hmmm. You're right that there will be some nasty merge conflicts with #1181, but I don't see anyway around those, to be honest without that PR being merged before this one (which doesn't look very likely). Barring #1181 getting merged in the next day or two, I'd just go ahead with these commits as written. If the new-style tests were merged, `test_gates.py` would have a much tinier diff. The single-qubit gates would just go between lines 222 and 223 in https://github.com/qutip/qutip/blob/77c21f8a97ddfff2353490d3587cc1effdfe9abc/qutip/tests/test_gates.py#L222-L239 as; ```python; pytest.param(gates.x_gate, 0, ""X""),; pytest.param(gates.y_gate, 0, ""Y""),; ...; ```; (and we'd probably change the function name to `test_one_qubit`). The controlled qubits would similarly go into the next test's parametrisation list: https://github.com/qutip/qutip/blob/77c21f8a97ddfff2353490d3587cc1effdfe9abc/qutip/tests/test_gates.py#L241-L259. Overall, it's clear that you can't write sensible new-style tests without #1181 having been merged, so I wouldn't worry about it too much. I did drop in a couple of comments in-line (minor nitpicking), but given that this file may well get pretty much overwritten - keeping the actual tests, of course! - in short order, I wouldn't consider them changes that need to be made, unless Boxi asks. Also, as you noted, `test_gates.py` doesn't really do much testing of the actual form of the gates yet. I haven't actually been adding new tests as I go, because I wanted to keep #1181 roughly focussed on just converting what we've got so far.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607833088:947,clear,clear,947,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607833088,1,['clear'],['clear']
Usability,"Hmmm... interestingly it seems to work sometimes... ; I think the only way to work around it, is to execute the same program in parallel python consoles?; That way each program should live in it's own bubble... I hope :S; It's a shame. My problem is so stupidly simple to parallelize. Thanks anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/822#issuecomment-365681603:262,simpl,simple,262,https://qutip.org,https://github.com/qutip/qutip/issues/822#issuecomment-365681603,1,['simpl'],['simple']
Usability,"Huh, your right, it seems like there is some issue with my install, cleared it all out and it works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526#issuecomment-242815199:68,clear,cleared,68,https://qutip.org,https://github.com/qutip/qutip/issues/526#issuecomment-242815199,1,['clear'],['cleared']
Usability,I After the discussion in the GSoC meeting I changed the implementation to:; - try `mul` and return `NotImplemented` if `TypeError` is raised. (as jake suggested); - try `complex(other)` to inger `ishemr` and `isunitary`. (as Eric suggested). I think this is the simplest solution. @jakelishman are you ok with this implementation? I think the ideas of numpy broadcasting Qobj as scalar and `_scalar_properties` are really good but probably out of the scope of this PR.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-891906074:263,simpl,simplest,263,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-891906074,1,['simpl'],['simplest']
Usability,"I added a section to the test suite that will skip the tests if pyopencl is not installed in the last commit. To get them working, installing pyopencl via pip will not be sufficient. There are nice guides for setting up OpenCL in [Gentoo](https://wiki.gentoo.org/wiki/OpenCL) and [Arch](https://wiki.archlinux.org/index.php/GPGPU#OpenCL). But most OpenCL implementations are proprietary. I found an example of installing AMDAPP in a travis vm [here](https://github.com/JuliaGPU/OpenCL.jl/blob/master/.travis.yml). This is the OpenCL implementation I would recommend in absence of a GPU. But this script circumvents the license agreement and I am not sure whether this is legal. If you still intent to set this up, you can push changes to this branch as well. As for documentation I feel there is not much to document. There are already notebooks showing how to use `mcsolve` [here](http://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/example-photon_birth_death.ipynb) and [here](http://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-6-Quantum-Monte-Carlo-Trajectories.ipynb). If everything is set up just exchanging `mcsolve` with `mcsolve_cl` should do the trick. The nuances are documented in the docstring.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-258609202:198,guid,guides,198,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-258609202,1,['guid'],['guides']
Usability,"I adjusted the test to be sensitive to the original issues. new test is just a driven two-level system. not sure why the old test of a driven boson was insensitive to that test. i could make it sensitive by making the drive act on the frequency, like the example in #2386 but this is simpler. . also adjusted the test to compare a period of the dynamics from mesolve to the result from the steadystate solver.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2393#issuecomment-2053629426:284,simpl,simpler,284,https://qutip.org,https://github.com/qutip/qutip/pull/2393#issuecomment-2053629426,1,['simpl'],['simpler']
Usability,"I agree that on top level, these may seldom be used. It is not straightforwardly clear what is the added value of removing them, if no one is complaining or they are not hard to maintain. It may make things cleaner, but I am not aware of the implications. `eseries` seems used in the correlation module, possibly (marginally) also in `expect`. . If QobjEvo is a more modern way of applying`essolve`, that is fine with me, it would be nice to restructure it that way. My advice before switching to QobjEvo, is that its use be first well documented in the documentation's Users guide, which could be done by copy-pasting chunks from the notebook.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1281#issuecomment-638108837:81,clear,clear,81,https://qutip.org,https://github.com/qutip/qutip/issues/1281#issuecomment-638108837,2,"['clear', 'guid']","['clear', 'guide']"
Usability,I agree with @Ericgig on the possibility of having no template and adding the suggestions for tests in the template. . I understand now that the changelog in qutip/qutip was a bad idea for the reasons you mention.; I still think it would be nice to somehow automate the way the changelog is compiled (right now by whoever is in charge of the release). Is there a simple and smart way to do this? Otherwise we could just look up the changelog section in each PR as per this template.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649:363,simpl,simple,363,https://qutip.org,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649,1,['simpl'],['simple']
Usability,I agree with @jakelishman's general principle (and maybe we should even move the tests out of the `qutip` package for v5 still) but it's also really important to have an easy way for data layer implementations to run a comprehensive test suite *that is defined by the data layer*. I suspect that if anyone is running tests against master (i.e. what is currently dev.major) they will *want* tests to break if we add new methods. I have a slightly different proposal:. What if we create `qutip.core.data.testing` which is an explicitly exported suite of pytest classes that we intentionally expose for data layers to use? Initially the file can just import test classes from `qutip.tests.core.data`. I would also not use `__all__` in the individual test packages but instead import the test classes explicitly in `qutip.core.data.testing` so that it's 100% clear by reading just that file what the exported interface is (and adding new tests requires explicitly adding them into the exposed package).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874:855,clear,clear,855,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874,1,['clear'],['clear']
Usability,"I agree with @nwlambert that we should go without shifted object and simply add the shift in the times.; This shift method predate me, but I believe at some time solve would not work properly if not started at `0`...; But this should have been fixed a while ago. @victor-onofre, would you also remove the shifted operator, this should be right.; Also the `tlist` type is not tested and it could be a list instead of an array.; Ideally the same fixes should be made to `_correlation_mc_2t`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1929#issuecomment-1153946989:69,simpl,simply,69,https://qutip.org,https://github.com/qutip/qutip/pull/1929#issuecomment-1153946989,1,['simpl'],['simply']
Usability,"I agree, the current documentation isn't clear. I'll work on getting better documentation up soon. Thanks for the report!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/385#issuecomment-152451840:41,clear,clear,41,https://qutip.org,https://github.com/qutip/qutip/issues/385#issuecomment-152451840,1,['clear'],['clear']
Usability,"I also experienced problems with `fidelity`. Consider the following MWE:. ```; import qutip; import numpy as np. final = np.asarray([0.867314655330313 - 0.4576338188944636j, 0.17267952805615244 - 0.09111291375544905j, 0.013020232894921149 -0.006875138252288391j]); final_state = qutip.Qobj(final); target = np.asarray([0.9806443568092577, 0.19524328915024022, 0.014720852555238875]); target_state = qutip.Qobj(target). numpy_fidelity = np.abs(np.vdot(final_state.full(), target_state.full())); qutip_good_fidelity = np.abs((final_state.dag() * target_state)[0, 0]); qutip_bad_fidelity = qutip.fidelity(final_state, target_state); print('Correct: {}'.format(numpy_fidelity)); print('Still correct: {}'.format(qutip_good_fidelity)); print('Wrong: {}'.format(qutip_bad_fidelity)). # Correct: 0.9999999999849929; # Still correct: 0.9999999999849929; # Wrong: 1.0000000026189553; ```. The problem is clearly in the fact that you compute the fidelity of ket states by converting them into density matrices and using the general formula:; https://github.com/qutip/qutip/blob/564c987bdca385ae179730d0aad7b0d1e624e14d/qutip/metrics.py#L88-L113. This is fine in general, but can be very inefficient for large states, and is less numerically stable. An easy solution is to just compute the fidelity as the inner product when both states are kets. Moreover, the general formula might also be improvable: consider the following example (which uses the variables defined in the previous snippet):. ```; final_dm = qutip.ket2dm(final_state); target_dm = qutip.ket2dm(target_state); sqrt_final_dm = final_dm.sqrtm(); sqrt_target_dm = target_dm.sqrtm(); eig_vals = (sqrt_final_dm * target_dm * sqrt_final_dm).eigenenergies(); bad_fid = np.sqrt(eig_vals[eig_vals > 0]).sum(). prod_sqrt = (sqrt_final_dm * sqrt_target_dm); better_fid = scipy.linalg.svdvals(prod_sqrt.full()).sum(). print('bad fid: {}'.format(bad_fid)); print('better fid: {}'.format(better_fid)). # bad fid: 1.000000072436338; # better fid: 0.9999999999",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/925#issuecomment-542318121:895,clear,clearly,895,https://qutip.org,https://github.com/qutip/qutip/issues/925#issuecomment-542318121,1,['clear'],['clearly']
Usability,"I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:; - I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; - I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:1154,simpl,simply,1154,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462,1,['simpl'],['simply']
Usability,"I am actually fine with using a try/except with `data.mul` (definitely better than try/except with `complex(other)`). Is just that from previous feedback I thought this was not the canonical approach?. Regarding to `_scalar_properties`, I think it is a very interesting idea that would definitely be helpful for symbolic representations of `Qobj`. For current extensions (qutip-tensorflow and qutip-cupy) it is not really needed as `complex(other)` works just fine. I would prefer to not implement it and leave this feature for another PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889778895:145,feedback,feedback,145,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889778895,1,['feedback'],['feedback']
Usability,I am not really seeing the seg fault clearly in this trace. ; Please could you add some more description in here about what exactly you doing. That is steps to replicate. Please also include details about your environment by running `qutip.about()`,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-595872761:37,clear,clearly,37,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-595872761,1,['clear'],['clearly']
Usability,"I am not sure what your example of 'n' photons represents. However, if ; you mean what is the probability of a single-photon in the state, as ; measured by calculating the expectation value,the answer converges to ; 0.272 at about 14 states to one-part in a thousand. > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 18:08; >; > OK, if it's intended then there's nothing to change in the code. But I ; > think it would be helpful to document this in a clearer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does /not/ depend on th",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284316:467,clear,clearer,467,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284316,1,['clear'],['clearer']
Usability,"I am on the side on having 2 `default_dtype` options for the `Qobj` creation functions. I have some question as to how/where to make `default_dtype` more consistent. Applying the default at Qobj creation feels risky to me. In the solver it will end up converting the states before computing the expectation value. It could create strange interactions with operators and unitary transformations (`Qobj[Dense].dag() -> Qobj[CSR]`). `Qobj(scipy_csr)` could be converted to something else... However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion.; It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format? . In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. ps. Should `eigenstates` return the states in one operator instead of a list of kets? I guess the states were used to create the operators fed to `steadystate`, so operator output would be more practical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861:600,clear,clear,600,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861,1,['clear'],['clear']
Usability,"I am willing to make a PR to fix https://github.com/qutip/qutip/issues/544 and could include a fix for this as well. The way I am thinking I could do it right now is to put an extra `equal` parameter to `plot_wigner` which would have a default value and could be used to alternate between the two behaviors (with othonormal axes and without). I'd like a feedback on the best default value, each one having its own advantages:; * I could use `equal=False` as a default value, to keep the actual behavior. Using `equal=True`, users could alternate between the two behaviors.; * I could use `equal=True` as a default value. As far as I know, in the literature, Wigner plots often have orthonormal axes, so that a coherent state is a circular blob. This has the disadvantage of breaking the current behavior and code that may rely on it. Thanks",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/539#issuecomment-286453577:354,feedback,feedback,354,https://qutip.org,https://github.com/qutip/qutip/issues/539#issuecomment-286453577,1,['feedback'],['feedback']
Usability,"I believe that all permutation are run with `parametrize`. So the input (`qobj`) is compared to each outputs `(expected`), not just the matching one. Also the rotation matrix (`U = rand_unitary(3)`) must be constant. Here, at least 4 different random operators are created. Instead of `parametrize` and `yield` simply calling the function `case` would work:; ```; yield case(""Test Qobj: trunc_neg works for positive opers.""), \; rand_dm(5), method; ```; to; ```; case(rand_dm(5), method, None); ```; To keep the message, `assert_almost_equal` has a `err_msg` keyword to raise if the test fails. I do not believe the `yield` is the cause of the no cython fails. ps. I will make a branch of this PR and will add `mark` to prepare a subset of tests for faster testing #1147.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523:311,simpl,simply,311,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523,1,['simpl'],['simply']
Usability,"I closed the issue; it is too vague, sorry about that. From: hrahman12 ***@***.***>; Sent: Wednesday, April 20, 2022 5:16 PM; To: qutip/qutip ***@***.***>; Cc: Anna Naden ***@***.***>; Author ***@***.***>; Subject: Re: [qutip/qutip] Details of QuTiP user's guide (Issue #1759). Hi Anna, thank you for replying can you please give some more information about which particular part/s of the user guides you are finding these errors?. —; Reply to this email directly, view it on GitHub<https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AN2AJU6X7MKML5BRRV4IWHLVGB62PANCNFSM5LYUHNQA>.; You are receiving this because you authored the thread.Message ID: ***@***.******@***.***>>",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759#issuecomment-1104665213:257,guid,guide,257,https://qutip.org,https://github.com/qutip/qutip/issues/1759#issuecomment-1104665213,2,['guid'],"['guide', 'guides']"
Usability,"I completely agree with you that random tests really aren't the right way to go in general, but right now our problem is that basically QuTiP's entire testing suite is based on randomised tests, and that's an awful lot of technical debt to overcome any time soon :(. . The `dnorm` tests have historically been a huge problem, even though basically nobody's worked on `dnorm` for a long long time now (for context, see in particular #880 and #874). We don't actually even know if the failures in `dnorm` are deterministic and reproducible, although it turns out that I had a brief look into this when I joined as a GSoC student about a year ago... I don't remember doing it at all!. I know this is super inelegant and not the perfect method, but it's kind of a nasty trade-off - I don't have time to really dig into `dnorm` (a topic I know almost nothing about) to work out an appropriate solution to temperamental errors, we do want `dnorm` to be tested since we're shipping it, and the slight flakiness keeps causing us test suite failures about 1 in 10 times. I'm somewhat opposed to fixing the random seed because having the variance over several test runs does actually help us cover more ground (eventually) - fixing it to a ""known good"" seed actually seems to me to be more of a mask of potential problems than this. Of note: the pytest plugin I'm using reports the number of reruns it performed in the analysis at the bottom - they show up in a yellow alongside the ""skips"" and ""xfails"" - so it's not completely hidden. I'd love to have a property-based testing suite like hypothesis up and running - that definitely seems like the proper solution to this in the end. In the meantime, I'm open to swapping to a fixed random seed if you think that's much better - testing is one place where I'm really aware of my lack of formal experience in software engineering, so I'm basically just learning as I go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227:1893,learn,learning,1893,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815317227,1,['learn'],['learning']
Usability,"I couldn't see the math there (the images are broken for some reason), but from the code, I think I see the problem. `super_tensor(L, L)` is indeed what you want, but the `rhovec` Qobj still doesn't act right under ordinary tensors for the same reason. The version of `super_tensor` that I contributed doesn't do much of anything useful for states (this would be a nice improvement, to be sure), but in the meantime you can probably work around by using `operator_to_vector(tensor(vector_to_operator(rhovec), vector_to_operator(rhovec)))`:. ``` python; In [1]: from qutip import *. In [2]: rho = 0.5*qeye(2). In [3]: rhovec = operator_to_vector(rho). In [4]: L = spost(sigmax())*spre(sigmax()). In [5]: L2 = super_tensor(L,L). In [6]: L2*tensor(rhovec,rhovec); ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-6-27459f98c087> in <module>(); ----> 1 L2*tensor(rhovec,rhovec). /usr/local/lib/python2.7/dist-packages/qutip/qobj.pyc in __mul__(self, other); 430 ; 431 else:; --> 432 raise TypeError(""Incompatible Qobj shapes""); 433 ; 434 elif isinstance(other, (list, np.ndarray)):. TypeError: Incompatible Qobj shapes. In [7]: L2 * operator_to_vector(tensor(vector_to_operator(rhovec), vector_to_operator(rhovec))); Out[7]: ; Quantum object: dims = [[[2, 2], [2, 2]], [1]], shape = [16, 1], type = operator-ket; Qobj data =; [[ 0.25]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0.25]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0.25]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0. ]; [ 0.25]]; ```. If you're interested in learning more about tensor products on superoperators, the reshuffling operator used in `super_tensor` was taking from [Chris Wood's paper](http://arxiv.org/abs/1111.6950) on the topic.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/238#issuecomment-57060478:1573,learn,learning,1573,https://qutip.org,https://github.com/qutip/qutip/issues/238#issuecomment-57060478,1,['learn'],['learning']
Usability,"I did this work some time ago, and so I did a git rebase in order to try and avoid any conflicts; I was advised this is the thing to do in such circumstances.; It seemed to go okay, some feedback on whether I did the right thing and did it correctly would be welcome",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/350#issuecomment-113537434:187,feedback,feedback,187,https://qutip.org,https://github.com/qutip/qutip/pull/350#issuecomment-113537434,1,['feedback'],['feedback']
Usability,"I do not think it's a _good first issue_...; There are multiple possible solutions and it is not clear which is the best one:. 1. Ensure all eigen values and eigen vectors are computed.; 1.1 This could be done by finding an alternative to scipy to solve for sparse matrix decomposition, but it would add extra requirement and it must be easy to install with pip.; 1.2 Use a third call to `scipy.sparse.linalg.eigs`/ `scipy.sparse.linalg.eigsh` using `sigma` to find all the pseudo degenerate values. It need to be done while being careful about special cases. This would make the sparse eigen solver even slower than it already is.; 2. Allow to sort by other orders, such as the complex value or magnitude. This would not solve the issue, but give some options to go around it. However the dense eigen solver would be expected to behave the same and the dense eigen solver does not have this options, so we need to implement it ourselves. This sorting option would also be required for any other data type we want to support. To go around that, the `Qobj` methods could be responsible for the sorting, the `sort` argument would only be passed to the dispatched function when `sparse=True`.; 3. Refuse to use the sparse solver for the full decomposition as scipy does. The sparse eigensolver is both slow and hard to use in this case. Also the eigen vectors computed by the sparse solver are stored in a dense array, so it is not that useful to save memory...; 4. Implement our own sparse eigen decomposition...; 5. Only document the issue without fixing. The default is the dense solver, which is both faster and safer in almost all cases.; 6. Something else...; ; I would personally go for either 1.2 of 3. ; Adding different sorting options in `Qobj` methods (2) and removing them from the dispatched functions, could be nice, but it's not a fix. The place to start would be to debate on the solution. If you have some opinion on the matter, please let us know.; Once we've made up our mind, you can",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1998#issuecomment-1472150161:97,clear,clear,97,https://qutip.org,https://github.com/qutip/qutip/issues/1998#issuecomment-1472150161,1,['clear'],['clear']
Usability,"I don't have xvfb (pytest-xvfb) installed specifically for qutip, but it is used by other packages (The general use of pytest-xvfb is to facilitate testing of GUI, graphical or windowing functionality without having an normal Xserver active. That is, it can be useful for automated CI testing of gui packages, for instance in chroots or cloud CI infrastructure). Since qutip doesn't use xvfb directly this bug won't be a problem for general CI testing, where only qutip is loaded on a cloud instance (for instance Debian testing done at https://ci.debian.net/packages/q/qutip/). But before I upload a package to the Debian infrastructure, I like to run the tests on my own system to be confident they're likely to pass. So this is where the problem happens, running tests on my own system, where I have pytest-xvfb installed for testing other packages. (pytest has this bad habit of loading all available plugins whether or not they're actually used by the tests being run. It's quite annoying actually. It would be better if it only loaded plugins specified in conftest.py). So the use case is running the qutip tests on my own system, where pytest-xvfb simply happens to be installed for other purposes not related to qutip. There are ways of working around the problem, for instance the `--no-xvfb` option could be explicitly added to the `pytest` command line. But it can be useful if the test code itself can be made robust with respect to the problem (e.g. in this case just replacing `plt.clf()` with `plt.close('all')`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791:1155,simpl,simply,1155,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909115791,1,['simpl'],['simply']
Usability,"I don't think it breaks the functional API at all - in fact it almost makes it stronger, since everything is a ""function"" at every stage. This kind of partial application is classic part of functional programming. Perhaps I don't understand _why_ you want to move to a class-based API? I'd be quite strongly against having the user have to instantiate classes to do very simple parts like creating operators. Certainly in Python programming, I don't think a class-based interface is de facto the right sort to aim for, and procedural is much more ""Pythonic"". For one, it's a lot of unnecessary boilerplate for simple operations. It adds cognitive complexity for the advanced user to decide ""should I use `displace` or `Displacer`?"", and in the strong majority of use-cases, the operator creation is not a computational bottleneck so we'd be adding it for no gain. A lot of operators have no meaningful reason to live in a class, like `sigmax` and so on, so now you have a split between operators that need a class and operators that don't, or you do something really crazy like requiring the user to do; ```python; sx_builder = qutip.operators.SigmaX(); sx = sx_builder.get_operator(); sy_builder = qutip.operators.SigmaY(); sy = sy_builder.get_operator(); sz_builder = qutip.operators.SigmaZ(); sz = sz_builder.get_operator(); ```; when all they wanted was `qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()`. Obviously that example is a bit facetious, but what benefit does the user derive from having to write boilerplate to access simple functionality?. All the operators already share a class in `Qobj`, and things like `displace` and `sigmax` are factory methods of `Qobj`. What shared functionality do the factory methods possess that means they should be classes?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332:371,simpl,simple,371,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332,3,['simpl'],['simple']
Usability,"I don't understand why the first commit to this PR is a modification of steadystate.py. Sorry, I think I might have messed up the history with some merges or something (still learning good work flow!). The master branch is merged in after this commit, and github tells me that the branch is up to date with the base branch. Please review this before accepting.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404#issuecomment-163322225:175,learn,learning,175,https://qutip.org,https://github.com/qutip/qutip/pull/404#issuecomment-163322225,1,['learn'],['learning']
Usability,"I ended up closing this PR because the implementation needs a significant overhaul. Now that I understand the code better it's clear that the pulse generation classes are intended to produce a single specific pulse and not a set of pulses for each control. The current implementation attempts to do the latter, resulting in having to pass the control index as an (very hacky) input to all the pulse methods. In other parts of control module, the former approach of a list of pulse instances is already taken, so this PR also results in both the ""correct"" and the ""hacky"" approach being used. This looks like an important / great feature to have, but I didn't want to rush merging the implementation for 4.7. Apologies for not writing an explanation when I closed the PR -- I was obviously rushing around too much before going on leave. :/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1369#issuecomment-1096677056:127,clear,clear,127,https://qutip.org,https://github.com/qutip/qutip/pull/1369#issuecomment-1096677056,1,['clear'],['clear']
Usability,"I found a workaround for this. Instead of using b.clear() I moved bloch instantiation inside the loop that puts frames of the animation together and I had to give a different file name myself every time. ```; for i in range(len(sx)):; b = Bloch(); b.vector_color = ['r']; b.view = [-40,30]; b.add_vectors([np.sin(theta),0,np.cos(theta)]); b.add_points([sx[:i+1],sy[:i+1],sz[:i+1]]); b.save('%04d' % i, dirc='temp') #saving images to temp directory in current working directory; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796#issuecomment-357856316:50,clear,clear,50,https://qutip.org,https://github.com/qutip/qutip/issues/796#issuecomment-357856316,1,['clear'],['clear']
Usability,"I good guide for compiling openblas and building numpy against it can be found here:. osdf.github.io/blog/numpyscipy-w ith-openblas-for-ubuntu-1204-second-try.html. Calling the blas functions from inside of cython was a project called Tokyo:. https://github.com/tokyo/tokyo. As you can tell by the file dates, it has more or less been abandoned. However, the work they have done would obviously be a good starting point for doing something similar.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/55#issuecomment-25426540:7,guid,guide,7,https://qutip.org,https://github.com/qutip/qutip/issues/55#issuecomment-25426540,1,['guid'],['guide']
Usability,"I got it from here: https://qutip.org/docs/pre-release/guide/guide-heom.html. This is the link that ""online html documentation"" links to in the qutip webpage. Is this not keept up to date, as https://qutip.readthedocs.io/en/master/guide/guide-heom.html is?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2104#issuecomment-1454064987:55,guid,guide,55,https://qutip.org,https://github.com/qutip/qutip/issues/2104#issuecomment-1454064987,4,['guid'],"['guide', 'guide-heom']"
Usability,"I guess there's two things, firstly as you go to higher energies, again convergence errors will appear as levels near the cut-off are sensitive to the cut-off. Also, I think you can see the repeated eigenvalue around the middle of the spectrum which was recently discussed here as a consequence of truncation https://github.com/qutip/qutip/issues/1587 . Secondly, as far as I can see the +- x examples give similar convergence. This example is easily solved analytically, the energies are just that of a normal harmonic oscillator + displacement (+-3 in your case) -0.5. You can calculate this with a couple of just linear coordinate transformations in x. Perhaps there is some issue with your +x solution in pyslise?. Also, for this type of question, you are likely to get good feedback/help from the community if you post to the qutip google group https://groups.google.com/g/qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1597#issuecomment-874060820:779,feedback,feedback,779,https://qutip.org,https://github.com/qutip/qutip/issues/1597#issuecomment-874060820,1,['feedback'],['feedback']
Usability,"I guess you have to make a deep copy of it? Otherwise strange things might; happen. I get caught out by this one all the time!. On 3 January 2017 at 17:02, Shahnawaz Ahmed <notifications@github.com>; wrote:. > Yes. That makes it simpler to add a new gate again and again if you have it; > defined somewhere in your code. Instead of writing all the keyword; > arguments.; >; > On 03-Jan-2017 1:50 PM, ""Alexander Pitchford"" <notifications@github.com>; > wrote:; >; > > Sounds like a good idea to me.; > > You mean check if the first arg is a Gate, if so then no need to create; > > one, just add it to the circuit; > >; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/qutip/qutip/issues/610#issuecomment-270051834>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AGpUBPQHUatbpFYNG-lis-eCIKx1URIhks5rOdN9gaJpZM4LY-mP>; > > .; > >; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/610#issuecomment-270065494>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7X6C9ymvaDF0-xX1-qyOYTpfLtR6ks5rOgCTgaJpZM4LY-mP>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/610#issuecomment-270071919:229,simpl,simpler,229,https://qutip.org,https://github.com/qutip/qutip/issues/610#issuecomment-270071919,1,['simpl'],['simpler']
Usability,"I had actually tried that before, following the user guide for conda, but it didn't work. Seems that it was fixed in a conda update, though, as it works fine now. Thanks! Will use that to test installation instructions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-150990762:53,guid,guide,53,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-150990762,1,['guid'],['guide']
Usability,"I have a similar problem in Sublime Text, though the progress bar does work in the terminal, IPython QtConsole and IPython Notebook for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63265244:53,progress bar,progress bar,53,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63265244,1,['progress bar'],['progress bar']
Usability,I have addressed some of the potential confusion on measurements in my GSOC blogpost [here](https://sarsid.wordpress.com/2020/06/14/an-introduction-to-quantum-measurements-in-qutip/).; Hope that helps and welcoming feedback.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643844273:215,feedback,feedback,215,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643844273,1,['feedback'],['feedback']
Usability,"I have finally gotten around to look at this. Compared to usual ODE evolution, the expm_multiply (as of SciPy 0.18) is over an order of magnitude slower when testing against simple harmonic oscillator evolution. Profiling showed that the inf and one norms were the main issue as they cannot call BLAS functions for complex numbers. I wrote Cython versions that were ~5x faster. The next profile suggested replacing the dot calls with our own spmv. All together, I could get a factor of 3x improvement over the base SciPy code, but the spmv is still the dominate time consumer, so there is nothing further I could do to speed things up.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/84#issuecomment-242475532:174,simpl,simple,174,https://qutip.org,https://github.com/qutip/qutip/issues/84#issuecomment-242475532,1,['simpl'],['simple']
Usability,I have read a bit about the reasons for moving reduce. The main one seems to be that code using it can be unclear. And that in most cases a for loop can be used to achieve the same in a clearer way. I think that may be applicable here. I have spent a while looking at the line that uses it and I am still not sure what it is doing. I think sacrificing a little succinctness for clarity here may be beneficial.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128328061:186,clear,clearer,186,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128328061,1,['clear'],['clearer']
Usability,"I have tried the simple two-level systems in http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html and found an unexpected error, could you help to solve this problem #854 ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-382599620:17,simpl,simple,17,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-382599620,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"I installed visual studio 2015 from https://visualstudio.microsoft.com/vs/older-downloads/ , after that I simply followed instructions of qutip documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-480488981:106,simpl,simply,106,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-480488981,1,['simpl'],['simply']
Usability,"I know this is a very simple change, but could we add a test that it works? E.g. maybe a test in which we subclass `Data` and then create an instance of it and access shape?. And perhaps a test that shows that shape is immutable?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663:22,simpl,simple,22,https://qutip.org,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663,1,['simpl'],['simple']
Usability,"I like the idea of keeping `tensor()` simple, and a literal implementation of the tensor product— while there is a usecase for the reshuffling in that way (it's actually pretty common if you have a channel that you want to act on each subsystem in some register), I think your strategy makes a lot of sense for `tensor()` itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99#issuecomment-39529579:38,simpl,simple,38,https://qutip.org,https://github.com/qutip/qutip/pull/99#issuecomment-39529579,1,['simpl'],['simple']
Usability,I personally would be actually a bit confused if the alpha values were array-like and the simple solution would certainly be enough for me. But then again I do not have the very big picture of `qutip`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1287#issuecomment-1066987120:90,simpl,simple,90,https://qutip.org,https://github.com/qutip/qutip/issues/1287#issuecomment-1066987120,1,['simpl'],['simple']
Usability,I resolved the issue with setting the alpha for multiple sets of vectors and added tests for that (and for setting the alpha of points). I'm not going to add tests for Bloch3d now since that uses mayavi which looks like it might be a whole other testing rabbit hole. I will simply run some checks in a notebook manually tomorrow. I still need to update the docstring and look at what the docstring format changes are about. @xspronken @AGaliciaMartinez Reviews of my most recent commits welcomed.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1837#issuecomment-1093447511:274,simpl,simply,274,https://qutip.org,https://github.com/qutip/qutip/pull/1837#issuecomment-1093447511,1,['simpl'],['simply']
Usability,"I see @christian512, so maybe we can skip that. . With regards to the documentation, Sphinx can be a mess. I wrote some guidelines [here](https://github.com/nathanshammah/scikit-project/blob/master/5-docs.md). I think you could skip installing it properly and just fork the repo and modify; the [guide-qip.rst](https://github.com/qutip/qutip-doc/blob/master/guide/guide-qip.rst) file, adding some information on the visualization of quantum circuits using this LaTeX-based tool. It could be a standalone subsection for simplicity. `.rst` files are restructured text file very similar to markdown.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-602749277:120,guid,guidelines,120,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-602749277,5,"['guid', 'simpl']","['guide', 'guide-qip', 'guidelines', 'simplicity']"
Usability,"I see a similar issue with just calculating the eigenstates of a simple $\sigma_x \otimes \sigma_x$ operator. ``` python; import qutip as q; import scipy. op = q.tensor(q.sigmax(), q.sigmax()); eigv_sp, eigs_sp = op.eigenstates(sparse=True); eigv_full, eigs_full = op.eigenstates(sparse=False); eigv_scipy, eigs_scipy = scipy.linalg.eigh(op.full()); print(eigv_sp, eigs_sp); print(eigv_full, eigs_full); print(eigv_scipy, eigs_scipy); ```. The sparse=True gives eigenstates . ```; [Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; Qobj data =; [[ 0.36754009-0.27845703j]; [-0.49166296+0.21364338j]; [ 0.49166296-0.21364338j]; [-0.36754009+0.27845703j]]; ````; whereas `sparse=False` and the `scipy.linalg.eigh` give the correct states. ```; Quantum object: dims = [[2, 2], [1, 1]], shape = (4, 1), type = ket; Qobj data =; [[-0.70710678]; [ 0. ]; [ 0. ]; [-0.70710678]]; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1998#issuecomment-1416809483:65,simpl,simple,65,https://qutip.org,https://github.com/qutip/qutip/issues/1998#issuecomment-1416809483,1,['simpl'],['simple']
Usability,"I see your point that we should keep those debugging tools as simple as possible. Instead of reading the version in `qutip.about`, we do it using a hook function in the family package that returns the repo name and version etc. Something like; ```python; def about(family_pkgs=[]):; ...; for family_pkg in family_pkgs:; package_name, package_version = family_pkg._about_family_pkg(); print(....); ```; In this way we don't need to pass the string name of the package but just pass the package itself. If anything went wrong, it is just in the implementation of `_about_family_pkg` in the family packages.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1870#issuecomment-1106117187:62,simpl,simple,62,https://qutip.org,https://github.com/qutip/qutip/pull/1870#issuecomment-1106117187,1,['simpl'],['simple']
Usability,I see. `propagator` performed better with a system of d=2^5 in a simple test. I better do some testing of even larger systems then before merging this. Any thoughts on why `propagator` might be slower also for small systems and short integration times? Some overhead related to parallelization? Thanks for the info.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-230108497:65,simpl,simple,65,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-230108497,1,['simpl'],['simple']
Usability,I slightly edited the question to make the code easier to read. You should probably consider using the array-based format https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#methods-for-writing-time-dependent-operators. Precompute the `q_0` and `q_02` as NumPy arrays with respect to each `t` in the `t_list` using `np.gradient`. Then give them to the solver.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1834#issuecomment-1065163266:152,guid,guide,152,https://qutip.org,https://github.com/qutip/qutip/issues/1834#issuecomment-1065163266,1,['guid'],['guide']
Usability,"I still vote for keeping it as it is, because I think it makes sense to keep Qobj \* Qobj in the space of Qobj. This is now numpy.ndarray, numpy.matrix and scipy,sparse.spmatrix works, and I think that one would expect Qobj to do the same. A simple example: imagine you get a Qobj x as an argument to a function, and you do some computation like x.dag() \* op \* x with some operator op. If x is a ket you will get a Python complex as a result with your suggested behavior. But if x is an operator instead you will get a Qobj. Or if x is a tensor of an operator and a ket (like in the top of this issue) you will get something in between, a reduced dimensionality operator. I think it makes a lot more sense to keep the results of all these cases as Qobj. Then if one for example want to do the trace of the result it should work in all cases, and no special handing of C-numbers would be required since Qobj([1]).tr() would give something reasonable, but (Python complex).tr() would obviously fail. The use-case you are interested in, abs(some_bra \* some_ket), could easily be implemented in Qobj by implementing the **abs** special function. I think that would be a better way.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/28#issuecomment-28302814:242,simpl,simple,242,https://qutip.org,https://github.com/qutip/qutip/issues/28#issuecomment-28302814,1,['simpl'],['simple']
Usability,I think @nwlambert and I can help with this. ; We could add some details in the Users Guide: ; 1) make a short `dynamics-reaction-coordinate.rst` file and place it in `guide/dynamics/`;; 2) link that file to the list of dynamical solvers in `dynamics.rst` inside `qutip-doc/guide/`; ; 3) add rcsolve to the list of methods cited in `apidoc/functions.rst` (unless that is self-generated); maybe this explains why in the API guide is not rendered automatically from rcsolve.py's docstrings.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1521#issuecomment-497561991:168,guid,guide,168,https://qutip.org,https://github.com/qutip/qutip/issues/1521#issuecomment-497561991,3,['guid'],['guide']
Usability,"I think `hypothesis` is the best method here in the long term, but it will most likely have to be a long-term goal. I think the main pro in favour of it is that it actually is making an attempt to remove randomness; it's attempting to comprehensively test a spanning set of input parameters, rather than just Monte-Carlo'ing our way through and hoping. There's a couple of points which make it difficult to implement:. 1. QuTiP can be quite fragile with respect to unexpected input formats, particularly in older parts of the code.; 2. Various components are only accurate up to some tolerance, and the error propagation to work out how that corresponds to useful measurable quantities can be rather tricky. Those are certainly both solvable problems, and point 1 in particular is just general improvement of usability. The second point is about designing the tests well, which again is certainly doable, but will take a while (it takes long enough just to refactor them, let alone a total rewrite of large chunks of them!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663:809,usab,usability,809,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-629272663,1,['usab'],['usability']
Usability,"I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"". I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427:230,simpl,simply,230,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427,1,['simpl'],['simply']
Usability,"I think the code ciuld be simplified for the user. The interface should be like the other solvers. E.g. no need to call odeint by hand, etc..",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332188600:26,simpl,simplified,26,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332188600,1,['simpl'],['simplified']
Usability,"I think the first PR, 1757, was done on master rather than a branch, and I received guidance that this was not a good idea. So let's close 1757.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1762#issuecomment-1015168857:84,guid,guidance,84,https://qutip.org,https://github.com/qutip/qutip/pull/1762#issuecomment-1015168857,1,['guid'],['guidance']
Usability,"I think this is still relevant and could be a topic of work for future google SoC students or other students. . Recently I met Johannes Bausch who at Caltech used the algorithm toolbox for some fun example (predict the winner of the [world cup](https://quantumfrontiers.com/2018/07/02/the-world-cup-from-a-quantum-perspective/)), but this points to the fact that the QIP suite is still used. . Also, there might be room for basic I/O functionality to QiSKit and Rigetti. This quantum compiler integrability would further drive interest from the educational point of view. QuTiP is the best playground to learn realistic quantum mechanics and the notion of a compiler back-end could prove enticing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/441#issuecomment-464298751:604,learn,learn,604,https://qutip.org,https://github.com/qutip/qutip/issues/441#issuecomment-464298751,1,['learn'],['learn']
Usability,"I think what you have done in the recent commit with the two if statements seems like a nice, simple, practical solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/875#issuecomment-394646070:94,simpl,simple,94,https://qutip.org,https://github.com/qutip/qutip/pull/875#issuecomment-394646070,1,['simpl'],['simple']
Usability,I think you can get one running for your fork by simply logging in.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607482278:49,simpl,simply,49,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607482278,1,['simpl'],['simply']
Usability,"I think you don't need to generate the apidoc manually. To add the API docs, all you need is to add the path `qutip.core.gates` to https://github.com/qutip/qutip/blob/master/doc/apidoc/functions.rst#quantum-objects. `make html` should then automatically read all the functions in the file and generate the API doc. To modify the API doc, e.g. adding new things, one simply edits the docstrings in each of the Python function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2144791759:366,simpl,simply,366,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2144791759,1,['simpl'],['simply']
Usability,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:174,simpl,simplifications,174,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['simpl'],['simplifications']
Usability,"I thought we had resolved the installation issues with the Fortran side by making the MC solver a optional (default to False).; I am not that I have fully digested everything in this thread, but @zerothi seems confident that there is just some small change that we need to improve integration with the latest Numpy. Its not clear to me what are the risks or other downsides.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155040632:324,clear,clear,324,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155040632,1,['clear'],['clear']
Usability,"I totally agree it is the right way to do numerics, but my point is that it should be written in the documentation.; For now the user have no way to answer the question ""in which unit should I express my Hamiltonian"", apart reading the source code. It is especially misleading that the [guide](http://qutip.org/docs/latest/guide/dynamics/dynamics-master.html) write hbar in the equations but never say how it is handled.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1360#issuecomment-696067845:287,guid,guide,287,https://qutip.org,https://github.com/qutip/qutip/issues/1360#issuecomment-696067845,2,['guid'],['guide']
Usability,"I tried your suggestions but unfortunately nothing changes. I think my issue is with the way the rotating frame approximation is being implemented. Prior to this, my issue was that the graph couldn't be plotted over a large time scale because w0 is so high, so I added (w-w0) to H0. That fixed it, but I'm not sure how that affects the H1_coeff function. Is it as simple as including a (w-w0) term there as well, or do I need to adjust it some other way? As you can see, the pulse does exist, but for some reason nothing I change in the code causes the pulse to affect the graphs in any way. . Also, I realized that the heaviside function may not actually be appropriate for this situation. My goal is to create a pulse that spikes up and dies down, but the heaviside function is a step function so it spikes up and stays there. Do you know if qutip has any functions for such pulses?. ![k](https://user-images.githubusercontent.com/29261370/113001273-42ce2600-9136-11eb-84f3-a4bcdd7c458f.PNG)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1466#issuecomment-810278045:364,simpl,simple,364,https://qutip.org,https://github.com/qutip/qutip/issues/1466#issuecomment-810278045,1,['simpl'],['simple']
Usability,"I understand completely!. I'd probably just go to `int64` with your internal CSR implementation for the moment. Would it be very easy to have the `int32`/`int64` boiled down to a single compile-time flag, for those people that compile QuTiP manually and feel they really need the smaller `int32` matrices? The pre-compiled pip/conda releases could be `int64`. That might be a simple way to provide some support for ""both"". Somehow, I thought that SciPy would put a lot more emphasis on performance, and do things like Kronecker products without conversion. It would seem that SciPy should be the place to really optimize the sparse linear algebra implementation, including all the possible combinations like `CSR * DIA`. Then everyone could build on top of that, making custom sparse-matrix implementation unnecessary. Maybe when someone gets some serious funding for working on QuTiP, encapsulating all of this better would be doable. So, just something to keep in mind before bolting on too many things onto the existing custom implementation (like multiple sparse and full storage formats). Once you open up that can of worms, it just might be better to re-design `Oobj.data` to have a very broad base (e.g. SciPy), and keep the custom CSR as an optional, highly efficient implementation for the special case, maybe in a separate package. Either way, it's going to be a lot of work, and not something for a minor-version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384094285:376,simpl,simple,376,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384094285,1,['simpl'],['simple']
Usability,"I use the qutip to do some Grover simulations. having a Hilbertspace of Grover an an additional entangled Hilbert space. In a simpler version there is only one state in the entangled Space so the program automatically chooses dimension 1. ; And then there are allot of errors coming because of this qutip error. ; At the moment I fixed it using a patched qutip version. And I think there are more cases when one has dynamical dimensions of a space, that there are cases in which the dimension is 1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399020891:126,simpl,simpler,126,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399020891,1,['simpl'],['simpler']
Usability,"I was checking the status of this PR, sorry for the delay, @abhisekupadhyaya. . 1) **Address comments**: There's been some updates and CI tests pass. However, my comments are still not addressed, e.g., updates in docstrings, see above. Addressing this before the next months is crucial as then there may be quite some activity on the `qip` module. . 2) **Add tests**: We also need to add at least a couple of tests with some examples circuits. The tests could check:; 2.a) that the circuit does the same thing; 2.b) that the circuit is exactly the same (no change of gates into other gates). 2) **Qasm export**: Adding an export feature, e.g. `to_qasm`, would be great. But this PR could address just the import and be fine (changing name would be best). If the `to_qasm` feature was here, one could simply test it one way and return, and check that, e.g.; ```; read_qasm(qutip_circuit1.to_qasm()) == qutip_circuit1; read_qasm(qasm_circuit2).to_qasm() ==qasm_circuit2; ```; if this feature was there, one could also test randomly generated circuits. @abhisekupadhyaya do you think you can address 1) and 2)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565:800,simpl,simply,800,https://qutip.org,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565,1,['simpl'],['simply']
Usability,"I was imagining something much simpler for the exception class. There is a backport of the exceptiongroup stuff to older Pythons that we could use if we wanted to: https://pypi.org/project/exceptiongroup/. It's another dependency, but it will mean that on Python 3.11 people could start using ExceptionGroup and `except*` immediately if they wanted to. Users on Python 3.10 and below would have to catch ExceptionGroup or use the backport's ugly `with catch(...)` mechanism. . Then, many years from now when Python 3.10 is obsolete, we could drop the backport entirely. Personally I'm in favour of the simpler `ParallelMapException` that doesn't inherit from all the other exceptions. Then when 3.11 is out we can make `ParallelMapException` inherit from `ExceptionGroup` and 3.11 users will be able to use `except*`. People supporting 3.10 and below will have to use `except ParallelMapException`, but that will work just as well on 3.11.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437:31,simpl,simpler,31,https://qutip.org,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437,2,['simpl'],['simpler']
Usability,"I was just thinking about this again and came up with a good speed up for the truncated Hilbert space. I can't think of any method to get analytic closed-form solutions for the truncated space, though, so this is just a more efficient numerical method. First we take the generator of the displacement operator `G`, such that `exp(G)` is the displacement operator we're looking for. `G` is anti-Hermitian, and so it shares its eigensystem (up to scaling of the eigenvalues) with the Hermitian `i G` and consequently is diagonalised by a unitary formed of its eigenvectors. Now `S = i G / abs(alpha)` is a tridiagonal Hermitian, and with a similarity transformation we can find a _real-symmetric_ tridiagonal `T = P^-1 . S . P` for some diagonal unitary `P` (which is easy to calculate). The reason for scaling out `alpha` here should become clear at the end. The main diagonal of `T` is all zeros, and the first sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equival",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:840,clear,clear,840,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['clear'],['clear']
Usability,"I was not referring to the implementation, I agree that the method you implemented is clearly much better, because as you say it only calculates matrix-vector product and trace in one go. However, you could have kept the same function API as previous cy_expect_rho_vec function and I doubt it would make any difference in the performance (perhaps a a small difference, and in that case we can keep both, but then the old cy_expect_rho_vec should use the same implementation as the one you suggested for cy_expect_rho_vec_fast).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/56#issuecomment-25358782:86,clear,clearly,86,https://qutip.org,https://github.com/qutip/qutip/pull/56#issuecomment-25358782,1,['clear'],['clearly']
Usability,"I will vote for a deprecation warning being raised for a few versions of QuTiP with a `compile()` function that does nothing. The deprecation warning can briefly explain what changed and how to tackle it (in this case simply not use `.compile()`). It can also raise an error based on QuTiP's version such that our tests warn us about needing to remove it. Even if its a rarely used function and mostly employed internal, I still think that we should deprecate it appropriately as it will help making a smother transition to QuTiP 5.0.0. A HOW TO with some of the most significant porting changes is a also useful but I would prefer if it does not substitute deprecation warnings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1176355115:218,simpl,simply,218,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1176355115,1,['simpl'],['simply']
Usability,"I would like to try to build the solution for this. **Task 1:** For chrome, the error seems to be due to the CORS (Cross-origin Resource Sharing) policy of google chrome.; `Access to XMLHttpRequest at 'file:///C:/Users/Sid/Desktop/qutip-doc/QuTiP_tree_plot/d3_data/qutip.json' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.`. To fix this, I created a local server (on port 8080) from the `../qutip-doc/QuTiP_tree_plot` folder and then ran the URL `http://localhost:8082/qutip_org.html` on chrome.; Egde doesn't seemed to have any problem in running `qutip-doc.html`. **Task 2:** ; Clarification - We would right a new script to generate `qutip.json` from `apidoc/functions.rst`, just like `QuTiP_tree_plot/qutip-structure.py`. Am I right?. **Task 4:** ; Can you please elaborate on task 4 as to link to which API docs. **Task 5:**; The script written in Task 2 can be made to run for `classes.rst` and a json file would be created which would be used to generate a tree, right?; Where would we put it in the docs? guide-overview?. PS: I'm sorry if I've asked or stated an obvious thing, I am new to this community and am still trying to fimiliarize myself. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588:1127,guid,guide-overview,1127,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588,1,['guid'],['guide-overview']
Usability,"I would rather have the styling checks part of CI than pre-commit. Pre-commit hooks are a nice way to automate repetitive tasks, but for coding conventions, each developer tends to have their own setup (e.g. I would run black or pyflakes as a plugin in my editor, so that I get immediate feedback or fixes long before making a commit). Pre-commit hooks are also a poor choice for checking that coding style is followed, because developers will have different operating systems, difference versions of Python, black, pyflakes, etc, etc and so there are certain to be differences between what is considered correct by the scripts run by different developers. Finally, there are many valid reasons to commit broken code into branches, and I would not want to prevent that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1742#issuecomment-1001477467:288,feedback,feedback,288,https://qutip.org,https://github.com/qutip/qutip/issues/1742#issuecomment-1001477467,1,['feedback'],['feedback']
Usability,"I would suggest to change the `|` for `,` and also add a space after `type` and others, for example: `type = oper`. This is so that the fomating resembles that of Qobj. Nevertherless, feel free to open a Pull Request as giving feedback there is usually more conveninent. . Thanks for your effort! I am looking forward to your contribution 😄 .",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2099#issuecomment-1454113177:227,feedback,feedback,227,https://qutip.org,https://github.com/qutip/qutip/issues/2099#issuecomment-1454113177,1,['feedback'],['feedback']
Usability,"I would write it as two separate collapse operators, just like you would do for a Hamiltonian with a constant and time-dependent term i.e. c_ops=[Op1,[Op2,’f(t)’]]. See the docs here,. http://qutip.org/docs/3.0.1/guide/dynamics/dynamics-time.html. for more info. Paul; On Sep 3, 2014, at 12:00 AM, Stefan Krastanov notifications@github.com wrote:. > What is the appropriate way to implement a colapse operator in mesolve that can not be expressed as time_dependent_function \* constant_operator (for instance Op1 + Op2*f(t))?; > ; > Is it only possible through rewriting the equation to be solved?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-54382667:213,guid,guide,213,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-54382667,1,['guid'],['guide']
Usability,"I'd be vastly surprised if there's a way of permitting a test which passes 99% of the time - on any particular test run how would it know?. I don't remember having seen anything about setting the initial seeds, but relying on a previous test to set a seed isn't a good idea - you'd always have to ensure that no tests were ever added or changed in-between that ever used random state or everything would get lost. We could fix the random seed for any test which uses random methods with a fixture to get around that. I actually think this is a true failure; the default solver `rtol = 1e-6`, but here we're using `rtol=1e-7` as the test, so the test is bugged (it's probably not the only one, and I may have missed some of these in `mcsolve` too). I should change this when I convert `test_mesolve.py`. Also, I clearly didn't read the log properly on that one - I thought it was one of the random errors from before!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625290303:811,clear,clearly,811,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625290303,1,['clear'],['clearly']
Usability,"I'd call the behaviour a bug. The partial trace keeping all possible subspaces has a clear, sensible meaning; I can't think of any circumstance where it would be surprising that it's a no-op. The behaviour happens because we're not explicit about the output type of `np.prod` in a few places in `_ptrace_dense` - I think we may have seen this before but looks like we never pushed the fix. I can do that shortly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1413#issuecomment-753968404:85,clear,clear,85,https://qutip.org,https://github.com/qutip/qutip/issues/1413#issuecomment-753968404,1,['clear'],['clear']
Usability,"I'll add that it might be worth addressing the fact that there are two common conventions for representing quantum states as tensors that each have their pros and cons. Perhaps this would be better placed in a separate issue, but I'll explain here anyway. Consider a joint state like $` |\psi_1 \psi_2 \rangle \langle \psi_3 \psi_4 | `$ where the dimensions of $` |\psi_i\rangle `$ are $` d_i `$. Two common representations of this abstract state as a tensor are; 1. $` (|\psi_1\rangle \otimes |\psi_2\rangle) \otimes (\langle \psi_3| \otimes \langle \psi_4|) `$, which has shape $`(d_1, d_2, d_3, d_4)`$; 2. $` (|\psi_1\rangle \otimes \langle \psi_3|) \otimes (|\psi_2\rangle \otimes \langle \psi_4|) `$, which has shape $` (d_1, d_3, d_2, d_4) `$. These two conventions essentially correspond to the ""super"" and ""choi"" representations for channels. Representation 1. is nice when you are doing most of your calculations with pure states, but then want a density matrix towards the end, which you can do with just `np.tensordot(my_ket_tensor, np.conj(my_ket_tensor), 0)`. Representation 2. is nice when you are working with density matrices and want to combine multiple subsystems, which you can do with `np.tensordot(my_density_tensor_1, my_density_tensor_2, 0)`. Doing either of these operations in the other representation involves very error-prone index permutation in my experience. When I said above that these two conventions should be ""addressed"" in some way, I was intentionally vague because I'm honestly not sure what the best way to do that would be. One option would be to simply mention it in the user guide somewhere, perhaps near the section on the Super and Choi representations. Another would be to support both conventions via optional parameters like `to_tensor_rep(my_qobj, convention='super')` or `to_tensor_rep(my_qobj, convention='choi')`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2353#issuecomment-2007183867:1587,simpl,simply,1587,https://qutip.org,https://github.com/qutip/qutip/issues/2353#issuecomment-2007183867,2,"['guid', 'simpl']","['guide', 'simply']"
Usability,"I'm a fan of the CodeClimate complexity tests, but I wouldn't be averse to removing its complaints about ""TODO"" comments - I'm not sure what we really gain from that in this sort of open-source development. In a business where people are working full-time then I imagine it can be worth preventing a merge to finalise some details, but in our very decentralised development, really in some cases (especially in the next major release), we do need to merge in parts of code we know to be imperfect. That said, we probably should make an effort to clear out some of the TODOs and FIXMEs that are in the codebase already. Pushed fix-up changes since last review:; - wrapped the steadystate SciPy linalg functions so they're simplified at the point of call, and unknown keywords in old SciPy versions are just silently ""eaten"" (this is the same behaviour that the file used to have, just formalised a little more).; - added `TODO` in a comment in `qutip.cy.pyxbuilder`; - changed the static class attributes in `test_superoper.py` into a `setup_method` function. *edit*: oh yeah, forgot that there were still errors in some old SciPy bits in the control module as well. I'll push a fix to that before this needs reviewing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305:546,clear,clear,546,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305,2,"['clear', 'simpl']","['clear', 'simplified']"
Usability,"I'm happy for it to be removed -- it's undocumented and fails straight away, so I doubt anyone is using it successfully.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1916#issuecomment-1145859124:39,undo,undocumented,39,https://qutip.org,https://github.com/qutip/qutip/issues/1916#issuecomment-1145859124,1,['undo'],['undocumented']
Usability,"I'm not entirely sure what's being asked here. `mcsolve` evolves the state `psi0` by the given Hamiltonian for the given times, and returns a `qutip.solver.Result` object that contains various quantities, such as how the state evolved for each of the trajectories at a given time, and values of expectation operators at those times if `e_ops` is given. This looks like a question that's best answered by [reading the user guide on solving system dynamics](http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1189#issuecomment-809405566:422,guid,guide,422,https://qutip.org,https://github.com/qutip/qutip/issues/1189#issuecomment-809405566,2,['guid'],['guide']
Usability,"I'm not sure about this, but I think that we should keep tensor as simple as possible. Meaning that we could support tensor products of superoperators with the same representation, if that operation makes any sense, but not have it converting between different representations or doing any reshuffling to make sure that `to_super(tensor(A, B)) == tensor(to_super(A), to_super(B))`. If there are any important use-cases where this property would be important we could reconsider this. Do you have any examples in mind?. If not I would recommend we raise an error if tensor is called with superoperators with different representations, and set Qobj.superrep to the correct representation if all arguments are the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99#issuecomment-39528800:67,simpl,simple,67,https://qutip.org,https://github.com/qutip/qutip/pull/99#issuecomment-39528800,1,['simpl'],['simple']
Usability,"I'm sorry I don't have a huge amount of time at the moment, but just to add an extra point (that it looks like I didn't think about before): if we _do_ add this, then any method that requires an unconditional `import qutip` in downstream packages probably isn't a suitable solution - `import qutip` already takes far too long (though a lot of this is importing various parts of `scipy`, which another library might do on our behalf), and it means that they'd have to do their own import checking to handle optional dependencies. In that sense, (ab)using Python's duck-typing with a magic method might be the best way to break the dependency/import problem. I'm definitely still against implicit conversion to `Qobj` in pretty much any situation - I can imagine we could define a safe, fairly forward-compatible interface for letting people do `qutip.Qobj(x)`, but as it stands, that's the limit that I'd want the interface to be used for. I particularly am really against the idea of implicit conversion. I don't see an advantage to allowing QuTiP functions to act implicitly on other objects; it means our own functions are slower (because we have to explicitly test inputs on _everything_), and it restricts us more from improving `Qobj`'s internals, because we have to maintain compatibility with the interface. We'd never really be able to output anything _other_ than a `Qobj` without this, so there's no reason not to just have the user convert the inputs to `Qobj` explicitly themselves - that isolates the efficiency penalty so you only pay it if you need it, and it'll likely be clearer in the end anyway, because explicit is better for following the logic than implicit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301:1588,clear,clearer,1588,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301,1,['clear'],['clearer']
Usability,I'm trying to make some simple example to see what went wrong. The `tempfile.TemporaryDirectory()` itself seems ok.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605326436:24,simpl,simple,24,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605326436,1,['simpl'],['simple']
Usability,I've created a new PR for the qutip-doc repository containing these changes: https://github.com/qutip/qutip-doc/pull/108; Might need some feedback on the text I wrote.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-602814171:138,feedback,feedback,138,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-602814171,1,['feedback'],['feedback']
Usability,"I've done another round of reviewing. I'm still unhappy with `register_feedback` and `add_feedback` on Solvers, but I'd like to propose that we try merge this PR with those in place and then argue about them separately outside of this PR and change things if I manage to convince you. :). I'll try summarize my point of view here (just so that I don't forget my own thinking):. - Solvers provide feedback.; - QobjEvos use feedback.; - Each solver class should define what feedback it can provide.; - Each QobjEvo should define what feedback it uses. The sensible place to do this is when the `QobjEvo` is constructed.; - When a solver is constructed or updated, it should check that it can provide the feedback used by all of the relevant `QobjEvo`s and raise an exception if it can not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1837260911:396,feedback,feedback,396,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1837260911,5,['feedback'],['feedback']
Usability,"I've done some simple benchmarks and indeed there seems to be a nice speedup. http://nbviewer.ipython.org/gist/jrjohansson/e63daeb3a41f95f163ad. so it definitely seems worthwhile to add support for this type of time-dependence in QuTiP. But string part of the definition of H is your example can be automatically generated knowning the times array, as I did in the notebook linked above. Therefore, I wonder if it may not be even more convenient if one simply could do. ```; >>> H = [H1, [H2, pulse]]; ```. It would require a few more changes in mesolve/sesolve and in _ode_check.py, but would give a nice clean API for using arrays to define time-dependences. How do you feel about that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44613285:15,simpl,simple,15,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44613285,2,['simpl'],"['simple', 'simply']"
Usability,"I've lost the plot a bit with a whole load of changes to `Coefficient` now merged into this PR. Is there a chance we can split that out into its own PR?. I would expect `QobjEvo.__call__` to be thread-safe/re-entrant. The fact that coefficients seemingly don't support this immediately is worrying to me. A simple call like that changing ""global"" state of the object is dangerous; it has a habit of leaking out even in single-threaded applications, just like the bug I described previously with a call to `mesolve` modifying an existing `QobjEvo` in place. In this case I don't see an immediate bug, but it's very non-obvious behaviour and it would be easy to accidentally introduce one in it in the future (or maybe I just can't think of one now). Having `_BaseElement` be mutable makes all time-dependent operations of `QobjEvo` unresolvably thread-unsafe without copying on every operation. That said, looking again, I'm not sure I understand `_BaseElement`: it seems like `_EvoElement` and `_FuncElement` do entirely different things on `call`? What's the purpose of it, and if we put all speed considerations aside what would the signature and behaviour of `_BaseElement._call` be?. Could you write some docstrings on all the elements to explain their use-cases as well, so we've got it all stored for the future?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122:307,simpl,simple,307,https://qutip.org,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122,1,['simpl'],['simple']
Usability,"I've marked out a few things that I noticed, though I'm still learning about the internals, so I'm not sure I caught anything of great importance. As for terminology for `type`, I don't see anything wrong with `operator-ket` or `operator-bra`, nor am I sure that there's any particularly standard terminology. Especially given that your terminology choice is clearly marked in `Qobj`'s docstring, I think it works quite well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/96#issuecomment-39093076:62,learn,learning,62,https://qutip.org,https://github.com/qutip/qutip/issues/96#issuecomment-39093076,2,"['clear', 'learn']","['clearly', 'learning']"
Usability,"I've tried this PR and it seems to work fine, and it indeed seems to make TextProgressBar more responsive, so I'll merge this now. Thanks. The coding style policy is that the code is supposed to be pep8 compliant, and style fixes are very welcome, so no need to revert anything.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/114#issuecomment-41647033:95,responsiv,responsive,95,https://qutip.org,https://github.com/qutip/qutip/pull/114#issuecomment-41647033,1,['responsiv'],['responsive']
Usability,"If those editors claim to provide terminal emulation it should be reported as bugs to them. However, even if it is fixed there it will take a long time before such a fix would reach end-users. I think in the interest of avoiding regressions I think we should restore the previous TextProgressBar and rename the current one to EnhancedTextProgressBar or something like that. Then this new progress bar would not disrupt peoples workflow and users who wants to use it can do so by creating an instance of it and pass it to progress-bar enabled functions using the progress_bar keyword argument.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63267628:388,progress bar,progress bar,388,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63267628,1,['progress bar'],['progress bar']
Usability,"If we moved normalization into the solvers, then we wouldn't need the preprocessors. The copy logic for processors could be kept so that the state is only copied by the results if the processors require it, but we'd then need the solver to tell the result whether it had already copied the state. We'd also need to make sure that the normalization logic in the solver was re-usable and override-able. The _post_init() would still be useful for processing options (e.g. the HEOMResult already does that to process the ado_return option).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1142321531:375,usab,usable,375,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1142321531,1,['usab'],['usable']
Usability,"If you work only with solver, you can only update the args once per step.; To have it apply each time the rhs is used it need to be inserted into `QobjEvo`.; The method `_prepare` is there for that, it's called at the start of `matmul`, and `expect`.; I was thinking of using it like this:. ```; cdef class QobjEvo_With_FeedBack(QobjEvo):; """"""; QobjEvo which support feedback.; """"""; cdef dict feedback. def __init__(self, Q_object=[], args={},; tlist=None, deepcopy=False, copy=True):; self.feedback = {}; super().__init__(Q_object, args, tlist, deepcopy, copy). def add_feedback(self, args_key, function):; self.feedback[args_key] = function. cdef double _prepare(self, double t, Data state=None):; if state is not None:; self.arguments({key: feedback(t, state); for key, feedback in self.feedback.items()}); return t + self._shift_dt ; ```; The state will be column stacked Data object, so the function much reshape and restore dims, etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142273887:367,feedback,feedback,367,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142273887,7,['feedback'],['feedback']
Usability,"In [3e530c0](https://github.com/qutip/qutip/pull/1854/commits/3e530c01d9cf686fc195c38c2cc26d0ee5bccfa8) I borrowed @nonhermitian's suggestion and switched to `concurrent.futures.ProcessPoolExecutor` in the hopes that the core Python developers have figured out how to make that works on Windows too. It also simplifies the management of the pool of workers, which is a win by itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854#issuecomment-1168954175:308,simpl,simplifies,308,https://qutip.org,https://github.com/qutip/qutip/pull/1854#issuecomment-1168954175,1,['simpl'],['simplifies']
Usability,"In `brtools`'s tests, we could check that the results `eigenvector` are mathematically right, without matching `scipy`'s result. Should be quite simple and we would more resilient to changes in scipy. . Did anybody check if it solves the segfault issues on Mac yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299#issuecomment-649523632:145,simpl,simple,145,https://qutip.org,https://github.com/qutip/qutip/issues/1299#issuecomment-649523632,1,['simpl'],['simple']
Usability,"In general in pytest we use the bare keyword `assert` for almost everything. All the functions in `np.testing` are from the ""before times"", when test tooling wasn't as good as it is nowadays - they were a big improvement on available warning messages back before 2015. Nowadays, though, `pytest` does introspection on assertion failures, so it has even better message reporting than the `np.testing` functions, and it lets you write much clearer code. For example, `assert_equal(x, y)` is much better spelled in pytest as `assert x == y`, because it's much faster to read and pytest does better error reporting for it. Similarly, testing for exceptions is better with; ```python; with pytest.raises(ValueError):; call_that_raises(1, ""hello, world""); ```; as opposed to the numpy form `np.testing.assert_raises(ValueError, call_that_raises, 1, ""hello, world"")` - the pytest one is much easier to read, and the error message is better. The only numpy one we still use is `np.testing.assert_allclose` when we're comparing several numpy arrays. That's just because `pytest` doesn't have a good function that's aware of multidimensional arrays (at least not one that I know). This file still has a load of old numpy testing code in it (e.g. `np.testing.assert_equal`) because it was written quite a long time ago, when that was the recommended way of doing things. We're changing over slowly, so we can take advantage of all the nice features of pytest. In this case, I changed `np.testing.assert_allclose(x, y, atol=tol)` to `assert abs(x - y) < tol`. I removed `np.testing.assert_allclose`, because that gives the mistaken impression that we're comparing arrays (we're not, we're comparing two scalars). I could have changed it to `assert x == pytest.approx(y, tol=tol)`, except in this case the test file hasn't been converted to `pytest` style yet, and I wanted to keep the total change of this PR as small as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671:438,clear,clearer,438,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671,1,['clear'],['clearer']
Usability,"In some comments (not the docstrings) in `random_objects.py` and `metrics.py` (that I can think of - possibly there are others), there are high-range unicode symbols used to make the mathematics clearer. This couldn't be done with the `:math:` sphinx directive because it's about code comment readability. I'll close this for now because it's very old, and really the ""proper"" solution is just to use a text editor that knows how to handle all text.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/907#issuecomment-809454579:195,clear,clearer,195,https://qutip.org,https://github.com/qutip/qutip/issues/907#issuecomment-809454579,1,['clear'],['clearer']
Usability,"In theory the `correlation_2op_1t` function is only valid when you pass in the steady state solution of the Liouvillian. However, we implement it just by calculating `<A(t) B(0)>` - it's not _immediately_ clear to me that that our output is necessarily correct when you don't pass in a steadystate (especially if `taulist` doesn't start from 0). I _think_ it's fine in all cases, but perhaps Neill you can check me on that front?. I'd agree with Neill that truncation of the thermal state basis is likely the reason you were failing to get that to work exactly right. The tolerance calculation will actually be a bit more involved because QuTiP returns a normed dm. That will cause all the values to shift by relatively the same amount, and then you've got to factor in the solver tolerance on top of those errors, but the principle is correct for sure. *edit*: I'm happy and ready to merge this, but I'll just hold off for a day or so in case Neill has chance to answer my last minor query.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1478#issuecomment-815021669:205,clear,clear,205,https://qutip.org,https://github.com/qutip/qutip/pull/1478#issuecomment-815021669,1,['clear'],['clear']
Usability,"Indeed, all subtitles are meant to be kept. But I agree that rewording the titles could help. I also like the idea to make the comment only visible when writing. What about; ```; **Feature Request Description**; <!-- A clear and concise description of what you want to happen.-->; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1266#issuecomment-629656289:219,clear,clear,219,https://qutip.org,https://github.com/qutip/qutip/issues/1266#issuecomment-629656289,1,['clear'],['clear']
Usability,Interesting discussion about the relationship between OpenMP and multiprocessing -- https://scikit-learn.org/stable/faq.html#why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux (in case this is relevant when bringing OpenMP back).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948#issuecomment-1171423571:99,learn,learn,99,https://qutip.org,https://github.com/qutip/qutip/pull/1948#issuecomment-1171423571,1,['learn'],['learn']
Usability,Interesting discussion about the relationship between OpenMP and multiprocessing -- https://scikit-learn.org/stable/faq.html#why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux (in case this is relevant when bringing OpenMP back). _Originally posted by @hodgestar in https://github.com/qutip/qutip/issues/1948#issuecomment-1171423571_,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1904#issuecomment-1171447682:99,learn,learn,99,https://qutip.org,https://github.com/qutip/qutip/issues/1904#issuecomment-1171447682,1,['learn'],['learn']
Usability,"Interesting observation, the vector_to_operator seems to expect an ""operator-ket"" class, as seen in the examples: . http://qutip.org/docs/3.1.0/guide/guide-states.html. In the code, it expects the dimensions of the operator(""op"") should be: . `op.dims = [ [[rows], [cols]], [1]]`. This is probably to keep in line with the way operator_to_vector sets the dimensions. I am not sure what the expected behavior is supposed to be with a ""ket"" instead of a ""operator-ket"". You are correct to think that this behavior changed in release 4.5 as the shape passed to the sp_reshape function in vector_to_operator changed from:. `n = int(np.sqrt(op.shape[0]))`; `shape = (n, n)`. to . `shape = (np.prod(q.dims[0]), np.prod(q.dims[1]))`. The first preserves the correct ""size"" (which is later used in the check which throws ""Exception: Total size of array must be unchanged."") but the latter one does not for kets. . Maybe we should return the shape assignment to the previous one ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600771828:144,guid,guide,144,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600771828,2,['guid'],"['guide', 'guide-states']"
Usability,"Interesting... You see, the gate `Gate(RY, targets=[0, 1], controls=None)` is clearly wrong because RY acts only on one qubits. I guess you are probably using a released version of QuTiP (4.5.2/3 maybe) and not the master branch. This error was hidden before in those released version. If you try to install from source (http://qutip.org/docs/latest/installation.html#installing-from-source) (which you have to if you want to contribute anyway), you will probably see this error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275:78,clear,clearly,78,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275,1,['clear'],['clearly']
Usability,Is there a simplest case I can run the `mesovle` on Linux with Nvidia GPU?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-1938640761:11,simpl,simplest,11,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-1938640761,1,['simpl'],['simplest']
Usability,"Is this about qutip.nonmarkov.heom? If so, we can close it -- the new BoFiN HEOM added for QuTiP 4.7 includes an extensive guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1519#issuecomment-1097176570:123,guid,guide,123,https://qutip.org,https://github.com/qutip/qutip/issues/1519#issuecomment-1097176570,1,['guid'],['guide']
Usability,"It could be that a pulse is too thin and missed.; When working with pulse, it's safer to always set [max_step](https://qutip.readthedocs.io/en/latest/guide/dynamics/dynamics-time.html#working-with-pulses).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2552#issuecomment-2455520658:150,guid,guide,150,https://qutip.org,https://github.com/qutip/qutip/issues/2552#issuecomment-2455520658,1,['guid'],['guide']
Usability,"It is a really nice test. It clearly shows how bad is the 'iterative' method. For dim=20 the discrepancy between 'iterative' and 'clenshaw' is 1e-12 and for dim=50 it already becomes 1e-5, whereas 'laguerre' agrees with 'clenshaw' up to 1e-14 independent of dim.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526#issuecomment-242816743:29,clear,clearly,29,https://qutip.org,https://github.com/qutip/qutip/issues/526#issuecomment-242816743,1,['clear'],['clearly']
Usability,"It is a simple fix. Just replace ""append"" with ""add_gate"" in ""temp.append(self.gates[self.N - i - 1])"". I tested myself and it works like a charm now.; You are welcome. I love QuTip and it is an honor to help the developers.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/682#issuecomment-292738008:8,simpl,simple,8,https://qutip.org,https://github.com/qutip/qutip/issues/682#issuecomment-292738008,1,['simpl'],['simple']
Usability,It is actually very similar to your solution. We should add this to the migration guide.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389#issuecomment-2046571588:82,guid,guide,82,https://qutip.org,https://github.com/qutip/qutip/issues/2389#issuecomment-2046571588,1,['guid'],['guide']
Usability,It is not so much the safety checks as the order in which a simple single operator is converted internally to a list vs. when the safety checks are run. This is fixed in #631.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/630#issuecomment-272360048:60,simpl,simple,60,https://qutip.org,https://github.com/qutip/qutip/issues/630#issuecomment-272360048,1,['simpl'],['simple']
Usability,"It is possible, using a tensor structure for the Hilbert space, with a subsystem assigned to each player. You can have a look at the documentation, where it shows the case of [three coupled qubits](http://qutip.org/docs/latest/guide/guide-tensor.html#three-coupled-qubits). A library that specifically tackles quantum games is [toqito](https://toqito.readthedocs.io/en/latest/), by @vprusso. You can ask more support in the google group [forum](https://groups.google.com/forum/#!forum/qutip), I am closing the issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1425#issuecomment-769829077:227,guid,guide,227,https://qutip.org,https://github.com/qutip/qutip/issues/1425#issuecomment-769829077,2,['guid'],"['guide', 'guide-tensor']"
Usability,"It looks like the loop on line 64 https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/qobjevo_codegen.py#L64 completes on the first try, but doesn't manage to import any objects, so the import_list remains empty. Could you use pdb to access local variables?. ---; P.S. You can use Markdown to format the traceback in a user-friendly way:; e.g. ; \`\`\`python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; \`\`\`. Renders to:; ```python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108:350,user-friendly,user-friendly,350,https://qutip.org,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108,1,['user-friendly'],['user-friendly']
Usability,"It refers to the system's Liouvillian, I'd say. I think all the `C_n` there are stochastic jumps, `sc_ops `, while the system Liouvillian is the constant part, `c_ops`. But I am not 100% sure. . The user guide is partly out of date there, @Ericgig and others have considerably extended the functionalities of the stochastic solvers. Looking at the [API documentation](http://qutip.org/docs/latest/apidoc/functions.html#module-qutip.stochastic) is safer, and the [source code](http://qutip.org/docs/latest/modules/qutip/stochastic.html) is even more complete. . Meanwhile, you can also have a look at these development notebooks [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-milstein-speed-test.ipynb), [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb), and [here](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) with regards to the new methods (you can find them all, a bit hidden, at the bottom of the http://qutip.org/tutorials.html list). Technically this issue could be transferred under [`qutip/qutip-doc`](https://github.com/qutip/qutip-doc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702:204,guid,guide,204,https://qutip.org,https://github.com/qutip/qutip/issues/1163#issuecomment-576462702,1,['guid'],['guide']
Usability,"It seems like this is now done, save for the possibility of using the profiler instead of simple timings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/250#issuecomment-63594936:90,simpl,simple,90,https://qutip.org,https://github.com/qutip/qutip/pull/250#issuecomment-63594936,1,['simpl'],['simple']
Usability,"It seems to me that what counts in the end is how good the result of the simulation in the truncated Hilbert space coincides with the exact solution for the infinite Hilbert space. As an example I tried it out on a pumped mode in a cavity (https://gist.github.com/bastikr/136908ce690b299e2e82bd13ab2cb47a). Both approaches, i.e. using the analytically generated coherent state or generating it with the displacement operator as initial states, yield pretty much the same error compared to the analytic result. I may have made a mistake or simply misunderstood your statement. Can you maybe further help me to understand this issue?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/683#issuecomment-293311686:539,simpl,simply,539,https://qutip.org,https://github.com/qutip/qutip/pull/683#issuecomment-293311686,1,['simpl'],['simply']
Usability,"It seems to work now (the failing test is unrelated). I will briefly summarize what I found out and changed. Setting up and using an MPI environment is surprisingly difficult, and I don't think it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:254,guid,guide,254,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,2,['guid'],['guide']
Usability,"It sounds great, thank you @wrzadkow. I am going to look into it. . * It would be great to add some details about it in the Users Guide, so that they show up in the [States](http://qutip.org/docs/latest/guide/guide-states.html#density-matrices) part. To do so you would need to make an .rst file in [qutip-doc](https://github.com/qutip/qutip-doc). . What actually would be much needed in a broader view is a (short) Metric subsection in the Users Guide, showing which equations are implemented in LaTeX. This is beyond this PR but your expertise might be very helpful. . Also, recently some advanced functionalities relative to metrics were developed in [Qptomographer](https://qptomographer.readthedocs.io/) @phfaist. This library optimally implements the diamond norm and uses QuTiP's classes https://qptomographer.readthedocs.io/en/latest/figures_of_merit/. It would be great to see if this can be used to address an open issue of non-maintained dependencies that @ajgpitch has been assessing, issue #874.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/998#issuecomment-494625047:203,guid,guide,203,https://qutip.org,https://github.com/qutip/qutip/pull/998#issuecomment-494625047,2,['guid'],"['guide', 'guide-states']"
Usability,"It will be useful for solver feedback.; In v4 we can define Hamiltonian to depend on the state: `H(t, args, psi/rho)`.; We don't have it working in v5, but we will need to restore it before release.; This `_prepare` catch the time and state at the start of `matmul` and `expect` and update the arguments according to feedback.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575:29,feedback,feedback,29,https://qutip.org,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575,2,['feedback'],['feedback']
Usability,"It would be much better to thoroughly code review this pull request before merging rather than merging sooner and make additional PRs later. You can keep working on the PR while getting feedback on it without merging now. Things like model names and API is better to sort out once and for all before the first merge. . With this PR, I think the ossolve modeule name is not very appropriate. Most of qutip is related to open system solvers. I think rcsolve (reaction coordinate solver) is a more accurate name for this module. Also, depending on how much code you have in mind to include in this module, it might be more appropriate to put all of it in a file called rcsolve rather than creating a new module directory like you propose here. Also, don't use underscores in module names (rc_model -> rcmodel or better yet rcsolve).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-102566203:186,feedback,feedback,186,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-102566203,1,['feedback'],['feedback']
Usability,It's certainly easier if it was multiple smaller ones but we can do it like this. You can simply continue in another Pr for the remaining tests.; I will start evaluating file by file starting with parts of the code I am the most familiar with:; - [x] test_mcsolve.py; - [x] test_lattice.py ; - [x] test_interpolate.py ; - [x] test_fastsparse.py ; - [ ] test_expect.py ; - [ ] test_eigenstates.py ; - [ ] test_dimensions.py ; - [ ] test_cy_structs.py,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-609960145:90,simpl,simply,90,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-609960145,1,['simpl'],['simply']
Usability,"It's in development. ; If you use qutip v5.0.0a2 on pypi or master branch here with [qutip-jax](https://github.com/qutip/qutip-jax), some solver can work on gpu. (We tested `sesolve` and `mesolve`, mcsolve should work, stochastic, HOEM, brmesolve don't.); The readthedocs of qutip-jax shows how to use it. qutip-jax is not up to date with the latest versions.; If you are interested in trying it, I will make it works with the latest jax version and qutip master.; Any and all feedback appreciated. We expect an official release of these features in March.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944:477,feedback,feedback,477,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944,1,['feedback'],['feedback']
Usability,"It's not a typo, but I wasn't completely clear about that; the composition of an ordinary and a superoperator is not uniquely defined, so in the mixed case only, it assumes unitarity in order to promote the ordinary operator.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-57339330:41,clear,clear,41,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-57339330,1,['clear'],['clear']
Usability,"I’ve never enforced this, so I am no expert. Though, would enforcing the options in a dynamical solver work? Maybe you do not need the dynamical solver, but checking if that works could help understanding this issue too. I would test it by creating an Options object and passing it to a dynamical solver. http://qutip.org/docs/latest/guide/dynamics/dynamics-options.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1175#issuecomment-582772817:334,guid,guide,334,https://qutip.org,https://github.com/qutip/qutip/issues/1175#issuecomment-582772817,1,['guid'],['guide']
Usability,"Just a quick reply.. for the original problem, the documentation you were looking at is out of date, better to check the latest version. http://qutip.org/docs/latest/guide/dynamics/dynamics-bloch-redfield.html#bloch-redfield-master-; equation-in-qutip . I think the example there works fine. For the incorrect num_expect, I think there was another issue raised about this. let me check.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605778801:166,guid,guide,166,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605778801,1,['guid'],['guide']
Usability,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:159,guid,guide,159,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,3,"['clear', 'guid']","['clear', 'guide']"
Usability,"Just changing the docstring to something like ""_If tlist is None, `tlist=[0]` is assumed and the corresponding correlation matrix returned._"" should be enough, I think. ; The implementation in QuTiP 4 returned this 1D array, which confused me. Changing the behavior broke one tutorial notebook, but a clear docstring should help users to see what the problem is.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2018#issuecomment-1317635091:301,clear,clear,301,https://qutip.org,https://github.com/qutip/qutip/issues/2018#issuecomment-1317635091,1,['clear'],['clear']
Usability,"Just noticed this thread. . I can take a detailed look, perhaps with @arnelg as we recently updated the superoperator functions in 4.5. . My initial reaction is this is ""off label use"" of `vector_to_operator`. If so, then we can update the docs to make this point clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-641690849:264,clear,clear,264,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-641690849,1,['clear'],['clear']
Usability,"Just squashed the commits. I learned about this while doing the conda-forge thing (they insisted). If you don't already know about it, then it is definitely worth looking up. I had 16 commits on this, now its 1 - much more tidy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194681807:29,learn,learned,29,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194681807,1,['learn'],['learned']
Usability,"Let me do that until I get the hang of the pulling and pushing. . On Aug 29, 2014, at 2:58 PM, Robert Johansson notifications@github.com wrote:. > You do as you wish, but I much prefer when you submit things via pull requests rather than pushing directly to master, because it gives an opportunity to give feedback or at least being aware of what is happening before it lands in master. Also travis tests is a good way of making sure that everything is in a good state before merged. However, this is just my preference, and if you prefer pushing into master you can go ahead and do that of course.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221#issuecomment-53840133:306,feedback,feedback,306,https://qutip.org,https://github.com/qutip/qutip/pull/221#issuecomment-53840133,1,['feedback'],['feedback']
Usability,"Looking at our algorithm, it does seem a bit questionable for positive-definite matrices, but to be fair, what constitutes sufficiently random? The eigenvalues being chosen on the interval (0, 1] is also pretty arbitrary. When you start throwing in extra constraints like ""matrix density"" and ""positive-definite"", it becomes difficult to sample a useful measure that has an intuitive definition of random. We're certainly not against improving the algorithm if you've got ideas, though. The current algorithm (noted in the docstring) is ""diagonal dominance"" - basically we add extra stuff onto the diagonal to ensure that the eigenvalues end up all positive. That's why you see them getting bigger as the dimension increases. To some degree, it's the intended behaviour. @hodgestar: this is specifically about positive-definite matrices, and supplying eigenvalues is incompatible with that (though perhaps that's a bug!). It shouldn't be too difficult to make that work by messing around with the Cholesky decomposition, but that would be hard to get right with respect to the density.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642#issuecomment-905696188:374,intuit,intuitive,374,https://qutip.org,https://github.com/qutip/qutip/issues/1642#issuecomment-905696188,1,['intuit'],['intuitive']
Usability,"Looking into the issue in more detail, I think that the documentation wasn't just misleading but wrong: because QuTiP uses the column-stacking notation, the order of `dims` for `type='super'` doesn't have the same meaning as for `type='oper'` or for vectors. In particular, the column-stacking basis maps |i><j| to |j> |i>, such that the order of the tensor indices for superoperators is swapped from the ordering `[left, right]` that is used by QuTiP's `dims` notation. I'll break this out into another Issue, but I think the simplest way of handling it is to keep `dims` the same as it is now (I don't want to break that, for crying out loud), but to transform the arguments to `_tensor_contract_dense` if the order of `dims` doesn't match the order that we need to pass to `np.reshape`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/385#issuecomment-152462241:527,simpl,simplest,527,https://qutip.org,https://github.com/qutip/qutip/issues/385#issuecomment-152462241,1,['simpl'],['simplest']
Usability,"Looks cool, you can make the PR against the master branch. We do not have a; dev branch. On Mon, 22 Jul 2019 at 19:14, Michael Goerz <notifications@github.com>; wrote:. > Sorry.. got a little distracted, and wanted to check the contributing; > guidelines on what branch to make the pull request against. Currently it’s; > master. Is that ok? If yes, I’ll undraft it.; >; > Draft PRs are pretty new, and a very nice way to kick off the Continuous; > Integration. Like in this case, I wanted to check if any of the tests; > involve that message. As they don’t, this actually is ready to go.; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1049?email_source=notifications&email_token=ABVFIBCN7YWP77NBJVTZA2LQAXTJDA5CNFSM4IEC7VHKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2QRIRA#issuecomment-513872964>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABVFIBHWIDKPIYAU6NMZXILQAXTJDANCNFSM4IEC7VHA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973:244,guid,guidelines,244,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973,1,['guid'],['guidelines']
Usability,"Looks interesting! Possibly a bit out of scope for qutip? In principle you could put this progress bar in a separate module and still use it with qutip (as long as it supports qutip's basic progressbar interface). Then it could also be used in non-qutip related projects. . If its to be included in qutip, I think it should not be added to qutip/ui/progressbar, but as an module of its own that would not be loaded by default, so a user would have to load it explicitly when using it, like the way the current ipynbtools and picloud modules work. . Perhaps it would make sense to move these ""extras"" or ""extensions"" modules to a subdirectory of their own, say ""qutip/extensions"" or ""qutip/ext"" to keep the import paths manageable. In that case I think that qutip.picloud should be moved to that directory as well. I think this would keep these extensions reasonably isolated for the core qutip modules, which I think we should prioritize if we are to allow these kind of peripheral modules to increase in number in the future. @nonhermitian any opinions on this?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63268318:90,progress bar,progress bar,90,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63268318,1,['progress bar'],['progress bar']
Usability,"Looks like good work to me. Well done for taking that brave new step into the PR world!. I agree with @nonhermitian that if the negligible frequency fixes things then, then so long as it is clearly commented as to why it's there then it's valid. Re. PEP8, you should see I made one inline comment about "" == "". There also seems to be a few unnecessary empty lines that break the rules, but I could not spot anything else with my quick check. @nwlambert do you need an example of where the mkl solver has been used elsewhere in qutip?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/528#issuecomment-244148933:190,clear,clearly,190,https://qutip.org,https://github.com/qutip/qutip/pull/528#issuecomment-244148933,1,['clear'],['clearly']
Usability,"Looks like there were breaking changes introduced in CVXPY 1.1 that changed some sort of matrix handling? I think the entirely of the `dnorm` function was written by Chris Granade about 5 years ago, and they're off at Microsoft now. As an immediate workaround, you can pin the version of CVXPY in conda to 1.0 (`conda install 'cvxpy=1.0'`) to fix it. Otherwise, probably there's a solution in swapping over a load of `*` to `@` in `qutip/semidefinite.py` and `qutip/metrics.py`, but that might be a bit nontrivial to solve. If you succeed, please do make a pull request. The reason that the ""simple"" cases work is that QuTiP detects them as known results and has fast paths avoiding `cvxpy`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713:592,simpl,simple,592,https://qutip.org,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713,1,['simpl'],['simple']
Usability,"Many thanks for your kind reply. Unfortunately, I can not do that, because there is cases in my hamiltonian in which that matrix is not diagonal, I am just trying from the simplest case, actually my goal is to have a term ""S_vector * D_matrix *S_vector"" . Could you please explain how I am using Qobj incorrectly and how to used right. The error message states that since S_vector is a Qobj I can not multiply it with the D_matrix. If I put Qobj(D_matrix) then I can not multiply them because all terms are Qobj.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266:172,simpl,simplest,172,https://qutip.org,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266,1,['simpl'],['simplest']
Usability,"Many thanks! I solved it!; Now I have this WARNING:matplotlib.animation:MovieWriter avconv; unavailable. Trying to use pillow instead.; *Many thanks*. *P**arfait Atchadé*. *Tel Spain: 0034661205543*; *Tel Deutsch: 00491706659017*. On Wed, 9 Dec 2020 at 15:45, Jake Lishman <notifications@github.com> wrote:. > You'll find it easier installing from conda-forge, since we distribute; > binary releases there: see the installation guide; > <http://qutip.org/docs/latest/installation.html> here.; >; > If you want to install from source using pip, you need to configure your; > C++ development environment correctly - you'll probably need to enable the; > XCode command-line tools (see e.g. this; > <https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/>).; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1404#issuecomment-742038577>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AGKQN3YYS6ZYMTV4HEHFTELST7OW3ANCNFSM4UT7TWQQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650:428,guid,guide,428,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650,1,['guid'],['guide']
Usability,"May I propose another approach for testing normalization: use a non-hermitian Hamiltonian and `qeye` as the e_ops.; Then it is clear if the normalization step does it's work or not. Otherwise the `tol` should be very strict, the error between before and after the normalization is usually quite small. `sesolve` does not differentiate between an `unitary` and a `dm`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1148806235:127,clear,clear,127,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1148806235,1,['clear'],['clear']
Usability,Maybe I should learn some source code first. The Floquet solver is very useful and wish someday I can contribute my own code to it. This issue should be closed temporarily.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854#issuecomment-392302752:15,learn,learn,15,https://qutip.org,https://github.com/qutip/qutip/issues/854#issuecomment-392302752,1,['learn'],['learn']
Usability,"Maybe, but the print statements are still written as functions there. Thank you for the PR, I will help you out and try to merge it asap. But I do not think you need to put the extensive description of the port to python 3 syntax. Just updating the syntax to python 3 with a comment linking to some discussion should be fine. Btw, there is a cool progress bar called tqdm if you are not already aware, [tqdm](https://github.com/tqdm/tqdm). I have seen it work out nice with some qutip functions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1020#issuecomment-505434934:347,progress bar,progress bar,347,https://qutip.org,https://github.com/qutip/qutip/issues/1020#issuecomment-505434934,1,['progress bar'],['progress bar']
Usability,Mixed case function names - should be all lowercase; Example: `spmmCpy_par`; See https://www.python.org/dev/peps/pep-0008/; for guidance. We are fairly strict on sticking to PEP8.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-443201757:128,guid,guidance,128,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-443201757,1,['guid'],['guidance']
Usability,"Most of it is already in qutip or in development:; - We already have a progress bar.; - We have feedback to support solvers where parameters are changed depending on the current state. Those should not updated at each time-step, but included in the rhs. Otherwise, it will increase runtime and often the numerical error. We mostly use multistep method (Adams and BDF) which are particularly sensible to that.; - In my rework of `mcsolve`, I'm including the capacity to stop after a certain time, (already merged) and after the error bar gets under a certain tolerance. I have not though an equivalent for `me/sesolve` would be needed but it would be simple enough to add. We could have function that takes the expect value and tell the solver to stop or continue. ; - I was thinking of adding the ability to step through the evolution (draft in #1455):; ```; solver = MeSolver(H, c_ops, options=opt); solver.start(t0, rho0); for t in [t1,t2, ...]:; rho_t = solver.step(t, args=new_args); ```; Which would work like a `yield`:; ```; solver = MeSolver(H, c_ops, options=opt); for rho_t in solver.yield_run(rho0, tlist):; if needed:; solver.update_parameter(args=new_args); ```; I prefer using steps since you don't have do define `tlist` first, you could use it in a `while True` loop or interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451:71,progress bar,progress bar,71,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451,3,"['feedback', 'progress bar', 'simpl']","['feedback', 'progress bar', 'simple']"
Usability,"My GSoC project will end up meaning that dense matrices can be happily stored as usable data types within `Qobj`, so QuTiP won't have to pay the nonsensical dense-to-sparse penalty for this kind of extremely dense system any more.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645697111:81,usab,usable,81,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645697111,1,['usab'],['usable']
Usability,"My example was incomplete, they need to set an initial value when creating the `QobjEvo`:; ```; H = QobjEvo([op, lambda t, ket: bra @ ket], args={""ket"": basis(...)}); ```; Otherwise there is an issue with creating the coefficient and if the operator is call without a state first `H(t)`. For a stand alone QobjEvo, having a feedback does not mean much, I prefer to attach it to the solver where it get's it's meaning. It is also the solver that knows about the collapse and wiener_process. add_feedback exist on QobjEvo, it just private:; ```; H = QobjEvo([op, lambda t, ket: bra @ ket], {""ket"":basis(...)}); H._add_feedback(""ket"", ""qobj""); ```; Using dict instead of a pair of input does look good.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663071666:324,feedback,feedback,324,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663071666,1,['feedback'],['feedback']
Usability,"My thinking on this basically comes down to two points. First, the behavior of `composite` is explicitly not the same as that of `tensor()` or `super_tensor()`, as it's a common usecase to compose operators defined on different subsystems without reference to representation. While I agree that it would be good to have more generic wire-bending support in QuTiP, I think that's likely out of scope for this particular feature, as it would require some significant rethinking of how `dims` is currently implemented. Second, I think that it's entirely defensible that the current behavior of `composite` promotes operators by `spre() * spost()`, as this is consistent with the view that superoperators are matrix representations of group action by conjugation. That is, `composite` returns the composite of the same group action applied to each of several subsystems, though the action can be more general for `type='super'` arguments. This could perhaps be made more clear by renaming `composite` to `composite_oper` or similar, but I think that the _behavior_ of the current function is correct and consistent, if admittedly, poorly described.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58038276:967,clear,clear,967,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58038276,1,['clear'],['clear']
Usability,"Nah, don't disparage yourself - your code is good and you've done well to copy the style of the rest of the files. Typically consistency is better than having ""the one true style""; code's read more than it's written, and having a module which is clearly written by four different people makes the logic very very difficult to follow, which in turns makes it much harder to spot bugs. If it were up to me (which is isn't, really), I would say that your changes are good as they are. I didn't mean for the comments to be changes you _had_ to make. You can't reduce the number of merge conflicts that are going to happen with #1181 anyway, because that PR is a massive refactor of large swathes of the testing suite. You've done a good job to keep your work consistent with the rest of the file, so it will be very easy to merge in your logical changes. Merge conflicts are pretty much just par for the course; just the fact that we're discussing this here shows that logically, there _is_ a conflict between two pieces of work being done at the same time. I'd suggest merging this as-is. We'll handle the problems caused by the refactor elsewhere.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891:246,clear,clearly,246,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891,1,['clear'],['clearly']
Usability,"Nathan, you are pushing to the master branch, not qutip-4.5.1.; This would probably undo some commit to master that are not included in 4.5.1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1255#issuecomment-625257862:84,undo,undo,84,https://qutip.org,https://github.com/qutip/qutip/pull/1255#issuecomment-625257862,1,['undo'],['undo']
Usability,"New on 2020-06-27. You can follow the development of the QuTiP developers' guide in my repo: https://github.com/jakelishman/qutip-devguide, or more usefully see the rendered version on that repo's GH page: https://jakelishman.github.io/qutip-devguide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278#issuecomment-650581583:75,guid,guide,75,https://qutip.org,https://github.com/qutip/qutip/issues/1278#issuecomment-650581583,1,['guid'],['guide']
Usability,"Nice work! Thanks for starting the work on improving the dims concept. I think this has been long over due!. Personally I would probably call the module `dimensions.py` or simply `dims` instead of `dims_utils.py`, but please do as you wish.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/389#issuecomment-153190643:172,simpl,simply,172,https://qutip.org,https://github.com/qutip/qutip/pull/389#issuecomment-153190643,1,['simpl'],['simply']
Usability,"Nice work!. > I have removed self.gates as well as self.gates_and_measurements. The replacement is the more ""general"" (and less of a mouthful) self.circuit_ops which contains both. I like this merge of to attributes. However, we shouldn't change the attribute name `gates`, at least not in this PR here. It's an open attribute API and as you see we used it a lot in tests. It's very likely that others are using it too. . Personally, I would keep the attribute `gates` since even for measurement operations, people still usually say ""measurement gates"". `circuit_ops` is certainly more accurate, but might be hard to remember and thus makes the learning curve steeper.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-647396416:645,learn,learning,645,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-647396416,1,['learn'],['learning']
Usability,"No `.compile()` in v5. ; I don't think we need a porting guide either, `compile` is called internally in evolution but users very rarely call it themselves. 99.9% of users don't know it exist. Where is it causing issues? I only remember using it in a developer notebook showing benchmarks. This notebook can be removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1176207837:57,guid,guide,57,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1176207837,1,['guid'],['guide']
Usability,"No longer relevent / fixed with v5's data layer, solver and feedback reword.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-2069785897:60,feedback,feedback,60,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-2069785897,1,['feedback'],['feedback']
Usability,"No problem. I would suggest that at merge time, this PR is _not_ squashed but is simply rebased onto or merged into master. A merge would ensure that the PR number is included in the git history if that's desired, but all the relevant explanations are also already in the commit messages. It's a very large change, there's a lot of exposition in the commit messages, and each commit is a modular unit of work already, while the PR title won't actually be true (since not all of the tests are converted). I know that the commit messages are all combined on github, but it's much more difficult to search for the small bit you need out of several pages of writing, rather than having only the relevant parts presented to you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885:81,simpl,simply,81,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885,1,['simpl'],['simply']
Usability,"No, I'm using `w-w0` just to show that the code works fine with my suggested changes in `pulse(t0,t)`. It is just the numbers that are wrong. First, please check the equation you are using again because (I guess) `H0` should be `(w-w0)/2 * sz` and not the one you give in the code above. In your definition, `w-w0` and `epsilon` is the same thing. The drive frequency (in sinus function) should match with `H0`. Second, it not clear to me what you want to achieve with this. If the drive frequency matches the system frequency (both `w-w0` here), H0 is exactly 0 in the rotating frame.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1466#issuecomment-811118983:427,clear,clear,427,https://qutip.org,https://github.com/qutip/qutip/issues/1466#issuecomment-811118983,1,['clear'],['clear']
Usability,"No, if `test` is used for the branch name, it will still deploy to testpypi. Both `deploy to ...` jobs were cut and pasted with only 2 lines changed so I merged them so we don't forget to update one without the other. I also added more feedback to the job that would show uploaded files even for a dry run.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342:236,feedback,feedback,236,https://qutip.org,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342,1,['feedback'],['feedback']
Usability,"No, it's mostly here on qutip and direct email. There is only a few of us. We have a qutip-dev google group on invitation managed by @nathanshammah. agarwal1998 is not a maintainer but cgranade was. Last year, we took time to review old issues and let some less pressing with ""help wanted"". We would be happy if you can propose a solution that would close the issue and help with Qutip in general. The only use I personally see from this would be case like:; ```; out = qzero(dims); for i in range(N):; out += f(i, dims); ```; Cases were the qobj is more of a dummy variable than a physical operator. `coherent` and `create` have a physical meaning and I would not know what `coherent([2,10])` is supposed to be, but I understand what `tensor(coherent(2), coherent(10))` is. For `projector`, it could be added, it's meaning is clear. To make it consistent, removing the list support from `qeye`, etc. and fixing the few case that it is used, might be a better option. The dimension can easily be corrected after the creation of the object.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/363#issuecomment-575811864:827,clear,clear,827,https://qutip.org,https://github.com/qutip/qutip/issues/363#issuecomment-575811864,1,['clear'],['clear']
Usability,"No, my Hamiltonian does not have a lot of zeros but it has fast oscillating term cos (omega(t)*t) where omega(t) is a non-analytic term and is a very large number compared to the 1/final time. So, to get the correct result, I have to use a large number of time_grid. I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This will not give the correct result since my Hamiltonian has fast oscillating terms which requires a lot of time steps to be given as an input for mesolve. This is why the method of using QobjEvo gives different answer than if I use my initial time grid (which is time grid = 1000000) in the mesolve. . Since I am using a very large time grid in mesolve, my program ran very slowly. I would like to speed up my simulation by having mesolve to evaluate the expectation value of the operator only at the final time and not at all time steps. My question is very simple: Is there a way that I can still use a very large time grid in evolving my Hamiltonian using mesolve but have the mesolve evaluating the expectation value of the operator ONLY at the final time? If not, is it possible to add this feature in qutip?. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810182936:1095,simpl,simple,1095,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810182936,1,['simpl'],['simple']
Usability,"No, not yet, it will be supported in v5.; You could try to use `photocurrent_mesolve` which is very similar, but with a slower algorithm. ps. There is an error in the formula in the [documentation](https://qutip.org/docs/latest/guide/dynamics/dynamics-photocurrent.html#open-system):; L_eff(rho) = L(rho) - C_dag*C*rho - rho*C_dag*C + tr(C_dag*C*rho - rho*C_dag*C)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2060#issuecomment-1385475587:228,guid,guide,228,https://qutip.org,https://github.com/qutip/qutip/issues/2060#issuecomment-1385475587,1,['guid'],['guide']
Usability,"Not directly testing for commuting operators, but Qobj implements **eq** and **ne** which means that you can test for commuting operators simply by doing. ```; if a * b == b * a:; # a and b commutes; ```. Maybe it could be useful with function that performs this test for two Qobj instances, but currently we do not have such a function. The PR looks good so I'll merge it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/41#issuecomment-22768490:138,simpl,simply,138,https://qutip.org,https://github.com/qutip/qutip/pull/41#issuecomment-22768490,1,['simpl'],['simply']
Usability,"Not sure if it's that simple.; ```; --config-setting=""--global-option=--with-openmp""; ```; actually gives me a build error:; ```shell; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --config-setting=""--global-option=--with-openmp""; * Building wheel...; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5;",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:22,simpl,simple,22,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,1,['simpl'],['simple']
Usability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:126,simpl,simple,126,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,1,['simpl'],['simple']
Usability,"Note: the reported changes (other than the deletion of the licence from each source file) are all whitespace-only, or simply a reflow of the hard-wrapped text in `LICENSE.txt`. I didn't change the licence at all, other than the holder. I've also checked this with the same tool that GitHub uses, and it will definitely recognise the licence correctly after this. The whitespace-only changes in other files weren't actually 100% intended, but it was a function of how I did the licence detection - I normalised the whitespace at the ends of lines first. Looking through, I guess I only did that when changing the `doc` folder, not the main source code (I had to handle those two cases separately).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684:118,simpl,simply,118,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684,1,['simpl'],['simply']
Usability,"Nothing too clever here. As in cached flag cleared whenever unitarity threatened; The check could probably be more efficient, but as not expected to be used intensively, then this would seem acceptable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364163769:43,clear,cleared,43,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364163769,1,['clear'],['cleared']
Usability,NumPy uses dense array. You simply need such a big memory to store those NumPy matrices. There is no way around it. It is important to understand what you want to do with those matrices afterwards. Keeping them as dense matrices is just infeasible. Maybe you can try to get the sparse data by `Qobj.data` and work with that.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2176#issuecomment-1593531707:28,simpl,simply,28,https://qutip.org,https://github.com/qutip/qutip/issues/2176#issuecomment-1593531707,1,['simpl'],['simply']
Usability,"Numpy arrays are mutable, so you're modifying `er1` every time in the loop and just appending the same object. You need to create a new `er1` array each time within the out loop, or make `er1` a 2D array of the correct size. I'm sorry, but this is not the place to be asking for generic programming advice. This question (like some of your other previous ones) does not have anything to do with QuTiP, but is related to beginner/intermediate Python concepts. You were told this on a previous issue you opened. Please take these questions to a suitable forum, like the ""learnpython"" subreddit. I'm going to close any further issues you create that aren't about QuTiP specifically, without answer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1488#issuecomment-814859752:569,learn,learnpython,569,https://qutip.org,https://github.com/qutip/qutip/issues/1488#issuecomment-814859752,1,['learn'],['learnpython']
Usability,"Numpy interprets the Python base type `complex` as equal to `np.complex128` when passed as a dtype. Personally I think `np.complex128` is much clearer (since it specifies the size in the name too), but I wouldn't worry too much about changing everything everywhere. `cqobjevo.pyx` in particular is going to be nearly entirely rewritten in the next major QuTiP release anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451#issuecomment-785001605:143,clear,clearer,143,https://qutip.org,https://github.com/qutip/qutip/issues/1451#issuecomment-785001605,1,['clear'],['clearer']
Usability,"OK, [here's a simple notebook](http://nbviewer.ipython.org/gist/cgranade/14670f05bc384dc2df01) illustrating this PR, using a bit of other functionality I was planning on contributing later, but that helps in making the example clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65026154:14,simpl,simple,14,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65026154,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"OK, if it's intended then there's nothing to change in the code. But I think it would be helpful to document this in a clearer way: there's a big risk of misinterpreting the operator.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286282270:119,clear,clearer,119,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286282270,1,['clear'],['clearer']
Usability,"Oh wow! That's really nice! (and completely undocumented, as far as I can tell ;-) ). I had actually noticed at some point that `callable(qob)` returns True and wondered what that was about. So this definitely solves my problem, and I could see the argument for the abstract ""apply x to y"" being realized as`x(y)`. In that case, maybe not allowing objects with incompatible `data` shapes is ok after all. I'll leave it to the maintainers to decide whether they want to close this issue with ""wont-fix"".",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/939#issuecomment-441895252:44,undo,undocumented,44,https://qutip.org,https://github.com/qutip/qutip/issues/939#issuecomment-441895252,1,['undo'],['undocumented']
Usability,"Oh, I am sorry, I have misunderstood what you wanted. I think that now I have fixed it. Thank you very much for the feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2545#issuecomment-2422290060:116,feedback,feedback,116,https://qutip.org,https://github.com/qutip/qutip/pull/2545#issuecomment-2422290060,1,['feedback'],['feedback']
Usability,"Ok I see what you are doing. It is not clear from the title that you are doing multi-partite Wigner functions, and there is already a `spin_wigner` function in QuTiP. Also, the use of `@` notation pegs the Python version at 3.5+, but I believe 2.7 is still supported. Personally I like support for 3.5+ only, but hate the `@` notation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/912#issuecomment-470858545:39,clear,clear,39,https://qutip.org,https://github.com/qutip/qutip/pull/912#issuecomment-470858545,1,['clear'],['clear']
Usability,"Ok some things that one learns by playing with it:; - make sure the location of the `qutip/qutip` folder is as expected (`../../qutip/qutip`); - the second for loop in in the crawler for `qutip-structure.py` does: its looks in directories, and hence the fact that only `nonmarkov` is there, is the reason why stuff like `qip` is not rendered. ; - Adding a readme.txt or .md and commenting the .py file and things would help maintainance. ; I can take over these, moreover as today we found out that QuTiP has not been selected to participate to GSoD 2020.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-626909831:24,learn,learns,24,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-626909831,1,['learn'],['learns']
Usability,"Ok, cool. I don't think there's any situation we should be mutating the `Options` class we're passed in though - I'd consider that a bug no matter what, since that leaks like your print statement shows. We can just duplicate it on entry, then modify that. To me it's not clear that passing several items in `tlist` should override an explicit `store_states=False` - as long as we allow you to pass an array as time-dependence, there is a sensible reason to pass more items in `tlist` than you need results for. Sure, you may also be able to use `Cubic_Spline`, but if we punish you for using arrays by swapping your options, why do we provide them? I think we should only warn and change the settings if _nothing_ is going to be stored - `store_final_state` should be enough to suppress it and not store the intermediate states, even if that implies the user might not be doing the fastest possible thing. I don't necessarily think we should try to promote ideal usage through runtime warnings if that's more verbose to type - that's what documentation is for, and some people will do stuff because it's faster to type, since they work interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775332513:271,clear,clear,271,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775332513,1,['clear'],['clear']
Usability,"Ok, great. Will do.; I only learned this stuff through going through a similar experience with @jrjohansson (a long time ago now)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-370743079:28,learn,learned,28,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-370743079,1,['learn'],['learned']
Usability,"Ok, here it is:; btw the actual error (the last line) did not appear in the output file, but it does appear in the cmd window, so I typed it in. Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... ERRO",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:505,simpl,simple,505,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['simpl'],['simple']
Usability,"Ok, it looks like the tests are finally going to pass. As the number of commits suggests, this was a pain. Not because the code was wrong, but because:. 1) The default config used by Travis has GCC 4.6 which contains an error that happens to get raised in our case. Thus, had to move to the Trusty build stack. 2) Although it took forever to hunt down, it appears that when .pyx files are included as package data, Py27 may try to rebuild them upon calling **init**. This would throw a missing header error. Since these files are not needed after building, removing them clears up this issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/551#issuecomment-254497807:571,clear,clears,571,https://qutip.org,https://github.com/qutip/qutip/pull/551#issuecomment-254497807,1,['clear'],['clears']
Usability,"Ok, it turns out I got the numpy release notes the wrong way round; we have to build our binaries with `1.16.6 <= numpy < 1.20` to maintain ABI compatibility no matter the numpy version. I have updated the compiler infrastructure to take this into account - this is in some ways a temporary restriction until two or three years in the future when we can drop support for all numpy versions less than 1.20. This is ready for final review. If you're fast, you can also try installing from the test PyPI server to see if the wheels work for you. While it's on the temporary server, you need to install `numpy` and `scipy` manually yourself (as they don't exist on test.pypi.org), but pip will do the dependencies correctly for you once it's publishing to the full repo.; ```bash; conda create -n pypi-test; conda install python pip numpy scipy; pip install -i https://test.pypi.org/simple qutip-jakelishman; python -c 'import qutip; qutip.about()'; ```. @hodgestar, @nathanshammah: perhaps you could just glance over this again and make sure everything looks right to you? Simon, I know you already looked over it once, so if you've not got time again, no problem - barely anything has changed since you last saw it. Nathan: in theory once we're in a position where deployments push to PyPI I think I can write an action for qutip/qutip.github.io to push a commit updating the website with the new information too. However, with the docs currently using a completely separate build process in a different repo, they can't really be triggered by a release here. I wrote this PR against `dev.major`, but I suppose in theory I could backport it to the 4.x branch if that's absolutely required. I think some parts of the setup changed for `dev.major`, which is why I didn't originally try to make it to the current version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158:879,simpl,simple,879,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158,1,['simpl'],['simple']
Usability,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:700,simpl,simplifications,700,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['simpl'],['simplifications']
Usability,"Ok, well seems great that simply moving the pyximport to the end will solve the issue. Good work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/570#issuecomment-265062873:26,simpl,simply,26,https://qutip.org,https://github.com/qutip/qutip/pull/570#issuecomment-265062873,1,['simpl'],['simply']
Usability,"Ok, yeah, I definitely see the use-case here. I'll leave it removed from `matmul` for the time being because I hadn't really organised that code to allow safe calling of the function with an `out` parameter, but I'll look to re-instate it, similarly with `add`. For `add`: I envisage a nice possibility for `QobjEvo` using `CSR` backing along the vein of `CQobjEvoTdMatched`: on instantiation we add together all the matrices, then we `memset` all zeroes along the `data` array and store it as `self._structure`. Then each time we `__call__` the object, we simply do `out = self._structure.copy()`, and use that as the output matrix, because we guarantee we'll always have enough space and the correct structure. There's a couple of minor kinks in the logic of `add_csr` that we might have to iron out in order to avoid an additional matrix addition, but the savings in memory allocation could be good. You're absolutely right about the `pxd` files - I haven't taken enough care to make sure they've got all the definitions in yet. Basically everything that isn't prefixed with an underscore in the `.pyx` files _should_ be in the `.pxd` files. I'll add them in tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648371869:557,simpl,simply,557,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648371869,1,['simpl'],['simply']
Usability,"One thing to consider is that CSR and Dense already _dno't_ return the same result for every operation. For example, for matmul:; ```python; size = 100; random = np.random.random((size, size)); a = qt.data.Dense(random); b = qt.data.to['CSR'](a); np.all((a).to_array() == (b).to_array()) # True; np.all((a+a).to_array() == (b+b).to_array()) # True; # This one is different for Dense and CSR even though the operation is the same. ; # This seems to be due to the order at which the operations are performed with Dense; # and CSR matmul and the fact that floating point addition is not associative. ; # (something I learned by reading the test_mathematics in qutip); np.all((a@a).to_array() == (b@b).to_array()) # False.; ```; Although the change in `auto_tidyup` will probably make the difference bigger, given that with tidy-up ""all"" we can not ensure the same output for every operation, I would say that it should be ok to set auto_tidyup to `[CSR]`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1610#issuecomment-882012839:614,learn,learned,614,https://qutip.org,https://github.com/qutip/qutip/pull/1610#issuecomment-882012839,1,['learn'],['learned']
Usability,"Operation `oper @ ket` is a lot faster for `CSR @ Dense` than `CRS @ CSR`. Also for ket, csr matrices still need to have one entry per row, making them not that much more efficient than dense. (A well optimised `COO` would be nice here.). But it is only a good choice when they are used as kets, not when used as building tools for operators... We have functions to create such operators that I thought were more known that are set to use the appropriate sparse default:; `fock_dm(N, n)` is equivalent to `basis(N, n) * basis(N, n).dag()`.; `projection(N, n, m)` is equivalent to `basis(N, n) * basis(N, m).dag()`. For now I added an entry for this case in the migration guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-2028969439:671,guid,guide,671,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-2028969439,1,['guid'],['guide']
Usability,PR #256 restores the old progress bar as TextProgressBar and renames the new progress bar to EnhancedTextProgressBar. Considering the circumstances I think this is the best solution at this point.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63271426:25,progress bar,progress bar,25,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63271426,2,['progress bar'],['progress bar']
Usability,"Part of the new superoperator support is covered in `guide_tensor.rst`, but there needs to be a much more complete guide to `to_chi`, `to_choi`, `to_super` and `to_kraus`, as well as of the new `superrep` attribute.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1520#issuecomment-191575504:115,guid,guide,115,https://qutip.org,https://github.com/qutip/qutip/issues/1520#issuecomment-191575504,1,['guid'],['guide']
Usability,"Perhaps someone else can give a more concrete answer, but I guess the driving frequency is too high for the number of time-steps? Try tweaking the ODE solver with options like the following:. `; options = Options(nsteps=15000, atol=1e-13, rtol=1e-13) ; `. and passing it to mesolve. `result1 = mesolve(Ha, psi0, times, [np.sqrt(T1)*sig01, np.sqrt(T2)*sig02, np.sqrt(gamma*(nth + 1))*a, np.sqrt(gamma*nth)*a.dag()], [a.dag()*a, sig00, sig11, sig22], progress_bar=True, options=options); `. More practically speaking, for the problem you are solving I guess explicitly including the time dependence is unneccessary, since you have already made a RWA on the drive and the coupling? . Moving to an interaction picture in w1, w2 and wph, and removing the explicit time-dependence might simplify the problem and might give you equivalent results, and in the process make your code much simpler and more efficient?. In other words just set w1=w2=wph=0, and put the drive as a time-independent term in the hamiltonian . `; H01 = g*(sig12*a.dag() + sig21*a) + pump1*(sig01 + sig01.dag()); `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514:781,simpl,simplify,781,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514,2,['simpl'],"['simpler', 'simplify']"
Usability,Perhaps we can close this issue though? The docs at https://qutip.readthedocs.io/en/latest/guide/heom/bosonic.html seem good?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2104#issuecomment-1451692026:91,guid,guide,91,https://qutip.org,https://github.com/qutip/qutip/issues/2104#issuecomment-1451692026,1,['guid'],['guide']
Usability,"Picking a new random number at each time step would be an expensive way to do the computation since each call to the random number generator is costly. One could pre-generate a large array of random numbers before hand, but there is no way to know if you generated enough since we are using an adaptive step size ODE method. You are correct about the way mcsolve does its calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE me",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:562,clear,clearer,562,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['clear'],['clearer']
Usability,"Please give more details, e.g. a simplified version of the problem you want to solve or an example of code. QuTiP has tutorial notebooks and documentation that you can refer to for function API.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1411#issuecomment-751387226:33,simpl,simplified,33,https://qutip.org,https://github.com/qutip/qutip/issues/1411#issuecomment-751387226,1,['simpl'],['simplified']
Usability,Please refer to [`smesolve` new methods](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) and [benchmark](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb). I think you should just use `c_ops` or `sc_ops`. Keeping this open as the notebook needs to be updated and the Users guide documentation. The [API documentation](http://qutip.org/docs/latest/apidoc/functions.html?highlight=smesolve#qutip.stochastic.smesolve) is updated.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471:414,guid,guide,414,https://qutip.org,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471,1,['guid'],['guide']
Usability,"Pure numerically speaking, the last `diss_coeff` is a way larger than the others.; ```python; >>>diss_coeff; [0.19836061612310207j,; 0.25470007277190326j,; 0.223606797519535j,; 4925.267477050309j]; ```; With this large frequency, if you want to solve the dynamics using ODE, I don't think there is a way to make it faster. You have to either simplify your model mathematically, or, because there is no time dependency in your system, use the (deprecated) `essolve` that computes the dynamics using eigenvalues. Thinking about the physics, the T2 time is much smaller than your `tlist`, the system has already fully decohered. PS: @jakelishman It seems that the `essolve` does have some use-cases? Like in small systems for verification perpose. I remember there is another PR that also mentions it. As we deprecated it, I'm wondering if there is an efficient alternative in QuTiP?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452:342,simpl,simplify,342,https://qutip.org,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452,1,['simpl'],['simplify']
Usability,"Re `oper(oper)`, I'd personally prefer to be ""forced"" to write `to_super(A)(B)`. Actually I'd even more prefer to write `sprepost(A, A.dag())(B)`. I honestly wouldn't have guessed that `to_super` does a conjugation (if I didn't already know), and at the moment I can't see it in the docstring, so the only way I'd find this out is by looking at the code. The docstring actually claims to raise a `TypeError` if the input is not a map. Even in the code, in the `to_super` function the only comment made if the input is an `oper` is `# Assume unitary` which is a confusing comment. At a minimum I think that this type of non-obvious behavior should be clear from docstrings. For `__mul__` vs. `__call__` I see your point regarding Choi matrices representing superoperators. I would expect `__mul__` to treat a Choi matrix simply as an operator. I think the case for a `__call__` function is strong then.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/475#issuecomment-221453079:650,clear,clear,650,https://qutip.org,https://github.com/qutip/qutip/issues/475#issuecomment-221453079,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"Repeating just changes the probability of failure, rather than actually detecting whether it was a rare fail, and `mesolve` tests aren't always the fastest, so repetition here isn't great. For simple unitary qubit operations, I think it should be easy enough to work out how the tolerance translates. It's difficult to say that if there's a numerical error then the error will be much greater - I caught some errors in the `test_gates.py` (I think) that were sneaking through because the tolerances were set too high. It's probably best to keep as tight a tolerance as is reasonable - here I think `2 * qutip.Options.rtol` would always be correct if the numerics are.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751:193,simpl,simple,193,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625344751,1,['simpl'],['simple']
Usability,"Seems to be a problem with the Cython pyximport. Running a py3 pyx file with just print(""hello world"") ; Runs and returns the text, but then crashes python.exe. Using Anaconda py3 on win7 x64. > On Oct 16, 2015, at 06:51, Alexander Pitchford notifications@github.com wrote:; > ; > Ok, here it is:; > btw the actual error (the last line) did not appear in the output file, but it does appear in the cmd window, so I typed it in.; > ; > Transform 2-level to eigenbasis and back ... ok; > Transform 10-level real-values to eigenbasis and back ... ok; > Transform 10-level to eigenbasis and back ... ok; > Transform 10-level imag to eigenbasis and back ... ok; > Consistency between transformations of kets and density matrices ... ok; > Check diagonalization via eigenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic oscillator, finite temperature, states ... ok; > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > correlation: legacy me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; > Transform 10-level real-values to eigenbasis and back ... ok; > Transform 10-level to eigenbasis and back ... ok; > Transform 10-level imag to eigenbasis and back ... ok; > Consistency between transformations of kets and density matrices ... ok; > Check diagonalization via eigenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic osci",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:807,simpl,simple,807,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['simpl'],['simple']
Usability,Should we perhaps just change `clear` to set it to `None` instead of an empty list?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2336#issuecomment-1967539515:31,clear,clear,31,https://qutip.org,https://github.com/qutip/qutip/pull/2336#issuecomment-1967539515,1,['clear'],['clear']
Usability,"So at the moment when we do something simple like ; ```; from qutip import Qobj; ```; All the * imports in `__init__` are called. That is a lot of functions now.; What we have to be careful of though is that a lot of users start off their qutip session with; ```; from qutip import *; ```; Now it seems reasonable that they get everything, as it is now. But that for users who are more careful, like the first example, should only get what they ask for. Now importing `Qobj` gets you a lot, as it uses a lot of qutip functions, but not all the solvers for instance.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-269725136:38,simpl,simple,38,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-269725136,1,['simpl'],['simple']
Usability,"So, while I agree that having a flexible storage format is a good way to go, the truth of the matter is that no one has time to implement such a big change. SciPy supports both 32 and 64-bit ints, and checks to see which ones are needed at runtime. e.g. a tensor product of two sparse matrices with int32, may need int64 in the result since their shape is larger. We could also do a similar thing, but it is a lot of work. The reason why we no longer use standard SciPy sparse objects is: 1) They tend to have a sizeable overhead when being created and/or manipulated do to redundant safety checks. 2) Many of the sparse operations are not well optimized. Because SciPy supports many different sparse formats, they had to generalize many of their core operations, making them slower. For example, the sparse kronecker product first converts to COO format, does the tensoring, and then converts back to the original format. Our method is much faster. Supporting more than just the current CSR format is also problematic. As already mentioned, there would be type checks, conditionals, and format conversions everywhere. e.g. what happens when DIA * CSR. As usual, available time is the limiting factor here. Support for both int32 and int64 is not that hard, but would take some time. Just int64 would make smaller matrices larger, but would allow for much greater system dimensions. In this later case, it would be a simple switch `int` -> `int64` and `size_t` -> `uint64` in the Cython code, and the fastsparse module (plus probably other places.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384005667:1417,simpl,simple,1417,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384005667,1,['simpl'],['simple']
Usability,Some initial feedback:; There are a number of lines that overrun the pep8 limit,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/884#issuecomment-398510499:13,feedback,feedback,13,https://qutip.org,https://github.com/qutip/qutip/pull/884#issuecomment-398510499,1,['feedback'],['feedback']
Usability,Something is way off about that test failure again... Is it possible Travis isn't cleaning up properly? I can't reproduce the failure (it's also clearly nothing to do with this change) and the error message doesn't match up. If anything it looks like the error message is coming from a hash collision inside QobjEvo _maybe_?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672:145,clear,clearly,145,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672,1,['clear'],['clearly']
Usability,"Somewhat related -- I'd like to have `qeye_like(op)` that takes an operator and produces the appropriate identity. One might naively think that `qeye(dims[0])` does the right thing, but this issue shows that the situation is more complex than that. . We can already solve this without #1996 by just constructing a data object identity with the right shape and passing that to Qobj with the correct dims (but #1996 will make the situation a lot clearer).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2122#issuecomment-1470003116:444,clear,clearer,444,https://qutip.org,https://github.com/qutip/qutip/issues/2122#issuecomment-1470003116,1,['clear'],['clearer']
Usability,Sorry about all those commits - I didn't have my working environment last night and I thought I could easily change a simple thing through github's editor - it took a few tries...,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/218#issuecomment-54312656:118,simpl,simple,118,https://qutip.org,https://github.com/qutip/qutip/pull/218#issuecomment-54312656,1,['simpl'],['simple']
Usability,"Sorry for my delayed response, been a couple of quite busy weeks on my end. As for the design issues with `composite`, I think that at least some of what @arnelg has pointed out could be addressed with a better name that emphasizes that the function produces a propagator of some kind. `composite` was merely my first stab at a name, so there's definitely room for improvement. On the topic of `dims`, I entirely agree that more generic tensor network would be a wonderful thing, though I also would not want to require that one be well-versed in all things Wood diagrams to use QuTiP. That is, in making design changes, I think it's important both to keep and improve flexibility, and to make the design as intuitive as possible. One suggestion, and I'll add this to the FDC wiki page you liked to, would be to use classes other than `list` to keep metadata on what kind of indices are being considered, even if only to provide richer printouts. This may or may not make much sense, so I apologize if it's the latter case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-61099597:708,intuit,intuitive,708,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-61099597,1,['intuit'],['intuitive']
Usability,"Sorry for the slow response... It seems to me like @Ericgig summed it up pretty concisely. Although I'm not sure I understand how #1123 fits in: what is the plan for `Qobjevofunc`, and how would it fit in to specifying time-dependent Hamiltonians?. The only thing that's ever really bothered me was the mandatory `args` as part of the signature, even if it's not used. That's lead to the need for workarounds like the `allow_args` parameter in; https://github.com/qucontrol/qdynpylib/blob/f7b54af3e586683cdfd9b3dd666c5cf540d843e1/src/qdyn/pulse.py#L555. If there's a future `f(t)` option, I should be happy. In the abstract, `f(t, **args)` and `f(t, state_vec, **args)` would be the most elegant, but if there's a severe performance hit, that could be a problem. I'm surprised, though: I would have thought that `f(t, **args)` and `f(t, args)` should be almost the same thing in the Python internals, since you can modify `args` inside of `f` and pass it to lowerlevel function as `**args` again. Even from the user's perspective any current code with signature `f(t, args)` could have its signature replaced with `f(t, **args)` without requiring any change to the function body. But I'm clearly missing something. Can you point me to lines in the code where this becomes a bottleneck?. I'm also quite in favor of introspection to accept a wide variety of signatures: you can even introspect argument names, so the possibilities are endless. The introspection is probably slow, but if it only has to be done in a very high level function, that might be alright.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696:1188,clear,clearly,1188,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696,1,['clear'],['clearly']
Usability,"Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (**1-P(no jump)**), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable? . I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the **array[1, 10, 11]**? ... . At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response. Cheers,; Qi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42091087:1434,guid,guidelines,1434,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42091087,1,['guid'],['guidelines']
Usability,"Sorry.. got a little distracted, and wanted to check the contributing guidelines on what branch to make the pull request against. Currently it’s master. Is that ok? If yes, I’ll undraft it. Draft PRs are pretty new, and a very nice way to kick off the Continuous Integration. Like in this case, I wanted to check if any of the tests involve that message. As they don’t, this actually is ready to go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964:70,guid,guidelines,70,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964,1,['guid'],['guidelines']
Usability,"Sounds good, then. I'll get this done in the next couple days, then. Thank you for the feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/315#issuecomment-74205624:87,feedback,feedback,87,https://qutip.org,https://github.com/qutip/qutip/issues/315#issuecomment-74205624,1,['feedback'],['feedback']
Usability,"Sounds good, we should definitely make sure that the tests all work for 3.2; final. In the meantime, I think we should continue to merge in fixes when; its clear that the test failures are unrelated. On Mon, Feb 15, 2016 at 4:52 PM Alexander Pitchford <; notifications@github.com> wrote:. > Yes, I was thinking the same thing. I will open an issue now.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/pull/428#issuecomment-184074750.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/428#issuecomment-184074941:156,clear,clear,156,https://qutip.org,https://github.com/qutip/qutip/pull/428#issuecomment-184074941,1,['clear'],['clear']
Usability,"Sounds good. I think that makes sense in a lot of ways, but I was initially wary of adding additional attributes. I'd be happy to rework PR #90 to be in terms of a new attribute `Qobj.superrep`, then. Thanks for the feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/88#issuecomment-37781929:216,feedback,feedback,216,https://qutip.org,https://github.com/qutip/qutip/issues/88#issuecomment-37781929,1,['feedback'],['feedback']
Usability,"Still looks good to me. We could put some of the code in `setup.py` into functions so that it's a bit more clear what is temporary state and how the code is organized, but we don't have to fix everything in one PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-786544691:107,clear,clear,107,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-786544691,1,['clear'],['clear']
Usability,Sure! I can prepare everything this evening following the development guidelines and send a pull request. Thanks!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2546#issuecomment-2416283354:70,guid,guidelines,70,https://qutip.org,https://github.com/qutip/qutip/issues/2546#issuecomment-2416283354,1,['guid'],['guidelines']
Usability,"Sure, I just added something - just a simple mesolve that uses a nonlinear tlist - I put it in test_td_formats.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-245499422:38,simpl,simple,38,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-245499422,1,['simpl'],['simple']
Usability,"Sure, I'll try soon. I can add stuff to the merge I've already done - I learned some `git` magic to combine merge commits into the same object without losing my previous work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1248#issuecomment-779265736:72,learn,learned,72,https://qutip.org,https://github.com/qutip/qutip/pull/1248#issuecomment-779265736,1,['learn'],['learned']
Usability,"Thank you @hodgestar, glad to see many details coming with this nicely drafted PR. . Functions design seems sensible. ; What is the main difference between `expect` and `measure`? That's the main thing that comes up to my mind. What different question are you answering? I also wonder if `expect` could be called. The description of the `measure` function is a bit general maybe with this regard. But I might have missed the point completely (my bad). . Tests seem quite elaborate, I wouldn't know how to add more. They can be even very simple in general. . Somehow `smesolve` tests fail with Travis CI, not sure how this PR could have affected it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-536360074:537,simpl,simple,537,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-536360074,1,['simpl'],['simple']
Usability,"Thank you @jakelishman and @hodgestar for your suggestions throughout the PR!. At this stage, the following things are added:. - Getting rid of the previously implemented `matplotlib_version_gte` method. Instead following @jakelishman 's advice to factor version checking once at the top and use it throughout the module. This prevents any version checking in the user guide since the `axes3D_` method can be directly imported.; - Since `axes.M` seems to work even for `matplotlib==3.0`, converted all instances of `renderer.M` to `axes.M` to keep version checking at the minimum. Thanks!!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1556#issuecomment-841477865:369,guid,guide,369,https://qutip.org,https://github.com/qutip/qutip/pull/1556#issuecomment-841477865,1,['guid'],['guide']
Usability,"Thank you @jakelishman for the summary on the use of a GPL-2.0 in BSD-3.0. ; Maybe we can ping directly @Travis-S regarding the use of `qcircuit` 2.6 here for input on how to proceed. Let me point out that recently, reference to this project and a link was added in QuTiP's [user guide](https://github.com/qutip/qutip-doc/blob/f3592e9ad5a4083c19a8c7b81db8b2ae282cf4b4/guide/guide-qip.rst#plotting-a-quantum-circuit).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-633932995:280,guid,guide,280,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-633932995,3,['guid'],"['guide', 'guide-qip']"
Usability,"Thank you @sahmed95. Some references:. The code builds upon the formalism used in this paper . F. Damanet, D. Braun, and J. Martin, Cooperative spontaneous emission from indistinguishable atoms in arbitrary motional quantum states, Phys. Rev. A 94, 033838 (2016). which itself uses the technique illustrated here; ; B. A. Chase and J. M. Geremia, Collective processes of an ensemble of spin-1 particles, Phys. Rev. A 78, 052101 (2008). ; B. Q. Baragiola, B. A. Chase, and J. Geremia, Collective uncertainty in partially polarized and partially decohered spin-1/2 systems, Phys. Rev. A 81, 032104 (2010). An earlier version of this code has been used in this reference for N=50 two-level systems:. N. Shammah, N. Lambert, F. Nori, and S. De Liberato, Superradiance with local phase-breaking ; effects, Phys. Rev. A 96, 023863, arXiv:1704.07066v1 (2017). I will add examples and documentation, also referring to the much wider literature on permutational invariant methods studying the open quantum dynamics of a collection of N two-level systems. . Any feedback at any stage most welcome.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-331397170:1052,feedback,feedback,1052,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-331397170,1,['feedback'],['feedback']
Usability,"Thank you for reporting.; The feedback interface changed a few times (and will change in future version.); The documentation in guide is wrong, but the apidoc should be up to date.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538#issuecomment-1398778915:30,feedback,feedback,30,https://qutip.org,https://github.com/qutip/qutip/issues/1538#issuecomment-1398778915,2,"['feedback', 'guid']","['feedback', 'guide']"
Usability,"Thank you for taking this issue. The contribution to the phase is `np.exp(1.0j * 1 * phi)`, ignoring the `m` and it's not documented. So I guess all ket are `m = 1`...; Since it's wrong and not documented, you are free to choose which ever way you prefer. But please update the docstring so that is is clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839#issuecomment-1082462658:302,clear,clear,302,https://qutip.org,https://github.com/qutip/qutip/issues/1839#issuecomment-1082462658,1,['clear'],['clear']
Usability,Thank you for the clarification. A suggestion would be to also relabel `fidelity` to make this clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2102#issuecomment-1450321937:95,clear,clear,95,https://qutip.org,https://github.com/qutip/qutip/issues/2102#issuecomment-1450321937,1,['clear'],['clear']
Usability,"Thank you for the suggestions. (2) It should be easy. We could reuse the `parallel_map` as you said. I would make a good first contribution. . (1) We need to be careful about this. ; I can see case where the user think the correlation is gone by `tlist[-1]` but it is not, so it should be clear which output are `0` and which are not computed.; Also if we do that, maybe finer control could be given. We could have a variable `max_t_plus_tau` with default `np.inf`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2315#issuecomment-1925474043:289,clear,clear,289,https://qutip.org,https://github.com/qutip/qutip/issues/2315#issuecomment-1925474043,1,['clear'],['clear']
Usability,"Thank you for your feedback. I was able to get the results I wanted. Just to provide some closure, I'm sending a photo. ![Image from iOS](https://user-images.githubusercontent.com/29261370/113462422-67e8c000-93e6-11eb-95ef-6d20f89b3851.jpg)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1466#issuecomment-812760478:19,feedback,feedback,19,https://qutip.org,https://github.com/qutip/qutip/issues/1466#issuecomment-812760478,1,['feedback'],['feedback']
Usability,Thank you for your feedback. I will write tests and documentation when I have some more time (might be in a month or so).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1369#issuecomment-759365480:19,feedback,feedback,19,https://qutip.org,https://github.com/qutip/qutip/pull/1369#issuecomment-759365480,1,['feedback'],['feedback']
Usability,"Thank you very much for the quick feedback and sorry for the delay!. I checked also QuTiP 4.7 and yes, it still returns the same results so apparently this wasn't fixed yet. (I double-checked that I get the same result using the built-in `floquet_modes` with options rather than my `floquet_modes_mod`)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864#issuecomment-1103559564:34,feedback,feedback,34,https://qutip.org,https://github.com/qutip/qutip/issues/1864#issuecomment-1103559564,1,['feedback'],['feedback']
Usability,"Thank you very much. I have documented most of the code and written simple unit tests. I would be happy to answer any questions regarding the code. If it helps, I can explain things over a short hangout session. Suggestions and comments are welcome.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-275864859:68,simpl,simple,68,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-275864859,1,['simpl'],['simple']
Usability,"Thank you, Alex, for your kind reply!. Which example do you refer to? I don't see the key word rhs_with_state on; the page (http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html).; Did I misunderstand you?. Best regards, Pu Zhang; --; Faculty at School of Physics, Huazhong University of Science and Technology; Room 819 (N.), Yifu Science and Technology Building; 1037 Luoyu Road, Wuhan, China; E-mail: puzhang0702@hust.edu.cn <puzha@fotonik.dtu.dk>; Homepage: www.researchgate.net/profile/Pu_Zhang4; Phone: +86 18871860394. On Thu, Feb 7, 2019 at 8:59 PM Alexander Pitchford <notifications@github.com>; wrote:. > @PZJuly <https://github.com/PZJuly> I have posted an answer to your; > question on; > https://groups.google.com/forum/#!topic/qutip/BqUZQEQN1c4; >; > I agree the docs; > http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html do seem to; > include an example using rhs_with_state; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/946#issuecomment-461408955>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGc5W9xuCIQ3EoKfzB0xg26dT1Jdo3O6ks5vLCMggaJpZM4agDjP>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-461718912:153,guid,guide,153,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-461718912,2,['guid'],['guide']
Usability,"Thanks ! I have removed the table. . Couple of questions : . - What's the preferred method to link functions not in public API ? ; I could create a [sphinx reference label](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#basic-markup) to link to these functions either by using Github's permalink or [a path to such functions in the directory](https://docs.readthedocs.io/en/stable/guides/cross-referencing-with-sphinx.html#the-doc-role). You can see this when I try to link `check_isunitary` which is not in the API but is defined in `Qobj` file in the linked branch. ; - Qobj vs qobj link : ; There are problems with linking functions for `Qobj` class. For example, if I want to link to [`isoperbra`](http://qutip.org/docs/latest/apidoc/functions.html#qutip.qobj.isoper) then the only link that will work is `qutip.qobj.isoperbra` not `qutip.Qobj.isoperbra`. If latter is preferred then I will have to create `ref` labels for each of these functions as stated above. More examples can be observed in the `superrep` attributes of `Qobj` class of linked branch. I think this might be due to `qutip.qobj` in [module code](http://qutip.org/docs/latest/modules/index.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1499#issuecomment-823754421:407,guid,guides,407,https://qutip.org,https://github.com/qutip/qutip/pull/1499#issuecomment-823754421,1,['guid'],['guides']
Usability,Thanks @Ericgig for feedback.; I see (having read more carefully) in; https://github.com/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb; there is an example showing the equivalence of using `smesolve` and `general_stochastic` with a clear performance enhancement in the former. So I think I can easily switch my example to use `smesolve`. Thanks.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581:20,feedback,feedback,20,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works. . Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-641961716:103,simpl,simplifying,103,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-641961716,4,"['simpl', 'user experience']","['simple', 'simpler', 'simplifying', 'user experience']"
Usability,Thanks @emilianomfortes for adding the guide. :rocket:,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1668#issuecomment-1126039633:39,guid,guide,39,https://qutip.org,https://github.com/qutip/qutip/issues/1668#issuecomment-1126039633,1,['guid'],['guide']
Usability,Thanks Chris. This is looking good. I'll try it out in more detail in the comings days. Some immediate comments:; - I don't think we should keep two code-paths for parsing the config file. So either we keep using the old manual parsing or we make configobj the official and only way to parse the config file. In that case I think it would be Ok to simply fail to parse the config file if configobj is not available. I don't think many users use the config file so would be to worried about breaking backwards compatibility with respect to this.; - I think I'd prefer to have the logging module called logging.py rather than _logging.py even though it is supposed to internal to qutip. ; - Please add a `__all__` list in logging.py; - Shouldn't configspec.ini be added to the setup.py file?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248#issuecomment-61393881:348,simpl,simply,348,https://qutip.org,https://github.com/qutip/qutip/pull/248#issuecomment-61393881,1,['simpl'],['simply']
Usability,"Thanks Eric, I've learned so much from your comments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1083545784:18,learn,learned,18,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1083545784,1,['learn'],['learned']
Usability,"Thanks alot for your great help.; Activating conda solved the problem, but still the command ""import numpy as; np"" leads to the following error:. File ""<stdin>"", line 1; import numpy as np; ^; IndentationError: unexpected indent. Other commands like ""import matplotlib.pyplot as plt"" works fine but; something like ""r=np.random.rand(4,4)"" does not work.; My numpy version is 1.19.2. Would you please help me to solve the problem.; Many thanks. On Tue, Dec 1, 2020 at 12:44 AM Boxi Li <notifications@github.com> wrote:. > Every time you open a new terminal, you will need to activate the conda; > environment by conda activate qutip-env. QuTiP is only installed in this; > environment. If you are interested, you could check; > https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html; > for details.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1391#issuecomment-736060302>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AR53J43QBLGZO3C3WKRB7BDSSQDMJANCNFSM4UGXA6UA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232:779,guid,guide,779,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232,1,['guid'],['guide']
Usability,"Thanks for clearing that up. I had tried to poke around to see what had changed, but I hadn't gone deep enough to see what changed with the qobjs themselves. . That's a good point about the eigenstate problem. I forgot about that because the observable I'm interested in is very very simple (it's diagonal), so it *seems* like it should be trivial to compute the measurement statistics. But to do that, qutip would have to know the observable is simple so it could take advantage of the symmetries. Are there any flags I can give it to tip it off? Or can I some how pass the list of eigenstates 'manually' so it doesn't need to find them itself?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2265#issuecomment-1821020656:11,clear,clearing,11,https://qutip.org,https://github.com/qutip/qutip/issues/2265#issuecomment-1821020656,3,"['clear', 'simpl']","['clearing', 'simple']"
Usability,"Thanks for clearing that, I'm also not sure how that happened, but it should be fixed now",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2136#issuecomment-1485558289:11,clear,clearing,11,https://qutip.org,https://github.com/qutip/qutip/pull/2136#issuecomment-1485558289,1,['clear'],['clearing']
Usability,"Thanks for reporting this - it's an important bug that's snuck in. Right now, there's a few errors in your code that you can fix to get on your way again, but we need to fix the error on our side. You're using `sigmap()` which is the Pauli excitation operator and is only defined for a Hilbert space with dimension 2. You actually are working with a Hilbert space of dimension `nmax * nmax` (a tensor-product space), so your `e_ops` argument to `sesolve` is wrong - it's difficult to know exactly what you meant here. `destroy(2)` is equivalent to `sigmap()`, so it's possible you intended to have `e_ops` be `[qutip.tensor(a1, a2)]`?. ---. Maintainers: The error is actually a segfault, because QuTiP 4.5 (probably 4.4 too) does not do sufficient error checking on`e_ops` arguments - probably they're missing in the conversion to `CQobjEvo`. When the expectation is called, it has already sidestepped `Qobj`'s dimensions check and there is no matrix size check, so it simply segfaults on OOB access. The fix for the 4.x branch is to have a very loud Python-space error due to mismatched `Qobj` dimensions on entry to the solvers, or insert a size check within `CQobjEvo`. High priority: there's no reason we should be segfaulting here. Partially fixed in the 5.x branch; all matrix multiplications that take place in C-space have a size check and throw a Python exception, however the solvers still sidestep the `Qobj` dimension check so a tensor-product-space mismatch will not be detected.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492:969,simpl,simply,969,https://qutip.org,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492,1,['simpl'],['simply']
Usability,"Thanks for the clue, it was helpfull.; The source of problem is localization of `lscpu` util, which used by `_linux_hardware_info()` function.; The function expects `'Socket(s)'`, `'Core(s) per socket'`, etc in `lscpu` output, but in my system it actually `'Потоков на ядро'`, `'Сокетов'`, etc.; I think, maybe better less system dependent ways to calculate cpu count, for example, we could use `multiprocessing` module and it's `cpu_count` function. Or `len(os.sched_getaffinity(0))`for computers with dynamic cpu management (see [this](https://stackoverflow.com/questions/31346974/portable-way-of-detecting-number-of-usable-cpus-in-python) for details).; Or show exception/error, if we try to use lscpu and `LANG` is not english (or we couldn't found mentioned above `'Socket(s)'`).; Ideas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045:619,usab,usable-cpus-in-python,619,https://qutip.org,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045,1,['usab'],['usable-cpus-in-python']
Usability,"Thanks for the fast response! It helps a lot! . As an additional question, with the list of tuples in #3, what happens if it is a list of lists instead?. Regarding 1/2: ; In my code, using tuples does result in different behaviour. I cannot (so far) think of a good simple example to reproduce this though, and am hesitant to upload the full code in which I see the difference as it is work in progress. What I can say is that when looking at expectation values after running mesolve, the list-vs-tuple question seems to not matter, at least for the things I tend to look at. However, when using qt.correlations_2op_2t, the results are very drastically different, and it seems to me that using tuples actually gets results closer to what I would expect to see. But I'm very suspicious of trusting numerical results that arise from using definitions in ways contrary to the documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2065#issuecomment-1410024050:266,simpl,simple,266,https://qutip.org,https://github.com/qutip/qutip/issues/2065#issuecomment-1410024050,1,['simpl'],['simple']
Usability,"Thanks for the feedback. I am very keen to spend some time making the control modules more QuTiP like in style. In particular trying to utilise QuTiP elements, e.g. maintaining Qobjs throughout the code. I am however focussed on trying to get some results out using the library, so it will probably be a month of so before I can start on this. ; Re the documentation, there is some theory in the first of our notebooks example-pulse_optim-Hadamard, however it could be a lot more detailed and better presented. I should be able to make a start on a general overview of the control modules though, i.e. one notebook that outlines the theory and then explains the different functions and classes and how / when to use them. Is that the kind of thing you mean?; I was wondering about the auto-generated API docs, how it deals with inherited and overidden methods etc. Do you use some specific tool to generate these? Can you point me to some docs about how it works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/338#issuecomment-97736382:15,feedback,feedback,15,https://qutip.org,https://github.com/qutip/qutip/pull/338#issuecomment-97736382,1,['feedback'],['feedback']
Usability,"Thanks for the interest! To be clear, I wasn't trying to suggest that the whole thing is in scope for QuTiP per se; this PR concerns calling a small one-file [client library](https://github.com/cgranade/tskmon-client) from QuTiP. Given the similarity with that and the PiCloud functionality's goal (integrate QuTiP with third-party web services), maybe a good architecture would be something like a `qutip.services` package, where the expectation is that each submodule would require some additional client library?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63312872:31,clear,clear,31,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63312872,1,['clear'],['clear']
Usability,"Thanks for the review!. > * Should we stop the user from passing a list of kets to `mcsolve` directly?; > Presently it work but it's not documented (and list `ntraj` don't.). You are right, done. Of course we could also allow the same arguments for `mcsolve` as for `run`, but I thought it might be good to keep the `mcsolve` interface simpler. > * It would be nice to have the trajectories per initial state information stored in the result somewhere. I have added that information and checking it in a test. Edit: I forgot that I still haven't updated the docs. Will do that. Edit 2: Done",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143:336,simpl,simpler,336,https://qutip.org,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143,1,['simpl'],['simpler']
Usability,"Thanks for the suggestion. This is a good idea, and should be relatively simple to implement.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/203#issuecomment-50447740:73,simpl,simple,73,https://qutip.org,https://github.com/qutip/qutip/issues/203#issuecomment-50447740,1,['simpl'],['simple']
Usability,"Thanks for the useful feedback, both here and in PR #1611 ! From the discussion in PR #1611 it seems that the second option with the modifications proposed by Jake in this issue seems to be the most sensible approach. Hence, if there are no objections, I will open a PR (which I will probably do tomorrow) where I implement the following changes (adapted from Simon's comment in PR #1611):. - `Qobj.__mul__(self, other) ` ; - dispatch to `data.matmul` if `other` is a `Qobj`; - dispatch to `data.mul` otherwise which will return `NotImplemented` if it does not know how to handle `other`. ; - `Qobj.__rmul__(self, other) `:; - Dispatch to `data.mul` (`other` will never be a Qobj): Notice that in this way both left and right multiplication will behave in the same way. This would also ""solve"" the inconsistency PR #1611 was trying to solve but this time `data.mul` will handle it and will raise NotImplemented whenever required. . - `mul_dense` and `mul_csr`:; - Use a thin wrapper that returns `NotImplemeneted` if input is not a complex python scalar. There are a few things I would like to discuss before opening a PR:; 1) These changes will break backwards compatibility as:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # With the changes this also returns NotImplemented.; matrix * qobj # With the changes this also returns NotImplemented; ```; will now behave consistently (""fixes"" PR #1611). Is this acceptable? I would say yes given that we are doing a major version change. However, it may be a good idea to start raising a deprecation warning in QuTiP 4 if these changes go forward. 2) `data.add` has a similar behaviour to `data.mul` in that it accepts `scale` which is not a `Data` (there are a few more specialisations that also accept an argument that is not a `Data`). Should these specialisations behave in the same way allowing arbitrary python objects as ""scale"" and raise NotImplemented when required or should they just allow a complex py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473:22,feedback,feedback,22,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473,1,['feedback'],['feedback']
Usability,Thanks for your contribution. I have merged your changes together with other an implementation of the simplified array-based time-dependence format discussed above in PR #162.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-46521430:102,simpl,simplified,102,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-46521430,1,['simpl'],['simplified']
Usability,"Thanks for your feedback, I think it should be better now",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2136#issuecomment-1490968491:16,feedback,feedback,16,https://qutip.org,https://github.com/qutip/qutip/pull/2136#issuecomment-1490968491,1,['feedback'],['feedback']
Usability,"Thanks for your replies @BoxiLi @Ericgig , very helpful!. The output seems right after adding the `max_step` option to mesolve().; We changed the width of the cosine shaped pulse, here are some simple observations.; ```; if width = 20, then setting max_step < 27 can produce the correct answer.; if width = 50, then setting max_step < 70 can produce the correct answer.; if width = 100, then setting max_step < 130 can produce the correct answer.; ```. But as we are most caring about how to use the solvers correctly, we still have some doubts:; 1. We only observed two results, one is 'perfectly correct', and another is 'totally wrong' (Like @Ericgig said, the second pulse has been completely skipped over). Would some fault result in the middle happen? Some wrong result very similar to the correct would be even worse. 2. The Ode version of mesolve function is very fast, which is one of the reasons we love it. But we did not find document about other solvers (raw propagator, flatten to Liouville space?) for the master equation. Could you explain why the ODE method is the best over others, in aspect of accuracy and speed?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1265#issuecomment-629729386:194,simpl,simple,194,https://qutip.org,https://github.com/qutip/qutip/issues/1265#issuecomment-629729386,1,['simpl'],['simple']
Usability,"Thanks for your suggestion! I tried to increase the sub-steps, but the optimal (a tradeoff between precision and speed) `nsubsteps` is very sensitive to the parameter of the Hamiltonian (bias). To simulate a time-dependent bias, I have to set an extremely large `nsubsteps` then practical unable to complete. Mcsolve works perfect for this setup, but I also want to add some extra c_ops later. I would like to ensure if the `nsubsteps` is the only way to control the precision? If so, I will make things simpler and use mcsolve.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1357#issuecomment-691302246:504,simpl,simpler,504,https://qutip.org,https://github.com/qutip/qutip/issues/1357#issuecomment-691302246,1,['simpl'],['simpler']
Usability,Thanks! This cleared up my confusion.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/344#issuecomment-105092491:13,clear,cleared,13,https://qutip.org,https://github.com/qutip/qutip/issues/344#issuecomment-105092491,1,['clear'],['cleared']
Usability,"Thanks!. I haven't thought about python3 (is it about divisions `//` and `reduce`, or did you spot other problems?). `numpy.prod` - I guess I should rather use it, since `numpy` is already there; (a second thought: at least in python2 for lists of few elements `reduce` is significantly faster; I am not sure though, it in this particular case it makes a difference). ```; from numpy import prod; from operator import mul. prod([1,2,3]) # 22.6 µs; reduce(mul, [1,2,3]) # 737 ns; ```. `plot_qubism` for density matrix it is a different plot. In any case, I will think about it when I doing it (and I will adopt to QuTiP guidelines).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-43737566:619,guid,guidelines,619,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-43737566,1,['guid'],['guidelines']
Usability,"Thanks, @jakelishman. Even you say that you didn't look into very details, your comments were very inspiring and helpful!. What code climate is complaining about is mostly left from the previous code structure. I do plan on further cleaning them. Another refactor probably. Actually, the `_EvoElement` here is a simplified ""copy"" of the `EvoElement` in `QobjEvo`, not directly referring to that. Switch to `dev.major` won't break it. I did this long ago because I was having problems initialize `QobjEvo` in my particular use case. But indeed exposing a private class is fragile and dangerous. Planning on remove it too.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1444#issuecomment-815048230:312,simpl,simplified,312,https://qutip.org,https://github.com/qutip/qutip/pull/1444#issuecomment-815048230,1,['simpl'],['simplified']
Usability,"Thanks, I'm glad to be of service! I missed that about `functools.reduce` in 2.7, will amend the PR to use that, fix the `xrange` thing and try to make the use of `reduce` a bit more clear. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128407473:183,clear,clear,183,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128407473,1,['clear'],['clear']
Usability,"Thanks, it worked! I simply moved it to the library where third-party packages are installed in Canopy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469#issuecomment-215968543:21,simpl,simply,21,https://qutip.org,https://github.com/qutip/qutip/issues/469#issuecomment-215968543,1,['simpl'],['simply']
Usability,"Thanks, this helps track it down. It seems not to be an issue with ENR per se, but with the floquet steadystate solver itself (it also appears without using ENR states). . I think I pinned it down to two small bugs in that seem to have crept in to the solver with the data layer updates, I will make a PR for it and ping you for some feedback, if thats ok. We lack a sufficiently robust test for this solver really, if you can suggest something tractable (very small example, potentially analytical solution we can check against), it would be very helpful.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504:334,feedback,feedback,334,https://qutip.org,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504,1,['feedback'],['feedback']
Usability,"That is true. I'll try to look into why this is the case. However, it does have three expectation calculated. You can check this with output.expect ! . Edit: . So, I just realized that the noise-spectrum is associated with the coupling operator [sigmax()], I think the correct call to brmesolve must infact be (updated to current qutip standards) . `output = brmesolve(H, psi0, tlist, [[sigmax(), ohmic_spectrum]], e_ops)`. This is in line with the notation we use in example (https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve-time-dependent-Liouvillian.ipynb). I will make a pull request updating both the example notebook (http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) to reflect this and make sure we depreciate the spectra_cb argument in bloch_redfield_tensor to eliminate the confusion. Thanks for bringing this to notice !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703:692,guid,guide,692,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703,1,['guid'],['guide']
Usability,"The Liouvillian is defined via equation #3. I think your asking is it better to make a single operator, or take each term in equation #3 separately. If that is your question then the answer is yes, building the Liouvillian is much better. > On Sep 1, 2016, at 23:00, kwyip notifications@github.com wrote:; > ; > Hi Paul,; > Sorry let me clarify. ; > 1. If the number of nonzero elements is very large, is Liouvillian still preferred to defining derivatives from Hamiltonian and collapse operators (Eq.(3) in the link below)?; > 2. By constructing Liouvillian from Hamiltonian and collapse operators and defining the derivative as L*rho, is it computationally faster than Eq.(3) in http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-master.html http://qutip.org/docs/3.1.0/guide/dynamics/dynamics-master.html; > Thank you.; > ; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub https://github.com/qutip/qutip/issues/531#issuecomment-244283656, or mute the thread https://github.com/notifications/unsubscribe-auth/ABMPqdiiBDr8Qx3t3gfFbjAv09QtRBqiks5ql611gaJpZM4JzMYn.; > ; > Untracked with Trackbuster https://trackbuster.com/?sig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/531#issuecomment-244284366:709,guid,guide,709,https://qutip.org,https://github.com/qutip/qutip/issues/531#issuecomment-244284366,2,['guid'],['guide']
Usability,"The NASA copyright needs to be there. As it stands now, it is not clear what the license actually means though, i.e. it is embedded in the QuTiP license which does not make any sense. So that needs to be cleaned up before approval. However, if it is truly BSD licensed then the copyright does not matter for derivative works as it gives permission to do whatever one wants provided the original copyright remains. I am personally fine with the copyright changes going forward. I am not part of the admin team (by choice), but there is a decade of git commits that show my share the the work, and making the cp more broadly applied to QuTiP admin / devs make s a lot of sense going forward.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864032584:66,clear,clear,66,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864032584,1,['clear'],['clear']
Usability,"The PR is in good shape for merging I believe. I'd like to discuss the parameters API a bit. The parameters used now for measurement function is `ops` and `state`. I guess @hodgestar coined this interface in his PR. It fully made sense for observable and state. However, if we now generalize it to the measurement from the perspective of experimentalists. The parameter `state` becomes a more prominent one whereas `ops` becomes secondary because it only offers a basis for the measurement. This become clearer if one list all the possible use scenarios where:. - `state=Qobj, ops=None`: measure the `state` in default computational basis; - `state=Qobj, ops=ket`: Probability of measure `state` and get `ket`, (together with the post-measurement state); - `state=Qobj, ops=Qobj`: Measure the `state` with one POVM operator specified by `ops`; - `state=Qobj, ops=list of ket`; - `state=Qobj, ops=list of Qobj`. More generally, we can even provide the user with the optional parameter `targets`, where the given `ops` is only for those targets qubits. We can add identity to the measurement operator for the rest of the qubits automatically for the user.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-648113340:503,clear,clearer,503,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-648113340,1,['clear'],['clearer']
Usability,"The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size `dt` is actually good. It ideally should converge to something as the step size goes to zero. QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances. For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here. Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508:505,learn,learning,505,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508,1,['learn'],['learning']
Usability,"The `Qcircuit.tex` PR was unfortunately many many years ago, long before I made my first commit to QuTiP (according to `git log` it was by Anubhav Vardhan in 2014), so the damage is already done. It was on my mind because there was a PR about updating the version of the code in it (#1187). Nonetheless, we definitely should remove it. @BoxiLi Boxi: `Qcircuit.tex` is a concern for `qutip-qip` more than the main library from 5.0 onwards - it's currently in `qip/circuit_latex.py`, which we'll have removed, but you've gained. It might be most appropriate to handle this the same way Qiskit does - generate code which does `\usepackage{qcircuit}`, and leave it up to the user to have a properly-provisioned LaTeX environment. I note that `qcircuit` is included in MikTeX and TexLive since at least 2018 (but not sure when exactly it was added). > Yeah putting years I think is the correct thing. Didn't know that at the time. Ah, that's good to know, thanks. I'm trying to learn more about licensing - I'm trying to get it sorted now into the right form, but it's a really complicated field. I think if we change `LICENCE.txt` to. ```text; Copyright (c) 2011--2021 Paul Nation and Robert Johansson.; Copyright (c) 2021--2021 QuTiP Admin Team.; All rights reserved. <BSD 3-clause licence>; ```. and update the final `2021` as appropriate, we'll be in the best standing. That's also why we might want to remove the general licence text from each file - it's already redundant, but it'll be much harder to update if we have it scattered everywhere (automation would run the risk of us messing up and changing any external code's licence as well, I think, which would be wrong). > Look forward to talking to you in July!. Me too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845:973,learn,learn,973,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845,1,['learn'],['learn']
Usability,"The block-redfield solver only supports string-based time-dependence, ; http://qutip.org/docs/latest/guide/dynamics/dynamics-bloch-redfield.html#time-dependent-bloch-redfield-dynamics; so in your example something like H=[[initial_H,'1-0.01*{i}*t'.format(i=i)],[final_H,'0.01*{i}*t'.format(i=i)]] should work. I don't know whether that will give you the same issue as reported for repeated calls to mesolve/sesolve. Probably will, if that hasn't been resolved yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1150#issuecomment-575503917:101,guid,guide,101,https://qutip.org,https://github.com/qutip/qutip/issues/1150#issuecomment-575503917,1,['guid'],['guide']
Usability,"The code change look good, but could we also add a test for this so it doesn't fail again in the future? Maybe there is a simple example from a notebook that can be borrowed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1952#issuecomment-1197371391:122,simpl,simple,122,https://qutip.org,https://github.com/qutip/qutip/pull/1952#issuecomment-1197371391,1,['simpl'],['simple']
Usability,"The core of `mesolve` is also `scipy.ode`, but the default method is `adams` instead of `bdf` and we use sparse matrix for the liouvillian. There are a lot of small time lost with using mesolve like this. Just looking at rhos' datatype: ; `self.psi0: dense -> rho0: Qobj(sparse matrix) -> dense vector (for ode) -> mesolve return: sparse matrix -> rhot: dense...`; Also `mesolve` will check if the Hamiltonian is really an Hamitonian or a Liouvillian or a function returning an Hamiltonian, if the system depend on time, if all the dimensions match, etc. So the overhead of `mesolve` will be important. Finally, depending on the Hamiltonian there can be a good difference in speed. We use sparse matrix for the Liouvillian, good if the Hamiltonian is large with few non-zeros, but slower that simple dense matrices otherwise.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1180#issuecomment-583781780:793,simpl,simple,793,https://qutip.org,https://github.com/qutip/qutip/issues/1180#issuecomment-583781780,1,['simpl'],['simple']
Usability,"The current `.evolve_dm` and `.sys_dims` concepts both seem a bit awkward, so I'd like to suggest the following:. **For `.evolve_dm`**:. Replace `.evolve_dm` with a `.unitary` attribute on the solver itself. The attribute should be `True` if that particular instance of the solver can guarantee that the evolution it produces is unitary, and `False` otherwise. This will be more generally useful and will simplify the code inside the propagator a bit. **For `.sys_dims`**:. The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise. I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. **Specifying which solvers support propagators**:. Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335538079:405,simpl,simplify,405,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335538079,1,['simpl'],['simplify']
Usability,"The current stats from `master` show that the fallback is quite mixed:; ```; 12 dtype = dtype or settings.core[""default_dtype""] or _data.CSR; 27 dtype = dtype or settings.core[""default_dtype""] or _data.Dense; 12 dtype = dtype or settings.core[""default_dtype""] or _data.Dia; ```; Perhaps we could create a small object describing the behaviour. Something like:; ```; class DefaultDataType:; state: ...; oper: ...; ```; And then one could either do `with CoreOptions(default_dtype=""CSR""):` (which sets everything to CSR) or `with CoreOptions(default_dtype=DefaultDatatype(state=""Dense"", oper=""CSR""):` (which chooses based on the type of the output). I don't know if `state` and `oper` are the correct set of distinctions to make. We already have some operators where `CSR` seems to the sensible default and others where the sensible default seems to be `Dia`. On the other hand eventually on probably wants to combine these operators into one system, so maybe picking a single operator default is the right thing to do. There is also the question of what should happen when operators are built from states. Perhaps in the end we can't really manage this for the user and they either have to live with a few simple tools we give them or explicitly set dtypes themselves?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1951474434:1205,simpl,simple,1205,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1951474434,1,['simpl'],['simple']
Usability,"The default Apple `clang` version doesn't recognise `-fopenmp` out-of-the-box, because Apple don't ship an OMP library with macOS. You'll have more luck (with most C/C++ projects!) if you install a fully-featured compiler and environment. On [homebrew](https://brew.sh) you can find both `clang`/`clang++` and `gcc`/`g++`, both of which can be installed with OMP support. Make sure your set `PATH`/`CC`/`CXX` environment variables are set up correctly after you've installed, so you're calling the compiler you've just installed, not just the Xcode versions. This isn't a bug in QuTiP, although we could remember this when somebody's working on modernising the distribution - in C/C++ land, tools like `automake` run through a big list of things to check during build configuration, and one of them is if OMP appears to exist. That way the error message is a little clearer (although in this case it's reasonable clear if you're used to C compilers).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774:866,clear,clearer,866,https://qutip.org,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774,2,['clear'],"['clear', 'clearer']"
Usability,"The deprecation warning from `scipy==1.11` reads; `DeprecationWarning: scipy.array is deprecated and will be removed in SciPy 2.0.0, use numpy.array instead`. However, clearly this functionality broke before that release; with some discussion here: ; - https://github.com/scipy/scipy/issues/19065#issuecomment-1678439743; - https://github.com/scipy/scipy/pull/19067",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2300#issuecomment-1906274768:168,clear,clearly,168,https://qutip.org,https://github.com/qutip/qutip/issues/2300#issuecomment-1906274768,1,['clear'],['clearly']
Usability,"The difference between those two lines is that left-multiplication by `s_prep.dag()` will project onto the prepared ancilla state, whereas tensor contraction will implement partial trace over the ancilla; they're both perfectly valid channels (up to normalization in the projection case), but have subtly different physical interpretations. I can explain that better in the notebook, and submit as a PR, then. There's some plotting code there as well that I was planning on cleaning up better for a later PR to QuTiP, but I can clean it up now and include it if you like, so that I can simply use it in the tutorial notebook without a page of function definitions first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65412516:586,simpl,simply,586,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65412516,1,['simpl'],['simply']
Usability,"The dpsi option worked fine on my mac from jupyter. ; - please update the docstring to highlight this option (could also add the presence of the `name` option, besides directory and format); - It is a nice feature, it could be highlighted in the documentation, here https://github.com/qutip/qutip-doc/blob/master/guide/guide-bloch.rst; - add to 4.4.1 enhancements in the changelog, https://github.com/qutip/qutip-doc/blob/master/changelog.rst; Let's skip the codeclimate issues for the moment, but in the future it might be nice to refactor the Bloch class inner workings, as it took me a while to sort out issue #1027.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574:313,guid,guide,313,https://qutip.org,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574,2,['guid'],"['guide', 'guide-bloch']"
Usability,"The equation for `d_{2,i}` for `ssesolve` seems to be missing a 1/2 term. I checked two sources: Quantum Measurement and Control, Wiseman and Milburn (equation 4.76, page 162), and [the development notebook for SSE](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-ssesolve-tests.ipynb). In both cases, the expression for d_{2, i} for the SSE is: . <img width=""278"" alt=""Untitled"" src=""https://user-images.githubusercontent.com/39472087/145735966-85d0c932-a247-42e7-91e1-98fc0f6d0c49.png"">. For the stochastic master equation, I also found a different expression for `d_{2,i}`. Both book (equations 4.24 and 4.72 in pages 152 and 161, respectively) and development notebook, state that it should be written:. <img width=""483"" alt=""d2master"" src=""https://user-images.githubusercontent.com/39472087/145737189-9e3996a5-186a-47e3-9e2f-7e365e00e5ea.png"">. To test the current qutip implementation, I tried to replicate the results of both [SSE](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-ssesolve-tests.ipynb) and [SME](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb) development notebooks. The results obtained with QuTiP homodyne and heterodyne methods were similar to the results obtained with the d_1 and d_2 implemented 'by hand' in the notebooks, which used the expressions I listed above. In my tests, I used QuTiP 4.5.2. The equations above are also the current reported equations in the [stochastic solver documentation](https://qutip.org/docs/latest/guide/dynamics/dynamics-stochastic.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706#issuecomment-992023974:1619,guid,guide,1619,https://qutip.org,https://github.com/qutip/qutip/issues/1706#issuecomment-992023974,1,['guid'],['guide']
Usability,"The error reported here; ```; /Users/goerz/.pyxbld/temp.macosx-10.6-x86_64-3.5/pyrex/rhs72670.cpp:541:10: fatal error: 'complex' file not found; #include <complex>; ```; Suggests that any string format time-dependence would fail to compile. @goerz Could you try to reproduce with simple example, e.g.; ```; H = [[sigmaz(), ""sin(t)""]]; ```; ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-463246180:280,simpl,simple,280,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-463246180,1,['simpl'],['simple']
Usability,"The fermionic stuff looks to me! For the change in the terminator, I see the logic I guess. Also makes it easier for the user to include it or not, without remaking the bath. I have some reservations about it just because I can imagine someone following the examples and using jupyter notebook rerunning the same cell multiple times and continuously modifying their Hsys or something? But that can just be made clear in the examples so lets go ahead and merge this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370:411,clear,clear,411,https://qutip.org,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370,1,['clear'],['clear']
Usability,"The fixes are quite simple, added them here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108796698:20,simpl,simple,20,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108796698,1,['simpl'],['simple']
Usability,"The function `rand_herm` doesn't return a uniformly random sample from the space of Hermitean matrices -- instead it uses by default a simpler procedure of generating a random matrix with moderately sized entries and then calculating `M + M.conj().transpose()`. The following note in the `rand_herm` documentation explains how to select the eigenvalues:. > If given a list/ndarray as input 'N', this function returns a; > random Hermitian object with eigenvalues given in the list/ndarray.; > This is accomplished via complex Jacobi rotations. While this method; > is ~50% faster than the corresponding (real only) Matlab code, it should; > not be repeatedly used for generating matrices larger than ~1000x1000. Specifically one may generate random eigenvalues and supply those. I don't think anyone is against improving the `rand_XXX` function to have better statistical properties, but they're primarily used for testing and simple trial data at the moment, so their implementations have been good enough so far.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642#issuecomment-905691827:135,simpl,simpler,135,https://qutip.org,https://github.com/qutip/qutip/issues/1642#issuecomment-905691827,2,['simpl'],"['simple', 'simpler']"
Usability,"The main function of the `Options` class is to hold the documentation of the options supported by solver, mostly integrator related ones are an issue. Since sub-packages can add new integration methods, it should be somewhere dynamic that can fetch them at runtime. We can't have them in the description of the function interface directly, but it must be clear from that documentation where to find them.; We can't have them in the documentation of the solver class. It could be in a solver instance, but that too late: needing to initialize a `BrSolver` or `HEOMSolver` just to know which options `bsmesolve` and `heomsolve` support is not user friendly.; The Integrator class is useless for the users: if they want to solve ODE, they should use `scipy.integrate`, for quantum systems evolution, `mesolve` etc. So we should not ask them to look there. `SolverOptions(name)` make it reasonably easy to check the supported options and their default before using the solver. Another approach I see is to fix the integrator when using the functions interface, this way we could properly document the function with all items from both the solver and integrator. When using the class interface, we keep both options separated (and make the choice of integrator it's own keyword):; ```; solver = SeSolver(H, integrator_method='adams', options=solver_options, ode_options=ode_options); solver.options # Solver options only. solver.set_integrator('vern7', ode_options); help(solver.ode_options) # See description of integrator options; ```. That way the function calls is very close to v4 and easy to use, and the class interface give access to new features. ; This also makes `krylovsolve` fit more. Since `method` is used by the solver, not the integrator, it should not be under the `options.ode`, but it seems confusing to have it with the normal options, so having it as an independent parameter could make it clearer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897:355,clear,clear,355,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897,2,['clear'],"['clear', 'clearer']"
Usability,"The mcsolve is Ok. But I did not test it on windows yet.; td_Qobj work fine for the solvers. However, there are probably a few methods/properties that would be useful but I did not think about. If somebody would have the time to try it and send feedback, that would be great.; For now, sesolve and mesolve also accept td_Qobj. I am working, in another branch, to have the stochastic solvers work with it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/774#issuecomment-351799673:245,feedback,feedback,245,https://qutip.org,https://github.com/qutip/qutip/pull/774#issuecomment-351799673,1,['feedback'],['feedback']
Usability,"The new QuTiP solvers now support `solver.step(self, t, args=args)`. which allows manually stepping the state until time `t` with the optional supplied args. I don't think this quite addresses the full feedback possibilities, but I am noting the progress here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-1226363253:202,feedback,feedback,202,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-1226363253,1,['feedback'],['feedback']
Usability,The notebook book would live in here:; https://github.com/qutip/qutip-notebooks/tree/master/examples; We would then link it in here:; https://github.com/qutip/qutip.github.io/blob/master/tutorials.html; I guess in the Basics section. As for the qutip-docs:; It would be good to update functions.rst. This is for the auto-generated API docs. If you are feeling super keen then you could add a guide-measurement.rst in:; https://github.com/qutip/qutip-doc/tree/master/guide; and link it from:; https://github.com/qutip/qutip-doc/blob/master/guide/guide.rst. Barring a few build problems here and there the docs building has been okay recently (I think).; Instructions can be found here:; https://github.com/qutip/qutip-doc/blob/master/README.md,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-547176797:392,guid,guide-measurement,392,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-547176797,4,['guid'],"['guide', 'guide-measurement']"
Usability,The original was #785 which auto-closed when I deleted the branch and rebased to split it into 2. I'm just undoing my branch management sloppiness. . This was about the correlation function supporting bloch-redfield solver.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/884#issuecomment-399298084:107,undo,undoing,107,https://qutip.org,https://github.com/qutip/qutip/pull/884#issuecomment-399298084,1,['undo'],['undoing']
Usability,"The problem is recognising what a true 0 is from a small value. In your example on the new data layer, there will already be exactly 0 items explicitly stored (and `data.add_csr` is going to get faster and smarter in another PR, too) without `tidyup`, but much more concerningly `1e-15 * qutip.rand_herm(5)` will end up in a zero matrix, which is clearly absolutely wrong. The argument from Liouvillian doesn't work here - even before the new data layer, `liouvillian` never called the `tidyup` code because it accessed the `Qobj.data` field directly, rather than used `Qobj`. Since it then goes into `CQobjEvo` in most of the solvers, which also don't touch the `tidyup` code, it doesn't get called. I don't think there's any safe way to know if small values should actually be zero, or if they're just small values. It makes sense that we want to maintain as much sparsity as possible when values are truly zero, but I think having the QuTiP default be to attempt to tidy up after every addition, multiplication and matrix multiplication is quite unsafe, and for people who aren't doing very very sparse calculations, it's actually a slow down.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384:347,clear,clearly,347,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384,1,['clear'],['clearly']
Usability,"The problem seems pretty simple, I think I could take care of it. However, I don't have much experience in collaborative programming, in particular I don't know what the local customs are. (I know how to use git, but I'm not familiar with the layout of the library, what tests should I perform [or even add my own, since this issue wasn't noticed before 5.0.0] etc.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2129#issuecomment-1483294457:25,simpl,simple,25,https://qutip.org,https://github.com/qutip/qutip/issues/2129#issuecomment-1483294457,1,['simpl'],['simple']
Usability,"The problem with OPENMP is that the point where parallel processing begins to have an advantage is platform, and hardware dependent. As such, I have added a simple benchmark routine that calculates a good number of NNZ that a matrix should have for OPENMP to be utilized. This also required me to change the way the qutiprc file is done, i.e. it now uses the standard configparser module. This benchmark is called on first run, or anytime where the qutiprc 'openmp_thresh' flag is missing, or the qutiprc file itself does not exist.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/652#issuecomment-283874454:157,simpl,simple,157,https://qutip.org,https://github.com/qutip/qutip/pull/652#issuecomment-283874454,1,['simpl'],['simple']
Usability,"The progress bar control in now in the options: `mesolve(..., options={'progress_bar': False})`.; Any of `["""", None, False]` will not display the time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2191#issuecomment-1629652084:4,progress bar,progress bar,4,https://qutip.org,https://github.com/qutip/qutip/issues/2191#issuecomment-1629652084,1,['progress bar'],['progress bar']
Usability,"The simplest use case is the circuit simulation, where e.g. single qubit unitaries are multiplied to multiqubit states. For Hamiltonian dynamics I cannot immediately think of an application cause usually you need to sum many terms. Unless we develop a troterrizatiom solver, which is actually quite common, especially for distributed computation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2545#issuecomment-2415282442:4,simpl,simplest,4,https://qutip.org,https://github.com/qutip/qutip/pull/2545#issuecomment-2415282442,1,['simpl'],['simplest']
Usability,"The table is now present https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#accesing-the-state-from-solver. Closing this, but please let me know if I missed something.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538#issuecomment-1345305620:55,guid,guide,55,https://qutip.org,https://github.com/qutip/qutip/issues/1538#issuecomment-1345305620,1,['guid'],['guide']
Usability,"The tests fail because if one defines `f(t, args, k)` and defines `g = partial(f, k=0.5)` then the signature of g is `<Signature (t, args, *, k=5)>`. There will likely be other cases like this (e.g. many decorators will change the signature). I vote that we give up on all the complicated detection of the old syntax and simply ask users to change `f(t, args)` to `f(t, **args)` when they upgrade to QuTiP 5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881:321,simpl,simply,321,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881,1,['simpl'],['simply']
Usability,"There are no test code for progress bars yet.; You will need to create a new test file: `qutip/tests/test_progressbar.py`. The test can be as simple as creating the bar, call `update`, call `finished` and check that the total time is a sensible value.; You could also use pytest to catch print with [capsys](https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html#accessing-captured-output-from-a-test-function) and confirm that something was printed when `update` / `finished` is called.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520:27,progress bar,progress bars,27,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520,2,"['progress bar', 'simpl']","['progress bars', 'simple']"
Usability,"There's a [StackOverflow](http://stackoverflow.com/a/11887885/267841) response that explains the different `distutils.version` parsers. [PEP 440](http://legacy.python.org/dev/peps/pep-0440/) may also be of interest, as it gives a simple grammar for allowable Python version strings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/207#issuecomment-50951305:230,simpl,simple,230,https://qutip.org,https://github.com/qutip/qutip/issues/207#issuecomment-50951305,1,['simpl'],['simple']
Usability,"There's no link, just bad luck. This won't prevent merge - the tests clearly show your change is fine. Unfortunately our test suite isn't perfect, and sometimes it tries to integrate an insanely stiff system or something like that by accident.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050:69,clear,clearly,69,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050,1,['clear'],['clearly']
Usability,"These could be my final modifications before pushing this if all is smooth.; There are some other things that it would be nice to include but it’s best; to wait for the next round as this is already quite a complete library. Shortly I will also upload a bunch of notebooks in my folder with different; physical models studied there and I would be happy to frame them in the; best shape for qutip examples / tutorials if they are not already ok. Some state definitions overlap with state definitions in qutip.states, here; using this new Dicke basis. For the sake of simplicity we thought for now; that it would be best to keep these states bundled in the Piqs model.; Thanks. Il giorno lun 5 mar 2018 alle 19:07 Alexander Pitchford <; notifications@github.com> ha scritto:. > Also, all tests are failing. The one I checked showed:; >; > ImportError: No module named dicke; >; > I assume that this will affect all the builds; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/753#issuecomment-370370268>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AN5ffN6PK_jI4M8IgYNWBk3qKS4OXCtMks5tbQ5ugaJpZM4PgbIo>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-370377840:566,simpl,simplicity,566,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-370377840,1,['simpl'],['simplicity']
Usability,"This appears to already be the document behaviour, see https://qutip.org/docs/latest/apidoc/functions.html#qutip.correlation.correlation_2op_2t:. > tlist: array_like; > list of times for t. tlist must be positive and contain the element 0. **When taking steady-steady; > correlations only one tlist value is necessary, i.e. when t → ∞; here tlist is automatically set, ignoring user input.**. Perhaps the documentation could be made more clear, but I don't think we should change the behaviour without a compelling reason since other QuTiP users may rely on it, and it seems sensible to return only a single result in the steady state case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1566#issuecomment-857615073:438,clear,clear,438,https://qutip.org,https://github.com/qutip/qutip/issues/1566#issuecomment-857615073,1,['clear'],['clear']
Usability,"This can - see e.g. Numpy that uses the same licence. #1405 would add its additional copyright to the top of the file. This is actually _more_ useful in that case - it's far clearer that that code is under different licence conditions. That said, I'm really not certain about accepting #1405 in its current form. It's not using the data-layer correctly at all, and if we were to include it, we'd really want to do something like that in a more structured way in core QuTiP. Really it should be a properly dispatched implementation of `einsum`, but I think this should come in as part of a much larger discussion on how to handle tensor networks completely; to have it be nice and ergonomic in all cases, I think this will come in at the same time or after the introduction of new dimensions objects. I'm also very wary of introducing code to QuTiP which is licensed by a different holder. I can only imagine that that will really give us problems down the line - how long would NASA own the copyright on that code, for example? Could we modify it? After how many modifications is it no longer NASA's? We wouldn't have control over anything like that, and I think it's probably more hassle than it's worth on our side.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864022506:174,clear,clearer,174,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864022506,1,['clear'],['clearer']
Usability,"This code https://gist.github.com/nathanshammah/f96f6c1db5c323243a4729467cb7351f; Also, let me mention that the progress bar was giving some errors in qutip 4.3.1 and now it does not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1024#issuecomment-503669133:112,progress bar,progress bar,112,https://qutip.org,https://github.com/qutip/qutip/pull/1024#issuecomment-503669133,1,['progress bar'],['progress bar']
Usability,"This error comes from the integration algorithm.; Take a differential equation like dy/dt = -i*y.; With a simple method like euler: ; y(t+dt) = y(t) + f' dt = y(1-i*dt); So the norm increase exponentially *(1+dt**2) at each iteration, not somewhat randomly.; The default method we use is ""adams"" from scipy's solver, which is a lot better than euler, but still have a bias. We also stop the solver for re-normalization of the state from time to time, introducing another bias.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708:106,simpl,simple,106,https://qutip.org,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708,1,['simpl'],['simple']
Usability,This fails because time only contain `0.5`. ; You probably meant `time.append(0.5*i)`. The error message is a catch-all for failure in scipy solver and certainly not clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905:166,clear,clear,166,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905,1,['clear'],['clear']
Usability,"This is a good, apparently simple issue to address within the upcoming GSOC project on `qip`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/819#issuecomment-489420169:27,simpl,simple,27,https://qutip.org,https://github.com/qutip/qutip/issues/819#issuecomment-489420169,1,['simpl'],['simple']
Usability,"This is a possibility.. but I think we might be heading into a big mess if we are to autodetect terminal capabilities and different kinds of environment. Whatever we come up with might break if the behavior of any of environments change, and it might be time consuming to maintain. I think I would rather have a simple progressbar that works ok everywhere as default, and if a user wants to use something more fancy it would be easy to do that using the progress_bar keyword argument.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63399345:312,simpl,simple,312,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63399345,1,['simpl'],['simple']
Usability,"This is a pretty simple addition that does not affect any other part of the library, so I am marking merge ready.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/406#issuecomment-165182413:17,simpl,simple,17,https://qutip.org,https://github.com/qutip/qutip/pull/406#issuecomment-165182413,1,['simpl'],['simple']
Usability,This is a pretty simple fix.; Please can someone check and merge.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/852#issuecomment-381172076:17,simpl,simple,17,https://qutip.org,https://github.com/qutip/qutip/pull/852#issuecomment-381172076,1,['simpl'],['simple']
Usability,"This is a style question. It is generally considered better python style to write code as explicit as possible, as explained for example [here](http://docs.python-guide.org/en/latest/writing/style/) in The Hitchhiker's guide to python. Now,. ```; mycomposition = composite(super,spre(O)*spost(O.dag()); ```. is much more explicit (and hence better style in my opinion), than. ```; mycomposition = composite(super,O); ```. If I'm not very familiar with qutip and I am reading the latter as part of some code, I could equally well think it means a number of different things, whereas the first use-case leaves very little room for confusion. Maybe I'm being a bit pedantic now, for this particular example, but I think it's a good idea to have discussions on style in general, and long term the code will benefit from being explicit, and also letting the user handle exceptions as much as possible. Anyway, we can agree or disagree on style, but you raise an interesting point regarding `dims`. I have actually always found `dims` a bit ""user unfriendly"". Perhaps it would be fruitful to have a discussion about the future of the `Qobj` class at some point. Not saying this is something that should be changed soon, or even at all, and also not suggesting to have the discussion in this thread.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58068961:163,guid,guide,163,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58068961,2,['guid'],['guide']
Usability,This is because of the automatic tidy up of any matrix entries smaller than 1.e-12. You can turn it off by ``qutip.settings.auto_tidyup=False``. Or set this threshold to a different number (http://qutip.org/docs/latest/guide/guide-settings.html). This behaviour does seem a bit confusing though...,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1247#issuecomment-623299478:219,guid,guide,219,https://qutip.org,https://github.com/qutip/qutip/issues/1247#issuecomment-623299478,2,['guid'],"['guide', 'guide-settings']"
Usability,"This is something I can do or help someone with guidance. We simply need to do the following: ; - add intersphinx as extension in the `conf.py` file; - find the functions / objects we use from other libraries and add to `conf.py` such libraries; - change the cited functions classes with the correct reference, e.g. ```:class:`qiskit.QuantumCircuit` ```; The `krotov` library by @goerz shows how to do it, see [here](https://github.com/qucontrol/krotov/blob/0e8a4dbe81bd3986dbc5c4464d49131727fd57ef/docs/conf.py). ; The tilde `~` can be used to cut down the prefix of the cited module/function/class/method, e.g., from ```:class:`qiskit.QuantumCircuit` ``` to ```:class:`~qiskit.QuantumCircuit` ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1528#issuecomment-619395402:48,guid,guidance,48,https://qutip.org,https://github.com/qutip/qutip/issues/1528#issuecomment-619395402,2,"['guid', 'simpl']","['guidance', 'simply']"
Usability,"This is the same PR as #1328, but resubmitted so the commit history and files changed are simplified after the merging of #1296.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332#issuecomment-665737386:90,simpl,simplified,90,https://qutip.org,https://github.com/qutip/qutip/pull/1332#issuecomment-665737386,1,['simpl'],['simplified']
Usability,"This issue has a two-fold interest: decreasing test time in general and expand the platforms through which QuTiP is available. . What is the reason it takes so long on Nix? QuTiP, in the [latest PR](https://travis-ci.org/qutip/qutip/builds/628865624?utm_source=github_status&utm_medium=notification), takes on average 20 minutes to run its tests on a given platform. Much of this I think is due to the Cython configurations, indeed the no-cython option takes only 13 minutes. My first suggestion would be to try without Cython if things speed up, from those requirements (@Ericgig set that up and I am not knowledgeable about it). . From your PR on `nixpkgs` do you build on Travis CI or a similar cloud? If you could give a list of time taken by the different tests that would help. . The idea of a subset of tests is interesting (essential tests vs. thorough tests), in general; for example thorough tests could be done only in production and a lighter version could be called with `qutip.testing.run()`. Although, in specific, it is not clear to me how to triage which tests to skip. I would be glad to have the others opinion on this too (pinged them as assignees).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700:1040,clear,clear,1040,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700,1,['clear'],['clear']
Usability,"This issue is open since 2015 and no one did anything about it mostly because there are no use case for adding list support for most of those function and removing them from `qeye` may break something. What I would see as an improvement: if `N` could be the dimension of the resulting object.; `qeye(dims).dims = [dims,dims]`. This would be clear for `qeye` and `qzero` (`zero_oper` does not exist anymore), since only the dimension of the resulting object is affected. For `create`, etc. hiding the tensor product would be hiding the physic, so it would be better to leave them as is. For `basis`, this could also be nice. For the rule: `basis([2,2], [0, 1])` is ok, but `basis(2, [0, 1])` is confusing, I would not accept this format.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/363#issuecomment-575770270:341,clear,clear,341,https://qutip.org,https://github.com/qutip/qutip/issues/363#issuecomment-575770270,1,['clear'],['clear']
Usability,"This looks great and I think it will help a lot in cleanly implementing more complex solvers light the HEOMSolver. I have two suggestions for future improvements:. - I'd like to see `.options = ...` become a method because it now modifies the existing integrator and `.options(...)` would both make that clearer and more flexible. E.g. with a method we could allow both `.options(new_options)` to completely override the options and `.options(key=new_value)` to update just one setting. - The first call to `result.add(t, X)` uses `X = state0` but state0 could be almost anything the user passed in (and not necessarily the canonical form returned by `_restore_state`). It would be better if either there was a separate method to override to convert `state0` into the canonical form, or `result.add(t, X)` was called initially with `X = _restore_state(_data0)`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616:304,clear,clearer,304,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616,1,['clear'],['clearer']
Usability,"This won't be easy to fix, if the compilation is in the task, `parfor` cannot know about it to wait for it.; The simplest would be to have only the main process able to compile. This code will still raise an error, but the solution would be in the error message.; Otherwise communication between process would be needed and this can get tricky. Also `parfor` will be removed. It says in its [documentation](https://qutip.org/docs/latest/apidoc/functions.html#qutip.parallel.parfor) to use `parallel_map` instead since v3.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433:113,simpl,simplest,113,https://qutip.org,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433,1,['simpl'],['simplest']
Usability,"To be honest, I'm not 100% sure myself since it's just turned into a string and cythonized anyways. When it was initially added, I had assumed the purpose was because occasionally a function doesn't work well in the string format or is slow in the list-function format. Though I'm working on adding time-dependence to the Bloch Redfield solver by using piece-wise constant Liouvillians and there I guess the format makes a bit more sense intuitively, PR #525.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-242163512:438,intuit,intuitively,438,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-242163512,1,['intuit'],['intuitively']
Usability,"To try keep things simple for me, I only have the base environment which VS code activates before any code is run.; The text I have in that box is `Python 3.8.8 64-bit (conda)`. I realise I'm missing the `('base':conda)` as per https://code.visualstudio.com/docs/python/python-tutorial however I havent yet found why this is the case. I am continuing to look as I feel this might be the crux of the problem. As another work around I found that (after updating matplotlib to my current version) I can get some of the expected behaviour from b.show() within VS code by adding the `plt.pause(interval)` command after b.show() (as descibed previously however now I can actually render someting), where the interval is how many seconds I want to view the Bloch sphere for. The b.save() function also works as expected so I can use that as a workaround for now at least. Some more odd behaviour - likely caused by all the updating an reinstalling trying to fix things - is that the plt.show() no longer works as described before. Not a massive loss as I've gained other functionality and I am still able to render other graphs (so matplotlib isnt broken) and the bare 3d axes have stopped appearing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616#issuecomment-883527200:19,simpl,simple,19,https://qutip.org,https://github.com/qutip/qutip/issues/1616#issuecomment-883527200,2,"['pause', 'simpl']","['pause', 'simple']"
Usability,"Updates:; - I have switched the order of `state` and `op`/`ops`. ; - There is now an optional `targets` arguments on each of the measurement functions to enable applying `ops` on particular; `qubits` although this is inherently delicate, especially when dealing with non-qubit type dimensions. Right now, it's restricted to `qubit` style expansions (in terms of dimensions). This indicated in the docstring. I will add some more information on how to use this in the user guide but I think it works best for more simpler use cases !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-648548980:472,guid,guide,472,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-648548980,2,"['guid', 'simpl']","['guide', 'simpler']"
Usability,"We can in theory drop that requirement for users - it was there in the immediate aftermath of the Numpy 1.20 release, which broke C-ABI compatibility with previous versions, and we had a couple of problems with people building against Numpy 1.20 but trying to run against a prior version. Our CI and release versions will still all need to be built against Numpy 1.16 (or our minimum supported runtime Numpy) as the lowest common denominator until we drop support for all Numpy releases before 1.20, but we enforce that in our build pipelines anyway. Just to be clear (though I think you knew this):. > Can qutip be updated to run with current versions of Numpy?. QuTiP already runs correctly against Numpy 1.20 and Numpy 1.21, and its runtime requirements on Numpy are uncapped. It's just building from source that'll fail, and that was originally a sort of ""fail-safe"" mechanism. Also `pip install -e .` should automatically do build isolation for you, including installing all the build requirements into a temporary virtual environment, so it should have just worked here. Calling `setup.py develop` directly is kind of out-dated now, though it can still be useful if you're planning on doing Cython development; `pip`'s isolation actually usually means that the Cython compiler can't detect changes any more, so it always needs to rebuild everything. `setup.py develop`, because of its much lower-level status, leaves the source and extension-library files well enough untouched that it can do incremental compilation. If you're not doing Cython development (only Python), `pip install -e .` is much better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497:562,clear,clear,562,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497,1,['clear'],['clear']
Usability,We can potentially work-around this behavior by including a plt.pause() statement right after the show statement in the bloch.show() code. It is a hacky way to display the figure and it will keep displaying as long as the code runs. This will ensure that you do not need to use plt.show().,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1182#issuecomment-593700465:64,pause,pause,64,https://qutip.org,https://github.com/qutip/qutip/issues/1182#issuecomment-593700465,1,['pause'],['pause']
Usability,"We don't need to add `br_solver` as a correlation option, I think we can already do it by passing a bloch redfield tensor as `H` and using `solver=""me""`. ; The plan for v5 is a simple cleaning as it still calls `cython_build_cleanup` and `rhs_clear` which don't do anything anymore.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/884#issuecomment-983975046:177,simpl,simple,177,https://qutip.org,https://github.com/qutip/qutip/pull/884#issuecomment-983975046,1,['simpl'],['simple']
Usability,"We have made some progress! But I also have some questions for the experts here.; * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?; * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; * The _run_one_traj function now exists 3 times, with practically identical code:; https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. Side note: due to a WSL bug, some of my commit timestamps are messed up. Because of that, some commits seem to be shown out of order here...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901:180,guid,guide,180,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901,1,['guid'],['guide']
Usability,"We now have apidoc entries, guide pages and tutorials for stochastic.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1518#issuecomment-2070160992:28,guid,guide,28,https://qutip.org,https://github.com/qutip/qutip/issues/1518#issuecomment-2070160992,1,['guid'],['guide']
Usability,"We probably shouldn't mutate the given `Options` object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. That said, if we're going to do something different to what the user requested we should at least emit a warning. There's also interplay with `store_final_state` here too; it's questionable technique to do `e_ops=None, store_final_state=True` with a `tlist` with more than two elements, but probably people who aren't familiar with `nsteps` will do something like that, and it seems a bit picky to prevent/warn on that when the intention seems clear. I think that the current behaviour doesn't take this case into account when falling back - it'll store all states, which in the 4.x branch is a fairly major time sink (but much much faster in 5.0). What behaviour would you expect for your use case? I'd probably do something like:; 1. if we change the `Options`, we have to clone it first to prevent leaking our mutations; 2. if we're not going to save anything, we should warn the user but then do it anyway - maybe their time-dependence functions leak state, and they're just doing something weird with that; 3. `store_final_state` should count as ""storing something"", so no need to set `store_states` if `store_final_states=True` and there are no `e_ops`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824:687,clear,clear,687,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824,1,['clear'],['clear']
Usability,"Well, I am using this for my code. Doesn't seem to be a very big change anyway as it doesn't affect existing code or introduce a high computational cost. (3 if's, a new list and a new item in an existing list). If others agree then I will open a PR. I am not a QIP expert myself, :). But, I am learning on the go. Btw, who wrote the qip module ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/614#issuecomment-270581597:294,learn,learning,294,https://qutip.org,https://github.com/qutip/qutip/issues/614#issuecomment-270581597,1,['learn'],['learning']
Usability,"Well, the new progress bar is still around if one wants to use it so I think this is the best we can do right now. So I'm merging this then.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/256#issuecomment-63596921:14,progress bar,progress bar,14,https://qutip.org,https://github.com/qutip/qutip/pull/256#issuecomment-63596921,1,['progress bar'],['progress bar']
Usability,"What do you think is more efficient than doing; ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```; ?. I'm saying that to do each state independently, `mesolve` and `sesolve` have to independently integrate each state, so even if we added this functionality into those functions directly, it would be little more than that loop I just wrote if you have used the tools I described in the first comment. If you want the entire system propagator, `qutip.propagator` can calculate that for you. Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple, but if you have very specific domain knowledge of your system, you often will be able to write an integrator which is faster for your cases, rather than the full general-purposes ones in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465:645,learn,learning,645,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465,1,['learn'],['learning']
Usability,"What if we rethink the approach from the beginning:. ```; QobjEvo([op, func], args={""state"": Solver.StateFeedback(default=psi0)}); QobjEvo([op, func], args={""e1"": SESolver.ExpectFeedback(e_op)}); QobjEvo([op, func], args={""state"": MESolver.StateFeedback(raw_data=True)}); QobjEvo([op, func], args={""collapse"": MCSolver.CollapseFeedback()}); QobjEvo([op, func], args={""W"": SMESolver.WeinerFeedback()}); ```; And we remove the `add_feedback` method. This makes clear that the feedback comes from the solver and used by the QobjEvo.; What is supported by which solver and what has the role to document it is clear. This has the bonus of removing the need for default in many case.; Also, since the feedback creation is a function call, we can add options such as the state basis for floquet or bloch-redfield.; Lastly, updating args can switch feedback on/off, could be useful to debug.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1839382709:459,clear,clear,459,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1839382709,5,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:143,clear,clearer,143,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,2,"['clear', 'simpl']","['clearer', 'simple']"
Usability,"When no options and no e_ops are given, the solver should store the states, otherwise nothing is done. Since the default value si `store_states=False`, the solver don't know that the value was explicitly given or the default. We should have `store_states=None` as the default. This allow us to respect an explicit False while keeping the expected behaviour when no options are given. I will make this change in the v5 solver (And make sure no Options are modified). `tlist` was never meant to control time dependence, it represent the time at which the solver look at the state (+ first and last times). I added array support as coefficient as a shortcut to Cubic_Spline and I used the already existing tlist, but this is clearly a limitation and in v5 they will be controlled independently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775976194:722,clear,clearly,722,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775976194,1,['clear'],['clearly']
Usability,"While you could probably make it work but manually updating the state at each times of `tlist` is certainly not a usage I planned for... If you could use `mesolve` instead of `mcsolve` it would be simpler:; ```; solver = MeSolver(...); solver.start(rho0, t0); for t in tlist[1:]:; rho_t = solver.step(t); solver.start(rho_t @ projection, t); ```. With `mcsolve`, if you use it like this, it would normalize the state at each step possibly breaking the montecarlo part of the evolution. The way I would do it is by making a child class overwriting the step of `McTrajectorySolver`:. ```; class MyMcTrajectorySolver(McTrajectorySolver):; def _step(self, t):; super()._step(t); _, raw_state = self._integrator.get_state() # state not normalized; new_state = _data.matmul(projector, state) # projector is a Data object: Qobj.data; self._integrator.set_state(t, new_state); return _data.mul(new_state, 1 / _data.norm.l2(new_state)). class MyMcSolver(McSolver):; _traj_solver_class = MyMcTrajectorySolver; ```; If done this way, you should be able to use the normal solver interface. This projection should be done once per call of `step` or per time in `tlist`, but I would confirm it before running simulation. `step` does not return the `collapse` part of the results. So if a collapse happen, it will not output it nor the time at which it happen. But the state evolution is done normally, collapse will happen as expected. To get them, you will need to fetch them with `solver.traj_solvers[i].collapse`. Feel free to comment on the new solver interface. If you think that something is missing or confusing, now is a good time to tell us. We should come back on this PR in April.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1710#issuecomment-1068480013:197,simpl,simpler,197,https://qutip.org,https://github.com/qutip/qutip/pull/1710#issuecomment-1068480013,1,['simpl'],['simpler']
Usability,"Yeah, `qutip-qip` is a much easier build and installation process because you don't need to be concerned about compiler infrastructure, ABI compatibility or stuff like that. In addition in that particular test run, there were three individual calls to change the installed packages, which meant plenty of space for stuff to go wrong. In this case, I think it was a strange interaction between the old `.travis.yml` specifically installing `numpy` and all other dependencies from `conda-forge`, without the channel being in the defaults list. Since `conda uninstall` doesn't specify an additional channel, the dependency calculator considers `defaults` to be higher priority, so it sets various packages to arbitrary allowed ones from `defaults`, which with `openblas` installed like this meant numpy `1.14`. That's my guess at least - it's a pretty weird set up circumstances, but the new `.travis.yml` file that's already in `master` is far simpler about the build process.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609:942,simpl,simpler,942,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609,1,['simpl'],['simpler']
Usability,"Yeah, it's ready. It's not actually completely clear when `propagator` outperforms `mesolve`. In the future I will likely completely change the algorithm based on work done by @swhalen who has written a faster implementation..",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-239598753:47,clear,clear,47,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-239598753,1,['clear'],['clear']
Usability,"Yeah, this is just one of those silly things caused by ImageMagick choosing a _very_ generic name and then getting burned (hence the swap to `magick`...). Probably the best thing to do is to try and run `convert` once at discovery and to see what happens. If you run `convert -version` on an IM6 install, does it output a string that looks like; > Version: ImageMagick 6.blahblahblah; or something similar?. If so, try this patch: [check_convert.txt](https://github.com/qutip/qutip/files/4397692/check_convert.txt). It rearranged the functions a little for a more logical order (I'll rebase the PR before merge), but the main change is that it now tests the output of `convert -version` to see if it contains the substring `imagemagick` (case insensitive). The reason to do this now is because if we allowed the error to propagate later, we'd have to check it every time and it would mean we'd have to pass through the ""special cases"" more frequently, and it would make the core logic more complex. Also, we _could_ catch a subprocess `CalledProcessError` later (say if one of the other commands were to fail for some reason) and re-raise our own, but to be honest I didn't want to over-engineer what ought to have been a relatively simple PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526:1233,simpl,simple,1233,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526,1,['simpl'],['simple']
Usability,Yes I think it is more intuitive to interpret the given vectors as vectors with cartesian coordinates. I just modified Bloch3d to behave in the same way.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/38#issuecomment-22305995:23,intuit,intuitive,23,https://qutip.org,https://github.com/qutip/qutip/pull/38#issuecomment-22305995,1,['intuit'],['intuitive']
Usability,"Yes there is nothing in the code for this right now, feel free to propose your solution. @CaineArdayfio, there is no official assignment. If, as a user, you see something that is missing, you can just propose a solution. In general, parts of Qutip that need some attention and nobody is working on:; - Documentation and notebooks are not always up to date.; - The lattice submodule is new and we have little feedback. It could be improved greatly in both easiness to use and versatility.; - Making it work better on windows.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/453#issuecomment-609449627:408,feedback,feedback,408,https://qutip.org,https://github.com/qutip/qutip/issues/453#issuecomment-609449627,1,['feedback'],['feedback']
Usability,"Yes, I could not get the functions in libcpp.complex to work with something simple like:; ```; cimport cython; from libcpp.complex cimport conj. def myconj(double complex a):; cdef double complex b. b = conj(a); return b; ```. however this did work:; ```; cimport cython; cdef extern from ""complex"":; double complex conj(double complex x). def myconj(double complex a):; cdef double complex b. b = conj(a); return b; ```. Might be something to do with the type conversion mentioned in:; http://stackoverflow.com/questions/36732779/complex-conversion-to-python-complex",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/647#issuecomment-279524478:76,simpl,simple,76,https://qutip.org,https://github.com/qutip/qutip/issues/647#issuecomment-279524478,1,['simpl'],['simple']
Usability,"Yes, It's fine as a guideline. I've been discussing with some people a better physical example to highlight krylov strong points, but I'll do that as a follow up PR once the basic one is working.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1123535232:20,guid,guideline,20,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1123535232,1,['guid'],['guideline']
Usability,"Yes, but the documention is missing a table making the explication confusing:; http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#accesing-the-state-from-solver",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-510894379:108,guid,guide,108,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-510894379,1,['guid'],['guide']
Usability,"Yes, it would be easier that way, master and dev.major split a while ago. The bloch.py file have not been touched at all so it should be simple.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1315#issuecomment-669995971:137,simpl,simple,137,https://qutip.org,https://github.com/qutip/qutip/pull/1315#issuecomment-669995971,1,['simpl'],['simple']
Usability,"Yes, something very simple would work, I guess. . ```; from numpy.testing import assert_,assert_almost_equal; assert_(molmer_sorensen(0)==tensor(qeye(2),qeye(2))); assert_almost_equal(molmer_sorensen(np.pi/2).full(),(np.array([[0.70710678+0.j, 0.+0.j,0. +0.j, 0.-0.70710678j],; [0. +0.j , 0.70710678+0.j,0.-0.70710678j, 0.+0.j],; [0. +0.j , 0. -0.70710678j,0.70710678+0.j, 0. +0.j],; [0.-0.70710678j, 0. +0.j , 0.+0.j , 0.70710678+0.j ]]))); ```; and something for N>3 if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1028#issuecomment-505109850:20,simpl,simple,20,https://qutip.org,https://github.com/qutip/qutip/pull/1028#issuecomment-505109850,1,['simpl'],['simple']
Usability,"Yes, the QT stuff is bit troublesome.. and it is not a core functionality in qutip. The about() and demos() does not do much harm, so deprecate them in next release we can drop them alltogether in the following release. The progressbar is a bigger problem, because (if I got this right) it is partly due to the event-loop tricks we need to do to get the qt progressbar to work we have problems with catching keyboardinterrupt properly in for example mcsolve, and this makes it difficult to abort a calculation cleanly. This is big problem in IPython notebooks, where one cannot hit Ctrl-C and Ctrl-Z until process is stopped.. Factoring the qt progressbar out of mcsolve should therefore be a priority, and the simplest way to do this would obviously be to drop the qt progressbar function completely... I'll add a note about this in the roadmap wiki and closing this issue now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/19#issuecomment-18917941:711,simpl,simplest,711,https://qutip.org,https://github.com/qutip/qutip/issues/19#issuecomment-18917941,1,['simpl'],['simplest']
Usability,"Yes, the operator is acting like it should. When working with ; oscillators, you need to truncate at some point, and so issues similar ; to the one you raise are part of the territory. However, if one wants ; to be self-consistent, then you start with truncated operators, and then ; build all other operators / states and whatnot from there. -P. > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 18:08; >; > OK, if it's intended then there's nothing to change in the code. But I ; > think it would be helpful to document this in a clearer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.e",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284923:546,clear,clearer,546,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284923,1,['clear'],['clearer']
Usability,"Yes, we will add a reference to the your paper with the TLS when I submit a; TLS notebook example.; I think I will just make a simple example for now. And then add the more; involved one that compares the RC method later. Thanks for the explanation on Matsubara terms (I might have to spelling to; correct :). I did not realise they were only referred to as such in the; DL spectral density. I will make some corrections now. On 10 March 2016 at 18:30, nwlambert notifications@github.com wrote:. > This looks great!; > ; > The references are sufficient I guess. We can add some more in the example; > notebook?; > ; > One minor terminology point in the explanation: for the Drude-Lorentz bath; > the correlation functions can be exactly analytically expressed as an; > infinite sum of exponentials which depend on the temperature, and these are; > called the Matsubara terms or Matsubara frequencies.; > ; > In general, when not dealing with a Drude-Lorentz bath, or something; > similar, we have to approximate the correlation functions by numerically; > fitting them to exponentials, but in that case they don't have any; > particular name I guess. When we get around to adding it as an option, lets; > call them Fruchtman terms, as it was Amir Fruchtman who told me to try; > doing it that way!; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/pull/455#issuecomment-194752885.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194776953:127,simpl,simple,127,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194776953,1,['simpl'],['simple']
Usability,"Yes. That makes it simpler to add a new gate again and again if you have it; defined somewhere in your code. Instead of writing all the keyword; arguments. On 03-Jan-2017 1:50 PM, ""Alexander Pitchford"" <notifications@github.com>; wrote:. > Sounds like a good idea to me.; > You mean check if the first arg is a Gate, if so then no need to create; > one, just add it to the circuit; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/610#issuecomment-270051834>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBPQHUatbpFYNG-lis-eCIKx1URIhks5rOdN9gaJpZM4LY-mP>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/610#issuecomment-270065494:19,simpl,simpler,19,https://qutip.org,https://github.com/qutip/qutip/issues/610#issuecomment-270065494,1,['simpl'],['simpler']
Usability,"You are measuring the expectation of sigmax, if you measure the expectation value of sigmaz, or the population, you will not observe such a big oscillation but very small oscillations. Not sure what you want to achieve, but your detuning is negligibly small compared to the frequency. It has little effect. Also I'm not sure if there is a typo `v_0` and `drive_detuning` seems to have the unit of frequency, and 2*pi* frequency. You have a time-independent Hamiltonian, so if you want to compute the ZZ interaction, you can simply diagonalize the matrix and see if you have a ZZ coupling term.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2549#issuecomment-2449988908:524,simpl,simply,524,https://qutip.org,https://github.com/qutip/qutip/issues/2549#issuecomment-2449988908,1,['simpl'],['simply']
Usability,"You can make two pull requests: ; 1. You could add this information in the docstring of the `wigner` functions here in `qutip/qutip`, ; so that it appears here http://qutip.org/docs/latest/modules/qutip/wigner.html; 2. PR to to [`qutip/qutip-doc`]( https://github.com/qutip/qutip-doc) http://qutip.org/docs/latest/guide/guide-visualization.html#quasi-probability-distributions; by modifying the file `guide/guide-visualization.rst`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1148#issuecomment-571526904:314,guid,guide,314,https://qutip.org,https://github.com/qutip/qutip/issues/1148#issuecomment-571526904,4,['guid'],"['guide', 'guide-visualization']"
Usability,"You can use the four-operator correlation function, `correlation_4op_1t`. In this specific case you can take only the tau= 0 result. [`correlation.coherence_function_g2`](http://qutip.org/docs/latest/guide/guide-correlation.html#example-second-order-optical-coherence-function).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/921#issuecomment-464117312:200,guid,guide,200,https://qutip.org,https://github.com/qutip/qutip/issues/921#issuecomment-464117312,2,['guid'],"['guide', 'guide-correlation']"
Usability,"You do as you wish, but I much prefer when you submit things via pull requests rather than pushing directly to master, because it gives an opportunity to give feedback or at least being aware of what is happening before it lands in master. Also travis tests is a good way of making sure that everything is in a good state before merged. However, this is just my preference, and if you prefer pushing into master you can go ahead and do that of course.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221#issuecomment-53840086:159,feedback,feedback,159,https://qutip.org,https://github.com/qutip/qutip/pull/221#issuecomment-53840086,1,['feedback'],['feedback']
Usability,"You have a couple of ways of going about this. The simplest is to use the callback form of `e_ops` - you make a single function which looks like; ```python; def e_op(t, state):; # [...]; return expectation; ```; where `t` is the time and `state` is a `Qobj`. You can return whatever you like here, really, so you can return a tuple of values if you want to track more than one. If you do this, then you do; ```python; result = qutip.sesolve(H, psi0, times, e_ops=e_op); ```; and `result.expect` is a list of the same length as `times`, where `result.expect[k]` is the output of your function at a time `times[k]` (note that this is a slightly different output format to the normal method). Alternatively, you can do the calculation yourself without too much difficulty if your observables can be put in the form `A(t) = sum_k f_k(t) A_k`, like your example here. Because the expectation is a linear operation `expect(A(t), psi(t)) = sum_k f_k(t) expect(A_k, psi(t))`, so you can pass the list of `A_k` to `sesolve` and then just calculate the time-dependent coefficients yourself afterwards and add them up. This will generally be faster than the previous method, but it's more complicated to do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1364#issuecomment-699652426:51,simpl,simplest,51,https://qutip.org,https://github.com/qutip/qutip/issues/1364#issuecomment-699652426,1,['simpl'],['simplest']
Usability,"You should take care of the fact that both `H` and `rho0` are allowed to be superoperators as well. `H` can be a Liouvillian, and `rho0` can be a superoperator to allow for the type of situation mentioned in #384. If one of the two, but not both, are supers, your simple test will fail. . We should fix the docstring of `mesolve` so that it mentions that rho0 can be a super.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/481#issuecomment-222396968:264,simpl,simple,264,https://qutip.org,https://github.com/qutip/qutip/pull/481#issuecomment-222396968,1,['simpl'],['simple']
Usability,"You simple need to create a function starting with `test_` that use the progress bar. Ideally you would use it in a way that ensure all lines of code are used at least once. Then if there is an error in the code, python will raise an error and the test will fail. There should be some tutorials for pytest on the web, writing a step per step guide on making tests is more work than making the tests themselves so please have mercy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1478014084:4,simpl,simple,4,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1478014084,3,"['guid', 'progress bar', 'simpl']","['guide', 'progress bar', 'simple']"
Usability,"You'll find it easier installing from conda-forge, since we distribute binary releases there: see the [installation guide](http://qutip.org/docs/latest/installation.html) here. If you want to install from source using `pip`, you need to configure your C++ development environment correctly - you'll probably need to enable the XCode command-line tools ([see e.g. this](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577:116,guid,guide,116,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577,1,['guid'],['guide']
Usability,"You're welcome! I've used `qutip` a lot throughout my PhD, so it seems fair that I'd contribute back to development. While I'm still getting used to the code base, I'm quite happy to do some ""boring"" software engineering-y maintenance bits, and plus, this helps me learn `pytest` a lot better. This PR can be merged whenever if you're happy with the changes - I'll open a new one if/when I convert more files.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-586622667:265,learn,learn,265,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-586622667,1,['learn'],['learn']
Usability,Your welcome and thanks for looking into this. I understand that there are functionality considerations to be made. Perhaps a simple assertion check would strike the right balance -- giving the functionality you want while avoiding the danger of faulty assumptions.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17175299:126,simpl,simple,126,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17175299,1,['simpl'],['simple']
Usability,[![Coverage Status](https://coveralls.io/builds/40340740/badge)](https://coveralls.io/builds/40340740). Coverage increased (+0.004%) to 64.95% when pulling **51f8f2732253c7b89cd30afc4c0101760342db80 on LaurentAjdnik:guide-states-typo** into **b836829f7c5389185b676eed7c5f801613689f9f on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1567#issuecomment-855433303:216,guid,guide-states-typo,216,https://qutip.org,https://github.com/qutip/qutip/pull/1567#issuecomment-855433303,1,['guid'],['guide-states-typo']
Usability,[![Coverage Status](https://coveralls.io/builds/42999730/badge)](https://coveralls.io/builds/42999730). Coverage decreased (-0.003%) to 64.878% when pulling **f76005dba12f4e8f5840e4469aacbafb5a5ec204 on hodgestar:simpler-kwfunc** into **f8ed1be97946171ae8ba9242673cf2674430da56 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894223136:213,simpl,simpler-kwfunc,213,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894223136,1,['simpl'],['simpler-kwfunc']
Usability,[![Coverage Status](https://coveralls.io/builds/43080503/badge)](https://coveralls.io/builds/43080503). Coverage increased (+0.004%) to 65.871% when pulling **a377949b2d459876aebac0e60f494924566f7453 on hodgestar:feature/update-floquet-guide-fesolve-call** into **9b235c48217fbc9965f993757b0819ebf8ee1f16 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1675#issuecomment-927639215:236,guid,guide-fesolve-call,236,https://qutip.org,https://github.com/qutip/qutip/pull/1675#issuecomment-927639215,1,['guid'],['guide-fesolve-call']
Usability,[![Coverage Status](https://coveralls.io/builds/45690186/badge)](https://coveralls.io/builds/45690186). Coverage increased (+0.05%) to 68.312% when pulling **24ef99d8392bf5c88e5ceccac26ac3dac18e7249 on anna-naden:guide-dynamics-intro** into **52d01da181a21b810c3407812c670f35fdc647e8 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1761#issuecomment-1014788646:213,guid,guide-dynamics-intro,213,https://qutip.org,https://github.com/qutip/qutip/pull/1761#issuecomment-1014788646,1,['guid'],['guide-dynamics-intro']
Usability,[![Coverage Status](https://coveralls.io/builds/45761775/badge)](https://coveralls.io/builds/45761775). Coverage increased (+0.03%) to 68.324% when pulling **59adcd370f89dda99afc1efb4eb33452522fe3d6 on anna-naden:guide-dynamics-data** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1773#issuecomment-1016783921:213,guid,guide-dynamics-data,213,https://qutip.org,https://github.com/qutip/qutip/pull/1773#issuecomment-1016783921,1,['guid'],['guide-dynamics-data']
Usability,[![Coverage Status](https://coveralls.io/builds/45761876/badge)](https://coveralls.io/builds/45761876). Coverage increased (+0.04%) to 68.336% when pulling **82bc31a6417feb578e904d1087f46eb095d18658 on anna-naden:guide-basics2** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1768#issuecomment-1016782971:213,guid,guide-,213,https://qutip.org,https://github.com/qutip/qutip/pull/1768#issuecomment-1016782971,1,['guid'],['guide-']
Usability,[![Coverage Status](https://coveralls.io/builds/45761898/badge)](https://coveralls.io/builds/45761898). Coverage increased (+0.02%) to 68.32% when pulling **6cd3b626ff1470cbb8e0073815f3a8d4c2d9d31f on anna-naden:guide-dynamics-intro2** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1775#issuecomment-1016784522:212,guid,guide-dynamics-,212,https://qutip.org,https://github.com/qutip/qutip/pull/1775#issuecomment-1016784522,1,['guid'],['guide-dynamics-']
Usability,[![Coverage Status](https://coveralls.io/builds/45762014/badge)](https://coveralls.io/builds/45762014). Coverage decreased (-0.008%) to 68.291% when pulling **4aa3ff0524812c04b5520c01d64a3c6bcaeef476 on anna-naden:guide-states2** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1771#issuecomment-1016792190:214,guid,guide-,214,https://qutip.org,https://github.com/qutip/qutip/pull/1771#issuecomment-1016792190,1,['guid'],['guide-']
Usability,[![Coverage Status](https://coveralls.io/builds/49098930/badge)](https://coveralls.io/builds/49098930). Coverage increased (+0.3%) to 69.881% when pulling **87e27c5f96c36096fe628f29e95f6e2cbf66dd0a on emilianomfortes:krylov-solve-guide** into **0b821cb547d258ba9597198ed016aad7df56593a on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1098579474:230,guid,guide,230,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1098579474,1,['guid'],['guide']
Usability,[![Coverage Status](https://coveralls.io/builds/55037246/badge)](https://coveralls.io/builds/55037246). Coverage remained the same at 72.23% when pulling **2fc35ba8c6017a8c71e9ee40fe72be2b994c5f09 on hodgestar:feature/v5-simplify-version-parsing** into **169b000bfdffc3555984a1f4df0f36d0b40f5527 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2044#issuecomment-1345270392:221,simpl,simplify-version-parsing,221,https://qutip.org,https://github.com/qutip/qutip/pull/2044#issuecomment-1345270392,1,['simpl'],['simplify-version-parsing']
Usability,[![Coverage Status](https://coveralls.io/builds/55037385/badge)](https://coveralls.io/builds/55037385). Coverage remained the same at 69.926% when pulling **ab7bfb5fe516bab2c3bbe4785a779e02d085266a on hodgestar:feature/simplify-version-parsing** into **52b222e9d4fbe143ef27522b2faa2db33d1043d1 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2043#issuecomment-1345273111:219,simpl,simplify-version-parsing,219,https://qutip.org,https://github.com/qutip/qutip/pull/2043#issuecomment-1345273111,1,['simpl'],['simplify-version-parsing']
Usability,[![Coverage Status](https://coveralls.io/builds/63911753/badge)](https://coveralls.io/builds/63911753). coverage: 84.849% (+0.004%) from 84.845%; when pulling **250692b32c96081e1418d9a1e6b7c23393fe1ed9 on pmenczel:result-opt-no-feedback**; into **454b61529d7bf3c37f74c17925a749fcb046c364 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2262#issuecomment-1807564710:228,feedback,feedback,228,https://qutip.org,https://github.com/qutip/qutip/pull/2262#issuecomment-1807564710,1,['feedback'],['feedback']
Usability,[![Coverage Status](https://coveralls.io/builds/64568924/badge)](https://coveralls.io/builds/64568924). coverage: 84.198% (-0.2%) from 84.382%; when pulling **6707a4b024b6c570988e27948190425b5651e137 on Ericgig:feature.feedback**; into **f0c507eda7241332911965a59e7f0b0a9ec28185 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663071540:219,feedback,feedback,219,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663071540,1,['feedback'],['feedback']
Usability,[![Coverage Status](https://coveralls.io/builds/65270670/badge)](https://coveralls.io/builds/65270670). coverage: 84.18% (-0.02%) from 84.196%; when pulling **b1d582b2d0cee852dfb3a92471d0205257c1cf03 on Ericgig:doc.guide**; into **7fbb5672242600481d84ee4e5144c95748bf17dc on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2279#issuecomment-1866906699:215,guid,guide,215,https://qutip.org,https://github.com/qutip/qutip/pull/2279#issuecomment-1866906699,1,['guid'],['guide']
Usability,"[pristine_from_docs.zip](https://github.com/qutip/qutip/files/6491982/pristine_from_docs.zip). I get this error for dir_gen_anim2.py. I have just attached the relevant part here. . ```python; fig = pyplot.figure(); ax = Axes3D(fig, azim=-40, elev=30); sphere = Bloch(axes=ax). def animate(i):; sphere.clear(); sphere.add_vectors([np_sin(theta), 0, np_cos(theta)]); sphere.add_points([sx[:i+1], sy[:i+1], sz[:i+1]]); sphere.make_sphere(); return ax. def init():; sphere.vector_color = ['r']; return ax. ani = FuncAnimation(fig, animate, arange(len(sx)),; init_func=init, blit=False, repeat=False). ani.save('bloch_sphere.mp4', fps=20). Exception ignored in: <function TimerQT.__del__ at 0x7fbf6c561b80>; Traceback (most recent call last):; File ""/home/rohan/anaconda3/envs/nbdev/lib/python3.8/site-packages/matplotlib/backends/backend_qt5.py"", line 189, in __del__; TypeError: 'NoneType' object is not callable; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842086433:301,clear,clear,301,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842086433,1,['clear'],['clear']
Usability,"_Edit 2020-08-25:_ reporting to Coveralls is now fixed. As a bonus, I also fixed the tree reporting in Coveralls, so now you can get line-by-line coverage analysis within the files in the Coveralls webapp. _Orginal comment from when Coveralls reported at 0%:_; Ok, that Coveralls report is clearly broken, but you can see in the test log that the coverage reporting is correctly fixed (see the Linux, Python 3.7 report). I suspect that my directory hopping has caused the generated `.coverage` file to get lost, which I'll fix tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347#issuecomment-679418397:290,clear,clearly,290,https://qutip.org,https://github.com/qutip/qutip/pull/1347#issuecomment-679418397,1,['clear'],['clearly']
Usability,"`. So I think we should aim to keep it simple. I think adding `f(t)` as a signature option will be sufficient for what @goerz wanted and would be sufficient for using a Numba jit. So, my suggestion for the next major release (v5) would be that we have only two call sigs:; - `f(t, args)` (default); - `f(t)`. For now we will have to have the three (although I don't think the `rhs_with_state` is not widely used, if at all).; - `f(t, args)` (default); - `f(t)`; - `f(t, state, args)`; The default needs to remain as it is, because it is widely used. I think it makes sense to use introspection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:1300,simpl,simple,1300,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['simpl'],['simple']
Usability,"`QobjEvo` have a `with_state` method `QobjEvo.with_state(t, psi, args={})` which can be used instead of `__call__` if needed. It compute the coefficient on the python side and send them to the cython part if needed. But I don't like it like this, using `__call__` will raise and error if a psi is needed, and we need to treat it differently in solvers.; How about having the state inserted in the args dictionary.; So if the users have the key ""psi_vec"" or ""psi_Qobj"" in args and mul_vec (spmv)/ expect is used, it is automatically updated. With that definition most solvers could work without a special cases for `rhs_with_state=True`. The present method could still be supported using decorator.; Also it would be relatively simple to support expectation value in args in a similar way:; if a specific key/value is found in the dictonary (`args[""_expect""+name] = Qobj/ QobjEvo` ), it is replaced with the operator expectation value when possible. . For the present case, we should document it more than change it, going back to Qobj will slow the simulation. Maybe `rhs_with_state` could be more than a bool and offer the option?; Here ` expect_rho_vec(data, vec, isherm)` from qutip.expect could be used to skip the vec -> Qobj conversion. . Also, the users should not need to know the matrix format and have to do the conversion themselves. They should never have to use `dense2D_to_fastcsr_fmode`. `QObj((vec2mat(rho))` works and should be sufficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-462591342:727,simpl,simple,727,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-462591342,1,['simpl'],['simple']
Usability,"```; ""minimum_supported_numpy; python_version>='3.8' or platform_machine=='aarch64' or platform_system=='AIX' or platform_python_implementation=='PyPy'""; ""numpy==1.16.6; python_version=='3.6' and platform_machine!='aarch64' and platform_system!='AIX' and platform_python_implementation != 'PyPy'"",; ""numpy==1.16.6; python_version=='3.7' and platform_machine!='aarch64' and platform_system!='AIX' and platform_python_implementation != 'PyPy'"",; ```. Also, you have the wrong setting for 3.8 above, there are no binaries for the one you incorrectly selected. But please, try the simple thing first. Quoting the documentation:. > ### Can I use this if my package requires a recent version of Numpy?; > In many cases, even though your package may require a version of Numpy that is more recent than the pinned versions here, this is often a runtime requirement, i.e. for running (rather than building) your package. In many cases, unless you use recent features of the Numpy C API, you will still be able to build your package with an older version of Numpy and therefore you will still be able to use `oldest-supported-numpy`. You can still impose a more recent Numpy requirement in `install_requires`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-989966457:577,simpl,simple,577,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-989966457,1,['simpl'],['simple']
Usability,"`dims` is an argument of all random Qobj creator, we should keep it.; It should be in [[m,n],[1,1]] format. documentation is not clear / wrong. If used with this format, it does work, but the check and documentation indicate to use [[n,m]] which is wrong and will cause errors. What I was thinking was something along the line of:; ```; def rand_ket(N=0, ...) : ; if not N: ; N = np.prod(dims[0]); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1058#issuecomment-516436835:129,clear,clear,129,https://qutip.org,https://github.com/qutip/qutip/pull/1058#issuecomment-516436835,1,['clear'],['clear']
Usability,"`eseries` isn't really used by `correlation`, it's just a possible solver, and `expect` doesn't use it, it just currently has to support it. Removing `eseries` would involve just removing that part of the solver. `essolve` only functions with time-independent Hamiltonians anyway, and `QobjEvo` can represent a full superset of `eseries` operations, and is an awful lot faster at it too. I agree that the documentation can definitely be improved - I'll be working on that later on in the project. No-one's complaining about the difficult of maintaining them, because nobody _is_ maintaining them. `eseries` hasn't been meaningfully touched since 2014, and there's been an issue recently (#1262) where somebody pointed out that `essolve` doesn't do really simple parts of its spec.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1281#issuecomment-638112689:755,simpl,simple,755,https://qutip.org,https://github.com/qutip/qutip/issues/1281#issuecomment-638112689,1,['simpl'],['simple']
Usability,"`int64` indices are now achievable in `dev.major` with a 3-line change to `core/data/base.pxd` and `base.pyx`. I'll leave this (and all associated issues) open for now as a reminder that we may want to put in a compile-time switch for that, but in principle QuTiP 5.0 will allow fairly simple swapping for those willing to recompile.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-809449396:286,simpl,simple,286,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-809449396,1,['simpl'],['simple']
Usability,"`namedtuple` is not a bad idea, although it's a bit odd because `e_ops` is never a namedtuple and it doesn't solve the problem of what type `.e_ops` has. And `namedtuple` forbids attributes which aren't identifiers, which is also problematic. I guess we could write our own type, `Expect`, that acts enough like a list for numpy, etc but still allows item and attribute access. That feels a bit crazy, but maybe it is worth it?. I still feel that all of these options are overly complicated. `e_ops` is not a list conceptually. Lists are typically ordered, but unstructured. The `e_ops` are clearly not ordered because `e_ops[0]` doesn't ""come before"" `e_ops[1]` in any meaningful way. The order of the indexes in a list `e_ops` are meaningless -- they exist only because that is how Python lists work. *Sometimes* there may be a natural ordering to e_ops -- e.g. if they happen to be the projectors onto a complete set of basis elements -- but this a small subset of the more general situation where e_ops might be any set of operators and functions. I do see that you feel lists are the most important case though, so it would be good to support them well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1142339185:591,clear,clearly,591,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1142339185,1,['clear'],['clearly']
Usability,"`qutip.liouvillian` takes a Hamiltonian `H` and transforms it into the Liouvillian superoperator, which if no Lindbladian `c_ops` are supplied `liouvillian` is simply the `[H, .]` term you want. This is what `mesolve` does internally, if its first argument is an operator. The subsequent additions I made to the Liouvillian afterwards in that loop add on your non-Lindbladian collapse operators - `mesolve` will recognise that you have passed a superoperator and the only further processing it will to is to add any further Lindblad-form collapse operators found in the `c_ops` list.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1435#issuecomment-774026381:160,simpl,simply,160,https://qutip.org,https://github.com/qutip/qutip/issues/1435#issuecomment-774026381,1,['simpl'],['simply']
Usability,"agine, but not an unsolvable one.; - error if you pass something that defines `__qutip_qobj__` in addition to keywords. This isn't ideal because it gives `Qobj` special treatment - additional kwargs can override `Qobj` settings if they're compatible. ---. Just in the interest of completeness, let me also just bring up some of the sweeping changes we'll bringing in in QuTiP 5.0 as well, which massively overhaul how `Qobj` is constructed, and how its data is stored. These aren't _directly_ applicable to the current discussion, but they're worth keeping in mind since they're a huge overhaul of how things will be handled, and may have some implications for how implementors of this interface might behave. The new `Qobj` will no longer have the same `fast_csr_matrix` type as its `data` attribute, but instead will have an extensible data type. The two that will be distributed with the library will be `Dense` and `CSR` (which simply do what they say on the tin), and all linear algebra operations between multiple `Qobj` are handled by a custom multiple-dispatch system that allows additional specialisations to be added in a similar way to Julia. Say you want to define `matmul` between `Dense` on the left and `CSR` on the right to produce a `CSR` output (a specialisation that we likely won't ship with because it's unlikely to be efficient). You'd write your function; ```python; def matmul_dense_csr_csr(left, right):; ...; return out; ```; and then because unlike Julia it's not built-in, you just manually add it to the dispatch table for `matmul`:; ```python; qutip.data.matmul.add_specialisations(matmul_dense_csr_csr, (Dense, CSR), CSR); ```; QuTiP then knows about it, so it'll get used when appropriate. You can also add entirely new types to the dispatch table by adding them to the ""cast"" table `qutip.data.to`, giving at least one method to convert the new type into an already-known one, and at least one method to convert an already-known type into the new type. QuTiP will then",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:4695,simpl,simply,4695,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['simpl'],['simply']
Usability,"and this in dir_gen_anim.py; ```python; fig = figure(); ax = Axes3D(fig, azim=-40, elev=30); sphere = Bloch(axes=ax). def animate(i):; sphere.clear(); sphere.add_vectors([np_sin(theta), 0, np_cos(theta)]); sphere.add_points([sx[:i+1], sy[:i+1], sz[:i+1]]); sphere.make_sphere(); return ax. def init():; sphere.vector_color = ['r']; return ax. ani = FuncAnimation(fig, animate, arange(len(sx)),; init_func=init, blit=True, repeat=False). ani.save('bloch_sphere.mp4', fps=20). Traceback (most recent call last):; File ""dir_gen_anim.py"", line 87, in <module>; ani.save('bloch_sphere.mp4', fps=20); File ""/home/rohan/anaconda3/envs/nbdev/lib/python3.8/site-packages/matplotlib/animation.py"", line 1144, in save; anim._init_draw() # Clear the initial frame; File ""/home/rohan/anaconda3/envs/nbdev/lib/python3.8/site-packages/matplotlib/animation.py"", line 1727, in _init_draw; for a in self._drawn_artists:; TypeError: 'Axes3D' object is not iterable. ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842087604:142,clear,clear,142,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842087604,1,['clear'],['clear']
Usability,"can propagate over the entire time grid in less than a few seconds. That would be a huge improvement over the current situation, where the lack of a good propagator limits the optimization effectively to toy problems. We *may* still try to implement in Cython some polynomial propagators (propagators that evaluate `exp[-i H dt] Ψ` or `exp[L dt] ρ` via expansion into a polynomial series - think Taylor series but faster converging, through the use of Chebychev or Newton polynomials). That work hasn't really been going anywhere lately, though. It may or may not end up being faster than `mesolve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the cu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:1491,guid,guide,1491,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,2,['guid'],"['guide', 'guide-control']"
Usability,"e one available everywhere and for v4. `mesolve` with `store_state` will have `result.states` being the output density matrix. `mcsolve` with the same `store_state` and default options should return a similar result.; > ; > So it would be better to have the new option be `precompute_average_states` and have it only control if the average is compute when all trajectories is stored. The if the `average_states` property it use, it could compute the average then, but never do so if not used.; > ; > Please keep `result.states` and `result.final_states` as is. They have the same behaviour as in v4 and we want to keep them for backward compatibility.; > ; > `runs_...` and `average_...` are new to v5 and could be renamed, but it's not clear that `density_matricies` is the average while `final_states` are for each trajectories. `smesolve` and sometime for `mcsolve` individual trajectories states are already density matrices. Thus `smesolve`'s result density_matricies could work as well for all states from all trajectories, causing confusion.; > ; > You implemented the `density_matricies` property twice.; > ; > Having the options to keep only the final states without keeping all the trajectories is a good idea. Be careful that the trajectory result have the final state stored. So I'm not entirely sure what you want the behaviour to be for each set of options. I think it is confusing to return a density matrix if you request store_states - the density matrix is not the same as the state of the system, and surely v5 is the perfect time to clear up issues like this. Personally I found this behaviour very surprising when updating to V5. I do agree that `density_matricies` should maybe be `average_density_matricies`. I am happy to change `mesolve` as part of this for consistency. If you want to keep it backwards compatible would it be possible to send a list of all combination of options and exactly what you want `states` to return in each case, just to prevent any back and forth.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023:1681,clear,clear,1681,https://qutip.org,https://github.com/qutip/qutip/pull/2303#issuecomment-1906570023,1,['clear'],['clear']
Usability,"e whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is identical to `Seq(1, 2, 3, 4)` and `Seq(1, Par(2), 3)` is identical to `Seq(1, 2, 3)` but distinct from `Seq(1, Par(2, 3))`). One alternative may be to have a single subclass `Outcome` of `tuple` instead of both, then overload operators like `|` to mean parallel. Internally, could use two subclasses like `Seq` and `Par` but display visually as `Outcome(1, 2 | 3, 4)` instead of `Outcome(1, Par(2, 3), 4)`. > * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:1510,clear,clear,1510,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['clear'],['clear']
Usability,"e-user-images.githubusercontent.com/12125783/337660051-e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjAwNTEtZTRmYTNkMGEtY2E1YS00MGU3LWFiNWItMjgzYzMwZjBkZTA3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk5YmExMTE2NGZhZmFmZWZiYjQ2YTU0ZTlmOWNmZDg1MzI5NWQyM2UxNWIzNDUwYWYwOTdjNmZhYzU2ZDBlZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.c_jkyvIGwDUsmTXLIAr5LI0-u2IhfVNWo2orjBvElfk) with names as strings.; > ; > It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians; > ; > ![image](https://private-user-images.githubusercontent.com/12125783/337661271-ad856f69-e0f2-49a2-9ab0-f88e84444373.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjEyNzEtYWQ4NTZmNjktZTBmMi00OWEyLTlhYjAtZjg4ZTg0NDQ0MzczLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTAzYTljNGFhMDMxY2RkNmU1ZWRiZjk1YzNkODllNjdjOTlkNDIxMDBhNDgxOTI0MWEyNmFlZjM1MTZjY2I5NTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.D6pMkAw1y3WWyirs_J8dFthmGjY4V6rIMr6JUHYZ19Y). Thank you for being so clear with the explanation, now I am able to build the html. I have done this update.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051:2130,clear,clear,2130,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051,1,['clear'],['clear']
Usability,"e; >; > -; >; >; > Leaving this blank line here makes the comments above it confusing.; > ------------------------------; >; > In qutip/superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768189423>:; >; > > # Find the SVD.; >; > U, S, V = svd(q_oper.full()); >; >; >; > # Truncate away the zero singular values, up to a threshold.; >; > - nonzero_idxs = S > thresh; >; > - dK = nonzero_idxs.sum(); >; > - U = U[:, nonzero_idxs]; >; > - S = sqrt(S[nonzero_idxs]); >; > +; >; > + dK = np.count_nonzero(S > thresh); >; >; > I'm just checking why this code was changed. Yes, svd returns the; > singular values in descending order, but what was wrong with previous code; > that didn't rely on that?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768191681>:; >; > > ***@***.***(scope=""function"", params=[; >; > + pytest.param(rand_super, id=""super""); >; > +]); >; > +def superoperator(request, dimension):; >; > + return request.param(dimension); >; >; > This is quite a strange function to read given that it could have just; > been:; >; > @pytest.fixture; >; > def superoperator(dimension):; >; > return rand_super(dimension); >; >; > Maybe there was a plan to do something more? Could we either add another; > param or use the simpler implementation?; > ------------------------------; >; > In qutip/tests/test_superop_reps.py; > <https://github.com/qutip/qutip/pull/1491#discussion_r768192756>:; >; > > + # FIXME: problem if Kraus index is implicitly; >; > + # ptraced!; >; >; > Could you explain the FIXME a bit more? Was this an existing issue? Can we; > just fix it?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1491#pullrequestreview-830847431>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AFTMVKGNCG4DDNE5NVOSMRTUQZ4STANCNFSM42RMIOQA>; > .; >. -- ; *φ*",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001:2905,simpl,simpler,2905,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-994994001,1,['simpl'],['simpler']
Usability,"e_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5719,simpl,simple,5719,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"e_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There is a bug in eigh on mac with openblas. --> **Switched to <code>qutip.sparse.eigh</code>**; * [x] What does this <code>optimizer</code> function optimize? Could you add a simple description. --> **This functions finds the optimal number of Lanczos algorithm iterations inside Krylov, added as small description**; * [x] <code>_estimate_norm</code> is nerver used. --> **Removed**; * [x] Why is tlist here and not in solve? It seems strange that you can reuse one instance for multiple H and psi0, but you cannot change tlist. --> **Removed when deprecating <code>KSolve</code> class**; * [x] Why do you need KSolve? --> **It was a workaround to the cognitive complexity check of github. But we decided to revert back to a non Class solver, as it adds another type of complexity.**; * [x] Increasing pdx here when it is already controlled by enumerate is strange. The best would be to include the first partition here too. Otherwise using update_progress_bar(pdx + 1) is clearer. --> **Changed ""pdx"" into ""idx"". Added the first lazy iteration inside the loop, now it is more clear with <code>update_progress_bar(idx)</code>.**; * [x] T",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:2189,simpl,simple,2189,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,1,['simpl'],['simple']
Usability,"ed features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Best; Boxi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:2094,simpl,simple,2094,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['simpl'],['simple']
Usability,"ee to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool = Flag specifying whether Qobj should get a copy of the input data, or use the original.; fast : bool = Flag for fast qobj creation when running ode solvers.; ```. For the case of the usage that netket would have, our objects already define the Hilbert space they are acting on (so `dims` and `shape`). `copy` doesn't really make sense for us, because we would be building the representation . The way I see it, `Qobj(other_pkg_obj,**kwargs)` should behave like `Qobj(qutip_obj, **kwargs)`, so `__qutip_qobj__` should return the matrix data, shape and dims if possible, and qutip will handle i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1813,clear,clear,1813,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,2,['clear'],['clear']
Usability,"emal eigenvalues: that is, eigenvalues with large magnitudes. In particular, using which = 'SM' may lead to slow execution time and/or anomalous results. A better approach is to use shift-invert mode."". See also the example on that page. I tried using the 'shift-invert mode' as suggested, and that gave better results. But, they are still pretty bad for the problem I want to solve: I'm trying to find the low lying spectrum for a very large Liouvillian, as I vary a single external Hamiltonian parameter. The smallest one (in magnitude) is always zero, and all others are negative. Supposedly, the vanishing of the real part of the eigenvalue with the second largest (closest to zero) real part can be useful for characterizing phase transitions, see, for example, this recent paper: http://prl.aps.org/abstract/PRL/v110/i15/e150401. I attach a plot where I have computed the eigenvalue with second largest real part (which is also the one with second smallest magnitude; the two criteria coincide) using 1) scipy.linalg.eigvals (green line) and 2) scipy.sparse.linalg.eigs (blue line): https://dl.dropboxusercontent.com/u/6042643/liouvspec.png. As you can see, the results from the sparse solver are pretty poor (I assume the dense solver results are correct). . As far as the physics goes: Another thing to notice is that the system goes through phase transitions at -2.0, 0.5 and 2.0 for the parameter along the x-axis, and there are no signs of that in the plot. On a side note, I also wasn't able to reproduce Fig 2(a), middle panel, of the PRL paper I linked to, although I got qualitative agreement if I tried with different parameters than what is quoted in the figure caption. Do you by any chance happen to have any experience with this way of characterizing dynamical phase transitions?. I might try to make a simpler example illustrating the problem later. The Liouvillian I am considering now is too big to use as an example, as using the dense solver requires a huge amount of memory.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/16#issuecomment-16416062:2154,simpl,simpler,2154,https://qutip.org,https://github.com/qutip/qutip/issues/16#issuecomment-16416062,1,['simpl'],['simpler']
Usability,"er function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row about licensing primarily, and then about how we're going to handle tensor networks in general. In order to prevent headaches down the line (and again, very very sorry), would it be ok if we leave this unmerged, and don't attempt to modify it in any way? I don't want to get into a situation where we decide we can't accept non-QuTiP-licenced code, and we want to use/build on your code",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3928,UX,UX,3928,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['UX'],['UX']
Usability,"er the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit thick here because I understand the overall idea of the code but somehow I am not confident it will be easy for others to understand on first read. Do you think we can make it a bit more transparent how the `_qfunc_alpha_matrix` works and that the crux of the method is computing the operators `coherent_dm` in an efficient way and saving them? If I have understood the code correct, I could try to document it a bit more and simplify it. . Let me know your thoughts and correct me if I misunderstood something @jakelishman @Ericgig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:2556,simpl,simplify,2556,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['simpl'],['simplify']
Usability,"ex_array_to_rgb` could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function `matrix_histogram_complex`. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from `matrix_histogram_complex` you get something like. ```; x = np.linspace(-5, 5, 100); X, Y = np.meshgrid(x,x); Z = X + 1j * Y; cdict = {'blue': ((0.00, 0.0, 0.0),; (0.25, 0.0, 0.0),; (0.50, 1.0, 1.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'green': ((0.00, 0.0, 0.0),; (0.25, 1.0, 1.0),; (0.50, 0.0, 0.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'red': ((0.00, 1.0, 1.0),; (0.25, 0.5, 0.5),; (0.50, 0.0, 0.0),; (0.75, 0.0, 0.0),; (1.00, 1.0, 1.0))}. cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); norm = mpl.colors.Normalize(-pi, pi); colors = cmap(norm(np.angle(Z))); colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(). plt.imshow(colors, interpolation='none');; ```. which produces the following map of the complex plane:. ![complex-plane-2](https://cloud.githubusercontent.com/assets/1198183/2809239/c3f6c3cc-cd61-11e3-83a1-cc4fff3f303c.png). compared to. ```; plt.imshow(complex_array_to_rgb(Z), interpolation='none');; ```. which produces. ![complex-plane-1](https://cloud.githubusercontent.com/assets/1198183/2809256/29caad3e-cd63-11e3-8e7a-3187afc2744f.png). Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to interpret.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41473950:1792,simpl,simple,1792,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41473950,2,['simpl'],['simple']
Usability,"feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>dot</code> method that act the same a sparse array's one. This is not needed.; * [x] The <code>dims</code> of the output are not kept at <code>evolved_states = map(Qobj, evolved_states[1:-1]</code> --> **Separated into two variables. Now dimensions are also ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1862,progress bar,progress bars,1862,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['progress bar'],['progress bars']
Usability,"h measurements than calling the measurement operations all the time & of combine measurement operations with other operations on Qobjs. Thank you for the kind words!. > I'm keen to hear feedback from others too, but in the mean time I'm going to note some thoughts here for when I come back to this:; > ; > * It would be good to think about how all the operations on Qobj match up with QuTiP version 5 (since this draft is based on v4 currently).; > * We should decide whether to target QuTiP 4.7 or 4.7 and 5 for this. Target just v5 means not having to worry about making it nice in both, but will mean it'll be a bit more of a delay before release).; > . I'll admit I've not kept up as much with the 5.0 changes as I should have, but I'm happy either way; I can definitely see the benefit to targeting 5.0 and keeping code maintenance down, or to getting the feature out for folks to use sooner at the cost of more development work. > * I'd like to think about removing `Seq` and `Par` and replacing them with some simple rules for sequences, strings and numbers. Honestly, agreed; I tried a few different designs to try and get rid of those two classes, but they all felt a bit awkward and special-cased. Happy to revise, though, to lower the barrier to using the new feature. > This would match, e.g., `qutip.ket(""01"")` and `qutip.basis([2, 2], [0, 1])`. `Seq` and `Par` do however make it really clear that in one case measurements follow each other on the same subspaces and in the other they are performed simultaneously on different subspaces, so I'm not quite sure. Maybe there is some middle ground. My initial thought was to do something like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is identical to `Seq(1, 2, 3, 4)` and `Seq(1, Par(2), 3)` is identical to `Seq(1, 2, 3)` but distinct from `Seq(1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:1126,simpl,simple,1126,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['simpl'],['simple']
Usability,"her would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that defines what we accept as scalars. We then do: `isinstace(other, _ALLOWED_SCALARS)` and return `NotImplemented` if not there. Two options here:; 1) QuTiP allows only `numbers.Number`:; - In this case `qutip-tensorflow` can extend `_ALLOWED_SCALARS` with tf.Variable and tf.Tensor. However, if the user uses two plug-ins, say qutip-tensorflow and qutip-something-that-does-not-work-well-with-tensorflow (second plug-in), the second plug-in may not work properly. ; - The above point is not a big deal if we make clear that _ALLOWED_SCALARS must accept `complex(other)` for compatibility reasons. In this way the second plug-in can always default to `complex(other)` (this is already the default behaviour of `mul_dense`).; 2) QuTiP allows `numbers.Number`, `ndarray` of shape `(,)`, `tf.Variable` of shape `(,)` and more in the future.; - The upside of this method with respect to 3.1 is that users know which types they must accept.; - This is probably not a good idea as it means qutip has to handle new dependencies (tensorflow and probalby more in the future).; - This _still_ defines what an scalar is at he `Qobj` level. I think this is not bad as it seems to be the only way of avoiding `NotImplemented` at Python space exept for in special methods (`__mul__`, ...). I think that 3.i is the closest to an ideal solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:3198,clear,clear,3198,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['clear'],['clear']
Usability,"hey guys.. yes, things are fine now. Below is simplified code that shows this problem:; ```; import numpy as np; import qutip as q; q.about(); # opts=q.Odeoptions() #""low"" tolerances; opts=q.Odeoptions(method='adams', nsteps=100000, atol=1e-11, rtol=1e-11); times=np.linspace(0,10,300); epsilon=2*np.pi * 1; H=[epsilon/2*q.sigmaz(), [q.sigmax(), 'sin(2*pi*t)']]; U_prop_batch=q.propagator(H, times, options=opts, unitary_mode='batch', parallel=False); U_prop_single=q.propagator(H, times, options=opts, unitary_mode='single', parallel=False); print((U_prop_batch[-1]-U_prop_single[-1]).full()); ```. and here is the ""bad"" output with the older version of qutip that I was running before (Note, the difference between the 'batch' and 'single' has terms of order 1e-6). . ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+4277eae; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+4277eae-py3.4-linux-x86_64.egg/qutip. #I would expect this to have largest terms of order 1e-11 say.; [[-4.24096116e-07+1.00022928e-06j -4.16215462e-09-4.54122270e-07j]; [ 4.16215462e-09-4.54122270e-07j -4.24096116e-07-1.00022928e-06j]]; ```; and here is the result of running with the latest version (note, now difference between the two propagators respects the required tolerances):. ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+489fd41; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Insta",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/829#issuecomment-376601387:46,simpl,simplified,46,https://qutip.org,https://github.com/qutip/qutip/issues/829#issuecomment-376601387,1,['simpl'],['simplified']
Usability,"hi amrit,. correlation_2op_1t() calculates the correlation function based on the steady-state of the Hamiltonian+collapse operators you provide, it doesn't take an initial condition as input (the steady-state will the the same irrespective of the initial condition of the qubit). For non-steady state correlations and spectrum, I think what is described here might be what you need:; https://qutip.org/docs/latest/guide/guide-correlation.html#non-steadystate-correlation-function. This kind of question is probably better to ask in the QuTiP mailing list, https://groups.google.com/g/qutip; you will receive a wider range of responses there, so I am going to close this issue. If you find some problem with the above approach that you think is a code bug, feel free to reopen it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1806#issuecomment-1042493241:414,guid,guide,414,https://qutip.org,https://github.com/qutip/qutip/issues/1806#issuecomment-1042493241,2,['guid'],"['guide', 'guide-correlation']"
Usability,"i think this difference comes because, if you look at equation A1 in Fabrizio's paper you linked, they do a row-ordering convention in turning states into vectors. Qutip does a column ordering convention, as described here ; http://qutip.org/docs/latest/guide/guide-states.html#superoperators-and-vectorized-operators. this is an arbitrary choice, as long as you do it consistently with the definition of states and superoperators. This means in our case -i[H, rho] gives -i[spre(H) -spost(H)] == -i zcsr_kron(spI, H.data) + 1j * zcsr_kron(Ht, spI). . i think row ordering is more intuitive, but column ordering is what we do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1285#issuecomment-643295362:254,guid,guide,254,https://qutip.org,https://github.com/qutip/qutip/issues/1285#issuecomment-643295362,3,"['guid', 'intuit']","['guide', 'guide-states', 'intuitive']"
Usability,"ich should only add in flimesolve as an option; for solvers (with an if statement or two to get the Hamiltonian into a; FloquetBasis object if flimesolve is the selected solver). Thanks again for your feedback!. On Mon, Jun 26, 2023 at 6:32 PM Fenton Clawson ***@***.***> wrote:. > Hey Eric,; >; > Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Something is strange in floquet.py, did you include change not meant to; >> be here?; >> Both floquet.py and flimesolve.py have the original fmesolve and the new; >> flimesolve...; >>; >> Tests should pass.; >> Right now, scipy 1.11 breaks cvxpy which we use so this breaks a few; >> tests, but the changes you made to correlation.py also break the tests.; >> We will want tests for the new solver.; >>; >> Could you also review the style (pep8).; >>; >> - There are some very long line, we use the official 80 characters; >> width.; >> - space are not uniform, sometime they are doubled, other time; >> missing.; >> - There are rules for empty lines, there should not be 3 empty lines; >> in a function.; >>; >> —; >> Reply to this email directly, view it on GitHub; >> <https://github.com/qutip/qutip/pull/214",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:2010,feedback,feedback,2010,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,1,['feedback'],['feedback']
Usability,"igenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic oscillator, finite temperature, states ... ok; > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > correlation: legacy me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; > Transform 10-level real-values to eigenbasis and back ... ok; > Transform 10-level to eigenbasis and back ... ok; > Transform 10-level imag to eigenbasis and back ... ok; > Consistency between transformations of kets and density matrices ... ok; > Check diagonalization via eigenbasis transformation ... ok; > brmesolve: simple qubit ... ok; > brmesolve: c_ops alone ... ok; > brmesolve: c_ops with a_ops ... ok; > brmesolve: harmonic oscillator, zero temperature ... ok; > brmesolve: harmonic oscillator, finite temperature ... ok; > brmesolve: harmonic oscillator, finite temperature, states ... ok; > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > correlation: legacy me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and mc for driven oscillator in ground state ... ERROR; > correlation: legacy me and es for oscillator in steady-state ... ok; > correlation: comparing me and es for oscillator in steady-state ... ok; > correlation: legacy spectrum from es and pi methods ... ok; > correlation: comparing spectrum from es and fft methods ... ok; > correlation: comparing spectrum from es and pi methods ... ok; > correlation: comparing TLS emission correlations (str-list td forma",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:1763,simpl,simple,1763,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['simpl'],['simple']
Usability,"ild of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) mall",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:6148,clear,clearly,6148,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['clear'],['clearly']
Usability,"ing logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2848,simpl,simple,2848,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['simpl'],['simple']
Usability,"ingle time steps with `mesolve`, optimization becomes feasible for any system that `mesolve` can propagate over the entire time grid in less than a few seconds. That would be a huge improvement over the current situation, where the lack of a good propagator limits the optimization effectively to toy problems. We *may* still try to implement in Cython some polynomial propagators (propagators that evaluate `exp[-i H dt] Ψ` or `exp[L dt] ρ` via expansion into a polynomial series - think Taylor series but faster converging, through the use of Chebychev or Newton polynomials). That work hasn't really been going anywhere lately, though. It may or may not end up being faster than `mesolve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:1347,simpl,simplify,1347,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['simpl'],['simplify']
Usability,"ion to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there are special_value_kind args given, these are replaced with an arg `{name:value}` with the `value` being the value of the special_value_kind at time t. We should use internal flags (attribs) to control the special_value_kind processing, This will be more efficient than checking the args dict at every time step for special_value_kind keys, e.g.; - `_state_vec_key`: default `None`, or string key to the arg element. So, unless I have missed something regarding the importance of `**args`, then I think this plan covers what we need and makes everything a bit simpler, which is always good.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:2847,simpl,simpler,2847,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['simpl'],['simpler']
Usability,"is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy transitive equality (i.e. `a == b and b == c` does not imply `a == c`). The primary consequence of this is that the cache will simply be a little under-zealous, and sometimes it will calculate the value twice for three similar `Qobj`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:2345,simpl,simply,2345,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['simpl'],['simply']
Usability,"is is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using what",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:10758,clear,clear,10758,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['clear'],['clear']
Usability,"ite something constantly then module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files starting from those beginning with ""a"" up to (now) ""metrics"" while I was first getting to know the QuTiP codebase, and hopefully you can see that my early efforts weren't that great, and they get a bit better and easier to read as time went on. (The later files haven't been converted yet.) The main things are to always be thinking about readability both of the code and the error messages that are coming out, and making sure that your tests are really testing that your functions have your behaviour you want them to have. Another thing we really don't have enough of in QuTiP yet is tests for ""negative"" behaviour, i.e. testing that functions _fail_ when they're passed incorrect inputs - consequently, quite a lot of QuTiP actually will just silently do the wrong thi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:1737,clear,clearly,1737,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['clear'],['clearly']
Usability,just testing with simple decaying exponential one gets about 5% or so improvement compared to np functions and no difference with cmath,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/251#issuecomment-61603338:18,simpl,simple,18,https://qutip.org,https://github.com/qutip/qutip/pull/251#issuecomment-61603338,1,['simpl'],['simple']
Usability,"k for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5505,simpl,simple,5505,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"les in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance improvement. It improves the organization of the code, allows greater flexibility in adding new things to an existing class and modifying it easily. In terms of user experience, this means less clutter in the code and verbosity of arguments. You can initialize something once and keep re-calculating things by dynamically changing the parameters and calling the `class` method. If it does not hurt to slowly shift in this direction then I think we should go for it. If there is an alternative reason for not having classes then please let us know as the cons @bencbartlett mentions has more to do with following qutip precedent than some fundamental disadvantage in performance or use. @ajgpitch @nonhermitian",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:1871,clear,clearly,1871,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,2,"['clear', 'user experience']","['clearly', 'user experience']"
Usability,"lution that works for both. > * What is the advantage of this over using the existing superoperator representations?. I don't think there is one, per se, in the same sense that there's no strict advantage to superoperators over Choi operators over χ operators — each is useful in different contexts, such that QuTiP supports all three in order to allow users to pick the right representation for their problem. Similarly, operator-sum decompositions of channels are quite common and are useful in some special circumstances (e.g.: expressing a Choi-rank–sparse channel without requiring a 4^n × 4^n matrix). In the Quantum Development Kit, for instance, we use `qutip.to_kraus` to express user-supplied superoperators, Choi operators, and χ operators in terms of an operator-sum decomposition that is then passed to the underlying open systems simulator. While the operator-sum decomposition is quite useful internally to the simulator, that's not a detail that we want to enforce upon users, such that QuTiP's support for multiple superoperator representations is quite useful in presenting a user-friendly interface for configuring noise models. > * Can this advantage be carryied over into, e.g., using solvers, eigenvalue finding, etc?. I'm not sure I entirely follow, sorry?. > * Would it be better to have a new object, sort of like QobjEvo but for sums rather than evolutions?. Perhaps, but at least for the operator-sum decomposition of channels, it would feel a bit weird to me to have superoperators, Choi operators and χ operators all have one Python type, but for Kraus representations to have a fully different Python type. Whether I represent Λ(ρ) by 0.9 𝟙ρ𝟙 + 0.1 𝑋ρ𝑋 or {√(0.9) 𝟙, √(0.1) 𝑋}, they both represent the same function from density operators to density operators. > * How do you see the various mathematical operations working?. My thought here would be that an operator-sum decomposition of a channel is just that: a representation of a channel. Thus, if `lambda_` is a `Qo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574:2508,user-friendly,user-friendly,2508,https://qutip.org,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574,1,['user-friendly'],['user-friendly']
Usability,"ly by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. That's an extremely exciting prospect! I'd love to be able to have internal sparse data for Qobj's that represent Hamiltonians/Liouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with nump",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:4063,simpl,simple,4063,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['simpl'],['simple']
Usability,"m any other complex value.). On 26 Apr 2014, at 18:55, Robert Johansson notifications@github.com wrote:. > OK, I see. complex_array_to_rgb could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function matrix_histogram_complex. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from matrix_histogram_complex you get something like; > ; > x = np.linspace(-5, 5, 100); > X, Y = np.meshgrid(x,x); > Z = X + 1j \* Y; > cdict = {'blue': ((0.00, 0.0, 0.0),; > (0.25, 0.0, 0.0),; > (0.50, 1.0, 1.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'green': ((0.00, 0.0, 0.0),; > (0.25, 1.0, 1.0),; > (0.50, 0.0, 0.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'red': ((0.00, 1.0, 1.0),; > (0.25, 0.5, 0.5),; > (0.50, 0.0, 0.0),; > (0.75, 0.0, 0.0),; > (1.00, 1.0, 1.0))}; > ; > cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); > norm = mpl.colors.Normalize(-pi, pi); > colors = cmap(norm(np.angle(Z))); > colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(); > ; > plt.imshow(colors, interpolation='none');; > which produces the following map of the complex plane:; > ; > compared to; > ; > plt.imshow(complex_array_to_rgb(Z), interpolation='none');; > which produces; > ; > Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to interpret.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41480460:2197,simpl,simple,2197,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41480460,2,['simpl'],['simple']
Usability,"m()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit short-sighted. We can define, for example, `Space.__eq__` as; ```python; class Space:; def __eq__(self, other):; return (; self is other; or (; isinstance(other, Space); and self.size == other.size; and self.basis == other.basis; ); ); ```; so we'll almost invariably get the benefits right now, but we're rather more future-proof in the code. By analogy, it's clearly wrong to do `(1, 2) is (1, 2)` to compare tuples, even though `tuple` produces singletons in CPython (and that code will generally be `True`). The Python `tuple` class is basically what inspired me, and I'm 100% certain that the Python devs are smarter than I am, so we should probably stick with them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:3566,clear,clearly,3566,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['clear'],['clearly']
Usability,"ma_minus = 100000000; >; > epsilon = g*u*b/h*(2; > *cmath.pi) Delta = g*u*b_AC/h*(2*cmath.pi); >; > H = ((w-w0)/(w))*epsilon/2 * sz #*+ Delta/2*sy; >; > print(abs(((w-w0)/(w)))*epsilon/2); >; > #note here the final time satisfies: omega*t_final = pi/2; > times=np.linspace(0, 0.0000001, 1000); >; > #our initial qubit state; > state0=(state_z_plus)/(np.sqrt(1)); >; > H/(2*cmath.pi); >; > results=q.mesolve(H, state0, times, c_ops=[cmath.sqrt(gamma_phi/2)*sz+; > cmath.sqrt(gamma_minus)*sm], e_ops=[sx, sy, sz], options=qutip_options); >; > fig, ax=plt.subplots(); > ax.plot(times, results.expect[0], label=r'$\langle \sigma_x \rangle$'); > ax.plot(times, results.expect[1], label=r'$\langle \sigma_y \rangle$'); > ax.plot(times, results.expect[2], label=r'$\langle \sigma_z \rangle$'); > ax.set_xlabel(""time""); > ax.legend();; >; > import imageio; > def animate_bloch(values):; > b = q.Bloch(); > images=[]; > b.point_marker = ['o']; > b.point_size = [30]; > for i in range(len(values)):; > b.clear(); > b.add_states(values[i]); > b.add_states(values[:(i+1)],'point'); > beans = 'beans.png'; > b.save(beans); > images.append(imageio.imread(beans)); > imageio.mimwrite('beans.gif',images); >; > values = []; > for t in range(0,len(times),30):; > values.append((results.states[t])); > animate_bloch(values); >; > from IPython.core.interactiveshell import InteractiveShell; > InteractiveShell.ast_node_interactivity = ""all""; > from IPython import display; >; > from pathlib import Path; > gifPath = Path('beans.gif'); > with open(gifPath,'rb') as f:; > display.Image(data=f.read(), format='png'); >; > [image: g]; > <https://user-images.githubusercontent.com/29261370/105053116-36429880-5a36-11eb-978b-8804dd1e679e.PNG>; > [image: sp]; > <https://user-images.githubusercontent.com/29261370/105053129-3c387980-5a36-11eb-9c0d-da3fd30bbaf5.PNG>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/quti",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937:3457,clear,clear,3457,https://qutip.org,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937,1,['clear'],['clear']
Usability,"minate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` tha",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5639,clear,clear,5639,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['clear'],['clear']
Usability,"modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time for cte` could be more explanatory. Similarly elsewhere. * I wonder whether instead `QobjEvo`, `Qobjt` could be even more intuitive for the user. * I would really encourage you to write one notebook (or more), about the new functionalities of the stochastic solvers, as well as the old methods. This could be the to-go resource, beyond documentation, to understand how these stochastic solvers are now expanded and coherently defined. It does not need to be a lot of work, it can copy a lot of stuff from the development notebooks. It would be fundamental to have the solvers' master equations written down, explaining for each solver what each term is, e.g., the jump operator. Also, in `development-smesolve-tests`, the equations are already there for example. Block 23 is beautiful, and it could be reproduced in the tutorial. . * Similarly, a user guide entry would really enhance the adoption of these solvers. At a later stage, some more refined example applications could be provided. * Review is still ongoing, I will provide comments on the .py files and other solvers files. Help from other developers is welcome as these are massive changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:3824,guid,guide,3824,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['guid'],['guide']
Usability,"n at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUC",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2114,clear,clear,2114,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['clear'],['clear']
Usability,"name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no other package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. having the check in `__init__` might not be correct - it feels like it belongs in `__new__` to me. `__init__` modifies an object that's already been created in Python-space, whereas `__new__` allows you to replace the object creation entirely.; 3. we need to take care to do this in a way that still allows QuTiP to iterate and improve `Qobj.__init__` between major versions. If _we_ define a public interface like this rather than having external libraries provide their own implementations, it puts the burden of maintain compatability on us, and takes it off downstream packages, who are able to define version requirements. For example, calling `otherlib.obj.toqobj()` and having it fail with QuTiP next.0 makes it clear that `otherlib` isn't compatible with QuTiP next, whereas `Qobj(otherlib.obj)` failing would (rightly) be taken as QuTiP being at fault, which stymies our development a little because we're forced to be more conservative than we otherwise would be with our constructor. This is going to be a particular problem with handling `dims`, since we're talking about completely changing the structure for how that's managed internally to help us in other parts of our library.; 4. what will happen with all the other keyword arguments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj.__init__` like normal, but now with our new `Qobj` instance as the argument. This would have a slightly nontrivial interaction with the `copy` keyword, I imagine, but not an unsolvable one.; - error if you pass something that defines `__qutip_qobj__` ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:2824,clear,clear,2824,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['clear'],['clear']
Usability,"ndarray(dtype=object)` arrays behaved when containing objects that all implemented `__array__`. To get around _some_ of these problems, they've introduced `__array_function__` and `__array_ufunc__`, though to me at best these are bandages. Those two concerns aren't immediately applicable in QuTiP, but they're sort of indicative of potential problems when using a `__qutip_qobj__` method implicitly in functions like `Qobj.__add__`. These are where it becomes very evident that Julia-style programming doesn't apply in the same way in Python. Python is only a single-dispatch language, so `a + b` will dispatch using the table of `a` predominantly, whereas `b + a` will dispatch on `b`. In a proper multiple-dispatch library the rules are separate to the classes, so neither class is called preferentially, there's just one rule and either library can define it. My point with this is that if `Qobj.__add__` has a case where it handles Qobj-like types, then we prevent the other library from overriding the method. Multi-methods like this simply don't work the same in Python as they do in Julia, so even if `Qobj` implements interfaces from a variety of other libraries, we'd never get good consistent behaviour with functions like this. Operations that ought to be commutative like `+` would become dependent on operand order. To some degree, implementing the interface would be a guarantee that an object would always be able to follow QuTiP's semantics, otherwise it would just be annoying to users - _sometimes_ an object would be able to be used implicitly, sometimes not. I know the ""Python way"" is supposedly ""try it and see"", but if you're doing any serious development, that quickly becomes unreasonable if a type works some times, but not others. The other part of the Python way is ""explicit is better than implicit"", and here having an explicit type conversion to me is just being explicit about which library's semantics you want to follow, which is easier to read and easier to debug.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108:1657,simpl,simply,1657,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108,1,['simpl'],['simply']
Usability,"ng like use tuples instead of `Seq` and lists instead of `Par`, but that then ran into a couple issues. Namely, it wasn't as obvious what each kind of container meant, and it was harder to automatically flatten (e.g.: `Seq(1, Seq(2, 3), 4)` is identical to `Seq(1, 2, 3, 4)` and `Seq(1, Par(2), 3)` is identical to `Seq(1, 2, 3)` but distinct from `Seq(1, Par(2, 3))`). One alternative may be to have a single subclass `Outcome` of `tuple` instead of both, then overload operators like `|` to mean parallel. Internally, could use two subclasses like `Seq` and `Par` but display visually as `Outcome(1, 2 | 3, 4)` instead of `Outcome(1, Par(2, 3), 4)`. > * In QuTiP it's more normal to have the helper constructors not on the class as classmethods. I do like secondary constructors as classmethods, but I think in cases like this where there are essentially an infinite number of possible constructors, it makes sense to not ""bless"" any of them by sticking them on the class. Sounds good, will move those out to be ordinary functions, then. > * It would be good to have one really nice use case that we could turn into a guide entry in the documentation. The current small examples are great, but it would be good to add one slightly bigger worked example that did something more ""exciting"". I've played around with using `if_` to compute the noisy channel one gets for state teleportation when operations are perfect but classical outcomes get scrambled; would that be useful, perhaps?. > * I would not push everything into the `qutip` namespace (largely because we would likely not want that in v5, although I should actually check what v5 is doing in `qutip.__init__` these days). Fair enough, easy to drop that as well. Would you want everything dropped, or would some things like the core type `QInstrument` itself be reasonable to keep in `qutip.__all__`?. > Hoping to hear comments from others!. Thanks for your review, I'll work on addressing, then excited to hear what others think as well! 💕",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562:2875,guid,guide,2875,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951352562,1,['guid'],['guide']
Usability,"ng the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just process its options there. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:1633,clear,clear,1633,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,2,"['clear', 'simpl']","['clear', 'simpler']"
Usability,ng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark; - ipyparallel; - unittest2pytest; - pytest-bench,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:2243,simpl,simplegeneric,2243,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['simpl'],['simplegeneric']
Usability,"nstructors when passed sequences of objects that all implement `__array__`. It is still possible to make a Numpy array of `Qobj` even with `Qobj.__array__` defined in Numpy 1.20, but you have to be rather more indirect about it:. ```python; >>> arr = np.empty((3,), dtype=object); >>> arr[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; >>> arr.shape; (3,); >>> arr[0]; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. The reason numpy does this now is because (my understanding is that) defining `__array__` was meant to be a much stronger guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:2422,clear,clearly,2422,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['clear'],['clearly']
Usability,"ntermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Instead, I have a nested list like `[L0, [L1, control1], ...]` where `L0`, `L1`, ... are super-operators. I should also note that I use `mesolve` both for Schrödinger equations and Lindblad equations (relying on `mesolve` delegating to `sesolve`), and the Krotov package uses `H` as a variable/attribute name to refer to nested-Lindbladians or nested Hamiltonians interchangeable. Sorry if that's causing a bit of confusion. I am ultimately interested both in open system and closed system dynamics interchangeably. > [...] In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:1893,clear,clear,1893,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['clear'],['clear']
Usability,"ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; correlation: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... ERROR; correlation: legacy me and es for oscillator in steady-state ... ok; correlation: comparing me and es for oscillator in steady-state ... ok; correlation: legacy spectrum from es and pi methods ... ok; correlation: comparing spectrum from es and fft methods ... ok; correlation: comparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:1431,simpl,simple,1431,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['simpl'],['simple']
Usability,"or instance, if we start from the most excited state for N = 2,; >; > Here where you give an example you could use the; >; > Example; > -----------; >; > heading. It formats nicely in the docs; > see:; > http://qutip.org/docs/latest/apidoc/functions.html#quantum-states; > file qutip.states.py; > for example; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168800674>:; >; > > + -------; > + identity: Qobj matrix (QuTiP class); > + With the correct dimensions (dims); > + """"""; > + N = int(N); > + rho = np.zeros((2**N, 2**N)); > + for i in range(0, 2**N):; > + rho[i, i] = 1; > +; > + spin_dim = [2 for i in range(0, N)]; > + spins_dims = list((spin_dim, spin_dim)); > + identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:7390,clear,clear,7390,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['clear'],['clear']
Usability,"or list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H with constant collapse ... ok; > > > Monte-carlo: Constant H with single collapse operator ... ok; > > > Monte-carlo: Constant H with single expect operator ... ok; > > > Monte-carlo: Collapse terms constant (func format) ... ok; > > > Monte-carlo: Collapse terms constant (str format) ... ok; > > > Monte-carlo: Time-dependent H (func format) ... ok; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:3454,simpl,simple,3454,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"ospection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there are special_value_kind args given, these are replaced with an arg `{name:value}` with the `value` being the value of the special_value_kind at time t. We should use internal flags (attribs) to control the special_value_kind processing, This will be more efficient than checking the args dict at every time step for special_value_kind keys, e.g.; - `_state_vec_key`: default `None`, or string key to the arg element. So, unless I have missed something regarding the importance of `**args`, then I think this plan covers what we need and makes everything a bit simpler, which is always ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:1846,clear,clearly,1846,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['clear'],['clearly']
Usability,"ossible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple pulse scheduling, e.g.; > Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages or; > commonly used language e.g. through quantum assembly language (qasm); > ----------------------------------------------------------------; >; > Best; > Boxi; >; > From: Nathan Shammah<mailto:notifications@github.com>; > Sent: Tuesday, February 25, 2020 8:36 AM; > To: qutip/qutip<mailto:qutip@noreply.github.com>; > Cc: Boxi Li<mailto:etamin1201@gmail.com>; Author<mailto:; > author@noreply.github.com>; > Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:2780,simpl,simple,2780,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['simpl'],['simple']
Usability,"plicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:3932,clear,clear,3932,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,2,['clear'],['clear']
Usability,"ptions` class, is the way in v4 and will probably stay that way for a while. Having a options not knowing about the solver let it accept bad options and typos. Also it hides the options documentation: solver's options could be in the `??solve` function, but not integrator options. The integrator was merged into the solver in v4 and is not made to be used directly by the average user. So the user should not need to know they exist to use qutip, nor refer to them directly to see which options are supported. I'm not sure I am quite following, but my thought was that options would be checked by the solver class when they are passed in. The mechanism the solver class would use for doing the check, would be to pass the description of the allowed options to the SolverOptions class, along with the options themselves. > Not sure I understand why this would be convenient, flat seems a easier to use and less confusing. Ideally the user should not need to know that there are 2 levels of options. The reason for nesting the ode options a little, is to make it clear which options might change if the ODE method changes. If one hides the structure completely, there is nothing to guide the user as to which options are related to what. E.g. If ODE method ""A"" took option ""opt1"" and method ""B"" took ""opt2"" then it's much clearer what is happening if one has to pass `""ode"": {""method"": ""A"", ""opt1"": 1}` and `""ode"": {""method"": ""B""}` than `""method"": ""A"", ""opt1"": 1"" and `""method"": ""B"", ""opt2"": 2`. In the flat case, one might accidentally have `""method"": ""B"": ""opt1"": 1` and ""opt1"" would be ignored. I am not too hung up on the exact approach for this bit though -- I just want it to be clear to the user what is going wrong, and for it to be a little be hard to options for different ODE methods clash with each other or other solver options. I wrote quite a lot in my previous post, but mostly I was suggesting one way to simplify and disentangle things more. I am happy for use to try other ways too.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647:1233,clear,clear,1233,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647,5,"['clear', 'guid', 'simpl']","['clear', 'clearer', 'guide', 'simplify']"
Usability,"py` should stay there. It stands out from all other modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time for cte` could be more explanatory. Similarly elsewhere. * I wonder whether instead `QobjEvo`, `Qobjt` could be even more intuitive for the user. * I would really encourage you to write one notebook (or more), about the new functionalities of the stochastic solvers, as well as the old methods. This could be the to-go resource, beyond documentation, to understand how these stochastic solvers are now expanded and coherently defined. It does not need to be a lot of work, it can copy a lot of stuff from the development notebooks. It would be fundamental to have the solvers' master equations written down, explaining for each solver what each term is, e.g., the jump operator. Also, in `development-smesolve-tests`, the equations are already there for example. Block 23 is beautiful, and it could be reproduced in the tutorial. . * Similarly, a user guide entry would really enhance the adoption of these solvers. At a later stage, some more refined example applications could be provided. * Review is still ongoing, I will provide comments on the .py files and other solvers files. Help from other ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:3094,intuit,intuitive,3094,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['intuit'],['intuitive']
Usability,"quest unless otherwise informed. I'm going to submit another pull request, and it should be much better this; time. I made these changes:. - Fixed whitespace, blank line, and linting issues as far as I can tell; - I'm not sure that I broke lines up entirely the best way in all ; cases, but I think it looks okay enough as of now.; - Took all of my new functions out of floquet.py and placed them; properly into flimesolve.py; - The version of floquet.py that I'll be submitting was one I; directly copy-pasted from the main repository, such that there; shouldn't be any changes whatsoever to it; - replaced all scipy functions with numpy equivalents; - Fixed the issues in correlation.py, as far as I know; - Turns out the issue here was that I never updated correlation.py to; my most current version, which should only add in flimesolve as an option; for solvers (with an if statement or two to get the Hamiltonian into a; FloquetBasis object if flimesolve is the selected solver). Thanks again for your feedback!. On Mon, Jun 26, 2023 at 6:32 PM Fenton Clawson ***@***.***> wrote:. > Hey Eric,; >; > Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Somet",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:1233,feedback,feedback,1233,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,1,['feedback'],['feedback']
Usability,"qutip.floquet does this floquet formalism supports any hamiltonian or just it works for two level systems? Also the code uploaded is not working, how to plot this wigner function? as an initial learning point. Floquet formalism is totally not working fro me. plz help",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-355746265:194,learn,learning,194,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-355746265,1,['learn'],['learning']
Usability,"r guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method for converting `Qobj` to `ndarray` - `Qobj.full()`, similar to `scipy`'s `spmatrix.toarray()` - so `Qobj.__array__` was never a _necessity_, just a convenience in some workflows. Given the tools we can use to suppress the ufunc behaviour, the only question we need to decide on is whether that particular convenience (converting a single `Qobj` to `ndarray` with `np.array` rather than `Qobj.full`) is worth the loss of another (it's now rather faffy to put `Qobj` into an `ndarray`). Both have simple alternatives and I'll go along with either, though my personal preference is not to define `Qobj.__array__`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:3876,simpl,simple,3876,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['simpl'],['simple']
Usability,"r(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + options=options,; > + ); >; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245594985>:; >; > > @@ -929,4 +930,5 @@ def run(self, state0, tlist, *, floquet=False, args=None, e_ops=None):; > stats[""run time""] = progress_bar.total_time(); > # TODO: It would be nice if integrator could give evolution statistics; > # stats.update(_integrator.stats); > +; >; > Why a new empty line here?; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245604228>:; >; > > + self.evecs = _data.permute.indices(; > + evecs, col_perm=np.argsort(perm)); >; > This file already has black ran on it and the style is ok as is.; > (But I just learned that black exclude the newline in it's character count; > while pycodestyle include it.); > Since it's not the main part of your PR, please revert it to it's original; > state.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610200>:; >; > > + total_R_tensor[key] += np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + return total_R_tensor; > +; > +; > +def flimesolve(; > + H,; > + rho0,; > + taulist,; >; > ⬇️ Suggested change; >; > - taulist,; > + tlist,; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610703>:; >; > > + time_sense=0,; > + quicksolve=False,; > + options=None):; > + """"""; > + Parameters; > + ----------; > +; > + H :",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:3305,learn,learned,3305,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['learn'],['learned']
Usability,"re those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of all N quantum trajectories ρ(t)'s expect (**Tr[ρ(t)A] maybe with different dW**), and on the other hand I want to compare the expected average of N quantum trajectories with the result of the master equation(`mesolve.expect`). This is similar to this code in Note (but the result in [Note](https://nbviewer.org/urls/qutip.org/qutip-tutorials/tutorials-v4/time-evolution/016_smesolve-inefficient-detection.ipynb) is `result.measurement`). `fig, ax = plt.subplots(figsize=(8, 4)). for m in result.measurement:; ax.plot(times, m[:, 0].real, ""b"", alpha=0.025). ax.plot(times, result_ref.expect[1], ""k"", lw=2). ax.set_ylim(-25, 25); ax.set_xlim(0, times.max()); ax.set_xlabel(""time"", fontsize=12); ax.plot(times, np.array(result.measurement).mean(axis=0)[:, 0].real, ""b"", lw=2);`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:1816,simpl,simply,1816,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,1,['simpl'],['simply']
Usability,"reated it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There is a bug in eigh on mac with openblas. --> **Switched to <code>qutip.sparse.eigh</code>**; * [x] What does this <code>optimizer</code> function optimize? Could you add a simple description. --> **This functions finds the optimal number of Lanczos algorithm iterations inside Krylov, added as small description**; * [x] <code>_estimate_norm</code> is nerver used. --> **Removed**; * [x] Why is tlist here and not in solve? It seems strange that you can reuse one instance for multiple H and psi0, but you cannot change tlist. --> **Removed when deprecating <code>KSolve</code> class**; * [x] Why do you need KSolve? --> **It was a workaround to the cognitive complexity check of github. But we decided to revert back to a non Class solver, as it adds another type of complexity.**; * [x] Increasing pdx here when it is already controlled by enumerate is strange. The best would be to include the first partition here too. Otherwise using update_progress_bar(pdx + 1) is clearer. --> **Changed ""pdx"" into ""idx"". Added the first lazy iteration inside the loop, now it is more clear with <code>update_progress_bar(idx)</code>.**; * [x] There is no work done between update_progress_bar(0) and update_progress_bar(1). Did you start it? --> **Fixed simultaneously by the previous change.**; * [x] Shouldn't this also double the last element? prepare_next_step remove the first and last so the last state is not stored. --> **Good catch, it was a bug. Fixed.**; * [x] <code>_happy_breadkown</code> never used... --> **Should be fixed, performing extra checks**; * [x] evolved states It should keep the input state dims. --> **Checked all situations that came to mind and output dimensions seem to be working properly.**; * [x] Why import <code>mcsolve</code>? --> **Removed**",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:2988,clear,clearer,2988,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,2,['clear'],"['clear', 'clearer']"
Usability,"rivate-user-images.githubusercontent.com/12125783/337660051-e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjAwNTEtZTRmYTNkMGEtY2E1YS00MGU3LWFiNWItMjgzYzMwZjBkZTA3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk5YmExMTE2NGZhZmFmZWZiYjQ2YTU0ZTlmOWNmZDg1MzI5NWQyM2UxNWIzNDUwYWYwOTdjNmZhYzU2ZDBlZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.c_jkyvIGwDUsmTXLIAr5LI0-u2IhfVNWo2orjBvElfk) with names as strings.; > ; > It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians; > ; > ![image](https://private-user-images.githubusercontent.com/12125783/337661271-ad856f69-e0f2-49a2-9ab0-f88e84444373.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjEyNzEtYWQ4NTZmNjktZTBmMi00OWEyLTlhYjAtZjg4ZTg0NDQ0MzczLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTAzYTljNGFhMDMxY2RkNmU1ZWRiZjk1YzNkODllNjdjOTlkNDIxMDBhNDgxOTI0MWEyNmFlZjM1MTZjY2I5NTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.D6pMkAw1y3WWyirs_J8dFthmGjY4V6rIMr6JUHYZ19Y). Thank you for being so clear with the explanation, now I am able to build the html. I have done this upd",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051:1202,guid,guide,1202,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051,2,['guid'],"['guide', 'guide-tensor']"
Usability,"rlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5434,simpl,simple,5434,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"rsonally envisage an ecosystem where one can write down an hamiltonian in the tool of choice, obtain the exact time evolution with qutip, and maybe have a look at it’s semiclassical trajectory. Jump into netket and check if a variational representation can properly capture the correlations. Trotterize the hamiltonian and get a circuit, without worrying about how to convert from one framework to the other. . I want to start the discussion on this topic eagerly because I am aware that it will take a fairly long time. If there is anything I can do to make your future internal discussions easier, do let me know. > I just want to caution you in case you're trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > T",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1256,simpl,simply,1256,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['simpl'],['simply']
Usability,"s) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj negation ... ok; > > > Qobj equals ... ok; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5764,simpl,simple,5764,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['simpl'],['simple']
Usability,"sis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit short-sighted. We can define, for example, `Space.__eq__` as; ```python; class Space:; def __eq__(self, other):; return (; self is other; or (; isinstance(other, Space); and self.size == other.size; and self.basis == other.basis; ); ); ```; so we'll almost invariably get the benefits right now, but we're rather more future-proof in the code. By analogy, it's clearly wrong to do `(1, 2) is (1, 2)` to compare tuples, even though `tuple` produces singletons in CPython (and that code will generally be `True`). The Python `tuple` class is basically what inspired me, and I'm 100% certain that the Python devs are smarter than I am, so we should probab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:3026,simpl,simplifies,3026,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['simpl'],['simplifies']
Usability,"specific use cases. My idea was a bit more simple - precomputing the `coherent_dm` operators (using qutip.coherent_dm) and using the `expect` function. But that performs worse that the original `qfunc` as well as this implementation of course. So this is great. I would be happy to merge this but have one thought:. This new implementation is sacrificing the ease-of-understanding of how Q-functions are computed with a very efficient and fast, but complicated class-based implementation. This means that users who want to look under the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:1160,simpl,simple,1160,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['simpl'],['simple']
Usability,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2647,intuit,intuitively,2647,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['intuit'],['intuitively']
Usability,"st sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a totally fair test, and simply replicate the full functionality of `qutip.displace` (including creating a `Qobj` at the end), my method is ~4x faster on small matrices (`1 <= dim <= 20`) and it only goes up from there (I found it's about ~10x faster at `dim = 1000`, and beyond that `qutip.displace` is too slow to bother). If I store the calculation of the eigensystem, and output an `ndarray` instead of converting to `csr_matrix` (and so don't produce a `Qobj`), then I find speed ups in getting the operator for a new `alpha` as ~100x for small matr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:1894,simpl,simpler,1894,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['simpl'],['simpler']
Usability,"sum_data = n_sum.data. def D2_ρ(t, ρ_vec):; e1 = cy.cy_expect_rho_vec(n_sum_data, ρ_vec, False); out = np.zeros((1,len(ρ_vec)), dtype=complex); out += cy.spmv(n_sum_data, ρ_vec) - e1 * ρ_vec; return out. res = general_stochastic(operator_to_vector(ρ0), times, d1=D1_ρ, d2=D2_ρ,; e_ops=[spre(op) for op in e_ops],; ntraj=ntraj, solver='explicit1.5',; m_ops=[spre(x)], dW_factors=[1/(2*sqrt(χ))],; nsubsteps=nsubsteps, store_measurement=True, normalize=True,; noise=123456, options=opts). # theoretical expressions for the conditional variances. r = χ/γ. VX0 = (sqrt(1+8*r) - 1)/(8*r). VX = VX0 + 2*VX0*(1 + 1/(8*VX0*r)) / (exp((8*VX0*r+1)*γ*times)*(1+1/(4*r*VX0))**2 - 1). VY = 0.5 + r - r*exp(-γ*times). #%%%%%%%% Calculate manually expectation values from states; ; rho_list = [vector_to_operator(rho) for rho in res.states[0]]. for i, rho in enumerate(rho_list):; rho_list[i] = rho / rho.tr(). my_expect = [expect(op, rho_list) for op in e_ops]. #%%%%%%%% Plotting. plt.figure('Time Evolution 2 -- Quantum State', clear=True). ax1 = plt.subplot(3,1,1, ylabel=r'$\langle X^2\rangle - \langle X\rangle^2$'); ax2 = plt.subplot(3,1,2, ylabel=r'$\langle Y^2\rangle - \langle Y\rangle^2$'); ax3 = plt.subplot(3,1,3, ylabel=r'$\langle X\rangle$', xlabel='time'). # plot expectation values calculated from states; ax1.plot(times, my_expect[1]-my_expect[0]**2, label=r'$\langle\rangle$ from stored state'); ax2.plot(times, my_expect[3]-my_expect[2]**2, label=r'$\langle\rangle$ from stored state'); ax3.plot(times, my_expect[0], label=r'$\langle\rangle$ from stored state'). # plot expectation values from result.expect; ax1.plot(times, res.expect[1]-res.expect[0]**2, label=r'$\langle\rangle$ from result.expect'); ax2.plot(times, res.expect[3]-res.expect[2]**2, label=r'$\langle\rangle$ from result.expect'); ax3.plot(times, res.expect[0], label=r'$\langle\rangle$ from result.expect'). ax1.plot(times, VX, 'k--', label='theory'); ax2.plot(times, VY, 'k--', label='theory'). ax1.legend(); ax2.legend(); ax",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1379#issuecomment-736750957:2948,clear,clear,2948,https://qutip.org,https://github.com/qutip/qutip/issues/1379#issuecomment-736750957,1,['clear'],['clear']
Usability,"thanks eric, I like the option of creation and full. Took me a moment to understand the meaning of the ''missing'' option. is there some clear situation where someone would use this? perhaps there is a better name too? . for `default_dtype_range`, how about `default_dtype_scope`?. i will try and play with the PR, see if it does what i would expect",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2519#issuecomment-2406431381:137,clear,clear,137,https://qutip.org,https://github.com/qutip/qutip/pull/2519#issuecomment-2406431381,1,['clear'],['clear']
Usability,"thanks for the comment, I didn't know about `qutip.propagator`. > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple. cool, can i learn more about this from you?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660472157:143,learn,learning,143,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660472157,2,['learn'],"['learn', 'learning']"
Usability,"tigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring the circuit compiler to allow simple pulse scheduling,; > > e.g. Restriction one pulses that can be turned on at the same time.; > > - Features to perform error mitigation techniques in QuTiP, such as; > > zero-error extrapolation.; > > - APIs to allow import quantum circuits from other software packages; > > or commonly used language e.g. through quantum assembly language (qasm); > >; > > ------------------------------; > >; > > Also, the last outcomes have some overlap with the last project. Although; > > I also find this circuit importation very important, I guess two projects; > > should not have overlap if they are both selected.; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <; > https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA; > >,; > > or unsubscribe; > > <; > https://g",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:6308,simpl,simple,6308,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['simpl'],['simple']
Usability,"torial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes than the number of available slots.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:2135,clear,clear,2135,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['clear'],['clear']
Usability,"ts calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE mean? How comes the array[1, 10, 11]? ...; > ; > At this stage, I have to resort to the original author of the code, and would like to hear your opinions and detailed guidelines. I will write some test codes in Matlab first in the coming weeks, if I have time. Thanks for your response.; > ; > Cheers,; > Qi; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:2166,guid,guidelines,2166,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['guid'],['guidelines']
Usability,"ts could pick up imaginary parts etc. Perhaps this kind of thing cancels out when you add the two unphysical D-L baths to get the shifted D-L bath?. One can use the analytic expression for monomer absorption spectra to test which Drude-Lorentz bath is correct. Also, one can use [DM-HEOM](https://github.com/noma/dm-heom) [2], where they have implemented the ""Shifted Drude Lorentz Bath"" [1]. Compared with their Matsubara implementation, it gives the same density matrix evolution (up to the numerical accuracy) as QuTiP's HEOM gives with `DrudeLorentzBath` and $\gamma \rightarrow \gamma \pm \Omega$ and $\lambda \rightarrow \lambda/2$. But it is not the case for `DrudeLorentzPadeBath`. You are right to think that the unphysical part goes away when two baths are added [1], one with $+i\Omega$ and the other with $-i\Omega$. > However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. You are very much in the right to be absolutely sure before making a change. As far as I understand and have tested, it will not change the real case because the changes are as follows (I have removed all the other lines in between for clarity):. ```python; - ck_real = [np.real(eta) for eta in eta_p]; + ck_real = [eta for eta in eta_p]. - ck_imag = [np.imag(eta_p[0])]; + ck_imag = [-lam*gamma]. - eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0) - 1.0j)]; + eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0))]; ```; if `gamma` is real, `lam * gamma * self._cot(gamma * beta / 2.0)` would be real, and hence `ck_real` would stay the same as before, and the same can be said for `ck_imag`. After all, this is how it is done for `DrudeLorentzBath`, so it should not impact anything. > A more ""complete"" and probably more efficient solution would be to add a whole new ShiftedDrudeLorentzBath, and to put in analytically derived formulas for the Matsubara",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274:1456,clear,clear,1456,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274,1,['clear'],['clear']
Usability,"ture internal discussions easier, do let me know. > I just want to caution you in case you're trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1881,simpl,simply,1881,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['simpl'],['simply']
Usability,"ugh your comments it appears that something; definitely went weird with formatting and/or merging. I'll comb back; through and make to fix any of these issues before I request a re-review. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > -------------",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839:1042,guid,guide,1042,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839,1,['guid'],['guide']
Usability,"y.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a totally fair test, and simply replicate the full functionality of `qutip.displace` (including creating a `Qobj` at the end), my method is ~4x faster on small matrices (`1 <= dim <= 20`) and it only goes up from there (I found it's about ~10x faster at `dim = 1000`, and beyond that `qutip.displace` is too slow to bother). If I store the calculation of the eigensystem, and output an `ndarray` instead of converting to `csr_matrix` (and so don't produce a `Qobj`), then I find speed ups in getting the operator for a new `alpha` as ~100x for small matrices and ~25x for large ones. The larger a matrix is, the more the computational time is dominated by the dense dot product at the end. Code:; ```python; class Displacer:; def __init__(self, n):; # The off-diagonal of the real-symmetric similar matrix T.; sym = (2*(np.arange(1, n)%2) - 1) * np.sqrt(np.arange(1, n)); # Solve the eigensystem.; self.evals, self.evecs = scipy.linalg.eigh_tridiagonal(np.zeros(n), sym); self.range = np.arange(n); self.t_scale = 1j**(self.range % ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:2379,simpl,simply,2379,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['simpl'],['simply']
