quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"butes=\"""" + fAttributes + ""\"" "";; 265 if (xmlform) {; 266 out += ""> "";; 267 }; 268 if (xmlform) {; 269 if (fCode.Length()) {; 270 out += ""\n<![CDATA[ { "" + fCode + "" ]]>\n "";; 271 } else if (fReadFuncPtr) {; 272 // Can we guess?; 273 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 274 } else if (fReadRawFuncPtr) {; 275 // Can we guess?; 276 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 277 }; 278 } else {; 279 if (fCode.Length()) {; 280 out += ""code=\""{"" + fCode + ""}\"" "";; 281 } else if (fReadFuncPtr) {; 282 // Can we guess?; 283 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 284 } else if (fReadRawFuncPtr) {; 285 // Can we guess?; 286 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 287 }; 288 }; 289 if (xmlform) {; 290 out += end;; 291 }; 292}; 293 ; 294////////////////////////////////////////////////////////////////////////////////; 295/// Zero out this rule object.; 296 ; 297void TSchemaRule::Clear( const char * /* option */); 298{; 299 fVersion.Clear();; 300 fChecksum.Clear();; 301 fSourceClass.Clear();; 302 fTarget.Clear();; 303 fSource.Clear();; 304 fInclude.Clear();; 305 fCode.Clear();; 306 fAttributes.Clear();; 307 fReadRawFuncPtr = nullptr;; 308 fReadFuncPtr = nullptr;; 309 fRuleType = kNone;; 310 delete fVersionVect; fVersionVect = nullptr;; 311 delete fChecksumVect; fChecksumVect = nullptr;; 312 delete fTargetVect; fTargetVect = nullptr;; 313 delete fSourceVect; fSourceVect = nullptr;; 314 delete fIncludeVect; fIncludeVect = nullptr;; 315}; 316 ; 317////////////////////////////////////////////////////////////////////////////////; 318/// Set the content fot this object from the rule; 319/// See TClass::AddRule for details on the syntax.; 320 ; 321Bool_t TSchemaRule::SetFromRule( const char *rule ); 322{; 323 //-----------------------------------------------------------------------; 324 // Parse the rule and check it's validity; 325 /////////////////////////////////////////////////////////////////////////////; 326 ; 327 ROOT::Intern",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:9441,Clear,Clear,9441,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Clear'],['Clear']
Usability,"bwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return lenght of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the specified window and it is equivalent to; ClearArea(id, 0, 0, 0, 0). Int_t KeysymToKeycode(UInt_t keysym); Converts the ""keysym"" to the appropriate keycode. For example,; keysym is a letter and keycode is the matching keyboard key (which; is dependend on the current keyboard mapping). If the specified; ""keysym"" is not defined for any keycode, returns zero. void FillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; using the GC you specify. GC components in use are: function, plane-mask, fill-style,; subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). void DrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. GC components in use: functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:53152,Clear,ClearWindow,53152,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,9,['Clear'],"['ClearArea', 'ClearWindow', 'Clears']"
Usability,"bwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return length of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the specified window and it is equivalent to; ClearArea(id, 0, 0, 0, 0). Int_t KeysymToKeycode(UInt_t keysym); Converts the ""keysym"" to the appropriate keycode. For example,; keysym is a letter and keycode is the matching keyboard key (which; is dependend on the current keyboard mapping). If the specified; ""keysym"" is not defined for any keycode, returns zero. void FillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; using the GC you specify. GC components in use are: function, plane-mask, fill-style,; subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). void DrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. GC components in use: functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualX.html:56806,Clear,ClearWindow,56806,root/html602/TVirtualX.html,https://root.cern,https://root.cern/root/html602/TVirtualX.html,3,['Clear'],"['ClearArea', 'ClearWindow', 'Clears']"
Usability,"by a warning message issued by M when running into troubles. Problems can be:. a bug in M; an error in the \(\mbox{FCN}\); a highly difficult problem (usually strong correlations among parameters); floating–point precision. 4.5 The output from minimization; 4.5.1 The FunctionMinimum; The output of the minimizers is the FunctionMinimum. The FunctionMinimum contains the result of the minimization in both internal parameter representation and external parameter representation.; 4.5.2 User representable format: MnUserParameterState; On request, the result of the minimization is transformed into a user representable format for parameters and errors, the MnUserParameterState.; 4.5.3 Access values, errors, covariance; The result can be accessed via methods like MnUserParameterState::value(unsigned int n) and MnUserParameterState::error(unsigned int n), where \(n\) is the index of the parameter in the list of parameters defined by the user.; 4.5.4 Printout of the result; The FunctionMinimum can be printed on the output simply via std::cout. It will print both the internal and external state, that is parameters, errors and the covariance matrix (if available). It also tells the user if M did converge or not by issuing an appropriate message. If a covariance matrix is available, the global correlation coefficients are printed as well.; 4.5.5 Global correlation coefficients; The global correlation coefficient for parameter \(n\) is a number between zero and one which gives the correlation between parameter \(n\) and that linear combination of all other parameters which is most strongly correlated with \(n\).; 5 M application programming interface (API); [api:api]; 5.1 FunctionMinimum; [api:fm] The FunctionMinimum is the output of the minimizers and contains the minimization result. The state at the minimum is available both in internal and external representations. For the external representations the return methods. FunctionMinimum::userState(),; FunctionMinimum::userParamete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:37602,simpl,simply,37602,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['simpl'],['simply']
Usability,by adjusting values of external RooAbsReal values Only functional when external representations are lvalues. ; Implements RooAbsBinning.; Definition at line 158 of file RooParamBinning.cxx. ◆ Streamer(). void RooParamBinning::Streamer ; (; TBuffer & ; R__b). overridevirtual . Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ; Reimplemented from RooAbsBinning. ◆ StreamerNVirtual(). void RooParamBinning::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file RooParamBinning.h. ◆ xhi(). RooAbsReal * RooParamBinning::xhi ; (; ); const. inlineprotected . Definition at line 70 of file RooParamBinning.h. ◆ xlo(). RooAbsReal * RooParamBinning::xlo ; (; ); const. inlineprotected . Definition at line 69 of file RooParamBinning.h. Member Data Documentation. ◆ _array. double* RooParamBinning::_array = nullptr. mutableprotected . Definition at line 61 of file RooParamBinning.h. ◆ _binw. double RooParamBinning::_binw = 0. protected . Definition at line 65 of file RooParamBinning.h. ◆ _lp. RooListProxy* RooParamBinning::_lp = nullptr. mutableprotected . Definition at line 66 of file RooParamBinning.h. ◆ _nbins. Int_t RooParamBinning::_nbins = 100. protected . Definition at line 64 of file RooParamBinning.h. ◆ _owner. RooAbsArg* RooParamBinning::_owner = nullptr. mutableprotected . Definition at line 67 of file RooParamBinning.h. ◆ _xhi. RooAbsReal* RooParamBinning::_xhi = nullptr. mutableprotected . Definition at line 63 of file RooParamBinning.h. ◆ _xlo. RooAbsReal* RooParamBinning::_xlo = nullptr. mutableprotected . do not persist ; Definition at line 62 of file RooParamBinning.h. Libraries for RooParamBinning:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooParamBinning.h; roofit/roofitcore/src/RooParamBinning.cxx. RooParamBinning. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParamBinning.html:26030,Guid,Guide,26030,doc/master/classRooParamBinning.html,https://root.cern,https://root.cern/doc/master/classRooParamBinning.html,1,['Guid'],['Guide']
Usability,"by default) is used otherwise linear one. Int_t CountKeys() const. Counts the number of different key values. Bool_t FillIndexArray(). File the array of the pointers and check whether; the original table has been sorted to avoid an extra job. Return: kTRUE - the table has been sorted; kFALSE - otherwise. Int_t FindFirstKey(const void* key) const. Looks for the first index of the ""key""; within SORTED table AFTER sorting. Returns: = -1 if the ""key"" was not found. Note: This method has no sense for; ==== the float and double key. To get the index within the original; unsorted table the GetIndex() method; may be used like this:; GetIndex(FindFirstKey(key)). const char * GetTableName() const; to be documented. const char * GetTableTitle() const; to be documented. const char * GetTableType() const; to be documented. TTable * GetTable() const; to be documented. void SetSearchMethod(); Select search function at once. void QSort(); Call the standard C run-time library ""qsort"" function. void LearnTable(). LearnTable() allows the TTableSorter to learn the structure of the; tables used to fill the ntuple.; table - the name of the table; buildTree - if kTRUE, then add TBranches to the TTree for each table; column (default=kFALSE). const char * At(Int_t i) const; {return fFirstParentRow + i*fParentRowSize;}. Long_t GetRowSize(); { return fParentRowSize; }. Int_t operator[](Int_t value) const; { return BSearch(value); }. Int_t operator[](Long_t value) const; { return BSearch(value); }. Int_t operator[](Double_t value) const; { return BSearch(value); }. Int_t operator[](void* value) const; { return BSearch(value); }. Int_t operator()(Float_t value); { return BinarySearch(value); }. Int_t operator()(Int_t value); { return BinarySearch(value); }. Int_t operator()(Long_t value); { return BinarySearch(value); }. Int_t operator()(Double_t value); { return BinarySearch(value); }. TTableSorter(const TTableSorter& ). TTableSorter & operator=(const TTableSorter& ). int CompareFloat_t(const v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTableSorter.html:19233,Learn,LearnTable,19233,root/html534/TTableSorter.html,https://root.cern,https://root.cern/root/html534/TTableSorter.html,3,['Learn'],['LearnTable']
Usability,"by default) is used otherwise linear one. Int_t CountKeys() const. Counts the number of different key values. Bool_t FillIndexArray(). File the array of the pointers and check whether; the original table has been sorted to avoid an extra job. Return: kTRUE - the table has been sorted; kFALSE - otherwise. Int_t FindFirstKey(const void* key) const. Looks for the first index of the ""key""; within SORTED table AFTER sorting. Returns: = -1 if the ""key"" was not found. Note: This method has no sense for; ==== the float and double key. To get the index within the original; unsorted table the GetIndex() method; may be used like this:; GetIndex(FindFirstKey(key)). const char * GetTableName() const; to be documented. const char * GetTableTitle() const; to be documented. const char * GetTableType() const; to be documented. TTable * GetTable() const; to be documented. void SetSearchMethod(); Select search function at once. void QSort(); Call the standard C run-time library ""qsort"" function. void LearnTable(). LearnTable() allows the TTableSorter to learn the structure of the; tables used to fill the ntuple.; table - the name of the table; buildTree - if kTRUE, then add TBranches to the TTree for each table; column (default=kFALSE). const char * At(Int_t i) const; {return fFirstParentRow + i*fParentRowSize;}. Long_t GetRowSize(); { return fParentRowSize; }. Int_t operator[](Int_t value) const; { return BSearch(value); }. Int_t operator[](Long_t value) const; { return BSearch(value); }. Int_t operator[](Double_t value) const; { return BSearch(value); }. Int_t operator[](void* value) const; { return BSearch(value); }. Int_t operator()(Float_t value); { return BinarySearch(value); }. Int_t operator()(Int_t value); { return BinarySearch(value); }. Int_t operator()(Long_t value); { return BinarySearch(value); }. Int_t operator()(Double_t value); { return BinarySearch(value); }. int CompareFloat_t(const void** , const void** ). int CompareInt_t(const void** , const void** ). int CompareL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:19135,Learn,LearnTable,19135,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,3,['Learn'],['LearnTable']
Usability,"by having to manually specify the value and shape server properties, it is very easy to get them wrong.; If you want to safely replace a server, you should use RooAbsArg::redirectServers(), which replaces the server in-place at the same position of the server list, keeps the same value and shape server properties, and also updates the corresponding proxies. ; Definition at line 421 of file RooAbsArg.cxx. ◆ resetDataToken(). void RooAbsArg::resetDataToken ; (; ). inline . Definition at line 681 of file RooAbsArg.h. ◆ serverNameChangeHook(). virtual void RooAbsArg::serverNameChangeHook ; (; const RooAbsArg * ; , . const RooAbsArg * ;  . ). inlinevirtual . Definition at line 248 of file RooAbsArg.h. ◆ servers(). const RefCountList_t & RooAbsArg::servers ; (; ); const. inline . List of all servers of this object. ; Definition at line 180 of file RooAbsArg.h. ◆ setAttribute(). void RooAbsArg::setAttribute ; (; const Text_t * ; name, . bool ; value = true . ). Set (default) or clear a named boolean attribute of this object. ; Definition at line 222 of file RooAbsArg.cxx. ◆ setCacheAndTrackHints(). virtual void RooAbsArg::setCacheAndTrackHints ; (; RooArgSet & ; ). inlinevirtual . Reimplemented in RooLagrangianMorphFunc, RooAbsAnaConvPdf, RooAddPdf, RooProdPdf, RooProduct, RooRealSumFunc, and RooRealSumPdf.; Definition at line 385 of file RooAbsArg.h. ◆ setCachedValue(). virtual void RooAbsArg::setCachedValue ; (; double ; , . bool ; = true . ). inlinevirtual . Overwrite the current value stored in this object, making it look like this object computed that value. ; recompute their values. ; Reimplemented in RooAbsCategory, and RooAbsReal.; Definition at line 481 of file RooAbsArg.h. ◆ setDataToken(). void RooAbsArg::setDataToken ; (; std::size_t ; index). Sets the token for retrieving results in the BatchMode. For internal use only. ; Definition at line 2555 of file RooAbsArg.cxx. ◆ setDirtyInhibit(). void RooAbsArg::setDirtyInhibit ; (; bool ; flag). static . Control globa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:95818,clear,clear,95818,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clear']
Usability,"by the mouse in this pavetext.Definition TPaveText.cxx:317; TPaveText::SaveLinesvirtual void SaveLines(std::ostream &out, const char *name, Bool_t saved)Save lines of this pavetext as C++ statements on output stream out.Definition TPaveText.cxx:682; TPaveText::DeleteTextvirtual void DeleteText()Delete text at the mouse position.Definition TPaveText.cxx:227; TPaveText::Clearvoid Clear(Option_t *option="""") overrideClear all lines in this pavetext.Definition TPaveText.cxx:217; TPaveText::operator=TPaveText & operator=(const TPaveText &)assignment operatorDefinition TPaveText.cxx:141; TPaveText::AddBoxvirtual TBox * AddBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Add a new graphics box to this pavetext.Definition TPaveText.cxx:163; TPaveText::Paintvoid Paint(Option_t *option="""") overridePaint this pavetext with its current attributes.Definition TPaveText.cxx:419; TPaveText::GetLinevirtual TText * GetLine(Int_t number) constGet Pointer to line number in this pavetext.Definition TPaveText.cxx:284; TPaveText::fLabelTString fLabelLabel written at the top of the pavetext.Definition TPaveText.h:24; TPaveText::InsertLinevirtual void InsertLine()Add a new line at the mouse position.Definition TPaveText.cxx:386; TPaveText::GetLineWithvirtual TText * GetLineWith(const char *text) constGet Pointer to first containing string text in this pavetext.Definition TPaveText.cxx:302; TPaveText::fMarginFloat_t fMarginText margin.Definition TPaveText.h:26; TPaveText::UseCurrentStylevoid UseCurrentStyle() overrideReplace current attributes by current style.Definition TPaveText.cxx:874; TPaveA TBox with a bordersize and a shadow option.Definition TPave.h:19; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTextBase class for several text objects.Definition TText.h:22; int; Drawth1 Draw(). graf2dgrafincTPaveText.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveText_8h_source.html:9768,Guid,Guide,9768,doc/master/TPaveText_8h_source.html,https://root.cern,https://root.cern/doc/master/TPaveText_8h_source.html,1,['Guid'],['Guide']
Usability,"by the user. ; Definition at line 678 of file RooAbsCategory.cxx. ◆ writeToStream(). void RooAbsCategory::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to ostream. ; Implements RooAbsArg.; Reimplemented in RooCategory, RooMappedCategory, RooMultiCategory, and RooThresholdCategory.; Definition at line 391 of file RooAbsCategory.cxx. Friends And Related Symbol Documentation. ◆ RooVectorDataStore. friend class RooVectorDataStore. friend . Definition at line 203 of file RooAbsCategory.h. Member Data Documentation. ◆ _currentIndex. value_type RooAbsCategory::_currentIndex {std::numeric_limits<int>::min()}. mutableprotected . Current category state. ; Definition at line 216 of file RooAbsCategory.h. ◆ _insertionOrder. std::vector<std::string> RooAbsCategory::_insertionOrder. protected . Keeps track in which order state numbers have been inserted. Make sure this is updated in recomputeShape(). ; Definition at line 218 of file RooAbsCategory.h. ◆ _legacyStates. std::map<value_type, std::unique_ptr<RooCatType, std::function<void(RooCatType*)> > > RooAbsCategory::_legacyStates. mutableprotected . ! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible. ; Definition at line 219 of file RooAbsCategory.h. ◆ _stateNames. std::map<std::string, value_type> RooAbsCategory::_stateNames. protected . Map state names to index numbers. Make sure state names are updated in recomputeShape(). ; Definition at line 217 of file RooAbsCategory.h. ◆ _treeReadBuffer. TreeReadBuffer* RooAbsCategory::_treeReadBuffer = nullptr. private . Definition at line 224 of file RooAbsCategory.h. Libraries for RooAbsCategory:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCategory.h; roofit/roofitcore/src/RooAbsCategory.cxx. RooAbsCategory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategory.html:65672,Guid,Guide,65672,doc/master/classRooAbsCategory.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategory.html,1,['Guid'],['Guide']
Usability,"by ‘@’ (e.g. “@out”) if one wants to normalize the corresponding value. Also, if the string ends with ‘!’, output neurons are set up for classification, i.e. with a sigmoid (1 neuron) or softmax (more neurons) activation function.; Many questions on the good usage of neural network, including rules of dumb to determine the best network topology are addressed at ftp://ftp.sas.com/pub/neural/FAQ.html; // a simple network: 2 inputs, 10 hidden and 1 normalized; // output neuron; TMultiLayerPerceptron network(""r,z:10:@Br"",tree);; Expressions are evaluated as for TTree::Draw(). Input and outputs are taken from the TTree associated with the network. This TTree can be given as argument of the constructor or defined later with TMultiLayerPerceptron::SetData(). Events can also be weighted. The weight expression can be given in the constructor or set later with the method SetWeight() of the class TMultiLayerPerceptron. Two datasets must be defined before learning the network: a training dataset that is used when minimizing the error, and a test dataset that will avoid bias. Those two datasets can be built aside and then given to the network, or can be built from a standard expression. By default, half of the events are put in both datasets.; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; The method TMultiLayerPerceptron::SetLearningMethod() defines the learning method. Learning methods are:; TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS // default; The training can start with TMultiLayerPerceptron::Train(Int_t nepoch,Option_t* options). The first argument is the number of epochs while option is a string that can contain “text” (simple text output), “grap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:236020,learn,learning,236020,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learning']
Usability,"bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. This employs two different hash functions, depending on ntxt:; ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; else: MurmurHash3_x64_128 http://code.google.com/p/smhasher. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. TString MD5() const; Return the MD5 digest for this string, in a string representation. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend character c rep times to string. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TString.html:11697,simpl,simple,11697,root/html534/TString.html,https://root.cern,https://root.cern/root/html534/TString.html,3,['simpl'],['simple']
Usability,"c (Int_t n);  identifies if column has numeric value ;  ; TObjArray * TakeColInfos ();  take ownership over colinfos ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableData.html:1845,Clear,Clear,1845,doc/master/classTSQLTableData.html,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html,1,['Clear'],['Clear']
Usability,c . ReturnsName of the file containing the class declaration ; Definition at line 49 of file RooSecondMoment.h. ◆ evaluate(). double RooSecondMoment::evaluate ; (; ); const. overrideprotectedvirtual . Calculate value. ; Implements RooAbsReal.; Definition at line 166 of file RooSecondMoment.cxx. ◆ iF(). const RooAbsReal & RooSecondMoment::iF ; (; ). inline . Definition at line 39 of file RooSecondMoment.h. ◆ IsA(). TClass * RooSecondMoment::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsMoment.; Definition at line 49 of file RooSecondMoment.h. ◆ ixF(). const RooAbsReal & RooSecondMoment::ixF ; (; ). inline . Definition at line 38 of file RooSecondMoment.h. ◆ Streamer(). void RooSecondMoment::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsMoment. ◆ StreamerNVirtual(). void RooSecondMoment::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file RooSecondMoment.h. ◆ xF(). const RooAbsReal & RooSecondMoment::xF ; (; ). inline . Definition at line 37 of file RooSecondMoment.h. Member Data Documentation. ◆ _if. RooRealProxy RooSecondMoment::_if. protected . Int(F(x))dx ;. ; Definition at line 45 of file RooSecondMoment.h. ◆ _ixf. RooRealProxy RooSecondMoment::_ixf. protected . Int((X-offset)*F(X))dx ;. ; Definition at line 44 of file RooSecondMoment.h. ◆ _xf. RooRealProxy RooSecondMoment::_xf. protected . (X-offset)*F ; Definition at line 43 of file RooSecondMoment.h. ◆ _xfOffset. double RooSecondMoment::_xfOffset. protected . offset ; Definition at line 46 of file RooSecondMoment.h. Libraries for RooSecondMoment:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooSecondMoment.h; roofit/roofitcore/src/RooSecondMoment.cxx. RooSecondMoment. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:08 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSecondMoment.html:64542,Guid,Guide,64542,doc/master/classRooSecondMoment.html,https://root.cern,https://root.cern/doc/master/classRooSecondMoment.html,1,['Guid'],['Guide']
Usability,"c . ReturnsName of the file containing the class declaration ; Definition at line 67 of file ConfInterval.h. ◆ GetParameters(). virtual RooArgSet * RooStats::ConfInterval::GetParameters ; (; ); const. pure virtual . return list of parameters of interest defining this interval (return a new cloned list) ; Implemented in RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ IsA(). TClass * RooStats::ConfInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval.; Definition at line 67 of file ConfInterval.h. ◆ IsInInterval(). virtual bool RooStats::ConfInterval::IsInInterval ; (; const RooArgSet & ; ); const. pure virtual . check if given point is in the interval ; Implemented in RooStats::LikelihoodInterval, RooStats::PointSetInterval, RooStats::SimpleInterval, and RooStats::MCMCInterval. ◆ operator=(). ConfInterval & RooStats::ConfInterval::operator= ; (; const ConfInterval & ; other). inline . operator= ; Definition at line 43 of file ConfInterval.h. ◆ SetConfidenceLevel(). virtual void RooStats::ConfInterval::SetConfidenceLevel ; (; double ; cl). pure virtual . used to set confidence level. Keep pure virtual ; Implemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ Streamer(). void RooStats::ConfInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ StreamerNVirtual(). void RooStats::ConfInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_Stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:14901,Simpl,SimpleInterval,14901,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"c . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLSAFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLSAFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 45 of file TGLSAFrame.h. ◆ CloseWindow(). void TGLSAFrame::CloseWindow ; (; ). overridevirtual . Close the GUI frame. ; Reimplemented from TGMainFrame.; Definition at line 59 of file TGLSAFrame.cxx. ◆ DeclFileName(). static const char * TGLSAFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 45 of file TGLSAFrame.h. ◆ IsA(). TClass * TGLSAFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 45 of file TGLSAFrame.h. ◆ operator=(). TGLSAFrame & TGLSAFrame::operator= ; (; const TGLSAFrame & ; ). private . ◆ ProcessMessage(). Bool_t TGLSAFrame::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Process GUI message - deferred back up to TGLSAViewer::ProcessFrameMessage() ; Reimplemented from TGCompositeFrame.; Definition at line 51 of file TGLSAFrame.cxx. ◆ Streamer(). void TGLSAFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGLSAFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TGLSAFrame.h. Member Data Documentation. ◆ fViewer. TGLSAViewer& TGLSAFrame::fViewer. private . Definition at line 31 of file TGLSAFrame.h. Libraries for TGLSAFrame:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLSAFrame.h; graf3d/gl/src/TGLSAFrame.cxx. TGLSAFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAFrame.html:38205,Guid,Guide,38205,doc/master/classTGLSAFrame.html,https://root.cern,https://root.cern/doc/master/classTGLSAFrame.html,1,['Guid'],['Guide']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePointSet.html:3099,Clear,Clear,3099,root/html528/TEvePointSet.html,https://root.cern,https://root.cern/root/html528/TEvePointSet.html,1,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrack.html:2468,Clear,Clear,2468,root/html528/TEveTrack.html,https://root.cern,https://root.cern/root/html528/TEveTrack.html,1,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTEveTrack::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackProjected.html:2327,Clear,Clear,2327,root/html528/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html528/TEveTrackProjected.html,1,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveLine.html:2443,Clear,Clear,2443,root/html528/TEveLine.html,https://root.cern,https://root.cern/root/html528/TEveLine.html,3,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEvePointSet.html:3238,Clear,Clear,3238,root/html530/TEvePointSet.html,https://root.cern,https://root.cern/root/html530/TEvePointSet.html,5,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrack.html:2709,Clear,Clear,2709,root/html530/TEveTrack.html,https://root.cern,https://root.cern/root/html530/TEveTrack.html,2,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTEveTrack::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackProjected.html:2519,Clear,Clear,2519,root/html530/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html530/TEveTrackProjected.html,2,['Clear'],['Clear']
Usability,"c Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveLine.html:2582,Clear,Clear,2582,root/html530/TEveLine.html,https://root.cern,https://root.cern/root/html530/TEveLine.html,9,['Clear'],['Clear']
Usability,"c Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 25128 2008-08-12 17:59:19Z pcanal $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:19453,undo,undo,19453,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,1,['undo'],['undo']
Usability,"c Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQUndoManager.html:19637,undo,undo,19637,root/html530/TQUndoManager.html,https://root.cern,https://root.cern/root/html530/TQUndoManager.html,1,['undo'],['undo']
Usability,"c Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQUndoManager.html:19637,undo,undo,19637,root/html532/TQUndoManager.html,https://root.cern,https://root.cern/root/html532/TQUndoManager.html,1,['undo'],['undo']
Usability,"c Member Functions; void Add (const key_type &key, mapped_type obj);  ; size_type CountElementsWithKey (const key_type &key);  ; equal_range Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; DeclIdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef DeclIdMap_t::const_iterator ROOT::TMapDeclIdToTClass::const_iterator. Definition at line 439 of file TClass.cxx. ◆ DeclIdMap_t. typedef multimap<TDictionary::DeclId_t, TClass*> ROOT::TMapDeclIdToTClass::DeclIdMap_t. Definition at line 436 of file TClass.cxx. ◆ equal_range. typedef std::pair<const_iterator, const_iterator> ROOT::TMapDeclIdToTClass::equal_range. Definition at line 440 of file TClass.cxx. ◆ key_type. typedef DeclIdMap_t::key_type ROOT::TMapDeclIdToTClass::key_type. Definition at line 437 of file TClass.cxx. ◆ mapped_type. typedef DeclIdMap_t::mapped_type ROOT::TMapDeclIdToTClass::mapped_type. Definition at line 438 of file TClass.cxx. ◆ size_type. typedef DeclIdMap_t::size_type ROOT::TMapDeclIdToTClass::size_type. Definition at line 441 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapDeclIdToTClass::Add ; (; const key_type & ; key, . mapped_type ; obj . ). inline . Definition at line 447 of file TClass.cxx. ◆ CountElementsWithKey(). size_type ROOT::TMapDeclIdToTClass::CountElementsWithKey ; (; const key_type & ; key). inline . Definition at line 453 of file TClass.cxx. ◆ Find(). equal_range ROOT::TMapDeclIdToTClass::Find ; (; const key_type & ; key); const. inline . Definition at line 457 of file TClass.cxx. ◆ Remove(). void ROOT::TMapDeclIdToTClass::Remove ; (; const key_type & ; key). inline . Definition at line 462 of file TClass.cxx. Member Data Documentation. ◆ fMap. DeclIdMap_t ROOT::TMapDeclIdToTClass::fMap. private . Definition at line 444 of file TClass.cxx. core/meta/src/TClass.cxx. ROOTTMapDeclIdToTClass. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMapDeclIdToTClass.html:2595,Guid,Guide,2595,doc/master/classROOT_1_1TMapDeclIdToTClass.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMapDeclIdToTClass.html,1,['Guid'],['Guide']
Usability,"c Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPconEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPconEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given pcon. void CreateSections(Int_t inew); Change dynamically the number of sections. Bool_t CheckSections(Bool_t change = kFALSE); Check validity of sections. void UpdateSections(); Update sections according fShape. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoSectionChange(Int_t i); Change parameters of section isect;. void DoNz(); Change number of sections. void DoPhi(); Change phi range. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); {;}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPconEditor.html:22092,undo,undoing,22092,root/html534/TGeoPconEditor.html,https://root.cern,https://root.cern/root/html534/TGeoPconEditor.html,1,['undo'],['undoing']
Usability,"c Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoParaEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoX(); Slot for X. void DoY(); Slot for Y. void DoZ(); Slot for Z. void DoAlpha(); Slot for alpha. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoParaEditor.html:22309,undo,undoing,22309,root/html604/TGeoParaEditor.html,https://root.cern,https://root.cern/root/html604/TGeoParaEditor.html,1,['undo'],['undoing']
Usability,"c Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoParaEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoX(); Slot for X. void DoY(); Slot for Y. void DoZ(); Slot for Z. void DoAlpha(); Slot for alpha. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. TGeoParaEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoParaEditor.html:22309,undo,undoing,22309,root/html602/TGeoParaEditor.html,https://root.cern,https://root.cern/root/html602/TGeoParaEditor.html,1,['undo'],['undoing']
Usability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressMemoryPlot.html:23647,clear,clear,23647,root/html528/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html528/TProofProgressMemoryPlot.html,1,['clear'],['clear']
Usability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofProgressMemoryPlot.html:23800,clear,clear,23800,root/html530/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html530/TProofProgressMemoryPlot.html,1,['clear'],['clear']
Usability,"c Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressMemoryPlot.h 28564 2009-05-12 11:00:21Z ganis $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofProgressMemoryPlot.html:23800,clear,clear,23800,root/html532/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html532/TProofProgressMemoryPlot.html,1,['clear'],['clear']
Usability,"c Public Member Functions |; List of all members ; TThreadFactory Class Referenceabstract. . Definition at line 32 of file TThreadFactory.h. Public Member Functions;  TThreadFactory (const char *name=""Unknown"", const char *title=""Unknown Thread Factory"");  TThreadFactory ctor only called by derived classes. ;  ; virtual ~TThreadFactory ();  ; virtual TConditionImp * CreateConditionImp (TMutexImp *m)=0;  ; virtual TMutexImp * CreateMutexImp (Bool_t recursive)=0;  ; virtual TThreadImp * CreateThreadImp ()=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThreadFactory.html:1142,Clear,Clear,1142,doc/master/classTThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTThreadFactory.html,1,['Clear'],['Clear']
Usability,"c Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //_____________________________________________________________________________; Double_t Camel2(Int_t nDim, Double_t *Xarg){; // 2-dimensional distribution for Foam, normalized to one (within 1e-5); Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:1130,simpl,simplified,1130,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['simpl'],['simplified']
Usability,"c TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; virtual voidTGLPlotPainter::DrawPaletteAxis() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLIsoPainter(const TGLIsoPainter&); virtual voidDeInitGL() const; voidDrawMesh(const TGLIsoPainter::Mesh_t& mesh, Int_t level) const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFindMinMax(); Bool_tHasSections() const; virtual voidInitGL() const; TGLIsoPainter&operator=(const TGLIsoPainter&); voidSetMesh(TGLIsoPainter::Mesh_t& mesh, Double_t isoValue); voidSetSurfaceColor(Int_t ind) const. Data Members; public:. enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLIsoPainter.html:1297,Clear,ClearBuffers,1297,root/html528/TGLIsoPainter.html,https://root.cern,https://root.cern/root/html528/TGLIsoPainter.html,1,['Clear'],['ClearBuffers']
Usability,"c TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; virtual voidTGLPlotPainter::DrawPaletteAxis() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLParametricPlot(const TGLParametricPlot&); virtual voidDeInitGL() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidInitColors(); virtual voidInitGL() const; TGLParametricPlot&operator=(const TGLParametricPlot&); voidSetSurfaceColor() const. Data Members; public:. enum EMeshSize { kLow; kHigh; };; enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TGLPlotPainter::fCoord; Bool_tTGLPlotPainter::fDra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLParametricPlot.html:2035,Clear,ClearBuffers,2035,root/html528/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html528/TGLParametricPlot.html,1,['Clear'],['ClearBuffers']
Usability,"c TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; virtual voidTGLPlotPainter::DrawPaletteAxis() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLTH3CompositionPainter(const TGLTH3CompositionPainter& rhs); virtual voidDeInitGL() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; virtual voidInitGL() const; TGLTH3CompositionPainter&operator=(const TGLTH3CompositionPainter& rhs); voidSetColor(Int_t color) const. Data Members; public:. enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TGLPlotPainter::fCoord; Bool_tTGLPlotPainter::fDrawPalette; Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLTH3CompositionPainter.html:1342,Clear,ClearBuffers,1342,root/html528/TGLTH3CompositionPainter.html,https://root.cern,https://root.cern/root/html528/TGLTH3CompositionPainter.html,1,['Clear'],['ClearBuffers']
Usability,c TTabCom::EContext_tkSYS_FileName; static TTabCom::EContext_tkSYS_UserName; static TTabCom::EContext_tkUNKNOWN_CONTEXT. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; Pattern_tfPat[25][1024]array of patterns; ULong64_tfPrevInterpMarker; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:7793,Clear,ClearFiles,7793,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['Clear'],['ClearFiles']
Usability,"c Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TRefTable ();  Default constructor for I/O. ;  ;  TRefTable (const TRefTable &)=delete;  ;  TRefTable (TObject *owner, Int_t size);  Create a TRefTable with initial size. ;  ; virtual ~TRefTable ();  Destructor. ;  ; virtual Int_t Add (Int_t uid, TProcessID *context=nullptr);  Add a new uid to the table. ;  ; void Clear (Option_t *="""") override;  Clear all entries in the table. ;  ; virtual Int_t Expand (Int_t pid, Int_t newsize);  Expand fParentIDs to newsize for ProcessID pid. ;  ; virtual void FillBuffer (TBuffer &b);  Fill buffer b with the fN elements in fParentdIDs. ;  ; Int_t GetN (Int_t pid) const;  ; Int_t GetNumPIDs () const;  ; TObject * GetOwner () const;  ; TObject * GetParent (Int_t uid, TProcessID *context=nullptr) const;  Return object corresponding to uid. ;  ; TObjArray * GetParents () const;  ; Int_t GetSize (Int_t pid) const;  ; UInt_t GetUID () const;  ; TProcessID * GetUIDContext () const;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer when reading a reference. ;  ; TRefTable & operator= (const TRefTable &)=delete;  ; virtual void ReadBuffer (TBuffer &b);  Fill buffer b with the fN elements in fParentdIDs. ;  ; virtual void Reset (Option_t *="""");  Clear all entries in the table. ;  ; virtual Int_t SetParent (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:2738,Clear,Clear,2738,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,2,['Clear'],['Clear']
Usability,"c bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:47401,clear,clearing,47401,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['clear'],['clearing']
Usability,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMixtureEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for mixture editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected mixture. void DoChkFraction(); Check button state changed for fraction. void DoChkNatoms(); Check button state changed for natoms. void DoFraction(); Fraction changed. void DoNatoms(); Natoms changed. void DoSelectElement(Int_t iel); Slot for selecting an element. void DoAddElem(); Slot for adding an element. No undo. void DoApply1(); Slot for applying modifications. void DoUndo1(); Slot for undoing all changes. void UpdateElements(); Update the list of elements in the TGCanvas. virtual ~TGeoMixtureEditor(); {}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMaterialEditor.h 32718 2010-03-23 15:58:34Z rdm $ » Last generated: 2010-11-08 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMixtureEditor.html:23023,undo,undo,23023,root/html528/TGeoMixtureEditor.html,https://root.cern,https://root.cern/root/html528/TGeoMixtureEditor.html,2,['undo'],"['undo', 'undoing']"
Usability,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMixtureEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for mixture editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected mixture. void DoChkFraction(); Check button state changed for fraction. void DoChkNatoms(); Check button state changed for natoms. void DoFraction(); Fraction changed. void DoNatoms(); Natoms changed. void DoSelectElement(Int_t iel); Slot for selecting an element. void DoAddElem(); Slot for adding an element. No undo. void DoApply1(); Slot for applying modifications. void DoUndo1(); Slot for undoing all changes. void UpdateElements(); Update the list of elements in the TGCanvas. virtual ~TGeoMixtureEditor(); {}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMaterialEditor.h 32718 2010-03-23 15:58:34Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoMixtureEditor.html:23123,undo,undo,23123,root/html530/TGeoMixtureEditor.html,https://root.cern,https://root.cern/root/html530/TGeoMixtureEditor.html,2,['undo'],"['undo', 'undoing']"
Usability,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMixtureEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for mixture editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected mixture. void DoChkFraction(); Check button state changed for fraction. void DoChkNatoms(); Check button state changed for natoms. void DoFraction(); Fraction changed. void DoNatoms(); Natoms changed. void DoSelectElement(Int_t iel); Slot for selecting an element. void DoAddElem(); Slot for adding an element. No undo. void DoApply1(); Slot for applying modifications. void DoUndo1(); Slot for undoing all changes. void UpdateElements(); Update the list of elements in the TGCanvas. virtual ~TGeoMixtureEditor(); {}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMaterialEditor.h 32718 2010-03-23 15:58:34Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoMixtureEditor.html:23123,undo,undo,23123,root/html532/TGeoMixtureEditor.html,https://root.cern,https://root.cern/root/html532/TGeoMixtureEditor.html,2,['undo'],"['undo', 'undoing']"
Usability,"c const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:20769,progress bar,progress bar,20769,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,2,['progress bar'],['progress bar']
Usability,"c const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTVLVEntry(const TGWindow* p, const TGPicture* bigpic, const TGPicture* smallpic, TGString* name, TGString** subnames, EListViewMode ViewMode); TGTreeLVEntry constructor. ~TTVLVEntry(); TGTreeLVEntry destructor. const char * ConvertAliases(); Convert all aliases into true names. Bool_t FullConverted(); Return true if converted name is alias free. void CopyItem(TTVLVEntry* dest); Copy this item's name and alias to an other. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HasAlias(); Check if alias name is not empty. void PrependTilde(); Prepend a ~ to item alias. void SetItemName(const char* name); redraw this entry with new name. void SetCutType(Bool_t type = kFALSE); Set cut type. void SetExpression(const char* name, const char* alias, Bool_t cutType = kFALSE); Set the true name, alias and type of the expression, then refresh it. void Empty(); clear all names and alias. void SetToolTipText(const char* text, Long_t delayms = 1000); Set tool tip text associated with this item. The delay is in; milliseconds (minimum 250). To remove tool tip call method with text = 0. void SetSmallPic(const TGPicture* spic); Set small picture. const char * GetAlias(); {return fAlias.Data();}. TTVLVContainer * GetContainer(); {return fContainer;}. TGItemContext * GetContext(); {return fContext;}. const char * GetConvName(); {return fConvName;}. const char * GetTrueName(); {return fTrueName.Data();}. TGToolTip * GetTip(); {return fTip;}. Bool_t IsCut(); {return fIsCut;}. void SetAlias(const char* alias); {fAlias = alias;}. void SetTrueName(const char* name); {fTrueName = name;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTVLVEntry.html:20780,clear,clear,20780,root/html534/TTVLVEntry.html,https://root.cern,https://root.cern/root/html534/TTVLVEntry.html,1,['clear'],['clear']
Usability,"c const char * TRefTable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TRefTable.h. ◆ Expand(). Int_t TRefTable::Expand ; (; Int_t ; pid, . Int_t ; newsize . ). virtual . Expand fParentIDs to newsize for ProcessID pid. ; Definition at line 157 of file TRefTable.cxx. ◆ ExpandForIID(). Int_t TRefTable::ExpandForIID ; (; Int_t ; iid, . Int_t ; newsize . ). protectedvirtual . Expand fParentIDs to newsize for internel ProcessID index iid. ; Definition at line 167 of file TRefTable.cxx. ◆ ExpandPIDs(). void TRefTable::ExpandPIDs ; (; Int_t ; numpids). protected . Expand the arrays of managed PIDs. ; Definition at line 193 of file TRefTable.cxx. ◆ FillBuffer(). void TRefTable::FillBuffer ; (; TBuffer & ; b). virtual . Fill buffer b with the fN elements in fParentdIDs. ; This function is called by TBranchRef::FillLeaves. ; Definition at line 225 of file TRefTable.cxx. ◆ FindPIDGUID(). Int_t TRefTable::FindPIDGUID ; (; const char * ; guid); const. protected . Get fProcessGUIDs' index of the TProcessID with GUID guid. ; Definition at line 238 of file TRefTable.cxx. ◆ GetInternalIdxForPID() [1/2]. Int_t TRefTable::GetInternalIdxForPID ; (; Int_t ; pid); const. protected . Get the index for fProcessIDs, fAllocSize, etc given a PID. ; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID ; Definition at line 278 of file TRefTable.cxx. ◆ GetInternalIdxForPID() [2/2]. Int_t TRefTable::GetInternalIdxForPID ; (; TProcessID * ; procid); const. protected . Get the index for fProcessIDs, fAllocSize, etc given a PID. ; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID ; Definition at line 269 of file TRefTable.cxx. ◆ GetN(). Int_t TRefTable::GetN ; (; Int_t ; pid); const. inline . Definition at line 80 of file TRefTable.h. ◆ GetNumPIDs(). Int_t TRefTable::GetNumPIDs ; (; ); const. inline . Definition at line 78 of file TRefTable.h. ◆ GetOwner(). TObject * TRefTable::GetOwner ; (; ); const. inline . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:17234,guid,guid,17234,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['guid'],['guid']
Usability,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; double evaluate () const override;  Calculate current value of this object. ;  ;  Protected Member Functions inherited from RooAbsRealLValue; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:57133,usab,usable,57133,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['usab'],['usable']
Usability,"c constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGHtml.h>. Inheritance diagram for TGHtmlLayoutContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlLayoutContext(). TGHtmlLayoutContext::TGHtmlLayoutContext ; (; ). Html Layout Context constructor. ; Definition at line 38 of file TGHtmlLayout.cxx. Member Function Documentation. ◆ ClearMarginStack(). void TGHtmlLayoutContext::ClearMarginStack ; (; SHtmlMargin_t ** ; ppMargin). protected . Clear a margin stack to reclaim memory. ; This routine just blindly pops everything off the stack. Typically used when the screen is cleared or the widget is deleted, etc. ; Definition at line 165 of file TGHtmlLayout.cxx. ◆ ClearObstacle(). void TGHtmlLayoutContext::ClearObstacle ; (; int ; mode). protected . Clear a wrap-around obstacle. ; The second option determines the precise behavior.; CLEAR_Left Clear all obstacles on the left.; CLEAR_Right Clear all obstacles on the right.; CLEAR_Both Clear all obstacles on both sides.; CLEAR_First Clear only the first obstacle on either side. ; Definition at line 733 of file TGHtmlLayout.cxx. ◆ ComputeMargins(). void TGHtmlLayoutContext::ComputeMargins ; (; int * ; pX, . int * ; pY, . int * ; pW . ). protected . Compute the current margins for layout. ; Three values are returned:; *pY The top edge of the area in which we can put ink. This takes into account any requested headroom.; *pX The left edge of the inkable area. The takes into account any margin request",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:12521,Clear,Clear,12521,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Clear'],['Clear']
Usability,"c steps. ;  ; virtual void SetNumber (Double_t val, Bool_t emit=kTRUE);  Set the numeric value (floating point representation). ;  ; void SetState (Bool_t state) override;  Set the active state. ;  ; void SetText (const char *text, Bool_t emit=kTRUE) override;  Set the value (text format). ;  ; virtual void SetTime (Int_t hour, Int_t min, Int_t sec, Bool_t emit=kTRUE);  Set the numeric value (time format). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TextChanged (const char *text=nullptr) override;  Text has changed message. ;  ;  Public Member Functions inherited from TGTextEntry;  TGTextEntry (const TGWindow *p, TGTextBuffer *text, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a text entry widget. ;  ;  TGTextEntry (const TGWindow *parent=nullptr, const char *text=nullptr, Int_t id=-1);  Simple text entry constructor. ;  ;  TGTextEntry (const TString &contents, const TGWindow *parent, Int_t id=-1);  Simple test entry constructor. ;  ;  ~TGTextEntry () override;  Delete a text entry widget. ;  ; virtual void AppendText (const char *text);  Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ;  ; void Backspace ();  Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ;  ; void Clear (Option_t *option="""") override;  Clears up the text entry. ;  ; void CursorLeft (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor leftwards one or more characters. ;  ; virtual void CursorOutDown ();  This signal is emitted when cursor is going out of bottom side. ;  ; virtual void CursorOutLeft ();  This signal is emitted when cursor is going out of left side. ;  ; virtual void CursorOutRight ();  This signal is emitted when cursor is going out of righ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:4108,Simpl,Simple,4108,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,1,['Simpl'],['Simple']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:7288,clear,clearEvalErrorLog,7288,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:7288,clear,clearEvalErrorLog,7288,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:7288,clear,clearEvalErrorLog,7288,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:4539,clear,clearShapeDirty,4539,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,1,['clear'],['clearShapeDirty']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModecanNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddPdf.html:4067,clear,clearValueAndShapeDirty,4067,root/html534/RooAddPdf.html,https://root.cern,https://root.cern/root/html534/RooAddPdf.html,6,['clear'],['clearValueAndShapeDirty']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGaussModel.html:3342,clear,clearValueAndShapeDirty,3342,root/html532/RooGaussModel.html,https://root.cern,https://root.cern/root/html532/RooGaussModel.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Roo2DKeysPdf.html:2761,clear,clearValueDirty,2761,root/html528/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html528/Roo2DKeysPdf.html,1,['clear'],['clearValueDirty']
Usability,"c*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/Roo2DKeysPdf.html:2761,clear,clearValueDirty,2761,root/html530/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html530/Roo2DKeysPdf.html,1,['clear'],['clearValueDirty']
Usability,"c, . unsigned ; nTimes, . R ; redfunc . ); -> InvokeResult_t<F>. Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. ; Parameters. redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 255 of file TExecutorCRTP.hxx. ◆ operator=(). template<class SubC > . TExecutorCRTP & ROOT::TExecutorCRTP< SubC >::operator= ; (; const TExecutorCRTP< SubC > & ; ). delete . ◆ Reduce() [1/2]. template<class SubC > . template<class T > . T * ROOT::TExecutorCRTP< SubC >::Reduce ; (; const std::vector< T * > & ; mergeObjs). ""Reduce"" an std::vector into a single object by using the object's Merge method. ; Parameters. mergeObjsA vector of ROOT objects implementing the Merge method . ReturnsAn object result of merging the vector elements into one. ; Definition at line 347 of file TExecutorCRTP.hxx. ◆ Reduce() [2/2]. template<class SubC > . template<class T , class R > . auto ROOT::TExecutorCRTP< SubC >::Reduce ; (; const std::vector< T > & ; objs, . R ; redfunc . ); -> decltype(redfunc(objs)). ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ; Parameters. objsA vector of elements to combine. ; redfuncReduction function to combine the elements of the vector objs . ReturnsA value result of combining the vector elements into a single object of the same type. ; Definition at line 373 of file TExecutorCRTP.hxx. The documentation for this class was generated from the following file:; core/base/inc/ROOT/TExecutorCRTP.hxx. ROOTTExecutorCRTP. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:21540,Guid,Guide,21540,doc/v632/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html,1,['Guid'],['Guide']
Usability,"c1 = 1, Option_t* option = """"); virtual Bool_tAdd(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidAddDirectory(Bool_t add = kTRUE); static Bool_tAddDirectoryStatus(); virtual Double_tAndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tAndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); virtual Bool_tCanExtendAllAxes() const; virtual Double_tChi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tChi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tChisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearUnderflowAndOverflow(); virtual TObject*Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* f1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*DrawNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:18289,Clear,Clear,18289,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['Clear'],['Clear']
Usability,"c80/VS RooCategory::c = run2(idx = 1); ; 0x55656993e7e0/VS RooCategory::d = foo(idx = 0); ; 0x55656a3d4090/V- RooAddPdf::model_{run1;bar} = 1/1 [Auto,Clean] ; 0x556569ddd2a0/V- RooGaussian::g = 1 [Auto,Dirty] ; 0x55656b8aeb30/V- RooRealVar::x = 0; 0x556569f24620/V- RooRealVar::m = 0; 0x55656b8a01d0/V- RooRealVar::s = 1; 0x556569cc56f0/V- RooRealVar::f = 0.5; 0x55656b8e6d60/V- RooPolynomial::p_{run1;bar} = 1 [Auto,Dirty] ; 0x55656b8aeb30/V- RooRealVar::x = 0; 0x55656b8e9580/V- RooRealVar::p0_{run1;bar} = 0.01; 0x55656b8e9c00/V- RooAddPdf::model_{run1;foo} = 1/1 [Auto,Clean] ; 0x556569ddd2a0/V- RooGaussian::g = 1 [Auto,Dirty] ; 0x55656b8aeb30/V- RooRealVar::x = 0; 0x556569f24620/V- RooRealVar::m = 0; 0x55656b8a01d0/V- RooRealVar::s = 1; 0x556569cc56f0/V- RooRealVar::f = 0.5; 0x55656b8eeb10/V- RooPolynomial::p_{run1;foo} = 1 [Auto,Dirty] ; 0x55656b8aeb30/V- RooRealVar::x = 0; 0x55656b8f1330/V- RooRealVar::p0_{run1;foo} = 0.01; 0x55656b8f19b0/V- RooAddPdf::model_{run2;bar} = 1/1 [Auto,Clean] ; 0x556569ddd2a0/V- RooGaussian::g = 1 [Auto,Dirty] ; 0x55656b8aeb30/V- RooRealVar::x = 0; 0x556569f24620/V- RooRealVar::m = 0; 0x55656b8a01d0/V- RooRealVar::s = 1; 0x556569cc56f0/V- RooRealVar::f = 0.5; 0x55656b8f6940/V- RooPolynomial::p_{run2;bar} = 1 [Auto,Dirty] ; 0x55656b8aeb30/V- RooRealVar::x = 0; 0x55656b8f91c0/V- RooRealVar::p0_{run2;bar} = 0.01; 0x55656b8f9840/V- RooAddPdf::model_{run2;foo} = 1/1 [Auto,Clean] ; 0x556569ddd2a0/V- RooGaussian::g = 1 [Auto,Dirty] ; 0x55656b8aeb30/V- RooRealVar::x = 0; 0x556569f24620/V- RooRealVar::m = 0; 0x55656b8a01d0/V- RooRealVar::s = 1; 0x556569cc56f0/V- RooRealVar::f = 0.5; 0x55656b8fe8b0/V- RooPolynomial::p_{run2;foo} = 1 [Auto,Dirty] ; 0x55656b8aeb30/V- RooRealVar::x = 0; 0x55656bbe24b0/V- RooRealVar::p0_{run2;foo} = 0.01; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf504_simwstool.C. tutorialsroofitrf504_simwstool.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf504__simwstool_8C.html:12934,Guid,Guide,12934,doc/master/rf504__simwstool_8C.html,https://root.cern,https://root.cern/doc/master/rf504__simwstool_8C.html,1,['Guid'],['Guide']
Usability,"c:; Shape(Int_t color, Double_t x, Double_t y, Double_t z);; ~Shape() override {};; virtual TBuffer3D & GetBuffer3D(UInt_t reqSections) = 0;; ; protected:; Double_t fX, fY, fZ; // Origin; Int_t fColor;; ; ClassDefOverride(Shape,0);; };; ; ClassImp(Shape);; ; Shape::Shape(Int_t color, Double_t x, Double_t y, Double_t z) :; fX(x), fY(y), fZ(z), fColor(color); {}; ; class Sphere : public Shape; {; public:; Sphere(Int_t color, Double_t x, Double_t y, Double_t z, Double_t radius);; ~Sphere() override {};; ; TBuffer3D & GetBuffer3D(UInt_t reqSections) override;; ; private:; Double_t fRadius;; ; ClassDefOverride(Sphere,0);; };; ; ClassImp(Sphere);; ; Sphere::Sphere(Int_t color, Double_t x, Double_t y, Double_t z, Double_t radius) :; Shape(color,x,y,z),; fRadius(radius); {}; ; TBuffer3D & Sphere::GetBuffer3D(UInt_t reqSections); {; static TBuffer3DSphere buffer;; ; // Complete kCore section - this could be moved to Shape base class; if (reqSections & TBuffer3D::kCore) {; buffer.ClearSectionsValid();; buffer.fID = this;; buffer.fColor = fColor; // Color index - see gROOT->GetColor(); buffer.fTransparency = 0; // Transparency 0 (opaque) - 100 (fully transparent); ; // Complete local/master transformation matrix - simple x/y/z; // translation. Easiest way to set identity then override the; // translation components; buffer.SetLocalMasterIdentity();; buffer.fLocalMaster[12] = fX;; buffer.fLocalMaster[13] = fY;; buffer.fLocalMaster[14] = fZ;; buffer.fLocalFrame = kTRUE; // Local frame; ; buffer.fReflection = kFALSE;; buffer.SetSectionsValid(TBuffer3D::kCore);; }; // Complete kBoundingBox section; if (reqSections & TBuffer3D::kBoundingBox) {; Double_t origin[3] = { 0.0, 0.0, 0.0 };; Double_t halfLength[3] = { fRadius, fRadius, fRadius };; buffer.SetAABoundingBox(origin, halfLength);; buffer.SetSectionsValid(TBuffer3D::kBoundingBox);; }; // Complete kShapeSpecific section; if (reqSections & TBuffer3D::kShapeSpecific) {; buffer.fRadiusOuter = fRadius;; buffer.fRadiusInner = 0.0;; b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:2486,Clear,ClearSectionsValid,2486,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['Clear'],['ClearSectionsValid']
Usability,"c; SetOption(Option_t *option="""")TPolyLineinlinevirtual; SetPoint(Int_t point, Double_t x, Double_t y)TPolyLinevirtual; SetPolyLine(Int_t n)TPolyLinevirtual; SetPolyLine(Int_t n, Float_t *x, Float_t *y, Option_t *option="""")TPolyLinevirtual; SetPolyLine(Int_t n, Double_t *x, Double_t *y3, Option_t *option="""")TPolyLinevirtual; SetStartPoint(Double_t x1, Double_t y1)TCurlyLinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetWaveLength(Double_t WaveLength)TCurlyLinevirtual; SetWavy()TCurlyLinevirtual; Size() constTPolyLineinlinevirtual; Streamer(TBuffer &) overrideTCurlyLinevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TCurlyLineinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TCurlyLine()TCurlyLine; TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl=.02, Double_t amp=.01)TCurlyLine; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TPolyLine()TPolyLine; TPolyLine(Int_t n, Option_t *option="""")TPolyLine; TPolyLine(Int_t n, Float_t *x, Float_t *y, Option_t *option="""")TPolyLine; TPolyLine(Int_t n, Double_t *x, Double_t *y, Option_t *option="""")TPolyLine; TPolyLine(const TPolyLine &polyline)TPolyLine; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TCurlyLine() overrideTCurlyLineinline; ~TObject()TObjectvirtual; ~TPolyLine() overrideTPolyLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyLine-members.html:10160,Guid,Guide,10160,doc/master/classTCurlyLine-members.html,https://root.cern,https://root.cern/doc/master/classTCurlyLine-members.html,1,['Guid'],['Guide']
Usability,"c< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > asin (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > acos (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > atan (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > atan2 (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > atan2 (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > atan2 (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > sinh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > cosh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > tanh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > asinh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > acosh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > atanh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > floor (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ceil (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > trunc (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > round (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > lround (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > llround (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > erf (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > erfc (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > lgamma (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > tgamma (const RVec< T > &v);  . ROOTVecOps. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1VecOps.html:24340,Guid,Guide,24340,doc/v632/namespaceROOT_1_1VecOps.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1VecOps.html,1,['Guid'],['Guide']
Usability,"cPointer to user theoretical function (a TF1*)Definition TVirtualFitter.h:44; TVirtualFitter::GetFitOptionvirtual Foption_t GetFitOption() constDefinition TVirtualFitter.h:73; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::fCacheDouble_t * fCache[fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words)Definition TVirtualFitter.h:42; TVirtualFitter::fFCNvoid(* fFCN)(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Definition TVirtualFitter.h:46; TVirtualFitter::GetFitterstatic TVirtualFitter * GetFitter()static: return the current FitterDefinition TVirtualFitter.cxx:209; TVirtualFitter::GetUserFuncvirtual TObject * GetUserFunc() constDefinition TVirtualFitter.h:84; TVirtualFitter::fNpointsInt_t fNpointsNumber of points to fit.Definition TVirtualFitter.h:39; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; f1TF1 * f1Definition legend1.C:11; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Foption_tDefinition Foption.h:24; Foption_t::W1int W1Definition Foption.h:36; Foption_t::Integralint IntegralDefinition Foption.h:44; lTLine lDefinition textangle.C:4; t1auto * t1Definition textangle.C:20. mathfumilisrcTFumili.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:81420,Guid,Guide,81420,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['Guid'],['Guide']
Usability,"cache. RooExpensiveObjectCache RooWorkspace::_eocache. private . Cache for expensive objects. ; Definition at line 272 of file RooWorkspace.h. ◆ _exportNSName. std::string RooWorkspace::_exportNSName. private . ! Name of CINT namespace to which contents are exported ; Definition at line 277 of file RooWorkspace.h. ◆ _factory. std::unique_ptr<RooFactoryWSTool> RooWorkspace::_factory. private . ! Factory tool associated with workspace ; Definition at line 274 of file RooWorkspace.h. ◆ _genObjects. RooLinkedList RooWorkspace::_genObjects. private . List of generic objects. ; Definition at line 266 of file RooWorkspace.h. ◆ _namedSets. std::map<std::string, RooArgSet> RooWorkspace::_namedSets. private . Map of named RooArgSets. ; Definition at line 268 of file RooWorkspace.h. ◆ _openTrans. bool RooWorkspace::_openTrans = false. private . ! Is there a transaction open? ; Definition at line 279 of file RooWorkspace.h. ◆ _sandboxNodes. RooArgSet RooWorkspace::_sandboxNodes. private . ! Sandbox for incoming objects in a transaction ; Definition at line 280 of file RooWorkspace.h. ◆ _snapshots. RooLinkedList RooWorkspace::_snapshots. private . List of parameter snapshots. ; Definition at line 265 of file RooWorkspace.h. ◆ _studyMods. RooLinkedList RooWorkspace::_studyMods. private . List if StudyManager modules. ; Definition at line 267 of file RooWorkspace.h. ◆ _uuid. TUUID RooWorkspace::_uuid. private . Definition at line 255 of file RooWorkspace.h. ◆ _views. RooLinkedList RooWorkspace::_views. private . List of model views. ; Definition at line 264 of file RooWorkspace.h. Libraries for RooWorkspace:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooWorkspace.h; roofit/roofitcore/src/RooWorkspace.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooWorkspace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:53882,Guid,Guide,53882,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['Guid'],['Guide']
Usability,"cal tasks than inheritance, and help ensure the type-safety of code (thereby ensuring the accuracy of data by helping to prevent accidental narrowing etc). It implies that you intend to continue to encourage the use of bare new and delete operators, instead of relying on the more efficient, reliable, and safe method of using RAII. Why? This begs the obvious question: why bother migrating at all? You wish to migrate to the modern and superior C++11 in order to not take advantage of its features? Why not just simply maintain ROOT5 and CINT, and just refuse to upgrade? ROOT is not a particularly good framework that is written in a language that isn't quite C++. If you are going to break away and make/use/write cling, then fix the poor design decisions: cling will probably break compatibility anyways despite your best efforts, so you might as well take the time and effort to refactor and clean up the code base. A simple example, taken from this website: """""" TFFTComplex One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it: 1) Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified) 2) Run the Init() function with the desired flags and settings ... """""" This is simply poor design. This should look like: root::Fft, removing the T, using a namespace, using templates instead of inheritence, etc. But also, notice that you have to run an Init function. Why? That is specifically what the constructor is for. Why does everything in ROOT know how to draw itself? Why does everything in ROOT have 100 methods, for ""quick access"" to other objects that do the actual work of those methods? These are q",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:10727,simpl,simple,10727,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['simpl'],['simple']
Usability,"calFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class ; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class ; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:87857,simpl,simple,87857,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,3,['simpl'],['simple']
Usability,"calIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implement analytical integral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; void generateEvent (Int_t code) override;  Implement internal generator. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integral. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniform.html:1718,simpl,simple,1718,doc/master/classRooUniform.html,https://root.cern,https://root.cern/doc/master/classRooUniform.html,1,['simpl'],['simple']
Usability,"calar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TSGD (Scalar_t learningRate, DeepNet_t &deepNet, Scalar_t momentum);  Constructor. ;  ;  ~TSGD ()=default;  Destructor. ;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastBiasGradients ();  ; std::vector< Matrix_t > & GetPastBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastWeightGradients ();  ; std::vector< Matrix_t > & GetPastWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fMomentum;  The momentum used for training. ;  ; std::vector< std::vector< Matrix_t > > fPastBiasGradients;  The sum of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastWeightGradients;  The sum of the past weight gradients associated with the deep net. ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:2095,learn,learningRate,2095,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['learn'],['learningRate']
Usability,"calar_t fTestError;  Holds the most recently computed test loss. ;  ; size_t fTestInterval;  Interval for the computation of the test error. ;  ; Scalar_t fTrainingError;  Holds the most recently computed training loss. ;  . #include <TMVA/DNN/Minimizers.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 59 of file Minimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 58 of file Minimizers.h. Constructor & Destructor Documentation. ◆ TGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent. Definition at line 175 of file Minimizers.h. ◆ TGradientDescent() [2/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent ; (; Scalar_t ; learningRate, . size_t ; convergenceSteps, . size_t ; testInterval . ). Definition at line 185 of file Minimizers.h. Member Function Documentation. ◆ GetConvergenceCount(). template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::GetConvergenceCount ; (; ); const. inline . Definition at line 159 of file Minimizers.h. ◆ GetConvergenceSteps(). template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::GetConvergenceSteps ; (; ); const. inline . Definition at line 160 of file Minimizers.h. ◆ GetTestError(). template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::GetTestError ; (; ); const. inline . Definition at line 162 of file Minimizers.h. ◆ GetTestInterval(). template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::GetTestInterval ; (; ); const. inline . Definition at line 163 of file Minimizers.h. ◆ GetTrainingError(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:5917,learn,learningRate,5917,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['learn'],['learningRate']
Usability,"calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  StackError;  ; class  StackOverflow;  define stack allocator symbol More...;  ; class  sym;  ; class  VariableMetricBuilder;  Build (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be chosen. Mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11690,Simpl,SimplexParameters,11690,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,4,"['Simpl', 'simpl']","['SimplexParameters', 'simplex']"
Usability,"callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 805 of file NeuralNet.h. ◆ endTrainCycle(). virtual void TMVA::DNN::Settings::endTrainCycle ; (; double ; ). inlinevirtual . callback for monitoring and logging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 788 of file NeuralNet.h. ◆ exists(). bool TMVA::DNN::Settings::exists ; (; std::string ; histoName). inline . for monitoring ; Definition at line 825 of file NeuralNet.h. ◆ factorWeightDecay(). double TMVA::DNN::Settings::factorWeightDecay ; (; ); const. inline . get the weight-decay factor ; Definition at line 769 of file NeuralNet.h. ◆ hasConverged(). bool TMVA::DNN::Settings::hasConverged ; (; double ; testError). virtual . has this training converged already? ; check for convergence; Definition at line 485 of file NeuralNet.cxx. ◆ learningRate(). double TMVA::DNN::Settings::learningRate ; (; ); const. inline . get the learning rate ; Definition at line 771 of file NeuralNet.h. ◆ maxConvergenceCount(). size_t TMVA::DNN::Settings::maxConvergenceCount ; (; ); const. inline . returns the max convergence count so far ; Definition at line 828 of file NeuralNet.h. ◆ minError(). size_t TMVA::DNN::Settings::minError ; (; ); const. inline . returns the smallest error so far ; Definition at line 829 of file NeuralNet.h. ◆ minimizerType(). MinimizerType TMVA::DNN::Settings::minimizerType ; (; ); const. inline . which minimizer shall be used (e.g. SGD) ; Definition at line 774 of file NeuralNet.h. ◆ momentum(). double TMVA::DNN::Settings::momentum ; (; ); const. inline . get the momentum (e.g. for SGD) ; Definition at line 772 of file NeuralNet.h. ◆ pads(). void TMVA::DNN::Settings::pads ; (; int ; numPads). inline . preparation for monitoring ; Definition at line 818 of file NeuralNet.h. ◆ plot(). void TMVA::DNN::Settings::plot ; (; std::string ; histoName, . std::string ; options, . int ; pad, . EColor ; color . ). inline . for monit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:9089,learn,learning,9089,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['learn'],['learning']
Usability,"called, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoBBox and stored in fsolmap map using the name; as its key. XMLNodePointer_t Ellipsoid(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the solids section of the GDML file, an ellipsoid may be declared.; Unfortunately, the ellipsoid is not supported under ROOT so,; when the ellipsoid keyword is found, this function is called; to convert it to a simple box with similar dimensions, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoBBox and stored in fsolmap map using the name; as its key. XMLNodePointer_t ElCone(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the solids section of the GDML file, an elliptical cone may be declared.; Unfortunately, the elliptical cone is not supported under ROOT so,; when the elcone keyword is found, this function is called; to convert it to a simple box with similar dimensions, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoBBox and stored in fsolmap map using the name; as its key. XMLNodePointer_t Paraboloid(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the solids section of the GDML file, a Paraboloid may be declared.; when the paraboloid keyword is found, this function is called, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoParaboloid and stored in fsolmap map using the name; as its key. XMLNodePointer_t Arb8(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttrPointer_t attr); In the solids section of the GDML file, an Arb8 may be declared.; when the arb8 keyword is found, this function is called, and the; dimensions required are taken and stored, these are then bound and; converted to type TGeoArb8 and stored in fsolmap map using the name; as its key. XMLNodePointer_t Tube(TXMLEngine* gdml, XMLNodePointer_t node, XMLAttr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDMLParse.html:17570,simpl,simple,17570,root/html534/TGDMLParse.html,https://root.cern,https://root.cern/root/html534/TGDMLParse.html,3,['simpl'],['simple']
Usability,"called. The Bar::Streamer function works OK independently if the Bar StreamerInfo had been generated in optimized mode or not. . Definition at line 321 of file TClonesArray.cxx. ◆ CanBypassStreamer(). Bool_t TClonesArray::CanBypassStreamer ; (; ); const. inline . Definition at line 64 of file TClonesArray.h. ◆ Class(). static TClass * TClonesArray::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TClonesArray::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TClonesArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 83 of file TClonesArray.h. ◆ Clear(). void TClonesArray::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Only use this routine when your objects don't allocate memory since it will not call the object dtors. However, if the class in the TClonesArray implements the function Clear(Option_t *option) and if option = ""C"" the function Clear() is called for all objects in the array. In the function Clear(), one can delete objects or dynamic arrays allocated in the class. This procedure is much faster than calling TClonesArray::Delete(). When the option starts with ""C+"", eg ""C+xyz"" the objects in the array are in turn cleared with the option ""xyz"" ; Implements TCollection.; Definition at line 420 of file TClonesArray.cxx. ◆ Compress(). void TClonesArray::Compress ; (; ). overridevirtual . Remove empty slots from array. ; Reimplemented from TObjArray.; Definition at line 332 of file TClonesArray.cxx. ◆ ConstructedAt() [1/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, it is the callers responsibility to insure that the object is returned to a known state, usually by cal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:33332,Clear,Clear,33332,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,2,['Clear'],['Clear']
Usability,"calls : 100000; Depending on the algorithm, some of the control parameters might have no effect.; 13.8.3.3 ROOT::Math::AdaptiveIntegratorMultiDim; This class implements an adaptive quadrature integration method for multi dimensional functions. It is described in this paper Genz, A.A. Malik, An adaptive algorithm for numerical integration over an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. It is part of the MathCore library. The user can control the relative and absolute tolerance and the maximum allowed number of function evaluation.; 13.8.3.4 ROOT::Math::GSLMCIntegrator; It is a class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. For a detail description of the GSL methods visit the GSL users guide. Specific configuration options (documented in the GSL user guide) for the ROOT::Math::GSLMCIntegration can be set directly in the class, or when using it via the ROOT::Math::IntegratorMultiDim interface, can be defined using the ROOT::Math::IntegratorMultiDimOptions.; 13.9 Function Derivation; There are in ROOT only two classes to perform numerical derivation. One of them is in the MathCore library while the other is in the MathMore wrapping an integration function from the GSL library. * RichardsonDerivator: Implements the Richardson method for numerical integration. It can calculate up to the third derivative of a function. * GSLDerivator of MathMore based on GSL.; 13.10 Numerical Minimization; The algorithms provided by ROOT for numerical integration are implemented following the hierarchy shown in the next image. The left branch of classes are used for one dimensional minimization, while the right one is used for multidimensional minimization. In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:713008,guid,guide,713008,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guide']
Usability,"cally constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.; The current fit range may not be open ended or empty. ; Definition at line 374 of file RooAbsRealLValue.cxx. ◆ frame() [2/6]. RooAbsRealLValue::frame ; (; const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:76616,usab,usable,76616,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['usab'],['usable']
Usability,"can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75695,Clear,ClearInputData,75695,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearInputData']
Usability,"case of failure. In the last case the file cannot be used anymore. 11.7 Remotely Access to ROOT Files; ROOT files can be accessed remotely in many ways, on the base of the protocol URL. Among the most popular are XRootD (protocols ‘root://’ and ‘xrd://’) and a Web server (protocl ‘http://’ or ‘https://’).; The rootd daemon is deprecated and has been removed in version 6.16/00.; Please refer to the XRootD documentation for starting and ensuring that such a daemon is running.; Reading and writing ROOT files over the net can be done by creating a TFile object using the static method TFile::Open() object. This will instantiate the appropriate derivation of TFile to handle the request. Inheriting from the TFile class, the returned instance will have exactly the same interface and behavior of TFile. The only difference is that it reads and writes from a remote service. In the example below the file is read via a web server through the TDavixFile plug-in.; 11.7.1 A Simple Session; root[] TFile *f1 = TFile::Open(""local/file.root"",""update""); root[] TFile *f2 = TFile::Open(""root://my.server.org/data/file.root"",""new""); root[] TFile *f3 = TFile::Open(""http://root.cern.ch/files/hsimple.root""); root[] f3.ls(); TDavixFile** http://root.cern.ch/files/hsimple.root; TDavixFile* http://root.cern.ch/files/hsimple.root; KEY: TH1F hpx;1 This is the px distribution; KEY: TH2F hpxpy;1 py vs px; KEY: TProfile hprof;1 Profile of pz versus px; KEY: TNtuple ntuple;1 Demo ntuple; root[] hpx.Draw(); 11.8 XML Interface; A new module xml as implemented by Sergey Linev (GSI). It is an optional package that can be used to save a canvas into file.xml file format instead of file.root. XML files do not have any advantages compared to the normal ROOT files, except that the information in these files can be edited via a normal editor. The main motivation for this new format is to facilitate the communication with other non ROOT applications. Currently writing and reading XML files is limited to ROOT appli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:516823,Simpl,Simple,516823,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"cast or enable RTTI. ; Definition at line 57 of file RooHelpers.h. Public Member Functions;  WrapIntoTObject (T &obj);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html:1375,Clear,Clear,1375,doc/master/structRooHelpers_1_1WrapIntoTObject.html,https://root.cern,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html,1,['Clear'],['Clear']
Usability,"cated before; 294 // any color table expensive bitmaps get allocated in GUI routines (like; 295 // creation of XPM bitmaps).; 296 TColor::InitializeColors();; 297 ; 298 // Hook for further initializing the WM dependent application environment; 299 Init();; 300 ; 301 // Set default screen factor (if not disabled in rc file); 302 if (!only_web && gEnv->GetValue(""Canvas.UseScreenFactor"", 1)) {; 303 Int_t x, y;; 304 UInt_t w, h;; 305 if (gVirtualX) {; 306 gVirtualX->GetGeometry(-1, x, y, w, h);; 307 if (h > 0); 308 gStyle->SetScreenFactor(0.001 * h);; 309 }; 310 }; 311}; 312 ; 313////////////////////////////////////////////////////////////////////////////////; 314/// Clear list containing macro files passed as program arguments.; 315/// This method is called from TRint::Run() to ensure that the macro; 316/// files are only executed the first time Run() is called.; 317 ; 318void TApplication::ClearInputFiles(); 319{; 320 if (fFiles) {; 321 fFiles->Delete();; 322 SafeDelete(fFiles);; 323 }; 324}; 325 ; 326////////////////////////////////////////////////////////////////////////////////; 327/// Return specified argument.; 328 ; 329char *TApplication::Argv(Int_t index) const; 330{; 331 if (fArgv) {; 332 if (index >= fArgc) {; 333 Error(""Argv"", ""index (%d) >= number of arguments (%d)"", index, fArgc);; 334 return nullptr;; 335 }; 336 return fArgv[index];; 337 }; 338 return nullptr;; 339}; 340 ; 341////////////////////////////////////////////////////////////////////////////////; 342/// Get and handle command line options. Arguments handled are removed; 343/// from the argument array. See CommandLineOptionsHelp.h for options.; 344 ; 345void TApplication::GetOptions(Int_t *argc, char **argv); 346{; 347 static char null[1] = { """" };; 348 ; 349 fNoLog = kFALSE;; 350 fQuit = kFALSE;; 351 fFiles = nullptr;; 352 ; 353 if (!argc); 354 return;; 355 ; 356 int i, j;; 357 TString pwd;; 358 ; 359 for (i = 1; i < *argc; i++) {; 360 if (!strcmp(argv[i], ""-?"") || !strncmp(argv[i], ""-h"", 2) ||; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:11459,Clear,ClearInputFiles,11459,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['Clear'],['ClearInputFiles']
Usability,"cated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tree.html:4888,simpl,simple,4888,doc/master/group__tree.html,https://root.cern,https://root.cern/doc/master/group__tree.html,1,['simpl'],['simple']
Usability,"cation based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly choosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal; over background discrimination). More than 50% of neural networks are multilayer perceptrons. This; implementation of multilayer perceptrons is inspired from the; MLPfit; package originaly written by Jerome Schwindling. MLPfit remains; one of the fastest tool for neural networks studies, and this ROOT; add-on will not try to compete on that. A clear and flexible Object; Oriented implementation has been choosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. The; MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with f being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. A linear combination of sigmoids can approximate any; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, devided by two, of the error on each individual output; neuron.; In a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:2729,simpl,simple,2729,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,3,['simpl'],['simple']
Usability,"cation with 2 classes and regression with; 112/// one regression-target; 113 ; 114Bool_t TMVA::MethodDNN::HasAnalysisType(Types::EAnalysisType type,; 115 UInt_t numberClasses,; 116 UInt_t /*numberTargets*/ ); 117{; 118 if (type == Types::kClassification && numberClasses == 2 ) return kTRUE;; 119 if (type == Types::kMulticlass ) return kTRUE;; 120 if (type == Types::kRegression ) return kTRUE;; 121 ; 122 return kFALSE;; 123}; 124 ; 125////////////////////////////////////////////////////////////////////////////////; 126/// default initializations; 127 ; 128void TMVA::MethodDNN::Init() {; 129 Log() << kWARNING; 130 << ""MethodDNN is deprecated and it will be removed in future ROOT version. ""; 131 ""Please use MethodDL ( TMVA::kDL)""; 132 << Endl;; 133 ; 134}; 135 ; 136////////////////////////////////////////////////////////////////////////////////; 137/// Options to be set in the option string:; 138///; 139/// - LearningRate <float> DNN learning rate parameter.; 140/// - DecayRate <float> Decay rate for learning parameter.; 141/// - TestRate <int> Period of validation set error computation.; 142/// - BatchSize <int> Number of event per batch.; 143///; 144/// - ValidationSize <string> How many events to use for validation. ""0.2""; 145/// or ""20%"" indicates that a fifth of the; 146/// training data should be used. ""100""; 147/// indicates that 100 events should be used.; 148 ; 149void TMVA::MethodDNN::DeclareOptions(); 150{; 151 ; 152 DeclareOptionRef(fLayoutString=""SOFTSIGN|(N+100)*2,LINEAR"",; 153 ""Layout"",; 154 ""Layout of the network."");; 155 ; 156 DeclareOptionRef(fValidationSize = ""20%"", ""ValidationSize"",; 157 ""Part of the training data to use for ""; 158 ""validation. Specify as 0.2 or 20% to use a ""; 159 ""fifth of the data set as validation set. ""; 160 ""Specify as 100 to use exactly 100 events. ""; 161 ""(Default: 20%)"");; 162 ; 163 DeclareOptionRef(fErrorStrategy=""CROSSENTROPY"",; 164 ""ErrorStrategy"",; 165 ""Loss function: Mean squared error (regression)""; 166 "" or cross entr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:4786,learn,learning,4786,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['learn'],['learning']
Usability,"cation.cxx. Member Function Documentation. ◆ ApplicationName(). virtual const char * TApplication::ApplicationName ; (; ); const. inlinevirtual . Reimplemented in TApplicationRemote.; Definition at line 128 of file TApplication.h. ◆ Argc(). Int_t TApplication::Argc ; (; ); const. inline . Definition at line 140 of file TApplication.h. ◆ Argv() [1/2]. char ** TApplication::Argv ; (; ); const. inline . Definition at line 141 of file TApplication.h. ◆ Argv() [2/2]. char * TApplication::Argv ; (; Int_t ; index); const. Return specified argument. ; Definition at line 329 of file TApplication.cxx. ◆ Class(). static TClass * TApplication::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TApplication::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TApplication::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 167 of file TApplication.h. ◆ ClearInputFiles(). void TApplication::ClearInputFiles ; (; ). Clear list containing macro files passed as program arguments. ; This method is called from TRint::Run() to ensure that the macro files are only executed the first time Run() is called. ; Definition at line 318 of file TApplication.cxx. ◆ Close(). void TApplication::Close ; (; TApplication * ; app). staticprotected . Static function used to close a remote application. ; Definition at line 2070 of file TApplication.cxx. ◆ CreateApplication(). void TApplication::CreateApplication ; (; ). static . Static function used to create a default application environment. ; Definition at line 1975 of file TApplication.cxx. ◆ DeclFileName(). static const char * TApplication::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 167 of file TApplication.h. ◆ ExecuteFile(). Longptr_t TApplication::ExecuteFile ; (; const char * ; file, . Int_t * ; error = nullptr, . Bool_t ; keep = kFALSE .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:24491,Clear,ClearInputFiles,24491,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['Clear'],['ClearInputFiles']
Usability,"cationError ; (; ). inlinevirtual . Definition at line 57 of file MisClassificationError.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MisClassificationError::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MisClassificationError::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MisClassificationError::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 63 of file MisClassificationError.h. ◆ DeclFileName(). static const char * TMVA::MisClassificationError::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 63 of file MisClassificationError.h. ◆ GetSeparationIndex(). Double_t TMVA::MisClassificationError::GetSeparationIndex ; (; const Double_t ; s, . const Double_t ; b . ). virtual . Misclassification error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)) ; Implements TMVA::SeparationBase.; Definition at line 43 of file MisClassificationError.cxx. ◆ IsA(). virtual TClass * TMVA::MisClassificationError::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::SeparationBase.; Definition at line 63 of file MisClassificationError.h. ◆ Streamer(). virtual void TMVA::MisClassificationError::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::SeparationBase. ◆ StreamerNVirtual(). void TMVA::MisClassificationError::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file MisClassificationError.h. Libraries for TMVA::MisClassificationError:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MisClassificationError.h; tmva/tmva/src/MisClassificationError.cxx. TMVAMisClassificationError. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MisClassificationError.html:4537,Guid,Guide,4537,doc/master/classTMVA_1_1MisClassificationError.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MisClassificationError.html,1,['Guid'],['Guide']
Usability,"catter.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. scatter.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw a scatter plot. . ; void scatter(); {; auto canvas = new TCanvas();; canvas->SetRightMargin(0.14);; gStyle->SetPalette(kBird, 0, 0.6); // define a transparent palette; ; const int n = 175;; double x[n];; double y[n];; double c[n];; double s[n];; ; // Define four random data set; auto r = new TRandom();; for (int i=0; i<n; i++) {; x[i] = 100*r->Rndm(i);; y[i] = 200*r->Rndm(i);; c[i] = 300*r->Rndm(i);; s[i] = 400*r->Rndm(i);; }; ; auto scatter = new TScatter(n, x, y, c, s);; scatter->SetMarkerStyle(20);; scatter->SetTitle(""Scatter plot title;X title;Y title;Z title"");; scatter->GetXaxis()->SetRangeUser(20.,90.);; scatter->GetYaxis()->SetRangeUser(55.,90.);; scatter->GetZaxis()->SetRangeUser(10.,200.);; scatter->Draw(""A"");; }; c#define c(i)Definition RSha256.hxx:101; kBird@ kBirdDefinition TColor.h:118; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TScatterA TScatter is able to draw four variables scatter plot on a single plot.Definition TScatter.h:32; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; AuthorOlivier Couet ; Definition in file scatter.C. tutorialsgraphsscatter.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/scatter_8C.html:1946,Guid,Guide,1946,doc/master/scatter_8C.html,https://root.cern,https://root.cern/doc/master/scatter_8C.html,1,['Guid'],['Guide']
Usability,"cay.cxx. ◆ getGenerator(). Int_t RooDecay::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPdf.; Definition at line 91 of file RooDecay.cxx. ◆ IsA(). TClass * RooDecay::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsAnaConvPdf.; Definition at line 46 of file RooDecay.h. ◆ Streamer(). void RooDecay::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsAnaConvPdf. ◆ StreamerNVirtual(). void RooDecay::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 46 of file RooDecay.h. Member Data Documentation. ◆ _basisExp. Int_t RooDecay::_basisExp. protected . Definition at line 44 of file RooDecay.h. ◆ _t. RooRealProxy RooDecay::_t. protected . Definition at line 41 of file RooDecay.h. ◆ _tau. RooRealProxy RooDecay::_tau. protected . Definition at line 42 of file RooDecay.h. ◆ _type. DecayType RooDecay::_type. protected . Definition at line 43 of file RooDecay.h. Libraries for RooDecay:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooDecay.h; roofit/roofit/src/RooDecay.cxx. RooDecay. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDecay.html:82093,Guid,Guide,82093,doc/master/classRooDecay.html,https://root.cern,https://root.cern/doc/master/classRooDecay.html,1,['Guid'],['Guide']
Usability,"cayChannel - a decay channel for a radionuclide; TGeoElementTable - table of elements. Function Members (Methods); public:. virtual~TGeoElementRN(); Double_tTGeoElement::A() const; voidTObject::AbstractMethod(const char* method) const; voidAddDecay(TGeoDecayChannel* dc); voidAddDecay(Int_t decay, Int_t diso, Double_t branchingRatio, Double_t qValue); voidTGeoElement::AddIsotope(TGeoIsotope* isotope, Double_t relativeAbundance); voidAddRatio(TGeoBatemanSol& ratio); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAtomicNo() const; virtual voidTObject::Browse(TBrowser* b); Bool_tCheckDecays() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tDecayResult(TGeoDecayChannel* dc) const; TObjArray*Decays() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Int_tENDF(Int_t a, Int_t z, Int_t iso); virtual Int_tENDFCode() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFillPopulation(TObjArray* population, Double_t precision = 0.001, Double_t factor = 1.); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoElementRN.html:1159,Clear,Clear,1159,root/html602/TGeoElementRN.html,https://root.cern,https://root.cern/root/html602/TGeoElementRN.html,2,['Clear'],['Clear']
Usability,"ccess a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using TTree::Draw() to access a TTree. Now close the browser, quit and restart ROOT (to make sure every",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-ttreedraw-access-ttree.html:1027,Guid,Guides,1027,d/using-ttreedraw-access-ttree.html,https://root.cern,https://root.cern/d/using-ttreedraw-access-ttree.html,1,['Guid'],['Guides']
Usability,"cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 716 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 734 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 767 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 785 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 775 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 188 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char * ; title, . Int_t ; form . ). Create a new canvas with a predefined size form. ; If form < 0 the menubar is not shown. form = 1 700x500 at 10,10 (set by TStyle::SetCanvasDefH,W,X,Y); form = 2 500x500 at 20,20; form = 3 500x500 at 30,30; form = 4 500x500 at 40,40; form = 5 500x500 at 50,50 . Definition at line 284 of file TCanvas.cxx. ◆ Constructor() [3/4].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:66685,Clear,ClearPadSave,66685,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['Clear'],['ClearPadSave']
Usability,"cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 719 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 737 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 770 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 788 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 778 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 191 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char * ; title, . Int_t ; form . ). Create a new canvas with a predefined size form. ; If form < 0 the menubar is not shown. form = 1 700x500 at 10,10 (set by TStyle::SetCanvasDefH,W,X,Y); form = 2 500x500 at 20,20; form = 3 500x500 at 30,30; form = 4 500x500 at 40,40; form = 5 500x500 at 50,50 . Definition at line 287 of file TCanvas.cxx. ◆ Constructor() [3/4].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:67061,Clear,ClearPadSave,67061,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['Clear'],['ClearPadSave']
Usability,"cd(const char *path=nullptr)Change Current Geometry to this.Definition TGeometry.cxx:246; TNodeTNode description.Definition TNode.h:33; TNode::SetPositionvirtual void SetPosition(Double_t x=0, Double_t y=0, Double_t z=0)Definition TNode.h:89; TNode::cdvirtual void cd(const char *path=nullptr)Change Current Reference node to this.Definition TNode.cxx:249; TNode::SetVisibilityvirtual void SetVisibility(Int_t vis=1)Set visibility for this node and its sons.Definition TNode.cxx:758; TShape::SetVisibilityvirtual void SetVisibility(Int_t vis)Definition TShape.h:62; TViewSee TView3D.Definition TView.h:25; TView::GetRangevirtual void GetRange(Float_t *min, Float_t *max)=0; TView::SetRangevirtual void SetRange(const Double_t *min, const Double_t *max)=0; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::Modifiedvirtual void Modified(Bool_t flag=1)=0; TVirtualPad::Updatevirtual void Update()=0; TVirtualPad::GetViewvirtual TView * GetView() const =0; TXTRUA poly-extrusion.Definition TXTRU.h:22; TXTRU::DefineVertexvirtual void DefineVertex(Int_t pointNum, Float_t x, Float_t y)Set vertex point ipt to (x,y) expand size of array if necessary.Definition TXTRU.cxx:274; TXTRU::DefineSectionvirtual void DefineSection(Int_t secNum, Float_t z, Float_t scale=1., Float_t x0=0., Float_t y0=0.)Set z section iz information expand size of array if necessary.Definition TXTRU.cxx:220; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; TMVA::DNN::Cuda::max__device__ AFloat max(AFloat x, AFloat y)Definition Kernels.cuh:207; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; AuthorRobert Hatcher (rhatc.nosp@m.her@.nosp@m.fnal..nosp@m.gov) 2000.09.06 ; Definition in file xtruSamples.C. tutorialsgeomxtruSamples.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/xtruSamples_8C.html:7693,Guid,Guide,7693,doc/master/xtruSamples_8C.html,https://root.cern,https://root.cern/doc/master/xtruSamples_8C.html,1,['Guid'],['Guide']
Usability,"ce . Definition at line 29 of file TCTUB.h. Public Member Functions;  TCTUB ();  CTUB shape default constructor. ;  ;  TCTUB (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t *lowNormal, Float_t *highNormal);  CTUB shape normal constructor. ;  ;  TCTUB (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t coslx, Float_t cosly, Float_t coslz, Float_t coshx, Float_t coshy, Float_t coshz);  CTUB shape normal constructor. ;  ;  ~TCTUB () override;  CTUB shape default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TCTUB. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBS;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape normal constructor. ;  ;  ~TTUBS () override;  TUBS shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetPhi1 () const;  ; virtual Float_t GetPhi2 () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCTUB.html:2038,simpl,simplified,2038,doc/master/classTCTUB.html,https://root.cern,https://root.cern/doc/master/classTCTUB.html,1,['simpl'],['simplified']
Usability,"ce Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::VariableImportance Class ReferenceTMVA. . Definition at line 44 of file VariableImportance.h. Public Member Functions;  VariableImportance (DataLoader *loader);  ;  ~VariableImportance ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; const VariableImportanceResult & GetResults () const;  ; VIType GetType ();  ; virtual TClass * IsA () const;  ; void SetType (VIType type);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html:1070,learn,learning,1070,doc/master/classTMVA_1_1VariableImportance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html,1,['learn'],['learning']
Usability,"ce Reference. Classes; class  RegulatorCleanup;  A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. More...;  ; class  RPyROOTApplication;  Interactive application for Python. More...;  ; class  TMemoryRegulator;  Manages TObject-derived objects created in a PyROOT application. More...;  . Functions; PyObject * AddCPPInstancePickling (PyObject *self, PyObject *args);  Set reduce attribute for CPPInstance objects. ;  ; PyObject * AddPrettyPrintingPyz (PyObject *self, PyObject *args);  Add pretty printing pythonization. ;  ; PyObject * AddTClassDynamicCastPyz (PyObject *self, PyObject *args);  Add pythonization for TClass::DynamicCast. ;  ; PyObject * AddTObjectEqNePyz (PyObject *self, PyObject *args);  Add pythonization for equality and inequality operators in TObject. ;  ; PyObject * BranchPyz (PyObject *self, PyObject *args);  Add pythonization for TTree::Branch. ;  ; PyObject * ClearProxiedObjects (PyObject *self, PyObject *args);  ; PyObject * CPPInstanceExpand (PyObject *self, PyObject *args);  Deserialize pickled objects. ;  ; PyObject * GetBranchAttr (PyObject *self, PyObject *args);  ; void Init ();  ; PyObject * RegisterConverterAlias (PyObject *, PyObject *args);  ; PyObject * RegisterExecutorAlias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 of file CPPInstancePyz.cxx. ◆ AddPrettyPrintingPyz(). PyObject * PyROOT::AddPrettyPrintingPyz ; (; PyObject * ; self, . PyObject * ; args . ). Add pretty printing pyt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespacePyROOT.html:1101,Clear,ClearProxiedObjects,1101,doc/master/namespacePyROOT.html,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html,1,['Clear'],['ClearProxiedObjects']
Usability,"ce cannot be used.; 4.3.1 What the user must supply; The user must supply to M. a valid implementation of the FCNBase base class; parameters with their starting values; expected uncertainties on the parameters. The input parameters can be simply defined via an std::vector\(<\)double\(>\), which means that all parameters are variables. If the user wants fix a parameter or put limits on it before minimization, he has to instantiate a MnUserParameters object and then add parameters one by one, giving them a name, value, uncertainty. Once all parameters are added to MnUserParameters, he can fix a parameter or put limits on another one before handing them over to Minit for minimization.; 4.3.2 What the user can supply; Optionally the user can supply his own gradient calculator by implementing the FCNGradientBase interface or supply a full covariance matrix for input if one is available. The covariance matrix can be supplied in form of a std::vector\(<\)double\(>\) in packed storage format (upper triangular), or in a more user-friendly way by using the interface provided by the MnUserCovariance.; 4.4 Running a M minimization; Two use cases are addressed for minimization:. The user just wants the function to be minimized in one go.; The user wants to minimize the \(\mbox{FCN}\) in several minimization steps, re-using the result of the preceeding minimization in the next step and change parameters in between (fix/release/put limits on them, etc.). How M minimizations can be performed is shown in [example:main].; 4.4.1 Direct usage of minimizers; Minimizers such as the VariableMetricMinimizer are designed as state-less minimization engines, which means that they do not depend on the current function and its parameters. Any \(\mbox{FCN}\) function can be minimized with the same minimizer. The interface is restricted to minimization and no parameter interaction is possible.; 4.4.2 Using an application (MnMigrad); MnMigrad uses the VariableMetricMinimizer for minimization but a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:38611,user-friendly,user-friendly,38611,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['user-friendly'],['user-friendly']
Usability,"ce data member vector (for searching purposes) ; Definition at line 111 of file TSchemaRule.h. ◆ fIncludeVect. TObjArray* ROOT::TSchemaRule::fIncludeVect. mutableprivate . Definition at line 112 of file TSchemaRule.h. ◆ fReadFuncPtr. ReadFuncPtr_t ROOT::TSchemaRule::fReadFuncPtr. private . Definition at line 115 of file TSchemaRule.h. ◆ fReadRawFuncPtr. ReadRawFuncPtr_t ROOT::TSchemaRule::fReadRawFuncPtr. private . Conversion function pointer for read rule. ; Definition at line 116 of file TSchemaRule.h. ◆ fRuleType. RuleType_t ROOT::TSchemaRule::fRuleType. private . Conversion function pointer for readraw rule. ; Definition at line 117 of file TSchemaRule.h. ◆ fSource. TString ROOT::TSchemaRule::fSource. private . Target data member vector (for searching purposes) ; Definition at line 109 of file TSchemaRule.h. ◆ fSourceClass. TString ROOT::TSchemaRule::fSourceClass. private . Source checksum vector (for searching purposes) ; Definition at line 105 of file TSchemaRule.h. ◆ fSourceVect. TObjArray* ROOT::TSchemaRule::fSourceVect. mutableprivate . Definition at line 110 of file TSchemaRule.h. ◆ fTarget. TString ROOT::TSchemaRule::fTarget. private . Definition at line 107 of file TSchemaRule.h. ◆ fTargetClass. TString ROOT::TSchemaRule::fTargetClass. private . Definition at line 106 of file TSchemaRule.h. ◆ fTargetVect. TObjArray* ROOT::TSchemaRule::fTargetVect. mutableprivate . Definition at line 108 of file TSchemaRule.h. ◆ fVersion. TString ROOT::TSchemaRule::fVersion. private . Definition at line 101 of file TSchemaRule.h. ◆ fVersionVect. std::vector<std::pair<Int_t, Int_t> >* ROOT::TSchemaRule::fVersionVect. mutableprivate . Definition at line 102 of file TSchemaRule.h. Libraries for ROOT::TSchemaRule:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TSchemaRule.h; core/meta/src/TSchemaRule.cxx. ROOTTSchemaRule. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html:30015,Guid,Guide,30015,doc/master/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule.html,1,['Guid'],['Guide']
Usability,"ce file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsPdf. class RooAbsPdf: public RooAbsReal. RooAbsPdf is the abstract interface for all probability density; functions The class provides hybrid analytical/numerical; normalization for its implementations, error tracing and a MC; generator interface. A minimal implementation of a PDF class derived from RooAbsPdf; should overload the evaluate() function. This functions should; return PDFs value. [Normalization/Integration]. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex, composite PDF; if any of its variables are functions instead of variables. In; such cases the normalization of the composite may not be simply the; integral over the dependents of the top level PDF as these are; functions with potentially non-trivial Jacobian terms themselves.; Therefore. --> No explicit attempt should be made to normalize; the functions output in evaluate(). In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead the choice of normalization is always specified each time a; normalized values is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform a fully numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e. no hidden Jacobian ter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:1067,simpl,simply,1067,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,7,['simpl'],['simply']
Usability,"ce of a TH2 following the mouse position ;  exec1.CEcho object at mouse position ;  exec2.CEcho object at mouse position and show a graphics line ;  Fibonacci.C A TH2Poly build with Fibonacci numbers ;  fillrandom.C Fill a 1-D histogram from a parametric function ;  FirstContour.C Make a contour plot and get the first contour in a TPolyMarker ;  greyscale.C Create grey scale of 200 x 200 boxes ;  h1draw.C 1-D histogram drawing options ;  hbars.C Example of bar charts with 1-d histograms ;  hksimple.C Illustrates the advantages of a TH1K histogram ;  hlabels1.C 1-D histograms with alphanumeric labels ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplotOld.CExample displaying two histograms and their ratio ;  rebin.C Rebin a variable bin-width histogram ;  reverseaxis.C Example showing an histogram with reverse axis ;  sparsehist.CEvaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension ;  statsEditing.C Edit statistics box ;  testSmooth.C Histogram smoothing ;  th2polyBoxes.C This tutorial illustrates how to create an hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:122929,simpl,simple,122929,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"ce to shape rendering data. ; Definition at line 145 of file RGeomData.hxx. Public Member Functions;  RGeomVisible ()=default;  ;  RGeomVisible (int _nodeid, int _seqid, const std::vector< int > &_stack);  . Public Attributes; std::string color;  color in rgb format ;  ; int nodeid {0};  selected node id, ;  ; double opacity {1};  opacity ;  ; RGeomRenderInfo * ri {nullptr};  render information for the shape, can be same for different nodes ;  ; int seqid {0};  sequence id, used for merging later ;  ; std::vector< int > stack;  path to the node, index in list of childs ;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomVisible() [1/2]. ROOT::RGeomVisible::RGeomVisible ; (; ). default . ◆ RGeomVisible() [2/2]. ROOT::RGeomVisible::RGeomVisible ; (; int ; _nodeid, . int ; _seqid, . const std::vector< int > & ; _stack . ). inline . Definition at line 155 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeomVisible::color. color in rgb format ; Definition at line 150 of file RGeomData.hxx. ◆ nodeid. int ROOT::RGeomVisible::nodeid {0}. selected node id, ; Definition at line 147 of file RGeomData.hxx. ◆ opacity. double ROOT::RGeomVisible::opacity {1}. opacity ; Definition at line 151 of file RGeomData.hxx. ◆ ri. RGeomRenderInfo* ROOT::RGeomVisible::ri {nullptr}. render information for the shape, can be same for different nodes ; Definition at line 152 of file RGeomData.hxx. ◆ seqid. int ROOT::RGeomVisible::seqid {0}. sequence id, used for merging later ; Definition at line 148 of file RGeomData.hxx. ◆ stack. std::vector<int> ROOT::RGeomVisible::stack. path to the node, index in list of childs ; Definition at line 149 of file RGeomData.hxx. Libraries for ROOT::RGeomVisible:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomVisible. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomVisible.html:2260,Guid,Guide,2260,doc/v632/classROOT_1_1RGeomVisible.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomVisible.html,1,['Guid'],['Guide']
Usability,"ce.cxx. ◆ GetDataType() [1/2]. BinData::ErrorType ROOT::Fit::GetDataType ; (; const TGraph * ; gr, . DataOptions & ; fitOpt . ). Definition at line 476 of file HFitInterface.cxx. ◆ GetDataType() [2/2]. BinData::ErrorType ROOT::Fit::GetDataType ; (; const TGraph2D * ; gr, . const DataOptions & ; fitOpt . ). Definition at line 545 of file HFitInterface.cxx. ◆ Init2DGaus(). void ROOT::Fit::Init2DGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 388 of file HFitInterface.cxx. ◆ InitExpo(). void ROOT::Fit::InitExpo ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ; Compute rough values of parameters for an exponential. ; Definition at line 267 of file HFitInterface.cxx. ◆ InitGaus(). void ROOT::Fit::InitGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 306 of file HFitInterface.cxx. ◆ lessRange(). bool ROOT::Fit::lessRange ; (; const std::pair< double, double > & ; r1, . const std::pair< double, double > & ; r2 . ). Definition at line 73 of file DataRange.cxx. ◆ operator<<(). ostream & ROOT::Fit::operator<< ; (; ostream & ; os, . const ROOT::Fit::Box & ; b . ). Definition at line 374 of file SparseData.cxx. ◆ UnBinFit(). TFitResultPtr ROOT::Fit::UnBinFit ; (; ROOT::Fit::UnBinData * ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit.html:16221,simpl,simple,16221,doc/master/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html,2,['simpl'],['simple']
Usability,"ce/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tree/clonesA_Event.h>. Inheritance diagram for TMrbSubevent_Caen:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMrbSubevent_Caen(). TMrbSubevent_Caen::TMrbSubevent_Caen ; (; ). inline . Definition at line 49 of file clonesA_Event.h. ◆ ~TMrbSubevent_Caen(). virtual TMrbSubevent_Caen::~TMrbSubevent_Caen ; (; ). inlinevirtual . Definition at line 50 of file clonesA_Event.h. Member Function Documentation. ◆ Class(). static TClass * TMrbSubevent_Caen::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMrbSubevent_Caen::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMrbSubevent_Caen::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 58 of file clonesA_Event.h. ◆ Clear(). void TMrbSubevent_Caen::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 51 of file clonesA_Event.h. ◆ DeclFileName(). static const char * TMrbSubevent_Caen::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file clonesA_Event.h. ◆ GetHitBuffer(). TUsrHitBuffer * TMrbSubevent_Caen::GetHitBuffer ; (; ). inline . Definition at line 52 of file clonesA_Event.h. ◆ IsA(). virtual TClass * TMrbSubevent_Caen::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TUsrSevtData1, and TUsrSevtData2.; Definition at line 58 of file clonesA_Event.h. ◆ Streamer(). virtual void TMrbSubevent_Caen::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TUsrSevtData1, and TUsrSevtData2. ◆ StreamerNVirtual(). void TMrbSubevent_Caen::StreamerNVirtual ; (; TBuffer & ; ClassDef_Stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMrbSubevent__Caen.html:10958,Clear,Clear,10958,doc/master/classTMrbSubevent__Caen.html,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html,1,['Clear'],['Clear']
Usability,"ce::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file TGeoOpticalSurface.h. ◆ DeclFileName(). static const char * TGeoSkinSurface::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 194 of file TGeoOpticalSurface.h. ◆ GetSurface(). TGeoOpticalSurface const * TGeoSkinSurface::GetSurface ; (; ); const. inline . Definition at line 189 of file TGeoOpticalSurface.h. ◆ GetVolume(). TGeoVolume const * TGeoSkinSurface::GetVolume ; (; ); const. inline . Definition at line 190 of file TGeoOpticalSurface.h. ◆ IsA(). TClass * TGeoSkinSurface::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 194 of file TGeoOpticalSurface.h. ◆ Print(). void TGeoSkinSurface::Print ; (; Option_t * ; option = """"); const. overridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 357 of file TGeoOpticalSurface.cxx. ◆ Streamer(). void TGeoSkinSurface::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoSkinSurface::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TGeoOpticalSurface.h. Member Data Documentation. ◆ fSurface. TGeoOpticalSurface const* TGeoSkinSurface::fSurface = nullptr. private . Definition at line 179 of file TGeoOpticalSurface.h. ◆ fVolume. TGeoVolume const* TGeoSkinSurface::fVolume = nullptr. private . Definition at line 180 of file TGeoOpticalSurface.h. Libraries for TGeoSkinSurface:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoOpticalSurface.h; geom/geom/src/TGeoOpticalSurface.cxx. TGeoSkinSurface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoSkinSurface.html:14446,Guid,Guide,14446,doc/master/classTGeoSkinSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoSkinSurface.html,1,['Guid'],['Guide']
Usability,"ceX[fNox] number of candidates in X slice; Int_t*fNsliceY[fNoy] number of candidates in Y slice; Int_t*fNsliceZ[fNoz] number of candidates in Z slice; Int_tfNxlength of array of X voxels; Int_tfNylength of array of Y voxels; Int_tfNzlength of array of Z voxels; Int_t*fOBx[fNox] offsets of daughter indices for slices X; Int_t*fOBy[fNoy] offsets of daughter indices for slices Y; Int_t*fOBz[fNoz] offsets of daughter indices for slices Z; Int_t*fOEx[fNox] offsets of extra indices for slices X; Int_t*fOEy[fNoy] offsets of extra indices for slices Y; Int_t*fOEz[fNoz] offsets of extra indices for slices Z; Int_tfPriority[3]priority for each axis; vector<ThreadData_t*>fThreadData!; Int_tfThreadSize!; TGeoVolume*fVolumevolume to which applies; Double_t*fXb[fIbx] ordered array of X box boundaries; Double_t*fYb[fIby] ordered array of Y box boundaries; Double_t*fZb[fIbz] ordered array of Z box boundaries. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. TGeoVoxelFinder(); Default constructor. TGeoVoxelFinder(TGeoVolume* vol); Default constructor. TGeoVoxelFinder(const TGeoVoxelFinder& ); copy constructor. TGeoVoxelFinder& operator=(const TGeoVoxelFinder& ); assignment operator. ~TGeoVoxelFinder(); Destructor; printf(""deleting finder of %s\n"", fVolume->GetName());. Int_t GetNcandidates(Int_t tid = 0) const. Int_t* GetCheckList(Int_t& nelem, Int_t tid = 0) const. void BuildVoxelLimits(); build the array of bounding boxes of the nodes inside. void CreateCheckList(Int_t tid = 0); Initializes check list. void DaughterToMother(Int_t id, Double_t* local, Double_t* master) const; convert a point from the local reference system of node id to reference; system of mother volume. Bool_t IsSafeVoxel(Double_t* point, Int_t inode, Double_t minsafe) const; Computes squared distance from POINT to the voxel(s) containing node INODE. Returns 0; if POINT inside voxel(s). Double_t Efficiency(); --- Compute voxelization efficien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoVoxelFinder.html:9616,Clear,ClearThreadData,9616,root/html532/TGeoVoxelFinder.html,https://root.cern,https://root.cern/root/html532/TGeoVoxelFinder.html,1,['Clear'],['ClearThreadData']
Usability,"ce_Check(pyobject);; 200 ; 201// all C++ objects should have sq_item defined, but a user-derived class may; 202// have deleted it, in which case this is not a sequence; 203 PyTypeObject* t = Py_TYPE(pyobject);; 204 if (!t->tp_as_sequence || !t->tp_as_sequence->sq_item); 205 return false;; 206 ; 207// if this is the default getitem, it is only a sequence if it's an array type; 208 if (t->tp_as_sequence->sq_item == CPPInstance_Type.tp_as_sequence->sq_item) {; 209 if (((CPPInstance*)pyobject)->fFlags & CPPInstance::kIsArray); 210 return true;; 211 return false;; 212 }; 213 ; 214// TODO: could additionally verify whether __len__ is supported and/or whether; 215// operator()[] takes an int argument type; 216 ; 217 return true;; 218}; 219 ; 220//-----------------------------------------------------------------------------; 221bool CPyCppyy::Instance_IsLively(PyObject* pyobject); 222{; 223// Test whether the given instance can safely return to C++; 224 if (!CPPInstance_Check(pyobject)); 225 return true; // simply don't know; 226 ; 227// the instance fails the lively test if it owns the C++ object while having a; 228// reference count of 1 (meaning: it could delete the C++ instance any moment); 229 if (pyobject->ob_refcnt <= 1 && (((CPPInstance*)pyobject)->fFlags & CPPInstance::kIsOwner)); 230 return false;; 231 ; 232 return true;; 233}; 234 ; 235//-----------------------------------------------------------------------------; 236bool CPyCppyy::Overload_Check(PyObject* pyobject); 237{; 238// Test if the given pyobject is of CPPOverload derived type.; 239 if (!Initialize()); 240 return false;; 241 ; 242// detailed walk through inheritance hierarchy; 243 return CPPOverload_Check(pyobject);; 244}; 245 ; 246//-----------------------------------------------------------------------------; 247bool CPyCppyy::Overload_CheckExact(PyObject* pyobject); 248{; 249// Test if the given pyobject is of CPPOverload type.; 250 if (!Initialize()); 251 return false;; 252 ; 253// direct pointer co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:7789,simpl,simply,7789,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['simpl'],['simply']
Usability,"ced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for ROOT::RBrowserDataCleanup:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserDataCleanup(). ROOT::RBrowserDataCleanup::RBrowserDataCleanup ; (; RBrowserData & ; _data). inline . Definition at line 48 of file RBrowserData.cxx. Member Function Documentation. ◆ RecursiveRemove(). void ROOT::RBrowserDataCleanup::RecursiveRemove ; (; TObject * ; obj). inlineoverridevirtual . Recursively remove this object from a list. ; Typically implemented by classes that can contain multiple references to a same object. ; Reimplemented from TObject.; Definition at line 50 of file RBrowserData.cxx. Member Data Documentation. ◆ fData. RBrowserData& ROOT::RBrowserDataCleanup::fData. private . Definition at line 45 of file RBrowserData.cxx. gui/browserv7/src/RBrowserData.cxx. ROOTRBrowserDataCleanup. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserDataCleanup.html:10518,Guid,Guide,10518,doc/master/classROOT_1_1RBrowserDataCleanup.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserDataCleanup.html,1,['Guid'],['Guide']
Usability,"ced by st; - & is replaced by rf. If a cutfilename is specified, for each entry, we execute; if (cutfilename()) htemp->Fill(macrofilename());; If no cutfilename is specified, for each entry we execute; htemp(macrofilename());. The default for the histogram are the same as for; TTreePlayer::DrawSelect. Long64_t DrawSelect(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); Draw expression varexp for specified entries; Returns -1 in case of error or number of selected events in case of success. varexp is an expression of the general form; - ""e1"" produces a 1-d histogram of expression ""e1""; - ""e1:e2"" produces a 2-d histogram (or profile) of ""e1"" versus ""e2""; - ""e1:e2:e3"" produces a 3-d scatter-plot of ""e1"" versus ""e2"" versus ""e3""; - ""e1:e2:e3:e4"" produces a 3-d scatter-plot of ""e1"" versus ""e2"" versus ""e3""; and ""e4"" mapped on the color number. Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); = px:py:pz:2.5*E produces a 3-d scatter-plot of px vs py ps pz; and the color number of each marker will be 2.5*E.; If the color number is negative it is set to 0.; If the color number is greater than the current number of colors; it is set to the highest color number.; The default number of colors is 50.; see TStyle::SetPalette for setting a new color palette. Note that the variables e1, e2 or e3 may contain a selection.; example, if e1= x*(y<0), the value histogrammed will be x if y<0; and will be 0 otherwise. The expressions can use all the operations and build-in functions; supported by TFormula (See TFormula::Analyze), including free; standing function taking numerical arguments (TMath::Bessel).; In addition, you can call member functions taking numerical; arguments. For example:; - ""TMath::BreitWigner(fPx,3,2)""; - ""event.GetHistogram().GetXaxis().GetXmax()""; Note: You can only pass expression th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:19371,simpl,simplest,19371,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['simpl'],['simplest']
Usability,"cence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Showing results with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped into few top-level categories. Each top-level category comes with a basic description of the framework design and of the purpose of its categories, which also have more detailed documentation about their use. The most complete documentation is the Reference Guide, that contains the automatically generated documentation of each class.; This document is about the top-level categories related to graphical output. . ‹ TMVA; up; Canvases and pads ›. Navigate through this book; Processing data with ROOT; Showing results with ROOTCanvases and pads; Graphics 2D; Graphics 3D. Simulation in ROOT; ROOT I/O. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/showing-results-root.html:2709,Guid,Guides,2709,d/showing-results-root.html,https://root.cern,https://root.cern/d/showing-results-root.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"cent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the active cursor of the specified window. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Put data into Clipboard. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Change window attributes. ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the bakcground color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  close display (terminate server/gMainThread thread) ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Get Clipboard data. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:2286,Clear,ClearArea,2286,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,2,['Clear'],"['Clear', 'ClearArea']"
Usability,"cepted and local actions ; Definition at line 94 of file TGDNDManager.h. ◆ fLocalSource. TGFrame* TGDNDManager::fLocalSource. protected . Definition at line 104 of file TGDNDManager.h. ◆ fLocalTarget. TGFrame * TGDNDManager::fLocalTarget. protected . local source and target ; Definition at line 104 of file TGDNDManager.h. ◆ fMain. TGFrame* TGDNDManager::fMain. protected . pointer on TGMainFrame ; Definition at line 90 of file TGDNDManager.h. ◆ fMask. Pixmap_t TGDNDManager::fMask. protected . pixmap used for the drag window ; Definition at line 109 of file TGDNDManager.h. ◆ fPic. Pixmap_t TGDNDManager::fPic. protected . Definition at line 109 of file TGDNDManager.h. ◆ fProxyOurs. Bool_t TGDNDManager::fProxyOurs. protected . kTRUE if root proxy is ours ; Definition at line 100 of file TGDNDManager.h. ◆ fSource. Window_t TGDNDManager::fSource. protected . Definition at line 101 of file TGDNDManager.h. ◆ fStatusPending. Bool_t TGDNDManager::fStatusPending. protected . kTRUE if status is pending ; Definition at line 98 of file TGDNDManager.h. ◆ fTarget. Window_t TGDNDManager::fTarget. protected . source and target windows ; Definition at line 101 of file TGDNDManager.h. ◆ fTargetIsDNDAware. Bool_t TGDNDManager::fTargetIsDNDAware. protected . kTRUE if target is DND aware ; Definition at line 102 of file TGDNDManager.h. ◆ fTypelist. Atom_t* TGDNDManager::fTypelist. protected . Definition at line 92 of file TGDNDManager.h. ◆ fUseVersion. Bool_t TGDNDManager::fUseVersion. protected . kTRUE if DND version is used ; Definition at line 99 of file TGDNDManager.h. ◆ fVersion. Atom_t TGDNDManager::fVersion. protected . not really an Atom, but a long ; Definition at line 91 of file TGDNDManager.h. Libraries for TGDNDManager:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDNDManager.h; gui/gui/src/TGDNDManager.cxx. TGDNDManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDNDManager.html:31157,Guid,Guide,31157,doc/master/classTGDNDManager.html,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html,1,['Guid'],['Guide']
Usability,"cess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterObj.html:2347,Clear,Clear,2347,doc/master/classTEventIterObj.html,https://root.cern,https://root.cern/doc/master/classTEventIterObj.html,3,['Clear'],['Clear']
Usability,"ch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; A more complete example including error handling and a few combinations of TTreeReaderValue and TTreeReaderArray would look like this:; #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>; ; #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h""; ; #include <vector>; #include <iostream>; ; bool CheckValue(ROOT::Internal::TTreeReaderValueBase& value) {; if (value.GetSetupStatus() < 0) {; std::cerr << ""Error "" << value.GetSetupStatus(); << ""setting up reader for "" << value.GetBranchName() << '\n';; return false;; }; return true;; }; ; ; // Analyze the tree ""MyTree"" in the file passed into the function.; // Returns false in case of errors.; bool analyze(TFile* file) {; // Create a TTreeReader named ""MyTree"" from the given TDirectory.; // The TTreeReader gives access to the TTree to the TTreeReaderValue and; // TTreeReaderArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReader.html:2766,simpl,simple,2766,doc/master/classTTreeReader.html,https://root.cern,https://root.cern/doc/master/classTTreeReader.html,1,['simpl'],['simple']
Usability,"ch entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9709,Clear,ClearEnvVars,9709,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearEnvVars']
Usability,"ch event return false. ; Reimplemented from TVirtualX.; Definition at line 5804 of file TGWin32.cxx. ◆ Class(). static TClass * TGWin32::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGWin32::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGWin32::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGWin32.h. ◆ ClearArea(). void TGWin32::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the bakcground color. ; Reimplemented from TVirtualX.; Definition at line 6398 of file TGWin32.cxx. ◆ ClearWindow() [1/2]. void TGWin32::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 1569 of file TGWin32.cxx. ◆ ClearWindow() [2/2]. void TGWin32::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 6728 of file TGWin32.cxx. ◆ CloseDisplay(). void TGWin32::CloseDisplay ; (; ). overridevirtual . close display (terminate server/gMainThread thread) ; Reimplemented from TVirtualX.; Definition at line 899 of file TGWin32.cxx. ◆ ClosePixmap(). void TGWin32::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 1588 of file TGWin32.cxx. ◆ CloseWindow(). void TGWin32::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 1596 of file TGWin32.cxx. ◆ CloseWindow1(). void TGWin32::CloseWindow1 ; (; ). private . Delete current window. ; Definition at line 1604 of file TGWin32.cxx. ◆ ConvertPrimarySelection(). void TGWin32::ConvertPrimarySelection ; (; Window_t ; id, . Atom_t ; clipboard, . Time_t ; when . ). overridevirtual . XConvertSelection() causes a SelectionRequest event to be sent to the current primary selecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:57911,Clear,Clear,57911,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Clear'],['Clear']
Usability,"ch that we need this in this tree too, although we don't..) ; Implements TMVA::Node.; Definition at line 529 of file DecisionTreeNode.cxx. ◆ AddToSumTarget(). void TMVA::DecisionTreeNode::AddToSumTarget ; (; Float_t ; t). inline . add to sum target, if traininfo defined ; Definition at line 335 of file DecisionTreeNode.h. ◆ AddToSumTarget2(). void TMVA::DecisionTreeNode::AddToSumTarget2 ; (; Float_t ; t2). inline . add to sum target 2, if traininfo defined ; Definition at line 337 of file DecisionTreeNode.h. ◆ Class(). static TClass * TMVA::DecisionTreeNode::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::DecisionTreeNode::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::DecisionTreeNode::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 397 of file DecisionTreeNode.h. ◆ ClearNodeAndAllDaughters(). void TMVA::DecisionTreeNode::ClearNodeAndAllDaughters ; (; ). clear the nodes (their S/N, Nevents etc), just keep the structure of the tree ; Definition at line 346 of file DecisionTreeNode.cxx. ◆ CreateNode(). virtual Node * TMVA::DecisionTreeNode::CreateNode ; (; ); const. inlinevirtual . Implements TMVA::Node.; Definition at line 132 of file DecisionTreeNode.h. ◆ DeclFileName(). static const char * TMVA::DecisionTreeNode::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 397 of file DecisionTreeNode.h. ◆ GetAlpha(). Double_t TMVA::DecisionTreeNode::GetAlpha ; (; ); const. inline . return the critical point alpha, or -1 if traininfo undefined ; Definition at line 308 of file DecisionTreeNode.h. ◆ GetAlphaMinSubtree(). Double_t TMVA::DecisionTreeNode::GetAlphaMinSubtree ; (; ); const. inline . return the minimum alpha in the tree rooted at this node, or -1 if traininfo undefined ; Definition at line 313 of file DecisionTreeNode.h. ◆ GetCC(). Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html:16835,Clear,ClearNodeAndAllDaughters,16835,doc/master/classTMVA_1_1DecisionTreeNode.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html,1,['Clear'],['ClearNodeAndAllDaughters']
Usability,"ch type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; they are going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree); Update pointer to current Tree and recompute pointers to the branches in the cache. void LearnPrefill(); Perform an initial prefetch, attempting to read as much of the learning; phase baskets for all branches at once. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). void Disable(); {fEnabled = kFALSE;}. void Enable(); {fEnabled = kTRUE;}. const TObjArray * GetCachedBranches() const; { return fBranches; }. EPrefillType GetConfiguredPrefillType() const. Int_t GetEntryMin() const; {return fEntryMin;}. Int_t GetEntryMax() const; {return fEntryMax;}. EPrefillType GetLearnPrefill() const; {return fPrefillType;}. TTree * GetTree() const; {return fTree;}. Bool_t IsAutoCreated() const; {return fAutoCreated;}. Bool_t IsEnabled() const; {return fEnabled;}. Bool_t IsLearning() const; {return fIsLearning;}. void SetAutoCreated(Bool_t val); {fAutoCreated = val;}. » Author: Rene Brun 04/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:27702,Learn,LearnPrefill,27702,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,2,"['Learn', 'learn']","['LearnPrefill', 'learning']"
Usability,"ch type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; they are going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree); Update pointer to current Tree and recompute pointers to the branches in the cache. void LearnPrefill(); Perform an initial prefetch, attempting to read as much of the learning; phase baskets for all branches at once. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). void Disable(); {fEnabled = kFALSE;}. void Enable(); {fEnabled = kTRUE;}. const TObjArray * GetCachedBranches() const; { return fBranches; }. EPrefillType GetConfiguredPrefillType() const. Int_t GetEntryMin() const; {return fEntryMin;}. Int_t GetEntryMax() const; {return fEntryMax;}. EPrefillType GetLearnPrefill() const; {return fPrefillType;}. TTree * GetTree() const; {return fTree;}. Bool_t IsAutoCreated() const; {return fAutoCreated;}. Bool_t IsEnabled() const; {return fEnabled;}. Bool_t IsLearning() const; {return fIsLearning;}. void SetAutoCreated(Bool_t val); {fAutoCreated = val;}. » Author: Rene Brun 04/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:27006,Learn,LearnPrefill,27006,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,2,"['Learn', 'learn']","['LearnPrefill', 'learning']"
Usability,"ch*Branch(const char* name, long address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*Branch(const char* name, const char* classname, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tBuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tCopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*CreateBasket(TBranch*); Int_tDebug() const; virtual voidDelete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:13663,Clear,Clear,13663,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,2,['Clear'],['Clear']
Usability,"ch. private . fraction of epochs where sampling is used ; Definition at line 177 of file MethodMLP.h. ◆ fSamplingFraction. Float_t TMVA::MethodMLP::fSamplingFraction. private . fraction of events which is sampled for training ; Definition at line 176 of file MethodMLP.h. ◆ fSamplingTesting. Bool_t TMVA::MethodMLP::fSamplingTesting. private . The testing sample is sampled. ; Definition at line 180 of file MethodMLP.h. ◆ fSamplingTraining. Bool_t TMVA::MethodMLP::fSamplingTraining. private . The training sample is sampled. ; Definition at line 179 of file MethodMLP.h. ◆ fSamplingWeight. Float_t TMVA::MethodMLP::fSamplingWeight. private . changing factor for event weights when sampling is turned on ; Definition at line 178 of file MethodMLP.h. ◆ fTau. Double_t TMVA::MethodMLP::fTau. private . line search variable ; Definition at line 184 of file MethodMLP.h. ◆ fTestRate. Int_t TMVA::MethodMLP::fTestRate. private . test for overtraining performed at each #th epochs ; Definition at line 193 of file MethodMLP.h. ◆ fTrainingMethod. ETrainingMethod TMVA::MethodMLP::fTrainingMethod. private . method of training, BP or GA ; Definition at line 173 of file MethodMLP.h. ◆ fTrainMethodS. TString TMVA::MethodMLP::fTrainMethodS. private . training method option param ; Definition at line 174 of file MethodMLP.h. ◆ fUpdateLimit. Int_t TMVA::MethodMLP::fUpdateLimit. private . zjh ; Definition at line 171 of file MethodMLP.h. ◆ fUseRegulator. bool TMVA::MethodMLP::fUseRegulator. private . zjh ; Definition at line 164 of file MethodMLP.h. ◆ fWeightRange. Float_t TMVA::MethodMLP::fWeightRange. private . suppress outliers for the estimator calculation ; Definition at line 206 of file MethodMLP.h. Libraries for TMVA::MethodMLP:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodMLP.h; tmva/tmva/src/MethodMLP.cxx. TMVAMethodMLP. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:54663,Guid,Guide,54663,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['Guid'],['Guide']
Usability,"ch.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Multiplyvirtual Bool_t Multiply(TF1 *f1, Double_t c1=1)Performs the operation:Definition TH1.cxx:6049; TH1::Dividevirtual Bool_t Divide(TF1 *f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH2PolyBinHelper class to represent a bin in the TH2Poly histogram.Definition TH2Poly.h:25; TH2PolyBin::GetXMinDouble_t GetXMin()Returns the minimum value for the x coordinates of the bin.Definition TH2Poly.cxx:1565; TH2PolyBin::GetChangedBool_t GetChanged() constDefinition TH2Poly.h:36; TH2PolyBin::~TH2PolyBin~TH2PolyBin() overrideDestructor.Definition TH2Poly.cxx:1491; TH2PolyBin::GetYMaxDouble_t GetYMax()Returns the maximum value for the y coordinates of the bin.Definition TH2Poly.cxx:1601; TH2PolyBin::GetAreaDouble_t GetArea()Returns the area of the bin.Definition TH2Poly.cxx:1499; TH2PolyBin::ClearContentvoid ClearContent()Definition TH2Poly.h:32; TH2PolyBin::Fillvoid Fill(Double_t w)Definition TH2Poly.h:33; TH2PolyBin::GetYMinDouble_t GetYMin()Returns the minimum value for the y coordinates of the bin.Definition TH2Poly.cxx:1637; TH2PolyBin::fAreaDouble_t fAreaBin area.Definition TH2Poly.h:51; TH2PolyBin::fContentDouble_t fContentBin content.Definition TH2Poly.h:52; TH2PolyBin::IsInsideBool_t IsInside(Double_t x, Double_t y) constReturn ""true"" if the point (x,y) is inside the bin.Definition TH2Poly.cxx:1673; TH2PolyBin::fXmaxDouble_t fXmaxX maximum value.Definition TH2Poly.h:55; TH2PolyBin::SetContentvoid SetContent(Double_t content)Definition TH2Poly.h:45; TH2PolyBin::fNumberInt_t fNumberBin number of the bin in TH2Poly.Definition TH2Poly.h:49; TH2PolyBin::TH2PolyBinTH2PolyBin()Default constructor.Definition TH2Poly.cxx:1459; TH2PolyBin::fYmaxDouble_t fYmaxY maximum value.Definition TH2Poly.h:56; TH2PolyBin::GetXMaxDouble_t GetXMax()Returns the maximum value for the x coordinates of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8h_source.html:11570,Clear,ClearContentvoid,11570,doc/master/TH2Poly_8h_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8h_source.html,2,['Clear'],"['ClearContent', 'ClearContentvoid']"
Usability,"ch.GetOutput();; 1338 auto weights = batch.GetWeights();; 1339 ; 1340 //std::cout << "" input use count "" << inputTensor.GetBufferUseCount() << std::endl;; 1341 // should we apply droput to the loss ??; 1342 minValError += deepNet.Loss(inputTensor, outputMatrix, weights, false, includeRegularization);; 1343 }; 1344 // add Regularization term; 1345 Double_t regzTerm = (includeRegularization) ? deepNet.RegularizationTerm() : 0.0;; 1346 minValError /= (Double_t)(nValidationSamples / settings.batchSize);; 1347 minValError += regzTerm;; 1348 ; 1349 ; 1350 // create a pointer to base class VOptimizer; 1351 std::unique_ptr<DNN::VOptimizer<Architecture_t, Layer_t, DeepNet_t>> optimizer;; 1352 ; 1353 // initialize the base class pointer with the corresponding derived class object.; 1354 switch (O) {; 1355 ; 1356 case EOptimizer::kSGD:; 1357 optimizer = std::unique_ptr<DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>>(; 1358 new DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>(settings.learningRate, deepNet, settings.momentum));; 1359 break;; 1360 ; 1361 case EOptimizer::kAdam: {; 1362 optimizer = std::unique_ptr<DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>>(; 1363 new DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>(; 1364 deepNet, settings.learningRate, settings.optimizerParams[""ADAM_beta1""],; 1365 settings.optimizerParams[""ADAM_beta2""], settings.optimizerParams[""ADAM_eps""]));; 1366 break;; 1367 }; 1368 ; 1369 case EOptimizer::kAdagrad:; 1370 optimizer = std::unique_ptr<DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>>(; 1371 new DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1372 settings.optimizerParams[""ADAGRAD_eps""]));; 1373 break;; 1374 ; 1375 case EOptimizer::kRMSProp:; 1376 optimizer = std::unique_ptr<DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>>(; 1377 new DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate, settings.momentum,; 1378 settings.optimizerParams[""RMSPROP_rho""],; 1379 settings.optimizerParams",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:53749,learn,learningRate,53749,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learningRate']
Usability,"chSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Private Attributes; bool fFlattening;  Whether the layer is doing flattening. ;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::DNN::VGeneralLayer< Architecture_t >; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html:6415,learn,learningRate,6415,doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"chSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t fDepth;  The depth of the layer. ;  ; size_t fHeight;  The height of the layer. ;  ; EInitialization fInit;  The initialization method. ;  ; size_t fInputDepth;  The depth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5667,learn,learningRate,5667,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"chamber volumes ? No, we will just need to replicate the; ones that we have already created. chamber->AddNode(wire_co, 1, new TGeoTranslation(-0.2,0,0));; chamber->AddNode(wire_co, 2, new TGeoTranslation(0.2,0,0));. The 2 nodes that we have created inside chamber will both point to a wire_co; object, but will be completely distinct : WIRE_CO_1 and WIRE_CO_2. We will; want now to place symetrically 1000 chambers on a pad, following a pattern; of 20 rows and 50 columns. One way to do this will be to replicate our chamber; by positioning it 1000 times in different positions of the pad. Unfortunatelly,; this is far from being the optimal way of doing what we want.; Imagine that we would like to find out which of the 1000 chambers is containing; a (x,y,z) point defined in the pad reference. You will never have to do that,; since the modeller will take care of it for you, but let's guess what it has; to do. The most simple algorithm will just loop over all daughters, convert; the point from mother to local reference and check if the current chamber; contains the point or not. This might be efficient for pads with few chambers,; but definitely not for 1000. Fortunately the modeler is smarter than that and; create for each volume some optimization structures called voxels (see Voxelization); to minimize the penalty having too many daughters, but if you have 100 pads like; this in your geometry you will anyway loose a lot in your tracking performance. The way out when volumes can be arranged according to simple patterns is the; usage of divisions. We will describe them in detail later on. Let's think now; at a different situation : instead of 1000 chambers of the same type, we may; have several types of chambers. Let's say all chambers are cylindrical and have; a wire inside, but their dimensions are different. However, we would like all; to be represented by a single volume family, since they have the same properties. Volume families (TGeoVolumeMulti). A volume family is re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:9428,simpl,simple,9428,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,9,['simpl'],['simple']
Usability,char * TProofCondor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofCondor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 53 of file TProofCondor.h. ◆ DeclFileName(). static const char * TProofCondor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 53 of file TProofCondor.h. ◆ GetJobAd(). TString TProofCondor::GetJobAd ; (; ). protected . Get job Ad. ; Definition at line 309 of file TProofCondor.cxx. ◆ IsA(). TClass * TProofCondor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProof.; Definition at line 53 of file TProofCondor.h. ◆ SetActive() [1/2]. virtual void TProofCondor::SetActive ; (; ). inlinevirtual . Definition at line 50 of file TProofCondor.h. ◆ SetActive() [2/2]. void TProofCondor::SetActive ; (; Bool_t ; active). virtual . Suspend or resume PROOF via Condor. ; Definition at line 283 of file TProofCondor.cxx. ◆ StartSlaves(). Bool_t TProofCondor::StartSlaves ; (; Bool_t ; ). overrideprotectedvirtual . Setup Condor workers using dynamic information. ; Reimplemented from TProof.; Definition at line 81 of file TProofCondor.cxx. ◆ Streamer(). void TProofCondor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProof. ◆ StreamerNVirtual(). void TProofCondor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file TProofCondor.h. Friends And Related Symbol Documentation. ◆ TCondor. friend class TCondor. friend . Definition at line 35 of file TProofCondor.h. Member Data Documentation. ◆ fCondor. TCondor* TProofCondor::fCondor. private . Definition at line 38 of file TProofCondor.h. ◆ fTimer. TTimer* TProofCondor::fTimer. private . Definition at line 39 of file TProofCondor.h. proof/proof/inc/TProofCondor.h; proof/proof/src/TP,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:45799,resume,resume,45799,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['resume'],['resume']
Usability,"char * TTask::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTask::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file TTask.h. ◆ CleanTasks(). void TTask::CleanTasks ; (; ). virtual . Reset tasks state: breakpoints and execute flags also invokes the Clear function of each task to clear all data structures created by a previous execution of a task. ; Definition at line 222 of file TTask.cxx. ◆ Clear(). void TTask::Clear ; (; Option_t * ; option = """"). overridevirtual . Recursively call the Clear function of this task and its subtasks. ; The Clear function must be implemented for each derived class to clear all data structures created by a previous execution of a task. This function is automatically called by the CleanTasks function. ; Reimplemented from TNamed.; Definition at line 240 of file TTask.cxx. ◆ Continue(). void TTask::Continue ; (; ). virtual . Resume execution at the current break point. ; Definition at line 247 of file TTask.cxx. ◆ DeclFileName(). static const char * TTask::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file TTask.h. ◆ Exec(). void TTask::Exec ; (; Option_t * ; option). virtual . Dummy Execute. ; This function must be redefined in the derived classes. ; Definition at line 267 of file TTask.cxx. ◆ ExecuteTask(). void TTask::ExecuteTask ; (; Option_t * ; option = ""0""). virtual . Execute main task and its subtasks. ; When calling this function, the Exec function of the corresponding class is invoked, then the list of its subtasks is executed calling recursively all the subtasks, etc.; The option parameter may be used to select different execution steps within a task. This parameter is passed also to all the subtasks. ; Definition at line 280 of file TTask.cxx. ◆ ExecuteTasks(). void TTask::ExecuteTasks ; (; Option_t * ; option). virtual . Execute all the subta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:18310,Resume,Resume,18310,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,1,['Resume'],['Resume']
Usability,"char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""") overrideTHStackvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetHistogram(TH1 *h)THStackinlinevirtual; SetMaximum(Double_t maximum=-1111)THStackvirtual; SetMinimum(Double_t minimum=-1111)THStackvirtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTHStackvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)THStackinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; THStack()THStackinline; THStack(const char *name, const char *title)THStack; THStack(TH1 *hist, Option_t *axis=""x"", const char *name=nullptr, const char *title=nullptr, Int_t firstbin=1, Int_t lastbin=-1, Int_t firstbin2=1, Int_t lastbin2=-1, Option_t *proj_option="""", Option_t *draw_option="""")THStack; THStack(const THStack &hstack)THStack; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~THStack() overrideTHStack; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack-members.html:7243,Guid,Guide,7243,doc/master/classTHStack-members.html,https://root.cern,https://root.cern/doc/master/classTHStack-members.html,1,['Guid'],['Guide']
Usability,"char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; gROOT#define gROOTDefinition TROOT.h:406; gVirtualX#define gVirtualXDefinition TVirtualX.h:337; ROOT::Fit::FitResult::Updatebool Update(const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0)Update the fit result with a new minimization status To be run only if same fit is performed with sam...Definition FitResult.cxx:224; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::SetTitlevoid SetTitle(const char *title) overrideChange/set the title.Definition TH1.cxx:6718; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; yDouble_t y[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; AuthorsRene Brun, Sergey Linev ; Definition in file exec2.C. tutorialshistexec2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/exec2_8C.html:4646,Guid,Guide,4646,doc/master/exec2_8C.html,https://root.cern,https://root.cern/doc/master/exec2_8C.html,1,['Guid'],['Guide']
Usability,"char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLViewer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLColorSet & GetDefaultColorSet ();  Returns reference to the default color-set. ;  ; static Bool_t IsUsingDefaultColorSetForNewViewers ();  Returns the value of the static flag that determines if new viewers should use the default color-set. ;  ; static void SetAxisLabelScale (Float_t als);  Sets static scaling facor that allows simple guide axies to have label values scaled relative to actual scene dimensions. ;  ; static void UseDefaultColorSetForNewViewers (Bool_t x);  Sets static flag that determines if new viewers should use the default color-set. ;  ;  Static Public Member Functions inherited from TVirtualViewer3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualViewer3D * Viewer3D (TVirtualPad *pad=nullptr, Option_t *type="""");  Create a Viewer 3D of specified type. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:26682,simpl,simple,26682,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"char *name, const char *value)THttpServer; SetJSROOT(const char *location)THttpServer; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetReadOnly(Bool_t readonly=kTRUE)THttpServer; SetSniffer(TRootSniffer *sniff)THttpServer; SetTerminate()THttpServer; SetTimer(Long_t milliSec=100, Bool_t mode=kTRUE)THttpServer; SetTitle(const char *title="""")TNamedvirtual; SetTopName(const char *top)THttpServerinline; SetUniqueID(UInt_t uid)TObjectvirtual; SetWSOnly(Bool_t on=kTRUE)THttpServer; Sizeof() constTNamedvirtual; StopServerThread()THttpServerprotected; Streamer(TBuffer &) overrideTHttpServervirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)THttpServerinline; SubmitHttp(std::shared_ptr< THttpCallArg > arg, Bool_t can_run_immediately=kFALSE)THttpServer; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; THttpServer(const THttpServer &)=deleteTHttpServerprotected; THttpServer(const char *engine=""http:8080"")THttpServer; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; Unregister(TObject *obj)THttpServer; UnregisterWS(std::shared_ptr< THttpWSHandler > ws)THttpServer; UseCurrentStyle()TObjectvirtual; VerifyFilePath(const char *fname)THttpServerprotectedstatic; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~THttpServer()THttpServervirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpServer-members.html:9529,Guid,Guide,9529,doc/master/classTHttpServer-members.html,https://root.cern,https://root.cern/doc/master/classTHttpServer-members.html,1,['Guid'],['Guide']
Usability,"char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TSignalHandler; Int_t fDelay;  ; ESignals fSignal;  ; Bool_t fSync;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TInterruptHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TInterruptHandler(). TInterruptHandler::TInterruptHandler ; (; ). inline . Definition at line 85 of file TRint.cxx. Member Function Documentation. ◆ Notify(). Bool_t TInterruptHandler::Notify ; (; ). overridevirtual . TRint interrupt handler. ; Implements TSysEvtHandler.; Definition at line 92 of file TRint.cxx. core/rint/src/TRint.cxx. TInterruptHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterruptHandler.html:16264,Guid,Guide,16264,doc/master/classTInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTInterruptHandler.html,1,['Guid'],['Guide']
Usability,"char operator()(Ssiz_t i) const;; 345 TSubString operator()(Ssiz_t start, Ssiz_t len) const; // Sub-string operator; 346 TSubString operator()(const TRegexp &re) const; // Match the RE; 347 TSubString operator()(const TRegexp &re, Ssiz_t start) const;; 348 TSubString operator()(TPRegexp &re) const; // Match the Perl compatible Regular Expression; 349 TSubString operator()(TPRegexp &re, Ssiz_t start) const;; 350 TSubString SubString(const char *pat, Ssiz_t start = 0,; 351 ECaseCompare cmp = kExact) const;; 352 ; 353 // Non-static member functions; 354 TString &Append(const char *cs);; 355 TString &Append(const char *cs, Ssiz_t n);; 356 TString &Append(const TString &s);; 357 TString &Append(const TString &s, Ssiz_t n);; 358 TString &Append(char c, Ssiz_t rep = 1); // Append c rep times; 359 Int_t Atoi() const;; 360 Long64_t Atoll() const;; 361 Double_t Atof() const;; 362 Bool_t BeginsWith(const char *s, ECaseCompare cmp = kExact) const;; 363 Bool_t BeginsWith(const TString &pat, ECaseCompare cmp = kExact) const;; 364 Ssiz_t Capacity() const { return (IsLong() ? GetLongCap() : kMinCap) - 1; }; 365 Ssiz_t Capacity(Ssiz_t n);; 366 TString &Chop();; 367 void Clear();; 368 int CompareTo(const char *cs, ECaseCompare cmp = kExact) const;; 369 int CompareTo(const TString &st, ECaseCompare cmp = kExact) const;; 370 Bool_t Contains(const char *pat, ECaseCompare cmp = kExact) const;; 371 Bool_t Contains(const TString &pat, ECaseCompare cmp = kExact) const;; 372 Bool_t Contains(const TRegexp &pat) const;; 373 Bool_t Contains(TPRegexp &pat) const;; 374 Int_t CountChar(Int_t c) const;; 375 TString Copy() const;; 376 const char *Data() const { return GetPointer(); }; 377 Bool_t EndsWith(const char *pat, ECaseCompare cmp = kExact) const;; 378 Bool_t EqualTo(const char *cs, ECaseCompare cmp = kExact) const;; 379 Bool_t EqualTo(const TString &st, ECaseCompare cmp = kExact) const;; 380 Ssiz_t First(char c) const;; 381 Ssiz_t First(const char *cs) const;; 382 void Form(const char *fmt, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8h_source.html:14172,Clear,Clear,14172,doc/master/TString_8h_source.html,https://root.cern,https://root.cern/doc/master/TString_8h_source.html,1,['Clear'],['Clear']
Usability,"char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tBuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tCopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*CreateBasket(TBranch*); Int_tDebug() const; virtual voidDelete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tDraw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:13726,undo,undo,13726,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['undo'],['undo']
Usability,"char* errinfo = 0); voidBeforeIOoperation(); voidTBufferFile::CheckCount(UInt_t offset); UInt_tTBufferFile::CheckObject(UInt_t offset, const TClass* cl, Bool_t readClass = kFALSE); voidCheckVersionBuf(); voidCreateElemNode(const TStreamerElement* elem); XMLNodePointer_tCreateItemNode(const char* name); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tExtractPointer(XMLNodePointer_t node, void*& ptr, TClass*& cl); voidExtractReference(XMLNodePointer_t node, const void* ptr, const TClass* cl); const char*TXMLSetup::GetElItemName(TStreamerElement* el); Bool_tTXMLSetup::IsValidXmlSetup(const char* setupstr); voidTObject::MakeZombie(); voidTBufferFile::operator=(const TBufferFile&); voidPerformPostProcessing(); voidPerformPreProcessing(const TStreamerElement* elem, XMLNodePointer_t elemnode); TXMLStackObj*PopStack(); Bool_tProcessPointer(const void* ptr, XMLNodePointer_t node); TXMLStackObj*PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); virtual Int_tTBuffer::Read(const char* name); Bool_tTXMLSetup::ReadSetupFromStr(const char* setupstr); voidRegisterPointer(const void* ptr, XMLNodePointer_t node); voidSetCompressionLevel(int level); voidSetXML(TXMLEngine* xml); voidShiftStack(const char* info = 0); TXMLStackObj*Stack(Int_t depth = 0); XMLNodePointer_tStackNode(); Bool_tVerifyAttr(XMLNodePointer_t node, const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyElemNode(const TStreamerElement* elem); Bool_tVerifyItemNode(const char* name, const char* errinfo = 0); Bool_tVerifyNode(XMLNodePointer_t node, const char* name, const char* errinfo = 0); Bool_tVerifyStackAttr(const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyStackNode(const char* name, const char* errinfo = 0); voidWorkWithClass(TStreamerInfo* info, const TClass* cl = 0); voidWorkWithElement(TStreamerElement* elem, Int_t number); virtual Int_tTBuffer::Write(const char* name, Int_t opt, Int_t bufs); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferXML.html:18813,simpl,simple,18813,root/html528/TBufferXML.html,https://root.cern,https://root.cern/root/html528/TBufferXML.html,1,['simpl'],['simple']
Usability,"char* title = 0); virtual~RooWorkspace(); voidTObject::AbstractMethod(const char* method) const; static voidaddClassDeclImportDir(const char* dir); static voidaddClassImplImportDir(const char* dir); Bool_taddStudy(RooAbsStudy& study); RooArgSetallCatFunctions() const; RooArgSetallCats() const; list<RooAbsData*>allData() const; list<RooAbsData*>allEmbeddedData() const; RooArgSetallFunctions() const; list<TObject*>allGenericObjects() const; RooArgSetallPdfs() const; RooArgSetallResolutionModels() const; RooArgSetallVars() const; virtual voidTObject::AppendPad(Option_t* option = """"); RooAbsArg*arg(const char* name) const; RooArgSetargSet(const char* nameList) const; static voidautoImportClassCode(Bool_t flag); virtual voidTObject::Browse(TBrowser* b); Bool_tcancelTransaction(); RooCategory*cat(const char* name) const; RooAbsCategory*catfunc(const char* name) const; Bool_tcd(const char* path = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearStudies(); virtual TObject*TNamed::Clone(const char* newname = """") const; Bool_tcommitTransaction(); virtual Int_tTNamed::Compare(const TObject* obj) const; TIterator*componentIterator() const; const RooArgSet&components() const; virtual voidTNamed::Copy(TObject& named) const; RooAbsData*data(const char* name) const; Bool_tdefineSet(const char* name, const char* contentList); Bool_tdefineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; RooAbsData*embeddedData(const char* name) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:2459,Clear,Clear,2459,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,1,['Clear'],['Clear']
Usability,"character mark at position pos. ; See also SetCursorPosition(). ; Definition at line 693 of file TGTextEntry.cxx. ◆ operator=(). TGTextEntry & TGTextEntry::operator= ; (; const TGTextEntry & ; ). privatedelete . ◆ Paste(). void TGTextEntry::Paste ; (; ). protected . Inserts text at the cursor position, deleting any previous marked text. ; See also CopyText() Cut(). ; Definition at line 947 of file TGTextEntry.cxx. ◆ PastePrimary(). void TGTextEntry::PastePrimary ; (; Window_t ; wid, . Atom_t ; property, . Bool_t ; del . ). protectedvirtual . Paste text from selection (either primary or cut buffer) into text entry widget. ; Definition at line 1542 of file TGTextEntry.cxx. ◆ Remove(). void TGTextEntry::Remove ; (; ). Deletes all characters on the right side of the cursor. ; See also Del() Backspace(). ; Definition at line 919 of file TGTextEntry.cxx. ◆ RemoveText(). void TGTextEntry::RemoveText ; (; Int_t ; start, . Int_t ; end . ). virtual . Removes text at the range, clears the selection and moves the cursor to the end of the line. ; See also GetText(), InsertText(), SetText(), AppendText(). ; Definition at line 1699 of file TGTextEntry.cxx. ◆ ReturnPressed(). void TGTextEntry::ReturnPressed ; (; ). virtual . This signal is emitted when the return or enter key is pressed. ; Reimplemented in TGNumberEntryField.; Definition at line 393 of file TGTextEntry.cxx. ◆ SavePrimitive(). void TGTextEntry::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a text entry widget as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Definition at line 1827 of file TGTextEntry.cxx. ◆ ScrollByChar(). void TGTextEntry::ScrollByChar ; (; ). protectedvirtual . Shift position of cursor by one character. ; Definition at line 1583 of file TGTextEntry.cxx. ◆ SelectAll(). void TGTextEntry::SelectAll ; (; ). virtual . Selects all text (i.e. ; marks it) and moves the cursor to the end. Useful when a default value has been inserte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:60302,clear,clears,60302,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['clear'],['clears']
Usability,"cheElement>::wireCache(). Data Members; protected:. static Bool_t_clearObsListClear obslist on sterilize?; Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen! ; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use; Bool_tRooCacheManager<RooAbsCacheElement>::_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:4050,clear,clearCacheOnServerRedirect,4050,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,1,['clear'],['clearCacheOnServerRedirect']
Usability,"cheme; <site> --> <jobid> --> 'time' = >unixtimestamp<. Bool_t SendProcessingStatus(const char* status, Bool_t restarttimer = kFALSE); Send the procesing status 'status' to MonaLisa following the; processing scheme:; <site> --> <jobid> --> 'status' = <status>; Used, to set the processing status of individual subtaks e.g. the; status of a batch (sub-)job or the status of a PROOF slave; participating in query <jobid>. Bool_t SendProcessingProgress(Double_t nevent, Double_t nbytes, Bool_t force = kFALSE); Send the procesing progress to MonaLisa. Bool_t SendFileOpenProgress(TFile* file, TList* openphases, const char* openphasename, Bool_t forcesend = kFALSE); Send the fileopen progress to MonaLisa.; If openphases=0 it means that the information is to be stored; in a temp space, since there is not yet an object where to attach it to.; This is typical in the static Open calls.; The temp openphases are put into a list as soon as one is specified. If thisopenphasename=0 it means that the stored phases (temp and object); have to be cleared. Bool_t SendFileCloseEvent(TFile* file). Bool_t SendFileReadProgress(TFile* file). Bool_t SendFileWriteProgress(TFile* file). Bool_t SendFileCheckpoint(TFile* file). Bool_t SendParameters(TList* valuelist, const char* identifier = 0); Send the parameters to MonaLisa. void SetLogLevel(const char* loglevel = ""WARNING""); Set MonaLisa log level. void Print(Option_t* option = """") const; Print info about MonaLisa object. TMonaLisaValue& operator=(const TMonaLisaWriter& ). TMonaLisaWriter(const TMonaLisaWriter& ). ApMon * GetApMon() const; { return fApmon; }. void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: Andreas Peters 5/10/2005 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/monalisa:$Id: TMonaLisaWriter.h 23209 2008-04-14 13:25:09Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonaLisaWriter.html:14670,clear,cleared,14670,root/html530/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html530/TMonaLisaWriter.html,1,['clear'],['cleared']
Usability,"cheme; <site> --> <jobid> --> 'time' = >unixtimestamp<. Bool_t SendProcessingStatus(const char* status, Bool_t restarttimer = kFALSE); Send the procesing status 'status' to MonaLisa following the; processing scheme:; <site> --> <jobid> --> 'status' = <status>; Used, to set the processing status of individual subtaks e.g. the; status of a batch (sub-)job or the status of a PROOF slave; participating in query <jobid>. Bool_t SendProcessingProgress(Double_t nevent, Double_t nbytes, Bool_t force = kFALSE); Send the procesing progress to MonaLisa. Bool_t SendFileOpenProgress(TFile* file, TList* openphases, const char* openphasename, Bool_t forcesend = kFALSE); Send the fileopen progress to MonaLisa.; If openphases=0 it means that the information is to be stored; in a temp space, since there is not yet an object where to attach it to.; This is typical in the static Open calls.; The temp openphases are put into a list as soon as one is specified. If thisopenphasename=0 it means that the stored phases (temp and object); have to be cleared. Bool_t SendFileCloseEvent(TFile* file). Bool_t SendFileReadProgress(TFile* file). Bool_t SendFileWriteProgress(TFile* file). Bool_t SendFileCheckpoint(TFile* file). Bool_t SendParameters(TList* valuelist, const char* identifier = 0); Send the parameters to MonaLisa. void SetLogLevel(const char* loglevel = ""WARNING""); Set MonaLisa log level. void Print(Option_t* option = """") const; Print info about MonaLisa object. TMonaLisaValue& operator=(const TMonaLisaWriter& ). TMonaLisaWriter(const TMonaLisaWriter& ). ApMon * GetApMon() const; { return fApmon; }. void Verbose(Bool_t onoff); { fVerbose = onoff; }. » Author: Andreas Peters 5/10/2005 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/monalisa:$Id: TMonaLisaWriter.h 23209 2008-04-14 13:25:09Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMonaLisaWriter.html:14670,clear,cleared,14670,root/html532/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html532/TMonaLisaWriter.html,1,['clear'],['cleared']
Usability,"ches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGraphPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The graph painter class. ; Implements all graphs' drawing's options. Introduction; Graphs' plotting options; Exclusion graphs; Graphs with error bars; TGraphErrors; TGraphAsymmErrors; TGraphBentErrors; TGraphMultiErrors. TGraphPolar options; Colors automatically picked in palette; Reverse graphs' axis; Graphs in logarithmic scale; Highlight mode for graph. Introduction; Graphs are drawn via the painter TGraphPainter class. This class implements techniques needed to display the various kind of graphs i.e.: TGraph, TGraphErrors, TGraphBentErrors and TGraphAsymmErrors.; To draw a graph graph it's enough to do: graph->Draw(""AL"");; The option AL in the Draw() method means:. The axis should be drawn (option A),; The graph should be drawn as a simple line (option L).; By default a graph is drawn in the current pad in the current coordinate system. To define a suitable coordinate system and draw the axis the option A must be specified. TGraphPainter offers many options to paint the various kind of graphs.; It is separated from the graph classes so that one can have graphs without the graphics overhead, for example in a batch program.; When a displayed graph is modified, there is no need to call Draw() again; the image will be refreshed the next time the pad will be updated. A pad is updated after one of these three actions:. a carriage return on the ROOT command line,; a click inside the pad,; a call to TPad::Update. Graphs' plotting options; Graphs can be drawn with the following options:. Option Description . ""A"" Produce a new plot with Axis around the graph . ""I"" Combine with option 'A' it draws invisible axis . ""L"" A simple polyline is drawn . ""F"" A fill area is drawn ('CF' draw a smoothed fill area",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:1138,simpl,simple,1138,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['simpl'],['simple']
Usability,"chin has been working on several ROOT packages, in particular the graphics sub-system for Windows and the GUI Builder (since 2000).; Gerri Ganis has been working on the authentication procedures to be used by the root daemons and the PROOF system (since 2002).; Maarten Ballintijn (MIT) is one of the main developers of the PROOF sub-system (since 1995).; Valeri Fine (now at BNL) ported ROOT to Windows and contributed largely to the 3-D graphics. He is currently working on the Qt layer of ROOT (since 1995).; Victor Perevoztchikov (BNL) worked on key elements of the I/O system, in particular the improved support for STL collections (1997-2001).; Nenad Buncic developed the HTML documentation generation system and integrated the X3D viewer inside ROOT (1995-1997).; Suzanne Panacek was the author of the first version of this User’s Guide and very active in preparing tutorials and giving lectures about ROOT (1999-2002).; Axel Naumann has been developing further the HTML Reference Guide and helps in porting ROOT under Windows (cygwin/gcc implementation) (since 2000).; Anna Kreshuk has developed the Linear Fitter and Robust Fitter classes as well as many functions in TMath, TF1, TGraph (since 2005).; Richard Maunder has contributed to the GL viewer classes (since 2004).; Timur Pocheptsov has contributed to the GL viewer classes and GL in pad classes (since 2004).; Sergei Linev has developed the XML driver and the TSQLFile classes (since 2003).; Stefan Roiser has been contributing to the reflex and cintex packages (since 2005).; Lorenzo Moneta has been contributing the MathCore, MathMore, Smatrix & Minuit2 packages (since 2005).; Wim Lavrijsen is the author of the PyRoot package (since 2004).; Further we would like to thank all the people mentioned in the $ROOTSYS/README/CREDITS file for their contributions, and finally, everybody who gave comments, reported bugs and provided fixes.; Happy ROOTing!; Rene Brun & Fons Rademakers; Geneva, July 2007; 1 Introduction; In the mid 199",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:4856,Guid,Guide,4856,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"chitecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TRMSProp (DeepNet_t &deepNet, Scalar_t learningRate=0.001, Scalar_t momentum=0.0, Scalar_t rho=0.9, Scalar_t epsilon=1e-7);  Constructor. ;  ;  ~TRMSProp ()=default;  Destructor. ;  ; std::vector< std::vector< Matrix_t > > & GetBiasUpdates ();  ; std::vector< Matrix_t > & GetBiasUpdatesAt (size_t i);  ; Scalar_t GetEpsilon () const;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; Scalar_t GetRho () const;  ; std::vector< std::vector< Matrix_t > > & GetWeightUpdates ();  ; std::vector< Matrix_t > & GetWeightUpdatesAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:2064,learn,learningRate,2064,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['learn'],['learningRate']
Usability,"chitecture_t::Scalar_t;  . Public Member Functions;  TNet ();  ;  TNet (const TNet &other);  ; template<typename OtherArchitecture_t > ;  TNet (size_t batchSize, const TNet< OtherArchitecture_t > &);  ;  TNet (size_t batchSize, size_t inputWidth, ELossFunction fJ, ERegularization fR=ERegularization::kNone, Scalar_t fWeightDecay=0.0);  Construct a neural net for a given batch size with given output function * and regularization. ;  ; template<typename SharedLayer > ; void AddLayer (SharedLayer &layer);  Add a layer which shares its weights with another TNet instance. ;  ; template<typename SharedLayer_t > ; void AddLayer (SharedLayer_t &layer);  ; void AddLayer (size_t width, EActivationFunction f, Scalar_t dropoutProbability=1.0);  Add a layer of the given size to the neural net. ;  ; void Backward (const Matrix_t &X, const Matrix_t &Y, const Matrix_t &weights);  Compute the weight gradients in the net from the given training samples X and training labels Y. ;  ; void Clear ();  Remove all layers from the network. ;  ; TNet< Architecture_t, TSharedLayer< Architecture_t > > CreateClone (size_t batchSize);  Create a clone that uses the same weight and biases matrices but potentially a difference batch size. ;  ; void Forward (Matrix_t &X, bool applyDropout=false);  Forward a given input through the neural net. ;  ; size_t GetBatchSize () const;  ; size_t GetDepth () const;  ; size_t GetInputWidth () const;  ; Layer_t & GetLayer (size_t i);  ; const Layer_t & GetLayer (size_t i) const;  ; ELossFunction GetLossFunction () const;  ; Scalar_t GetNFlops ();  ; Matrix_t & GetOutput ();  ; size_t GetOutputWidth () const;  ; ERegularization GetRegularization () const;  ; Scalar_t GetWeightDecay () const;  ; void Initialize (EInitialization m);  Initialize the weights in the net with the initialization method. ;  ; void InitializeGradients ();  Initialize the gradients in the net to zero. ;  ; LayerIterator_t LayersBegin ();  Iterator to the first layer of the net. ;  ; LayerIt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html:2504,Clear,Clear,2504,doc/master/classTMVA_1_1DNN_1_1TNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html,1,['Clear'],['Clear']
Usability,chiveMember & TArchiveMember::operator= ; (; const TArchiveMember & ; rhs). Assignment operator. ; Definition at line 255 of file TArchiveFile.cxx. ◆ Streamer(). void TArchiveMember::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TZIPMember. ◆ StreamerNVirtual(). void TArchiveMember::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 95 of file TArchiveFile.h. Friends And Related Symbol Documentation. ◆ TArchiveFile. friend class TArchiveFile. friend . Definition at line 67 of file TArchiveFile.h. Member Data Documentation. ◆ fComment. TString TArchiveMember::fComment. protected . Comment field. ; Definition at line 71 of file TArchiveFile.h. ◆ fCsize. Long64_t TArchiveMember::fCsize. protected . Compressed size. ; Definition at line 75 of file TArchiveFile.h. ◆ fDirectory. Bool_t TArchiveMember::fDirectory. protected . Flag indicating this is a directory. ; Definition at line 77 of file TArchiveFile.h. ◆ fDsize. Long64_t TArchiveMember::fDsize. protected . Decompressed size. ; Definition at line 76 of file TArchiveFile.h. ◆ fFilePosition. Long64_t TArchiveMember::fFilePosition. protected . Byte position in archive where member data starts. ; Definition at line 74 of file TArchiveFile.h. ◆ fModTime. TDatime TArchiveMember::fModTime. protected . Modification time. ; Definition at line 72 of file TArchiveFile.h. ◆ fName. TString TArchiveMember::fName. protected . Name of member. ; Definition at line 70 of file TArchiveFile.h. ◆ fPosition. Long64_t TArchiveMember::fPosition. protected . Byte position in archive. ; Definition at line 73 of file TArchiveFile.h. Libraries for TArchiveMember:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TArchiveFile.h; io/io/src/TArchiveFile.cxx. TArchiveMember. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArchiveMember.html:15534,Guid,Guide,15534,doc/master/classTArchiveMember.html,https://root.cern,https://root.cern/doc/master/classTArchiveMember.html,1,['Guid'],['Guide']
Usability,"chnique is useful in several cases, for example if you want to draw a graph connecting all the x, y(or z) points. Note that you may have a tree (or chain) with 1 billion entries, but only a few may survive the cuts and will fit without problems in these arrays.; 12.21 Using TTree::MakeClass. The TTree::Draw method is convenient and easy to use; however it falls short if you need to do some programming with the variable.; For example, for plotting the masses of all oppositely changed pairs of tracks, you would need to write a program that loops over all events, finds all pairs of tracks, and calculates the required quantities. We have shown how to retrieve the data arrays from the branches of the tree in the previous section, and you could just write that program from scratch. Since this is a very common task, ROOT provides a utility that generates a skeleton class designed to loop over the entries of the tree.; This is the TTree::MakeClass method. We will now go through the steps of using MakeClass with a simplified example. The methods used here obviously work for complex event loop calculations.; These are our assumptions: we would like to do selective plotting and loop through each entry of the tree and tracks. We chose a simple example: we want to plot fPx of the first 100 tracks of each entry. We have a ROOT tree with a branch for each data member in the “Event” object. To build this file and tree follow the instructions on how to build the examples in $ROOTSYS/test. Execute Event and instruct it to split the object with this command (from the UNIX command line).; > $ROOTSYS/test/Event 400 1 2 1; This creates an Event.root file with 400 events, compressed, split, and filled.; See $ROOTSYS/test/MainEvent.cxx for more info.; The person who designed the tree makes a shared library available to you, which defines the classes needed. In this case, the classes are Event, EventHeader, and Track and they are defined in the shared library libEvent.so. The designer also g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:634425,simpl,simplified,634425,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplified']
Usability,"chs=20,WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,"" # ADAM default parameters; ""DropConfig=0.0+0.0+0.0+0.""; ); # training2 = ROOT.TString(""LearningRate=1e-3,Momentum=0.9""; # ""ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,""; # ""MaxEpochs=20,WeightDecay=1e-4,Regularization=None,""; # ""Optimizer=SGD,DropConfig=0.0+0.0+0.0+0.""); ; # General Options.; dnnMethodName = ROOT.TString(""DNN_CPU""); ; if useDLGPU:; arch = ""GPU""; dnnMethodName = ""DNN_GPU""; else:; arch = ""CPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; dnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=""G"",; WeightInitialization=""XAVIER"",; InputLayout=""1|1|7"",; BatchLayout=""1|128|7"",; Layout=""DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR"",; TrainingStrategy=training1,; Architecture=arch,; ); ; # Keras DL; if useKeras:; ROOT.Info(""TMVA_Higgs_Classification"", ""Building Deep Learning keras model""); # create Keras model with 4 layers of 64 units and relu activations; import tensorflow; from tensorflow.keras.models import Sequential; from tensorflow.keras.optimizers import Adam; from tensorflow.keras.layers import Input, Dense; ; model = Sequential(); model.add(Dense(64, activation=""relu"", input_dim=7)); model.add(Dense(64, activation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(2, activation=""sigmoid"")); model.compile(loss=""binary_crossentropy"", optimizer=Adam(learning_rate=0.001), weighted_metrics=[""accuracy""]); model.save(""model_higgs.h5""); model.summary(); ; if not os.path.exists(""model_higgs.h5""):; raise FileNotFoundError(""Error creating Keras model file - skip using Keras""); else:; # book PyKeras method only if Keras model could be created; ROOT.Info(""TMVA_Higgs_Classification"", ""Booking Deep Learning keras model""); factory.BookMethod(; loader,; TMVA.Types.kPyKeras,; ""PyKeras"",; H=True,; V=False,; VarTransform=None,; FilenameMode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:66429,Learn,Learning,66429,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Learn'],['Learning']
Usability,"ciated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Mon Jul 4 15:22:45 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooExpensiveObjectCache.html:8123,clear,clearObj,8123,root/html530/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html530/RooExpensiveObjectCache.html,4,"['Clear', 'clear']","['Clear', 'clearAll', 'clearObj']"
Usability,"ciated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Thu Nov 3 20:08:03 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooExpensiveObjectCache.html:8123,clear,clearObj,8123,root/html532/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html532/RooExpensiveObjectCache.html,4,"['Clear', 'clear']","['Clear', 'clearAll', 'clearObj']"
Usability,"ciated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve object from cache that was registered under given name with given parameters, _if_; current parameter values match those that were stored in the registry for this object.; The return object is owned by the cache instance. const TObject* getObj(Int_t uniqueID); Retrieve payload object of cache element with given unique ID. Bool_t clearObj(Int_t uniqueID); Clear cache element with given unique ID; Retrieve payload object of cache element with given unique ID. Bool_t setObj(Int_t uniqueID, TObject* obj); Place new payload object in cache element with given unique ID. Cache; will take ownership of provided object!. void clearAll(); Clear all cache elements. void print() const. void importCacheObjects(RooExpensiveObjectCache& other, const char* ownerName, Bool_t verbose = kFALSE). Int_t size() const; { return _map.size() ; }. » Last changed: Tue Jun 2 15:30:37 2015 » Last generated: 2015-06-02 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooExpensiveObjectCache.html:8628,clear,clearObj,8628,root/html604/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html604/RooExpensiveObjectCache.html,4,"['Clear', 'clear']","['Clear', 'clearAll', 'clearObj']"
Usability,"cient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooWorkspace(w) w contents; ; variables; ---------; (a0,a1,bkgfrac,mean,sig1frac,sigma1,sigma2,x); ; p.d.f.s; -------; RooChebychev::bkg[ x=x coefList=(a0,a1) ] = 1; RooAddPdf::model[ bkgfrac * bkg + [%] * sig ] = 1/1; RooAddPdf::sig[ sig1frac * sig1 + [%] * sig2 ] = 0.999388/1; RooGaussian::sig1[ x=x mean=mean sigma=sigma1 ] = 0.999291; RooGaussian::sig2[ x=x mean=mean sigma=sigma2 ] = 0.999823; ; parameter snapshots; -------------------; reference_fit = (a0=0.500613 +/- 0.023199,a1=0.160315 +/- 0.0373121,bkgfrac=0.504699 +/- 0.0113933,mean=5.01883 +/- 0.0101222,sigma1=0.5[C],sig1frac=0.8179 +/- 0.0374037,sigma2=1[C]); reference_fit_bkgonly = (a0=0.474264 +/- 0,a1=6.8252e-12 +/- 0,bkgfrac=1[C],mean=5.01883 +/- 0,sigma1=0.5[C],sig1frac=0.8179 +/- 0,sigma2=1[C]); ; named sets; ----------; observables:(x); parameters:(a0,a1,bkgfrac,mean,sig1frac,sigma1,sigma2); ; DateApril 2009 ; AuthorWouter Verkerke ; Definition in file rf510_wsnamedsets.C. tutorialsroofitrf510_wsnamedsets.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:12493,Guid,Guide,12493,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,1,['Guid'],['Guide']
Usability,"cient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf902_numgenconfig.C;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf902_numgenconfig.py;   Numeric algorithm tuning: configuration and customization of how MC sampling algorithms on specific pdfs are executed ;  ; file  rf903_numintcache.C;   Numeric algorithm tuning: caching of slow numeric integrals and parameterization of slow numeric integrals ;  ; file  rf903_numintcache.py;   Numeric algorithm tuning: caching of slow numeric integrals and parameterizations of slow numeric integrals ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:24418,Guid,Guide,24418,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['Guid'],['Guide']
Usability,"cified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setLabel() [3/3]. bool RooAbsCategoryLValue::setLabel ; (; const std::string & ; label, . bool ; printError = true . ). inline . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Definition at line 60 of file RooAbsCategoryLValue.h. ◆ setOrdinal(). bool RooAbsCategoryLValue::setOrdinal ; (; unsigned int ; index). Set our state to our nth defined type. ; Returnstrue in case of an error. ; Definition at line 110 of file RooAbsCategoryLValue.cxx. ◆ Streamer(). void RooAbsCategoryLValue::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCategory.; Reimplemented in RooCategory, and RooSuperCategory. ◆ StreamerNVirtual(). void RooAbsCategoryLValue::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 123 of file RooAbsCategoryLValue.h. ◆ volume(). double RooAbsCategoryLValue::volume ; (; const char * ; rangeName); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 89 of file RooAbsCategoryLValue.h. Friends And Related Symbol Documentation. ◆ RooSimGenContext. friend class RooSimGenContext. friend . Definition at line 112 of file RooAbsCategoryLValue.h. ◆ RooSimSplitGenContext. friend class RooSimSplitGenContext. friend . Definition at line 113 of file RooAbsCategoryLValue.h. Libraries for RooAbsCategoryLValue:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCategoryLValue.h; roofit/roofitcore/src/RooAbsCategoryLValue.cxx. RooAbsCategoryLValue. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:55582,Guid,Guide,55582,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['Guid'],['Guide']
Usability,"cipal.h:31; TPrincipal::GetUserDataconst TVectorD * GetUserData() constDefinition TPrincipal.h:67; TPrincipal::~TPrincipal~TPrincipal() overrideDestructor.Definition TPrincipal.cxx:361; TPrincipal::GetEigenValuesconst TVectorD * GetEigenValues() constDefinition TPrincipal.h:61; TPrincipal::GetSigmasconst TVectorD * GetSigmas() constDefinition TPrincipal.h:66; TPrincipal::P2Xvirtual void P2X(const Double_t *p, Double_t *x, Int_t nTest)Calculate x as a function of nTest of the most significant principal components p,...Definition TPrincipal.cxx:1074; TPrincipal::Browsevoid Browse(TBrowser *b) overrideBrowse the TPrincipal object in the TBrowser.Definition TPrincipal.cxx:471; TPrincipal::fNumberOfDataPointsInt_t fNumberOfDataPointsNumber of data points.Definition TPrincipal.h:24; TPrincipal::MakeNormalisedvoid MakeNormalised()Normalize the covariance matrix.Definition TPrincipal.cxx:809; TPrincipal::GetHistogramsTList * GetHistograms() constDefinition TPrincipal.h:63; TPrincipal::MakePrincipalsvirtual void MakePrincipals()Perform the principal components analysis.Definition TPrincipal.cxx:884; TPrincipal::SumOfSquareResidualsvirtual void SumOfSquareResiduals(const Double_t *x, Double_t *s)Calculates the sum of the square residuals, that is.Definition TPrincipal.cxx:1183; TPrincipal::GetRowconst Double_t * GetRow(Long64_t row)Return a row of the user supplied data.Definition TPrincipal.cxx:521; TPrincipal::Testvoid Test(Option_t *option="""")Test the PCA, bye calculating the sum square of residuals (see method SumOfSquareResiduals),...Definition TPrincipal.cxx:1205; TPrincipal::fIsNormalisedBool_t fIsNormalisedNormalize matrix?Definition TPrincipal.h:42; TPrincipal::operator=TPrincipal & operator=(const TPrincipal &)Assignment operator.Definition TPrincipal.cxx:337; TVectorT< Double_t >; bool; double; int; xDouble_t x[n]Definition legend1.C:17. histhistincTPrincipal.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPrincipal_8h_source.html:9994,Guid,Guide,9994,doc/master/TPrincipal_8h_source.html,https://root.cern,https://root.cern/doc/master/TPrincipal_8h_source.html,1,['Guid'],['Guide']
Usability,"ck (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 24 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 41 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 149 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 180 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 158 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 128 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 140 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 49 of file RGeomHierarchy.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html:2052,clear,cleared,2052,doc/v632/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html,1,['clear'],['cleared']
Usability,"ck (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 32 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 48 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 156 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 187 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 165 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 135 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 147 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition at line 56 of file RGeomHierarchy.cxx. Member Data Documentation. ◆ fDesc. RGeomDescription",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html:2108,clear,cleared,2108,doc/master/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html,1,['clear'],['cleared']
Usability,"ck contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:6447,guid,guide,6447,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['guid'],['guide']
Usability,"ck matrix into vector, which can be send to client; 334/// Following sizes can be used for vector:; 335/// 0 - Identity matrix; 336/// 3 - Translation; 337/// 4 - Scale (last element always 1); 338/// 9 - Rotation; 339/// 16 - Full size; 340 ; 341void RGeomDescription::PackMatrix(std::vector<float> &vect, TGeoMatrix *matr); 342{; 343 vect.clear();; 344 ; 345 if (!matr || matr->IsIdentity()); 346 return;; 347 ; 348 auto trans = matr->GetTranslation();; 349 auto scale = matr->GetScale();; 350 auto rotate = matr->GetRotationMatrix();; 351 ; 352 bool is_translate = matr->IsA() == TGeoTranslation::Class(), is_scale = matr->IsA() == TGeoScale::Class(),; 353 is_rotate = matr->IsA() == TGeoRotation::Class();; 354 ; 355 if (!is_translate && !is_scale && !is_rotate) {; 356 // check if trivial matrix; 357 ; 358 auto test = [](double val, double chk) { return (val == chk) || (TMath::Abs(val - chk) < 1e-20); };; 359 ; 360 bool no_scale = test(scale[0], 1) && test(scale[1], 1) && test(scale[2], 1);; 361 bool no_trans = test(trans[0], 0) && test(trans[1], 0) && test(trans[2], 0);; 362 bool no_rotate = test(rotate[0], 1) && test(rotate[1], 0) && test(rotate[2], 0) && test(rotate[3], 0) &&; 363 test(rotate[4], 1) && test(rotate[5], 0) && test(rotate[6], 0) && test(rotate[7], 0) &&; 364 test(rotate[8], 1);; 365 ; 366 if (no_scale && no_trans && no_rotate); 367 return;; 368 ; 369 if (no_scale && no_trans && !no_rotate) {; 370 is_rotate = true;; 371 } else if (no_scale && !no_trans && no_rotate) {; 372 is_translate = true;; 373 } else if (!no_scale && no_trans && no_rotate) {; 374 is_scale = true;; 375 }; 376 }; 377 ; 378 if (is_translate) {; 379 vect.resize(3);; 380 vect[0] = trans[0];; 381 vect[1] = trans[1];; 382 vect[2] = trans[2];; 383 return;; 384 }; 385 ; 386 if (is_scale) {; 387 vect.resize(4);; 388 vect[0] = scale[0];; 389 vect[1] = scale[1];; 390 vect[2] = scale[2];; 391 vect[3] = 1;; 392 return;; 393 }; 394 ; 395 if (is_rotate) {; 396 vect.resize(9);; 397 for (int n = 0; n < ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:8482,clear,clear,8482,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"ck; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:17639,undo,undo,17639,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"ckBinLimits(const TAxis *a1, const TAxis *a2)Check bin limits.Definition TH1.cxx:1541; TH1::AddBinContentvirtual void AddBinContent(Int_t bin)Increment bin content by 1.Definition TH1.cxx:1268; TH1::GetBinErrorvirtual Double_t GetBinError(Int_t bin) constReturn value of error associated to bin number bin.Definition TH1.cxx:9063; TH1::FitOptionsMakestatic Int_t FitOptionsMake(Option_t *option, Foption_t &Foption)Decode string choptin and fill fitOption structure.Definition TH1.cxx:4652; TH1::GetNbinsZvirtual Int_t GetNbinsZ() constDefinition TH1.h:299; TH1::GetNormFactorvirtual Double_t GetNormFactor() constDefinition TH1.h:301; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::TH1TH1(const TH1 &)=delete; TH1::GetSkewnessvirtual Double_t GetSkewness(Int_t axis=1) constDefinition TH1.cxx:7671; TH1::ClearUnderflowAndOverflowvirtual void ClearUnderflowAndOverflow()Remove all the content from the underflow and overflow bins, without changing the number of entries A...Definition TH1.cxx:2517; TH1::GetContourLevelPadvirtual Double_t GetContourLevelPad(Int_t level) constReturn the value of contour number ""level"" in Pad coordinates.Definition TH1.cxx:8440; TH1::SetXTitlevirtual void SetXTitle(const char *title)Definition TH1.h:419; TH1::DrawNormalizedvirtual TH1 * DrawNormalized(Option_t *option="""", Double_t norm=1) constDraw a normalized copy of this histogram.Definition TH1.cxx:3144; TH1::EStatOverflowsEStatOverflowsEnumeration specifying the way to treat statoverflow.Definition TH1.h:80; TH1::kNeutral@ kNeutralAdapt to the global flag.Definition TH1.h:83; TH1::kIgnore@ kIgnoreOverride global flag ignoring the overflows.Definition TH1.h:81; TH1::kConsider@ kConsiderOverride global flag considering the overflows.Definition TH1.h:82; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::AddDirectorystatic void AddDirectory(Bool_t add=kTR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:58769,Clear,ClearUnderflowAndOverflowvirtual,58769,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,2,['Clear'],"['ClearUnderflowAndOverflow', 'ClearUnderflowAndOverflowvirtual']"
Usability,"ckHelper class to prevent infinite recursion in the usage of TTree Friends ;  ►CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CIOPos;  ►CMissCache;  CEntry;  ►CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  CUnzipState;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  ►CTTreePerfStatsTTree I/O performance measurement ;  CBasketInfo;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_tRandom access iterator to the elements of a TTreeReaderArray ;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:213815,simpl,simple,213815,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['simpl'],['simple']
Usability,ckMVAProbEstimator.h. ◆ DeclFileName(). static const char * TMVA::QuickMVAProbEstimator::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 40 of file QuickMVAProbEstimator.h. ◆ GetMVAProbAt(). Double_t TMVA::QuickMVAProbEstimator::GetMVAProbAt ; (; Double_t ; value). Definition at line 24 of file QuickMVAProbEstimator.cxx. ◆ IsA(). virtual TClass * TMVA::QuickMVAProbEstimator::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 40 of file QuickMVAProbEstimator.h. ◆ Log(). MsgLogger & TMVA::QuickMVAProbEstimator::Log ; (; ); const. inlineprivate . Definition at line 38 of file QuickMVAProbEstimator.h. ◆ Streamer(). virtual void TMVA::QuickMVAProbEstimator::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::QuickMVAProbEstimator::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 40 of file QuickMVAProbEstimator.h. Member Data Documentation. ◆ fEvtVector. std::vector<EventInfo> TMVA::QuickMVAProbEstimator::fEvtVector. private . Definition at line 32 of file QuickMVAProbEstimator.h. ◆ fIsSorted. Bool_t TMVA::QuickMVAProbEstimator::fIsSorted. private . Definition at line 33 of file QuickMVAProbEstimator.h. ◆ fLogger. MsgLogger* TMVA::QuickMVAProbEstimator::fLogger. mutableprivate . Definition at line 37 of file QuickMVAProbEstimator.h. ◆ fNMax. UInt_t TMVA::QuickMVAProbEstimator::fNMax. private . Definition at line 35 of file QuickMVAProbEstimator.h. ◆ fNMin. UInt_t TMVA::QuickMVAProbEstimator::fNMin. private . Definition at line 34 of file QuickMVAProbEstimator.h. Libraries for TMVA::QuickMVAProbEstimator:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/QuickMVAProbEstimator.h; tmva/tmva/src/QuickMVAProbEstimator.cxx. TMVAQuickMVAProbEstimator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1QuickMVAProbEstimator.html:4403,Guid,Guide,4403,doc/master/classTMVA_1_1QuickMVAProbEstimator.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1QuickMVAProbEstimator.html,1,['Guid'],['Guide']
Usability,"ckage for ROOT. ; Typedef Documentation. ◆ TRInternalFunction. typedef Rcpp::TRInternalFunction_Impl<Rcpp::PreserveStorage> ROOT::R::TRInternalFunction. Definition at line 61 of file TRInternalFunction.h. Function Documentation. ◆ function(). template<class T > . void ROOT::R::function ; (; const Char_t * ; name_, . T ; fun, . const Char_t * ; docstring = 0 . ). Definition at line 167 of file RExports.h. ◆ Label(). const Rcpp::internal::NamedPlaceHolder & ROOT::R::Label ; (; Rcpp::_ ; ). ◆ R_completion_generator(). char * ROOT::R::R_completion_generator ; (; const char * ; text, . int ; state . ). Definition at line 26 of file TRCompletion.cxx. ◆ R_custom_completion(). char ** ROOT::R::R_custom_completion ; (; const char * ; text, . int ; start, . int ; end . ). Definition at line 69 of file TRCompletion.cxx. Variable Documentation. ◆ Label. const Rcpp::internal::NamedPlaceHolder& ROOT::R::Label. extern . ◆ ModuleSymRef. VARIABLE_IS_NOT_USED SEXP ROOT::R::ModuleSymRef = NULL. Definition at line 116 of file RExports.cxx. ◆ RComp_assignBufferSym. SEXP ROOT::R::RComp_assignBufferSym. Definition at line 14 of file TRCompletion.cxx. ◆ RComp_assignEndSym. SEXP ROOT::R::RComp_assignEndSym. Definition at line 16 of file TRCompletion.cxx. ◆ RComp_assignStartSym. SEXP ROOT::R::RComp_assignStartSym. Definition at line 15 of file TRCompletion.cxx. ◆ RComp_assignTokenSym. SEXP ROOT::R::RComp_assignTokenSym. Definition at line 17 of file TRCompletion.cxx. ◆ RComp_completeTokenSym. SEXP ROOT::R::RComp_completeTokenSym. Definition at line 18 of file TRCompletion.cxx. ◆ RComp_getFileCompSym. SEXP ROOT::R::RComp_getFileCompSym. Definition at line 19 of file TRCompletion.cxx. ◆ RComp_retrieveCompsSym. SEXP ROOT::R::RComp_retrieveCompsSym. Definition at line 20 of file TRCompletion.cxx. ◆ rcompgen_rho. SEXP ROOT::R::rcompgen_rho. Definition at line 22 of file TRCompletion.cxx. ROOTR. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1R.html:3449,Guid,Guide,3449,doc/v632/namespaceROOT_1_1R.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1R.html,1,['Guid'],['Guide']
Usability,"cked wether the cell value is undefined. If this is the case, then the mean of the neighbor's target values is returned, using GetAverageNeighborsValue(). ; Reimplemented from TMVA::PDEFoam.; Definition at line 150 of file PDEFoamTarget.cxx. ◆ GetCellValue() [4/4]. Float_t TMVA::PDEFoam::GetCellValue ; (; const std::vector< Float_t > & ; xvec, . ECellValue ; cv, . PDEFoamKernelBase * ; kernel . ). virtual . This function finds the cell, which corresponds to the given untransformed event vector 'xvec' and return its value, which is given by the parameter 'cv'. ; If kernel != NULL, then PDEFoamKernelBase::Estimate() is called on the transformed event variables.; Parameters:. xvec - event vector (untransformed, [fXmin,fXmax]); cv - the cell value to return; kernel - PDEFoam kernel estimator. If NULL is given, than the pure cell value is returned. Return:; The cell value, corresponding to 'xvec', estimated by the given kernel. ; Reimplemented from TMVA::PDEFoam.; Definition at line 258 of file PDEFoam.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamTarget::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoam.; Definition at line 71 of file PDEFoamTarget.h. ◆ Streamer(). virtual void TMVA::PDEFoamTarget::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoam. ◆ StreamerNVirtual(). void TMVA::PDEFoamTarget::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file PDEFoamTarget.h. Member Data Documentation. ◆ fTarget. UInt_t TMVA::PDEFoamTarget::fTarget. protected . Definition at line 44 of file PDEFoamTarget.h. Libraries for TMVA::PDEFoamTarget:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamTarget.h; tmva/tmva/src/PDEFoamTarget.cxx. TMVAPDEFoamTarget. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html:25776,Guid,Guide,25776,doc/master/classTMVA_1_1PDEFoamTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html,1,['Guid'],['Guide']
Usability,"cket* s = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. friend class TProofServ; // to be able to call SetDescrip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:22419,simpl,simple,22419,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,1,['simpl'],['simple']
Usability,"cketClass)) {; 1204 gInterpreter->CallFunc_Exec(socketCloser, ((char*)socket)+offset);; 1205 // Put the object in the closed list for later deletion.; 1206 socket->SetBit(kMustCleanup);; 1207 fClosedObjects->AddLast(socket);; 1208 } else {; 1209 // Crap ... this is not a socket, likely Proof or something, let's try to find a Close; 1210 Longptr_t other_offset;; 1211 CallFunc_t *otherCloser = gInterpreter->CallFunc_Factory();; 1212 gInterpreter->CallFunc_SetFuncProto(otherCloser, socket->IsA()->GetClassInfo(), ""Close"", """", &other_offset);; 1213 if (gInterpreter->CallFunc_IsValid(otherCloser)) {; 1214 gInterpreter->CallFunc_Exec(otherCloser, ((char*)socket)+other_offset);; 1215 // Put the object in the closed list for later deletion.; 1216 socket->SetBit(kMustCleanup);; 1217 fClosedObjects->AddLast(socket);; 1218 } else {; 1219 notclosed.AddLast(socket);; 1220 }; 1221 gInterpreter->CallFunc_Delete(otherCloser);; 1222 // Put it back; 1223 cursor->SetObject(socket);; 1224 }; 1225 cursor = cursor->Next();; 1226 }; 1227 // Now were done, clear the list; 1228 fSockets->Clear();; 1229 // Read the one we did not close; 1230 cursor = notclosed.FirstLink();; 1231 while (cursor) {; 1232 static_cast<TList*>(fSockets)->AddLast(cursor->GetObject());; 1233 cursor = cursor->Next();; 1234 }; 1235 }; 1236 gInterpreter->CallFunc_Delete(socketCloser);; 1237 }; 1238 if (fMappedFiles && fMappedFiles->First()) {; 1239 R__ListSlowClose<TVirtualMapFile>(static_cast<TList*>(fMappedFiles));; 1240 }; 1241 ; 1242}; 1243 ; 1244////////////////////////////////////////////////////////////////////////////////; 1245/// Execute the cleanups necessary at the end of the process, in particular; 1246/// those that must be executed before the library start being unloaded.; 1247 ; 1248void TROOT::EndOfProcessCleanups(); 1249{; 1250 // This will not delete the objects 'held' by the TFiles so that; 1251 // they can still be 'reacheable' when ResetGlobals is run.; 1252 CloseFiles();; 1253 ; 1254 if (gInterpret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:48373,clear,clear,48373,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"ckground component only.; # The VisualizeError() option can generally applied to _any_ kind of; # plot (components, asymmetries, etc..); model.plotOn(frame, VisualizeError=(r, 1), FillColor=""kOrange"", Components=""bkg""); model.plotOn(; frame,; VisualizeError=(r, 1, False),; DrawOption=""L"",; LineWidth=2,; LineColor=""r"",; Components=""bkg"",; LineStyle=""--"",; ); ; # Overlay central value; model.plotOn(frame); model.plotOn(frame, Components=""bkg"", LineStyle=""--""); d.plotOn(frame); frame.SetMinimum(0); ; # Visualize partial fit error; # ------------------------------------------------------; ; # Make plot frame; frame2 = x.frame(Bins=40, Title=""Visualization of 2-sigma partial error from (m,m2)""); ; # Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; # ___ -1; # Vred = V22 = V11 - V12 * V22 * V21; #; # Where V11,V12,V21, represent a block decomposition of the covariance matrix into observables that; # are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), V22bar; # is the Shur complement of V22, as shown above; #; # (Note that Vred is _not_ a simple sub-matrix of V); ; # Propagate partial error due to shape parameters (m,m2) using linear and; # sampling method; model.plotOn(frame2, VisualizeError=(r, {m, m2}, 2), FillColor=""c""); model.plotOn(frame2, Components=""bkg"", VisualizeError=(r, {m, m2}, 2), FillColor=""c""); ; model.plotOn(frame2); model.plotOn(frame2, Components=""bkg"", LineStyle=""--""); frame2.SetMinimum(0); ; # Make plot frame; frame3 = x.frame(Bins=40, Title=""Visualization of 2-sigma partial error from (s,s2)""); ; # Propagate partial error due to yield parameter using linear and sampling; # method; model.plotOn(frame3, VisualizeError=(r, {s, s2}, 2), FillColor=""g""); model.plotOn(frame3, Components=""bkg"", VisualizeError=(r, {fsig}, 2), FillColor=""g""); ; model.plotOn(frame3); model.plotOn(frame3, Components=""bkg"", LineStyle=""--""); frame3.SetMinimum(0); ; # Make plot frame; fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8py.html:4113,simpl,simple,4113,doc/master/rf610__visualerror_8py.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8py.html,1,['simpl'],['simple']
Usability,"cks; Int_tfNvertex; Double32_tfTemperature; TClonesArray*fTracks->array with all tracks; TBitsfTriggerBitsBits triggered by this event.; charfType[20]event type; TReffWebHistogramEXEC:GetWebHistogram reference to an histogram in a TWebFile; static TH1F*fgHist; static TClonesArray*fgTracks. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Event(); Create an Event object.; When the constructor is invoked for the first time, the class static; variable fgTracks is 0 and the TClonesArray fgTracks is created. ~Event(). void Build(Int_t ev, Int_t arg5 = 600, Float_t ptmin = 1). Track * AddTrack(Float_t random, Float_t ptmin = 1); Add a new track to the list of tracks for this event.; To avoid calling the very time consuming operator new for each track,; the standard but not well know C++ operator ""new with placement""; is called. If tracks[i] is 0, a new Track object will be created; otherwise the previous Track[i] will be overwritten. void Clear(Option_t* option = """"). void Reset(Option_t* option = """"); Static function to reset all static objects for this event; fgTracks->Delete(option);. void SetHeader(Int_t i, Int_t run, Int_t date, Float_t random). void SetMeasure(UChar_t which, Int_t what). void SetRandomVertex(); This delete is to test the relocation of variable length array. TBits& GetTriggerBits(); { return fTriggerBits; }. Event(). Bool_t IsValid() const; { return fIsValid; }. void ResetHistogramPointer(); {fH=0;}. void SetNseg(Int_t n); { fNseg = n; }. void SetNtrack(Int_t n); { fNtrack = n; }. void SetNvertex(Int_t n); { fNvertex = n; SetRandomVertex(); }. void SetFlag(UInt_t f); { fFlag = f; }. void SetTemperature(Double32_t t); { fTemperature = t; }. void SetType(char* type); {strcpy(fType,type);}. void SetMatrix(UChar_t x, UChar_t y, Double32_t what); { if (x<3&&y<3) fMatrix[x][y]=what;}. Float_t GetClosestDistance(Int_t i); {return fClosestDistance[i];}. char * GetType(); {return fType;}. Int_t GetNtrack() const; { ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Event.html:10192,Clear,Clear,10192,root/html528/Event.html,https://root.cern,https://root.cern/root/html528/Event.html,1,['Clear'],['Clear']
Usability,"cl) {; 2701 // We stream std::string without going through members..; 2702 return;; 2703 }; 2704 ; 2705 if (TClassEdit::IsStdArray(cl->GetName())) {; 2706 // We treat std arrays as C arrays; 2707 return;; 2708 }; 2709 ; 2710 if (TClassEdit::IsUniquePtr(cl->GetName())) {; 2711 // Ignore error caused by the inside of std::unique_ptr; 2712 // This is needed solely because of rootclingIO's IsUnsupportedUniquePointer; 2713 // which checks the number of elements in the GetListOfRealData.; 2714 // If this usage is removed, this can be replaced with a return statement.; 2715 // See https://github.com/root-project/root/issues/13574; 2716 isTransient = true;; 2717 }; 2718 ; 2719 const char* cobj = (const char*) obj; // for ptr arithmetics; 2720 ; 2721 // Treat the case of std::complex in a special manner. We want to enforce; 2722 // the layout of a stl implementation independent class, which is the; 2723 // complex as implemented in ROOT5.; 2724 ; 2725 // A simple lambda to simplify the code; 2726 auto inspInspect = [&] (ptrdiff_t offset){; 2727 insp.Inspect(const_cast<TClass*>(cl), insp.GetParent(), ""_real"", cobj, isTransient);; 2728 insp.Inspect(const_cast<TClass*>(cl), insp.GetParent(), ""_imag"", cobj + offset, isTransient);; 2729 };; 2730 ; 2731 auto complexType = TClassEdit::GetComplexType(cl->GetName());; 2732 switch(complexType) {; 2733 case TClassEdit::EComplexType::kNone:; 2734 {; 2735 break;; 2736 }; 2737 case TClassEdit::EComplexType::kFloat:; 2738 {; 2739 inspInspect(sizeof(float));; 2740 return;; 2741 }; 2742 case TClassEdit::EComplexType::kDouble:; 2743 {; 2744 inspInspect(sizeof(double));; 2745 return;; 2746 }; 2747 case TClassEdit::EComplexType::kInt:; 2748 {; 2749 inspInspect(sizeof(int));; 2750 return;; 2751 }; 2752 case TClassEdit::EComplexType::kLong:; 2753 {; 2754 inspInspect(sizeof(long));; 2755 return;; 2756 }; 2757 }; 2758 ; 2759 static clang::PrintingPolicy; 2760 printPol(fInterpreter->getCI()->getLangOpts());; 2761 if (printPol.Indentation) {; 2762 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:105226,simpl,simple,105226,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['simpl'],"['simple', 'simplify']"
Usability,"clFileName ();  . Protected Member Functions; virtual void AdjustPos ();  Adjust current position. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual void CursorOff ();  If cursor if on, turn it off. ;  ; virtual void CursorOn ();  Turn cursor on. ;  ; virtual void DrawCursor (Int_t mode);  Draw cursor. If mode = 1 draw cursor, if mode = 2 erase cursor. ;  ; void Init ();  Initialize a text edit widget. ;  ; virtual void SetMenuState ();  Enable/disable menu items in function of what is possible. ;  ;  Protected Member Functions inherited from TGTextView; void Copy (TObject &) const override;  Copy this to obj. ;  ; void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Draw lines in exposed region. ;  ; virtual void HLayout ();  Horizontal layout of widgets (canvas, scrollbar). ;  ; void Init (Pixel_t bg);  Initialize a text view widget. ;  ; virtual void Mark (Long_t xPos, Long_t yPos);  Mark a text region from xPos to yPos. ;  ; virtual void UnMark ();  Clear marked region. ;  ; virtual void VLayout ();  Vertical layout of widgets (canvas, scrollbar). ;  ;  Protected Member Functions inherited from TGView; void DoRedraw () override;  redraw ;  ; virtual Bool_t ItemLayout ();  ; virtual void UpdateRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  update a part of view ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:37257,Clear,Clear,37257,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['Clear'],['Clear']
Usability,"clang::FunctionTemplateDecl *ft = (clang::FunctionTemplateDecl*)ft_info;; 8939 const clang::FunctionDecl *fd = ft->getTemplatedDecl();; 8940 ; 8941 if (fd->isOverloadedOperator()); 8942 property |= kIsOperator;; 8943 if (llvm::isa<clang::CXXConversionDecl>(fd)); 8944 property |= kIsConversion;; 8945 if (llvm::isa<clang::CXXConstructorDecl>(fd)); 8946 property |= kIsConstructor;; 8947 if (llvm::isa<clang::CXXDestructorDecl>(fd)); 8948 property |= kIsDestructor;; 8949 if (fd->isInlined()); 8950 property |= kIsInlined;; 8951 return property;; 8952}; 8953 ; 8954////////////////////////////////////////////////////////////////////////////////; 8955/// Return the name of this function template.; 8956 ; 8957void TCling::FuncTempInfo_Name(FuncTempInfo_t *ft_info, TString &output) const; 8958{; 8959 output.Clear();; 8960 if (!ft_info) return;; 8961 const clang::FunctionTemplateDecl *ft = (clang::FunctionTemplateDecl*)ft_info;; 8962 std::string buf;; 8963 GetFunctionName(ft->getTemplatedDecl(), buf);; 8964 output = buf;; 8965}; 8966 ; 8967////////////////////////////////////////////////////////////////////////////////; 8968/// Return the comments associates with this function template.; 8969 ; 8970void TCling::FuncTempInfo_Title(FuncTempInfo_t *ft_info, TString &output) const; 8971{; 8972 output.Clear();; 8973 if (!ft_info) return;; 8974 const clang::FunctionTemplateDecl *ft = (const clang::FunctionTemplateDecl*)ft_info;; 8975 ; 8976 // Iterate over the redeclarations, we can have multiple definitions in the; 8977 // redecl chain (came from merging of pcms).; 8978 if (const RedeclarableTemplateDecl *AnnotFD; 8979 = ROOT::TMetaUtils::GetAnnotatedRedeclarable((const RedeclarableTemplateDecl*)ft)) {; 8980 if (AnnotateAttr *A = AnnotFD->getAttr<AnnotateAttr>()) {; 8981 output = A->getAnnotation().str();; 8982 return;; 8983 }; 8984 }; 8985 if (!ft->isFromASTFile()) {; 8986 // Try to get the comment from the header file if present; 8987 // but not for decls from AST file, where rootc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:347952,Clear,Clear,347952,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['Clear'],['Clear']
Usability,"claration ; Definition at line 48 of file RooAbsMoment.h. ◆ IsA(). TClass * RooAbsMoment::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooFirstMoment, RooMoment, and RooSecondMoment.; Definition at line 48 of file RooAbsMoment.h. ◆ mean(). RooAbsReal * RooAbsMoment::mean ; (; ). inline . Definition at line 36 of file RooAbsMoment.h. ◆ order(). Int_t RooAbsMoment::order ; (; ); const. inline . Definition at line 34 of file RooAbsMoment.h. ◆ Streamer(). void RooAbsMoment::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooFirstMoment, RooMoment, and RooSecondMoment. ◆ StreamerNVirtual(). void RooAbsMoment::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file RooAbsMoment.h. Member Data Documentation. ◆ _func. RooRealProxy RooAbsMoment::_func. protected . Input function. ; Definition at line 44 of file RooAbsMoment.h. ◆ _mean. RooRealProxy RooAbsMoment::_mean. protected . Mean (if calculated for central moment) ; Definition at line 46 of file RooAbsMoment.h. ◆ _nset. RooSetProxy RooAbsMoment::_nset. protected . Normalization set (optional) ; Definition at line 43 of file RooAbsMoment.h. ◆ _order. Int_t RooAbsMoment::_order = 1. protected . Moment order. ; Definition at line 41 of file RooAbsMoment.h. ◆ _takeRoot. Int_t RooAbsMoment::_takeRoot = false. protected . Return n-order root of moment. ; Definition at line 42 of file RooAbsMoment.h. ◆ _x. RooRealProxy RooAbsMoment::_x. protected . Observable. ; Definition at line 45 of file RooAbsMoment.h. Libraries for RooAbsMoment:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsMoment.h; roofit/roofitcore/src/RooAbsMoment.cxx. RooAbsMoment. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMoment.html:63225,Guid,Guide,63225,doc/master/classRooAbsMoment.html,https://root.cern,https://root.cern/doc/master/classRooAbsMoment.html,1,['Guid'],['Guide']
Usability,"clare tb...Definition EExecutionPolicy.hxx:4; ROOT::GetDelayedAddClassAlternatestd::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate()Definition TClassTable.cxx:254; ROOT::AddClassAlternateROOT::TClassAlt * AddClassAlternate(const char *normName, const char *alternate)Global function called by GenerateInitInstance.Definition TClassTable.cxx:918; ROOT::GetDelayedAddClassstd::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass()Definition TClassTable.cxx:248; ROOT::RemoveClassvoid RemoveClass(const char *cname, TClass *cl)Global function called by the dtor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:985; ROOT::AddClassvoid AddClass(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits)Global function called by the ctor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:896; ROOT::RegisterClassTemplateTNamed * RegisterClassTemplate(const char *name, const char *file, Int_t line)Global function to register the implementation file and line of a class template (i....Definition TClassTable.cxx:1005; ROOT::ClassTableHashstatic UInt_t ClassTableHash(const char *name, UInt_t size)Definition TClassTable.cxx:237; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472; ROOT::RemoveClassAlternatevoid RemoveClassAlternate(ROOT::TClassAlt *)Definition TClassTable.cxx:931; TClassEdit::IsStdClassbool IsStdClass(const char *type)return true if the class belongs to the std namespaceDefinition TClassEdit.cxx:1418; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854. corecontsrcTClassTable.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:50688,Guid,Guide,50688,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,1,['Guid'],['Guide']
Usability,"clare that we handle all integrations internally. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the product operator construction. ;  ; const RooArgList & realComponents () const;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooProduct with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:2969,simpl,simple,2969,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['simpl'],['simple']
Usability,"class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGenFunction(PyObject* self = 0). private:. TPyMultiGenFunction&operator=(const TPyMultiGenFunction&); TPyMultiGenFunction(const TPyMultiGenFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Tue Jun 30 15:28:39 2015 » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPyMultiGenFunction.html:1645,Simpl,Simply,1645,root/html602/TPyMultiGenFunction.html,https://root.cern,https://root.cern/root/html602/TPyMultiGenFunction.html,2,['Simpl'],['Simply']
Usability,"class VI2 , class VI3 , class VI4 > . TClass * RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 150 of file RooCFunction4Binding.h. ◆ name(). template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . const char * RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >::name ; (; ); const. inline . Definition at line 107 of file RooCFunction4Binding.h. ◆ operator()(). template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . VO RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >::operator() ; (; VI1 ; x, . VI2 ; y, . VI3 ; z, . VI4 ; w . ); const. inline . Definition at line 102 of file RooCFunction4Binding.h. ◆ Streamer(). template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . void RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 158 of file RooCFunction4Binding.h. ◆ StreamerNVirtual(). template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . void RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 150 of file RooCFunction4Binding.h. Member Data Documentation. ◆ _fmap. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooCFunction4Map< VO, VI1, VI2, VI3, VI4 > * RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >::_fmap = nullptr. staticprivate . Pointer to embedded function. ; Definition at line 148 of file RooCFunction4Binding.h. ◆ _ptr. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . func_t RooCFunction4Ref< VO, VI1, VI2, VI3, VI4 >::_ptr. private . Definition at line 146 of file RooCFunction4Binding.h. roofit/roofit/inc/RooCFunction4Binding.h. RooCFunction4Ref. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4Ref.html:15123,Guid,Guide,15123,doc/master/classRooCFunction4Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4Ref.html,1,['Guid'],['Guide']
Usability,"class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:173228,simpl,simple,173228,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simple']
Usability,"class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::ObjSplitRule. class RooSimWSTool::ObjSplitRule. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__ObjSplitRule.html:1093,simpl,simple,1093,root/html534/RooSimWSTool__ObjSplitRule.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__ObjSplitRule.html,3,['simpl'],['simple']
Usability,"class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DefVar () override;  Define relevant variables. ;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the histogram with the given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TProfile2D * fProfile;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawProfile2D.html:11825,Clear,ClearFormula,11825,doc/master/classTProofDrawProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawProfile2D.html,1,['Clear'],['ClearFormula']
Usability,"class of MemStat; TMemStatShow class to visualize the results of TMemStat ; TMemberInspector ABC for inspecting class data members; TMemberStreamer ; TMergerInfo Basic info on merger, i.e. worker serving as merger; TMessage Message buffer class; TMessageHandler Generic message handler; TMethod Dictionary for a class member function (method); TMethodArg Dictionary for a method argument; TMethodBrowsable Helper object to browse methods; TMethodCall Method calling interface; TMinuit The MINUIT minimisation package; TMinuitMinimizer Implementation of Minimizer interface using TMinuit ; TMixture Mixtures used in the Geometry Shapes; TModuleDocInfo documentation for a group of classes; TMonaLisaText Interface to MonaLisa Monitoring Text; TMonaLisaValue Interface to MonaLisa Monitoring Values; TMonaLisaWriter Interface to MonaLisa Monitoring; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetFileStager Implementation for a 'rootd' backend; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:111327,simpl,simple,111327,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,2,['simpl'],['simple']
Usability,"class)THnF, THnT<Float_t>. Function Members (Methods); public:. THnT<float>(); THnT<float>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<float>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_float_.html:2226,Clear,Clear,2226,root/html534/THnT_float_.html,https://root.cern,https://root.cern/root/html534/THnT_float_.html,1,['Clear'],['Clear']
Usability,"class)THnT<Short_t>, THnS. Function Members (Methods); public:. THnT<short>(); THnT<short>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<short>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_short_.html:2226,Clear,Clear,2226,root/html534/THnT_short_.html,https://root.cern,https://root.cern/root/html534/THnT_short_.html,1,['Clear'],['Clear']
Usability,"class, derived from TGLWidget, with PaintGL and InitGL overriden. Resources (and invariants):; fContainer (TGLWidgetContainer) - controlled by std::auto_ptr; fWindowIndex - controlled manually (see CreateWidget and dtor); fGLContext - controlled manually (see CreateWidget and dtor); visual info for X11 version, controlled manually (see CreateGLContainer and dtor). Exceptions:; can be thrown only during construction.; under win32 class does not throw itself (but some internal operations can throw); under X11 can throw std::runtime_error (from CreateGLContext).; In case of exceptions resources will be freed. TGLWidget object is immutable as far as it was created.; Boolean parameter defines, if you want to grab user's input or not. By default you want, but for example when not - see TGLPShapeObjEditor.; Non-copyable. ; Definition at line 27 of file TGLWidget.h. Public Member Functions;  ~TGLWidget () override;  Destructor. Deletes window ???? and XVisualInfo. ;  ; Bool_t ClearCurrent ();  Clear the current gl-context. ;  ; void DoRedraw () override;  Delegate call to the owner. ;  ; void ExtractViewport (Int_t *vp) const override;  For camera. ;  ; const TGLContext * GetContext () const override;  Get gl context. ;  ; TGEventHandler * GetEventHandler () const;  ; const TGLFormat * GetPixelFormat () const override;  Pixel format. ;  ; Bool_t HandleButton (Event_t *ev) override;  Delegate call to the owner. ;  ; Bool_t HandleConfigureNotify (Event_t *ev) override;  Delegate call to the owner. ;  ; Bool_t HandleCrossing (Event_t *) override;  Handle mouse crossing event. ;  ; Bool_t HandleDoubleClick (Event_t *ev) override;  Delegate call to the owner. ;  ; Bool_t HandleFocusChange (Event_t *) override;  Delegate call to the owner. ;  ; Bool_t HandleKey (Event_t *ev) override;  Delegate call to the owner. ;  ; Bool_t HandleMotion (Event_t *ev) override;  Delegate call to the owner. ;  ; virtual void InitGL ();  Call glEnable(... in overrider of InitGL. ;  ; TClass * IsA (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLWidget.html:2002,Clear,ClearCurrent,2002,doc/master/classTGLWidget.html,https://root.cern,https://root.cern/doc/master/classTGLWidget.html,2,['Clear'],"['Clear', 'ClearCurrent']"
Usability,"class.h>. Inheritance diagram for TMVA::ResultsMulticlass:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ResultsMulticlass(). TMVA::ResultsMulticlass::ResultsMulticlass ; (; const DataSetInfo * ; dsi, . TString ; resultsName . ). constructor ; Definition at line 58 of file ResultsMulticlass.cxx. ◆ ~ResultsMulticlass(). TMVA::ResultsMulticlass::~ResultsMulticlass ; (; ). destructor ; Definition at line 72 of file ResultsMulticlass.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::ResultsMulticlass::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::ResultsMulticlass::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::ResultsMulticlass::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 102 of file ResultsMulticlass.h. ◆ Clear() [1/2]. void TMVA::ResultsMulticlass::Clear ; (; Option_t * ; ). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 65 of file ResultsMulticlass.h. ◆ Clear() [2/2]. virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 119 of file TObject.h. ◆ CreateMulticlassHistos(). void TMVA::ResultsMulticlass::CreateMulticlassHistos ; (; TString ; prefix, . Int_t ; nbins, . Int_t ; nbins_high . ). this function fills the mva response histos for multiclass classification ; Definition at line 354 of file ResultsMulticlass.cxx. ◆ CreateMulticlassPerformanceHistos(). void TMVA::ResultsMulticlass::CreateMulticlassPerformanceHistos ; (; TString ; prefix). Create performance graphs for this classifier a multiclass setting. ; Requires that the method has already been evaluated (that a resultset already exists.); Currently uses the new way of calculating ROC Curves. If anything looks fishy, please contact the ROOT TMVA tea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html:14273,Clear,Clear,14273,doc/master/classTMVA_1_1ResultsMulticlass.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html,1,['Clear'],['Clear']
Usability,"classes in ROOT.Definition TH1.h:59; TIterDefinition TCollection.h:235; TIter::GetOptionOption_t * GetOption() constDefinition TCollection.h:253; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::Classstatic TClass * Class(); TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjLinkWrapper around a TObject so it can be stored in a TList.Definition TList.h:123; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjLink::GetOptionvirtual Option_t * GetOption() constDefinition TList.h:149; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Clearvirtual void Clear(Option_t *="""")Definition TObject.h:119; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Clonevirtual TObject * Clone(const char *newname="""") constMake a clone of an object using the Streamer facility.Definition TObject.cxx:229; TObject::IsOnHeapR__ALWAYS_INLINE Bool_t IsOnHeap() constDefinition TObject.h:152; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::ExecuteEventvirtual void ExecuteEvent(Int_t event, Int_t px, Int_t py)Execute action corresponding to an event at (px,py).Definition TObject.cxx:398; TObject::Executevirtual void Execute(const char *method, const char *params, Int_t *error=nullptr)Execut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:120022,Clear,Clearvirtual,120022,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,"classes, this always returns false. ;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; void setCdfBoundaries (bool flag);  Set use of special boundary conditions for c.d.f.s. ;  ; void setInterpolationOrder (Int_t order);  Set histogram interpolation order. ;  ; void Streamer (TBuffer &) override;  Stream an object of class RooHistFunc. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double totVolume () const;  Get total bin volume spanned by this hist function. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooArgSet const & variables () const;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:4434,simpl,simple,4434,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['simpl'],['simple']
Usability,"clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. TControlBar(); TControlBar(const TControlBar&); TControlBar(const char* orientation, const char* title = """"); TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBar.html:1741,simpl,simple,1741,root/html526/TControlBar.html,https://root.cern,https://root.cern/root/html526/TControlBar.html,5,['simpl'],['simple']
Usability,"clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Act",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TControlBar.html:1749,simpl,simple,1749,root/html602/TControlBar.html,https://root.cern,https://root.cern/root/html602/TControlBar.html,2,['simpl'],['simple']
Usability,"client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:33018,clear,clear,33018,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,2,['clear'],['clear']
Usability,"clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:3293,clear,clearShapeDirty,3293,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,1,['clear'],['clearShapeDirty']
Usability,"clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:3162,clear,clearShapeDirty,3162,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,1,['clear'],['clearShapeDirty']
Usability,"clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:3162,clear,clearShapeDirty,3162,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['clear'],['clearShapeDirty']
Usability,"clude <TMVA/DNN/SGD.h>. Inheritance diagram for TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 48 of file SGD.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 49 of file SGD.h. Constructor & Destructor Documentation. ◆ TSGD(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::TSGD ; (; Scalar_t ; learningRate, . DeepNet_t & ; deepNet, . Scalar_t ; momentum . ). Constructor. ; Definition at line 86 of file SGD.h. ◆ ~TSGD(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::~TSGD ; (; ). default . Destructor. . Member Function Documentation. ◆ GetMomentum(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::GetMomentum ; (; ); const. inline . Getters. ; Definition at line 72 of file SGD.h. ◆ GetPastBiasGradients(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector< std::vector< Matrix_t > > & TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:4244,learn,learningRate,4244,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['learn'],['learningRate']
Usability,"clude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:136465,simpl,simple,136465,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simple']
Usability,"cluded. ; Definition at line 120 of file GSLRndmEngines.h. ◆ RndmInt(). unsigned long ROOT::Math::GSLRandomEngine::RndmInt ; (; unsigned long ; max); const. Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 147 of file GSLRndmEngines.cxx. ◆ SetSeed(). void ROOT::Math::GSLRandomEngine::SetSeed ; (; unsigned int ; seed); const. set the random generator seed ; Definition at line 170 of file GSLRndmEngines.cxx. ◆ SetType(). void ROOT::Math::GSLRandomEngine::SetType ; (; GSLRngWrapper * ; r). inlineprotected . internal method used by the derived class to set the type of generators ; Definition at line 315 of file GSLRndmEngines.h. ◆ Size(). unsigned int ROOT::Math::GSLRandomEngine::Size ; (; ); const. return the state size of generator ; Definition at line 199 of file GSLRndmEngines.cxx. ◆ tDist(). double ROOT::Math::GSLRandomEngine::tDist ; (; double ; nu); const. t student distribution ; Definition at line 324 of file GSLRndmEngines.cxx. ◆ Terminate(). void ROOT::Math::GSLRandomEngine::Terminate ; (; ). delete pointer to contained rng ; Definition at line 131 of file GSLRndmEngines.cxx. Friends And Related Symbol Documentation. ◆ GSLMCIntegrator. friend class GSLMCIntegrator. friend . Definition at line 67 of file GSLRndmEngines.h. Member Data Documentation. ◆ fCurTime. unsigned int ROOT::Math::GSLRandomEngine::fCurTime. mutableprivate . Definition at line 328 of file GSLRndmEngines.h. ◆ fRng. GSLRngWrapper* ROOT::Math::GSLRandomEngine::fRng. private . Definition at line 327 of file GSLRndmEngines.h. Libraries for ROOT::Math::GSLRandomEngine:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRandomEngine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:15043,Guid,Guide,15043,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,1,['Guid'],['Guide']
Usability,"clusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void TGWin32VirtualXProxy::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reimplemented from TVirtualX. ◆ ClearWindow() [2/2]. void TGWin32VirtualXProxy::ClearWindow ; (; Window_t ; id). overridevirtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented from TVirtualX. ◆ CloseDisplay(). void TGWin32VirtualXProxy::CloseDisplay ; (; ). overridevirtual . Closes connection to display server and destroys all windows. ; Reimplemented from TVirtualX.; Definition at line 265 of file TGWin32VirtualXProxy.cxx. ◆ ClosePixmap(). void TGWin32VirtualXProxy::ClosePixmap ; (; ). overridevirtual . Deletes current pixmap. ; Reimplemented from TVirtualX. ◆ CloseWindow(). void TGWin32VirtualXProxy::CloseWindow ; (; ). overridevirtual . Deletes current window. ; Reimplemented from TVirtualX. ◆ ConvertPrimarySelection(). void TGWin32VirtualXProxy::ConvertPrimarySelection ; (; Window_t ; id, . Atom_t ; clipboard, . Time_t ; when . ). overridevirtual . Causes a SelectionRequest event to be sen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:56636,Clear,Clears,56636,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['Clear'],['Clears']
Usability,"coefList=(a1 = 10 +/- 0,a2 = -1 +/- 0,a3 = 0.01); [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; Minuit2Minimizer : Valid minimum - status = 0; FVAL = -1002.2262595660759; Edm = 2.95538313214564806e-09; Nfcn = 251; a1 = -0.498159 +/- 0.0227242 (limited); a2 = 0.198316 +/- 0.00564906 (limited); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 0, estimated distance to minimum: 0; covariance matrix quality: Not calculated at all; Status : MINIMIZE=-1 HESSE=302 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a1 1.0000e+01 +/- 0.00e+00; a2 -1.0000e+00 +/- 0.00e+00; ; ; RooFitResult: minimized FCN value: 29650.9, estimated distance to minimum: 2.95925e-09; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a1 -4.9816e-01 +/- 2.27e-02; a2 1.9832e-01 +/- 5.65e-03; ; ; ; ; -------------- Starting second fit ---------------; ; ; Without recovery, the fitter encountered 23 invalid function values. The parameters are unchanged.; ; With recovery, the fitter encountered 23 invalid function values, but the parameters are fitted.; ; DateJune 2021 ; AuthorHarshal Shende, Stephan Hageboeck (C++ version) ; Definition in file rf612_recoverFromInvalidParameters.py. tutorialsroofitrf612_recoverFromInvalidParameters.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:8245,Guid,Guide,8245,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,1,['Guid'],['Guide']
Usability,"color algorithms (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches the limit value one can choose either smooth transition (by decreasing the limit value) or a sharp modulo transition (continuing with 0 value). This allows various visual effects. One can choose from the following set of the algorithms:. 0 = RGB Smooth,; 1 = RGB Modulo,; 2 = CMY Smooth,; 3 = CMY Modulo,; 4 = CIE Smooth; 5 = CIE Modulo,; 6 = YIQ Smooth,; 7 = YIQ Modulo,; 8 = HVS Smooth,; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default value is 0. Example choosing CMY Modulo to paint the 2D histogram:; h2->Draw(""SPEC c1(3) dm(0,1) a(30,30,0)"");; The operator “lp(x,y,z)” sets the light position. In Light and LightHeight display modes groups the color palette is calculated according to the fictive light source position in 3-d space. Using this function one can change the source’s position and thus achieve various graphical effects. This function does not apply for Simple and Height display modes groups. Default is: lp(1000,1000,100) .; The operator “s(shading,shadow)” allows to set the shading. The surface picture is composed of triangles. The edges of the neighboring triangles can be smoothed (shaded). The shadow can be painted as well. The function does not apply on Simple display modes group. The possible values for shading are:. 0 = Not Shaded,; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted,; 1 = Shadows are painted. Default values: s(1,0) .; The operator “b(bezier)” sets the Bezier smoothing. For Simple display modes group and for Grid, LinesX and LinesY display modes one can smooth data using Bezier smoothing algorithm. The function does not apply on other display modes groups and display modes. Possible values are: 0 = No bezier smoothing, 1 = Bezier smoothing. Default value is: b(0).; The operator “cw(width)” sets the contour width. This function applies only on for the Contours display mode. One can change th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:105799,Simpl,Simple,105799,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"color component, hsv smooth; // algorithm, hsv modulo color component, it does not apply for simple; // display modes algorithm group [15]; float l_h_weight; // weight between shading according to fictive light source and; // according to channels counts, applies only for; // PICTURE2_MODE_GROUP_LIGHT_HEIGHT modes group; int xlight; // x position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int ylight; // y position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int zlight; // z position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int shadow; // determines whether shadow will be drawn (no shadow, shadow),; // for rainbowed display modes with shading according to light; int shading; // determines whether the picture will shaded, smoothed (no shading,; // shading), for rainbowed display modes only; int bezier; // determines Bezier interpolation (applies only for simple display; // modes group for grid, x_lines, y_lines display modes); int border_color; // color of background of the picture; int full_border; // decides whether background is painted; int raster_en_dis; // decides whether the rasters are shown; int raster_long; // decides whether the rasters are drawn as long lines; int raster_color; // color of the rasters; char *raster_description_x; // x axis description; char *raster_description_y; // y axis description; char *raster_description_z; // z axis description; int pen_color; // color of spectrum; int pen_dash; // style of pen; int pen_width; // width of line; int chanmark_en_dis; // decides whether the channel marks are shown; int chanmark_style; // style of channel marks; int chanmark_width; // width of channel marks; int chanmark_height; // height of channel marks; int chanmark_color; // color of channel marks; int chanline_en_dis; // decides whether the channel lines (grid) are shown.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:73965,simpl,simple,73965,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,2,['simpl'],['simple']
Usability,"color); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version working with wchar_t and required by TMathText (who uses utf-8(?)). void DrawTextNDC(Double_t u, Double_t v, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadPainter.html:6139,simpl,simple,6139,root/html602/TPadPainter.html,https://root.cern,https://root.cern/root/html602/TPadPainter.html,1,['simpl'],['simple']
Usability,"color); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint Polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Special version working with wchar_t and required by TMathText. void DrawTextNDC(Double_t u, Double_t v, const char* text, TVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPadPainter.html:6139,simpl,simple,6139,root/html604/TPadPainter.html,https://root.cern,https://root.cern/root/html604/TPadPainter.html,1,['simpl'],['simple']
Usability,"column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; WarningBy default, RDataFrame will use as many threads as the hardware supports, using up all the resources on a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use ROOT::EnableImplicitMT(i); replacing i with the number of CPUs/slots that were allocated for this job. Thread-safety of user-defined expressions; RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops. User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate() will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define() expressions will often be pure in the functional programming sense (no side-effects, no dependency on external state), which eliminates all risks of race conditions.; In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or OnPartialResult() offer thread-aware counterparts (ForeachSlot(), DefineSlot(), OnPartialResultSlot()): their only difference is that they will pass an extra slot argument (an unsigned integer) to the user-defined expression. When calling user-defined code concurrently, RDataFrame guarantees that different threads will employ different values of the slot parameter, where slot will be a number between 0 and GetNSlots() - 1. In other words, within a slot, computation runs sequentially and events are processed sequentially. Note that the same slot might be associated to different threads over the course of a single event loop, but two threads will never receive the same slot at the same time. This extra parameter might facilitate writi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:46668,simpl,simple,46668,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simple']
Usability,"combine. ; redfuncBinary reduction function to combine the elements of the vector objs. . ReturnsA value result of combining the vector elements into a single object of the same type. ; Definition at line 581 of file TThreadExecutor.hxx. ◆ Reduce() [2/2]. template<class T , class R > . auto ROOT::TThreadExecutor::Reduce ; (; const std::vector< T > & ; objs, . R ; redfunc . ); -> decltype(redfunc(objs)). ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ; Parameters. objsA vector of elements to combine. ; redfuncReduction function to combine the elements of the vector objs . ReturnsA value result of combining the vector elements into a single object of the same type. ; Definition at line 566 of file TThreadExecutor.hxx. ◆ SeqReduce(). template<class T , class R > . auto ROOT::TThreadExecutor::SeqReduce ; (; const std::vector< T > & ; objs, . R ; redfunc . ); -> decltype(redfunc(objs)). private . ""Reduce"", sequentially, an std::vector into a single object ; Parameters. objsA vector of elements to combine. ; redfuncReduction function to combine the elements of the vector objs. . ReturnsA value result of combining the vector elements into a single object of the same type. ; Definition at line 595 of file TThreadExecutor.hxx. Member Data Documentation. ◆ fTaskArenaW. std::shared_ptr<ROOT::Internal::RTaskArenaWrapper> ROOT::TThreadExecutor::fTaskArenaW = nullptr. private . Pointer to the TBB task arena wrapper. ; Definition at line 134 of file TThreadExecutor.hxx. ◆ TExecutorCRTP. friend ROOT::TThreadExecutor::TExecutorCRTP. private . Definition at line 42 of file TThreadExecutor.hxx. Libraries for ROOT::TThreadExecutor:. [legend]; The documentation for this class was generated from the following files:; core/imt/inc/ROOT/TThreadExecutor.hxx; core/imt/src/TThreadExecutor.cxx. ROOTTThreadExecutor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TThreadExecutor.html:36132,Guid,Guide,36132,doc/master/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TThreadExecutor.html,1,['Guid'],['Guide']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQCommand.html:24046,undo,undo,24046,root/html534/TQCommand.html,https://root.cern,https://root.cern/root/html534/TQCommand.html,1,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQCommand.html:24786,undo,undo,24786,root/html604/TQCommand.html,https://root.cern,https://root.cern/root/html604/TQCommand.html,1,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:24786,undo,undo,24786,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,1,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 25128 2008-08-12 17:59:19Z pcanal $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:23771,undo,undo,23771,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,1,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQCommand.html:24026,undo,undo,24026,root/html530/TQCommand.html,https://root.cern,https://root.cern/root/html530/TQCommand.html,1,['undo'],['undo']
Usability,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQCommand.html:24026,undo,undo,24026,root/html532/TQCommand.html,https://root.cern,https://root.cern/root/html532/TQCommand.html,1,['undo'],['undo']
Usability,compSparse::fFact. protected . Definition at line 72 of file TDecompSparse.h. ◆ fIcntl. Int_t TDecompSparse::fIcntl[31]. protected . Definition at line 49 of file TDecompSparse.h. ◆ fIkeep. TArrayI TDecompSparse::fIkeep. protected . Definition at line 57 of file TDecompSparse.h. ◆ fInfo. Int_t TDecompSparse::fInfo[21]. protected . Definition at line 51 of file TDecompSparse.h. ◆ fIPessimism. Double_t TDecompSparse::fIPessimism. protected . Definition at line 65 of file TDecompSparse.h. ◆ fIw. TArrayI TDecompSparse::fIw. protected . Definition at line 58 of file TDecompSparse.h. ◆ fIw1. TArrayI TDecompSparse::fIw1. protected . Definition at line 59 of file TDecompSparse.h. ◆ fIw2. TArrayI TDecompSparse::fIw2. protected . Definition at line 60 of file TDecompSparse.h. ◆ fMaxfrt. Int_t TDecompSparse::fMaxfrt. protected . Definition at line 62 of file TDecompSparse.h. ◆ fNnonZeros. Int_t TDecompSparse::fNnonZeros. protected . Definition at line 71 of file TDecompSparse.h. ◆ fNrows. Int_t TDecompSparse::fNrows. protected . Definition at line 70 of file TDecompSparse.h. ◆ fNsteps. Int_t TDecompSparse::fNsteps. protected . Definition at line 61 of file TDecompSparse.h. ◆ fPrecision. Double_t TDecompSparse::fPrecision. protected . Definition at line 53 of file TDecompSparse.h. ◆ fRowFact. TArrayI TDecompSparse::fRowFact. protected . Definition at line 74 of file TDecompSparse.h. ◆ fRPessimism. Double_t TDecompSparse::fRPessimism. protected . Definition at line 66 of file TDecompSparse.h. ◆ fVerbose. Int_t TDecompSparse::fVerbose. protected . Definition at line 47 of file TDecompSparse.h. ◆ fW. TArrayD TDecompSparse::fW. protected . Definition at line 63 of file TDecompSparse.h. Libraries for TDecompSparse:. [legend]; The documentation for this class was generated from the following files:; math/matrix/inc/TDecompSparse.h; math/matrix/src/TDecompSparse.cxx. TDecompSparse. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSparse.html:32697,Guid,Guide,32697,doc/master/classTDecompSparse.html,https://root.cern,https://root.cern/doc/master/classTDecompSparse.html,1,['Guid'],['Guide']
Usability,"compares with state index number). Bool_t operator==(const char* label) const; Equality operator with a string (compares with state label string). Bool_t operator==(const RooAbsArg& other); Equality operator with another RooAbsArg. Only functional; is also a RooAbsCategory, will return true if index is the same. Bool_t isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE). Bool_t isValidIndex(Int_t index) const; Check if state with given index is defined. Bool_t isValidLabel(const char* label) const; Check if state with given name is defined. const RooCatType* defineType(const char* label); Define a new state with given name. The lowest available; integer number is assigned as index value. const RooCatType* defineTypeUnchecked(const char* label, Int_t index); Internal version of defineType that does not check if type; already exists. const RooCatType* defineType(const char* label, Int_t index); Define new state with given name and index number. void clearTypes(); Delete all currently defined states. const RooCatType* lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; Find our type that matches the specified type, or return 0 for no match. const RooCatType* lookupType(Int_t index, Bool_t printError = kFALSE) const; Find our type corresponding to the specified index, or return 0 for no match. const RooCatType* lookupType(const char* label, Bool_t printError = kFALSE) const; Find our type corresponding to the specified label, or return 0 for no match. Bool_t isValid() const; Check if current value is a valid state. Bool_t isValid(const RooCatType& value) const; Check if given state is defined for this object. Roo1DTable* createTable(const char* label) const; Create a table matching the shape of this category. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from stream (dummy for now). void writeToStream(ostream& os, Bool_t compact) const; Write object contents to ostream. void printValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategory.html:23617,clear,clearTypes,23617,root/html534/RooAbsCategory.html,https://root.cern,https://root.cern/root/html534/RooAbsCategory.html,3,['clear'],['clearTypes']
Usability,"compatibility with the first implementation. ; Definition at line 103 of file TSemaphore.cxx. ◆ Streamer(). void TSemaphore::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSemaphore::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file TSemaphore.h. ◆ TryWait(). Int_t TSemaphore::TryWait ; (; ). If the semaphore value is > 0 then decrement it and return 0. ; If it's already 0 then return 1. This call never blocks. ; Definition at line 87 of file TSemaphore.cxx. ◆ Wait() [1/2]. Int_t TSemaphore::Wait ; (; ). If the semaphore value is > 0 then decrement it and carry on, else block, waiting on the condition until it is signaled. ; Returns always 0, for backward compatibility with the first implementation. ; Definition at line 35 of file TSemaphore.cxx. ◆ Wait() [2/2]. Int_t TSemaphore::Wait ; (; Int_t ; millisec). If the semaphore value is > 0 then decrement it and carry on, else block. ; If millisec > 0 then a relative timeout of millisec milliseconds is applied. For backward compatibility with the first implementation, millisec == 0 means no timeout. Returns 1 if timed-out, 0 otherwise. ; Definition at line 57 of file TSemaphore.cxx. Member Data Documentation. ◆ fCond. std::condition_variable TSemaphore::fCond. private . Definition at line 33 of file TSemaphore.h. ◆ fMutex. std::mutex TSemaphore::fMutex. private . Definition at line 32 of file TSemaphore.h. ◆ fValue. Int_t TSemaphore::fValue. private . Definition at line 34 of file TSemaphore.h. ◆ fWakeups. UInt_t TSemaphore::fWakeups. private . Definition at line 35 of file TSemaphore.h. Libraries for TSemaphore:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/TSemaphore.h; core/thread/src/TSemaphore.cxx. TSemaphore. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSemaphore.html:14030,Guid,Guide,14030,doc/master/classTSemaphore.html,https://root.cern,https://root.cern/doc/master/classTSemaphore.html,1,['Guid'],['Guide']
Usability,conPicture. TGPicture* TSessionViewer::fRightIconPicture. private . Definition at line 558 of file TSessionViewer.h. ◆ fServerFrame. TSessionServerFrame* TSessionViewer::fServerFrame. private . Definition at line 524 of file TSessionViewer.h. ◆ fSessionFrame. TSessionFrame* TSessionViewer::fSessionFrame. private . Definition at line 525 of file TSessionViewer.h. ◆ fSessionHierarchy. TGListTree* TSessionViewer::fSessionHierarchy. private . Definition at line 555 of file TSessionViewer.h. ◆ fSessionItem. TGListTreeItem* TSessionViewer::fSessionItem. private . Definition at line 556 of file TSessionViewer.h. ◆ fSessionMenu. TGPopupMenu* TSessionViewer::fSessionMenu. private . Definition at line 543 of file TSessionViewer.h. ◆ fSessions. TList* TSessionViewer::fSessions. private . Definition at line 531 of file TSessionViewer.h. ◆ fStart. time_t TSessionViewer::fStart. private . Definition at line 518 of file TSessionViewer.h. ◆ fStatusBar. TGStatusBar* TSessionViewer::fStatusBar. private . Definition at line 557 of file TSessionViewer.h. ◆ fTimer. TTimer* TSessionViewer::fTimer. private . Definition at line 560 of file TSessionViewer.h. ◆ fToolBar. TGToolBar* TSessionViewer::fToolBar. private . Definition at line 540 of file TSessionViewer.h. ◆ fTreeView. TGCanvas* TSessionViewer::fTreeView. private . Definition at line 554 of file TSessionViewer.h. ◆ fUserGroup. UserGroup_t* TSessionViewer::fUserGroup. private . Definition at line 561 of file TSessionViewer.h. ◆ fV1. TGVerticalFrame* TSessionViewer::fV1. private . Definition at line 522 of file TSessionViewer.h. ◆ fV2. TGVerticalFrame* TSessionViewer::fV2. private . Definition at line 523 of file TSessionViewer.h. ◆ fViewerEnv. TEnv* TSessionViewer::fViewerEnv. private . Definition at line 564 of file TSessionViewer.h. gui/sessionviewer/inc/TSessionViewer.h; gui/sessionviewer/src/TSessionViewer.cxx. TSessionViewer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:56504,Guid,Guide,56504,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['Guid'],['Guide']
Usability,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:24663,progress bar,progress bar,24663,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,2,['progress bar'],['progress bar']
Usability,"concrete implementation of IntervalCalculator, providing the computation ; of a credible interval using a Bayesian method. ; The class works only for one single parameter of interest and it integrates the likelihood function with the given prior; probability density function to compute the posterior probability. The result of the class is a one dimensional interval ; (class SimpleInterval ), which is obtained from inverting the cumulative posterior distribution. . The interface allows one to construct the class by passing the data set, probability density function for the model, the prior; functions and then the parameter of interest to scan. The nuisance parameters can also be passed to be marginalized when ; computing the posterior. Alternatively, the class can be constructed by passing the data and the ModelConfig containing; all the needed information (model pdf, prior pdf, parameter of interest, nuisance parameters, etc..). After configuring the calculator, one only needs to ask GetInterval(), which; will return an SimpleInterval object. By default the extrem of the integral are obtained by inverting directly the; cumulative posterior distribution. By using the method SetScanOfPosterior(nbins) the interval is then obtained by ; scanning the posterior function in the given number of points. The firts method is in general faster but it requires an; integration one extra dimension ( in the poi in addition to the nuisance parameters), therefore in some case it can be; less robust. . The class can also return the posterior function (method GetPosteriorFunction) or if needed the normalized; posterior function (the posterior pdf) (method GetPosteriorPdf). A posterior plot is also obtained using ; the GetPosteriorPlot method. The class allows to use different integration methods for integrating in the nuisances and in the poi. All the numerical ; integration methods of ROOT can be used via the method SetIntegrationType (see more in the documentation of; this method). F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:1447,Simpl,SimpleInterval,1447,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,5,['Simpl'],['SimpleInterval']
Usability,"concurrent update of pad, file, benchmark facility, etc. 26.6.3 An Example on How to Use Canvas Event Signals (rqfiller.C); This example shows:. How the object communication mechanism can be used for handling the TCanvas’s mouse/key events in an interpreted class. With this demo you can fill histograms by hand:. Click the left button or move mouse with button pressed to fill histograms.; Use the right button of the mouse to reset the histograms. 26.6.4 Complex GUI Using Signals and Slots (guitest.C); Based on $ROOTSYS/test/guitest.cxx this example demonstrates:. All features of the original compiled guitest.cxx program.; Sophisticated use of signals and slots to build a complete user interface that can be executed either in the interpreter or as a compiled program. 27 Automatic HTML Documentation. THtml is ROOT’s documentation engine. It can be used to document your classes in a reference guide, and to convert your text or source files to HTML.; 27.1 Reference Guide; The Reference Guide for the ROOT classes at http://root.cern.ch/root/html/ has been generated by ROOT’s THtml class. Just as for ROOT’s classes, it can generate (and update) a reference guide for your classes, too. You document your classes using source code comments. All comments will be automatically put into a <pre></pre> environment to keep the indentation and line length. You can write “raw” HTML by enclosing comments in the keywords Begin_Html and End_Html.; To generate documentation for the class TObject you could run the following commands:; root[] THtml h; root[] h.SetInputDir(""$(ROOTSYS)"");; root[] h.MakeClass(""TObject"");; root[] h.CreateJavascript();; root[] h.CreateStylesheet();; The comments following the first comment of the form //____________________, before any method, is assumed to be the class description. As with any other documentation part, it has to be a continuous block of comments.; Any documented class will have an class index entry in the ClassIndex.html, showing their name wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1240043,Guid,Guide,1240043,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Guid'],['Guide']
Usability,"confined in a close vicinity. The linearity property of this method is reflected in the metric with which ""far apart"" and ""close vicinity"" are determined: the covariance matrix of the discriminant variable space.; The classification of the events in signal and background classes relies on the following characteristics (only): overall sample means, \( x_i \), for each input variable, \( i \), class-specific sample means, \( x_{S(B),i}\), and total covariance matrix \( T_{ij} \). The covariance matrix can be decomposed into the sum of a within ( \( W_{ij} \)) and a between-class ( \( B_{ij} \)) class matrix. They describe the dispersion of events relative to the means of their own class (within-class matrix), and relative to the overall sample means (between-class matrix). The Fisher coefficients, \( F_i \), are then given by. \[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \]. where in TMVA is set \( N_S = N_B \), so that the factor in front of the sum simplifies to \( \frac{1}{2}\). The Fisher discriminant then reads. \[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \]. The offset \( F_0 \) centers the sample mean of \( x_{Fi} \) at zero. Instead of using the within-class matrix, the Mahalanobis variant determines the Fisher coefficients as follows:. \[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \]. with resulting \( x_{Ma} \) that are very similar to the \( x_{Fi} \).; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising the between-class separation, while minimising the within-class dispersion. A useful measure of the discrimination power of a variable is hence given by the diagonal quantity: \( \frac{B_{ii}}{W_{ii}} \) .; Discrimination power: the value of the Fisher coefficient is a measure of the discriminating power of a variable. The discrimination power of se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html:1954,simpl,simplifies,1954,doc/master/classTMVA_1_1MethodFisher.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html,1,['simpl'],['simplifies']
Usability,"const Double_t ; targetLeft, . const Double_t ; target2Left, . const Double_t ; nTot, . const Double_t ; targetTot, . const Double_t ; target2Tot . ). Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ; into a ""left-node"" and a ""right-node"" (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) this is then the quality criteria which is optimized for when trying to increase the information in the system for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)) which is used as a ""separation"" index should be as small as possible. the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms... ; Definition at line 69 of file RegressionVariance.cxx. ◆ GetSeparationIndex(). Double_t TMVA::RegressionVariance::GetSeparationIndex ; (; const Double_t ; n, . const Double_t ; target, . const Double_t ; target2 . ). virtual . Separation Index: a simple Variance. ; Definition at line 88 of file RegressionVariance.cxx. ◆ IsA(). virtual TClass * TMVA::RegressionVariance::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 94 of file RegressionVariance.h. ◆ Streamer(). virtual void TMVA::RegressionVariance::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::RegressionVariance::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 94 of file RegressionVariance.h. Member Data Documentation. ◆ fName. TString TMVA::RegressionVariance::fName. protected . name of the concrete Separation Index implementation ; Definition at line 92 of file RegressionVariance.h. Libraries for TMVA::RegressionVariance:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RegressionVariance.h; tmva/tmva/src/RegressionVariance.cxx. TMVARegressionVariance. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html:5371,Guid,Guide,5371,doc/master/classTMVA_1_1RegressionVariance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html,1,['Guid'],['Guide']
Usability,"const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:6407,Clear,Clear,6407,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['Clear'],['Clear']
Usability,"const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddPdf.html:3897,clear,clearEvalError,3897,root/html532/RooAddPdf.html,https://root.cern,https://root.cern/root/html532/RooAddPdf.html,2,['clear'],['clearEvalError']
Usability,"const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:4343,clear,clearEvalError,4343,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,1,['clear'],['clearEvalError']
Usability,"const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProdPdf.html:4343,clear,clearEvalError,4343,root/html534/RooProdPdf.html,https://root.cern,https://root.cern/root/html534/RooProdPdf.html,1,['clear'],['clearEvalError']
Usability,"const RooArgSet &catSet, const char *cuts="""", const char *opts="""") const;  Construct table for product of categories in catSet. ;  ; const TTree * tree () const;  Return a pointer to the TTree which stores the data. ;  ; RooFit::UniqueId< RooAbsData > const & uniqueId () const;  Returns a unique ID that is different for every instantiated RooAbsData object. ;  ; virtual double weight () const =0;  ; virtual void weightError (double &lo, double &hi, ErrorType=Poisson) const;  Return the asymmetric errors on the current weight. ;  ; virtual double weightError (ErrorType=Poisson) const;  Return the symmetric error on the current weight. ;  ; virtual double weightSquared () const =0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeData.html:12417,Clear,Clear,12417,doc/master/classRooTreeData.html,https://root.cern,https://root.cern/doc/master/classRooTreeData.html,2,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:3047,Clear,Clear,3047,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2536,Clear,Clear,2536,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPEffDecay.html:2838,Clear,Clear,2838,root/html532/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPEffDecay.html,4,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet())",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:2736,Clear,Clear,2736,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgusBG.html:2560,Clear,Clear,2560,root/html532/RooArgusBG.html,https://root.cern,https://root.cern/root/html532/RooArgusBG.html,49,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsAnaConvPdf.html:4032,Clear,Clear,4032,root/html528/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsAnaConvPdf.html,2,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:3132,Clear,Clear,3132,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,2,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedPdf.html:3132,Clear,Clear,3132,root/html530/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedPdf.html,2,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDecay.html:2536,Clear,Clear,2536,root/html528/RooDecay.html,https://root.cern,https://root.cern/root/html528/RooDecay.html,2,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:2838,Clear,Clear,2838,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,8,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBDecay.html:2736,Clear,Clear,2736,root/html528/RooBDecay.html,https://root.cern,https://root.cern/root/html528/RooBDecay.html,2,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgusBG.html:2560,Clear,Clear,2560,root/html528/RooArgusBG.html,https://root.cern,https://root.cern/root/html528/RooArgusBG.html,46,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:3085,Clear,Clear,3085,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,60,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:4712,Clear,Clear,4712,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:4712,Clear,Clear,4712,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:4712,Clear,Clear,4712,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['Clear'],['Clear']
Usability,"const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiVarGaussian.html:3047,clear,clearShapeDirty,3047,root/html526/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html526/RooMultiVarGaussian.html,1,['clear'],['clearShapeDirty']
Usability,"const TEmulatedCollectionProxy &);  . Friends; class TCollectionProxy;  . Additional Inherited Members;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:11273,clear,clear,11273,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,1,['clear'],['clear']
Usability,"const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube editor. ~TGeoTubeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for rmin. void DoRmax(); Slot for rmax. void DoDz(); Slot for dz. TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoTubeEditor.html:22222,undo,undoing,22222,root/html604/TGeoTubeEditor.html,https://root.cern,https://root.cern/root/html604/TGeoTubeEditor.html,1,['undo'],['undoing']
Usability,"const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube editor. ~TGeoTubeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for rmin. void DoRmax(); Slot for rmax. void DoDz(); Slot for dz. TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTubeEditor.html:22222,undo,undoing,22222,root/html602/TGeoTubeEditor.html,https://root.cern,https://root.cern/root/html602/TGeoTubeEditor.html,1,['undo'],['undoing']
Usability,"const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for rotation editor. ~TGeoRotationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected rotation. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoRotationEditor.html:21908,undo,undoing,21908,root/html528/TGeoRotationEditor.html,https://root.cern,https://root.cern/root/html528/TGeoRotationEditor.html,1,['undo'],['undoing']
Usability,"const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for rotation editor. ~TGeoRotationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected rotation. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoRotationEditor.html:22008,undo,undoing,22008,root/html530/TGeoRotationEditor.html,https://root.cern,https://root.cern/root/html530/TGeoRotationEditor.html,1,['undo'],['undoing']
Usability,"const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoRotationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for rotation editor. ~TGeoRotationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected rotation. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoRotationEditor.html:22008,undo,undoing,22008,root/html532/TGeoRotationEditor.html,https://root.cern,https://root.cern/root/html532/TGeoRotationEditor.html,1,['undo'],['undoing']
Usability,"const TGWindow * ; parent, . UInt_t ; w, . UInt_t ; h, . const char * ; string, . Int_t ; id, . UInt_t ; sboptions, . ULong_t ; back . ). TGTextViewostream constructor. ; Definition at line 86 of file TGTextViewStream.cxx. ◆ ~TGTextViewostream(). TGTextViewostream::~TGTextViewostream ; (; ). inlineoverride . Definition at line 57 of file TGTextViewStream.h. Member Function Documentation. ◆ Class(). static TClass * TGTextViewostream::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextViewostream::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextViewostream::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 59 of file TGTextViewStream.h. ◆ DeclFileName(). static const char * TGTextViewostream::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 59 of file TGTextViewStream.h. ◆ IsA(). TClass * TGTextViewostream::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGTextView.; Definition at line 59 of file TGTextViewStream.h. ◆ Streamer(). void TGTextViewostream::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGTextView. ◆ StreamerNVirtual(). void TGTextViewostream::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file TGTextViewStream.h. Member Data Documentation. ◆ fStreambuffer. TGTextViewStreamBuf TGTextViewostream::fStreambuffer. protected . Definition at line 46 of file TGTextViewStream.h. Libraries for TGTextViewostream:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTextViewStream.h; gui/gui/src/TGTextViewStream.cxx. TGTextViewostream. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextViewostream.html:43989,Guid,Guide,43989,doc/master/classTGTextViewostream.html,https://root.cern,https://root.cern/doc/master/classTGTextViewostream.html,1,['Guid'],['Guide']
Usability,"const TGWindow* p = 0, UInt_t h = 1, UInt_t type = 1, Int_t id = -1, UInt_t options = kVerticalFrame, Pixel_t back = GetDefaultFrameBackground(), Bool_t reversed = kFALSE, Bool_t mark_ends = kFALSE, Bool_t constrained = kTRUE, Bool_t relative = kFALSE); virtual~TGTripleVSlider(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTripleVSlider.html:2845,Clear,Clear,2845,root/html528/TGTripleVSlider.html,https://root.cern,https://root.cern/root/html528/TGTripleVSlider.html,4,['Clear'],['Clear']
Usability,"const TGWindow* p, Int_t w = 1, Int_t h = 20); virtual~TGMdiMenuBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddPopup(TGHotString* s, TGPopupMenu* menu, TGLayoutHints* l); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMdiMenuBar.html:1405,Clear,Clear,1405,root/html528/TGMdiMenuBar.html,https://root.cern,https://root.cern/root/html528/TGMdiMenuBar.html,4,['Clear'],['Clear']
Usability,"const TRotation &);  ; TVector3 Vect () const;  ; Double_t X () const;  ; Double_t Y () const;  ; Double_t Z () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLorentzVector.html:14057,Clear,Clear,14057,doc/master/classTLorentzVector.html,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html,1,['Clear'],['Clear']
Usability,"const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; AuthorAndreas Hoecker ; Definition in file TMVARegressionApplication.C. tutorialstmvaTMVARegressionApplication.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C.html:13323,Guid,Guide,13323,doc/master/TMVARegressionApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C.html,1,['Guid'],['Guide']
Usability,"const char * GetFitFormat() constDefinition TPaveStats.h:35; TPaveStats::SetFitFormatvirtual void SetFitFormat(const char *format=""5.4g"")Change (i.e. set) the format for printing fit parameters in statistics box.Definition TPaveStats.cxx:291; TPaveStats::GetOptFitInt_t GetOptFit() constReturn the fit option.Definition TPaveStats.cxx:262; TPaveStats::SetParentvoid SetParent(TObject *obj) overrideDefinition TPaveStats.h:52; TPaveStats::SetOptFitvoid SetOptFit(Int_t fit=1)Set the fit option.Definition TPaveStats.cxx:299; TPaveStats::Paintvoid Paint(Option_t *option="""") overridePaint the pave stat.Definition TPaveStats.cxx:325; TPaveStats::Classstatic TClass * Class(); TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Classstatic TClass * Class(); TPaveText::Clearvoid Clear(Option_t *option="""") overrideClear all lines in this pavetext.Definition TPaveText.cxx:217; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TPaveText::Paintvoid Paint(Option_t *option="""") overridePaint this pavetext with its current attributes.Definition TPaveText.cxx:419; TPaveText::GetLinevirtual TText * GetLine(Int_t number) constGet Pointer to line number in this pavetext.Definition TPaveText.cxx:284; TPave::GetNameconst char * GetName() const overrideReturns name of object.Definition TPave.h:56; TPave::SetNamevirtual void SetName(const char *name="""")Definition TPave.h:79; TPave::SetBorderSizevirtual void SetBorderSize(Int_t bordersize=4)Sets the border size of the TPave box and shadow.Definition TPave.h:77; TPave::GetX1NDCDouble_t GetX1NDC() constDefinition TPave.h:59; TPave::SetX2NDCvirtual void SetX2NDC(Double_t x2)Definition TPave.h:83; TRegexpRegular expression class.Definition TRegexp.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:214421,Clear,Clearvoid,214421,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"const char * GetText() const. Int_t GetTextLength() const. const char * GetTipText() const. Int_t GetTipTextLength() const. void SetText(const char* ); {}. void SetTipText(const char* ); {}. void SetUserData(void* , Bool_t = kFALSE); {}. void * GetUserData() const. const TGPicture* GetPicture() const. void SetPictures(const TGPicture* , const TGPicture* ); {}. const TGPicture* GetCheckBoxPicture() const. void SetCheckBoxPictures(const TGPicture* , const TGPicture* ); {}. void SetCheckBox(Bool_t = kTRUE); {}. Bool_t HasCheckBox() const. void CheckItem(Bool_t = kTRUE). void Toggle(); { SetCheckBox( ! IsChecked()); }. Bool_t IsChecked() const. void CheckAllChildren(Bool_t = kTRUE); Propagation of checked-state form children to parents. {}. void CheckChildren(TGListTreeItem* , Bool_t ); {}. Bool_t HasCheckedChild(Bool_t = kFALSE); { return kTRUE; }. Bool_t HasUnCheckedChild(Bool_t = kFALSE); { return kTRUE; }. void UpdateState(); {}. Bool_t HasColor() const; Item coloration (underline + minibox). Color_t GetColor() const. void SetColor(Color_t ); {}. void ClearColor(); {}. void SetDNDSource(Bool_t onoff); Drag and drop. { if (onoff) fDNDState |= kIsDNDSource; else fDNDState &= ~kIsDNDSource; }. void SetDNDTarget(Bool_t onoff); { if (onoff) fDNDState |= kIsDNDTarget; else fDNDState &= ~kIsDNDTarget; }. Bool_t IsDNDSource() const; { return fDNDState & kIsDNDSource; }. Bool_t IsDNDTarget() const; { return fDNDState & kIsDNDTarget; }. Bool_t HandlesDragAndDrop() const; Allow handling by the items themselves ... NOT USED in TGListTree yet !!!!. { return kFALSE; }. void HandleDrag(); {}. void HandleDrop(); {}. void SavePrimitive(ostream& , Option_t* , Int_t ); {}. » Author: Fons Rademakers 25/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGListTreeItem.html:5495,Clear,ClearColor,5495,root/html604/TGListTreeItem.html,https://root.cern,https://root.cern/root/html604/TGListTreeItem.html,1,['Clear'],['ClearColor']
Usability,"const char * GetText() const. Int_t GetTextLength() const. const char * GetTipText() const. Int_t GetTipTextLength() const. void SetText(const char* ); {}. void SetTipText(const char* ); {}. void SetUserData(void* , Bool_t = kFALSE); {}. void * GetUserData() const. const TGPicture* GetPicture() const. void SetPictures(const TGPicture* , const TGPicture* ); {}. const TGPicture* GetCheckBoxPicture() const. void SetCheckBoxPictures(const TGPicture* , const TGPicture* ); {}. void SetCheckBox(Bool_t = kTRUE); {}. Bool_t HasCheckBox() const. void CheckItem(Bool_t = kTRUE). void Toggle(); { SetCheckBox( ! IsChecked()); }. Bool_t IsChecked() const. void CheckAllChildren(Bool_t = kTRUE); Propagation of checked-state form children to parents. {}. void CheckChildren(TGListTreeItem* , Bool_t ); {}. Bool_t HasCheckedChild(Bool_t = kFALSE); { return kTRUE; }. Bool_t HasUnCheckedChild(Bool_t = kFALSE); { return kTRUE; }. void UpdateState(); {}. Bool_t HasColor() const; Item coloration (underline + minibox). Color_t GetColor() const. void SetColor(Color_t ); {}. void ClearColor(); {}. void SetDNDSource(Bool_t onoff); Drag and drop. { if (onoff) fDNDState |= kIsDNDSource; else fDNDState &= ~kIsDNDSource; }. void SetDNDTarget(Bool_t onoff); { if (onoff) fDNDState |= kIsDNDTarget; else fDNDState &= ~kIsDNDTarget; }. Bool_t IsDNDSource() const; { return fDNDState & kIsDNDSource; }. Bool_t IsDNDTarget() const; { return fDNDState & kIsDNDTarget; }. Bool_t HandlesDragAndDrop() const; Allow handling by the items themselves ... NOT USED in TGListTree yet !!!!. { return kFALSE; }. void HandleDrag(); {}. void HandleDrop(); {}. void SavePrimitive(ostream& , Option_t* , Int_t ); {}. » Author: Fons Rademakers 25/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-04 16:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGListTreeItem.html:5274,Clear,ClearColor,5274,root/html534/TGListTreeItem.html,https://root.cern,https://root.cern/root/html534/TGListTreeItem.html,1,['Clear'],['ClearColor']
Usability,"const char * GetText() const. Int_t GetTextLength() const. const char * GetTipText() const. Int_t GetTipTextLength() const. void SetText(const char* ); {}. void SetTipText(const char* ); {}. void SetUserData(void* , Bool_t = kFALSE); {}. void * GetUserData() const. const TGPicture* GetPicture() const. void SetPictures(const TGPicture* , const TGPicture* ); {}. const TGPicture* GetCheckBoxPicture() const. void SetCheckBoxPictures(const TGPicture* , const TGPicture* ); {}. void SetCheckBox(Bool_t = kTRUE); {}. Bool_t HasCheckBox() const. void CheckItem(Bool_t = kTRUE). void Toggle(); { SetCheckBox( ! IsChecked()); }. Bool_t IsChecked() const. void CheckAllChildren(Bool_t = kTRUE); Propagation of checked-state form children to parents. {}. void CheckChildren(TGListTreeItem* , Bool_t ); {}. Bool_t HasCheckedChild(Bool_t = kFALSE); { return kTRUE; }. Bool_t HasUnCheckedChild(Bool_t = kFALSE); { return kTRUE; }. void UpdateState(); {}. Bool_t HasColor() const; Item coloration (underline + minibox). Color_t GetColor() const. void SetColor(Color_t ); {}. void ClearColor(); {}. void SetDNDSource(Bool_t onoff); Drag and drop. { if (onoff) fDNDState |= kIsDNDSource; else fDNDState &= ~kIsDNDSource; }. void SetDNDTarget(Bool_t onoff); { if (onoff) fDNDState |= kIsDNDTarget; else fDNDState &= ~kIsDNDTarget; }. Bool_t IsDNDSource() const; { return fDNDState & kIsDNDSource; }. Bool_t IsDNDTarget() const; { return fDNDState & kIsDNDTarget; }. Bool_t HandlesDragAndDrop() const; Allow handling by the items themselves ... NOT USED in TGListTree yet !!!!. { return kFALSE; }. void HandleDrag(); {}. void HandleDrop(); {}. void SavePrimitive(ostream& , Option_t* , Int_t ); {}. » Author: Fons Rademakers 25/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGListTreeItem.html:5495,Clear,ClearColor,5495,root/html602/TGListTreeItem.html,https://root.cern,https://root.cern/root/html602/TGListTreeItem.html,1,['Clear'],['ClearColor']
Usability,const char * TEveCompoundProjected::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file TEveCompound.h. ◆ GetProjectedAsElement(). TEveElement * TEveCompoundProjected::GetProjectedAsElement ; (; ). inlineoverridevirtual . Returns this projected dynamic-casted to TEveElement. ; This is needed as class TEveProjected is used as secondary inheritance. ; Reimplemented from TEveProjected.; Definition at line 74 of file TEveCompound.h. ◆ IsA(). TClass * TEveCompoundProjected::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveCompound.; Definition at line 76 of file TEveCompound.h. ◆ operator=(). TEveCompoundProjected & TEveCompoundProjected::operator= ; (; const TEveCompoundProjected & ; ). private . ◆ SetMainColor(). void TEveCompoundProjected::SetMainColor ; (; Color_t ; color). overridevirtual . Revert back to the behaviour of TEveElement as color is propagated: . from projectable -> projected; from compound -> compound elements and we do not need to do this twice for projected-compound-elements. . Reimplemented from TEveCompound.; Definition at line 183 of file TEveCompound.cxx. ◆ Streamer(). void TEveCompoundProjected::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveCompound. ◆ StreamerNVirtual(). void TEveCompoundProjected::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file TEveCompound.h. ◆ UpdateProjection(). void TEveCompoundProjected::UpdateProjection ; (; ). inlineoverridevirtual . Implements TEveProjected.; Definition at line 73 of file TEveCompound.h. Libraries for TEveCompoundProjected:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveCompound.h; graf3d/eve/src/TEveCompound.cxx. TEveCompoundProjected. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompoundProjected.html:38371,Guid,Guide,38371,doc/master/classTEveCompoundProjected.html,https://root.cern,https://root.cern/doc/master/classTEveCompoundProjected.html,1,['Guid'],['Guide']
Usability,const char * f_domainDefinition civetweb.c:8500; read_auth_file_struct::f_userconst char * f_userDefinition civetweb.c:8499; read_auth_file_struct::domainconst char * domainDefinition civetweb.c:8497; read_auth_file_struct::bufchar buf[256+256+40]Definition civetweb.c:8498; read_auth_file_struct::ahstruct ah ahDefinition civetweb.c:8496; read_auth_file_struct::connstruct mg_connection * connDefinition civetweb.c:8495; socketDefinition civetweb.c:1894; socket::is_sslunsigned char is_sslDefinition civetweb.c:1898; socket::lsaunion usa lsaDefinition civetweb.c:1896; socket::ssl_redirunsigned char ssl_redirDefinition civetweb.c:1899; socket::sockSOCKET sockDefinition civetweb.c:1895; socket::in_useunsigned char in_useDefinition civetweb.c:1901; socket::rsaunion usa rsaDefinition civetweb.c:1897; ssl_funcDefinition openssl_dl.inl:94; ssl_func::ptrvoid(* ptr)(void)Definition openssl_dl.inl:97; ssl_func::nameconst char * nameDefinition openssl_dl.inl:95; ssl_func::requiredenum ssl_func_category requiredDefinition openssl_dl.inl:96; vecDefinition civetweb.c:1856; vec::lensize_t lenDefinition civetweb.c:1858; vec::ptrconst char * ptrDefinition civetweb.c:1857; websocket_client_thread_dataDefinition civetweb.c:18084; websocket_client_thread_data::close_handlermg_websocket_close_handler close_handlerDefinition civetweb.c:18087; websocket_client_thread_data::data_handlermg_websocket_data_handler data_handlerDefinition civetweb.c:18086; websocket_client_thread_data::connstruct mg_connection * connDefinition civetweb.c:18085; websocket_client_thread_data::callback_datavoid * callback_dataDefinition civetweb.c:18088; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; usaDefinition civetweb.c:1824; usa::sastruct sockaddr saDefinition civetweb.c:1825; usa::sinstruct sockaddr_in sinDefinition civetweb.c:1826; outputstatic void output(). nethttpcivetwebcivetweb.c. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:08:52 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:716440,Guid,Guide,716440,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['Guid'],['Guide']
Usability,"const char *);  Dump the Workspace content as configuration file. ;  ; RooAbsPdf * GetTotBkgPdf ();  Get the combined background pdf. ;  ; RooCategory * GetTotCategory ();  Get the combined dataset. ;  ; RooDataSet * GetTotDataSet ();  Get the combined dataset. ;  ; RooAbsPdf * GetTotSigBkgPdf ();  Get the combined signal plus background pdf. ;  ; RooWorkspace * GetWs ();  Get the RooWorkspace containing the models and variables. ;  ; TClass * IsA () const override;  ; int ProcessCard (const char *filename);  Process a configuration file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HLFactory.html:2110,Clear,Clear,2110,doc/master/classRooStats_1_1HLFactory.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HLFactory.html,1,['Clear'],['Clear']
Usability,"const char * ; hname, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Make a projection of a tree using selections. ; Depending on the value of varexp (described in Draw) a 1-D, 2-D, etc., projection of the tree will be filled in histogram hname. Note that the dimension of hname must match with the dimension of varexp. ; Definition at line 7498 of file TTree.cxx. ◆ Query(). TSQLResult * TTree::Query ; (; const char * ; varexp = """", . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Loop over entries and return a TSQLResult object containing entries following selection. ; Definition at line 7513 of file TTree.cxx. ◆ ReadFile(). Long64_t TTree::ReadFile ; (; const char * ; filename, . const char * ; branchDescriptor = """", . char ; delimiter = ' ' . ). virtual . Create or simply read branches from filename. ; if branchDescriptor = """" (default), it is assumed that the Tree descriptor is given in the first line of the file with a syntax like A/D:Table[2]/F:Ntracks/I:astring/C; F#define F(x, y, z); I#define I(x, y, z); otherwise branchDescriptor must be specified with the above syntax. If the type of the first variable is not specified, it is assumed to be ""/F""; If the type of any other variable is not specified, the type of the previous variable is assumed. eg; x:y:z (all variables are assumed of type ""F""); x/D:y:z (all variables are of type ""D""); x:y/D:z (x is type ""F"", y and z of type ""D""). delimiter allows for the use of another delimiter besides whitespace. This provides support for direct import of common data file formats like csv. If delimiter != ' ' and branchDescriptor == """", then the branch description is taken from the first line in the file, but delimiter is used for the branch names tokenization rather than ':'. Note however that if the values in the fir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:195371,simpl,simply,195371,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['simpl'],['simply']
Usability,"const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCachedPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:57815,clear,clearEvalErrorLog,57815,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,6,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool checkSyntax (const char *arg);  Perform basic syntax on given factory expression. ;  ; void clearError ();  Associated workspace. ;  ; Int_t errorCount ();  ; std::string processAliasExpression (const char *arg);  Parse token. ;  ; std::string processCompositeExpression (const char *arg);  Process a single composite expression. ;  ; std::string processCreateArg (std::string &func, std::vector< std::string > &args);  Glue function between high-level syntax and low-level factory call to createArg: Process a parsed call to create a pdf named func ;  ; std::string processCreateVar (std::string &func, std::vector< std::string > &args);  Glue function between high-level syntax and low-level factory call to createVariable: Process a parsed call to create a variable named func ;  ; std::string processListExpression (const char *arg);  Process a list of high-level expression. ;  ; std::string processMetaArg (std::string &func, std::vector< std::string > &args);  Concatenate list of args into comma separated string. ;  ; std::string processSingleExpression (const char *arg);  Process a single high-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:17817,clear,clearError,17817,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['clear'],['clearError']
Usability,"const char * GetElementTitle () const;  Virtual function for retrieving title of the render-element. ;  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloData.html:13244,feedback,feedback,13244,doc/master/classTEveCaloData.html,https://root.cern,https://root.cern/doc/master/classTEveCaloData.html,3,['feedback'],['feedback']
Usability,"const char* method) const; static voidAddClass(TClass* cl); voidAddImplFile(const char* filename, int line); voidAddInstance(Bool_t heap = kFALSE); voidAddRef(TClassRef* ref); voidAdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidAdoptReferenceProxy(TVirtualRefProxy* proxy); voidAdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidAdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Int_tAutoBrowse(TObject* obj, TBrowser* browser); virtual voidBrowse(TBrowser* b); Int_tBrowse(void* obj, TBrowser* b) const; voidBuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidBuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidCalculateStreamerOffset() const; Bool_tCallShowMembers(void* obj, TMemberInspector& insp, char* parent, Int_t isATObject = -1) const; Bool_tCanIgnoreTObjectStreamer(); Bool_tCanSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyCollectionProxy(const TVirtualCollectionProxy&); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteArray(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:2268,Clear,Clear,2268,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,1,['Clear'],['Clear']
Usability,"const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:6906,Simpl,SimpleIntervalRooStats,6906,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleIntervalRooStats']
Usability,"const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:2048,Clear,ClearData,2048,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,6,['Clear'],['ClearData']
Usability,"const char* s2, Ssiz_t ls2); Find & Replace ls1 symbols of s1 with ls2 symbols of s2 if any. TString & Remove(TString::EStripType s, char c); Remove char c at begin and/or end of string (like Strip() but; modifies directly the string. void Resize(Ssiz_t n); Resize the string. Truncate or add blanks as necessary. TSubString Strip(TString::EStripType s = kTrailing, char c = ' ') const; Return a substring of self stripped at beginning and/or end. void ToLower(); Change string to lower-case. void ToUpper(); Change string to upper case. char& operator[](Ssiz_t i); Return charcater at location i. void AssertElement(Ssiz_t nc) const; Check to make sure a string index is in range. TString(const char* a1, Ssiz_t n1, const char* a2, Ssiz_t n2); Special constructor to initialize with the concatenation of a1 and a2. Ssiz_t AdjustCapacity(Ssiz_t nc); Calculate a nice capacity greater than or equal to nc. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(); Make string a distinct copy; preserve previous contents. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least nc.; Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TString.html:12076,Clear,Clear,12076,root/html528/TString.html,https://root.cern,https://root.cern/root/html528/TString.html,1,['Clear'],['Clear']
Usability,"const char* selExpr = 0, const char* wgtVarName = 0); RooTreeDataStore(const char* name, const char* title, RooAbsDataStore& tds, const RooArgSet& vars, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t, const char* wgtVarName = 0); virtual~RooTreeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidcheckInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTreeDataStore.html:2404,Clear,Clear,2404,root/html526/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html526/RooTreeDataStore.html,3,['Clear'],['Clear']
Usability,"const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); TGCompositeFrame*StartEmbedding(); TEveWindowFrame*StopEmbedding(const char* name = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowSlot.html:16937,Undo,UndockWindow,16937,root/html528/TEveWindowSlot.html,https://root.cern,https://root.cern/root/html528/TEveWindowSlot.html,6,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char[] path); ""path"" should be initialized with a colon separated list of; system directories. c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:8093,Clear,ClearPragmas,8093,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['Clear'],['ClearPragmas']
Usability,"const override;  Return hash value for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileSysRoot.html:2259,Clear,Clear,2259,doc/master/classTHtml_1_1TFileSysRoot.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysRoot.html,1,['Clear'],['Clear']
Usability,"const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 490 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 708 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 655 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 779 of file RConversionRuleParser.cxx. Variable Documentation. ◆ gCoreMutex. ROOT::TVirtualRWMutex * ROOT::gCoreMutex = nullptr. Definition at line 37 of file TVirtualRWMutex.h. ◆ gReadRawRules. SchemaRuleClassMap_t ROOT::gReadRawRules. Definition at line 25 of file RConversionRuleParser.h. ◆ gReadRules. SchemaRuleClassMap_t ROOT::gReadRules. Definition at line 24 of file RConversionRuleParser.h. ◆ instead. int Use the overload accepting RCompressionSetting::EAlgorithm ROOT::instead. Definition at line 131 of file Compression.h. ◆ newRQt5CreatorReg. struct ROOT::RQt5CreatorReg ROOT::newRQt5CreatorReg. ◆ newRQt6CreatorReg. struct ROOT::RQt6CreatorReg ROOT::newRQt6CreatorReg. ROOT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:46979,Guid,Guide,46979,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,1,['Guid'],['Guide']
Usability,"const std::string &fprefix="""");  Configures recording of communication data in protocol file Provided filename will be used to store JSON array with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ;  ; void SetClientVersion (const std::string &vers);  Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ;  ; void SetConnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for new connection. ;  ; void SetConnLimit (unsigned lmt=0);  Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ;  ; void SetConnToken (const std::string &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:6873,clear,cleared,6873,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['clear'],['cleared']
Usability,"const unsigned ; ). inlinestaticconstexprprotected . If VecCore is not defined, there is no vectorization available and the SIMD vector size will always be one. ; Then, as every number is a multiple of SIMD vector size, the padding will always be zero. ; Definition at line 372 of file FitData.h. Member Data Documentation. ◆ fCoords. std::vector< std::vector< double > > ROOT::Fit::FitData::fCoords. private . This vector stores the vectorizable data: The inner vectors contain the coordinates data fCoords[0] is the vector for the x-coords fCoords[1] is the vector for the y-coords etc. ; The vector of pointers stores the pointers to the first elements of the corresponding elements; If fWrapped is true, fCoords is empty. the data can only be accessed by using fCoordsPtr. ; Definition at line 403 of file FitData.h. ◆ fCoordsPtr. std::vector< const double * > ROOT::Fit::FitData::fCoordsPtr. private . Definition at line 404 of file FitData.h. ◆ fDim. unsigned int ROOT::Fit::FitData::fDim. protected . Definition at line 386 of file FitData.h. ◆ fMaxPoints. unsigned int ROOT::Fit::FitData::fMaxPoints. protected . Definition at line 384 of file FitData.h. ◆ fNPoints. unsigned int ROOT::Fit::FitData::fNPoints. protected . Definition at line 385 of file FitData.h. ◆ fOptions. DataOptions ROOT::Fit::FitData::fOptions. private . Definition at line 380 of file FitData.h. ◆ fpTmpCoordVector. double* ROOT::Fit::FitData::fpTmpCoordVector. private . Definition at line 406 of file FitData.h. ◆ fRange. DataRange ROOT::Fit::FitData::fRange. private . Definition at line 381 of file FitData.h. ◆ fWrapped. bool ROOT::Fit::FitData::fWrapped. protected . Definition at line 376 of file FitData.h. Libraries for ROOT::Fit::FitData:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/FitData.h; math/mathcore/src/FitData.cxx. ROOTFitFitData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html:15081,Guid,Guide,15081,doc/master/classROOT_1_1Fit_1_1FitData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitData.html,1,['Guid'],['Guide']
Usability,"const. Counts the number of different key values. Bool_t FillIndexArray(). File the array of the pointers and check whether; the original table has been sorted to avoid an extra job. Return: kTRUE - the table has been sorted; kFALSE - otherwise. Int_t FindFirstKey(const void* key) const. Looks for the first index of the ""key""; within SORTED table AFTER sorting. Returns: = -1 if the ""key"" was not found. Note: This method has no sense for; ==== the float and double key. To get the index within the original; unsorted table the GetIndex() method; may be used like this:; GetIndex(FindFirstKey(key)). const char * GetTableName() const; to be documented. const char * GetTableTitle() const; to be documented. const char * GetTableType() const; to be documented. TTable * GetTable() const; to be documented. void SetSearchMethod(); Select search function at once. void QSort(); Call the standard C run-time library ""qsort"" function. void LearnTable(). LearnTable() allows the TTableSorter to learn the structure of the; tables used to fill the ntuple.; table - the name of the table; buildTree - if kTRUE, then add TBranches to the TTree for each table; column (default=kFALSE). const char * At(Int_t i) const; {return fFirstParentRow + i*fParentRowSize;}. Long_t GetRowSize(); { return fParentRowSize; }. Int_t operator[](Int_t value) const; { return BSearch(value); }. Int_t operator[](Long_t value) const; { return BSearch(value); }. Int_t operator[](Double_t value) const; { return BSearch(value); }. Int_t operator[](void* value) const; { return BSearch(value); }. Int_t operator()(Float_t value); { return BinarySearch(value); }. Int_t operator()(Int_t value); { return BinarySearch(value); }. Int_t operator()(Long_t value); { return BinarySearch(value); }. Int_t operator()(Double_t value); { return BinarySearch(value); }. TTableSorter(const TTableSorter& ). TTableSorter & operator=(const TTableSorter& ). int CompareFloat_t(const void** , const void** ). int CompareInt_t(const void** , con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTableSorter.html:19247,Learn,LearnTable,19247,root/html534/TTableSorter.html,https://root.cern,https://root.cern/root/html534/TTableSorter.html,6,"['Learn', 'learn']","['LearnTable', 'learn']"
Usability,"const. Counts the number of different key values. Bool_t FillIndexArray(). File the array of the pointers and check whether; the original table has been sorted to avoid an extra job. Return: kTRUE - the table has been sorted; kFALSE - otherwise. Int_t FindFirstKey(const void* key) const. Looks for the first index of the ""key""; within SORTED table AFTER sorting. Returns: = -1 if the ""key"" was not found. Note: This method has no sense for; ==== the float and double key. To get the index within the original; unsorted table the GetIndex() method; may be used like this:; GetIndex(FindFirstKey(key)). const char * GetTableName() const; to be documented. const char * GetTableTitle() const; to be documented. const char * GetTableType() const; to be documented. TTable * GetTable() const; to be documented. void SetSearchMethod(); Select search function at once. void QSort(); Call the standard C run-time library ""qsort"" function. void LearnTable(). LearnTable() allows the TTableSorter to learn the structure of the; tables used to fill the ntuple.; table - the name of the table; buildTree - if kTRUE, then add TBranches to the TTree for each table; column (default=kFALSE). const char * At(Int_t i) const; {return fFirstParentRow + i*fParentRowSize;}. Long_t GetRowSize(); { return fParentRowSize; }. Int_t operator[](Int_t value) const; { return BSearch(value); }. Int_t operator[](Long_t value) const; { return BSearch(value); }. Int_t operator[](Double_t value) const; { return BSearch(value); }. Int_t operator[](void* value) const; { return BSearch(value); }. Int_t operator()(Float_t value); { return BinarySearch(value); }. Int_t operator()(Int_t value); { return BinarySearch(value); }. Int_t operator()(Long_t value); { return BinarySearch(value); }. Int_t operator()(Double_t value); { return BinarySearch(value); }. int CompareFloat_t(const void** , const void** ). int CompareInt_t(const void** , const void** ). int CompareLong_t(const void** , const void** ). int CompareULong_t(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:19149,Learn,LearnTable,19149,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,6,"['Learn', 'learn']","['LearnTable', 'learn']"
Usability,"const. overridevirtual . Return value of chosen coefficient. ; Implements RooAbsReal.; Definition at line 76 of file RooConvCoefVar.cxx. ◆ getAnalyticalIntegral(). Int_t RooConvCoefVar::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Return analytical integration capabilities of chosen coefficient. ; Reimplemented from RooAbsReal.; Definition at line 86 of file RooConvCoefVar.cxx. ◆ getValV(). double RooConvCoefVar::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return value of chosen coefficient. ; Reimplemented from RooAbsReal.; Definition at line 66 of file RooConvCoefVar.cxx. ◆ IsA(). TClass * RooConvCoefVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooConvCoefVar.h. ◆ Streamer(). void RooConvCoefVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooConvCoefVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file RooConvCoefVar.h. Member Data Documentation. ◆ _coefIdx. Int_t RooConvCoefVar::_coefIdx. protected . Index code of the coefficient. ; Definition at line 48 of file RooConvCoefVar.h. ◆ _convPdf. RooRealProxy RooConvCoefVar::_convPdf. protected . RooAbsAnaConv object implementing our coefficient. ; Definition at line 47 of file RooConvCoefVar.h. ◆ _varSet. RooSetProxy RooConvCoefVar::_varSet. protected . Not used anymore? ; Definition at line 46 of file RooConvCoefVar.h. Libraries for RooConvCoefVar:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooConvCoefVar.h; roofit/roofitcore/src/RooConvCoefVar.cxx. RooConvCoefVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvCoefVar.html:63885,Guid,Guide,63885,doc/master/classRooConvCoefVar.html,https://root.cern,https://root.cern/doc/master/classRooConvCoefVar.html,1,['Guid'],['Guide']
Usability,"const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHScrollBar.html:15081,Clear,ClearFlags,15081,root/html528/TGHScrollBar.html,https://root.cern,https://root.cern/root/html528/TGHScrollBar.html,8,['Clear'],['ClearFlags']
Usability,"const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooIntegralMorph.html:6532,clear,clearValueAndShapeDirty,6532,root/html532/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html532/RooIntegralMorph.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:4911,clear,clearValueDirty,4911,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:4911,clear,clearValueDirty,4911,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"const; Should always return false, unless you can highlight selected object in pad. void PushTopLevelSelectable(TObject* top); Does nothing, unless you implement your own picking.; When complex object containing sub-objects (which can be picked); is painted in a pad, this ""top-level"" object is pushed into; the selectables stack. void PushSelectableObject(TObject* obj); Does nothing, unless you implement your own picking.; ""Complete"" object, or part of complex object, which; can be picked. void PopTopLevelSelectable(); Does nothing, unless you implement your own picking.; Remove top level selectable and all its' children. void * GetSender(); { return this; }. void AbsCoordinates(Bool_t set). Double_t AbsPixeltoX(Int_t px). Double_t AbsPixeltoY(Int_t py). void AddExec(const char* name, const char* command). TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"). TVirtualPad* cd(Int_t subpadnumber = 0). void Clear(Option_t* option = """"). void Close(Option_t* option = """"). void CopyPixmap(). void CopyPixmaps(). void DeleteExec(const char* name). void Divide(Int_t nx = 1, Int_t ny = 1, Float_t xmargin = 0.01, Float_t ymargin = 0.01, Int_t color = 0). void Draw(Option_t* option = """"). void DrawClassObject(const TObject* obj, Option_t* option = """"). TH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char* title = """"). void ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis). Short_t GetBorderMode() const. Short_t GetBorderSize() const. Int_t GetCanvasID() const. TCanvasImp * GetCanvasImp() const. TCanvas * GetCanvas() const. TVirtualPad * GetVirtCanvas() const. Int_t GetEvent() const. Int_t GetEventX() const. Int_t GetEventY() const. TFrame * GetFrame(). Color_t GetHighLightColor() const. Int_t GetNumber() const. void GetRange(Double_t& x1, Double_t& y1, Double_t& x2, Double_t& y2). void GetRangeAxis(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPad.html:22824,Clear,Clear,22824,root/html534/TVirtualPad.html,https://root.cern,https://root.cern/root/html534/TVirtualPad.html,1,['Clear'],['Clear']
Usability,"const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGaussModel.html:3173,Clear,Clear,3173,root/html532/RooGaussModel.html,https://root.cern,https://root.cern/root/html532/RooGaussModel.html,3,['Clear'],['Clear']
Usability,"const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGaussModel.html:3173,Clear,Clear,3173,root/html528/RooGaussModel.html,https://root.cern,https://root.cern/root/html528/RooGaussModel.html,6,['Clear'],['Clear']
Usability,"const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCopy(TObject&) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGView::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); static FontStruct_tGetDefaultFontStruct(); static const TGGC&GetDefaultGC(); static const TGGC&GetDefaultSelectedBackgroundGC(); static const TGGC&GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidHLayout(); voidInit(Pixel_t bg); virtual Bool_tTGView::ItemLayout(); voidTObject::MakeZombie(); virtual voidMark(Long_t xPos, Long_t yPos); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidUnMark(); virtual voidTGView::UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidVLayout(). private:. TGTextView&operator=(const TGTextView&); TGTextView(const TGTextView&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextView.html:17718,Clear,ClearFlags,17718,root/html602/TGTextView.html,https://root.cern,https://root.cern/root/html602/TGTextView.html,2,['Clear'],['ClearFlags']
Usability,"const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&basisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:4351,Clear,Clear,4351,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,1,['Clear'],['Clear']
Usability,"const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidCenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTransientFrame.html:2653,Clear,Clear,2653,root/html528/TGTransientFrame.html,https://root.cern,https://root.cern/root/html528/TGTransientFrame.html,6,['Clear'],['Clear']
Usability,"const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidDrawBox(Int_t x, Int_t y, UInt_t width, UInt_t height); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidMoveResizeIt(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMdiWinResizer.html:13941,Clear,ClearFlags,13941,root/html528/TGMdiWinResizer.html,https://root.cern,https://root.cern/root/html528/TGMdiWinResizer.html,4,['Clear'],['ClearFlags']
Usability,"const; virtual voidTH1::Add(const TH1* h1, Double_t c1 = 1); virtual voidTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayF::AddAt(Float_t c, Int_t i); virtual voidTH1::AddBinContent(Int_t bin); virtual voidTH1::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::DrawPanel()MENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1K.html:2070,Clear,Clear,2070,root/html528/TH1K.html,https://root.cern,https://root.cern/root/html528/TH1K.html,3,['Clear'],['Clear']
Usability,"const;  ; size_t GetNoElements () const;  ; size_t GetNrows () const;  ; AFloat * GetRawDataPointer ();  Return raw pointer to the elements stored contiguously in column-major order. ;  ; const AFloat * GetRawDataPointer () const;  ; size_t GetSize () const;  ; template<typename Function_t > ; void Map (Function_t &f);  Map the given function over the matrix elements. ;  ; template<typename Function_t > ; void MapFrom (Function_t &f, const TCpuMatrix &A);  Same as maps but takes the input values from the matrix A and writes the results in this matrix. ;  ;  operator TMatrixT () const;  Convert to a TMatrixT<AFloat_t> object. ;  ; AFloat & operator() (size_t i, size_t j);  ; AFloat operator() (size_t i, size_t j) const;  Return matrix element in row i and column j. ;  ; TCpuMatrix & operator= (const TCpuMatrix &)=default;  ; TCpuMatrix< AFloat > & operator= (const TMatrixT< AFloat > &);  copy from a TMAtrixT . ;  ; TCpuMatrix & operator= (TCpuMatrix &&)=default;  ; void Print () const;  ; void Zero ();  Clear content of the matrix and initialize to zero elements. ;  . Static Public Member Functions; static size_t GetNWorkItems (size_t nelements);  ; static const AFloat * GetOnePointer ();  ; static size_t GetOnePointerSize ();  ; static Executor & GetThreadExecutor ();  ; static void InitializeOneVector (size_t n);  . Public Attributes; TCpuBuffer< AFloat > fBuffer;  The buffer holding the matrix elements in column-major format. ;  . Private Member Functions; void Initialize ();  . Private Attributes; size_t fNCols;  ; size_t fNRows;  . Static Private Attributes; static std::vector< AFloat > fOnes {};  Vector filled with ones used for BLAS calls. ;  . #include <TMVA/DNN/Architectures/Cpu/CpuMatrix.h>; Constructor & Destructor Documentation. ◆ TCpuMatrix() [1/6]. template<typename AFloat > . TMVA::DNN::TCpuMatrix< AFloat >::TCpuMatrix ; (; ). inline . Definition at line 116 of file CpuMatrix.h. ◆ TCpuMatrix() [2/6]. template<typename AReal > . TMVA::DNN::TCpuMatrix< A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html:2949,Clear,Clear,2949,doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,1,['Clear'],['Clear']
Usability,"const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Process (const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the TSelector code in the specified filename. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the code in the specified selector. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:18184,simpl,simply,18184,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,3,['simpl'],['simply']
Usability,"const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Process (const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the TSelector code in the specified filename. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the code in the specified selector. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:17191,simpl,simply,17191,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,1,['simpl'],['simply']
Usability,"const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Process (const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the TSelector code in the specified filename. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the code in the specified selector. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:18481,simpl,simply,18481,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,2,['simpl'],['simply']
Usability,constexpr . ReturnsVersion of this class ; Definition at line 327 of file TStreamerElement.h. ◆ DeclFileName(). static const char * TStreamerObjectAny::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 327 of file TStreamerElement.h. ◆ GetInclude(). const char * TStreamerObjectAny::GetInclude ; (; ); const. overridevirtual . Return the proper include for this element. ; Reimplemented from TStreamerElement.; Definition at line 1357 of file TStreamerElement.cxx. ◆ GetSize(). Int_t TStreamerObjectAny::GetSize ; (; ); const. overridevirtual . Returns size of anyclass in bytes. ; Reimplemented from TStreamerElement.; Definition at line 1372 of file TStreamerElement.cxx. ◆ Init(). void TStreamerObjectAny::Init ; (; TVirtualStreamerInfo * ; obj = nullptr). overridevirtual . Setup the element. ; Reimplemented from TStreamerElement.; Definition at line 1346 of file TStreamerElement.cxx. ◆ IsA(). TClass * TStreamerObjectAny::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TStreamerElement.; Definition at line 327 of file TStreamerElement.h. ◆ operator=(). TStreamerObjectAny & TStreamerObjectAny::operator= ; (; const TStreamerObjectAny & ; ). privatedelete . ◆ Streamer(). void TStreamerObjectAny::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerObjectAny. ; Reimplemented from TStreamerElement.; Definition at line 1384 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerObjectAny::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 327 of file TStreamerElement.h. Libraries for TStreamerObjectAny:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerObjectAny. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObjectAny.html:19903,Guid,Guide,19903,doc/master/classTStreamerObjectAny.html,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAny.html,1,['Guid'],['Guide']
Usability,"constexpr Double_t C()Velocity of light in .Definition TMath.h:114; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::Kconstexpr Double_t K()Boltzmann's constant in : .Definition TMath.h:247; TMath::Sqrt2constexpr Double_t Sqrt2()Definition TMath.h:86; TMath::Econstexpr Double_t E()Base of natural log: .Definition TMath.h:93; TMath::Sigmaconstexpr Double_t Sigma()Stefan-Boltzmann constant in : .Definition TMath.h:270; TMath::Hconstexpr Double_t H()Planck's constant in : .Definition TMath.h:188; TMath::LogEconstexpr Double_t LogE()Base-10 log of e (to convert ln to log)Definition TMath.h:107; TMath::Ln10constexpr Double_t Ln10()Natural log of 10 (to convert log to ln)Definition TMath.h:100; TMath::EulerGammaconstexpr Double_t EulerGamma()Euler-Mascheroni Constant.Definition TMath.h:332; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::Rconstexpr Double_t R()Universal gas constant ( ) inDefinition TMath.h:302; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::InfinityDouble_t Infinity()Returns an infinity as defined by the IEEE standard.Definition TMath.h:917; v@ vDefinition rootcling_impl.cxx:3699; TFormulaParamOrder::operator()bool operator()(const TString &a, const TString &b) constDefinition TFormula.cxx:375; TInterpreter::CallFuncIFacePtr_t::Generic_tvoid(* Generic_t)(void *, int, void **, void *)Definition TInterpreter.h:90; TInterpreter::CallFuncIFacePtr_t::fGenericGeneric_t fGenericDefinition TInterpreter.h:105; mTMarker mDefinition textangle.C:8; TFormula.h. histhistsrcTFormula.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:172078,Guid,Guide,172078,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['Guid'],['Guide']
Usability,"constructor.Definition TGraph.cxx:108; TGraph::CopyPointsvirtual Bool_t CopyPoints(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin)Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin !...Definition TGraph.cxx:779; TGraph::fMaximumDouble_t fMaximumMaximum value for plotting along y.Definition TGraph.h:52; TGraph::GetErrorXhighvirtual Double_t GetErrorXhigh(Int_t bin) constIt always returns a negative value.Definition TGraph.cxx:1378; TGraph::operator=TGraph & operator=(const TGraph &)Equal operator for this graph.Definition TGraph.cxx:232; TGraph::InitPolynomvirtual void InitPolynom(Double_t xmin=0, Double_t xmax=0)Compute Initial values of parameters for a polynom.Definition TGraph.cxx:1679; TGraph::GetErrorXvirtual Double_t GetErrorX(Int_t bin) constIt always returns a negative value. Real implementation in TGraphErrors.Definition TGraph.cxx:1361; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TSplineBase class for spline implementation containing the Draw/Paint methods.Definition TSpline.h:31; TStringBasic string class.Definition TString.h:139; TVectorTTVectorT.Definition TVectorT.h:27; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; f1TF1 * f1Definition legend1.C:11; Drawth1 Draw(); mTMarker mDefinition textangle.C:8. histhistincTGraph.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8h_source.html:31607,Guid,Guide,31607,doc/master/TGraph_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8h_source.html,1,['Guid'],['Guide']
Usability,"content of log file. ;  ; std::string NewWidgetMsg (std::shared_ptr< RBrowserWidget > &widget);  Create message which send to client to create new widget. ;  ; std::string ProcessBrowserRequest (const std::string &msg);  Process browser request. ;  ; std::string ProcessDblClick (unsigned connid, std::vector< std::string > &args);  Process dbl click on browser item. ;  ; void ProcessMsg (unsigned connid, const std::string &arg);  Process received message from the client. ;  ; void ProcessPostponedRequests ();  Process postponed requests - decouple from websocket handling Only requests which can take longer time should be postponed. ;  ; void ProcessRunMacro (const std::string &file_path);  Process run macro command in the editor. ;  ; void ProcessSaveFile (const std::string &fname, const std::string &content);  Process file save command in the editor. ;  ; void SendInitMsg (unsigned connid);  Process client connect. ;  ; void SendProgress (unsigned connid, float progr);  Send generic progress message to the web window Should show progress bar on client side. ;  . Protected Attributes; std::string fActiveWidgetName;  ! name of active widget ;  ; RBrowserData fBrowsable;  ! central browsing element ;  ; bool fCatchWindowShow {true};  ! if arbitrary RWebWindow::Show calls should be catched by browser ;  ; unsigned fConnId {0};  ! default connection id ;  ; float fLastProgressSend {0};  ! last value of send progress ;  ; long long fLastProgressSendTm {0};  ! time when last progress message was send ;  ; std::vector< std::vector< std::string > > fPostponed;  ! postponed messages, handled in timer ;  ; std::string fPromptFileOutput;  ! file name for prompt output ;  ; std::unique_ptr< RBrowserTimer > fTimer;  ! timer to handle postponed requests ;  ; std::string fTitle;  ! title ;  ; bool fUseRCanvas {false};  ! which canvas should be used ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to browser ;  ; int fWidgetCnt {0};  ! counter for created widgets ;  ; std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowser.html:3608,progress bar,progress bar,3608,doc/v632/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html,2,['progress bar'],['progress bar']
Usability,"copy it in gProgName.Definition TSystem.cxx:226; TSystem::GetBuildArchvirtual const char * GetBuildArch() constReturn the build architecture.Definition TSystem.cxx:3875; TSystem::Abortvirtual void Abort(int code=0)Abort the application.Definition TSystem.cxx:725; TSystem::RemoveTimervirtual TTimer * RemoveTimer(TTimer *t)Remove timer from list of system timers.Definition TSystem.cxx:481; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TTimer::Resetvoid Reset()Reset the timer.Definition TTimer.cxx:159; TUrlThis class represents a WWW compatible URL.Definition TUrl.h:33; TUrl::GetUrlconst char * GetUrl(Bool_t withDeflt=kFALSE) constReturn full URL.Definition TUrl.cxx:390; TUrl::GetFileAndOptionsconst char * GetFileAndOptions() constReturn the file and its options (the string specified behind the ?).Definition TUrl.cxx:504; TUrl::GetFileconst char * GetFile() constDefinition TUrl.h:69; TUrl::GetProtocolconst char * GetProtocol() constDefinition TUrl.h:64; TVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level,...Definition TVirtualX.h:46; bool; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::EnableThreadSafetyvoid EnableThreadSafety()Enable support for multi-threading within the ROOT code in particular, enables the global mutex to ma...Definition TROOT.cxx:501; TClassEdit::GetUnqualifiedNameconst char * GetUnqualifiedName(const char *name)Return the start of the unqualified name include in 'original'.Definition TClassEdit.cxx:942. corebasesrcTApplication.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:108776,Guid,Guide,108776,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['Guid'],['Guide']
Usability,"cord a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:25828,learn,learning,25828,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,2,['learn'],['learning']
Usability,"cord a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void SetImplicitMT (bool enabled);  ; ROOT::TIOFeatures SetIOFeatures (const ROOT::TIOFeatures &);  Provide the end-user with the ab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:26767,learn,learning,26767,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,1,['learn'],['learning']
Usability,"cordDecl(clang::QualType type)Definition TClingUtils.cxx:2828; ROOT::TMetaUtils::Errorvoid Error(const char *location, const char *fmt,...)Definition TClingUtils.h:840; ROOT::TMetaUtils::Infovoid Info(const char *location, const char *fmt,...)Definition TClingUtils.h:860; ROOT::TMetaUtils::GetClassVersionint GetClassVersion(const clang::RecordDecl *cl, const cling::Interpreter &interp)Return the version number of the class or -1 if the function Class_Version does not exist.Definition TClingUtils.cxx:2572; ROOT::TMetaUtils::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, const clang::QualType &type, const cling::Interpreter &interpreter, const TNormalizedCtxt &normCtxt)Return the type name normalized for ROOT, keeping only the ROOT opaque typedef (Double32_t,...Definition TClingUtils.cxx:4049; ROOT::TMetaUtils::IsStdClassbool IsStdClass(const clang::RecordDecl &cl)Return true, if the decl is part of the std namespace.Definition TClingUtils.cxx:4453; ROOT::TMetaUtils::GetNameTypeForIOstd::pair< std::string, clang::QualType > GetNameTypeForIO(const clang::QualType &templateInstanceType, const cling::Interpreter &interpreter, const TNormalizedCtxt &normCtxt, TClassEdit::EModType mode=TClassEdit::kNone)Definition TClingUtils.cxx:4106; ROOT::TMetaUtils::Warningvoid Warning(const char *location, const char *fmt,...)Definition TClingUtils.h:870; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; SelectionRulesUtils::areEqual< ClassSelectionRule >bool areEqual< ClassSelectionRule >(const ClassSelectionRule *r1, const ClassSelectionRule *r2, bool moduloNameOrPattern)Definition SelectionRules.h:75; clangDefinition BaseSelectionRule.h:29; v@ vDefinition rootcling_impl.cxx:3699; RScanner::DelayedAnnotatedRecordDeclInfoDefinition Scanner.h:135. coredictgensrcScanner.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Scanner_8cxx_source.html:53900,Guid,Guide,53900,doc/master/Scanner_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Scanner_8cxx_source.html,1,['Guid'],['Guide']
Usability,corder/replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class ; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summury information ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:120772,pause,paused,120772,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['pause'],['paused']
Usability,"count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 3547 evalErrorData().errorList.clear() ;; 3548 } else {; 3549 evalErrorData().count = 0 ;; 3550 }; 3551}; 3552 ; 3553 ; 3554////////////////////////////////////////////////////////////////////////////////; 3555/// Retrieve bin boundaries if this distribution is binned in `obs`.; 3556/// \param[in] obs Observable to retrieve boundaries for.; 3557/// \param[in] xlo Beginning of range.; 3558/// \param[in] xhi End of range.; 3559/// \return The caller owns the returned std::list.; 3560std::list<double>* RooAbsReal::binBoundaries(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565////////////////////////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:151609,clear,clear,151609,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['clear'],['clear']
Usability,counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401d_FeldmanCousins.C;   Neutrino Oscillation Example from Feldman & Cousins ;  ; file  rs601_HLFactoryexample.C;   High Level Factory: creation of a simple model ;  ; file  rs601_HLFactoryexample.py;   High Level Factory: creation of a simple model ;  ; file  rs602_HLFactoryCombinationexample.C;   High Level Factory: creation of a combined model ;  ; file  rs603_HLFactoryElaborateExample.C;   High Level Factory: creating a complex combined model. ;  ; file  rs701_BayesianCalculator.C;   Bayesian calculator: basic example ;  ; file  rs701_BayesianCalculator.py;   Bayesian calculator: basic example ;  ; file  rs_bernsteinCorrection.C;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_bernsteinCorrection.py;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_numberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; fil,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roostats.html:2188,simpl,simple,2188,doc/master/group__tutorial__roostats.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html,1,['simpl'],['simple']
Usability,"course Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . . Getting Started. . Reference Guide. . Forum. . Gallery.  ; ROOT is ...; A modular scientific software toolkit. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other languages such as Python and R.Start from examples or try it in your browser!;  . Download ROOT; or Read More ... . . . Previous. Pause. Next. Under the Spotlight. 2019-02-02 ; Full Totem Analysis based on RDataFrame and distributed on a big Spark cluster with PyRDF! ; Milosz Blaszkiewicz and Aleksandra Mnich (AGH University of Science and Technology - Poland) wanted to evaluate a set of Big Data tools for the analysis of the data from the TOTEM experiment which will enable interactive or semi-interactive work with large amounts of data. . 2018-01-17 ; ROOT Users' Workshop 2018 ; The ROOT team would like to invite you to the 11th ROOT Users' Workshop. . 2017-08-03 ; The ROOT Docker container (alpha version) ; Do you like Docker? Would you like to use ROOT? We provide an alpha version of the ROOT Docker container!; . 2016-09-05 ; Get the most out of the ROOT tutorials! ; All ROOT tutorials are now available as ROOTBooks which can be statically visualized via NBViewer or interactively explored with SWAN.; . . Other News. 2019-01-30 ; More tests, more benchmarks! . 2019-01-30 ; Better argument parsing . 2019-01-30 ; Tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/index.html:2271,Pause,Pause,2271,d/index.html,https://root.cern,https://root.cern/d/index.html,1,['Pause'],['Pause']
Usability,"cout<<""\n*ERROR<TLatex>: ""<<fError<<std::endl;; 2618 std::cout<<""==> ""<<GetTitle()<<std::endl;; 2619 return;; 2620 }; 2621 fError = nullptr;; 2622 ; 2623 if (angle) {; 2624 Int_t cBoxX[4], cBoxY[4];; 2625 Int_t ptx, pty;; 2626 if (TestBit(kTextNDC)) {; 2627 ptx = gPad->UtoPixel(fX);; 2628 pty = gPad->VtoPixel(fY);; 2629 } else {; 2630 ptx = gPad->XtoAbsPixel(gPad->XtoPad(fX));; 2631 pty = gPad->YtoAbsPixel(gPad->YtoPad(fY));; 2632 }; 2633 GetControlBox(ptx, pty, fTextAngle, cBoxX, cBoxY);; 2634 Int_t x1 = cBoxX[0];; 2635 Int_t x2 = cBoxX[0];; 2636 Int_t y1 = cBoxY[0];; 2637 Int_t y2 = cBoxY[0];; 2638 for (Int_t i=1; i<4; i++) {; 2639 if (cBoxX[i] < x1) x1 = cBoxX[i];; 2640 if (cBoxX[i] > x2) x2 = cBoxX[i];; 2641 if (cBoxY[i] < y1) y1 = cBoxY[i];; 2642 if (cBoxY[i] > y2) y2 = cBoxY[i];; 2643 }; 2644 w = x2-x1;; 2645 h = y2-y1;; 2646 } else {; 2647 const Char_t *text = newText.Data() ;; 2648 TLatexFormSize fs = FirstParse(GetTextAngle(),GetTextSize(),text);; 2649 fTabSize.clear();; 2650 w = (UInt_t)fs.Width();; 2651 h = (UInt_t)fs.Height();; 2652 }; 2653}; 2654 ; 2655////////////////////////////////////////////////////////////////////////////////; 2656/// Return size of the formula along Y in pad coordinates when the text precision; 2657/// is smaller than 3.; 2658 ; 2659Double_t TLatex::GetYsize(); 2660{; 2661 if (!gPad) return 0.;; 2662 TString newText = GetTitle();; 2663 if( newText.Length() == 0) return 0;; 2664 ; 2665 // The text is a TMathText.; 2666 if ( newText.Contains(""\\"") ) {; 2667 TMathText tm(0., 0., newText.Data());; 2668 return tm.GetYsize();; 2669 }; 2670 ; 2671 fError = nullptr;; 2672 if (CheckLatexSyntax(newText)) {; 2673 std::cout<<""\n*ERROR<TLatex>: ""<<fError<<std::endl;; 2674 std::cout<<""==> ""<<GetTitle()<<std::endl;; 2675 return 0;; 2676 }; 2677 fError = nullptr;; 2678 ; 2679 const Char_t *text = newText.Data();; 2680 Double_t angsav = fTextAngle;; 2681 TLatexFormSize fs = FirstParse(0,GetTextSize(),text);; 2682 fTextAngle = angsav;; 2683 fTabSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:93818,clear,clear,93818,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['clear'],['clear']
Usability,"coverable;; 1776 return 0;; 1777 }; 1778 ; 1779 ::std::ifstream macro(exnam, std::ios::in);; 1780 if (!macro.good()) {; 1781 ::Error(""TApplication::ExecuteFile"", ""%s no such file"", exnam);; 1782 if (error); 1783 *error = (Int_t)TInterpreter::kRecoverable;; 1784 delete [] exnam;; 1785 return 0;; 1786 }; 1787 ; 1788 char currentline[kBufSize];; 1789 char dummyline[kBufSize];; 1790 int tempfile = 0;; 1791 int comment = 0;; 1792 int ifndefc = 0;; 1793 int ifdef = 0;; 1794 char *s = nullptr;; 1795 Bool_t execute = kFALSE;; 1796 Longptr_t retval = 0;; 1797 ; 1798 while (1) {; 1799 bool res = (bool)macro.getline(currentline, kBufSize);; 1800 if (macro.eof()) break;; 1801 if (!res) {; 1802 // Probably only read kBufSize, let's ignore the remainder of; 1803 // the line.; 1804 macro.clear();; 1805 while (!macro.getline(dummyline, kBufSize) && !macro.eof()) {; 1806 macro.clear();; 1807 }; 1808 }; 1809 s = currentline;; 1810 while (s && (*s == ' ' || *s == '\t')) s++; // strip-off leading blanks; 1811 ; 1812 // very simple minded pre-processor parsing, only works in case macro file; 1813 // starts with ""#ifndef __CINT__"". In that case everything till next; 1814 // ""#else"" or ""#endif"" will be skipped.; 1815 if (*s == '#') {; 1816 char *cs = Compress(currentline);; 1817 if (strstr(cs, ""#ifndef__CINT__"") ||; 1818 strstr(cs, ""#if!defined(__CINT__)"")); 1819 ifndefc = 1;; 1820 else if (ifndefc && (strstr(cs, ""#ifdef"") || strstr(cs, ""#ifndef"") ||; 1821 strstr(cs, ""#ifdefined"") || strstr(cs, ""#if!defined""))); 1822 ifdef++;; 1823 else if (ifndefc && strstr(cs, ""#endif"")) {; 1824 if (ifdef); 1825 ifdef--;; 1826 else; 1827 ifndefc = 0;; 1828 } else if (ifndefc && !ifdef && strstr(cs, ""#else"")); 1829 ifndefc = 0;; 1830 delete [] cs;; 1831 }; 1832 if (!*s || *s == '#' || ifndefc || !strncmp(s, ""//"", 2)) continue;; 1833 ; 1834 if (!comment && (!strncmp(s, "".X"", 2) || !strncmp(s, "".x"", 2))) {; 1835 retval = ExecuteFile(s+3);; 1836 execute = kTRUE;; 1837 continue;; 1838 }; 1839 ; 1840 if (!str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:69765,clear,clear,69765,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"cpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TMatrixT< Double_t >; TMatrixT::ResizeToTMatrixTBase< Element > & ResizeTo(Int_t nrows, Int_t ncols, Int_t=-1) overrideSet size of the matrix to nrows x ncols New dynamic elements are created, the overlapping part of the...Definition TMatrixT.cxx:1203; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVectorT< Double_t >; TVectorT::GetNoElementsInt_t GetNoElements() constDefinition TVectorT.h:74; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; FALSE#define FALSEDefinition mesh.c:45; MathNamespace for new Math classes and functions.; ROOT::Math::gFunctionconst ROOT::Math::IMultiGenFunction * gFunctionfunction wrapper for the function to be minimizedDefinition RMinimizer.cxx:12; ROOT::Math::minfunctiondouble minfunction(const std::vector< double > &x)function to return the function values at point xDefinition RMinimizer.cxx:19; ROOT::Math::mingradfunctionTVectorD mingradfunction(TVectorD y)function to return the gradient values at point yDefinition RMinimizer.cxx:25; ROOT::Math::gGradFunctionconst ROOT::Math::IMultiGradFunction * gGradFunctionfunction wrapper for the gradient of the function to be minimizedDefinition RMinimizer.cxx:14; ROOT::Math::gNCallsint gNCallsinteger for the number of function callsDefinition RMinimizer.cxx:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathrtoolssrcRMinimizer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RMinimizer_8cxx_source.html:12607,Guid,Guide,12607,doc/master/RMinimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html,1,['Guid'],['Guide']
Usability,"cpy(buff, c+1, n+1); // strlcpy copy 'size-1' characters.; 1169 std::string hd = GetHomeDirectory(buff);; 1170 e = c+1+n;; 1171 if (!hd.empty()) { // we have smth to copy; 1172 p = hd.c_str();; 1173 strlcpy(x, p, kBufSize);; 1174 x += strlen(p);; 1175 c = e;; 1176 } else {; 1177 x++[0] = c[0];; 1178 //++ier;; 1179 ++c;; 1180 }; 1181 }; 1182 ; 1183 for ( ; c[0]; c++) {; 1184 ; 1185 p = nullptr; e = nullptr;; 1186 ; 1187 if (c[0] == '.' && c[1] == '/' && c[-1] == ' ') { // $cwd; 1188 std::string wd = GetWorkingDirectory();; 1189 strlcpy(buff, wd.c_str(), kBufSize);; 1190 p = buff;; 1191 e = c + 1;; 1192 }; 1193 if (p) { // we have smth to copy */; 1194 strlcpy(x, p, kBufSize); x += strlen(p); c = e-1; continue;; 1195 }; 1196 ; 1197 if (c[0] != '$') { // not $, simple copy; 1198 x++[0] = c[0];; 1199 } else { // we have a $; 1200 b = c+1;; 1201 if (c[1] == '(') b++;; 1202 if (c[1] == '{') b++;; 1203 if (b[0] == '$'); 1204 e = b+1;; 1205 else; 1206 for (e = b; isalnum(e[0]) || e[0] == '_'; e++) ;; 1207 buff[0] = 0; strncat(buff, b, e-b);; 1208 p = Getenv(buff);; 1209 if (!p) { // too bad, try UPPER case; 1210 for (t = buff; (t[0] = toupper(t[0])); t++) ;; 1211 p = Getenv(buff);; 1212 }; 1213 if (!p) { // too bad, try Lower case; 1214 for (t = buff; (t[0] = tolower(t[0])); t++) ;; 1215 p = Getenv(buff);; 1216 }; 1217 if (!p && !strcmp(buff, ""cwd"")) { // it is $cwd; 1218 std::string wd = GetWorkingDirectory();; 1219 strlcpy(buff, wd.c_str(), kBufSize);; 1220 p = buff;; 1221 }; 1222 if (!p && !strcmp(buff, ""$"")) { // it is $$ (replace by GetPid()); 1223 snprintf(buff,kBufSize*4, ""%d"", GetPid());; 1224 p = buff;; 1225 }; 1226 if (!p) { // too bad, nothing can help; 1227#ifdef WIN32; 1228 // if we're on windows, we can have \\SomeMachine\C$ - don't; 1229 // complain about that, if '$' is followed by nothing or a; 1230 // path delimiter.; 1231 if (c[1] && c[1]!='\\' && c[1]!=';' && c[1]!='/'); 1232 ier++;; 1233#else; 1234 ier++;; 1235#endif; 1236 x++[0] = c[0];; 1237 } else { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:36946,simpl,simple,36946,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['simpl'],['simple']
Usability,"createClones. ; Definition at line 425 of file RGeomData.cxx. ◆ Build() [2/2]. void RGeomDescription::Build ; (; TGeoVolume * ; vol). Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ; Definition at line 460 of file RGeomData.cxx. ◆ BuildDescription(). void RGeomDescription::BuildDescription ; (; TGeoNode * ; topnode, . TGeoVolume * ; topvolume . ). private . Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = fals",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:12531,Clear,ClearAllPhysVisibility,12531,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['Clear'],['ClearAllPhysVisibility']
Usability,"created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMediumEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMediumEditor.html:22034,undo,undoing,22034,root/html528/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html528/TGeoMediumEditor.html,1,['undo'],['undoing']
Usability,"created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMediumEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoMediumEditor.html:22134,undo,undoing,22134,root/html530/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html530/TGeoMediumEditor.html,1,['undo'],['undoing']
Usability,"created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMediumEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoMediumEditor.html:22134,undo,undoing,22134,root/html532/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html532/TGeoMediumEditor.html,1,['undo'],['undoing']
Usability,cribing this class . ◆ Class_Name(). static const char * TBrowserPlugin::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBrowserPlugin::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 51 of file TRootBrowser.h. ◆ DeclFileName(). static const char * TBrowserPlugin::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 51 of file TRootBrowser.h. ◆ IsA(). TClass * TBrowserPlugin::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 51 of file TRootBrowser.h. ◆ SetCommand(). void TBrowserPlugin::SetCommand ; (; const char * ; cmd). inline . Definition at line 49 of file TRootBrowser.h. ◆ SetSubTab(). void TBrowserPlugin::SetSubTab ; (; Int_t ; sub). inline . Definition at line 48 of file TRootBrowser.h. ◆ SetTab(). void TBrowserPlugin::SetTab ; (; Int_t ; tab). inline . Definition at line 47 of file TRootBrowser.h. ◆ Streamer(). void TBrowserPlugin::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TBrowserPlugin::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TRootBrowser.h. Member Data Documentation. ◆ fCommand. TString TBrowserPlugin::fCommand. Command to be executed. ; Definition at line 40 of file TRootBrowser.h. ◆ fSubTab. Int_t TBrowserPlugin::fSubTab {0}. Tab element number. ; Definition at line 39 of file TRootBrowser.h. ◆ fTab. Int_t TBrowserPlugin::fTab {0}. Tab number. ; Definition at line 38 of file TRootBrowser.h. Libraries for TBrowserPlugin:. [legend]; The documentation for this class was generated from the following file:; gui/gui/inc/TRootBrowser.h. TBrowserPlugin. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserPlugin.html:14028,Guid,Guide,14028,doc/master/classTBrowserPlugin.html,https://root.cern,https://root.cern/doc/master/classTBrowserPlugin.html,1,['Guid'],['Guide']
Usability,"cribing this class . ◆ Class_Name(). static const char * TProofPlayerRemote::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofPlayerRemote::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 366 of file TProofPlayer.h. ◆ DeclFileName(). static const char * TProofPlayerRemote::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 366 of file TProofPlayer.h. ◆ DrawSelect(). Long64_t TProofPlayerRemote::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw (support for TChain::Draw()). ; Returns -1 in case of error or number of selected events in case of success. ; Reimplemented from TProofPlayer.; Definition at line 4232 of file TProofPlayer.cxx. ◆ Feedback(). void TProofPlayerRemote::Feedback ; (; TList * ; objs). overridevirtual . Feedback signal. ; Reimplemented from TProofPlayer.; Definition at line 3317 of file TProofPlayer.cxx. ◆ Finalize() [1/2]. Long64_t TProofPlayerRemote::Finalize ; (; Bool_t ; force = kFALSE, . Bool_t ; sync = kFALSE . ). overridevirtual . Finalize query (may not be used in this class). ; Reimplemented from TProofPlayer.; Definition at line 2781 of file TProofPlayer.cxx. ◆ Finalize() [2/2]. Long64_t TProofPlayerRemote::Finalize ; (; TQueryResult * ; qr). overridevirtual . Finalize the results of a query already processed. ; Reimplemented from TProofPlayer.; Definition at line 2973 of file TProofPlayer.cxx. ◆ GetNextPacket(). TDSetElement * TProofPlayerRemote::GetNextPacket ; (; TSlave * ; slave, . TMessage * ; r . ). overridevirtual . Get next packet for specified slave. ; Reimplemented from TProofPlayer.; Definition at line 4188 of file TProofPlayer.cxx. ◆ GetPacketizer(). TVirtualPacketizer * TProofPlayerRemote::GetPacketizer ; (; ); cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:27967,Feedback,Feedback,27967,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['Feedback'],['Feedback']
Usability,cribing this class . ◆ Class_Name(). static const char * TStreamerSTLstring::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStreamerSTLstring::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 440 of file TStreamerElement.h. ◆ DeclFileName(). static const char * TStreamerSTLstring::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 440 of file TStreamerElement.h. ◆ GetInclude(). const char * TStreamerSTLstring::GetInclude ; (; ); const. overridevirtual . Return the proper include for this element. ; Reimplemented from TStreamerSTL.; Definition at line 2048 of file TStreamerElement.cxx. ◆ GetSize(). Int_t TStreamerSTLstring::GetSize ; (; ); const. overridevirtual . Returns size of anyclass in bytes. ; Reimplemented from TStreamerSTL.; Definition at line 2057 of file TStreamerElement.cxx. ◆ IsA(). TClass * TStreamerSTLstring::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TStreamerSTL.; Definition at line 440 of file TStreamerElement.h. ◆ operator=(). TStreamerSTLstring & TStreamerSTLstring::operator= ; (; const TStreamerSTLstring & ; ). privatedelete . ◆ Streamer(). void TStreamerSTLstring::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerSTLstring. ; Reimplemented from TStreamerSTL.; Definition at line 2066 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerSTLstring::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 440 of file TStreamerElement.h. Libraries for TStreamerSTLstring:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerSTLstring. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerSTLstring.html:20771,Guid,Guide,20771,doc/master/classTStreamerSTLstring.html,https://root.cern,https://root.cern/doc/master/classTStreamerSTLstring.html,1,['Guid'],['Guide']
Usability,cript. ; Definition at line 3009 of file TPostScript.cxx. ◆ VtoPS(). Int_t TPostScript::VtoPS ; (; Double_t ; v). Convert V from NDC coordinate to PostScript. ; Definition at line 3018 of file TPostScript.cxx. ◆ XtoPS(). Int_t TPostScript::XtoPS ; (; Double_t ; x). Convert X from world coordinate to PostScript. ; Definition at line 3027 of file TPostScript.cxx. ◆ YtoPS(). Int_t TPostScript::YtoPS ; (; Double_t ; y). Convert Y from world coordinate to PostScript. ; Definition at line 3036 of file TPostScript.cxx. ◆ Zone(). void TPostScript::Zone ; (; ). Initialize the PostScript page in zones. ; Definition at line 3045 of file TPostScript.cxx. Member Data Documentation. ◆ fBlue. Float_t TPostScript::fBlue. protected . Per cent of blue. ; Definition at line 50 of file TPostScript.h. ◆ fBoundingBox. Bool_t TPostScript::fBoundingBox. protected . True for Encapsulated PostScript. ; Definition at line 63 of file TPostScript.h. ◆ fClear. Bool_t TPostScript::fClear. protected . True when page must be cleared. ; Definition at line 64 of file TPostScript.h. ◆ fClip. Int_t TPostScript::fClip. protected . Clipping mode. ; Definition at line 62 of file TPostScript.h. ◆ fClipStatus. Bool_t TPostScript::fClipStatus. protected . Clipping Indicator. ; Definition at line 65 of file TPostScript.h. ◆ fCurrentColor. Int_t TPostScript::fCurrentColor. protected . current Postscript color index ; Definition at line 58 of file TPostScript.h. ◆ fDXC. Float_t TPostScript::fDXC. protected . Definition at line 31 of file TPostScript.h. ◆ fDYC. Float_t TPostScript::fDYC. protected . Definition at line 32 of file TPostScript.h. ◆ fFileName. TString TPostScript::fFileName. protected . PS file name. ; Definition at line 77 of file TPostScript.h. ◆ fFontEmbed. Bool_t TPostScript::fFontEmbed. protected . True is FontEmbed has been called. ; Definition at line 78 of file TPostScript.h. ◆ fFX. Float_t TPostScript::fFX. protected . Definition at line 35 of file TPostScript.h. ◆ fFY. Float_t TPostScript:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPostScript.html:53035,clear,cleared,53035,doc/master/classTPostScript.html,https://root.cern,https://root.cern/doc/master/classTPostScript.html,1,['clear'],['cleared']
Usability,"cription(topnode, topnode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 numbers.emplace_back(snode->GetNumber());; 512 snode->SetNumber(offset + fNodes.size()); // use id with shift 1e9; 513 fNodes.emplace_back(snode);; 514 };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:12498,clear,clear,12498,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"cription; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::SplitRule. class RooSimWSTool::SplitRule: public TNamed. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__SplitRule.html:1099,simpl,simple,1099,root/html534/RooSimWSTool__SplitRule.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__SplitRule.html,3,['simpl'],['simple']
Usability,"cs of this material ;  ; virtual void SetCerenkovProperties (TObject *cerenkov);  ; void SetFWExtension (TGeoExtension *ext);  Connect framework defined extension to the material. ;  ; void SetIndex (Int_t index);  ; void SetPressure (Double_t pressure);  ; void SetRadLen (Double_t radlen, Double_t intlen=0.);  Set radiation/absorption lengths. ;  ; void SetState (EGeoMaterialState state);  ; void SetTemperature (Double_t temperature);  ; void SetTransparency (Char_t transparency=0);  ; void SetUsed (Bool_t flag=kTRUE);  ; void SetUserExtension (TGeoExtension *ext);  Connect user-defined extension to the material. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMixture.html:6938,Clear,Clear,6938,doc/master/classTGeoMixture.html,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html,1,['Clear'],['Clear']
Usability,"cs system and eventloop; (be it X, Windoze, MacOS or BeOS). After creating the application; object start the eventloop by calling its Run() method. The command; line options recogized by TApplication are described in the GetOptions(); method. The recognized options are removed from the argument array.; The original list of argument options can be retrieved via the Argc(); and Argv() methods. The appClassName ""proofserv"" is reserved for the; PROOF system. The ""options"" and ""numOptions"" arguments are not used,; except if you want to by-pass the argv processing by GetOptions(); in which case you should specify numOptions<0. All options will; still be available via the Argv() method for later use. ~TApplication(); TApplication dtor. void NeedGraphicsLibs(); Static method. This method should be called from static library; initializers if the library needs the low level graphics system. void InitializeGraphics(); Initialize the graphics environment. void ClearInputFiles(); Clear list containing macro files passed as program arguments.; This method is called from TRint::Run() to ensure that the macro; files are only executed the first time Run() is called. char * Argv(Int_t index) const; Return specified argument. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Arguments handled are removed; from the argument array. The following arguments are handled:; -b : run in batch mode without graphics; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; The last three options are only relevant in conjunction with TRint.; The following help and info arguments are supported:; -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; In addition to the above options the arguments that are not options,; i.e. they don't start with - or + are treated as follows:; <file>.root are considered ROOT files and added to the Inp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:13404,Clear,ClearInputFiles,13404,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,2,['Clear'],"['Clear', 'ClearInputFiles']"
Usability,"cs system and eventloop; (be it X, Windoze, MacOS or BeOS). After creating the application; object start the eventloop by calling its Run() method. The command; line options recogized by TApplication are described in the GetOptions(); method. The recognized options are removed from the argument array.; The original list of argument options can be retrieved via the Argc(); and Argv() methods. The appClassName ""proofserv"" is reserved for the; PROOF system. The ""options"" and ""numOptions"" arguments are not used,; except if you want to by-pass the argv processing by GetOptions(); in which case you should specify numOptions<0. All options will; still be available via the Argv() method for later use. ~TApplication(); TApplication dtor. void NeedGraphicsLibs(); Static method. This method should be called from static library; initializers if the library needs the low level graphics system. void InitializeGraphics(); Initialize the graphics environment. void ClearInputFiles(); Clear list containing macro files passed as program arguments.; This method is called from TRint::Run() to ensure that the macro; files are only executed the first time Run() is called. char * Argv(Int_t index) const; Return specified argument. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Arguments handled are removed; from the argument array. The following arguments are handled:; -b : run in batch mode without graphics; -x : exit on exception; -e expression: request execution of the given C++ expression.; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; The last three options are only relevant in conjunction with TRint.; The following help and info arguments are supported:; -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; -memstat : run with memory usage monitoring; In addition to the above options the arguments that are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplication.html:14479,Clear,ClearInputFiles,14479,root/html602/TApplication.html,https://root.cern,https://root.cern/root/html602/TApplication.html,4,['Clear'],"['Clear', 'ClearInputFiles']"
Usability,"cs system and eventloop; (be it X, Windoze, MacOS or BeOS). After creating the application; object start the eventloop by calling its Run() method. The command; line options recogized by TApplication are described in the GetOptions(); method. The recognized options are removed from the argument array.; The original list of argument options can be retrieved via the Argc(); and Argv() methods. The appClassName ""proofserv"" is reserved for the; PROOF system. The ""options"" and ""numOptions"" arguments are not used,; except if you want to by-pass the argv processing by GetOptions(); in which case you should specify numOptions<0. All options will; still be available via the Argv() method for later use. ~TApplication(); TApplication dtor. void NeedGraphicsLibs(); Static method. This method should be called from static library; initializers if the library needs the low level graphics system. void InitializeGraphics(); Initialize the graphics environment. void ClearInputFiles(); Clear list containing macro files passed as program arguments.; This method is called from TRint::Run() to ensure that the macro; files are only executed the first time Run() is called. char * Argv(Int_t index) const; Return specified argument. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Arguments handled are removed; from the argument array. The following arguments are handled:; -b : run in batch mode without graphics; -x : exit on exception; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; The last three options are only relevant in conjunction with TRint.; The following help and info arguments are supported:; -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; -memstat : run with memory usage monitoring; In addition to the above options the arguments that are not options,; i.e. they don't start with - or + are treated as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplication.html:13651,Clear,ClearInputFiles,13651,root/html528/TApplication.html,https://root.cern,https://root.cern/root/html528/TApplication.html,8,['Clear'],"['Clear', 'ClearInputFiles']"
Usability,"cs » 3D Graphics » Basic 3D graphics. ; An hyperboloid (not implemented) ; It has 4 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inner radius of the tube; rmax: outer radius of the tube; dz: half-length of the box along the z-axis; phi: stereo angle . Definition at line 28 of file THYPE.h. Public Member Functions;  THYPE ();  HYPE shape default constructor. ;  ;  THYPE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi);  HYPE shape normal constructor. ;  ;  ~THYPE () override;  HYPE shape default destructor. ;  ; virtual Float_t GetPhi () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHYPE.html:1314,simpl,simplified,1314,doc/master/classTHYPE.html,https://root.cern,https://root.cern/doc/master/classTHYPE.html,1,['simpl'],['simplified']
Usability,"ct & ; Shift). unary subtraction operator -= ; Definition at line 143 of file TFoamVect.cxx. ◆ operator=() [1/3]. TFoamVect & TFoamVect::operator= ; (; const TFoamVect & ; Vect). substitution operator ; Definition at line 86 of file TFoamVect.cxx. ◆ operator=() [2/3]. TFoamVect & TFoamVect::operator= ; (; Double_t ; x). Loading in double prec. number, sometimes can be useful. ; Definition at line 191 of file TFoamVect.cxx. ◆ operator=() [3/3]. TFoamVect & TFoamVect::operator= ; (; Double_t ; Vect[]). Loading in ordinary double prec. vector, sometimes can be useful. ; Definition at line 180 of file TFoamVect.cxx. ◆ operator[](). Double_t & TFoamVect::operator[] ; (; Int_t ; n). [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ; Definition at line 109 of file TFoamVect.cxx. ◆ Print(). void TFoamVect::Print ; (; Option_t * ; option); const. overridevirtual . Printout of all vector components on ""std::cout"". ; Reimplemented from TObject.; Definition at line 203 of file TFoamVect.cxx. ◆ Streamer(). void TFoamVect::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFoamVect::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 35 of file TFoamVect.h. Member Data Documentation. ◆ fCoords. Double_t* TFoamVect::fCoords. private . [fDim] Coordinates ; Definition at line 14 of file TFoamVect.h. ◆ fDim. Int_t TFoamVect::fDim. private . Dimension. ; Definition at line 13 of file TFoamVect.h. Libraries for TFoamVect:. [legend]; The documentation for this class was generated from the following files:; math/foam/inc/TFoamVect.h; math/foam/src/TFoamVect.cxx. TFoamVect. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamVect.html:15888,Guid,Guide,15888,doc/master/classTFoamVect.html,https://root.cern,https://root.cern/doc/master/classTFoamVect.html,1,['Guid'],['Guide']
Usability,"ct *obj) const override;  Overrided method. Compare two objects of TStructNodeProperty class. ;  ; TColor GetColor () const;  Returns color of class. ;  ; Pixel_t GetPixel () const;  Return color in Pixel_t format. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  Retruns true, because we have overrided method Compare. ;  ; void SetColor (const TColor &color);  Sets the color to ""color"". ;  ; void SetColor (Int_t color);  Sets the color to ""color"". ;  ; void SetColor (Pixel_t pixel);  Sets the color to ""pixel"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructNodeProperty.html:1724,Clear,Clear,1724,doc/master/classTStructNodeProperty.html,https://root.cern,https://root.cern/doc/master/classTStructNodeProperty.html,1,['Clear'],['Clear']
Usability,"ct ; Reimplemented from TConditionImp.; Definition at line 70 of file TWin32Condition.h. ◆ Signal(). Int_t TWin32Condition::Signal ; (; ). overridevirtual . If one or more threads have called Wait(), Signal() wakes up at least one of them, possibly more. ; See POSIX threads documentation for details. ; Implements TConditionImp.; Definition at line 173 of file TWin32Condition.cxx. ◆ Streamer(). void TWin32Condition::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TConditionImp. ◆ StreamerNVirtual(). void TWin32Condition::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file TWin32Condition.h. ◆ TimedWait(). Int_t TWin32Condition::TimedWait ; (; ULong_t ; secs, . ULong_t ; nanoSecs = 0 . ). overridevirtual . TimedWait() is given an absolute time to wait until. ; To wait for a relative time from now, use TThread::GetTime(). See POSIX threads documentation for why absolute times are better than relative. Returns 0 if successfully signalled, 1 if time expired. ; Implements TConditionImp.; Definition at line 115 of file TWin32Condition.cxx. ◆ Wait(). Int_t TWin32Condition::Wait ; (; ). overridevirtual . Wait for the condition variable to be signalled. ; The mutex is implicitely released before waiting and locked again after waking up. If Wait() is called by multiple threads, a signal may wake up more than one thread. See POSIX threads documentation for details. ; Implements TConditionImp.; Definition at line 66 of file TWin32Condition.cxx. Member Data Documentation. ◆ fCond. pthread_cond_t TWin32Condition::fCond. private . Definition at line 58 of file TWin32Condition.h. ◆ fMutex. TWin32Mutex* TWin32Condition::fMutex. private . Definition at line 59 of file TWin32Condition.h. core/thread/inc/TWin32Condition.h; core/thread/src/TWin32Condition.cxx. TWin32Condition. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32Condition.html:14360,Guid,Guide,14360,doc/master/classTWin32Condition.html,https://root.cern,https://root.cern/doc/master/classTWin32Condition.html,1,['Guid'],['Guide']
Usability,"ct class, return 0.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). void* ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object of any class from XML, produced by ConvertToXML() method.; If cl!=0, return actual class of object.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). XMLNodePointer_t XmlWriteAny(const void* obj, const TClass* cl); Convert object of any class to xml structures; Return pointer on top xml element. void* XmlReadAny(XMLNodePointer_t node, void* obj, TClass** cl); Recreate object from xml structure.; Return pointer to read object.; if (cl!=0) returns pointer to class of object. void WriteObject(const TObject* obj); Convert object into xml structures.; !!! Should be used only by TBufferXML itself.; Use ConvertToXML() methods to convert your object to xml; Redefined here to avoid gcc 3.x warning. TXMLStackObj* PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); add new level to xml stack. TXMLStackObj* PopStack(); remove one level from xml stack. TXMLStackObj* Stack(Int_t depth = 0); return xml stack object of specified depth. XMLNodePointer_t StackNode(); return pointer on current xml node. void ShiftStack(const char* info = 0); shift stack node to next. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0 no compression.; level = 1 minimal compression level but fast. level = 9 maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferXML.html:27117,simpl,simple,27117,root/html530/TBufferXML.html,https://root.cern,https://root.cern/root/html530/TBufferXML.html,5,['simpl'],['simple']
Usability,"ct class, return 0.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). void* ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object of any class from XML, produced by ConvertToXML() method.; If cl!=0, return actual class of object.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). XMLNodePointer_t XmlWriteAny(const void* obj, const TClass* cl); Convert object of any class to xml structures; Return pointer on top xml element. void* XmlReadAny(XMLNodePointer_t node, void* obj, TClass** cl); Recreate object from xml structure.; Return pointer to read object.; if (cl!=0) returns pointer to class of object. void WriteObject(const TObject* obj); Convert object into xml structures.; !!! Should be used only by TBufferXML itself.; Use ConvertToXML() methods to convert your object to xml; Redefined here to avoid gcc 3.x warning. TXMLStackObj* PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); add new level to xml stack. TXMLStackObj* PopStack(); remove one level from xml stack. TXMLStackObj* Stack(Int_t depth = 0); return xml stack object of specified depth. XMLNodePointer_t StackNode(); return pointer on current xml node. void ShiftStack(const char* info = 0); shift stack node to next. void XmlWriteBlock(XMLNodePointer_t node); write binary data block from buffer to xml; this data can be produced only by direct call of TBuffer::WriteBuf() functions. void XmlReadBlock(XMLNodePointer_t node); read binary block of data from xml. Bool_t ProcessPointer(const void* ptr, XMLNodePointer_t node); Add ""ptr"" attribute to node, if ptr is null or; if ptr is pointer on object, which is already saved in buffer; Automatically add ""ref"" attribute to node, where referenced object is stored. void RegisterPointer(const void* ptr, XMLNodePointer_t node); Register pair of object pointer and node, where this object is saved,; in object map. Bool_t ExtractPointer(XMLNodePo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferXML.html:25995,simpl,simple,25995,root/html526/TBufferXML.html,https://root.cern,https://root.cern/root/html526/TBufferXML.html,2,['simpl'],['simple']
Usability,ct statistical quantities of a profile filled with weights; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag is false the structure is deleted ; Reimplemented from TH1.; Definition at line 1825 of file TProfile.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 36 of file TProfile.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 35 of file TProfile.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile::fBinEntries. protected . number of entries per bin ; Definition at line 39 of file TProfile.h. ◆ fBinSumw2. TArrayD TProfile::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 46 of file TProfile.h. ◆ fErrorMode. EErrorType TProfile::fErrorMode. protected . Option to compute errors. ; Definition at line 40 of file TProfile.h. ◆ fgApproximate. Bool_t TProfile::fgApproximate = kFALSE. staticprotected . bin error approximation option ; Definition at line 48 of file TProfile.h. ◆ fScaling. Bool_t TProfile::fScaling. protected . ! True when TProfile::Scale is called ; Definition at line 43 of file TProfile.h. ◆ fTsumwy. Double_t TProfile::fTsumwy. protected . Total Sum of weight*Y. ; Definition at line 44 of file TProfile.h. ◆ fTsumwy2. Double_t TProfile::fTsumwy2. protected . Total Sum of weight*Y*Y. ; Definition at line 45 of file TProfile.h. ◆ fYmax. Double_t TProfile::fYmax. protected . Upper limit in Y (if set) ; Definition at line 42 of file TProfile.h. ◆ fYmin. Double_t TProfile::fYmin. protected . Lower limit in Y (if set) ; Definition at line 41 of file TProfile.h. Libraries for TProfile:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile.h; hist/hist/src/TProfile.cxx. TProfile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:91597,Guid,Guide,91597,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['Guid'],['Guide']
Usability,"ct the ""Associated Members"". TDataSet * FindByPath(const char* path) const; Aliase for TDataSet::Find(const Char_t *path) method. TDataSet * Find(const char* path) const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByName(const char* name, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This is method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * First() const; Return the first object in the list. Returns 0 when list is empty. void AddMain(TDataSet* set); add data set to main data set. TDataSet * GetMainSet(); return pointer to the main dataset. TObject * GetObject() const; The depricated method (left here for the sake of the backward compatibility). TDataSet * Last() const; Return the last object in the list. Returns 0 when list is empty. TDataSet * Next() const; Return the object next to this one in the parent structure; This convinient but time-consuming. Don't use it in the inner loops. TDataSet * Prev() const; Return the object that is previous to this one in the parent structure; This convinient but time-consuming. Don't use it in the inner loops. void SetObject(TObject* obj); The depricated method (left here for the sake of the backward compatibility). void ls(Option_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSet.html:14727,simpl,simplify,14727,root/html528/TDataSet.html,https://root.cern,https://root.cern/root/html528/TDataSet.html,6,['simpl'],['simplify']
Usability,"ct the destination/cu...Definition TCanvas.cxx:924; TCanvas::ResetDrawnvoid ResetDrawn()Definition TCanvas.h:192; TContextMenuThis class provides an interface to context sensitive popup menus.Definition TContextMenu.h:44; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TInterpreterThis class defines an abstract interface to a generic command line interpreter.Definition TInterpreter.h:60; TObjLinkWrapper around a TObject so it can be stored in a TList.Definition TList.h:123; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::MayNotUsevoid MayNotUse(const char *method) constUse this method to signal that a method (defined in a base class) may not be called in a derived clas...Definition TObject.cxx:1046; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::Pickvirtual TPad * Pick(Int_t px, Int_t py, TObjLink *&pickobj)Search for an object at pixel position px,py.Definition TPad.cxx:4657; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TThread<div class=""legacybox""><h2>Legacy Code</h2> TThread is a legacy interface: there will be no bug fixes...Definition TThread.h:40; TVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas.Definition TVirtualPadPainter.h:19; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TWebCanvasBasic TCanvasImp ABI implementation for Web-based Graphics Provides painting of main ROOT classes in ...Definition TWebCanvas.h:35; bool; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Drawth1 Draw(). graf2dgpadincTCanvas.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:33127,Guid,Guide,33127,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,1,['Guid'],['Guide']
Usability,"ct* obj, const char* name, Int_t check = -1); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidCheckObjectItem(TObject* obj, Bool_t check = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRootBrowserLite.html:2092,Clear,Clear,2092,root/html530/TRootBrowserLite.html,https://root.cern,https://root.cern/root/html530/TRootBrowserLite.html,5,['Clear'],['Clear']
Usability,"ct* obj, const char* name, Int_t check = -1); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidCheckObjectItem(TObject* obj, Bool_t check = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootBrowserLite.html:2092,Clear,Clear,2092,root/html528/TRootBrowserLite.html,https://root.cern,https://root.cern/root/html528/TRootBrowserLite.html,1,['Clear'],['Clear']
Usability,"ct*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyButtonSlot(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidAutoRefreshButtonSlot(Bool_t on); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); voidColorSelectedSlot(Pixel_t color); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); voidDefaultButtonSlot(); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructNodeEditor.html:1888,Clear,Clear,1888,root/html530/TStructNodeEditor.html,https://root.cern,https://root.cern/root/html530/TStructNodeEditor.html,5,['Clear'],['Clear']
Usability,"ct. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ClearThreadsMap ();  Clear the current map of threads. ;  ; static const char * DeclFileName ();  ; static EDefaultUnits GetDefaultUnits ();  ; static UInt_t GetExportPrecision ();  ; static Int_t GetMaxDaughters ();  Return maximum number of daughters of a volume used in the geometry. ;  ; static Int_t GetMaxLevels ();  Return maximum number of levels used in the geometry. ;  ; static Int_t GetMaxXtruVert ();  Return maximum number of vertices for an xtru shape used. ;  ; static Int_t GetNumThreads ();  Returns number of threads that were set to use geometry. ;  ; static Int_t GetVerboseLevel ();  Set verbosity level (static function). ;  ; static TGeoManager * Import (const char *filename, const char *name="""", Option_t *option="""");  static function Import a geometry from a gdml or ROOT file ;  ; static Bool_t IsLocked ();  Check lock state. ;  ; static Bool_t LockDefaultUnits (Bool_t new_value);  ; static void LockGeometry ();  Loc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:59273,Clear,ClearThreadsMap,59273,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,2,['Clear'],"['Clear', 'ClearThreadsMap']"
Usability,"ct. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WithinVisibleRange (Int_t val) const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRGBAPalette.html:5630,Clear,Clear,5630,doc/master/classTEveRGBAPalette.html,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html,1,['Clear'],['Clear']
Usability,"ct. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 ();  Turn on support of errors. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseArrayChunk.html:2291,Clear,Clear,2291,doc/master/classTHnSparseArrayChunk.html,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html,1,['Clear'],['Clear']
Usability,"ct.cxx:570; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TSeqCollection::LastIndexInt_t LastIndex() constDefinition TSeqCollection.h:55; TSeqCollection::IndexOfvirtual Int_t IndexOf(const TObject *obj) constReturn index of object in collection.Definition TSeqCollection.cxx:30; TSeqCollection::Classstatic TClass * Class(); TSeqCollection::IsATClass * IsA() const overrideDefinition TSeqCollection.h:67; TSeqCollection::Lastvirtual TObject * Last() const =0; TSeqCollection::QSortstatic void QSort(TObject **a, Int_t first, Int_t last)Sort array of TObject pointers using a quicksort algorithm.Definition TSeqCollection.cxx:70; TSeqCollection::MergeLong64_t Merge(TCollection *list)Merge this collection with all collections coming in the input list.Definition TSeqCollection.cxx:185; TSeqCollection::GetLastvirtual Int_t GetLast() constReturns index of last object in collection.Definition TSeqCollection.cxx:47; TSeqCollection::ObjComparestatic Int_t ObjCompare(TObject *a, TObject *b)Compare to objects in the collection. Use member Compare() of object a.Definition TSeqCollection.cxx:56; TSeqCollection::Addvoid Add(TObject *obj) overrideDefinition TSeqCollection.h:38; bool; int; object. corecontsrcTSeqCollection.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeqCollection_8cxx_source.html:14136,Guid,Guide,14136,doc/master/TSeqCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSeqCollection_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ct::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidCheckAndFixBoxOrientationEv(TEveVector* box); static voidCheckAndFixBoxOrientationFv(Float_t** box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveShape.html:2623,Clear,Clear,2623,root/html528/TEveShape.html,https://root.cern,https://root.cern/root/html528/TEveShape.html,4,['Clear'],['Clear']
Usability,"ct::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord); static voidTProof:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofCondor.html:2337,Clear,ClearPackage,2337,root/html530/TProofCondor.html,https://root.cern,https://root.cern/root/html530/TProofCondor.html,4,['Clear'],['ClearPackage']
Usability,"ct::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::DeactivateWorker(const char* ord); static voidTProof::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:2336,Clear,ClearPackage,2336,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,2,['Clear'],['ClearPackage']
Usability,"ct::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:6946,Simpl,SimpleInterval,6946,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,ct::SetShape ; (; TGeoShape * ; s). inline . Definition at line 50 of file TEveGeoShapeExtract.h. ◆ SetTrans(). void TEveGeoShapeExtract::SetTrans ; (; const Double_t ; arr[16]). Set transformation matrix. ; Definition at line 80 of file TEveGeoShapeExtract.cxx. ◆ Streamer(). void TEveGeoShapeExtract::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEveGeoShapeExtract::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file TEveGeoShapeExtract.h. Member Data Documentation. ◆ fElements. TList* TEveGeoShapeExtract::fElements. protected . Definition at line 34 of file TEveGeoShapeExtract.h. ◆ fMiniFrame. Bool_t TEveGeoShapeExtract::fMiniFrame. protected . Definition at line 32 of file TEveGeoShapeExtract.h. ◆ fRGBA. Float_t TEveGeoShapeExtract::fRGBA[4]. protected . Definition at line 27 of file TEveGeoShapeExtract.h. ◆ fRGBALine. Float_t TEveGeoShapeExtract::fRGBALine[4]. protected . Definition at line 28 of file TEveGeoShapeExtract.h. ◆ fRnrElements. Bool_t TEveGeoShapeExtract::fRnrElements. protected . Definition at line 30 of file TEveGeoShapeExtract.h. ◆ fRnrFrame. Bool_t TEveGeoShapeExtract::fRnrFrame. protected . Definition at line 31 of file TEveGeoShapeExtract.h. ◆ fRnrSelf. Bool_t TEveGeoShapeExtract::fRnrSelf. protected . Definition at line 29 of file TEveGeoShapeExtract.h. ◆ fShape. TGeoShape* TEveGeoShapeExtract::fShape. protected . Definition at line 33 of file TEveGeoShapeExtract.h. ◆ fTrans. Double_t TEveGeoShapeExtract::fTrans[16]. protected . Definition at line 26 of file TEveGeoShapeExtract.h. Libraries for TEveGeoShapeExtract:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveGeoShapeExtract.h; graf3d/eve/src/TEveGeoShapeExtract.cxx. TEveGeoShapeExtract. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShapeExtract.html:18767,Guid,Guide,18767,doc/master/classTEveGeoShapeExtract.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShapeExtract.html,1,['Guid'],['Guide']
Usability,"ct::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTGDoubleSlider::ChangeCursor(Event_t* event); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static voidTGDoubleSlider::FixBounds(Float_t& min, Float_t& max); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringTGDoubleSlider::GetSString() const; voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidSetPointerPos(Int_t z, Int_t opt = 0); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTripleHSlider.html:16086,Clear,ClearFlags,16086,root/html528/TGTripleHSlider.html,https://root.cern,https://root.cern/root/html528/TGTripleHSlider.html,8,['Clear'],['ClearFlags']
Usability,"ct::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); voidCopyText() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); Int_tGetCharacterIndex(Int_t xcoord); static const TGGC&GetDefaultSelectedBackgroundGC(); static const TGGC&GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInit(); virtual Bool_tIsCursorOutOfFrame(); voidTObject::MakeZombie(); voidPaste(); virtual voidPastePrimary(Window_t wid, Atom_t property, Bool_t del); virtual voidScrollByChar(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidUpdateOffset(). private:. TGTextEntry&operator=(const TGTextEntry&); TGTextEntry(const TGTextEntry&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextEntry.html:20230,Clear,ClearFlags,20230,root/html602/TGTextEntry.html,https://root.cern,https://root.cern/root/html602/TGTextEntry.html,2,['Clear'],['ClearFlags']
Usability,"ct::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSeqCollection::Changed(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTList::DeleteLink(TObjLink* lnk); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TObjLink**TList::DoSort(TObjLink** head, Int_t n); TObjLink*TList::FindLink(const TObject* obj, Int_t& idx) const; virtual const char*TCollection::GetCollectionEntryName(TObject* entry) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInit(const char* cl, void* object, const char* redo, const char* undo); TObjLink*TList::LinkAt(Int_t idx) const; Bool_tTList::LnkCompare(TObjLink* l1, TObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = __null); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = __null); virtual voidTCollection::PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. private:. TQCommand&operator=(const TQCommand&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:15748,undo,undo,15748,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"ct::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-12 16:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollectionPropertyBrowsable.html:9611,simpl,simply,9611,root/html534/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html534/TCollectionPropertyBrowsable.html,1,['simpl'],['simply']
Usability,"ct::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCollectionPropertyBrowsable.html:9592,simpl,simply,9592,root/html532/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html,1,['simpl'],['simply']
Usability,"ct::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); contrsuctor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 20882 2007-11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollectionPropertyBrowsable.html:9537,simpl,simply,9537,root/html526/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html526/TCollectionPropertyBrowsable.html,3,['simpl'],['simply']
Usability,"ct::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. UChar_t*fAllBits[fNbytes] array of UChars; UInt_tfNbitsHighest bit set + 1; UInt_tfNbytesNumber of UChars in fAllBits. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits(UInt_t nbits = 8); TBits constructor. All bits set to 0. TBits(const TBits& ); TBits copy constructor. TBits& operator=(const TBits& ); TBits assignment operator. ~TBits(); TBits destructor. void Clear(Option_t* option = """"); Clear the value. void Compact(); Reduce the storage used by the object to a minimun. UInt_t CountBits(UInt_t startBit = 0) const; Return number of bits set to 1 starting at bit startBit. void DoAndEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoOrEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoXorEqual(const TBits& rhs); Execute (*this) ^= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoFlip(); Execute ~(*this). void DoLeftShift(UInt_t shift); Execute the left shift operation. void DoRightShift(UInt_t shift); Execute the left shift operation. UInt_t FirstNullBit(UInt_t startBit = 0) const; Return position of first null bit (starting from position 0 and up). UInt_t LastNullBit(UInt_t startBit = 999999999) const; Return position of first null bit (starting from position 0 a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits.html:8105,Clear,Clear,8105,root/html602/TBits.html,https://root.cern,https://root.cern/root/html602/TBits.html,4,['Clear'],['Clear']
Usability,"ct; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfColDimensionsThe number of the dimensions for array (=-1 means it is a ""simple"" array); TStringfColName; Int_tfColOffset; Int_tfColSizeThe size of the selected column in bytes; TTable::EColumnTypefColTypedata type of the selected column; COMPAREMETHODfCompareMethodFunction to sort the original array; const char*fFirstParentRow! pointer to the internal array of TTable object;; Int_tfFirstRowfirst row of the table to be sorted; Int_t*fIndexArray""parsed"" indecis; Int_tfLastFoundThe index of the last found index within fSortIndex; TStringTNamed::fNameobject identifier; Int_tfNumberOfRowsnumber of rows of the table to be sorted; Long_tfParentRowSizeTo be filled from TTable::GetRowSize() method; const TTable*fParentTable!- the back pointer to the sorted table; SEARCHMETHODfSearchMethodFunction selected to search values; void**fSortIndexArray of pointers to columns of the sorted table; TStringTNamed::fTitleobject title; const Char_t*fsimpleArrayPointer to the ""simple"" array;. private:. union(anonymous)fValue. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TTableSorter. Function documentation; TTableSorter(); default ctor for RootCint dictionary. TTableSorter(const TTable& table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0). TTableSorter ctor sorts the input table along its column defined with colName. - colName - may be followed by the square brackets with integer number inside,; if that columm is an array (for example ""phys[3]"").; NO expression i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableSorter.html:12401,simpl,simple,12401,root/html602/TTableSorter.html,https://root.cern,https://root.cern/root/html602/TTableSorter.html,4,['simpl'],['simple']
Usability,"ctInfo (Int_t px, Int_t py) const override;  No object info yet. ;  ; Rgl::Range_t GetURange () const;  [uMin, uMax] ;  ; Rgl::Range_t GetVRange () const;  [vMin, vMax] ;  ; TClass * IsA () const override;  ; Bool_t IsConstrained () const;  Check is constrained. ;  ; Bool_t IsModified () const;  Something was changed in parametric equation (or constrained option was changed). ;  ; void Paint (Option_t *option) override;  Delegate paint. ;  ; void SetConstrained (Bool_t c);  Set constrained. ;  ; void SetModified (Bool_t m);  Set modified. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLParametricEquation.html:3220,Clear,Clear,3220,doc/master/classTGLParametricEquation.html,https://root.cern,https://root.cern/doc/master/classTGLParametricEquation.html,1,['Clear'],['Clear']
Usability,cted . Definition at line 265 of file TEveCalo.h. ◆ fCellPixelFontSize. Int_t TEveCaloLego::fCellPixelFontSize. protected . Definition at line 290 of file TEveCalo.h. ◆ fDrawHPlane. Bool_t TEveCaloLego::fDrawHPlane. protected . Definition at line 283 of file TEveCalo.h. ◆ fDrawNumberCellPixels. Int_t TEveCaloLego::fDrawNumberCellPixels. protected . Definition at line 289 of file TEveCalo.h. ◆ fFixedHeightValIn2DMode. Float_t TEveCaloLego::fFixedHeightValIn2DMode. protected . Definition at line 287 of file TEveCalo.h. ◆ fFontColor. Color_t TEveCaloLego::fFontColor. protected . Definition at line 267 of file TEveCalo.h. ◆ fGridColor. Color_t TEveCaloLego::fGridColor. protected . Definition at line 268 of file TEveCalo.h. ◆ fHasFixedHeightIn2DMode. Bool_t TEveCaloLego::fHasFixedHeightIn2DMode. protected . Definition at line 286 of file TEveCalo.h. ◆ fHPlaneVal. Float_t TEveCaloLego::fHPlaneVal. protected . Definition at line 284 of file TEveCalo.h. ◆ fNormalizeRebin. Bool_t TEveCaloLego::fNormalizeRebin. protected . Definition at line 277 of file TEveCalo.h. ◆ fNZSteps. Int_t TEveCaloLego::fNZSteps. protected . Definition at line 272 of file TEveCalo.h. ◆ fPixelsPerBin. Int_t TEveCaloLego::fPixelsPerBin. protected . Definition at line 276 of file TEveCalo.h. ◆ fPlaneColor. Color_t TEveCaloLego::fPlaneColor. protected . Definition at line 269 of file TEveCalo.h. ◆ fPlaneTransparency. Char_t TEveCaloLego::fPlaneTransparency. protected . Definition at line 270 of file TEveCalo.h. ◆ fProjection. EProjection_e TEveCaloLego::fProjection. protected . Definition at line 279 of file TEveCalo.h. ◆ fZAxisStep. Float_t TEveCaloLego::fZAxisStep. protected . Definition at line 273 of file TEveCalo.h. Libraries for TEveCaloLego:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveCalo.h; graf3d/eve/src/TEveCalo.cxx. TEveCaloLego. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloLego.html:50387,Guid,Guide,50387,doc/master/classTEveCaloLego.html,https://root.cern,https://root.cern/doc/master/classTEveCaloLego.html,1,['Guid'],['Guide']
Usability,"cted . Definition at line 93 of file MethodC50.h. ◆ fControlNoGlobalPruning. Bool_t TMVA::MethodC50::fControlNoGlobalPruning. protected . Definition at line 91 of file MethodC50.h. ◆ fControlSample. Double_t TMVA::MethodC50::fControlSample. protected . Definition at line 95 of file MethodC50.h. ◆ fControlSeed. Int_t TMVA::MethodC50::fControlSeed. protected . Definition at line 96 of file MethodC50.h. ◆ fControlSubset. Bool_t TMVA::MethodC50::fControlSubset. protected . Definition at line 88 of file MethodC50.h. ◆ fControlWinnow. Bool_t TMVA::MethodC50::fControlWinnow. protected . Definition at line 90 of file MethodC50.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodC50::fDataSetManager. private . Definition at line 79 of file MethodC50.h. ◆ fModel. ROOT::R::TRObject* TMVA::MethodC50::fModel. protected . Definition at line 106 of file MethodC50.h. ◆ fModelControl. ROOT::R::TRObject TMVA::MethodC50::fModelControl. protected . Definition at line 107 of file MethodC50.h. ◆ fMvaCounter. UInt_t TMVA::MethodC50::fMvaCounter. protected . Definition at line 99 of file MethodC50.h. ◆ fNTrials. UInt_t TMVA::MethodC50::fNTrials. protected . Definition at line 84 of file MethodC50.h. ◆ fRules. Bool_t TMVA::MethodC50::fRules. protected . Definition at line 85 of file MethodC50.h. ◆ IsModuleLoaded. Bool_t MethodC50::IsModuleLoaded = ROOT::R::TRInterface::Instance().Require(""C50""). staticprotected . Definition at line 100 of file MethodC50.h. ◆ ListOfVariables. std::vector<TString > TMVA::MethodC50::ListOfVariables. protected . Definition at line 108 of file MethodC50.h. ◆ predict. ROOT::R::TRFunctionImport TMVA::MethodC50::predict. protected . Definition at line 102 of file MethodC50.h. Libraries for TMVA::MethodC50:. [legend]; The documentation for this class was generated from the following files:; tmva/rmva/inc/TMVA/MethodC50.h; tmva/rmva/src/MethodC50.cxx. TMVAMethodC50. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodC50.html:35707,Guid,Guide,35707,doc/master/classTMVA_1_1MethodC50.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html,1,['Guid'],['Guide']
Usability,cted . MWM input modes. ; Definition at line 422 of file TGFrame.h. ◆ fMWMValue. UInt_t TGMainFrame::fMWMValue. protected . MWM decoration hints. ; Definition at line 420 of file TGFrame.h. ◆ fResourceName. TString TGMainFrame::fResourceName. protected . WM resource name. ; Definition at line 419 of file TGFrame.h. ◆ fWindowName. TString TGMainFrame::fWindowName. protected . window name ; Definition at line 415 of file TGFrame.h. ◆ fWMHeight. UInt_t TGMainFrame::fWMHeight. protected . WM height. ; Definition at line 426 of file TGFrame.h. ◆ fWMHeightInc. UInt_t TGMainFrame::fWMHeightInc. protected . WM height increments. ; Definition at line 432 of file TGFrame.h. ◆ fWMInitState. EInitialState TGMainFrame::fWMInitState. protected . WM initial state. ; Definition at line 433 of file TGFrame.h. ◆ fWMMaxHeight. UInt_t TGMainFrame::fWMMaxHeight. protected . WM max height. ; Definition at line 430 of file TGFrame.h. ◆ fWMMaxWidth. UInt_t TGMainFrame::fWMMaxWidth. protected . WM max width. ; Definition at line 429 of file TGFrame.h. ◆ fWMMinHeight. UInt_t TGMainFrame::fWMMinHeight. protected . WM min height. ; Definition at line 428 of file TGFrame.h. ◆ fWMMinWidth. UInt_t TGMainFrame::fWMMinWidth. protected . WM min width. ; Definition at line 427 of file TGFrame.h. ◆ fWMWidth. UInt_t TGMainFrame::fWMWidth. protected . WM width. ; Definition at line 425 of file TGFrame.h. ◆ fWMWidthInc. UInt_t TGMainFrame::fWMWidthInc. protected . WM width increments. ; Definition at line 431 of file TGFrame.h. ◆ fWMX. Int_t TGMainFrame::fWMX. protected . WM x position. ; Definition at line 423 of file TGFrame.h. ◆ fWMY. Int_t TGMainFrame::fWMY. protected . WM y position. ; Definition at line 424 of file TGFrame.h. Libraries for TGMainFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFrame.h; gui/gui/src/TGFrame.cxx. TGMainFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMainFrame.html:49666,Guid,Guide,49666,doc/master/classTGMainFrame.html,https://root.cern,https://root.cern/doc/master/classTGMainFrame.html,1,['Guid'],['Guide']
Usability,cted . Pointer to annotation pavetext. ; Definition at line 71 of file TTreePerfStats.h. ◆ fReadaheadSize. Int_t TTreePerfStats::fReadaheadSize. protected . Read-ahead cache size. ; Definition at line 54 of file TTreePerfStats.h. ◆ fReadCalls. Int_t TTreePerfStats::fReadCalls. protected . Number of read calls. ; Definition at line 53 of file TTreePerfStats.h. ◆ fRealNorm. Double_t TTreePerfStats::fRealNorm. protected . Real time scale factor for fGraphTime. ; Definition at line 57 of file TTreePerfStats.h. ◆ fRealTime. Double_t TTreePerfStats::fRealTime. protected . Real time. ; Definition at line 58 of file TTreePerfStats.h. ◆ fRealTimeAxis. TGaxis* TTreePerfStats::fRealTimeAxis. protected . Pointer to TGaxis object showing real-time. ; Definition at line 73 of file TTreePerfStats.h. ◆ fTree. TTree* TTreePerfStats::fTree. protected . ! Pointer to the Tree being monitored ; Definition at line 68 of file TTreePerfStats.h. ◆ fTreeCacheSize. Int_t TTreePerfStats::fTreeCacheSize. protected . TTreeCache buffer size. ; Definition at line 51 of file TTreePerfStats.h. ◆ fUnzipInputSize. Long64_t TTreePerfStats::fUnzipInputSize. protected . Compressed bytes seen by the decompressor. ; Definition at line 62 of file TTreePerfStats.h. ◆ fUnzipObjSize. Long64_t TTreePerfStats::fUnzipObjSize. protected . Uncompressed bytes produced by the decompressor. ; Definition at line 63 of file TTreePerfStats.h. ◆ fUnzipTime. Double_t TTreePerfStats::fUnzipTime. protected . Time spent uncompressing the data. ; Definition at line 61 of file TTreePerfStats.h. ◆ fWatch. TStopwatch* TTreePerfStats::fWatch. protected . TStopwatch pointer. ; Definition at line 72 of file TTreePerfStats.h. Libraries for TTreePerfStats:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TTreePerfStats.h; tree/treeplayer/src/TTreePerfStats.cxx. TTreePerfStats. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:40 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats.html:37767,Guid,Guide,37767,doc/master/classTTreePerfStats.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html,1,['Guid'],['Guide']
Usability,"cted Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TGuiBldDragManagerRepeatTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGuiBldDragManagerRepeatTimer(). TGuiBldDragManagerRepeatTimer::TGuiBldDragManagerRepeatTimer ; (; TGuiBldDragManager * ; m, . Long_t ; ms . ). inline . Definition at line 675 of file TGuiBldDragManager.cxx. Member Function Documentation. ◆ Notify(). Bool_t TGuiBldDragManagerRepeatTimer::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Implements TSysEvtHandler.; Definition at line 677 of file TGuiBldDragManager.cxx. Member Data Documentation. ◆ fManager. TGuiBldDragManager* TGuiBldDragManagerRepeatTimer::fManager. private . Definition at line 672 of file TGuiBldDragManager.cxx. gui/guibuilder/src/TGuiBldDragManager.cxx. TGuiBldDragManagerRepeatTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManagerRepeatTimer.html:18601,Guid,Guide,18601,doc/master/classTGuiBldDragManagerRepeatTimer.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManagerRepeatTimer.html,1,['Guid'],['Guide']
Usability,"cted number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype dataset and must contain; integer values in the range [0,Nevt-1]. void resampleData(Double_t& ratio); Rescale existing output buffer with given ratio. Int_t defaultPrintContents(Option_t* opt) const; Define default contents when printing. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Define default print style. Bool_t isValid() const; If true generator context is in a valid state. void setVerbose(Bool_t verbose = kTRUE); Set/clear verbose messaging. Bool_t isVerbose() const; If true verbose messaging is active. void Print(Option_t* options = 0) const; Print context information on stdout. void generateEvent(RooArgSet& theEvent, Int_t remaining). » Last changed: Mon Dec 7 13:45:38 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsGenContext.html:9980,clear,clear,9980,root/html526/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html526/RooAbsGenContext.html,1,['clear'],['clear']
Usability,"cted number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype dataset and must contain; integer values in the range [0,Nevt-1]. void resampleData(Double_t& ratio); Rescale existing output buffer with given ratio. Int_t defaultPrintContents(Option_t* opt) const; Define default contents when printing. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Define default print style. Bool_t isValid() const; If true generator context is in a valid state. void setVerbose(Bool_t verbose = kTRUE); Set/clear verbose messaging. Bool_t isVerbose() const; If true verbose messaging is active. void Print(Option_t* options = 0) const; Print context information on stdout. void generateEvent(RooArgSet& theEvent, Int_t remaining). » Last changed: Mon Jul 4 15:21:22 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsGenContext.html:10326,clear,clear,10326,root/html530/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html530/RooAbsGenContext.html,1,['clear'],['clear']
Usability,"cted number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype dataset and must contain; integer values in the range [0,Nevt-1]. void resampleData(Double_t& ratio); Rescale existing output buffer with given ratio. Int_t defaultPrintContents(Option_t* opt) const; Define default contents when printing. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Define default print style. Bool_t isValid() const; If true generator context is in a valid state. void setVerbose(Bool_t verbose = kTRUE); Set/clear verbose messaging. Bool_t isVerbose() const; If true verbose messaging is active. void Print(Option_t* options = 0) const; Print context information on stdout. void generateEvent(RooArgSet& theEvent, Int_t remaining). » Last changed: Sat Oct 9 06:57:57 2010 » Last generated: 2010-10-09 06:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsGenContext.html:10011,clear,clear,10011,root/html528/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html528/RooAbsGenContext.html,1,['clear'],['clear']
Usability,"cted object or on; all canvases, change gStyle. Activate the style manager by selecting Edit menu / Style...; in the canvas window. The Style Manager interface is composed of two parts:; - the top level interface that manages a list of styles;; - the style editor, which deals with the current style settings. /*. */. The combo box 'Available Styles' contains the list of available; styles for the current ROOT session and shows the currently; selected one. The field on the right shows the setting of the gStyle.; You can set the global variable gStyle to the selected style by; clicking on the button in the middle.; The group frame 'Apply on' displays information for the currently; selected canvas and object in the ROOT session. This selection might; be changed by clicking on another object with the middle mouse; button. You have a choice to apply a style on the selected object or; on all available canvases.; WARNING: You cannot undo the changes after applying the style! If; you are not sure of that action, it may be better to see a preview; of what you are going to apply.; If the check button 'Preview' is selected, a preview of the selected; canvas according to the selected style will be shown. The selection; of the next check button 'Run Time Preview' will apply updates of; the preview any time a value of the selected style is changed. For; drawings that take a time it is better to disable this option. Create a new style:; A new style can be created via the Style menu/New... or the toolbar.; A clone of the selected style will be used as a base of the new; style. All its values can be modified via the style editor later.; The dialog that appears will ask for the name and description of the; new style. Import a style (from a macro):; A style macro can be imported at any time. The new imported style in; the ROOT session will become the selected one. Import a style (from a canvas):; You can do that selecting the Style menu/Import from.../Canvas or; the corresponding Tool b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyleManager.html:1422,undo,undo,1422,root/html528/TStyleManager.html,https://root.cern,https://root.cern/root/html528/TStyleManager.html,6,['undo'],['undo']
Usability,"cted ones. Selection for shapes and matrices is split into categories represented by top-level list tree items for: boxes, tubes, translations, rotations, etc. Selection dialogs for different TGeo objects. Once a selection is made and the dialog is closed, the selected item name will appear in the corresponding label and the button Edit will start the object editor in a transient frame. Closing these transient frames will not delete, but just hide existing opened editors for later reuse. Their lifetime is determined by the canvas to which the manager editor is attached to, since these will be destroyed together.; ; For most editors, the functionalities Apply and Undo are provided.; For shapes, changing any of the shape parameters will activate the “Apply” button only if the check button “Delayed draw” is checked, otherwise the changes are immediately applied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The “Undo” button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the “Undo” does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the user responsibility. Adding materials as components of a mixture is not supported in this version.; The elements that were added to the mixture appear in the bottom of the mixture editor. The operations performed on mixture are not undoable.; 18.11.4 Creation of New Objects; As described above, all geometry object creators are accessible within ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1036539,Undo,Undo,1036539,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Undo'],['Undo']
Usability,"cted.; Definition at line 92 of file TEveGeoShape.h. ◆ IsA(). TClass * TEveGeoShapeProjected::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 96 of file TEveGeoShape.h. ◆ operator=(). TEveGeoShapeProjected & TEveGeoShapeProjected::operator= ; (; const TEveGeoShapeProjected & ; ). private . ◆ SetDepthLocal(). void TEveGeoShapeProjected::SetDepthLocal ; (; Float_t ; d). overrideprotectedvirtual . This should never be called as this class is only used for 3D projections. ; The implementation is required as this metod is abstract. Just emits a warning if called. ; Reimplemented from TEveProjected.; Definition at line 484 of file TEveGeoShape.cxx. ◆ SetProjection(). void TEveGeoShapeProjected::SetProjection ; (; TEveProjectionManager * ; proj, . TEveProjectable * ; model . ). overridevirtual . This is virtual method from base-class TEveProjected. ; Reimplemented from TEveProjected.; Definition at line 492 of file TEveGeoShape.cxx. ◆ Streamer(). void TEveGeoShapeProjected::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveGeoShapeProjected::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file TEveGeoShape.h. ◆ UpdateProjection(). void TEveGeoShapeProjected::UpdateProjection ; (; ). overridevirtual . This is virtual method from base-class TEveProjected. ; Implements TEveProjected.; Definition at line 504 of file TEveGeoShape.cxx. Member Data Documentation. ◆ fBuff. TBuffer3D* TEveGeoShapeProjected::fBuff. protected . Definition at line 82 of file TEveGeoShape.h. Libraries for TEveGeoShapeProjected:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveGeoShape.h; graf3d/eve/src/TEveGeoShape.cxx. TEveGeoShapeProjected. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShapeProjected.html:42281,Guid,Guide,42281,doc/master/classTEveGeoShapeProjected.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShapeProjected.html,1,['Guid'],['Guide']
Usability,"cters like ~.Definition TSystem.cxx:1274; TView::Classstatic TClass * Class(); TVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG.Definition TVirtualPS.h:30; TVirtualPadEditor::GetPadEditorstatic TVirtualPadEditor * GetPadEditor(Bool_t load=kTRUE)Returns the pad editor dialog. Static method.Definition TVirtualPadEditor.cxx:74; TVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas.Definition TVirtualPadPainter.h:19; TVirtualPadPainter::LockPaintervirtual void LockPainter()Empty definition.Definition TVirtualPadPainter.cxx:51; TVirtualPadPainter::PadPainterstatic TVirtualPadPainter * PadPainter(Option_t *opt="""")Create a pad painter of specified type.Definition TVirtualPadPainter.cxx:58; TVirtualPadPainter::SelectDrawablevirtual void SelectDrawable(Int_t device)=0; TVirtualPadPainter::InitPaintervirtual void InitPainter()Empty definition.Definition TVirtualPadPainter.cxx:37; TVirtualPad::TContextsmall helper class to store/restore gPad context in TPad methodsDefinition TVirtualPad.h:61; TVirtualPad::TContext::GetSavedauto GetSaved() constDefinition TVirtualPad.h:69; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::Classstatic TClass * Class(); TVirtualX::kCopy@ kCopyDefinition TVirtualX.h:49; TVirtualX::kInvert@ kInvertDefinition TVirtualX.h:49; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; v@ vDefinition rootcling_impl.cxx:3699; Drawth1 Draw(). graf2dgpadsrcTCanvas.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:134616,Guid,Guide,134616,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ction Documentation. ◆ Class(). static TClass * TGFSComboBox::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGFSComboBox::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGFSComboBox::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 89 of file TGFSComboBox.h. ◆ DeclFileName(). static const char * TGFSComboBox::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 89 of file TGFSComboBox.h. ◆ IsA(). TClass * TGFSComboBox::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGComboBox.; Definition at line 89 of file TGFSComboBox.h. ◆ SavePrimitive(). void TGFSComboBox::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a file system combo box as a C++ statement(s) on output stream out. ; Reimplemented from TGComboBox.; Definition at line 402 of file TGFSComboBox.cxx. ◆ Streamer(). void TGFSComboBox::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGComboBox. ◆ StreamerNVirtual(). void TGFSComboBox::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TGFSComboBox.h. ◆ Update(). void TGFSComboBox::Update ; (; const char * ; path). virtual . Update file system combo box. ; Definition at line 332 of file TGFSComboBox.cxx. Member Data Documentation. ◆ fLbc. std::vector<Lbc_t> TGFSComboBox::fLbc. private . ! list of default entries ; Definition at line 79 of file TGFSComboBox.h. Libraries for TGFSComboBox:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFSComboBox.h; gui/gui/src/TGFSComboBox.cxx. TGFSComboBox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFSComboBox.html:38390,Guid,Guide,38390,doc/master/classTGFSComboBox.html,https://root.cern,https://root.cern/doc/master/classTGFSComboBox.html,1,['Guid'],['Guide']
Usability,"ction and moves the cursor to the end of the line. ; If necessary the text is truncated to fit MaxLength(). See also GetText(), InsertText(), SetText(), RemoveText(). ; Definition at line 1689 of file TGTextEntry.cxx. ◆ Backspace(). void TGTextEntry::Backspace ; (; ). Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ; If a text has been marked by the user (e.g. by clicking and dragging) the cursor will be put at the beginning of the marked text and the marked text will be removed. See also Del(). ; Definition at line 873 of file TGTextEntry.cxx. ◆ Class(). static TClass * TGTextEntry::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextEntry::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextEntry::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 184 of file TGTextEntry.h. ◆ Clear(). void TGTextEntry::Clear ; (; Option_t * ; option = """"). overridevirtual . Clears up the text entry. ; Reimplemented from TObject.; Definition at line 972 of file TGTextEntry.cxx. ◆ CopyText(). void TGTextEntry::CopyText ; (; ); const. protected . Copies the marked text to the clipboard, if there is any and GetEchoMode() is kNormal. ; See also Cut() Paste(). ; Definition at line 933 of file TGTextEntry.cxx. ◆ CursorLeft(). void TGTextEntry::CursorLeft ; (; Bool_t ; mark = kFALSE, . Int_t ; steps = 1 . ). Moves the cursor leftwards one or more characters. ; See also CursorRight(). ; Definition at line 835 of file TGTextEntry.cxx. ◆ CursorOutDown(). void TGTextEntry::CursorOutDown ; (; ). virtual . This signal is emitted when cursor is going out of bottom side. ; Definition at line 458 of file TGTextEntry.cxx. ◆ CursorOutLeft(). void TGTextEntry::CursorOutLeft ; (; ). virtual . This signal is emitted when cursor is going out of left side. ; Definition at line 434 of file TGTextEntry",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:44687,Clear,Clear,44687,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['Clear'],['Clear']
Usability,"ction class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr)Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (...Definition TF1.cxx:3355; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; c1return c1Definition legend1.C:41; f1TF1 * f1Definition legend1.C:11; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; combinedFitDefinition combinedFit.py:1; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28. tutorialsfitcombinedFit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/combinedFit_8C_source.html:9881,simpl,simple,9881,doc/master/combinedFit_8C_source.html,https://root.cern,https://root.cern/doc/master/combinedFit_8C_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"ction could be called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormulaManager.html:2516,Clear,Clear,2516,doc/master/classTTreeFormulaManager.html,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html,1,['Clear'],['Clear']
Usability,"ction declared in ClassDef. ; Definition at line 1461 of file TString.cxx. ◆ Printf(). void Printf ; (; const char * ; fmt, .  ; ... . ). Formats a string in a circular formatting buffer and prints the string. ; Appends a newline. If gPrintViaErrorHandler is true it will print via the currently active ROOT error handler. ; Definition at line 2503 of file TString.cxx. ◆ rotl64(). uint64_t rotl64 ; (; uint64_t ; x, . int8_t ; r . ). inline . Definition at line 720 of file TString.cxx. ◆ SlowFormat(). static char * SlowFormat ; (; const char * ; format, . va_list ; ap, . int ; hint . ). static . Format a string in a formatting buffer (using a printf style format descriptor). ; Definition at line 2394 of file TString.cxx. ◆ StrDup(). char * StrDup ; (; const char * ; str). Duplicate the string str. ; The returned string has to be deleted by the user. ; Definition at line 2557 of file TString.cxx. ◆ Strip(). char * Strip ; (; const char * ; s, . char ; c . ). Strip leading and trailing c (blanks by default) from a string. ; The returned string has to be deleted by the user. ; Definition at line 2521 of file TString.cxx. ◆ SwapInt(). static UInt_t SwapInt ; (; UInt_t ; x). inlinestatic . Definition at line 556 of file TString.cxx. ◆ ToLower(). TString ToLower ; (; const TString & ; str). Return a lower-case version of str. ; Definition at line 1497 of file TString.cxx. ◆ ToUpper(). TString ToUpper ; (; const TString & ; str). Return an upper-case version of str. ; Definition at line 1511 of file TString.cxx. ◆ UnEscChar(). int UnEscChar ; (; const char * ; src, . char * ; dst, . int ; dstlen, . char * ; specchars, . char ; escchar . ). Un-escape specchars in src from escchar and copy to dst. ; Definition at line 2617 of file TString.cxx. Variable Documentation. ◆ kHashShift. const UInt_t kHashShift = 5. Definition at line 68 of file TString.cxx. corebasesrcTString.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx.html:9245,Guid,Guide,9245,doc/master/TString_8cxx.html,https://root.cern,https://root.cern/doc/master/TString_8cxx.html,1,['Guid'],['Guide']
Usability,"ction will be written in split mode, e.g. if it contains objects of; any types deriving from TTrack this function will sort the objects; based on their type and store them in separate branches in split; mode. ==> branch->SetAddress(Void *address); In case of dynamic structures changing with each entry for example, one must; redefine the branch address before filling the branch again.; This is done via the TBranch::SetAddress member function. ==> tree->Fill(); loops on all defined branches and for each branch invokes the Fill function. See also the class TNtuple (a simple Tree with branches of floats); and the class TNtupleD (a simple Tree with branches of doubles). Adding a Branch to an Existing Tree. You may want to add a branch to an existing tree. For example,; if one variable in the tree was computed with a certain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tree headers; are saved. void tree3AddBranch(){; TFile f(""tree3.root"", ""update"");. Float_t new_v;; TTree *t3 = (TTree*)f->Get(""t3"");; TBranch *newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");. //read the number of entries in the t3; Long64_t nentries = t3->GetEntries();. for (Long64_t i = 0; i < nentries; i++){; new_v= gRandom->Gaus(0, 1);; newBranch->Fill();; }; // save only the new version of the tree; t3->Write("""", TObject::kOverwrite);; }; Adding a branch is often not possible because the tree is in a read-only; file and you do not have permission to save the modified tree with the; new branch. Even if you do have the permission, you risk losing the; original tree with an unsuccessful attempt to save the modification.; Since trees are usually large, adding a branch could extend it over the; 2GB limit. In this case, the attempt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:7788,simpl,simple,7788,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['simpl'],['simple']
Usability,"ction& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddToRange(const char* rangeName, const char* stateNameList); virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(const char* label); Bool_tdefineType(const char* label, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCategory.html:2011,clear,clearValueDirty,2011,root/html526/RooCategory.html,https://root.cern,https://root.cern/root/html526/RooCategory.html,1,['clear'],['clearValueDirty']
Usability,"ction. ; startStarting point for iteration. ; maxIterMaximum number of iterations, passed to Solve(int,double,double) ; absTolAbsolute tolerance, as in Solve(int,double,double) ; relTolRelative tolerance, passed to Solve(int,double,double) . Returnstrue if a root was found. Retrieve the result using Root(). ; Definition at line 219 of file RootFinder.h. ◆ Solve() [2/3]. template<class Function > . bool ROOT::Math::RootFinder::Solve ; (; Function & ; f, . double ; min, . double ; max, . int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). Solve f(x) = 0 numerically. ; Parameters. fFunction whose root should be found. ; minMinimum allowed value of x. ; maxMaximum allowed value of x. ; maxIterMaximum number of iterations, passed to Solve(int,double,double) ; absTolAbsolute tolerance, as in Solve(int,double,double) ; relTolRelative tolerance, passed to Solve(int,double,double) . Returnstrue if a root was found. Retrieve the result using Root(). ; Definition at line 240 of file RootFinder.h. ◆ Solve() [3/3]. bool ROOT::Math::RootFinder::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). inline . Compute the roots iterating until the estimate of the Root is within the required tolerance returning the iteration Status. ; Definition at line 134 of file RootFinder.h. ◆ Status(). int ROOT::Math::RootFinder::Status ; (; ); const. inline . Return the status of the last estimate of the Root = 0 OK, not zero failure. ; Definition at line 163 of file RootFinder.h. Member Data Documentation. ◆ fSolver. IRootFinderMethod* ROOT::Math::RootFinder::fSolver. private . Definition at line 195 of file RootFinder.h. Libraries for ROOT::Math::RootFinder:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/RootFinder.h; math/mathcore/src/RootFinder.cxx. ROOTMathRootFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html:8590,Guid,Guide,8590,doc/master/classROOT_1_1Math_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RootFinder.html,1,['Guid'],['Guide']
Usability,"ction. It receives an accumulator (acc) and a column value (x). The variable acc is shared among the; // calls, so the function has to specify how the value has to be aggregated in the accumulator.; auto aggregator = [](double acc, double x) { return acc * x; };; ; // If multithread is enabled, the aggregator function will be called by more threads and will produce a vector of; // partial accumulators. The merger function performs the final aggregation of these partial results.; auto merger = [](std::vector<double> &accumulators) {; auto size = accumulators.size();; for (int i = 1; i < size; ++i) {; accumulators[0] *= accumulators[i];; }; };; ; // The accumulator is initialized at this value by every thread.; double initValue = 1.;; ; // Multiplies all elements of the column ""x""; auto result = d.Aggregate(aggregator, merger, columnName, initValue);; ; std::cout << *result << std::endl;; }; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; xDouble_t x[n]Definition legend1.C:17; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ; 120; DateJuly 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN), Massimo Tumolo (Politecnico di Torino) ; Definition in file df023_aggregate.C. tutorialsdataframedf023_aggregate.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df023__aggregate_8C.html:2667,Guid,Guide,2667,doc/master/df023__aggregate_8C.html,https://root.cern,https://root.cern/doc/master/df023__aggregate_8C.html,1,['Guid'],['Guide']
Usability,ction. RooTFnBinding. RooAbsString; ←. RooStringVar. RooAbsBinning; ←. RooBinning. RooLinTransBinning. RooParamBinning. RooRangeBinning. RooUniformBinning. RooAbsData; ←. RooDataHist. RooDataSet. RooTreeData. RooAbsDataStore; ←. RooCompositeDataStore. RooTreeDataStore. RooAbsGenContext; ←. RooAddGenContext. RooConvGenContext. RooEffGenContext. RooGenContext. RooProdGenContext. RooSimGenContext. RooAbsMCStudyModule; ←. RooChi2MCSModule. RooDLLSignificanceMCSModule. RooRandomizeParamMCSModule. RooStats::UpperLimitMCSModule. RooAbsNumGenerator; ←. RooAcceptReject. RooFoamGenerator. RooAbsStudy; ←. RooGenFitStudy. RooArgProxy; ←. RooCategoryProxy. RooRealProxy. RooClassFactory. RooCmdArg. RooCustomizer. RooDouble. RooFactoryWSTool. RooFitResult. RooInt. RooMCStudy. RooMapCatEntry. RooNameReg. RooPlot. RooSimWSTool. RooSimWSTool::SplitRule. RooStats::BayesianCalculator. RooStats::ConfInterval; ←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::FeldmanCousins. RooStats::HLFactory. RooStats::HybridCalculator. RooStats::HybridPlot. RooStats::HypoTestInverter. RooStats::HypoTestInverterPlot. RooStats::HypoTestResult; ←. RooStats::HybridResult. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::ModelConfig. RooStats::NeymanConstruction. RooStats::ProfileLikelihoodCalculator. RooStats::SPlot. RooStats::SamplingDistPlot. RooStats::SamplingDistribution. RooStudyManager. RooStudyPackage. RooTObjWrap. RooTable; ←. Roo1DTable. RooWorkspace. TAttParticle. TAxis. TAxis3D. TBenchmark. TBranch; ←. TBranchClones. TBranchElement. TBranchObject. TBranchRef. TBranchSTL. THbookBranch. TBrowser. TBrowserPlugin. TChainElement. TClassTree. TColor. TColorWheel. TContextMenu. TControlBarButton; ←. TControlBar. TCut. TDSet; ←. TDSetProxy. TDSetElement. TDataSet; ←. TChair; ←. TColumnView. TFileSet.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassHierarchy.html:76627,Simpl,SimpleInterval,76627,root/html526/ClassHierarchy.html,https://root.cern,https://root.cern/root/html526/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,ction. private . inverse activation function for this layer ; Definition at line 652 of file NeuralNet.h. ◆ m_isInputLayer. bool TMVA::DNN::LayerData::m_isInputLayer. private . is this layer an input layer ; Definition at line 654 of file NeuralNet.h. ◆ m_itConstWeightBegin. const_iterator_type TMVA::DNN::LayerData::m_itConstWeightBegin. private . const iterator to the first weight of this layer in the weight vector ; Definition at line 648 of file NeuralNet.h. ◆ m_itDropOut. const_dropout_iterator TMVA::DNN::LayerData::m_itDropOut. private . iterator to a container indicating if the corresponding node is to be dropped ; Definition at line 645 of file NeuralNet.h. ◆ m_itGradientBegin. iterator_type TMVA::DNN::LayerData::m_itGradientBegin. private . iterator to the first gradient of this layer in the gradient vector ; Definition at line 649 of file NeuralNet.h. ◆ m_itInputBegin. const_iterator_type TMVA::DNN::LayerData::m_itInputBegin. private . iterator to the first of the nodes in the input node vector ; Definition at line 639 of file NeuralNet.h. ◆ m_itInputEnd. const_iterator_type TMVA::DNN::LayerData::m_itInputEnd. private . iterator to the end of the nodes in the input node vector ; Definition at line 640 of file NeuralNet.h. ◆ m_size. size_t TMVA::DNN::LayerData::m_size. private . Definition at line 637 of file NeuralNet.h. ◆ m_valueGradients. std::vector<double> TMVA::DNN::LayerData::m_valueGradients. private . stores the gradients of the values (nodes) ; Definition at line 643 of file NeuralNet.h. ◆ m_values. std::vector<double> TMVA::DNN::LayerData::m_values. private . stores the values of the nodes in this layer ; Definition at line 644 of file NeuralNet.h. Libraries for TMVA::DNN::LayerData:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/NeuralNet.h; tmva/tmva/src/NeuralNet.cxx. TMVADNNLayerData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:19133,Guid,Guide,19133,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['Guid'],['Guide']
Usability,"ction::begin ; (; ); const. inline . Definition at line 253 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 432 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 282 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 392 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 76 of file RooAbsCollection.h. ◆ contains(). bool RooAbsCollection::contains ; (; const RooAbsArg & ; var); const. inline . Check if collection contains an a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:36176,clear,clearStructureTags,36176,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['clear'],['clearStructureTags']
Usability,"ction::begin ; (; ); const. inline . Definition at line 276 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 455 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 305 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 415 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 76 of file RooAbsCollection.h. ◆ contains(). bool RooAbsCollection::contains ; (; const RooAbsArg & ; var); const. inline . Check if collection contains an a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:36950,clear,clearStructureTags,36950,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['clear'],['clearStructureTags']
Usability,"ction< FuncObj, MemFuncPtr >::WrappedMemMultiFunction ; (; FuncObj & ; obj, . MemFuncPtr ; memFn, . unsigned int ; dim = 1 . ). inline . construct from the pointer to the object and the member function ; Definition at line 190 of file WrappedFunction.h. Member Function Documentation. ◆ Clone(). template<typename FuncObj , typename MemFuncPtr > . WrappedMemMultiFunction * ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >::Clone ; (; ); const. inlineoverridevirtual . clone (required by the interface) ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Definition at line 199 of file WrappedFunction.h. ◆ DoEval(). template<typename FuncObj , typename MemFuncPtr > . double ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >::DoEval ; (; const double * ; x); const. inlineoverrideprivate . Definition at line 208 of file WrappedFunction.h. ◆ NDim(). template<typename FuncObj , typename MemFuncPtr > . unsigned int ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >::NDim ; (; ); const. inlineoverridevirtual . Retrieve the dimension of the function. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Definition at line 204 of file WrappedFunction.h. Member Data Documentation. ◆ fDim. template<typename FuncObj , typename MemFuncPtr > . unsigned int ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >::fDim. private . Definition at line 215 of file WrappedFunction.h. ◆ fMemFunc. template<typename FuncObj , typename MemFuncPtr > . MemFuncPtr ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >::fMemFunc. private . Definition at line 214 of file WrappedFunction.h. ◆ fObj. template<typename FuncObj , typename MemFuncPtr > . FuncObj* ROOT::Math::WrappedMemMultiFunction< FuncObj, MemFuncPtr >::fObj. private . Definition at line 213 of file WrappedFunction.h. math/mathcore/inc/Math/WrappedFunction.h. ROOTMathWrappedMemMultiFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemMultiFunction.html:3780,Guid,Guide,3780,doc/master/classROOT_1_1Math_1_1WrappedMemMultiFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMemMultiFunction.html,1,['Guid'],['Guide']
Usability,"ction="""", const char *hint="""", const char *type=""button"");  Create control bar button. ;  ;  ~TControlBarButton () override;  ; virtual void Action ();  Execute control bar button command. ;  ; virtual void Create ();  ; virtual const char * GetAction () const;  ; virtual Int_t GetType () const;  ; TClass * IsA () const override;  ; virtual void SetAction (const char *action);  Set action to be executed by this button. ;  ; virtual void SetType (const char *type);  Set button type. ;  ; virtual void SetType (Int_t type);  Set button type. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBarButton.html:2314,Clear,Clear,2314,doc/master/classTControlBarButton.html,https://root.cern,https://root.cern/doc/master/classTControlBarButton.html,1,['Clear'],['Clear']
Usability,"ctionBDT(). TMVA::AbsoluteDeviationLossFunctionBDT::AbsoluteDeviationLossFunctionBDT ; (; ). inline . Definition at line 264 of file LossFunction.h. ◆ ~AbsoluteDeviationLossFunctionBDT(). TMVA::AbsoluteDeviationLossFunctionBDT::~AbsoluteDeviationLossFunctionBDT ; (; ). inline . Definition at line 265 of file LossFunction.h. Member Function Documentation. ◆ Fit(). Double_t TMVA::AbsoluteDeviationLossFunctionBDT::Fit ; (; std::vector< LossFunctionEventInfo > & ; evs). virtual . absolute deviation BDT, determine the fit value for the terminal node based upon the events in the terminal node ; Implements TMVA::LossFunctionBDT.; Definition at line 591 of file LossFunction.cxx. ◆ Init(). void TMVA::AbsoluteDeviationLossFunctionBDT::Init ; (; std::map< const TMVA::Event *, LossFunctionEventInfo > & ; evinfomap, . std::vector< double > & ; boostWeights . ). virtual . absolute deviation BDT, initialize the targets and prepare for the regression ; Implements TMVA::LossFunctionBDT.; Definition at line 536 of file LossFunction.cxx. ◆ SetTargets(). void TMVA::AbsoluteDeviationLossFunctionBDT::SetTargets ; (; std::vector< const TMVA::Event * > & ; evs, . std::map< const TMVA::Event *, LossFunctionEventInfo > & ; evinfomap . ). virtual . absolute deviation BDT, set the targets for a collection of events ; Implements TMVA::LossFunctionBDT.; Definition at line 559 of file LossFunction.cxx. ◆ Target(). Double_t TMVA::AbsoluteDeviationLossFunctionBDT::Target ; (; LossFunctionEventInfo & ; e). virtual . absolute deviation BDT, set the target for a single event ; Implements TMVA::LossFunctionBDT.; Definition at line 580 of file LossFunction.cxx. Libraries for TMVA::AbsoluteDeviationLossFunctionBDT:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/LossFunction.h; tmva/tmva/src/LossFunction.cxx. TMVAAbsoluteDeviationLossFunctionBDT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html:4167,Guid,Guide,4167,doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html,1,['Guid'],['Guide']
Usability,"ctionTemplates.cxx. ◆ AddLast() [2/2]. void TListOfFunctionTemplates::AddLast ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add object at the end of the list and also store option. ; Storing an option is useful when one wants to change the behaviour of an object a little without having to create a complete new copy of the object. This feature is used, for example, by the Draw() method. It allows the same object to be drawn in different ways. ; Reimplemented from THashList.; Definition at line 99 of file TListOfFunctionTemplates.cxx. ◆ Class(). static TClass * TListOfFunctionTemplates::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TListOfFunctionTemplates::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TListOfFunctionTemplates::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 87 of file TListOfFunctionTemplates.h. ◆ Clear(). void TListOfFunctionTemplates::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the list. ; Does not delete the objects unless the THashList is the owner (set via SetOwner()). ; Reimplemented from THashList.; Definition at line 154 of file TListOfFunctionTemplates.cxx. ◆ DeclFileName(). static const char * TListOfFunctionTemplates::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 87 of file TListOfFunctionTemplates.h. ◆ Delete(). void TListOfFunctionTemplates::Delete ; (; Option_t * ; option = """"). overridevirtual . Delete all TFunction object files. ; Reimplemented from THashList.; Definition at line 164 of file TListOfFunctionTemplates.cxx. ◆ FindObject() [1/3]. TObject * THashList::FindObject ; (; const char * ; name); const. overridevirtual . Find object using its name. ; Uses the hash value returned by the TString::Hash() after converting name to a TString. ; Reimplemented from TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctionTemplates.html:26763,Clear,Clear,26763,doc/master/classTListOfFunctionTemplates.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html,1,['Clear'],['Clear']
Usability,"ctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFunctionWrapper Class Reference. ; wrapper to a multi-dim function without derivatives for multi roots algorithm ; Definition at line 57 of file GSLMultiRootFunctionWrapper.h. Public Member Functions;  GSLMultiRootFunctionWrapper ();  ; gsl_multiroot_function * GetFunctions ();  ; template<class FuncVector > ; void SetFunctions (const FuncVector &f, unsigned int n);  Fill gsl function structure from a C++ function iterator and size and number of residuals. ;  . Private Attributes; gsl_multiroot_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiRootFunctionWrapper(). ROOT::Math::GSLMultiRootFunctionWrapper::GSLMultiRootFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLMultiRootFunctionWrapper.h. Member Function Documentation. ◆ GetFunctions(). gsl_multiroot_function * ROOT::Math::GSLMultiRootFunctionWrapper::GetFunctions ; (; ). inline . Definition at line 79 of file GSLMultiRootFunctionWrapper.h. ◆ SetFunctions(). template<class FuncVector > . void ROOT::Math::GSLMultiRootFunctionWrapper::SetFunctions ; (; const FuncVector & ; f, . unsigned int ; n . ). inline . Fill gsl function structure from a C++ function iterator and size and number of residuals. ; Definition at line 71 of file GSLMultiRootFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_multiroot_function ROOT::Math::GSLMultiRootFunctionWrapper::fFunc. private . Definition at line 84 of file GSLMultiRootFunctionWrapper.h. math/mathmore/src/GSLMultiRootFunctionWrapper.h. ROOTMathGSLMultiRootFunctionWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html:1955,Guid,Guide,1955,doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html,1,['Guid'],['Guide']
Usability,"ctions.clear();; 2649 }; 2650}; 2651 ; 2652namespace {; 2653 // TMemberInfo; 2654 // Local helper class to be able to compare data member represented by; 2655 // 2 distinct TStreamerInfos; 2656 class TMemberInfo {; 2657 public:; 2658 TClass *fParent;; 2659 TString fName;; 2660 TString fClassName;; 2661 TString fComment;; 2662 Int_t fDataType;; 2663 ; 2664 TMemberInfo(TClass *parent) : fParent(parent) {};; 2665 ; 2666 void SetDataType(Int_t datatype) {; 2667 fDataType = datatype;; 2668 }; 2669 ; 2670 void SetName(const char *name) {; 2671 fName = name;; 2672 }; 2673 void SetClassName(const char *name) {; 2674 fClassName = TClassEdit::ResolveTypedef(TClassEdit::ShortType( name, TClassEdit::kDropStlDefault | TClassEdit::kDropStd ).c_str(),kTRUE);; 2675 }; 2676 void SetComment(const char *title) {; 2677 const char *left = strstr(title,""["");; 2678 if (left) {; 2679 const char *right = strstr(left,""]"");; 2680 if (right) {; 2681 ++left;; 2682 fComment.Append(left,right-left);; 2683 }; 2684 }; 2685 }; 2686 void Clear() {; 2687 fName.Clear();; 2688 fClassName.Clear();; 2689 fComment.Clear();; 2690 }; 2691 /* Hide this not yet used implementation to suppress warnings message; 2692 from icc 11; 2693 Bool_t operator==(const TMemberInfo &other) {; 2694 return fName==other.fName; 2695 && fClassName == other.fClassName; 2696 && fComment == other.fComment;; 2697 }; 2698 */; 2699 Bool_t operator!=(const TMemberInfo &other) {; 2700 if (fName != other.fName) return kTRUE;; 2701 if (fDataType < TStreamerInfo::kObject) {; 2702 // For simple type, let compare the data type; 2703 if (fDataType != other.fDataType) {; 2704 if ( (fDataType == 4 && other.fDataType == 16); 2705 || (fDataType == 16 && other.fDataType == 4) ) {; 2706 // long and 'long long' have the same file format; 2707 } else if ( (fDataType == 14 && other.fDataType == 17); 2708 || (fDataType == 17 && other.fDataType == 14) ) {; 2709 // unsigned long and 'unsigned long long' have the same file format; 2710 } else if ( (fDataT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:106875,Clear,Clear,106875,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ctive sigmas"" of the histo, call delete [] res to release memory. ;  ; double GetMedian (TH1 *histo);  Get the median of an histogram. ;  ; double GetSBCenter (double n_sigmas=1, bool display=false);  Get SB histo center. ;  ; TH1F * GetSBhisto ();  Get B histo. ;  ; double * GetSBIntExtremes (double frac);  Get SB histo integration extremes to obtain the requested area fraction call delete [] res to release memory. ;  ; double GetSBmean ();  Get SB histo mean. ;  ; double GetSBrms ();  Get SB histo RMS. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html:2764,Clear,Clear,2764,doc/master/classRooStats_1_1HybridPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html,1,['Clear'],['Clear']
Usability,"ctives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char[] path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:8239,Clear,ClearAll,8239,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,4,"['Clear', 'clear']","['ClearAll', 'clears']"
Usability,"ctor Documentation. ◆ TBranchDescriptor(). ROOT::Internal::TBranchDescriptor::TBranchDescriptor ; (; const char * ; type, . TVirtualStreamerInfo * ; info, . const char * ; branchname, . const char * ; subBranchPrefix, . ELocation ; isclones, . const TString & ; containerName, . TBranchDescriptor * ; parent = nullptr . ). inline . Definition at line 64 of file TTreeReaderGenerator.h. Member Function Documentation. ◆ IsClones(). bool ROOT::Internal::TBranchDescriptor::IsClones ; (; ); const. inline . Definition at line 80 of file TTreeReaderGenerator.h. ◆ IsSTL(). bool ROOT::Internal::TBranchDescriptor::IsSTL ; (; ); const. inline . Definition at line 82 of file TTreeReaderGenerator.h. Member Data Documentation. ◆ fBranchName. TString ROOT::Internal::TBranchDescriptor::fBranchName. Name of the branch. ; Definition at line 59 of file TTreeReaderGenerator.h. ◆ fContainerName. TString ROOT::Internal::TBranchDescriptor::fContainerName. Name of the container. ; Definition at line 58 of file TTreeReaderGenerator.h. ◆ fInfo. TVirtualStreamerInfo* ROOT::Internal::TBranchDescriptor::fInfo. Streamer info. ; Definition at line 61 of file TTreeReaderGenerator.h. ◆ fIsClones. ELocation ROOT::Internal::TBranchDescriptor::fIsClones. Type of container. ; Definition at line 57 of file TTreeReaderGenerator.h. ◆ fParent. TBranchDescriptor* ROOT::Internal::TBranchDescriptor::fParent. Descriptor of the parent branch (NULL for topmost) ; Definition at line 62 of file TTreeReaderGenerator.h. ◆ fSubBranchPrefix. TString ROOT::Internal::TBranchDescriptor::fSubBranchPrefix. Prefix (e.g. if the branch name is ""A."" the prefix is ""A"". ; Definition at line 60 of file TTreeReaderGenerator.h. Libraries for ROOT::Internal::TBranchDescriptor:. [legend]; The documentation for this class was generated from the following file:; tree/treeplayer/inc/TTreeReaderGenerator.h. ROOTInternalTBranchDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html:13433,Guid,Guide,13433,doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchDescriptor.html,1,['Guid'],['Guide']
Usability,"ctor Documentation. ◆ TEveWindow() [1/2]. TEveWindow::TEveWindow ; (; const TEveWindow & ; ). private . ◆ TEveWindow() [2/2]. TEveWindow::TEveWindow ; (; const char * ; n = ""TEveWindow"", . const char * ; t = """" . ). Definition at line 653 of file TEveWindow.cxx. ◆ ~TEveWindow(). TEveWindow::~TEveWindow ; (; ). override . Destructor. ; Definition at line 668 of file TEveWindow.cxx. Member Function Documentation. ◆ CanMakeNewSlots(). virtual Bool_t TEveWindow::CanMakeNewSlots ; (; ); const. inlinevirtual . Reimplemented in TEveWindowPack, and TEveWindowTab.; Definition at line 241 of file TEveWindow.h. ◆ Class(). static TClass * TEveWindow::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveWindow::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveWindow::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 293 of file TEveWindow.h. ◆ ClearEveFrame(). void TEveWindow::ClearEveFrame ; (; ). Clears eve-frame associated with this window. ; This is used in special case when the window is embedded in a foreign GUI container and gets deleted from this side. In particular, this happens when TRootBrowser closes a tab. ; Definition at line 889 of file TEveWindow.cxx. ◆ CreateDefaultWindowSlot(). TEveWindowSlot * TEveWindow::CreateDefaultWindowSlot ; (; ). static . Create a default window slot. ; Static helper. ; Definition at line 967 of file TEveWindow.cxx. ◆ CreateWindowInTab(). TEveWindowSlot * TEveWindow::CreateWindowInTab ; (; TGTab * ; tab, . TEveWindow * ; eve_parent = nullptr . ). static . Create a new tab in a given tab-widget and populate it with a default window-slot. ; Static helper. ; Definition at line 1002 of file TEveWindow.cxx. ◆ CreateWindowMainFrame(). TEveWindowSlot * TEveWindow::CreateWindowMainFrame ; (; TEveWindow * ; eve_parent = nullptr). static . Create a new main-frame and populate it with a default windo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:37746,Clear,ClearEveFrame,37746,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Clear'],['ClearEveFrame']
Usability,"ctor of efficiencies. E^-1 = ((A# Vyy^-1 A)+tau^2 Lsquared). x = E (A# Vyy^-1 y + tau^2 Lsquared x0 +lambda/2 * epsilon) is the result. The derivatives; dx_k/dy_i; dx_k/dA_ij; dx_k/d(tau^2); are calculated for further usage. The covariance matrix V_xx is calculated as:; Vxx_ij = sum_kl dx_i/dy_k Vyy_kl dx_j/dy_l. Warning:. The algorithm is based on ""standard"" matrix inversion, with the; known limitations in numerical accuracy and computing cost for; matrices with large dimensions. Thus the algorithm should not used for large dimensions of x and y; nx should not be much larger than 200; ny should not be much larger than 1000. Proper choice of tau. One of the difficult questions is about the choice of tau.; The method implemented in TUnfold is the L-curve method:; a two-dimensional curve is plotted; x-axis: log10(chisquare); y-axis: log10(regularisation condition); In many cases this curve has an L-shape. The best choice of tau is in the; kink of the L. Within TUnfold a simple version of the L-curve analysis is available.; It tests a given number of points in a predefined tau-range and searches; for the maximum of the curvature in the L-curve (kink position).; if no tau range is given, the range of the scan is determined automatically. A nice overview of the L-curve method is given in:; The L-curve and Its Use in the Numerical Treatment of Inverse Problems; (2000) by P. C. Hansen, in Computational Inverse Problems in; Electrocardiology, ed. P. Johnston,; Advances in Computational Bioengineering; http://www.imm.dtu.dk/~pch/TR/Lcurve.ps. Alternative Regularisation conditions. Regularisation is needed for most unfolding problems, in order to avoid; large oscillations and large correlations on the output bins.; It means that some extra conditions are applied on the output bins. Within TUnfold these conditions are posed on the difference (x-x0), where; x: unfolding output; x0: the bias distribution, by default calculated from; the input matrix A. There is a method SetBias(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:4871,simpl,simple,4871,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,3,['simpl'],['simple']
Usability,"ctor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public Types; enum  EDataSet { kTraining; , kTest; };  ; enum  ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsRefer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:8707,learn,learning,8707,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,2,['learn'],['learning']
Usability,"ctor. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TClass * IsA () const override;  ; TShape & operator= (const TShape &);  assignment operator ;  ; void Paint (Option_t *option="""") override;  This method is used only when a shape is painted outside a TNode. ;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; virtual void SetVisibility (Int_t vis);  ; void Streamer (TBuffer &) override;  Stream an object of class TShape. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPARA.html:3457,Clear,Clear,3457,doc/master/classTPARA.html,https://root.cern,https://root.cern/doc/master/classTPARA.html,5,['Clear'],['Clear']
Usability,"ctor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Optimizer.h>. Inheritance diagram for TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Optimizer.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Optimizer.h. Constructor & Destructor Documentation. ◆ VOptimizer(). template<typename Architecture_t , typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:1995,learn,learning,1995,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,1,['learn'],['learning']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Mon Dec 7 13:48:30 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:43687,clear,clearConvolutionWindow,43687,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Mon Jul 4 15:23:33 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:44723,clear,clearConvolutionWindow,44723,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Thu Nov 3 20:08:50 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:45130,clear,clearConvolutionWindow,45130,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Thu Sep 23 20:00:22 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:44163,clear,clearConvolutionWindow,44163,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Tue Jun 2 15:32:39 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumConvPdf.html:49143,clear,clearConvolutionWindow,49143,root/html604/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html604/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Tue Jun 30 14:34:34 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvPdf.html:49143,clear,clearConvolutionWindow,49143,root/html602/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html602/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor. Double_t evaluate() const; Calculate and return value of p.d.f. void initialize() const; One-time initialization of object. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return appropriate generator context for this convolved p.d.f. If both pdf and resolution; model support internal generation return and optimization convolution generation context; that uses a smearing algorithm. Otherwise return a standard accept/reject sampling; context on the convoluted shape. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooNumConvPdf(*this,newname) ; }. RooNumIntConfig& convIntConfig(); Calls forwarded to RooNumConvolution. { return conv().convIntConfig() ; }. void clearConvolutionWindow(); { conv().clearConvolutionWindow() ; }. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); { conv().setConvolutionWindow(centerParam,widthParam,widthScaleFactor) ; }. void setCallWarning(Int_t threshold = 2000); { conv().setCallWarning(threshold) ; }. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); { conv().setCallProfiling(flag,nbinX,nbinCall,nCallHigh) ; }. const TH2* profileData() const; { return conv().profileData() ; }. RooRealVar& var() const; Access components. { return (RooRealVar&)(const_cast<RooAbsReal&>(_origVar.arg())) ; }. RooAbsReal& pdf() const; { return const_cast<RooAbsReal&>(_origPdf.arg()) ; }. RooAbsReal& model() const; { return const_cast<RooAbsReal&>(_origModel.arg()) ; }. RooNumConvolution& conv() const; WVE Store all properties of RooNumConvolution here so that can be take; along in the copy ctor. { if (!_init) initialize() ; return *_conv ; }. » Last changed: Tue Mar 10 17:18:13 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:47481,clear,clearConvolutionWindow,47481,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"ctor<RooAbsReal*>fNullNLLs!; vector<const RooArgSet*>fNullSnapshots; const RooArgSet*RooStats::ToyMCSampler::fObservables; const RooArgSet*RooStats::ToyMCSampler::fParametersForTestStat; RooAbsPdf*RooStats::ToyMCSampler::fPdfmodel (can be alt or null); RooAbsPdf*RooStats::ToyMCSampler::fPriorNuisanceprior pdf for nuisance parameters; RooStats::ProofConfig*RooStats::ToyMCSampler::fProofConfig!; const RooDataSet*RooStats::ToyMCSampler::fProtoDatain dev; boolfReuseNLL; stringRooStats::ToyMCSampler::fSamplingDistNamename of the model; Double_tRooStats::ToyMCSampler::fSize; vector<TestStatistic*>RooStats::ToyMCSampler::fTestStatistics; Double_tRooStats::ToyMCSampler::fToysInTails; RooStats::toysStrategiesfToysStrategy; Bool_tRooStats::ToyMCSampler::fUseMultiGenUse PrepareMultiGen?; static Bool_tRooStats::ToyMCSampler::fgAlwaysUseMultiGenUse PrepareMultiGen always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~ToyMCImportanceSampler(). void ClearCache(void). RooDataSet* GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint). RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight) const. RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight, vector<double>& impNLLs, double& nullNLL) const. RooAbsData* GenerateToyData(vector<double>& weights) const. RooAbsData* GenerateToyData(vector<double>& weights, vector<double>& nullNLLs, vector<double>& impNLLs) const; global observables into account.; The values of the generated global observables remain in the pdf's variables.; They have to have those values for the subsequent evaluation of the; test statistics. int CreateImpDensitiesForOnePOIAdaptively(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, double nStdDevOverlap = 0.5, double poiValueForBackground = 0.0); these might not necessarily be the same thing. int CreateNImpDensitiesForOnePOI(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, int n, double poiValueForBackground = 0.0); n is th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html:8544,Clear,ClearCache,8544,root/html534/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html,1,['Clear'],['ClearCache']
Usability,"ctorD v=obj;; v.Print();; }; Proxyvoid Proxy()Definition Proxy.C:4; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; ROOT::R::TRObjectThis is a class to get ROOT's objects from R's objects.Definition TRObject.h:70; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TVectorT< Double_t >; v@ vDefinition rootcling_impl.cxx:3699; Output Vector (10) is as follows; ; | 1 |; ------------------; 0 |1; 1 |2; 2 |3; 3 |4; 4 |5; 5 |6; 6 |7; 7 |8; 8 |9; 9 |10; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 70 of file TRObject.h. Public Member Functions;  TRObject ();  Default constructor. ;  ;  TRObject (SEXP robj);  Construct a TRObject given a R base object. ;  ;  TRObject (SEXP robj, Bool_t status);  Construct a TRObject given a R base object. ;  ; template<class T > ; T As ();  Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you unwrap those datatypes encapsulate into this TRObject. ;  ; TRObject GetAttribute (const TString name);  The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ;  ; Bool_t GetStatus ();  TRObject is a current valid object? ;  ; virtual TClass * IsA () const;  ;  operator Rcpp::RObject ();  ;  operator SEXP ();  ;  operator SEXP () const;  ; template<class T > ;  operator T ();  ; void operator= (SEXP xx);  ; templ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:1793,Guid,Guide,1793,doc/master/classROOT_1_1R_1_1TRObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html,1,['Guid'],['Guide']
Usability,ctory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPosixThreadFactory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file TPosixThreadFactory.h. ◆ CreateConditionImp(). TConditionImp * TPosixThreadFactory::CreateConditionImp ; (; TMutexImp * ; m). overridevirtual . Return a Posix condition variable. ; Implements TThreadFactory.; Definition at line 59 of file TPosixThreadFactory.cxx. ◆ CreateMutexImp(). TMutexImp * TPosixThreadFactory::CreateMutexImp ; (; Bool_t ; recursive = kFALSE). overridevirtual . Return a Posix Mutex. ; Implements TThreadFactory.; Definition at line 43 of file TPosixThreadFactory.cxx. ◆ CreateThreadImp(). TThreadImp * TPosixThreadFactory::CreateThreadImp ; (; ). overridevirtual . Return a Posix thread. ; Implements TThreadFactory.; Definition at line 51 of file TPosixThreadFactory.cxx. ◆ DeclFileName(). static const char * TPosixThreadFactory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 41 of file TPosixThreadFactory.h. ◆ IsA(). TClass * TPosixThreadFactory::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 41 of file TPosixThreadFactory.h. ◆ Streamer(). void TPosixThreadFactory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TPosixThreadFactory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file TPosixThreadFactory.h. Libraries for TPosixThreadFactory:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/TPosixThreadFactory.h; core/thread/src/TPosixThreadFactory.cxx. TPosixThreadFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:10 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPosixThreadFactory.html:14736,Guid,Guide,14736,doc/master/classTPosixThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTPosixThreadFactory.html,1,['Guid'],['Guide']
Usability,"ctrum2Fit Spectrum2 Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrum2Painter TSpectrum 3d graphics package; TSpectrum2Transform Spectrum2 Transformer, it calculates classic orthogonal 2D transforms; TSpectrum3 Peak Finder, Background estimator, Markov smoothing and Deconvolution for 3-D histograms; TSpectrumFit Spectrum Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrumTransform Spectrum Transformer, it calculates classic orthogonal 1D transforms; TSpider Helper class to draw spider; TSpiderEditor GUI for editing the spider plot attributes.; TSpline Spline base class; TSpline3 Class to create third natural splines; TSpline5 Class to create quintic natural splines; TSplinePoly Spline polynomial terms; TSplinePoly3 Third spline polynomial terms; TSplinePoly5 Quintic spline polynomial terms; TStatistic Named statistical variable; TStatsFeedback Present PROOF query feedback; TStatus Status class; TStdExceptionHandler C++ exception handler; TStopwatch A stopwatch which times real and cpu time; TStorage Storage manager class; TStreamerArtificial StreamerElement injected by a TSchemaRule. Transient only to preverse forward compatibility.; TStreamerBase Streamer element of type base class; TStreamerBasicPointer Streamer element for a pointer to a basic type; TStreamerBasicType Streamer element for a basic type; TStreamerElement Base class for one element (data member) to be Streamed; TStreamerInfo Streamer information for one class version; TStreamerInfoActions ; TStreamerInfoActions::TActionSequence ; TStreamerInfoActions::TConfiguration ; TStreamerInfoActions::TConfiguredAction A configured action; TStreamerLoop Streamer element for a pointer to an array of objects; TStreamerObject Streamer element of type object; TStreamerObjectAny Streamer element of type object other than TObject; TStreamerObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:133144,feedback,feedback,133144,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,3,['feedback'],['feedback']
Usability,"cts to; 365// automatize memory management and not introduce even more preprocessor; 366// branching for deletion at the end of the method.; 367//; 368// FUTURE IMPROVEMENT ONCE OLD PYTHON VERSIONS ARE NOT SUPPORTED BY CPPYY:; 369// Right now we use C++ objects to automatize memory management. One could use; 370// RAAI and the Python memory allocation API (PEP 445) once some old Python; 371// version is deprecated in CPPYY. That new feature is available since version; 372// 3.4 and the preprocessor branching to also support that would be so; 373// complicated to make the code unreadable.; 374 std::vector<std::wstring> argv2;; 375 argv2.reserve(argc);; 376 argv2.emplace_back(name.c_str(), &name[name.size()]);; 377 ; 378 for (int i = 1; i < argc; ++i) {; 379 auto iarg = args[i - 1].c_str();; 380 argv2.emplace_back(iarg, &iarg[strlen(iarg)]);; 381 }; 382 ; 383#if PY_VERSION_HEX < 0x03080000; 384// Before version 3.8, the code is one simple line; 385 wchar_t *argv2_arr[argc];; 386 for (int i = 0; i < argc; ++i) {; 387 argv2_arr[i] = const_cast<wchar_t *>(argv2[i].c_str());; 388 }; 389 PySys_SetArgv(argc, argv2_arr);; 390 ; 391#else; 392// Here we comply to ""PEP 587 – Python Initialization Configuration"" to avoid; 393// deprecation warnings at compile time.; 394 class PyConfigHelperRAAI {; 395 public:; 396 PyConfigHelperRAAI(const std::vector<std::wstring> &argv2); 397 {; 398 PyConfig_InitPythonConfig(&fConfig);; 399 fConfig.parse_argv = 1;; 400 UpdateArgv(argv2);; 401 InitFromConfig();; 402 }; 403 ~PyConfigHelperRAAI() { PyConfig_Clear(&fConfig); }; 404 ; 405 private:; 406 void InitFromConfig() { Py_InitializeFromConfig(&fConfig); };; 407 void UpdateArgv(const std::vector<std::wstring> &argv2); 408 {; 409 auto WideStringListAppendHelper = [](PyWideStringList *wslist, const wchar_t *wcstr) {; 410 PyStatus append_status = PyWideStringList_Append(wslist, wcstr);; 411 if (PyStatus_IsError(append_status)) {; 412 std::wcerr << ""Error: could not append element "" << wcstr << "" t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:13320,simpl,simple,13320,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['simpl'],['simple']
Usability,cts.h. ◆ Streamer(). template<typename TT > . void TEveRecTrackT< TT >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). template<typename TT > . void TEveRecTrackT< TT >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TEveVSDStructs.h. Member Data Documentation. ◆ fBeta. template<typename TT > . TT TEveRecTrackT< TT >::fBeta. Definition at line 138 of file TEveVSDStructs.h. ◆ fDcaXY. template<typename TT > . Double32_t TEveRecTrackT< TT >::fDcaXY. Definition at line 139 of file TEveVSDStructs.h. ◆ fDcaZ. template<typename TT > . Double32_t TEveRecTrackT< TT >::fDcaZ. Definition at line 140 of file TEveVSDStructs.h. ◆ fIndex. template<typename TT > . Int_t TEveRecTrackT< TT >::fIndex. Definition at line 133 of file TEveVSDStructs.h. ◆ fLabel. template<typename TT > . Int_t TEveRecTrackT< TT >::fLabel. Definition at line 132 of file TEveVSDStructs.h. ◆ fP. template<typename TT > . TEveVectorT<TT> TEveRecTrackT< TT >::fP. Definition at line 137 of file TEveVSDStructs.h. ◆ fPVX. template<typename TT > . Double32_t TEveRecTrackT< TT >::fPVX. Definition at line 141 of file TEveVSDStructs.h. ◆ fPVY. template<typename TT > . Double32_t TEveRecTrackT< TT >::fPVY. Definition at line 142 of file TEveVSDStructs.h. ◆ fPVZ. template<typename TT > . Double32_t TEveRecTrackT< TT >::fPVZ. Definition at line 143 of file TEveVSDStructs.h. ◆ fSign. template<typename TT > . Int_t TEveRecTrackT< TT >::fSign. Definition at line 135 of file TEveVSDStructs.h. ◆ fStatus. template<typename TT > . Int_t TEveRecTrackT< TT >::fStatus. Definition at line 134 of file TEveVSDStructs.h. ◆ fV. template<typename TT > . TEveVectorT<TT> TEveRecTrackT< TT >::fV. Definition at line 136 of file TEveVSDStructs.h. graf3d/eve/inc/TEveVSDStructs.h. TEveRecTrackT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRecTrackT.html:13691,Guid,Guide,13691,doc/master/classTEveRecTrackT.html,https://root.cern,https://root.cern/doc/master/classTEveRecTrackT.html,1,['Guid'],['Guide']
Usability,"cts/subfolder/obj/root.json.gz; If the access to the server is restricted with htdigest, it is recommended to use the curl program since only curl correctly implements such authentication method. The command will look like:; [shell] curl --user ""accout:password"" http://localhost:8080/Objects/subfolder/obj/root.json --digest -o root.json; 1.9.1 Objects data access in JSON format; Request root.json implemented with TBufferJSON class. TBufferJSON generates such object representation, which could be directly used in JSROOT for drawing. root.json request returns either complete object or just object member like:; [shell] wget http://localhost:8080/Objects/subfolder/obj/fTitle/root.json; The result will be: ""title"".; For the root.json request one could specify the ‘compact’ parameter, which allow to reduce the number of spaces and new lines without data lost. This parameter can have values from ‘0’ (no compression) till ‘3’ (no spaces and new lines at all). In addition, one can use simple compression algorithm for big arrays. If compact=‘10’, zero values in the begin and at the end of the array will be excluded. If compact=‘20’, similar values or large zero gaps in-between will be compressed. Such array compression support in JSROOT from version 4.8.2.; Usage of root.json request is about as efficient as binary root.bin request. Comparison of different request methods with TH2 histogram from hsimple.C shown in the table:. Request; Size. root.bin; 7672 bytes. root.bin.gz; 1582 bytes. root.json; 8570 bytes. root.json?compact=3; 6004 bytes. root.json?compact=23; 5216 bytes. root.json.gz?compact=23; 1855 bytes. One should remember that JSON representation always includes names of the data fields which are not present in the binary representation. Even then the size difference is negligible.; root.json used in JSROOT to request objects from THttpServer.; 1.9.2 Generating images out of objects; For the ROOT classes which are implementing Draw method (like TH1 or TGraph) one cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:15879,simpl,simple,15879,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['simpl'],['simple']
Usability,"ctuations – noise. The algorithm is based on smoothed second differences that are compared to its standard deviations. Therefore it is necessary to pass a parameter of sigma to the peak searching function. The algorithm is selective to the peaks with a given sigma. The form of the basic peak searching function is; Int_t Search1(const float *spectrum,; int size,; double sigma);; This function searches for peaks in the source spectrum. The number of found peaks and their positions are written into structure pointed by one_dim_peak structure pointer.; Function parameters:. source: pointer to the vector of the source spectrum; p: pointer to the one_dim_peak structure pointer; size: length of the source spectrum; sigma: sigma of searched peaks. The one_dim_peak structure has the form of; struct one_dim_peak{; int number_of_peaks;; double position[MAX_NUMBER_OF_PEAKS1];; };; An example of simple one-dimensional spectrum with identified peaks is given in Figure 3.1. Simple one-dimensional spectrum with identified peaks. An example of 1-dimensional experimental spectrum with many identified peaks is given in Figure 3.2. 1-dimensional experimental spectrum with many identified peaks. However, when we have noisy data, the number of peaks can be enormous. One such an example is given in Figure 3.3. With noisy data the number of peaks can be enormous. Therefore it can be useful to have a possibility to set a threshold value and to consider only the peaks higher than this threshold (see Figure 3.4, only three peaks were identified, threshold=50). The value in the center of the peak (value[i]) minus the average value in two symmetrically positioned channels (channels i-3*sigma, i+3*sigma) must be greater than threshold. Otherwise the peak is ignored. Iwth threshold=50, only three peaks were identified. An alternative approach was proposed in [6]. The algorithm generates new invariant spectrum based on discrete Markov chains. In this spectrum the noise is suppressed, the spectrum i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:16895,Simpl,Simple,16895,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['Simpl'],['Simple']
Usability,"cular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30 Megabytes). This feature can be controlled with the environment variable ROOT_TTREECACHE_SIZE or the TTreeCache.Size option. The entry range for which the cache is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TEventList have influence on the behaviour of the cache:. Special case of a TChain Once the training is done on the first Tree, the list of branches in the cache is kept for the following files.; Special case of a TEventlist if the Tree or TChain has a TEventlist, only the buffers referenced by the list are put in the cache. The learning phase is started or restarted when:; TTree automatically creates a cache.; TTree::SetCacheSize is called with a non-zero size and a cache did not previously exist; TTreeCache::StartLearningPhase is called.; TTreeCache::SetEntryRange is called and the learning is not yet finished and has not been set to manual and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; TTreeCache::StopLearningPhase is called.; An entry outside the 'learning' range is requested The 'learning range is from fEntryMin (default to 0) to fEntryMin + fgLearnEntries.; A 'cached' TChain switches over to a new file. Self-optimization in presence of cache misses; The TTreeCache can optimize its behavior on a cache miss. When miss optimization is enabled (see the SetOptimizeMisses method), it tracks all branches utilized after the learning phase which caused a cache miss. When one cache miss occurs, all the utilized branches are be prefetched for that event. This optimization utilizes the observati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:3702,learn,learning,3702,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"culation is skipped if err==0; 198 virtual Double_t GetMvaValue( Double_t* errLower = nullptr, Double_t* errUpper = nullptr) = 0;; 199 ; 200 // signal/background classification response; 201 Double_t GetMvaValue( const TMVA::Event* const ev, Double_t* err = nullptr, Double_t* errUpper = nullptr );; 202 ; 203 protected:; 204 // helper function to set errors to -1; 205 void NoErrorCalc(Double_t* const err, Double_t* const errUpper);; 206 ; 207 // signal/background classification response for all current set of data; 208 virtual std::vector<Double_t> GetMvaValues(Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 209 // same as above but using a provided data set (used by MethodCategory); 210 virtual std::vector<Double_t> GetDataMvaValues(DataSet *data = nullptr, Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 211 ; 212 public:; 213 // regression response; 214 const std::vector<Float_t>& GetRegressionValues(const TMVA::Event* const ev){; 215 fTmpEvent = ev;; 216 const std::vector<Float_t>* ptr = &GetRegressionValues();; 217 fTmpEvent = nullptr;; 218 return (*ptr);; 219 }; 220 ; 221 virtual const std::vector<Float_t>& GetRegressionValues() {; 222 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 223 return (*ptr);; 224 }; 225 ; 226 // multiclass classification response; 227 virtual const std::vector<Float_t>& GetMulticlassValues() {; 228 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 229 return (*ptr);; 230 }; 231 ; 232 // Training history; 233 virtual const std::vector<Float_t>& GetTrainingHistory(const char* /*name*/ ) {; 234 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 235 return (*ptr);; 236 }; 237 ; 238 // probability of classifier response (mvaval) to be signal (requires ""CreateMvaPdf"" option set); 239 virtual Double_t GetProba( const Event *ev); // the simple one, automatically calculates the mvaVal and uses the SAME sig/bkg ratio as given in the training sample (typically 50/50 .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:8832,simpl,simple,8832,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['simpl'],['simple']
Usability,"cumentation. ◆ fClick. Int_t TGColorPick::fClick. protected . mouse click location (kCLICK_NONE, kCLICK_HS, kCLICK_L) ; Definition at line 93 of file TGColorDialog.h. ◆ fColormap. Int_t TGColorPick::fColormap[64][3]. private . Definition at line 86 of file TGColorDialog.h. ◆ fColormapRect. Rectangle_t TGColorPick::fColormapRect. protected . hue / saturation colormap rectangle ; Definition at line 98 of file TGColorDialog.h. ◆ fCurrentColor. Pixel_t TGColorPick::fCurrentColor. protected . currently selected color value ; Definition at line 97 of file TGColorDialog.h. ◆ fCursorGC. TGGC TGColorPick::fCursorGC. protected . color lightness slider cursor GC ; Definition at line 100 of file TGColorDialog.h. ◆ fCx. Int_t TGColorPick::fCx. protected . x position in hs colormap ; Definition at line 94 of file TGColorDialog.h. ◆ fCy. Int_t TGColorPick::fCy. protected . y position in hs colormap ; Definition at line 95 of file TGColorDialog.h. ◆ fCz. Int_t TGColorPick::fCz. protected . position in lightness slider ; Definition at line 96 of file TGColorDialog.h. ◆ fHSimage. Pixmap_t TGColorPick::fHSimage. protected . hue / saturation colormap pixmap ; Definition at line 90 of file TGColorDialog.h. ◆ fLimage. Pixmap_t TGColorPick::fLimage. protected . color lightness slider pixmap ; Definition at line 91 of file TGColorDialog.h. ◆ fNColors. Int_t TGColorPick::fNColors. protected . number of color samples ; Definition at line 92 of file TGColorDialog.h. ◆ fPixel. Pixel_t TGColorPick::fPixel[64]. private . Definition at line 87 of file TGColorDialog.h. ◆ fSliderRect. Rectangle_t TGColorPick::fSliderRect. protected . color lightness slider rectangle ; Definition at line 99 of file TGColorDialog.h. Libraries for TGColorPick:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGColorDialog.h; gui/gui/src/TGColorDialog.cxx. TGColorPick. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPick.html:37501,Guid,Guide,37501,doc/master/classTGColorPick.html,https://root.cern,https://root.cern/doc/master/classTGColorPick.html,1,['Guid'],['Guide']
Usability,curacy: 0.9888␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 32/Unknown - 9s 5ms/step - loss: 0.0215 - accuracy: 0.9927␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 41/Unknown - 9s 5ms/step - loss: 0.0168 - accuracy: 0.9943␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 51/Unknown - 9s 5ms/step - loss: 0.0135 - accuracy: 0.9954␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 54/54 [==============================] - 9s 16ms/step - loss: 0.0128 - accuracy: 0.9957 - val_loss: 3.9096e-07 - val_accuracy: 1.0000; Epoch 2/2; ; 1/54 [..............................] - ETA: 3s - loss: 3.7319e-07 - accuracy: 1.0000␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 11/54 [=====>........................] - ETA: 0s - loss: 3.5834e-07 - accuracy: 1.0000␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 22/54 [===========>..................] - ETA: 0s - loss: 3.6108e-07 - accuracy: 1.0000␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 32/54 [================>.............] - ETA: 0s - loss: 3.6615e-07 - accuracy: 1.0000␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 43/54 [======================>.......] - ETA: 0s - loss: 3.6393e-07 - accuracy: 1.0000␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 54/54 [==============================] - ETA: 0s - loss: 3.6159e-07 - accuracy: 1.0000␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈␈; 54/54 [==============================] - 0s 7ms/step - loss: 3.6159e-07 - accuracy: 1.0000 - val_loss: 3.7138e-07 - val_accuracy: 1.0000; AuthorDante Niewenhuis ; Definition in file RBatchGenerator_TensorFlow.py. tutorialstmvaRBatchGenerator_TensorFlow.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBatchGenerator__TensorFlow_8py.html:4629,Guid,Guide,4629,doc/master/RBatchGenerator__TensorFlow_8py.html,https://root.cern,https://root.cern/doc/master/RBatchGenerator__TensorFlow_8py.html,1,['Guid'],['Guide']
Usability,"current directory to its previous state. ; Definition at line 143 of file TDirectory.cxx. Member Function Documentation. ◆ CdNull(). void TDirectory::TContext::CdNull ; (; ). private . Set the current directory to null. ; This is called from the TContext destructor. Since the destructor is inline, we do not want to have it directly use a global variable. ; Definition at line 133 of file TDirectory.cxx. ◆ operator=(). TContext & TDirectory::TContext::operator= ; (; TContext & ; ). privatedelete . ◆ RegisterCurrentDirectory(). void TDirectory::TContext::RegisterCurrentDirectory ; (; ). private . Definition at line 1344 of file TDirectory.cxx. Friends And Related Symbol Documentation. ◆ TDirectory. friend class TDirectory. friend . Definition at line 101 of file TDirectory.h. Member Data Documentation. ◆ fActiveDestructor. std::atomic<bool> TDirectory::TContext::fActiveDestructor {false}. private . Pointer to the previous current directory. ; Definition at line 92 of file TDirectory.h. ◆ fDirectory. std::atomic<TDirectory*> TDirectory::TContext::fDirectory {nullptr}. private . Definition at line 91 of file TDirectory.h. ◆ fDirectoryWait. std::atomic<bool> TDirectory::TContext::fDirectoryWait {false}. private . Set to true during the destructor execution. ; Definition at line 93 of file TDirectory.h. ◆ fNext. TContext* TDirectory::TContext::fNext {nullptr}. private . Pointer to the next TContext in the implied list of context pointing to fPrevious. ; Definition at line 95 of file TDirectory.h. ◆ fPrevious. TContext* TDirectory::TContext::fPrevious {nullptr}. private . Set to true if a TDirectory might still access this object. ; Definition at line 94 of file TDirectory.h. Libraries for TDirectory::TContext:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TDirectory.h; core/base/src/TDirectory.cxx. TDirectoryTContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectory_1_1TContext.html:6294,Guid,Guide,6294,doc/master/classTDirectory_1_1TContext.html,https://root.cern,https://root.cern/doc/master/classTDirectory_1_1TContext.html,1,['Guid'],['Guide']
Usability,"current point is on division boundary. ; Reimplemented from TGeoPatternFinder.; Definition at line 1776 of file TGeoPatternFinder.cxx. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternCylPhi::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 1829 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternCylPhi & TGeoPatternCylPhi::operator= ; (; const TGeoPatternCylPhi & ; pfc). inlineprotected . Definition at line 391 of file TGeoPatternFinder.h. ◆ SavePrimitive(). void TGeoPatternCylPhi::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 1841 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternCylPhi::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TGeoVolume. ; Reimplemented from TObject.; Definition at line 1850 of file TGeoPatternFinder.cxx. ◆ StreamerNVirtual(). void TGeoPatternCylPhi::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 420 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternCylPhi::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 1887 of file TGeoPatternFinder.cxx. Member Data Documentation. ◆ fSinCos. Double_t* TGeoPatternCylPhi::fSinCos = nullptr. private . Definition at line 384 of file TGeoPatternFinder.h. Libraries for TGeoPatternCylPhi:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternCylPhi. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternCylPhi.html:18827,Guid,Guide,18827,doc/master/classTGeoPatternCylPhi.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylPhi.html,1,['Guid'],['Guide']
Usability,"cursion in the usage of TTree Friends. ; Definition at line 188 of file TTree.h. Public Member Functions;  TFriendLock (TTree *tree, UInt_t methodbit);  Record in tree that it has been used while recursively looks through the friends. ;  ;  ~TFriendLock ();  Restore the state of tree the same as before we set the lock. ;  . Protected Member Functions;  TFriendLock (const TFriendLock &);  Copy constructor. ;  ; TFriendLock & operator= (const TFriendLock &);  Assignment operator. ;  . Private Attributes; UInt_t fMethodBit;  ; bool fPrevious;  ; TTree * fTree;  . #include <TTree.h>; Constructor & Destructor Documentation. ◆ TFriendLock() [1/2]. TTree::TFriendLock::TFriendLock ; (; const TFriendLock & ; tfl). protected . Copy constructor. ; Definition at line 520 of file TTree.cxx. ◆ TFriendLock() [2/2]. TTree::TFriendLock::TFriendLock ; (; TTree * ; tree, . UInt_t ; methodbit . ). Record in tree that it has been used while recursively looks through the friends. ; Definition at line 503 of file TTree.cxx. ◆ ~TFriendLock(). TTree::TFriendLock::~TFriendLock ; (; ). Restore the state of tree the same as before we set the lock. ; Definition at line 543 of file TTree.cxx. Member Function Documentation. ◆ operator=(). TTree::TFriendLock & TTree::TFriendLock::operator= ; (; const TFriendLock & ; tfl). protected . Assignment operator. ; Definition at line 530 of file TTree.cxx. Member Data Documentation. ◆ fMethodBit. UInt_t TTree::TFriendLock::fMethodBit. private . Definition at line 192 of file TTree.h. ◆ fPrevious. bool TTree::TFriendLock::fPrevious. private . Definition at line 193 of file TTree.h. ◆ fTree. TTree* TTree::TFriendLock::fTree. private . Definition at line 191 of file TTree.h. Libraries for TTree::TFriendLock:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTree.h; tree/tree/src/TTree.cxx. TTreeTFriendLock. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree_1_1TFriendLock.html:2242,Guid,Guide,2242,doc/master/classTTree_1_1TFriendLock.html,https://root.cern,https://root.cern/doc/master/classTTree_1_1TFriendLock.html,1,['Guid'],['Guide']
Usability,"cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; nentriesint nentriesDefinition THbookFile.cxx:91; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; R; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom3Random number generator class based on M.Definition TRandom3.h:27; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::VecOps::Mapauto Map(Args &&... args)Create new collection applying a callable to the elements of the input collection.Definition RVec.hxx:2150; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15; ROOT::Math::RhoEtaPhiVectorDisplacementVector3D< CylindricalEta3D< double >, DefaultCoordinateSystemTag > RhoEtaPhiVector3D Vector based on the eta based cylindrical coordinates rho, eta, phi in double precision.Definition Vector3Dfwd.h:62; ROOT::Math::XYZTVectorLorentzVector< PxPyPzE4D< double > > XYZTVectorLorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in double precision with metric (-,...Definition Vector4Dfwd.h:46; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; df002_dataModelDefinition df002_dataModel.py:1; v@ vDefinition rootcling_impl.cxx:3699; tracksvoid tracks()Definition tracks.C:49; . DateDecember 2016 ; AuthorDanilo Piparo (CERN) ; Definition in file df002_dataModel.C. tutorialsdataframedf002_dataModel.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8C.html:5828,Guid,Guide,5828,doc/master/df002__dataModel_8C.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8C.html,1,['Guid'],['Guide']
Usability,"curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; DateMarch 2021 ; AuthorsHarshal Shende, Stephan Hageboeck (C++ version) ; Definition in file rf204a_extendedLikelihood.py. tutorialsroofitrf204a_extendedLikelihood.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204a__extendedLikelihood_8py.html:18772,Clear,Clear,18772,doc/master/rf204a__extendedLikelihood_8py.html,https://root.cern,https://root.cern/doc/master/rf204a__extendedLikelihood_8py.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,"cutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:4201,simpl,simple,4201,doc/v632/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html,1,['simpl'],['simple']
Usability,"cutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:4202,simpl,simple,4202,doc/master/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html,1,['simpl'],['simple']
Usability,"cxx. ◆ AssignID(). UInt_t TProcessID::AssignID ; (; TObject * ; obj). static . static function returning the ID assigned to obj If the object is not yet referenced, its kIsReferenced bit is set and its fUniqueID set to the current number of referenced objects so far. ; Definition at line 155 of file TProcessID.cxx. ◆ CheckInit(). void TProcessID::CheckInit ; (; ). Initialize fObjects. ; Definition at line 192 of file TProcessID.cxx. ◆ Class(). static TClass * TProcessID::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProcessID::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProcessID::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 118 of file TProcessID.h. ◆ Cleanup(). void TProcessID::Cleanup ; (; ). static . static function (called by TROOT destructor) to delete all TProcessIDs ; Definition at line 204 of file TProcessID.cxx. ◆ Clear(). void TProcessID::Clear ; (; Option_t * ; option = """"). overridevirtual . delete the TObjArray pointing to referenced objects this function is called by TFile::Close(""R"") ; Reimplemented from TNamed.; Definition at line 218 of file TProcessID.cxx. ◆ DeclFileName(). static const char * TProcessID::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 118 of file TProcessID.h. ◆ DecrementCount(). Int_t TProcessID::DecrementCount ; (; ). The reference fCount is used to delete the TProcessID in the TFile destructor when fCount = 0. ; Definition at line 238 of file TProcessID.cxx. ◆ GetCount(). Int_t TProcessID::GetCount ; (; ); const. inline . Definition at line 98 of file TProcessID.h. ◆ GetNProcessIDs(). UInt_t TProcessID::GetNProcessIDs ; (; ). static . Return the (static) number of process IDs. ; Definition at line 256 of file TProcessID.cxx. ◆ GetObjectCount(). UInt_t TProcessID::GetObjectCount ; (; ). static . Return th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProcessID.html:17313,Clear,Clear,17313,doc/master/classTProcessID.html,https://root.cern,https://root.cern/doc/master/classTProcessID.html,1,['Clear'],['Clear']
Usability,"cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . Copy material properties. ; Definition at line 1159 of file RGeomData.cxx. ◆ CountShapeFaces(). int RGeomDescription::CountShapeFaces ; (; TGeoShape * ; shape). private . Count number of faces for the shape. ; Definition at line 937 of file RGeom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:13023,Clear,ClearDrawData,13023,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['Clear'],['ClearDrawData']
Usability,cxx. ◆ Refresh(). void TTreeSQL::Refresh ; (; ). overridevirtual . Refresh contents of this Tree and its branches from the current Tree status in the database One can call this function in case the Tree on its file is being updated by another process. ; Reimplemented from TTree.; Definition at line 796 of file TTreeSQL.cxx. ◆ ResetQuery(). void TTreeSQL::ResetQuery ; (; ). protected . Reset the internal query. ; Definition at line 808 of file TTreeSQL.cxx. ◆ Streamer(). void TTreeSQL::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TTree. ◆ StreamerNVirtual(). void TTreeSQL::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 94 of file TTreeSQL.h. Member Data Documentation. ◆ fBranchChecked. bool TTreeSQL::fBranchChecked. protected . Definition at line 53 of file TTreeSQL.h. ◆ fCurrentEntry. Int_t TTreeSQL::fCurrentEntry. protected . Definition at line 45 of file TTreeSQL.h. ◆ fDB. TString TTreeSQL::fDB. protected . Definition at line 46 of file TTreeSQL.h. ◆ fInsertQuery. TString TTreeSQL::fInsertQuery. protected . Definition at line 47 of file TTreeSQL.h. ◆ fQuery. TString TTreeSQL::fQuery. protected . Definition at line 48 of file TTreeSQL.h. ◆ fResult. TSQLResult* TTreeSQL::fResult. protected . Definition at line 50 of file TTreeSQL.h. ◆ fRow. TSQLRow* TTreeSQL::fRow. protected . Definition at line 51 of file TTreeSQL.h. ◆ fServer. TSQLServer* TTreeSQL::fServer. protected . Definition at line 52 of file TTreeSQL.h. ◆ fTable. TString TTreeSQL::fTable. protected . Definition at line 49 of file TTreeSQL.h. ◆ fTableInfo. TSQLTableInfo* TTreeSQL::fTableInfo. protected . Definition at line 54 of file TTreeSQL.h. Libraries for TTreeSQL:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTreeSQL.h; tree/tree/src/TTreeSQL.cxx. TTreeSQL. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:40 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:59196,Guid,Guide,59196,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,1,['Guid'],['Guide']
Usability,"cxx. ◆ SetCountClass(). void TStreamerBasicPointer::SetCountClass ; (; const char * ; clname). inline . Definition at line 226 of file TStreamerElement.h. ◆ SetCountName(). void TStreamerBasicPointer::SetCountName ; (; const char * ; name). inline . Definition at line 227 of file TStreamerElement.h. ◆ SetCountVersion(). void TStreamerBasicPointer::SetCountVersion ; (; Int_t ; count). inline . Definition at line 228 of file TStreamerElement.h. ◆ Streamer(). void TStreamerBasicPointer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerBasicPointer. ; Reimplemented from TNamed.; Definition at line 984 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerBasicPointer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 231 of file TStreamerElement.h. ◆ Update(). void TStreamerBasicPointer::Update ; (; const TClass * ; oldClass, . TClass * ; newClass . ). inlineoverridevirtual . function called by the TClass constructor when replacing an emulated class by the real class ; Reimplemented from TStreamerElement.; Definition at line 229 of file TStreamerElement.h. Member Data Documentation. ◆ fCountClass. TString TStreamerBasicPointer::fCountClass. protected . Definition at line 207 of file TStreamerElement.h. ◆ fCounter. TStreamerBasicType* TStreamerBasicPointer::fCounter. protected . Definition at line 208 of file TStreamerElement.h. ◆ fCountName. TString TStreamerBasicPointer::fCountName. protected . Definition at line 206 of file TStreamerElement.h. ◆ fCountVersion. Int_t TStreamerBasicPointer::fCountVersion. protected . Definition at line 205 of file TStreamerElement.h. Libraries for TStreamerBasicPointer:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerBasicPointer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBasicPointer.html:23413,Guid,Guide,23413,doc/master/classTStreamerBasicPointer.html,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html,1,['Guid'],['Guide']
Usability,"cxx. ◆ SetDataPoolUrl(). void TProof::SetDataPoolUrl ; (; const char * ; url). inline . Definition at line 1044 of file TProof.h. ◆ SetDataSetTreeName(). Int_t TProof::SetDataSetTreeName ; (; const char * ; dataset, . const char * ; treename . ). virtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented in TProofLite.; Definition at line 10766 of file TProof.cxx. ◆ SetDrawFeedbackOption(). void TProof::SetDrawFeedbackOption ; (; TDrawFeedback * ; f, . Option_t * ; opt . ). Set draw feedback option. ; Definition at line 10102 of file TProof.cxx. ◆ SetDSet(). void TProof::SetDSet ; (; TDSet * ; dset). inlineprotected . Definition at line 737 of file TProof.h. ◆ SetFeedback(). void TProof::SetFeedback ; (; TString & ; opt, . TString & ; optfb, . Int_t ; action . ). protected . Extract from opt in optfb information about wanted feedback settings. ; Feedback are removed from the input string opt. If action == 0, set up feedback accordingly, if action == 1 clean related feedback settings (using info in optfb, if available, or reparsing opt).; Feedback requirements are in the form <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>; The special name 'stats' triggers feedback about events and packets. The separator from the next option is either a ' ' or a ';'. Called interanally by TProof::Process. ; Definition at line 5232 of file TProof.cxx. ◆ SetInputDataFile(). void TProof::SetInputDataFile ; (; const char * ; datafile). Set the file to be used to optimally distribute the input data objects. ; If the file exists the object in the file are added to those in the fInputData list. If the file path is null, a default file will be created at the moment of sending the processing request with the content of the fInputData list. See also SendInputDataFile. ; Definition at line 9585 of file TPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:142741,Feedback,Feedback,142741,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Feedback'],['Feedback']
Usability,"cxx. ◆ getAnalyticalIntegral(). Int_t RooPolyVar::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Advertise that we can internally integrate over x. ; Reimplemented from RooAbsReal.; Definition at line 168 of file RooPolyVar.cxx. ◆ IsA(). TClass * RooPolyVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 62 of file RooPolyVar.h. ◆ Streamer(). void RooPolyVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooPolyVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooPolyVar.h. ◆ translate(). void RooPolyVar::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 115 of file RooPolyVar.cxx. Friends And Related Symbol Documentation. ◆ RooPolynomial. friend class RooPolynomial. friend . Definition at line 55 of file RooPolyVar.h. Member Data Documentation. ◆ _coefList. RooListProxy RooPolyVar::_coefList. protected . Definition at line 43 of file RooPolyVar.h. ◆ _lowestOrder. Int_t RooPolyVar::_lowestOrder = 0. protected . Definition at line 44 of file RooPolyVar.h. ◆ _wksp. std::vector<d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:65154,simpl,simple,65154,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['simpl'],['simple']
Usability,"cxx:1439; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::GetRandom2virtual void GetRandom2(Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr)Return 2 random numbers following this function shape.Definition TF2.cxx:547; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TGraph2DErrorsGraph 2D class with errors.Definition TGraph2DErrors.h:26; TGraph2DErrors::SetPointvoid SetPoint(Int_t i, Double_t x, Double_t y, Double_t z) overrideSet x, y and z values for point number i.Definition TGraph2DErrors.cxx:404; TGraph2DErrors::SetPointErrorvirtual void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez)Set ex, ey and ez values for point number i.Definition TGraph2DErrors.cxx:446; TGraph2D::FindObjectTObject * FindObject(const char *name) const overridesearch object named name in the list of functionsDefinition TGraph2D.cxx:791; TGraph2D::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""")Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are au...Definition TGraph2D.cxx:815; TGraph2D::Drawvoid Draw(Option_t *option=""P0"") overrideSpecific drawing options can be used to paint a TGraph2D:Definition TGraph2D.cxx:762; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStyle::SetHistTopMarginvoid SetHistTopMargin(Double_t hmax=0.05)Definition TStyle.h:385; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorOlivier Couet ; Definition in file graph2derrorsfit.C. tutorialsgraphsgraph2derrorsfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph2derrorsfit_8C.html:4610,Guid,Guide,4610,doc/master/graph2derrorsfit_8C.html,https://root.cern,https://root.cern/doc/master/graph2derrorsfit_8C.html,1,['Guid'],['Guide']
Usability,"cxx:1565; TApplication::fgApplicationsstatic TList * fgApplicationsDefinition TApplication.h:82; TApplication::Closestatic void Close(TApplication *app)Static function used to close a remote application.Definition TApplication.cxx:2070; TApplication::HandleTermInputvirtual Bool_t HandleTermInput()Definition TApplication.h:116; TApplication::IsRunningBool_t IsRunning() constDefinition TApplication.h:152; TApplication::SetEchoModevirtual void SetEchoMode(Bool_t mode)Set console echo mode:Definition TApplication.cxx:1968; TApplication::InputFilesTObjArray * InputFiles() constDefinition TApplication.h:146; TApplication::Helpvirtual void Help(const char *line)The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxy...Definition TApplication.cxx:1208; TApplication::LineProcessedvirtual void LineProcessed(const char *line)Emit signal when a line has been processed.Definition TApplication.cxx:1941; TApplication::ClearInputFilesvoid ClearInputFiles()Clear list containing macro files passed as program arguments.Definition TApplication.cxx:318; TApplication::fAppImpTApplicationImp * fAppImpDefinition TApplication.h:60; TApplication::TApplicationTApplication(const TApplication &)=delete; TApplication::EExitOnExceptionEExitOnExceptionDefinition TApplication.h:51; TApplication::kDontExit@ kDontExitDefinition TApplication.h:52; TApplication::kAbort@ kAbortDefinition TApplication.h:54; TApplication::kExit@ kExitDefinition TApplication.h:53; TApplication::ExecuteFilestatic Longptr_t ExecuteFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Execute a file containing a C++ macro (static method).Definition TApplication.cxx:1729; TApplication::GetSignalHandlerTSignalHandler * GetSignalHandler() constDefinition TApplication.h:107; TApplication::InitializeGraphicsvoid InitializeGraphics(Bool_t only_web=kFALSE)Initialize the graphics environment.Definition TApplication.cxx:244; TApplication::Openvirtual void Open()Definition TApplica",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:11666,Clear,ClearInputFilesvoid,11666,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,3,['Clear'],"['Clear', 'ClearInputFiles', 'ClearInputFilesvoid']"
Usability,"cxx:168; TNtuple.h; TParallelCoordRange.h; TParallelCoordVar.h; TParallelCoord.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; TStyle.h; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TColor::SetAlphavirtual void SetAlpha(Float_t a)Definition TColor.h:70; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TParallelCoordVarTParallelCoord axes.Definition TParallelCoordVar.h:24; TParallelCoordVar::SetHistogramHeightvoid SetHistogramHeight(Double_t h=0)Set the height of the bar histogram.Definition TParallelCoordVar.cxx:892; TParallelCoordVar::Drawvoid Draw(Option_t *option="""") overrideDraw the axis.Definition TParallelCoordVar.cxx:150; TParallelCoordParallel Coordinates class.Definition TParallelCoord.h:28; TParallelCoord::SetLineColorvoid SetLineColor(Color_t col)Definition TParallelCoord.h:127; TParallelCoord::GetVarListTList * GetVarList()Definition TParallelCoord.h:102; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; v@ vDefinition rootcling_impl.cxx:3699; AuthorOlivier Couet ; Definition in file parallelcoordtrans.C. tutorialstreeparallelcoordtrans.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree_2parallelcoordtrans_8C.html:6928,Guid,Guide,6928,doc/master/tree_2parallelcoordtrans_8C.html,https://root.cern,https://root.cern/doc/master/tree_2parallelcoordtrans_8C.html,1,['Guid'],['Guide']
Usability,"cxx:989; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Clearvirtual void Clear(Option_t *="""")Definition TObject.h:119; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:478907,Clear,Clearvirtual,478907,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  doc;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:53470,Simpl,SimplexBuilder,53470,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['SimplexBuilder']
Usability,cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:52867,Simpl,SimplexBuilder,52867,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['Simpl'],['SimplexBuilder']
Usability,cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► ph,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:54575,Simpl,SimplexBuilder,54575,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimplexBuilder']
Usability,cxx;  LaEigenValues.cxx;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► in,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:53117,Simpl,SimplexBuilder,53117,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['Simpl'],['SimplexBuilder']
Usability,"cy"" << std::endl;; for (auto &&cutInfo : allCutsReport) {; std::cout << cutInfo.GetName() << ""\t"" << cutInfo.GetAll() << ""\t"" << cutInfo.GetPass() << ""\t""; << cutInfo.GetEff() << "" %"" << std::endl;; }; ; // Or get information about them individually; auto cutName = ""Cut1"";; auto cut = allCutsReport->At(""Cut1"");; std::cout << cutName << "" efficiency is "" << cut.GetEff() << "" %"" << std::endl;; }; d#define d(i)Definition RSha256.hxx:102; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; xDouble_t x[n]Definition legend1.C:17; ROOT::Math::RhoEtaPhiVectorDisplacementVector3D< CylindricalEta3D< double >, DefaultCoordinateSystemTag > RhoEtaPhiVector3D Vector based on the eta based cylindrical coordinates rho, eta, phi in double precision.Definition Vector3Dfwd.h:62; ROOT::Math::XYZTVectorLorentzVector< PxPyPzE4D< double > > XYZTVectorLorentzVector based on x,y,x,t (or px,py,pz,E) coordinates in double precision with metric (-,...Definition Vector4Dfwd.h:46; df004_cutFlowReportDefinition df004_cutFlowReport.py:1; ; Cut3 stats:; Cut2 : pass=25 all=50 -- eff=50.00 % cumulative eff=50.00 %; Cut3 : pass=23 all=25 -- eff=92.00 % cumulative eff=46.00 %; All stats:; Cut1 : pass=24 all=50 -- eff=48.00 % cumulative eff=48.00 %; Cut2 : pass=25 all=50 -- eff=50.00 % cumulative eff=50.00 %; Cut3 : pass=23 all=25 -- eff=92.00 % cumulative eff=46.00 %; Name All Pass Efficiency; Cut1 50 24 48 %; Cut2 50 25 50 %; Cut3 25 23 92 %; Cut1 efficiency is 48 %; DateDecember 2016 ; AuthorDanilo Piparo (CERN) ; Definition in file df004_cutFlowReport.C. tutorialsdataframedf004_cutFlowReport.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df004__cutFlowReport_8C.html:4693,Guid,Guide,4693,doc/master/df004__cutFlowReport_8C.html,https://root.cern,https://root.cern/doc/master/df004__cutFlowReport_8C.html,1,['Guid'],['Guide']
Usability,"d ""sigma"" in 2 sepate pads. ;  ;  FittingDemo.C;   Example for fitting signal/background. ;  ;  graph2dfit.C;   Fitting a TGraph2D ;  ;  Ifit.C;   Example of a program to fit non-equidistant data points ;  ;  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ;  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ;  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ;  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ;  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ;  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ;  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ;  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ;  NumericalMinimization.py;  ;  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ;  TestBinomial.C;   Perform a fit to a set of data with binomial errors like those derived from the division of two histograms. ;  ;  TwoHistoFit2D.C;   Example to fit two histograms at the same time. ;  ;  vectorizedFit.C;   Tutorial for creating a Vectorized TF1 function using a formula expression and use it for fitting an histogram ;  . tutorialsfit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html:5170,Guid,Guide,5170,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,1,['Guid'],['Guide']
Usability,"d * ImportFromObjFormat(const char *objfile, bool check=false, bool verbose=false)Reader from .obj format.Definition TGeoTessellated.cxx:579; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::SetLineWidthvoid SetLineWidth(Width_t lwidth) overrideSet the line width.Definition TGeoVolume.cxx:2185; TGeoVolume::Raytracevoid Raytrace(Bool_t flag=kTRUE)Draw this volume with current settings and perform raytracing in the pad.Definition TGeoVolume.cxx:1427; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TViewSee TView3D.Definition TView.h:25; TView::Topvirtual void Top()=0; TVirtualGeoConverter::Instancestatic TVirtualGeoConverter * Instance(TGeoManager *geom=nullptr)Static function returning a pointer to the current geometry converter.Definition TVirtualGeoConverter.cxx:47; AuthorAndrei Gheata ; Definition in file tessellatedNav.C. tutorialsgeomtessellatedNav.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tessellatedNav_8C.html:5529,Guid,Guide,5529,doc/master/tessellatedNav_8C.html,https://root.cern,https://root.cern/doc/master/tessellatedNav_8C.html,1,['Guid'],['Guide']
Usability,"d * TEnumConstant::GetAddress ; (; ); const. inlineoverridevirtual . Return address of global. ; Reimplemented from TGlobal.; Definition at line 39 of file TEnumConstant.h. ◆ GetFullTypeName(). const char * TEnumConstant::GetFullTypeName ; (; ); const. inlineoverridevirtual . Get full type description of global variable, e,g.: ""class TDirectory*"". ; Reimplemented from TGlobal.; Definition at line 44 of file TEnumConstant.h. ◆ GetType(). const TEnum * TEnumConstant::GetType ; (; ); const. inline . Definition at line 41 of file TEnumConstant.h. ◆ GetTypeName(). const char * TEnumConstant::GetTypeName ; (; ); const. inlineoverridevirtual . Get type of global variable, e,g.: ""class TDirectory*"" -> ""TDirectory"". ; Result needs to be used or copied immediately. ; Reimplemented from TGlobal.; Definition at line 43 of file TEnumConstant.h. ◆ GetValue(). Long64_t TEnumConstant::GetValue ; (; ); const. inline . Definition at line 40 of file TEnumConstant.h. ◆ IsA(). TClass * TEnumConstant::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDictionary.; Definition at line 46 of file TEnumConstant.h. ◆ Streamer(). void TEnumConstant::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TDictionary. ◆ StreamerNVirtual(). void TEnumConstant::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 46 of file TEnumConstant.h. Member Data Documentation. ◆ fEnum. const TEnum* TEnumConstant::fEnum. private . Definition at line 31 of file TEnumConstant.h. ◆ fValue. Long64_t TEnumConstant::fValue. private . Definition at line 32 of file TEnumConstant.h. Libraries for TEnumConstant:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TEnumConstant.h; core/meta/src/TEnumConstant.cxx. TEnumConstant. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnumConstant.html:18084,Guid,Guide,18084,doc/master/classTEnumConstant.html,https://root.cern,https://root.cern/doc/master/classTEnumConstant.html,1,['Guid'],['Guide']
Usability,"d - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:2458,Undo,UndockWindowDestroySlot,2458,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,2,['Undo'],"['Undock', 'UndockWindowDestroySlot']"
Usability,"d . Definition at line 83 of file TMemFile.h. ◆ NeedsToWrite(). bool TMemFile::NeedsToWrite ; (; EMode ; mode); const. inlineprotected . Definition at line 82 of file TMemFile.h. ◆ operator=(). TMemFile & TMemFile::operator= ; (; const TMemFile & ; ). protecteddelete . ◆ ParseOption(). TMemFile::EMode TMemFile::ParseOption ; (; Option_t * ; option). protected . Parse option strings and set fOption. ; Definition at line 88 of file TMemFile.cxx. ◆ Print(). void TMemFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TFile.; Definition at line 298 of file TMemFile.cxx. ◆ ResetAfterMerge(). void TMemFile::ResetAfterMerge ; (; TFileMergeInfo * ; info). overridevirtual . Wipe all the data from the permanent buffer but keep, the in-memory object alive. ; Reimplemented from TDirectoryFile.; Definition at line 320 of file TMemFile.cxx. ◆ ResetErrno(). void TMemFile::ResetErrno ; (; ); const. overridevirtual . Simply calls TSystem::ResetErrno(). ; Reimplemented from TFile.; Definition at line 688 of file TMemFile.cxx. ◆ ResetObjects(). void TMemFile::ResetObjects ; (; TDirectoryFile * ; directory, . TFileMergeInfo * ; info . ); const. protected . Wipe all the data from the permanent buffer but keep, the in-memory object alive. ; Definition at line 387 of file TMemFile.cxx. ◆ Streamer(). void TMemFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TFile.; Reimplemented in TParallelMergingFile. ◆ StreamerNVirtual(). void TMemFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 109 of file TMemFile.h. ◆ SysClose(). Int_t TMemFile::SysClose ; (; Int_t ; fd). overrideprotectedvirtual . Close the mem file. ; Reimplemented from TFile.; Definition at line 590 of file TMemFile.cxx. ◆ SysOpen(). Int_t TMemFile::SysOpen ; (; const char * ; pathname, . Int_t ; flags, . UInt_t ; mode . ). overrideprotectedvirtual . Open a file in '",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemFile.html:48815,Simpl,Simply,48815,doc/master/classTMemFile.html,https://root.cern,https://root.cern/doc/master/classTMemFile.html,2,['Simpl'],['Simply']
Usability,d . Definition at line 86 of file TTreeCacheUnzip.h. ◆ fNFound. Int_t TTreeCacheUnzip::fNFound. protected . ! number of blocks that were found in the cache ; Definition at line 103 of file TTreeCacheUnzip.h. ◆ fNMissed. Int_t TTreeCacheUnzip::fNMissed. protected . ! number of blocks that were not found in the cache and were unzipped ; Definition at line 104 of file TTreeCacheUnzip.h. ◆ fNseekMax. Int_t TTreeCacheUnzip::fNseekMax. protected . ! fNseek can change so we need to know its max size ; Definition at line 96 of file TTreeCacheUnzip.h. ◆ fNStalls. Int_t TTreeCacheUnzip::fNStalls. protected . ! number of hits which caused a stall ; Definition at line 105 of file TTreeCacheUnzip.h. ◆ fNUnzip. Int_t TTreeCacheUnzip::fNUnzip. protected . ! number of blocks that were unzipped ; Definition at line 106 of file TTreeCacheUnzip.h. ◆ fParallel. bool TTreeCacheUnzip::fParallel. protected . Indicate if we want to activate the parallelism (for this instance) ; Definition at line 84 of file TTreeCacheUnzip.h. ◆ fUnzipBufferSize. Long64_t TTreeCacheUnzip::fUnzipBufferSize. protected . ! Max Size for the ready unzipped blocks (default is 2*fBufferSize) ; Definition at line 98 of file TTreeCacheUnzip.h. ◆ fUnzipGroupSize. Int_t TTreeCacheUnzip::fUnzipGroupSize. protected . ! Min accumulated size of a group of baskets ready to be unzipped by a IMT task ; Definition at line 97 of file TTreeCacheUnzip.h. ◆ fUnzipState. UnzipState_t TTreeCacheUnzip::fUnzipState. protected . Definition at line 78 of file TTreeCacheUnzip.h. ◆ fUnzipTaskGroup. std::unique_ptr<ROOT::Experimental::TTaskGroup> TTreeCacheUnzip::fUnzipTaskGroup. protected . Definition at line 92 of file TTreeCacheUnzip.h. Libraries for TTreeCacheUnzip:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTreeCacheUnzip.h; tree/tree/src/TTreeCacheUnzip.cxx. TTreeCacheUnzip. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:14 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:41715,Guid,Guide,41715,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['Guid'],['Guide']
Usability,d . logical page size of scrollbar ; Definition at line 73 of file TGScrollBar.h. ◆ fRange. Int_t TGScrollBar::fRange. protected . logical upper range of scrollbar ; Definition at line 72 of file TGScrollBar.h. ◆ fRepeat. TTimer* TGScrollBar::fRepeat. protected . repeat rate timer (when mouse stays pressed) ; Definition at line 83 of file TGScrollBar.h. ◆ fSlider. TGScrollBarElement* TGScrollBar::fSlider. protected . slider ; Definition at line 80 of file TGScrollBar.h. ◆ fSliderRange. Int_t TGScrollBar::fSliderRange. protected . logical slider range ; Definition at line 76 of file TGScrollBar.h. ◆ fSliderSize. Int_t TGScrollBar::fSliderSize. protected . logical slider size ; Definition at line 75 of file TGScrollBar.h. ◆ fSmallInc. Int_t TGScrollBar::fSmallInc. protected . Small Increment in the sliding algorithm. ; Definition at line 77 of file TGScrollBar.h. ◆ fSubw. Window_t TGScrollBar::fSubw. protected . sub window in which mouse is pressed ; Definition at line 84 of file TGScrollBar.h. ◆ fTail. TGScrollBarElement* TGScrollBar::fTail. protected . tail button of scrollbar ; Definition at line 79 of file TGScrollBar.h. ◆ fTailPic. const TGPicture* TGScrollBar::fTailPic. protected . picture in tail (down or right arrow) ; Definition at line 82 of file TGScrollBar.h. ◆ fX0. Int_t TGScrollBar::fX0. protected . Definition at line 68 of file TGScrollBar.h. ◆ fXp. Int_t TGScrollBar::fXp. protected . Definition at line 69 of file TGScrollBar.h. ◆ fY0. Int_t TGScrollBar::fY0. protected . current slider position in pixels ; Definition at line 68 of file TGScrollBar.h. ◆ fYp. Int_t TGScrollBar::fYp. protected . previous slider position in pixels ; Definition at line 69 of file TGScrollBar.h. Libraries for TGScrollBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGScrollBar.h; gui/gui/src/TGScrollBar.cxx. TGScrollBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBar.html:40925,Guid,Guide,40925,doc/master/classTGScrollBar.html,https://root.cern,https://root.cern/doc/master/classTGScrollBar.html,1,['Guid'],['Guide']
Usability,"d ; (; ). inline . Definition at line 18 of file TVirtualMagField.h. ◆ TVirtualMagField() [2/2]. TVirtualMagField::TVirtualMagField ; (; const char * ; name). inline . Definition at line 19 of file TVirtualMagField.h. ◆ ~TVirtualMagField(). TVirtualMagField::~TVirtualMagField ; (; ). override . Destructor. Unregisters the field. ; Definition at line 41 of file TVirtualMagField.cxx. Member Function Documentation. ◆ Class(). static TClass * TVirtualMagField::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualMagField::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualMagField::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 24 of file TVirtualMagField.h. ◆ DeclFileName(). static const char * TVirtualMagField::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 24 of file TVirtualMagField.h. ◆ Field(). virtual void TVirtualMagField::Field ; (; const Double_t * ; x, . Double_t * ; B . ). pure virtual . Implemented in TGeoUniformMagField. ◆ IsA(). TClass * TVirtualMagField::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 24 of file TVirtualMagField.h. ◆ Streamer(). void TVirtualMagField::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TVirtualMagField::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 24 of file TVirtualMagField.h. Libraries for TVirtualMagField:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TVirtualMagField.h; geom/geom/src/TVirtualMagField.cxx. TVirtualMagField. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMagField.html:14021,Guid,Guide,14021,doc/master/classTVirtualMagField.html,https://root.cern,https://root.cern/doc/master/classTVirtualMagField.html,1,['Guid'],['Guide']
Usability,"d ;  draw_rh1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_subpads.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 lines in it (RLine) ;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnew",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:172611,learn,learn,172611,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['learn'],['learn']
Usability,"d = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGTextEntry (const TGWindow *p, TGTextBuffer *text, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a text entry widget. ;  ;  TGTextEntry (const TGWindow *parent=nullptr, const char *text=nullptr, Int_t id=-1);  Simple text entry constructor. ;  ;  TGTextEntry (const TString &contents, const TGWindow *parent, Int_t id=-1);  Simple test entry constructor. ;  ;  ~TGTextEntry () override;  Delete a text entry widget. ;  ; virtual void AppendText (const char *text);  Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ;  ; void Backspace ();  Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ;  ; void Clear (Option_t *option="""") override;  Clears up the text entry. ;  ; void CursorLeft (Bool_t mark=kFALSE, Int_t steps=1);  Moves the cursor leftwards one or more characters. ;  ; virtual void CursorOutDown ();  This signal is emitted when cursor is going out of bottom side. ;  ; virtual void CursorOutLeft ();  This signal is emitted when cursor is going out of left side. ;  ; virtual void CursorOutRight ();  This signal is emitted when cursor is going out of right side. ;  ; virtual void CursorOutUp ();  This signal is emitted when cursor is going out of upper side. ;  ; void Cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:6025,Simpl,Simple,6025,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['Simpl'],['Simple']
Usability,"d Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete(). void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClonesArray.html:14829,Clear,Clear,14829,root/html526/TClonesArray.html,https://root.cern,https://root.cern/root/html526/TClonesArray.html,1,['Clear'],['Clear']
Usability,"d CreatePainter(); Probably, TPadPainter must be placed in a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. TCanvas(const TCanvas &canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelectedY;}. Option_t * GetSelectedOpt() const; {return fSelectedOpt.Data();}. TVirtualPad * GetSelectedPad() const; { return fSelectedPad; }. TVirtualPad * GetClickSelectedPad() const; { return fClickSelectedPad; }. Bool_t GetShowEventStatus() const; { return TestBit(kShowEventStatus); }. Bool_t GetShowToolBar() const; { return TestBit(kShowToolBar); }. Bool_t GetShowEditor() const; { return TestBit(kShowEditor); }. Bool_t GetShowToolTips() const; { return TestBit(kShowToolTips); }. Bool_t GetAutoExec() const; { return TestBit(kAutoExec); }. Size_t GetXsizeUser() const; {return fXsizeUser;}. Size_t GetYsizeUser() const; {return fYsizeUser;}. Size_t GetXsizeReal() const; {return fXsizeReal;}. Size_t GetYsizeReal() const; {return fYsizeReal;}. Int_t GetCanvasID() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCanvas.html:45275,Clear,ClearPadSave,45275,root/html526/TCanvas.html,https://root.cern,https://root.cern/root/html526/TCanvas.html,1,['Clear'],['ClearPadSave']
Usability,"d CreatePainter(); Probably, TPadPainter must be placed in a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. TCanvas(const TCanvas& canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelectedY;}. Option_t * GetSelectedOpt() const; {return fSelectedOpt.Data();}. TVirtualPad * GetSelectedPad() const; { return fSelectedPad; }. TVirtualPad * GetClickSelectedPad() const; { return fClickSelectedPad; }. Bool_t GetShowEventStatus() const; { return TestBit(kShowEventStatus); }. Bool_t GetShowToolBar() const; { return TestBit(kShowToolBar); }. Bool_t GetShowEditor() const; { return TestBit(kShowEditor); }. Bool_t GetShowToolTips() const; { return TestBit(kShowToolTips); }. Bool_t GetAutoExec() const; { return TestBit(kAutoExec); }. Size_t GetXsizeUser() const; {return fXsizeUser;}. Size_t GetYsizeUser() const; {return fYsizeUser;}. Size_t GetXsizeReal() const; {return fXsizeReal;}. Size_t GetYsizeReal() const; {return fYsizeReal;}. Int_t GetCanvasID() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCanvas.html:45269,Clear,ClearPadSave,45269,root/html528/TCanvas.html,https://root.cern,https://root.cern/root/html528/TCanvas.html,3,['Clear'],['ClearPadSave']
Usability,"d Initialize()Initialize the weights and biases according to the given initialization method.Definition GeneralLayer.h:395; TMVA::DNN::VGeneralLayer::GetBiasesAtMatrix_t & GetBiasesAt(size_t i)Definition GeneralLayer.h:182; TMVA::DNN::VGeneralLayer::SetInputHeightvoid SetInputHeight(size_t inputHeight)Definition GeneralLayer.h:219; TMVA::DNN::VGeneralLayer::fBiasGradientsstd::vector< Matrix_t > fBiasGradientsGradients w.r.t. the bias values of the layer.Definition GeneralLayer.h:75; TMVA::DNN::VGeneralLayer::SetDepthvoid SetDepth(size_t depth)Definition GeneralLayer.h:221; TMVA::DNN::VGeneralLayer::SetExtraLayerParametersvirtual void SetExtraLayerParameters(const std::vector< Matrix_t > &)Definition GeneralLayer.h:212; TMVA::DNN::VGeneralLayer::ReadWeightsFromXMLvirtual void ReadWeightsFromXML(void *parent)=0Read the information and the weights about the layer from XML node.; TMVA::DNN::VGeneralLayer::UpdateBiasGradientsvoid UpdateBiasGradients(const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate)Updates the bias gradients, given some other weight gradients and learning rate.Definition GeneralLayer.h:448; TMVA::DNN::VGeneralLayer::SetBatchSizevoid SetBatchSize(size_t batchSize)Setters.Definition GeneralLayer.h:217; TMVA::DNN::VGeneralLayer::CopyWeightsvoid CopyWeights(const std::vector< Matrix_t > &otherWeights)Copies the weights provided as an input.Definition GeneralLayer.h:458; TMVA::DNN::VGeneralLayer::fBatchSizesize_t fBatchSizeBatch size used for training and evaluation.Definition GeneralLayer.h:59; TMVA::DNN::VGeneralLayer::AddWeightsXMLTovirtual void AddWeightsXMLTo(void *parent)=0Writes the information and the weights about the layer in an XML node.; TMVA::DNN::VGeneralLayer::UpdateWeightsvoid UpdateWeights(const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate)Updates the weights, given the gradients and the learning rate,.Definition GeneralLayer.h:418; TMVA::DNN::VGeneralLayer::Matrix_ttypename Architecture_t::Mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:29384,learn,learningRate,29384,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],"['learning', 'learningRate']"
Usability,"d Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach); TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodInfo ; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach""); TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassIndex.html:102814,simpl,simple,102814,root/html604/ClassIndex.html,https://root.cern,https://root.cern/root/html604/ClassIndex.html,1,['simpl'],['simple']
Usability,"d Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach); TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach""); TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::Optimiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:102158,simpl,simple,102158,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['simpl'],['simple']
Usability,"d Members; Includes; Libraries. Function documentation; TEveTrack(); Default constructor. TEveTrack(TParticle* t, Int_t label, TEveTrackPropagator* prop = 0); Constructor from TParticle. TEveTrack(TEveMCTrack* t, TEveTrackPropagator* prop = 0); Constructor from TEveUtil Monte Carlo track. TEveTrack(TEveRecTrack* t, TEveTrackPropagator* prop = 0); Constructor from TEveUtil reconstructed track. TEveTrack(const TEveTrack& t); Copy constructor. Track paremeters are copied but the; extrapolation is not perfermed so you should still call; MakeTrack() to do that.; If points of 't' are locked, they are cloned. ~TEveTrack(); Destructor. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Returns list-tree icon for TEveTrack. void ComputeBBox(); Compute the bounding box of the track. void SetStdTitle(); Set standard track title based on most data-member values. void SetTrackParams(const TEveTrack& t); Copy track parameters from t. Track-propagator is set, too.; PathMarks are cleared - you can copy them via SetPathMarks(t).; If track 't' is locked, you should probably clone its points; over - use TEvePointSet::ClonePoints(t);. void SetPathMarks(const TEveTrack& t); Copy path-marks from t. void SetPropagator(TEveTrackPropagator* prop); Set track's render style.; Reference counts of old and new propagator are updated. void SetAttLineAttMarker(TEveTrackList* tl); Set line and marker attributes from TEveTrackList. void MakeTrack(Bool_t recurse = kTRUE); Calculate track representation based on track data and current; settings of the propagator.; If recurse is true, descend into children. void CopyVizParams(const TEveElement* el); Copy visualization parameters from element el. void WriteVizParams(ostream& out, const TString& var); Write visualization parameters. TClass* ProjectedClass(const TEveProjection* p) const; Virtual from TEveProjectable, return TEveTrackProjected class. void SortPathMarksByTime(); Sort registerd pat-marks by time. void PrintPathMarks(); Print registered ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrack.html:30606,clear,cleared,30606,root/html528/TEveTrack.html,https://root.cern,https://root.cern/root/html528/TEveTrack.html,1,['clear'],['cleared']
Usability,"d Print(Option_t *option="""") const overrideDefault print for collections, calls Print(option, 1).Definition TCollection.cxx:476; TCollection::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TCollection.cxx:312; TCollection::IsEmptyvirtual Bool_t IsEmpty() constDefinition TCollection.h:188; TCollection::IsUsingRWLockR__ALWAYS_INLINE Bool_t IsUsingRWLock() constDefinition TCollection.h:212; TCollection::fgGarbageCollectionstatic TObjectTable * fgGarbageCollectionDefinition TCollection.h:135; TCollection::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an collection using the Streamer facility.Definition TCollection.cxx:263; TCollection::AddVectorvoid AddVector(TObject *obj1,...)Add all arguments to the collection.Definition TCollection.cxx:208; TCollection::Deletevoid Delete(Option_t *option="""") override=0Delete this object.; TCollection::Clearvoid Clear(Option_t *option="""") override=0; TCollection::~TCollectionvirtual ~TCollection()TNamed destructor.Definition TCollection.cxx:186; TCollection::StartGarbageCollectionstatic void StartGarbageCollection()Set up for garbage collection.Definition TCollection.cxx:696; TCollection::GarbageCollectstatic void GarbageCollect(TObject *obj)Add to the list of things to be cleaned up.Definition TCollection.cxx:725; TCollection::IsSortableBool_t IsSortable() const overrideDefinition TCollection.h:191; TCollection::operator()TObject * operator()(const char *name) constFind an object in this collection by name.Definition TCollection.cxx:325; TCollection::ContainsBool_t Contains(const char *name) constDefinition TCollection.h:171; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TCollection::ContainsBool_t Contains(const TObject *obj) constDefinition TCollection.h:172; TCollection::Paintvoid Paint(Option_t *option="""") overridePaint all objects in this collection.De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:22979,Clear,Clearvoid,22979,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"d RooFactoryWSTool::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooFactoryWSTool::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 199 of file RooFactoryWSTool.h. ◆ varTag(). string RooFactoryWSTool::varTag ; (; std::string & ; func, . std::vector< std::string > & ; args . ). protected . Definition at line 1238 of file RooFactoryWSTool.cxx. ◆ ws(). RooWorkspace & RooFactoryWSTool::ws ; (; ). inline . Definition at line 75 of file RooFactoryWSTool.h. Member Data Documentation. ◆ _args. std::vector<std::string> RooFactoryWSTool::_args. protected . Definition at line 184 of file RooFactoryWSTool.h. ◆ _autoClassPostFix. std::string RooFactoryWSTool::_autoClassPostFix. protected . Definition at line 197 of file RooFactoryWSTool.h. ◆ _autoNamePrefix. std::stack<std::string> RooFactoryWSTool::_autoNamePrefix. protected . Definition at line 164 of file RooFactoryWSTool.h. ◆ _errorCount. Int_t RooFactoryWSTool::_errorCount = 0. protected . Definition at line 195 of file RooFactoryWSTool.h. ◆ _hooks. map< string, RooFactoryWSTool::IFace * > * RooFactoryWSTool::_hooks =nullptr. staticprotected . Definition at line 188 of file RooFactoryWSTool.h. ◆ _of. RooFactoryWSTool * RooFactoryWSTool::_of = nullptr. staticprotected . Definition at line 183 of file RooFactoryWSTool.h. ◆ _typeAliases. std::map<std::string,std::string> RooFactoryWSTool::_typeAliases. protected . Definition at line 165 of file RooFactoryWSTool.h. ◆ _ws. RooWorkspace* RooFactoryWSTool::_ws. protected . Definition at line 190 of file RooFactoryWSTool.h. Libraries for RooFactoryWSTool:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooFactoryWSTool.h; roofit/roofitcore/src/RooFactoryWSTool.cxx. RooFactoryWSTool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:44490,Guid,Guide,44490,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['Guid'],['Guide']
Usability,"d SetAddress(void *add)Set address of this branch.Definition TBranch.cxx:2682; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the given name in this tree or its friends.Definition TTree.cxx:5294; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; c1return c1Definition legend1.C:41; f1TF1 * f1Definition legend1.C:11; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; lTLine lDefinition textangle.C:4; AuthorRene Brun ; Definition in file tree2.C. tutorialstreetree2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree2_8C.html:8771,Guid,Guide,8771,doc/master/tree2_8C.html,https://root.cern,https://root.cern/doc/master/tree2_8C.html,1,['Guid'],['Guide']
Usability,"d SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; - ""text"" (simple text output); - ""graph"" (evoluting graphical training curves); - ""update=X"" (step for the text/graph output update); - ""+"" will skip the randomisation and start from the previous values.; - ""current"" (draw in the current canvas); - ""minErrorTrain"" (stop when NN error on the training sample gets below minE; - ""minErrorTest"" (stop when NN error on the test sample gets below minE; All combinations are available. Double_t Result(Int_t event, Int_t index = 0) const; Computes the output for a given event.; Look at the output neuron designed by index. Double_t GetError(Int_t event) const; Error on the output for a given event. Double_t GetError(TMultiLayerPerceptron::EDataSet set) const; Error on the whole dataset. Double_t GetSumSquareError() const; Error on the output for a given event. Double_t GetCrossEntropyBinary() const; Cross entropy error for sigmoid output neurons, for a given event. Double_t GetCrossEntropy() const; Cross entropy error for a softmax output neuron, for a given event. void ComputeDEDw() const; Compute the DEDw = sum on all training events",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:24900,simpl,simple,24900,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['simpl'],['simple']
Usability,"d SetNpx(Int_t npx=100)Set the number of points used to draw the function.Definition TF1.cxx:3433; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::SetNpyvirtual void SetNpy(Int_t npy=100)Set the number of points used to draw the function.Definition TF2.cxx:927; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TF3A 3-Dim function with parameters.Definition TF3.h:28; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetLogzvoid SetLogz(Int_t value=1) overrideSet Lin/Log scale for Z.Definition TPad.cxx:6111; TPad::Updatevoid Update() overrideUpdate pad.Definition TPad.cxx:2935; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMark pad modified Will be repainted when TCanvas::Update() will be called next time.Definition TPad.cxx:7369; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TStyle::SetFrameFillColorvoid SetFrameFillColor(Color_t color=1)Definition TStyle.h:372; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; TStyle::SetCanvasPreferGLvoid SetCanvasPreferGL(Bool_t prefer=kTRUE)Definition TStyle.h:341; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; AuthorsRene Brun, Timur Pocheptsov ; Definition in file glsurfaces.C. tutorialsglglsurfaces.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glsurfaces_8C.html:6048,Guid,Guide,6048,doc/master/glsurfaces_8C.html,https://root.cern,https://root.cern/doc/master/glsurfaces_8C.html,1,['Guid'],['Guide']
Usability,"d TBits::Set ; (; UInt_t ; nbits, . const Int_t * ; array . ). Definition at line 593 of file TBits.cxx. ◆ Set() [3/8]. void TBits::Set ; (; UInt_t ; nbits, . const Long64_t * ; array . ). Definition at line 611 of file TBits.cxx. ◆ Set() [4/8]. void TBits::Set ; (; UInt_t ; nbits, . const Short_t * ; array . ). Definition at line 577 of file TBits.cxx. ◆ Set() [5/8]. void TBits::Set ; (; UInt_t ; nbits, . const UChar_t * ; array . ). inline . Definition at line 100 of file TBits.h. ◆ Set() [6/8]. void TBits::Set ; (; UInt_t ; nbits, . const UInt_t * ; array . ). inline . Definition at line 104 of file TBits.h. ◆ Set() [7/8]. void TBits::Set ; (; UInt_t ; nbits, . const ULong64_t * ; array . ). inline . Definition at line 106 of file TBits.h. ◆ Set() [8/8]. void TBits::Set ; (; UInt_t ; nbits, . const UShort_t * ; array . ). inline . Definition at line 102 of file TBits.h. ◆ SetBitNumber(). void TBits::SetBitNumber ; (; UInt_t ; bitnumber, . Bool_t ; value = kTRUE . ). inline . Definition at line 206 of file TBits.h. ◆ Streamer(). void TBits::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TBits::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 144 of file TBits.h. ◆ TestBitNumber(). Bool_t TBits::TestBitNumber ; (; UInt_t ; bitnumber); const. inline . Definition at line 222 of file TBits.h. Member Data Documentation. ◆ fAllBits. UChar_t* TBits::fAllBits. protected . Definition at line 32 of file TBits.h. ◆ fNbits. UInt_t TBits::fNbits. protected . Definition at line 30 of file TBits.h. ◆ fNbytes. UInt_t TBits::fNbytes. protected . Definition at line 31 of file TBits.h. Libraries for TBits:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TBits.h; core/cont/src/TBits.cxx. TBits. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:23124,Guid,Guide,23124,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,1,['Guid'],['Guide']
Usability,"d TEveLine::SetRnrLine ; (; Bool_t ; r). Set rendering of line. Propagate to projected lines. ; Definition at line 125 of file TEveLine.cxx. ◆ SetRnrPoints(). void TEveLine::SetRnrPoints ; (; Bool_t ; r). Set rendering of points. Propagate to projected lines. ; Definition at line 144 of file TEveLine.cxx. ◆ SetSmooth(). void TEveLine::SetSmooth ; (; Bool_t ; r). Set smooth rendering. Propagate to projected lines. ; Definition at line 163 of file TEveLine.cxx. ◆ Streamer(). void TEveLine::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement.; Reimplemented in TEveLineProjected, TEveTrack, and TEveTrackProjected. ◆ StreamerNVirtual(). void TEveLine::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file TEveLine.h. ◆ WriteVizParams(). void TEveLine::WriteVizParams ; (; std::ostream & ; out, . const TString & ; var . ). overridevirtual . Write visualization parameters. ; Reimplemented from TEveElement.; Reimplemented in TEveTrack.; Definition at line 277 of file TEveLine.cxx. Friends And Related Symbol Documentation. ◆ TEveLineEditor. friend class TEveLineEditor. friend . Definition at line 27 of file TEveLine.h. ◆ TEveLineGL. friend class TEveLineGL. friend . Definition at line 28 of file TEveLine.h. Member Data Documentation. ◆ fgDefaultSmooth. Bool_t TEveLine::fgDefaultSmooth = kFALSE. staticprotected . Definition at line 39 of file TEveLine.h. ◆ fRnrLine. Bool_t TEveLine::fRnrLine. protected . Definition at line 35 of file TEveLine.h. ◆ fRnrPoints. Bool_t TEveLine::fRnrPoints. protected . Definition at line 36 of file TEveLine.h. ◆ fSmooth. Bool_t TEveLine::fSmooth. protected . Definition at line 37 of file TEveLine.h. Libraries for TEveLine:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveLine.h; graf3d/eve/src/TEveLine.cxx. TEveLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:56797,Guid,Guide,56797,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,1,['Guid'],['Guide']
Usability,"d TMemberInspector::InspectMember ; (; const TObject & ; obj, . const char * ; name, . Bool_t ; isTransient . ). Definition at line 132 of file TMemberInspector.cxx. ◆ InspectMember() [4/4]. void TMemberInspector::InspectMember ; (; TClass * ; cl, . const void * ; pobj, . const char * ; name, . Bool_t ; isTransient . ). Definition at line 150 of file TMemberInspector.cxx. ◆ IsA(). virtual TClass * TMemberInspector::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 79 of file TMemberInspector.h. ◆ IsTreatingNonAccessibleTypes(). virtual Bool_t TMemberInspector::IsTreatingNonAccessibleTypes ; (; ). inlinevirtual . Reimplemented in TAutoInspector.; Definition at line 60 of file TMemberInspector.h. ◆ operator=(). TMemberInspector & TMemberInspector::operator= ; (; const TMemberInspector & ; ). privatedelete . ◆ RemoveFromParent(). void TMemberInspector::RemoveFromParent ; (; Ssiz_t ; startingAt). Definition at line 93 of file TMemberInspector.cxx. ◆ SetObjectValidity(). void TMemberInspector::SetObjectValidity ; (; EObjectPointerState ; val). inline . Definition at line 51 of file TMemberInspector.h. ◆ Streamer(). virtual void TMemberInspector::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMemberInspector::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TMemberInspector.h. Member Data Documentation. ◆ fObjectPointerState. EObjectPointerState TMemberInspector::fObjectPointerState. private . Definition at line 41 of file TMemberInspector.h. ◆ fParent. TParentBuf* TMemberInspector::fParent. private . Definition at line 40 of file TMemberInspector.h. Libraries for TMemberInspector:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TMemberInspector.h; core/base/src/TMemberInspector.cxx. TMemberInspector. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemberInspector.html:7582,Guid,Guide,7582,doc/master/classTMemberInspector.html,https://root.cern,https://root.cern/doc/master/classTMemberInspector.html,1,['Guid'],['Guide']
Usability,d TSPHE::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TShape.; Definition at line 271 of file TSPHE.cxx. ◆ StreamerNVirtual(). void TSPHE::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TSPHE.h. Member Data Documentation. ◆ fAspectRatio. Float_t TSPHE::fAspectRatio. private . number of sections ; Definition at line 36 of file TSPHE.h. ◆ faX. Float_t TSPHE::faX. protected . Definition at line 45 of file TSPHE.h. ◆ faY. Float_t TSPHE::faY. protected . Definition at line 46 of file TSPHE.h. ◆ faZ. Float_t TSPHE::faZ. protected . Definition at line 47 of file TSPHE.h. ◆ fCoTab. Double_t* TSPHE::fCoTab. mutableprivate . Table of sin(fPhimin) .... sin(Phi) ; Definition at line 32 of file TSPHE.h. ◆ fCoThetaTab. Double_t* TSPHE::fCoThetaTab. mutableprivate . Table of cos(fPhimin) .... cos(Phi) ; Definition at line 33 of file TSPHE.h. ◆ fNdiv. Int_t TSPHE::fNdiv. private . Table of sin(gThemin) .... cos(Theta) ; Definition at line 34 of file TSPHE.h. ◆ fNz. Int_t TSPHE::fNz. private . Definition at line 35 of file TSPHE.h. ◆ fPhimax. Float_t TSPHE::fPhimax. protected . Definition at line 44 of file TSPHE.h. ◆ fPhimin. Float_t TSPHE::fPhimin. protected . Definition at line 43 of file TSPHE.h. ◆ fRmax. Float_t TSPHE::fRmax. protected . Definition at line 40 of file TSPHE.h. ◆ fRmin. Float_t TSPHE::fRmin. protected . Definition at line 39 of file TSPHE.h. ◆ fSiTab. Double_t* TSPHE::fSiTab. mutableprivate . Definition at line 31 of file TSPHE.h. ◆ fThemax. Float_t TSPHE::fThemax. protected . Definition at line 42 of file TSPHE.h. ◆ fThemin. Float_t TSPHE::fThemin. protected . Definition at line 41 of file TSPHE.h. Libraries for TSPHE:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TSPHE.h; graf3d/g3d/src/TSPHE.cxx. TSPHE. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPHE.html:24341,Guid,Guide,24341,doc/master/classTSPHE.html,https://root.cern,https://root.cern/doc/master/classTSPHE.html,1,['Guid'],['Guide']
Usability,"d UpdateOffset(); Updates start text offset according GetAlignment() mode,; if cursor is out of frame => scroll the text.; See also SetAlignment() and ScrollByChar(). void SetToolTipText(const char* text, Long_t delayms = 500); Set tool tip text associated with this text entry. The delay is in; milliseconds (minimum 250). To remove tool tip call method with; text = 0. void SetFocus(); Set focus to this text entry. void InsertText(const char* text, Int_t pos); Inserts text at position pos, clears the selection and moves; the cursor to the end of the line.; If necessary the text is truncated to fit MaxLength().; See also GetText(), SetText(), AppendText(), RemoveText(). void AppendText(const char* text); Appends text to the end of text entry, clears the selection; and moves the cursor to the end of the line.; If necessary the text is truncated to fit MaxLength().; See also GetText(), InsertText(), SetText(), RemoveText(). void RemoveText(Int_t start, Int_t end); Removes text at the range, clears the selection and moves; the cursor to the end of the line.; See also GetText(), InsertText(), SetText(), AppendText(). void SetFont(FontStruct_t font, Bool_t local = kTRUE); Changes text font.; If local is kTRUE font is changed locally. void SetFont(const char* fontName, Bool_t local = kTRUE); Changes text font specified by name.; If local is kTRUE font is changed locally. void SetFont(TGFont* font, Bool_t local = kTRUE); Changes text font specified by pointer to TGFont object.; If local is kTRUE font is changed locally. void SetTextColor(Pixel_t color, Bool_t local = kTRUE); Changes text color.; If local is true color is changed locally. void SetTextColor(TColor* color, Bool_t local = kTRUE); Changes text color.; If local is true color is changed locally. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context. const TGGC & GetDefaultSelectedGC(); Return selection graphics context. const TGGC & Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEntry.html:37288,clear,clears,37288,root/html528/TGTextEntry.html,https://root.cern,https://root.cern/root/html528/TGTextEntry.html,6,['clear'],['clears']
Usability,"d a color integer for the color whose color components; are given by pRef. const char * GetHref(int x, int y, const char** target = 0); This routine searchs for a hyperlink beneath the coordinates x,y; and returns a pointer to the HREF for that hyperlink. The text; is held in one of the markup argv[] fields of the <a> markup. int ElementCoords(TGHtmlElement* p, int i, int pct, int* coords); Return coordinates of item. TGHtmlElement * AttrElem(const char* name, char* value); Returns html element matching attribute name and value. void UpdateSelection(int forceUpdate); Given the selection end-points in fSelBegin and fSelEnd, recompute; pSelBeginBlock and fPSelEndBlock, then call UpdateSelectionDisplay(); to update the display. This routine should be called whenever the selection changes or; whenever the set of TGHtmlBlock structures change. void UpdateSelectionDisplay(); The fPSelStartBlock and fPSelEndBlock values have been changed.; This routine's job is to loop over all TGHtmlBlocks and either; set or clear the HTML_Selected bits in the .fFlags field; as appropriate. For every TGHtmlBlock where the bit changes,; mark that block for redrawing. void LostSelection(); Clear selection. int SelectionSet(const char* startIx, const char* endIx); Set selection. void UpdateInsert(); Recompute the position of the insertion cursor based on the; position in fIns. int SetInsert(const char* insIx); Set the position of the insertion cursor. void SavePrimitive(ostream& out, Option_t* = """"); Save a html widget as a C++ statement(s) on output stream out. Bool_t ProcessMessage(Long_t , Long_t , Long_t ). int GetTableRelief() const; { return fTableRelief; }. int GetRuleRelief() const; { return fRuleRelief; }. int GetRulePadding() const; { return fRulePadding; }. const char * GetBaseUri() const; { return fZBase; }. char * ResolveUri(const char* uri); User function to resolve URIs. TImage * LoadImage(const char* uri, int w = 0, int h = 0); User function to get an image from a URL. int Is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtml.html:38585,clear,clear,38585,root/html528/TGHtml.html,https://root.cern,https://root.cern/root/html528/TGHtml.html,4,['clear'],['clear']
Usability,"d a color integer for the color whose color components; are given by pRef. const char * GetHref(int x, int y, const char** target = 0); This routine searchs for a hyperlink beneath the coordinates x,y; and returns a pointer to the HREF for that hyperlink. The text; is held in one of the markup argv[] fields of the <a> markup. int ElementCoords(TGHtmlElement* p, int i, int pct, int* coords); Return coordinates of item. TGHtmlElement * AttrElem(const char* name, char* value); Returns html element matching attribute name and value. void UpdateSelection(int forceUpdate); Given the selection end-points in fSelBegin and fSelEnd, recompute; pSelBeginBlock and fPSelEndBlock, then call UpdateSelectionDisplay(); to update the display. This routine should be called whenever the selection changes or; whenever the set of TGHtmlBlock structures change. void UpdateSelectionDisplay(); The fPSelStartBlock and fPSelEndBlock values have been changed.; This routine's job is to loop over all TGHtmlBlocks and either; set or clear the HTML_Selected bits in the .fFlags field; as appropriate. For every TGHtmlBlock where the bit changes,; mark that block for redrawing. void LostSelection(); Clear selection. int SelectionSet(const char* startIx, const char* endIx); Set selection. void UpdateInsert(); Recompute the position of the insertion cursor based on the; position in fIns. int SetInsert(const char* insIx); Set the position of the insertion cursor. void SavePrimitive(ostream& out, Option_t* = """"); Save a html widget as a C++ statement(s) on output stream out. TGHtmlTextElement & operator=(const TGHtml& ). TGHtml(const TGWindow* p, int w, int h, int id = -1). Bool_t ProcessMessage(Long_t , Long_t , Long_t ). int GetTableRelief() const; { return fTableRelief; }. int GetRuleRelief() const; { return fRuleRelief; }. int GetRulePadding() const; { return fRulePadding; }. const char * GetBaseUri() const; { return fZBase; }. char * ResolveUri(const char* uri); User function to resolve URIs. TImage",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHtml.html:39770,clear,clear,39770,root/html602/TGHtml.html,https://root.cern,https://root.cern/root/html602/TGHtml.html,2,['clear'],['clear']
Usability,"d a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooProdPdfEfficient implementation of a product of PDFs of the form.Definition RooProdPdf.h:33; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; RooFit::YVarRooCmdArg YVar(const RooAbsRealLValue &var, const RooCmdArg &arg={})Definition RooGlobalFunc.cxx:846; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf707_kernelestimationDefinition rf707_kernelestimation.py:1; ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf707_kernelestimation.C. tutorialsroofitrf707_kernelestimation.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf707__kernelestimation_8C.html:7023,Guid,Guide,7023,doc/master/rf707__kernelestimation_8C.html,https://root.cern,https://root.cern/doc/master/rf707__kernelestimation_8C.html,1,['Guid'],['Guide']
Usability,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Definition at line 69 of file TBuffer.h. ◆ Write() [2/2]. Int_t TBuffer::Write ; (; const char * ; name, . Int_t ; option, . Int_t ; bufsize .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer.html:58911,simpl,simply,58911,doc/master/classTBuffer.html,https://root.cern,https://root.cern/doc/master/classTBuffer.html,1,['simpl'],['simply']
Usability,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Reimplemented in TSQLFile, TXMLFile, TFile, TParallelMergingFile, and TDirectoryFile.; Definition at line 265 of file TDirectory.h. ◆ Write() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:52375,simpl,simply,52375,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,2,['simpl'],['simply']
Usability,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented in TSQLFile, TXMLFile, TDirectory, TBuffer, TFile, TParallelMergingFile, TDirectoryFile, TCollection, TMap, and TTree.; Definition at line 858 of file TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:119209,simpl,simply,119209,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['simpl'],['simply']
Usability,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented in TSQLFile, TXMLFile, TDirectory, TBuffer, TFile, TParallelMergingFile, TDirectoryFile, TCollection, TMap, and TTree.; Definition at line 864 of file TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:118210,simpl,simply,118210,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['simpl'],['simply']
Usability,"d by SavePrimitive.; The function is available via the object context menu. . Reimplemented from TObject.; Reimplemented in TSpline3, and TSpline5.; Definition at line 66 of file TSpline.h. ◆ SetNpx(). void TSpline::SetNpx ; (; Int_t ; n). inline . Definition at line 67 of file TSpline.h. ◆ Streamer(). void TSpline::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline. ; Reimplemented from TNamed.; Reimplemented in TMVA::TSpline1, TMVA::TSpline2, TSpline3, and TSpline5.; Definition at line 231 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TSpline.h. Member Data Documentation. ◆ fDelta. Double_t TSpline::fDelta = -1. protected . Distance between equidistant knots. ; Definition at line 33 of file TSpline.h. ◆ fGraph. TGraph* TSpline::fGraph = nullptr. protected . Graph for drawing the knots. ; Definition at line 39 of file TSpline.h. ◆ fHistogram. TH1F* TSpline::fHistogram = nullptr. protected . Temporary histogram. ; Definition at line 38 of file TSpline.h. ◆ fKstep. Bool_t TSpline::fKstep = kFALSE. protected . True of equidistant knots. ; Definition at line 37 of file TSpline.h. ◆ fNp. Int_t TSpline::fNp = 0. protected . Number of knots. ; Definition at line 36 of file TSpline.h. ◆ fNpx. Int_t TSpline::fNpx = 100. protected . Number of points used for graphical representation. ; Definition at line 40 of file TSpline.h. ◆ fXmax. Double_t TSpline::fXmax = 0. protected . Maximum value of abscissa. ; Definition at line 35 of file TSpline.h. ◆ fXmin. Double_t TSpline::fXmin = 0. protected . Minimum value of abscissa. ; Definition at line 34 of file TSpline.h. Libraries for TSpline:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TSpline.h; hist/hist/src/TSpline.cxx. TSpline. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline.html:24687,Guid,Guide,24687,doc/master/classTSpline.html,https://root.cern,https://root.cern/doc/master/classTSpline.html,1,['Guid'],['Guide']
Usability,"d by a warning message isued by M when running into troubles. Problems can be:. a bug in M; an error in the \(\mbox{FCN}\); a highly difficult problem (usually strong correlations among parameters); floating–point precision. 4.5 The output from minimization; 4.5.1 The FunctionMinimum; The output of the minimizers is the FunctionMinimum. The FunctionMinimum contains the result of the minimization in both internal parameter representation and external parameter representation.; 4.5.2 User representable format: MnUserParameterState; On request, the result of the minimzation is transformed into a user representable format for parameters and errors, the MnUserParameterState.; 4.5.3 Access values, errors, covariance; The result can be accessed via methods like MnUserParameterState::value(unsigned int n) and MnUserParameterState::error(unsigned int n), where \(n\) is the index of the parameter in the list of parameters defined by the user.; 4.5.4 Printout of the result; The FunctionMinimum can be printed on the output simply via std::cout. It will print both the internal and external state, that is parameters, errors and the covariance matrix (if available). It also tells the user if M did converge or not by issueing an appropriate message. If a covariance matrix is available, the global correlation coefficients are printed as well.; 4.5.5 Global correlation coefficients; The global correlation coefficient for parameter \(n\) is a number between zero and one which gives the correlation between parameter \(n\) and that linear combination of all other parameters which is most strongly correlated with \(n\).; 5 M application programming interface (API); [api:api]; 5.1 FunctionMinimum; [api:fm] The FunctionMinimum is the output of the minimizers and contains the minimzation result. The state at the minimum is available both in internal and external representations. For the external representations the return methods. FunctionMinimum::userState(),; FunctionMinimum::userParamete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:41607,simpl,simply,41607,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['simpl'],['simply']
Usability,"d by the key is a folder. ;  ; virtual void ls (Bool_t current) const;  List Key contents. ;  ; void ls (Option_t *option="""") const override;  List Key contents. ;  ; void Print (Option_t *option="""") const override;  Print key contents. ;  ; void ReadKeyBuffer (char *&buffer);  Decode input buffer. ;  ; template<typename T > ; T * ReadObject ();  To read an object (non deriving from TObject) from the file. ;  ; void SetMotherDir (TDirectory *dir);  ; virtual void SetParent (const TObject *parent);  Set parent in key buffer. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the key header structure. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeySQL.html:6007,Clear,Clear,6007,doc/master/classTKeySQL.html,https://root.cern,https://root.cern/doc/master/classTKeySQL.html,2,['Clear'],['Clear']
Usability,d by the object destructor remove reference to obj from the current table if it is referenced ; Reimplemented from TObject.; Definition at line 412 of file TProcessID.cxx. ◆ SetObjectCount(). void TProcessID::SetObjectCount ; (; UInt_t ; number). static . static function to set the current referenced object count fgNumber is incremented every time a new object is referenced ; Definition at line 436 of file TProcessID.cxx. ◆ Streamer(). void TProcessID::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed.; Reimplemented in TProcessUUID. ◆ StreamerNVirtual(). void TProcessID::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file TProcessID.h. Member Data Documentation. ◆ fCount. std::atomic_int TProcessID::fCount. protected . Definition at line 81 of file TProcessID.h. ◆ fgNumber. std::atomic_uint TProcessID::fgNumber. staticprotected . Definition at line 89 of file TProcessID.h. ◆ fgObjPIDs. TExMap * TProcessID::fgObjPIDs = nullptr. staticprotected . Definition at line 87 of file TProcessID.h. ◆ fgPID. TProcessID * TProcessID::fgPID = nullptr. staticprotected . Spin lock for initialization of fObjects. ; Definition at line 85 of file TProcessID.h. ◆ fgPIDs. TObjArray * TProcessID::fgPIDs = nullptr. staticprotected . Definition at line 86 of file TProcessID.h. ◆ fLock. std::atomic_flag TProcessID::fLock. protected . Array pointing to the referenced objects. ; Definition at line 83 of file TProcessID.h. ◆ fObjects. ROOT::Internal::TAtomicPointer<TObjArray*> TProcessID::fObjects. protected . Reference count to this object (from TFile) ; Definition at line 82 of file TProcessID.h. Libraries for TProcessID:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TProcessID.h; core/base/src/TProcessID.cxx. TProcessID. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProcessID.html:22980,Guid,Guide,22980,doc/master/classTProcessID.html,https://root.cern,https://root.cern/doc/master/classTProcessID.html,1,['Guid'],['Guide']
Usability,"d class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::MayNotUsevoid MayNotUse(const char *method) constUse this method to signal that a method (defined in a base class) may not be called in a derived clas...Definition TObject.cxx:1046; TStringBasic string class.Definition TString.h:139; TUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDent...Definition TUUID.h:42; bool; int; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Internal::TDirectoryAtomicAdapterInternal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter s...Definition TDirectory.h:338; ROOT::Internal::TDirectoryAtomicAdapter::operator->TDirectory * operator->() constDefinition TDirectory.h:380; ROOT::Internal::TDirectoryAtomicAdapter::operator=TDirectory * operator=(TDirectory *newvalue)Definition TDirectory.h:372; ROOT::Internal::TDirectoryAtomicAdapter::TDirectoryAtomicAdapterTDirectoryAtomicAdapter()Definition TDirectory.h:343; ROOT::Internal::TDirectoryAtomicAdapter::operator!=bool operator!=(TDirectory *other) constDefinition TDirectory.h:368; ROOT::Internal::TDirectoryAtomicAdapter::operator==bool operator==(TDirectory *other) constDefinition TDirectory.h:364; ROOT::Internal::TDirectoryAtomicAdapter::operator!=bool operator!=(const TDirectory *other) constDefinition TDirectory.h:360; ROOT::Internal::TDirectoryAtomicAdapter::fValueTDirectory::SharedGDirectory_t & fValueDefinition TDirectory.h:341; ROOT::Internal::TDirectoryAtomicAdapter::operator==bool operator==(const TDirectory *other) constDefinition TDirectory.h:356; Drawth1 Draw(). corebaseincTDirectory.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8h_source.html:33335,Guid,Guide,33335,doc/master/TDirectory_8h_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8h_source.html,1,['Guid'],['Guide']
Usability,"d cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::HybridCalculator Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:42028,simpl,simple,42028,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['simpl'],['simple']
Usability,"d commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 25128 2008-08-12 17:59:19Z pcanal $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:23820,Undo,Undo,23820,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,1,['Undo'],['Undo']
Usability,"d commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQCommand.html:24075,Undo,Undo,24075,root/html530/TQCommand.html,https://root.cern,https://root.cern/root/html530/TQCommand.html,1,['Undo'],['Undo']
Usability,"d commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQCommand.html:24075,Undo,Undo,24075,root/html532/TQCommand.html,https://root.cern,https://root.cern/root/html532/TQCommand.html,1,['Undo'],['Undo']
Usability,"d controlled by the user or admin who can also force saving in all cases; parameter PROOF_SavePartialResults or RC env ProofPlayer.SavePartialResults . However, if 'force' is kTRUE, fSavePartialResults and fSaveResultsPerPacket are ignored. Return -1 in case of problems, 0 otherwise. ; Implements TVirtualProofPlayer.; Definition at line 780 of file TProofPlayer.cxx. ◆ SetCurrentQuery(). void TProofPlayer::SetCurrentQuery ; (; TQueryResult * ; q). overridevirtual . Set current query and save previous value. ; Implements TVirtualProofPlayer.; Definition at line 451 of file TProofPlayer.cxx. ◆ SetDispatchTimer(). void TProofPlayer::SetDispatchTimer ; (; Bool_t ; on = kTRUE). overridevirtual . Enable/disable the timer to dispatch pening events while processing. ; Implements TVirtualProofPlayer.; Definition at line 309 of file TProofPlayer.cxx. ◆ SetDrawFeedbackOption(). void TProofPlayer::SetDrawFeedbackOption ; (; TDrawFeedback * ; f, . Option_t * ; opt . ). overridevirtual . Set draw feedback option. ; Implements TVirtualProofPlayer.; Definition at line 741 of file TProofPlayer.cxx. ◆ SetExitStatus(). void TProofPlayer::SetExitStatus ; (; EExitStatus ; st). inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 204 of file TProofPlayer.h. ◆ SetInitTime(). void TProofPlayer::SetInitTime ; (; ). inlineoverridevirtual . Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 213 of file TProofPlayer.h. ◆ SetMaxDrawQueries(). void TProofPlayer::SetMaxDrawQueries ; (; Int_t ; max). inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 168 of file TProofPlayer.h. ◆ SetMerging(). void TProofPlayer::SetMerging ; (; Bool_t ; = kTRUE). inlineoverridevirtual . Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 215 of file TProofPlayer.h. ◆ SetOutputFilePath(). void TProofPlayer::SetOutputFilePath ; (; const char * ; fp). inlineoverridevirtual . Implements TVirtualP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:40382,feedback,feedback,40382,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"d drawing optimizations. . The top left cell in a table has coordinates (0,0) . A TObjArray is used internally to ensure little overhead and fast ; acces to cells. . If the data source has more rows than the default 50 rows of cells in; memory, buttons at the bottom of the table can be used to load the; next or previous chunk of data. At the top of the table, a frame is visible that shows the coordinates; of the top left cell currently in memmory in row,column. The amount of; rows and columns is also shown in rows x columns. These values can be; edited to move to a different area of the data source or to resize the; table. Tab will switch between the enties, return will move to the; currently entered range and resize the table if needed. Clicking the; goto button has the same effect. A TGTable is created by first creating an appropriate ; TVirtualTableInterface from the data that needs visualization and ; then creating the TGTable using this interface. . A simple macro to use a TGTable with a TGSimpleTableInterface:. Picture; Source. {; // Create an array to hold a bunch of numbers; Int_t i = 0, j = 0;; UInt_t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create an interface; TGSimpleTableInterface *iface = new TGSimpleTableInterface(data, 6, 5); . // Create the table; TGTable *table = new TGTable(mainframe, 999, iface); . // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. //Update data; data[5][1] = 3.01; ; //update the table view; table->Update(); . // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainfr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTable.html:1497,simpl,simple,1497,root/html528/TGTable.html,https://root.cern,https://root.cern/root/html528/TGTable.html,6,['simpl'],['simple']
Usability,"d for suppression of signals ;  . #include <TTVLVContainer.h>. Inheritance diagram for TTVLVContainer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TTVLVContainer(). TTVLVContainer::TTVLVContainer ; (; const TGWindow * ; p, . UInt_t ; w, . UInt_t ; h, . UInt_t ; options = kSunkenFrame . ). TGLVContainer constructor. ; Definition at line 312 of file TTVLVContainer.cxx. ◆ ~TTVLVContainer(). TTVLVContainer::~TTVLVContainer ; (; ). override . TGLVContainer destructor. ; Definition at line 326 of file TTVLVContainer.cxx. Member Function Documentation. ◆ AddThisItem(). virtual void TTVLVContainer::AddThisItem ; (; TTVLVEntry * ; item). inlinevirtual . Definition at line 124 of file TTVLVContainer.h. ◆ Cut(). const char * TTVLVContainer::Cut ; (; ). Return the cut entry. ; Definition at line 334 of file TTVLVContainer.cxx. ◆ EmptyAll(). void TTVLVContainer::EmptyAll ; (; ). Clear all names and aliases for expression type items. ; Definition at line 588 of file TTVLVContainer.cxx. ◆ Ex(). const char * TTVLVContainer::Ex ; (; ). Return the expression on X. ; Definition at line 380 of file TTVLVContainer.cxx. ◆ ExpressionItem(). TTVLVEntry * TTVLVContainer::ExpressionItem ; (; Int_t ; index). Return the expression item at specific position. ; Definition at line 348 of file TTVLVContainer.cxx. ◆ ExpressionList(). TList * TTVLVContainer::ExpressionList ; (; ). Return the list of user-defined expressions. ; Definition at line 361 of file TTVLVContainer.cxx. ◆ Ey(). const char * TTVLVContainer::Ey ; (; ). Return the expression on Y. ; Definition at line 394 of file TTVLVContainer.cxx. ◆ Ez(). const char * TTVLVContainer::Ez ; (; ). Return the expression on Z. ; Definition at line 408 of file TTVLVContainer.cxx. ◆ GetViewer(). TTreeViewer * TTVLVContainer::GetViewer ; (; ). inline . Definition at line 133 of file TTVLVContainer.h. ◆ HandleButton(). bool TTVLVContainer::HandleButton ; (; Ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVContainer.html:41828,Clear,Clear,41828,doc/master/classTTVLVContainer.html,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html,1,['Clear'],['Clear']
Usability,"d from TCollection; TString fName;  ; Int_t fSize;  . #include <RooAbsArg.h>. Inheritance diagram for RooRefArray:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRefArray() [1/2]. RooRefArray::RooRefArray ; (; ). default . ◆ RooRefArray() [2/2]. RooRefArray::RooRefArray ; (; const RooRefArray & ; other). inline . Definition at line 67 of file RooAbsArg.h. Member Function Documentation. ◆ Class(). static TClass * RooRefArray::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooRefArray::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooRefArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 70 of file RooAbsArg.h. ◆ DeclFileName(). static const char * RooRefArray::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 70 of file RooAbsArg.h. ◆ IsA(). TClass * RooRefArray::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 70 of file RooAbsArg.h. ◆ operator=(). RooRefArray & RooRefArray::operator= ; (; const RooRefArray & ; other). default . ◆ Streamer(). void RooRefArray::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class RooRefArray. ; Reimplemented from TObject.; Definition at line 2471 of file RooAbsArg.cxx. ◆ StreamerNVirtual(). void RooRefArray::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file RooAbsArg.h. Libraries for RooRefArray:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsArg.h; roofit/roofitcore/src/RooAbsArg.cxx. RooRefArray. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRefArray.html:21161,Guid,Guide,21161,doc/master/classRooRefArray.html,https://root.cern,https://root.cern/doc/master/classRooRefArray.html,1,['Guid'],['Guide']
Usability,"d from TGeoPatternFinder.; Definition at line 232 of file TGeoPatternFinder.h. ◆ IsOnBoundary(). Bool_t TGeoPatternParaX::IsOnBoundary ; (; const Double_t * ; point); const. overridevirtual . Checks if the current point is on division boundary. ; Reimplemented from TGeoPatternFinder.; Definition at line 888 of file TGeoPatternFinder.cxx. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternParaX::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 939 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternParaX & TGeoPatternParaX::operator= ; (; const TGeoPatternParaX & ; pf). assignment operator ; Definition at line 862 of file TGeoPatternFinder.cxx. ◆ SavePrimitive(). void TGeoPatternParaX::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 951 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternParaX::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPatternFinder. ◆ StreamerNVirtual(). void TGeoPatternParaX::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternParaX::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 978 of file TGeoPatternFinder.cxx. Libraries for TGeoPatternParaX:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternParaX. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternParaX.html:18258,Guid,Guide,18258,doc/master/classTGeoPatternParaX.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaX.html,1,['Guid'],['Guide']
Usability,"d from TInterpreter.; Definition at line 8352 of file TCling.cxx. ◆ ClassInfo_Property(). Long_t TCling::ClassInfo_Property ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8392 of file TCling.cxx. ◆ ClassInfo_Size(). int TCling::ClassInfo_Size ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8400 of file TCling.cxx. ◆ ClassInfo_Tagnum(). Longptr_t TCling::ClassInfo_Tagnum ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8408 of file TCling.cxx. ◆ ClassInfo_Title(). const char * TCling::ClassInfo_Title ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8442 of file TCling.cxx. ◆ ClassInfo_TmpltName(). const char * TCling::ClassInfo_TmpltName ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8450 of file TCling.cxx. ◆ ClearFileBusy(). void TCling::ClearFileBusy ; (; ). finalvirtual . Reset the interpreter internal state in case a previous action was not correctly terminated. ; Implements TInterpreter.; Definition at line 3077 of file TCling.cxx. ◆ ClearStack(). void TCling::ClearStack ; (; ). finalvirtual . Delete existing temporary values. ; Implements TInterpreter.; Definition at line 3085 of file TCling.cxx. ◆ CodeComplete(). void TCling::CodeComplete ; (; const std::string & ; line, . size_t & ; cursor, . std::vector< std::string > & ; completions . ). finalvirtual . The call to Cling's tab complition. ; Reimplemented from TInterpreter.; Definition at line 7670 of file TCling.cxx. ◆ CreateEnum(). TEnum * TCling::CreateEnum ; (; void * ; VD, . TClass * ; cl . ); const. finalvirtual . Implements TInterpreter.; Definition at line 469 of file TCling.cxx. ◆ CreateListOfBaseClasses(). void TCling::CreateListOfBaseClasses ; (; TClass * ; cl); const. finalvirtual . Create list of pointers to base class(es) for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:75827,Clear,ClearFileBusy,75827,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Clear'],['ClearFileBusy']
Usability,"d from TObject.; Definition at line 159 of file TObject.cxx. ◆ Print() [2/2]. virtual void TMVA::OptionBase::Print ; (; std::ostream & ; , . Int_t ; levelofdetail = 0 . ); const. pure virtual . Implemented in TMVA::Option< T >, TMVA::Option< T * >, and TMVA::Option< T >. ◆ SetValue(). Bool_t TMVA::OptionBase::SetValue ; (; const TString & ; vs, . Int_t ; i = -1 . ). virtual . set value for option ; Reimplemented in TMVA::Option< T * >.; Definition at line 59 of file Option.cxx. ◆ SetValueLocal(). virtual void TMVA::OptionBase::SetValueLocal ; (; const TString & ; vs, . Int_t ; i = -1 . ). privatepure virtual . Implemented in TMVA::Option< T >, TMVA::Option< T >, and TMVA::Option< T >. ◆ Streamer(). virtual void TMVA::OptionBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::OptionBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file Option.h. ◆ TheName(). virtual const char * TMVA::OptionBase::TheName ; (; ); const. inlinevirtual . Definition at line 62 of file Option.h. Friends And Related Symbol Documentation. ◆ Configurable. friend class Configurable. friend . Definition at line 56 of file Option.h. Member Data Documentation. ◆ fDescription. const TString TMVA::OptionBase::fDescription. private . Definition at line 82 of file Option.h. ◆ fIsSet. Bool_t TMVA::OptionBase::fIsSet. private . Definition at line 83 of file Option.h. ◆ fName. const TString TMVA::OptionBase::fName. private . Definition at line 80 of file Option.h. ◆ fNameAllLower. TString TMVA::OptionBase::fNameAllLower. private . Definition at line 81 of file Option.h. Libraries for TMVA::OptionBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Option.h; tmva/tmva/src/Option.cxx. TMVAOptionBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptionBase.html:15603,Guid,Guide,15603,doc/master/classTMVA_1_1OptionBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptionBase.html,1,['Guid'],['Guide']
Usability,"d from the abstract; Monte Carlo application class, and provide functions like; ConstructGeometry(), BeginEvent(), FinishEvent(), ... .; The concrete Monte Carlo (Geant3, Geant4) is selected at run time -; when processing a ROOT macro where the concrete Monte Carlo is instantiated. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualMC(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuildPhysics(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCurrentBoundaryNormal(Double_t& x, Double_t& y, Double_t& z) const; virtual Int_tCurrentEvent() const; virtual Int_tCurrentMaterial(Float_t& a, Float_t& z, Float_t& dens, Float_t& radl, Float_t& absl) const; virtual Int_tCurrentMedium() const; virtual Int_tCurrentVolID(Int_t& copyNo) const; virtual const char*CurrentVolName() const; virtual Int_tCurrentVolOffID(Int_t off, Int_t& copyNo) const; virtual const char*CurrentVolOffName(Int_t off) const; virtual const char*CurrentVolPath(); virtual Bool_tDefineIon(const char* name, Int_t Z, Int_t A, Int_t Q, Double_t excEnergy, Double_t mass = 0.); virtual voidDefineOpSurface(const char* name, EMCOpSurfaceModel model, EMCOpSurfaceType surfaceType, EMCOpSurfaceFinish surfaceFinish, Double_t sigmaAlpha); virtual Bool_tDefineParticle(Int_t pdg, const char* name, TMCParticleType mcType, Double_t mass, Double_t charge, Double_t lifetime); virtual Bool_tDefineParticle(Int_t pdg, const char* name, TMCParticleType mcType, Double_t mass, Double_t charge, Double_t lifetime, const TString& pType, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualMC.html:1275,Clear,Clear,1275,root/html530/TVirtualMC.html,https://root.cern,https://root.cern/root/html530/TVirtualMC.html,5,['Clear'],['Clear']
Usability,"d give access to the content of TTree object.; This is intended to be used as part of a generate Selector class; which will hold the directory and its associate. Function Members (Methods); public:. ~TBranchProxyDirector(); voidAttach(ROOT::TBranchProxy* p); voidAttach(ROOT::TFriendProxy* f); TH1F*CreateHistogram(const char* options); Long64_tGetReadEntry() const; TTree*GetTree() const; voidSetReadEntry(Long64_t entry); TTree*SetTree(TTree* newtree); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Long64_t i); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Int_t i). private:. ROOT::TBranchProxyDirector&operator=(const ROOT::TBranchProxyDirector&); ROOT::TBranchProxyDirectorTBranchProxyDirector(const ROOT::TBranchProxyDirector&). Data Members; private:. list<ROOT::TBranchProxy*>fDirected; Long64_tfEntryEntry currently being read.; list<ROOT::TFriendProxy*>fFriends; TTree*fTreeTTree we are currently looking at. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchProxyDirector(TTree* tree, Long64_t i); Simple constructor. TBranchProxyDirector(TTree* tree, Int_t i); cint has a problem casting int to long long; Simple constructor. void Attach(TBranchProxy* p). void Attach(TFriendProxy* p). TH1F* CreateHistogram(const char* options); Create a temporary 1D histogram. void SetReadEntry(Long64_t entry). TTree* SetTree(TTree* newtree). TBranchProxyDirector(const ROOT::TBranchProxyDirector& ); {;}. TBranchProxyDirector& operator=(const ROOT::TBranchProxyDirector& ); {return *this;}. Long64_t GetReadEntry() const; { return fEntry; }. TTree* GetTree() const; void Print();. { return fTree; }. » Author: Philippe Canal 13/05/2003 » Copyright (C) 1995-2004, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 13:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__TBranchProxyDirector.html:1527,Simpl,Simple,1527,root/html602/ROOT__TBranchProxyDirector.html,https://root.cern,https://root.cern/root/html602/ROOT__TBranchProxyDirector.html,2,['Simpl'],['Simple']
Usability,"d give access to the content of TTree object.; This is intended to be used as part of a generate Selector class; which will hold the directory and its associate. Function Members (Methods); public:. ~TBranchProxyDirector(); voidAttach(ROOT::TBranchProxy* p); voidAttach(ROOT::TFriendProxy* f); TH1F*CreateHistogram(const char* options); Long64_tGetReadEntry() const; TTree*GetTree() const; voidSetReadEntry(Long64_t entry); TTree*SetTree(TTree* newtree); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Long64_t i); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Int_t i). private:. ROOT::TBranchProxyDirector&operator=(const ROOT::TBranchProxyDirector&); ROOT::TBranchProxyDirectorTBranchProxyDirector(const ROOT::TBranchProxyDirector&). Data Members; private:. list<ROOT::TBranchProxy*>fDirected; Long64_tfEntryEntry currently being read.; list<ROOT::TFriendProxy*>fFriends; TTree*fTreeTTree we are currently looking at. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchProxyDirector(TTree* tree, Long64_t i); Simple constructor. TBranchProxyDirector(TTree* tree, Int_t i); cint has a problem casting int to long long; Simple constructor. void Attach(TBranchProxy* p). void Attach(TFriendProxy* p). TH1F* CreateHistogram(const char* options); Create a temporary 1D histogram. void SetReadEntry(Long64_t entry). TTree* SetTree(TTree* newtree). TBranchProxyDirector(const ROOT::TBranchProxyDirector& ); {;}. TBranchProxyDirector& operator=(const ROOT::TBranchProxyDirector& ); {return *this;}. Long64_t GetReadEntry() const; { return fEntry; }. TTree* GetTree() const; void Print();. { return fTree; }. » Author: Philippe Canal 13/05/2003 » Copyright (C) 1995-2004, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__TBranchProxyDirector.html:1527,Simpl,Simple,1527,root/html604/ROOT__TBranchProxyDirector.html,https://root.cern,https://root.cern/root/html604/ROOT__TBranchProxyDirector.html,2,['Simpl'],['Simple']
Usability,"d in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSocket.html:23869,simpl,simple,23869,root/html530/TSocket.html,https://root.cern,https://root.cern/root/html530/TSocket.html,5,['simpl'],['simple']
Usability,"d in grayscale, and re-paint it if necessary.Definition TCanvas.cxx:2576; TCanvas::SetTitlevoid SetTitle(const char *title="""") overrideSet canvas title.Definition TCanvas.cxx:2155; TCanvas::fChUInt_t fChHeight of the canvas along Y (pixels)Definition TCanvas.h:44; TCanvas::GetDISPLAYconst char * GetDISPLAY() constDefinition TCanvas.h:132; TCanvas::fContextMenuTContextMenu * fContextMenu! Context menu pointerDefinition TCanvas.h:58; TCanvas::GetCanvasIDInt_t GetCanvasID() const overrideDefinition TCanvas.h:157; TCanvas::fCattTAttCanvas fCattCanvas attributes.Definition TCanvas.h:31; TCanvas::SetNamevoid SetName(const char *name="""") overrideSet canvas name.Definition TCanvas.cxx:2047; TCanvas::GetWindowWidthUInt_t GetWindowWidth() constDefinition TCanvas.h:161; TCanvas::fRetainedBool_t fRetainedRetain structure flag.Definition TCanvas.h:61; TCanvas::DisconnectWidgetvoid DisconnectWidget()Used by friend class TCanvasImp.Definition TCanvas.cxx:2558; TCanvas::FeedbackModevoid FeedbackMode(Bool_t set)Turn rubberband feedback mode on or off.Definition TCanvas.cxx:1128; TCanvas::GetYsizeUserSize_t GetYsizeUser() constDefinition TCanvas.h:154; TCanvas::GetSelectedYInt_t GetSelectedY() constDefinition TCanvas.h:144; TCanvas::lsvoid ls(Option_t *option="""") const overrideList all pads.Definition TCanvas.cxx:1504; TCanvas::RaiseWindowvoid RaiseWindow()Raise canvas window.Definition TCanvas.cxx:1744; TCanvas::Buildvoid Build()Build a canvas. Called by all constructors.Definition TCanvas.cxx:587; TCanvas::SaveAllstatic Bool_t SaveAll(const std::vector< TPad * > &={}, const char *filename="""", Option_t *option="""")Save provided pads/canvases into the image file(s) Filename can include printf argument for image num...Definition TCanvas.cxx:2654; TCanvas::GetSelectedXInt_t GetSelectedX() constDefinition TCanvas.h:143; TCanvas::fWindowTopYInt_t fWindowTopYTop Y position of window (in pixels)Definition TCanvas.h:40; TCanvas::Paintvoid Paint(Option_t *option="""") overridePaint canvas.Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:25421,Feedback,FeedbackModevoid,25421,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,3,"['Feedback', 'feedback']","['FeedbackMode', 'FeedbackModevoid', 'feedback']"
Usability,"d int ipoint, double &value, double &invError) constROOT::Fit::BinDatainline; GetPointError(unsigned int ipoint, double &errvalue) constROOT::Fit::BinDatainline; GetPointError(unsigned int ipoint, double &errlow, double &errhigh) constROOT::Fit::BinDatainline; HasBinEdges() constROOT::Fit::BinDatainline; HaveAsymErrors() constROOT::Fit::BinDatainline; HaveCoordErrors() constROOT::Fit::BinDatainline; InitBinEdge()ROOT::Fit::BinDataprotected; InitCoordsVector()ROOT::Fit::FitDatainlineprotected; InitDataVector()ROOT::Fit::BinDataprotected; InitFromRange(Iterator dataItr)ROOT::Fit::FitDatainlineprotected; Initialize(unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError)ROOT::Fit::BinDatainline; InitializeErrors()ROOT::Fit::BinDataprotected; InvError(unsigned int ipoint) constROOT::Fit::BinDatainline; IsWeighted() constROOT::Fit::BinDatainline; kAsymError enum valueROOT::Fit::BinData; kCoordError enum valueROOT::Fit::BinData; kNoError enum valueROOT::Fit::BinData; kValueError enum valueROOT::Fit::BinData; LogTransform()ROOT::Fit::BinData; NDim() constROOT::Fit::FitDatainline; NPoints() constROOT::Fit::FitDatainline; operator=(const BinData &rhs)ROOT::Fit::BinData; ROOT::Fit::FitData::operator=(const FitData &rhs)ROOT::Fit::FitData; Opt() constROOT::Fit::FitDatainline; Opt()ROOT::Fit::FitDatainline; Range() constROOT::Fit::FitDatainline; RefVolume() constROOT::Fit::BinDatainline; SetRefVolume(double value)ROOT::Fit::BinDatainline; Size() constROOT::Fit::FitDatainline; SumOfContent() constROOT::Fit::BinDatainline; SumOfError2() constROOT::Fit::BinDatainline; UnWrap()ROOT::Fit::BinDataprotected; Value(unsigned int ipoint) constROOT::Fit::BinDatainline; ValuePtr(unsigned int ipoint) constROOT::Fit::BinDatainline; VectorPadding(const unsigned)ROOT::Fit::FitDatainlineprotectedstatic; ~BinData() overrideROOT::Fit::BinData; ~FitData()ROOT::Fit::FitDatavirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData-members.html:7311,Guid,Guide,7311,doc/master/classROOT_1_1Fit_1_1BinData-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData-members.html,1,['Guid'],['Guide']
Usability,"d is not allowed to delete it directly anymore (otherwise a Fatal() is issued). Global field can be deleted by calling [1] with a different argument (which can be NULL). Otherwise the global field is deleted together with the field manager. ; Definition at line 16 of file TVirtualMagField.h. Public Member Functions;  TVirtualMagField ();  ;  TVirtualMagField (const char *name);  ;  ~TVirtualMagField () override;  Destructor. Unregisters the field. ;  ; virtual void Field (const Double_t *x, Double_t *B)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMagField.html:1744,Clear,Clear,1744,doc/master/classTVirtualMagField.html,https://root.cern,https://root.cern/doc/master/classTVirtualMagField.html,1,['Clear'],['Clear']
Usability,"d list.Definition TList.h:38; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::GetSelectedRowsvirtual Long64_t GetSelectedRows()Definition TTree.h:553; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetV3virtual Double_t * GetV3()Definition TTree.h:580; TTree::GetV1virtual Double_t * GetV1()Definition TTree.h:576; TTree::GetV2virtual Double_t * GetV2()Definition TTree.h:578; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; DateMarch 2018 ; AuthorJan Musinsky ; Definition in file hlHisto3.C. tutorialshisthlHisto3.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlHisto3_8C.html:8850,Guid,Guide,8850,doc/master/hlHisto3_8C.html,https://root.cern,https://root.cern/doc/master/hlHisto3_8C.html,1,['Guid'],['Guide']
Usability,"d number of color levels (256). Color in; every level is calculated by adding the increments of the r, g, b; components to the previous level. Using this function one can change the; color increments between two neighboring color levels. The function does; not apply dor the Simple Display Modes Group. The default values are:; (1,1,1). * * *. ca(color_algorithm) allows to choose the Color Algorithm.; To define the colors one can employ one of the following color algorithms; (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches; the limit value one can choose either smooth transition (by decreasing; the limit value) or a sharp modulo transition (continuing with 0 value).; This makes possible to realize various visual effects. One can choose from; the following set of the algorithms:. 0 = RGB Smooth; 1 = RGB Modulo; 2 = CMY Smooth; 3 = CMY Modulo; 4 = CIE Smooth; 5 = CIE Modulo; 6 = YIQ Smooth; 7 = YIQ Modulo; 8 = HVS Smooth; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default; value is 0. Example:. h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");. choose CMY Modulo to paint the ""h2"" histogram. * * *. lp(x,y,z) set the light position.; In Light and LightHeight display modes groups the color palette is; calculated according to the fictive light source position in 3-d space.; Using this function one can change the position of the source and thus; to achieve various graphical effects. This function does not apply for; Simple and Height display modes groups. Default is:; lp(1000,1000,100). * * *. s(shading,shadow) allows to set the shading.; The picture's surface is composed of triangles. If desired the edges of; the neighboring triangles can be smoothed (shaded). If desired the; display of the shadow can be painted as well. The function does not apply; for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:41133,Simpl,Simple,41133,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"d of being spread across the file. However it might; decrease the performance when reading more branches (or the full; entry). When using SortBasketsByEntry the baskets with the lowest; starting entry are written first. (i.e. the baskets are; sorted on the index/number of the first entry they contain).; This means that on the file the baskets will be in the order; in which they will be needed when reading the whole tree; sequentially. For examples of CloneTree, see tutorials:. -- copytree. A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in $ROOTSYS/test/Event; with: Event 1000 1 1 1. -- copytree2. A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in $ROOTSYS/test/Event; with: Event 1000 1 1 1. void CopyAddresses(TTree* , Bool_t undo = kFALSE); Set branch addresses of passed tree equal to ours.; If undo is true, reset the branch address instead of copying them.; This insures 'separation' of a cloned tree from its original. Long64_t CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); Copy nentries from given tree to this tree.; This routines assumes that the branches that intended to be copied are; already connected. The typical case is that this tree was created using; tree->CloneTree(0). By default copy all entries. Returns number of bytes copied to this tree. If 'option' contains the word 'fast' and nentries is -1, the cloning will be; done without unzipping or unstreaming the baskets (i.e., a direct copy of the; raw bytes on disk). When 'fast' is specified, 'option' can also contains a sorting order for the; baskets in the output file. There are currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. See TTree::CloneTree for a detailed explanation of the semantics of these 3 options. If the tree or any of the underlying tree of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:58225,undo,undo,58225,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,3,['undo'],['undo']
Usability,"d of inheritence, etc. But also, notice that you have to run an Init function. Why? That is specifically what the constructor is for. Why does everything in ROOT know how to draw itself? Why does everything in ROOT have 100 methods, for ""quick access"" to other objects that do the actual work of those methods? These are questions that should be asked. But most of all, if you aren't going to fix these problems, why bother migrating at all? You fail to treat this migration as what it actually is. You are migrating to a new language, not a new version of a language. ROOT isn't written in C++. It's written in CINT. I am just frustrated to see this happen, because I know this community can do better. Maybe I'll make a draft of some smaller changes that need to be made and submit them to the mailing list. But honestly, I'm not very hopeful about this migration. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Re: Why? . Hi Matt!; Thanks for your feedback; I'll tried to reply to each of your comments one by one. I do not disagree with all of your comments, but I might have explanations for some of them :-) Sometimes you seem to misinterpret ""backward compatibility"" (which means ""what used to work will continue to work"") with ""no change"" - but that might just have been your motivation to take the time for writing your feedback, so I don't complain :-) Given the relevance of your comments I decided to reply in a separate blog post.; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Thank you for the very nice . Thank you for the very nice explanation of CINT vs cling issue. I did not know that Reflex relies on CINT. The proposed upgrade to cling sounds very promising indeed. By the way, we will also need to consider backward compatibility as experiments will still need to read data already recorded in 2010/2011. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Re: Backward Compatib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:12463,feedback,feedback,12463,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['feedback'],['feedback']
Usability,"d on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2009-12-14 18:22 » Last generated: 2009-12-14 18:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/MATH_Index.html:4353,guid,guide,4353,root/html526/MATH_Index.html,https://root.cern,https://root.cern/root/html526/MATH_Index.html,3,['guid'],['guide']
Usability,"d pads.Definition TPad.cxx:3812; TPad::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TPad.h:261; TPad::fX1Double_t fX1X of lower X coordinate.Definition TPad.h:36; TPad::GetListOfPrimitivesTList * GetListOfPrimitives() const overrideDefinition TPad.h:245; TPad::SetPadvoid SetPad(const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=35, Short_t bordersize=5, Short_t bordermode=-1) overrideSet all pad parameters.Definition TPad.cxx:6171; TPad::UseCurrentStylevoid UseCurrentStyle() overrideForce a copy of current style for all objects in pad.Definition TPad.cxx:6927; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TPad::fY1Double_t fY1Y of lower Y coordinate.Definition TPad.h:37; TPad::fGLDeviceInt_t fGLDevice! OpenGL off-screen pixmap identifierDefinition TPad.h:85; TPad::Clearvoid Clear(Option_t *option="""") overrideDelete all pad primitives.Definition TPad.cxx:722; TPad::GetTickxInt_t GetTickx() const overrideDefinition TPad.h:238; TPad::fAspectRatioDouble_t fAspectRatioratio of w/h in case of fixed ratioDefinition TPad.h:82; TPad::SetLogyvoid SetLogy(Int_t value=1) overrideSet Lin/Log scale for Y.Definition TPad.cxx:6100; TPad::fCanvasTCanvas * fCanvas! Pointer to mother canvasDefinition TPad.h:106; TPad::fFixedAspectRatioBool_t fFixedAspectRatioTrue if fixed aspect ratio.Definition TPad.h:104; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMark pad modified Will be repainted when TCanvas::Update() will be called next time.Definition TPad.cxx:7369; TPad::lsvoid ls(Option_t *option="""") const overrideList all primitives in pad.Definition TPad.cxx:3090; TPad::Streamervoid Streamer(TBuffer &) overrideStream a class object.Definition TPad.cxx:6713; TPad::fTitleTString fTitlePad title.Definition TPad.h:110; TPad::CopyPixmapsvoid CopyPixmaps() overrideCopy the sub-pixmaps of the p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:124779,Clear,Clearvoid,124779,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"d retaining/discarding the physical placements as required. The viewer may decide to force the client to rebuild (republish) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TVirtualViewer3D::AddObjectvirtual Int_t AddObject(const TBuffer3D &buffer, Bool_t *addChildren=nullptr)=0; bool; unsigned int; If you use the first (simple) case a viewer using logical/physical pairs will generate IDs for each physical object internally. In the second you can specify a unique identifier from the client, which allows the viewer to be more efficient. It can now cache both logical and physical objects, and only discard physical objects no longer of interest as part of scene rebuilds. Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not interested in a certain object due to limits/size then it will also not be interest in any of the contained branch of descendents. Both AddObject() methods have an addChildren parameter. The viewer will complete this (if passed) indicating if children (contained within the one just sent) are worth adding. Recycling TBuffer3D; Once add AddObject() has been called, the contents are copied to the viewer internally. You are free to destroy this object, or recycle it for the next object if suitable. ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:10693,simpl,simple,10693,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['simpl'],['simple']
Usability,"d slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:2848,simpl,simpleTableTest,2848,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,1,['simpl'],['simpleTableTest']
Usability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMultiRootFinder.html:7576,Clear,ClearFunctions,7576,root/html602/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMultiRootFinder.html,2,"['Clear', 'clear']","['ClearFunctions', 'clear']"
Usability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLMultiRootFinder.html:7328,Clear,ClearFunctions,7328,root/html534/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLMultiRootFinder.html,2,"['Clear', 'clear']","['ClearFunctions', 'clear']"
Usability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7576,Clear,ClearFunctions,7576,root/html604/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html,2,"['Clear', 'clear']","['ClearFunctions', 'clear']"
Usability,"d user data.; Float_t*fVerts[3*fNVerts]; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTriangleSet(Int_t nv, Int_t nt, Bool_t norms = kFALSE, Bool_t cols = kFALSE); Constructor. ~TEveTriangleSet(); Destructor. void GenerateTriangleNormals(); Generate triangle normals via cross product of triangle edges. void GenerateRandomColors(); Assign random colors to all triangles. void GenerateZNormalColors(Float_t fac = 20, Int_t min = -20, Int_t max = 20, Bool_t interp = kFALSE, Bool_t wrap = kFALSE); Generate triangle colors by the z-component of the normal.; Current palette is taken from gStyle. void ComputeBBox(); Compute bounding box.; Virtual from TAttBBox. void Paint(Option_t* option = """"); Paint this object. Only direct rendering is supported. TEveTriangleSet* ReadTrivialFile(const char* file); Read a simple ascii input file describing vertices and triangles. TEveTriangleSet(const TEveTriangleSet& ). TEveTriangleSet& operator=(const TEveTriangleSet& ). Bool_t CanEditMainTransparency() const; { return kTRUE; }. Int_t GetNVerts() const; { return fNVerts; }. Int_t GetNTrings() const; { return fNTrings; }. Float_t* Vertex(Int_t i); { return &(fVerts[3*i]); }. Int_t* Triangle(Int_t i); { return &(fTrings[3*i]); }. Float_t* TriangleNormal(Int_t i); { return &(fTringNorms[3*i]); }. UChar_t* TriangleColor(Int_t i); { return &(fTringCols[3*i]); }. void SetVertex(Int_t i, Float_t x, Float_t y, Float_t z); { Float_t* v = Vertex(i); v[0] = x; v[1] = y; v[2] = z; }. void SetTriangle(Int_t i, Int_t v0, Int_t v1, Int_t v2); { Int_t* t = Triangle(i); t[0] = v0; t[1] = v1; t[2] = v2; }. void SetTriangleColor(Int_t i, UChar_t r, UChar_t g, UChar_t b, UChar_t a = 255); { UChar_t* c = TriangleColor(i); c[0] = r; c[1] = g; c[2] = b; c[3] = a; }. void SetTransparency(Char_t tr); { SetMainTransparency(tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTriangleSet.html:21560,simpl,simple,21560,root/html528/TEveTriangleSet.html,https://root.cern,https://root.cern/root/html528/TEveTriangleSet.html,4,['simpl'],['simple']
Usability,"d value in case the RVecN is shorter than pos. ; Definition at line 1314 of file RVec.hxx. ◆ operator RVecN< U, M >(). template<typename T , unsigned int N> . template<typename U , unsigned M, typename = std::enable_if<std::is_convertible<T, U>::value>> . ROOT::VecOps::RVecN< T, N >::operator RVecN< U, M > ; (; ); const. inline . Definition at line 1280 of file RVec.hxx. ◆ operator=() [1/4]. template<typename T , unsigned int N> . RVecN & ROOT::VecOps::RVecN< T, N >::operator= ; (; const RVecN< T, N > & ; RHS). inline . Definition at line 1189 of file RVec.hxx. ◆ operator=() [2/4]. template<typename T , unsigned int N> . RVecN & ROOT::VecOps::RVecN< T, N >::operator= ; (; Detail::VecOps::RVecImpl< T > && ; RHS). inline . Definition at line 1222 of file RVec.hxx. ◆ operator=() [3/4]. template<typename T , unsigned int N> . RVecN & ROOT::VecOps::RVecN< T, N >::operator= ; (; RVecN< T, N > && ; RHS). inline . Definition at line 1209 of file RVec.hxx. ◆ operator=() [4/4]. template<typename T , unsigned int N> . RVecN & ROOT::VecOps::RVecN< T, N >::operator= ; (; std::initializer_list< T > ; IL). inline . Definition at line 1228 of file RVec.hxx. ◆ operator[]() [1/3]. template<typename T , unsigned int N> . template<typename V , unsigned M, typename = std::enable_if<std::is_convertible<V, bool>::value>> . RVecN ROOT::VecOps::RVecN< T, N >::operator[] ; (; const RVecN< V, M > & ; conds); const. inline . Definition at line 1252 of file RVec.hxx. ◆ operator[]() [2/3]. template<typename T , unsigned int N> . reference ROOT::VecOps::RVecN< T, N >::operator[] ; (; size_type ; idx). inline . Definition at line 1241 of file RVec.hxx. ◆ operator[]() [3/3]. template<typename T , unsigned int N> . const_reference ROOT::VecOps::RVecN< T, N >::operator[] ; (; size_type ; idx); const. inline . Definition at line 1246 of file RVec.hxx. math/vecops/inc/ROOT/RVec.hxx. ROOTVecOpsRVecN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVecN.html:15308,Guid,Guide,15308,doc/master/classROOT_1_1VecOps_1_1RVecN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVecN.html,1,['Guid'],['Guide']
Usability,"d varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  SqrtUpParameterTransformation;  Transformation from external to internal Parameter based on sqrt(1 + x**2) More...;  ; class  StackAllocator;  StackAllocator controls the memory allocation/deallocation of Minuit. More...;  ; class  StackAllocatorHolder;  ; class  S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11468,Simpl,SimplexBuilder,11468,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,4,"['Simpl', 'simpl']","['SimplexBuilder', 'simplex']"
Usability,"d we want the Z size to match the one of each container:; 275 ; 276~~~ {.cpp}; 277 TGeoVolume *container1 = gGeoManager->MakeBox(""C1"", imed, 10,10,30);; 278 TGeoVolume *container2 = gGeoManager->MakeBox(""C2"", imed, 10,10,20);; 279 TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"", jmed, 3,3,-1);; 280 container1->AddNode(pvol, 1);; 281 container2->AddNode(pvol, 1);; 282~~~; 283 ; 284 Note that the third parameter of PVOL is negative, which does not make sense; 285as half-length on Z. This is interpreted as: when positioned, create a box; 286replacing all invalid parameters with the corresponding dimensions of the; 287container. This is also internally handled by the TGeoVolumeMulti class, which; 288does not need to be instantiated by users.; 289 ; 290### Dividing volumes; 291 ; 292 Volumes can be divided according a pattern. The most simple division can; 293be done along one axis, that can be: X, Y, Z, Phi, Rxy or Rxyz. Let's take; 294the most simple case: we would like to divide a box in N equal slices along X; 295coordinate, representing a new volume family. Supposing we already have created; 296the initial box, this can be done like:; 297 ; 298~~~ {.cpp}; 299 TGeoVolume *slicex = box->Divide(""SLICEX"", 1, N);; 300~~~; 301 ; 302where SLICE is the name of the new family representing all slices and 1 is the; 303slicing axis. The meaning of the axis index is the following: for all volumes; 304having shapes like box, trd1, trd2, trap, gtra or para - 1,2,3 means X,Y,Z; for; 305tube, tubs, cone, cons - 1 means Rxy, 2 means phi and 3 means Z; for pcon and; 306pgon - 2 means phi and 3 means Z; for spheres 1 means R and 2 means phi.; 307 In fact, the division operation has the same effect as positioning volumes; 308in a given order inside the divided container - the advantage being that the; 309navigation in such a structure is much faster. When a volume is divided, a; 310volume family corresponding to the slices is created. In case all slices can; 311be represented by a single ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:14823,simpl,simple,14823,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['simpl'],['simple']
Usability,"d window. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Put data into Clipboard. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Change window attributes. ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the bakcground color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  close display (terminate server/gMainThread thread) ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Get Clipboard data. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos in the current window. ;  ; Pixmap_t CreateB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:2472,Clear,ClearWindow,2472,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,2,['Clear'],"['Clear', 'ClearWindow']"
Usability,"d with entries. The caller has to make sure that the data that gets filled into an ntuple is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown. ; Definition at line 60 of file RNTupleWriter.hxx. Public Member Functions;  RNTupleWriter (const RNTupleWriter &)=delete;  ;  ~RNTupleWriter ();  ; void CommitCluster (bool commitClusterGroup=false);  Ensure that the data from the so far seen Fill calls has been written to storage. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; std::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater ();  Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ;  ; void EnableMetrics ();  ; std::size_t Fill ();  The simplest user interface if the default entry that comes with the ntuple model is used. ;  ; std::size_t Fill (REntry &entry);  Multiple entries can have been instantiated from the ntuple model. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this ntuple, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage. ;  ; NTupleSize_t GetLastCommitted () const;  Return the entry number that was last committed in a cluster. ;  ; NTupleSize_t GetLastCommittedClusterGroup () const;  Return the entry number that was last committed in a cluster group. ;  ; NTupleSize_t GetLastFlushed () const;  Return the entry number that was last flushed in a cluster. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel () const;  ; NTupleSize_t GetNEntries () const;  Return the number of entries filled so far. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:1510,simpl,simplest,1510,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,1,['simpl'],['simplest']
Usability,"d() - itTarget ) < Int_t(cls+1) ) {; 1425 itTarget = testingEventVector->end();; 1426 testingEventVector->insert( itTarget, itEvent, itEventEnd ); // fill in the rest without mixing; 1427 break;; 1428 }else{; 1429 itTarget += cls+1;; 1430 testingEventVector->insert( itTarget, (*itEvent) ); // fill event; 1431 }; 1432 }; 1433 }; 1434 }else{; 1435 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1436 trainingEventVector->insert( trainingEventVector->end(), tmpEventVector[Types::kTraining].at(cls).begin(), tmpEventVector[Types::kTraining].at(cls).end() );; 1437 testingEventVector->insert ( testingEventVector->end(), tmpEventVector[Types::kTesting].at(cls).begin(), tmpEventVector[Types::kTesting].at(cls).end() );; 1438 }; 1439 }; 1440 // delete the tmpEventVector (but not the events therein); 1441 tmpEventVector[Types::kTraining].clear();; 1442 tmpEventVector[Types::kTesting].clear();; 1443 ; 1444 tmpEventVector[Types::kMaxTreeType].clear();; 1445 ; 1446 if (mixMode == ""RANDOM"") {; 1447 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""shuffling events""<<Endl;; 1448 ; 1449 std::shuffle(trainingEventVector->begin(), trainingEventVector->end(), rndm);; 1450 std::shuffle(testingEventVector->begin(), testingEventVector->end(), rndm);; 1451 }; 1452 ; 1453 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""trainingEventVector "" << trainingEventVector->size() << Endl;; 1454 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""testingEventVector "" << testingEventVector->size() << Endl;; 1455 ; 1456 // create dataset; 1457 DataSet* ds = new DataSet(dsi);; 1458 ; 1459 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal training tree"" << Endl;; 1460 ds->SetEventCollection(trainingEventVector, Types::kTraining );; 1461 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;; 1462 ds->SetEventCollection(testingEventVector, Types::kTesting );; 1463 ; 1464 ; 1465 if (ds->GetNTrainingEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:65676,clear,clear,65676,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['clear'],['clear']
Usability,"d() [2/2]. void RooLinkedList::Add ; (; TObject * ; arg, . Int_t ; refCount . ). protectedvirtual . Insert object into collection with given reference count value. ; Definition at line 405 of file RooLinkedList.cxx. ◆ At(). TObject * RooLinkedList::At ; (; int ; index); const. Return object stored in sequential position given by index. ; If index is out of range, a null pointer is returned. ; Definition at line 490 of file RooLinkedList.cxx. ◆ begin(). RooLinkedListIterImpl RooLinkedList::begin ; (; ); const. Definition at line 761 of file RooLinkedList.cxx. ◆ Class(). static TClass * RooLinkedList::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooLinkedList::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooLinkedList::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 149 of file RooLinkedList.h. ◆ Clear(). void RooLinkedList::Clear ; (; Option_t * ; o = nullptr). overridevirtual . Remove all elements from collection. ; Reimplemented from TObject.; Definition at line 552 of file RooLinkedList.cxx. ◆ Clone(). TObject * RooLinkedList::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 52 of file RooLinkedList.h. ◆ createElement(). RooLinkedListElem * RooLinkedList::createElement ; (; TObject * ; obj, . RooLinkedListElem * ; elem = nullptr . ). protected . cout << ""RooLinkedList::createElem("" << this << "") obj = "" << ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinkedList.html:16360,Clear,Clear,16360,doc/master/classRooLinkedList.html,https://root.cern,https://root.cern/doc/master/classRooLinkedList.html,1,['Clear'],['Clear']
Usability,"d(const RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tadd(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_tadd(const RooAbsArg& var, Bool_t valueServer, Bool_t shapeServer, Bool_t silent); virtual RooAbsArg*addClone(const RooAbsArg& var, Bool_t silent = kFALSE); virtual voidaddClone(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_taddOwned(RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_taddOwned(const RooAbsCollection& list, Bool_t silent = kFALSE); Bool_tRooAbsCollection::allInRange(const char* rangeSpec) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsCollection::assignFast(const RooAbsCollection& other, Bool_t setValDirty = kTRUE); RooAbsCollection&RooAbsCollection::assignValueOnly(const RooAbsCollection& other, Bool_t oneSafe = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooArgSet::cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*RooArgSet::clone(const char* newname) const; virtual TObject*RooAbsCollection::Clone(const char* newname = 0) const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tRooAbsCollection::contains(const RooAbsArg& var) const; Bool_tRooAbsCollection::containsInstance(const RooAbsArg& var) const; stringRooAbsCollection::contentsString() const; virtual voidTObject::Copy(TObject& object) const; virtual TObject*RooArgSet::create(const char* newname) const; TIterator*RooAbsCollection::createIterator(Bool_t dir = kIterForward) const; virtual Int_tRooAbsCollection::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::Dra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSetProxy.html:2173,Clear,Clear,2173,root/html532/RooSetProxy.html,https://root.cern,https://root.cern/root/html532/RooSetProxy.html,4,['Clear'],['Clear']
Usability,"d(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<std::string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); voidchangeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tcheckDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearShapeDirty() const; voidclearValueDirty() const; TIterator*clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidcopyList(TList& dest, const TList& source); static UInt_tcrc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:2289,Clear,Clear,2289,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,1,['Clear'],['Clear']
Usability,"d(const char* method) const; static voidAddClass(TClass* cl); voidAddImplFile(const char* filename, int line); voidAddInstance(Bool_t heap = kFALSE); static Bool_tAddRule(const char* rule); voidAdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidAdoptReferenceProxy(TVirtualRefProxy* proxy); voidAdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidAdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Int_tAutoBrowse(TObject* obj, TBrowser* browser); virtual voidBrowse(TBrowser* b); Int_tBrowse(void* obj, TBrowser* b) const; voidBuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidBuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidCalculateStreamerOffset() const; Bool_tCallShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Bool_tCanIgnoreTObjectStreamer(); Bool_tCanSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyCollectionProxy(const TVirtualCollectionProxy&); voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteArray(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClass.html:2266,Clear,Clear,2266,root/html534/TClass.html,https://root.cern,https://root.cern/root/html534/TClass.html,1,['Clear'],['Clear']
Usability,"d) as the active class but a different checksum.\n""; 3023 "" You should update the version to ClassDef(%s,%d).\n""; 3024 "" The objects on this file might not be readable because:\n""; 3025 "" The in-memory layout version %d for class '%s' has a base class (%s) with checksum %x but the on-file layout version %d recorded the checksum value %x for this base class (%s)."",; 3026 GetName(), file ? ""file "" : """", file ? file->GetName() : """", fClassVersion, GetName(), fClassVersion + 1,; 3027 GetClassVersion(), GetName(), otherClass.Data(), otherBase->GetBaseCheckSum(),; 3028 GetClassVersion(), localBase->GetBaseCheckSum(), localClass.Data());; 3029 otherBase->SetErrorMessage(msg);; 3030 }; 3031 }; 3032 }; 3033 if (!result && !complete) {; 3034 return result;; 3035 }; 3036 // Next the datamembers; 3037 done = kFALSE;; 3038 next.Reset();; 3039 infonext.Reset();; 3040 ; 3041 TMemberInfo local(GetClass());; 3042 TMemberInfo other(cl ? cl : info->GetClass());; 3043 while(!done) {; 3044 local.Clear();; 3045 other.Clear();; 3046 el = (TStreamerElement*)next();; 3047 while (el && (el->IsBase() || el->IsA() == TStreamerArtificial::Class())) {; 3048 el = (TStreamerElement*)next();; 3049 }; 3050 if (el) {; 3051 local.SetName( el->GetName() );; 3052 local.SetClassName( el->GetTypeName() );; 3053 local.SetComment( el->GetTitle() );; 3054 local.SetDataType( el->GetType() );; 3055 }; 3056 if (cl) {; 3057 TDataMember *tdm = (TDataMember*)membernext();; 3058 while(tdm && ( (!tdm->IsPersistent()) || (tdm->Property()&kIsStatic) || (el && local.fName != tdm->GetName()) )) {; 3059 tdm = (TDataMember*)membernext();; 3060 }; 3061 if (tdm) {; 3062 other.SetName( tdm->GetName() );; 3063 other.SetClassName( tdm->GetTrueTypeName() );; 3064 other.SetComment( tdm->GetTitle() );; 3065 if (tdm->GetDataType()) {; 3066 // Need to update the type for arrays.; 3067 if (tdm->IsaPointer()) {; 3068 if (tdm->GetDataType()->GetType() == TVirtualStreamerInfo::kChar && !tdm->GetArrayDim() && tdm->GetArrayIndex()[0]==0) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:122630,Clear,Clear,122630,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Clear'],['Clear']
Usability,"d*)fSelected)->IsBeingResized();; 1324 ; 1325 if ((!resize && TestBit(kMoveOpaque)) || (resize && TestBit(kResizeOpaque))) {; 1326 gPad = fPadSave;; 1327 Update();; 1328 FeedbackMode(kTRUE);; 1329 }; 1330 }; 1331 ; 1332 RunAutoExec();; 1333 }; 1334 ; 1335 break;; 1336 ; 1337 case kButton1Up:; 1338 ; 1339 if (fSelected) {; 1340 gPad = fSelectedPad;; 1341 ; 1342 fSelected->ExecuteEvent(event, px, py);; 1343 ; 1344 RunAutoExec();; 1345 ; 1346 if (fPadSave); 1347 gPad = fPadSave;; 1348 else {; 1349 gPad = this;; 1350 fPadSave = this;; 1351 }; 1352 ; 1353 Update(); // before calling update make sure gPad is reset; 1354 }; 1355 break;; 1356 ; 1357//*-*----------------------------------------------------------------------; 1358 ; 1359 case kButton2Down:; 1360 // find pad in which input occurred; 1361 pad = Pick(px, py, prevSelObj);; 1362 if (!pad) return;; 1363 ; 1364 gPad = pad; // don't use cd() because we won't draw in pad; 1365 // we will only use its coordinate system; 1366 ; 1367 FeedbackMode(kTRUE);; 1368 ; 1369 if (fSelected) fSelected->Pop(); // pop object to foreground; 1370 pad->cd(); // and make its pad the current pad; 1371 if (gDebug); 1372 printf(""Current Pad: %s / %s\n"", pad->GetName(), pad->GetTitle());; 1373 ; 1374 // loop over all canvases to make sure that only one pad is highlighted; 1375 {; 1376 TIter next(gROOT->GetListOfCanvases());; 1377 TCanvas *tc;; 1378 while ((tc = (TCanvas *)next())); 1379 tc->Update();; 1380 }; 1381 ; 1382 //if (pad->GetGLDevice() != -1 && fSelected); 1383 // fSelected->ExecuteEvent(event, px, py);; 1384 ; 1385 break; // don't want fPadSave->cd() to be executed at the end; 1386 ; 1387 case kButton2Motion:; 1388 //was empty!; 1389 case kButton2Up:; 1390 if (fSelected) {; 1391 gPad = fSelectedPad;; 1392 ; 1393 fSelected->ExecuteEvent(event, px, py);; 1394 RunAutoExec();; 1395 }; 1396 break;; 1397 ; 1398 case kButton2Double:; 1399 break;; 1400 ; 1401//*-*----------------------------------------------------------------------; 1402",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:43183,Feedback,FeedbackMode,43183,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Feedback'],['FeedbackMode']
Usability,"d*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:18862,undo,undo,18862,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"d, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInitListBox(); voidTObject::MakeZombie(); voidSetContainer(TGFrame* f); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGListBox(const TGListBox&); TGListBoxoperator=(const TGListBox&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListBox.html:17269,Clear,ClearFlags,17269,root/html528/TGListBox.html,https://root.cern,https://root.cern/root/html528/TGListBox.html,4,['Clear'],['ClearFlags']
Usability,"d, MnMinos, MnContours).; 2 Introduction: M basic concepts; [sec:intro]; 2.1 The organization of M; The M package acts on a multiparameter objective function which is called — for historical reasons — the \(\mbox{FCN}\) function (see [howto:fcn]). This function is usually a chisquared or a log–likelihood, but it could also be a mathematical function. The \(\mbox{FCN}\) function needs to be written in for which M defines the pure abstract base class FCNBase as interface. The user must define and implement the \(\mbox{FCN}\) function in a derived class from FCNBase. Sometimes this is done by an intermediate program such as HippoDraw@bib-HippoDraw, in which case M is being used under the control of such an intermediate program1. The value of the \(\mbox{FCN}\) function will in general depend on one or more variable parameters whose meaning is defined by the user (or by the intermediate program), but whose trial values are determined by M .; To take a simple example, suppose the problem is to fit a polynomial through a set of data points. Then the user would write a \(\mbox{FCN}\) which calculates the \(\chi^2\) between a polynomial and the data; the variable parameters of \(\mbox{FCN}\) would be the coefficients of the polynomials. Using objects for minimization from M , the user would request M to minimize the \(\mbox{FCN}\) with respect to the parameters, that is, find those values of the coefficients which give the lowest value of chisquare.; The user must therefore supply, in addition to the function to be analyzed, via a set or sequence of M applications the instructions which analysis is wanted. The instructions are coded in in the calling program (main.cpp), which allows looping, conditional execution, and all the other possibilities of , but not interactivity, since it must be compiled before execution.; 2.2 Design aspects of M in; What M is:. platform independent; written in an object-oriented way using standard; independent of any external package. The mainta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:8123,simpl,simple,8123,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['simpl'],['simple']
Usability,"d. ; Definition at line 371 of file TPolyMarker.cxx. ◆ SetPolyMarker() [2/3]. void TPolyMarker::SetPolyMarker ; (; Int_t ; n, . Double_t * ; x, . Double_t * ; y, . Option_t * ; option = """" . ). virtual . If n <= 0 the current arrays of points are deleted. ; Definition at line 413 of file TPolyMarker.cxx. ◆ SetPolyMarker() [3/3]. void TPolyMarker::SetPolyMarker ; (; Int_t ; n, . Float_t * ; x, . Float_t * ; y, . Option_t * ; option = """" . ). virtual . If n <= 0 the current arrays of points are deleted. ; Definition at line 387 of file TPolyMarker.cxx. ◆ Size(). virtual Int_t TPolyMarker::Size ; (; ); const. inlinevirtual . Definition at line 76 of file TPolyMarker.h. ◆ Streamer(). void TPolyMarker::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Definition at line 439 of file TPolyMarker.cxx. ◆ StreamerNVirtual(). void TPolyMarker::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TPolyMarker.h. Member Data Documentation. ◆ fLastPoint. Int_t TPolyMarker::fLastPoint {-1}. protected . The index of the last filled point. ; Definition at line 34 of file TPolyMarker.h. ◆ fN. Int_t TPolyMarker::fN {0}. protected . Number of points internally reserved (not necessarily used) ; Definition at line 33 of file TPolyMarker.h. ◆ fOption. TString TPolyMarker::fOption. protected . Options. ; Definition at line 37 of file TPolyMarker.h. ◆ fX. Double_t* TPolyMarker::fX {nullptr}. protected . [fN] Array of X coordinates ; Definition at line 35 of file TPolyMarker.h. ◆ fY. Double_t* TPolyMarker::fY {nullptr}. protected . [fN] Array of Y coordinates ; Definition at line 36 of file TPolyMarker.h. Libraries for TPolyMarker:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TPolyMarker.h; hist/hist/src/TPolyMarker.cxx. TPolyMarker. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPolyMarker.html:22275,Guid,Guide,22275,doc/master/classTPolyMarker.html,https://root.cern,https://root.cern/doc/master/classTPolyMarker.html,1,['Guid'],['Guide']
Usability,"d. ; when the cutTube keyword is found, this function is called, and the dimensions required are taken and stored, these are then bound and converted to type TGeoCtub and stored in fsolmap map using the name as its key. ; Definition at line 3037 of file TGDMLParse.cxx. ◆ DeclFileName(). static const char * TGDMLParse::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file TGDMLParse.h. ◆ DefineConstants(). void TGDMLParse::DefineConstants ; (; ). private . Define constant expressions used. ; Definition at line 494 of file TGDMLParse.cxx. ◆ ElCone(). XMLNodePointer_t TGDMLParse::ElCone ; (; TXMLEngine * ; gdml, . XMLNodePointer_t ; node, . XMLAttrPointer_t ; attr . ). private . In the solids section of the GDML file, an elliptical cone may be declared. ; Unfortunately, the elliptical cone is not supported under ROOT so, when the elcone keyword is found, this function is called to convert it to a simple box with similar dimensions, and the dimensions required are taken and stored, these are then bound and converted to type TGeoBBox and stored in fsolmap map using the name as its key. ; Definition at line 2707 of file TGDMLParse.cxx. ◆ EleProcess(). XMLNodePointer_t TGDMLParse::EleProcess ; (; TXMLEngine * ; gdml, . XMLNodePointer_t ; node, . XMLNodePointer_t ; parentn, . Bool_t ; hasIsotopes, . Bool_t ; hasIsotopesExtended . ). private . When the element keyword is found, this function is called, and the name and values of the element are converted into type TGeoElement and stored in felemap map using the name as its key. ; Definition at line 1086 of file TGDMLParse.cxx. ◆ Ellipsoid(). XMLNodePointer_t TGDMLParse::Ellipsoid ; (; TXMLEngine * ; gdml, . XMLNodePointer_t ; node, . XMLAttrPointer_t ; attr . ). private . In the solids section of the GDML file, an ellipsoid may be declared. ; Unfortunately, the ellipsoid is not supported under ROOT so, when the ellipsoid keyword is found, this function is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLParse.html:30501,simpl,simple,30501,doc/master/classTGDMLParse.html,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html,1,['simpl'],['simple']
Usability,"d. <one line to give the library's name and a brief idea of what it does>; Copyright (C) <year> <name of author>. This library is free software; you can redistribute it and/or; modify it under the terms of the GNU Lesser General Public; License as published by the Free Software Foundation; either; version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public; License along with this library; if not, write to the Free Software; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. You should also get your employer (if you work as a programmer) or your; school, if any, to sign a ""copyright disclaimer"" for the library, if; necessary. Here is a sample; alter the names:. Yoyodyne, Inc., hereby disclaims all copyright interest in the; library `Frob' (a library for tweaking knobs) written by James Random Hacker. <signature of Ty Coon> 1 April 1990; Ty Coon, President of Vice. That's all there is to it!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/license.html:28688,Guid,Guides,28688,d/license.html,https://root.cern,https://root.cern/d/license.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,d. Directories;  ROOT;  . Files;  Bswapcpy.h;  ;  Buttons.h;  ;  Bytes.h;  ;  Byteswap.h;  ;  GLConstants.h;  ;  Gtypes.h;  ;  Htypes.h;  ;  KeySymbols.h;  ;  Match.h;  ;  MessageTypes.h;  ;  RConfig.h;  ;  Riostream.h;  ;  Rpair.h;  ;  RQ_OBJECT.h;  ;  RStipples.h;  ;  Rtypes.h;  ;  RtypesImp.h;  ;  Strlen.h;  ;  TApplication.h;  ;  TAtt3D.h;  ;  TAttAxis.h;  ;  TAttBBox.h;  ;  TAttBBox2D.h;  ;  TAttFill.h;  ;  TAttLine.h;  ;  TAttMarker.h;  ;  TAttPad.h;  ;  TAttText.h;  ;  TBase64.h;  ;  TBenchmark.h;  ;  TBuffer.h;  ;  TBuffer3D.h;  ;  TBuffer3DTypes.h;  ;  TColor.h;  ;  TColorGradient.h;  ;  TDatime.h;  ;  TDirectory.h;  ;  TEnv.h;  ;  TException.h;  ;  TExec.h;  ;  TFileCollection.h;  ;  TFileInfo.h;  ;  TFolder.h;  ;  TInetAddress.h;  ;  TMacro.h;  ;  TMathBase.h;  ;  TMD5.h;  ;  TMemberInspector.h;  ;  TMessageHandler.h;  ;  TNamed.h;  ;  TNotifyLink.h;  ;  TObject.h;  ;  TObjString.h;  ;  TParameter.h;  ;  TPluginManager.h;  ;  TPoint.h;  ;  TPRegexp.h;  ;  TProcessID.h;  ;  TProcessUUID.h;  ;  TQClass.h;  ;  TQCommand.h;  ;  TQConnection.h;  ;  TQObject.h;  ;  TRedirectOutputGuard.h;  ;  TRef.h;  ;  TRefCnt.h;  ;  TRegexp.h;  ;  TRemoteObject.h;  ;  TROOT.h;  ;  TRootIOCtor.h;  ;  TStopwatch.h;  ;  TStorage.h;  ;  TString.h;  ;  TStringLong.h;  ;  TStyle.h;  ;  TSysEvtHandler.h;  ;  TSystem.h;  ;  TSystemDirectory.h;  ;  TSystemFile.h;  ;  TTask.h;  ;  TThreadSlots.h;  ;  TTime.h;  ;  TTimer.h;  ;  TTimeStamp.h;  ;  TUri.h;  ;  TUrl.h;  ;  TUUID.h;  ;  TVersionCheck.h;  ;  TVirtualAuth.h;  ;  TVirtualFFT.h;  ;  TVirtualGL.h;  ;  TVirtualMapFile.h;  ;  TVirtualMonitoring.h;  ;  TVirtualMutex.h;  ;  TVirtualPad.h;  ;  TVirtualPadEditor.h;  ;  TVirtualPadPainter.h;  ;  TVirtualPerfStats.h;  ;  TVirtualPS.h;  ;  TVirtualQConnection.h;  ;  TVirtualRWMutex.h;  ;  TVirtualTableInterface.h;  ;  TVirtualViewer3D.h;  ;  TVirtualX.h;  ;  Varargs.h;  . corebaseinc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_581b2f84e81921659261a687f8475ad3.html:2188,Guid,Guide,2188,doc/master/dir_581b2f84e81921659261a687f8475ad3.html,https://root.cern,https://root.cern/doc/master/dir_581b2f84e81921659261a687f8475ad3.html,1,['Guid'],['Guide']
Usability,"d. In particular, a helix describes the trajectory of a charged particle in magnetic; field. In such case, the helix is right-handed for negative particle charge.; To define a helix, one must define:; - the curvature - positive defined; - the Z step made after one full turn of the helix; - the particle charge sign; - the initial particle position and direction (force normalization to unit); - the magnetic field direction. A helix provides:; - propagation to a given Z position (in global frame); Double_t *point = TGeoHelix::PropagateToZ(Double_t z);; - propagation to an arbitrary plane, returning also the new point; - propagation in a geometry until the next crossed surface; - computation of the total track length along a helix. Function Members (Methods); public:. virtual~TGeoHelix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeSafeStep(Double_t epsil = 9.9999999999999995E-7) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHelix.html:1649,Clear,Clear,1649,root/html602/TGeoHelix.html,https://root.cern,https://root.cern/root/html602/TGeoHelix.html,2,['Clear'],['Clear']
Usability,"d.; The object falls outside some ‘interest’ limits of the viewer camera.; The object is too small to be worth drawing. In all these cases TBuffer3D::AddObject() returns kNone, as it does for successful addition, indicating it does not require further information about this object. Hence you should not try to make any assumptions about what the viewer did with the object. The viewer may decide to force the client to rebuild (republish) the scene, obtaining a different collection of objects, if the internal viewer state changes .e.g. significant camera move. It does this presently by forcing a repaint on the attached TPad object - hence you should attach you master geometry object to the pad (via TObject::Draw()), and perform the publishing to the viewer in response to TObject::Paint().; 9.13.4.9 Physical IDs; TVirtualViewer3D provides for two methods of object addition:; virtual Int_t AddObject(const TBuffer3D &buffer,; Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID,; const TBuffer3D & buffer,; Bool_t *addChildren = 0); If you use the first (simple) case a viewer using logical/physical pairs will generate sequential IDs for each physical object internally. Scene rebuilds will require destruction and recreation of all physical objects. For the second you can specify an identifier from the client side, which must be unique and stable - i.e. the IDs of a published object is consistent, regardless of changes in termination of contained child geometry branches. In this case the viewer can safely cache the physical objects across scene rebuilds, discarding those no longer of interest.; 9.13.4.10 Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not interested in a certain object due to limits/size then it will also not be interest in any of the contained branch of siblings. Both TBuffer3D::AddObject() methods have an addChildren return parameter. The viewer will complete this (if passed) indicating if ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:416688,simpl,simple,416688,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"d.; [legend]; Constructor & Destructor Documentation. ◆ TStatsFeedback(). TStatsFeedback::TStatsFeedback ; (; TProof * ; proof = 0). Constructor. ; Definition at line 39 of file TStatsFeedback.cxx. ◆ ~TStatsFeedback(). TStatsFeedback::~TStatsFeedback ; (; ). override . Destructor. ; Definition at line 63 of file TStatsFeedback.cxx. Member Function Documentation. ◆ Class(). static TClass * TStatsFeedback::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStatsFeedback::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStatsFeedback::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 44 of file TStatsFeedback.h. ◆ DeclFileName(). static const char * TStatsFeedback::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 44 of file TStatsFeedback.h. ◆ Feedback(). void TStatsFeedback::Feedback ; (; TList * ; objs). Display feedback. ; Definition at line 74 of file TStatsFeedback.cxx. ◆ GetName(). const char * TStatsFeedback::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 41 of file TStatsFeedback.h. ◆ Hash(). ULong_t TStatsFeedback::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatsFeedback.html:15715,Feedback,Feedback,15715,doc/master/classTStatsFeedback.html,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html,1,['Feedback'],['Feedback']
Usability,"d.SetBorderSize(0);; legend.AddEntry(""h1"", ""Unscaled"", ""l"");; legend.AddEntry(""h2"", ""Scaled"", ""l"");; legend.Draw();; ; c->DrawClone();; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TMVA::Experimental::RStandardScalerDefinition RStandardScaler.hxx:16; TMVA::Experimental::RStandardScaler::Fitvoid Fit(const RTensor< T > &x)Definition RStandardScaler.hxx:52; TMVA::Experimental::RStandardScaler::Computestd::vector< T > Compute(const std::vector< T > &x)Definition RStandardScaler.hxx:83; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; TMVA::ExperimentalDefinition RModelParser_Keras.h:40; ; DateJuly 2019 ; AuthorStefan Wunsch ; Definition in file tmva004_RStandardScaler.C. tutorialstmvatmva004_RStandardScaler.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva004__RStandardScaler_8C.html:3103,Guid,Guide,3103,doc/master/tmva004__RStandardScaler_8C.html,https://root.cern,https://root.cern/doc/master/tmva004__RStandardScaler_8C.html,1,['Guid'],['Guide']
Usability,"d::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:6577,Simpl,SimpleIntervalRooStats,6577,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,20,['Simpl'],"['SimpleInterval', 'SimpleIntervalRooStats']"
Usability,"d::endl; ; Reimplemented from TGFrame.; Definition at line 188 of file TGDoubleSlider.h. ◆ HandleButton(). Bool_t TGDoubleVSlider::HandleButton ; (; Event_t * ; event). overridevirtual . Handle mouse button event in vertical slider. ; Implements TGDoubleSlider.; Reimplemented in TGTripleVSlider.; Definition at line 332 of file TGDoubleSlider.cxx. ◆ HandleMotion(). Bool_t TGDoubleVSlider::HandleMotion ; (; Event_t * ; event). overridevirtual . Handle mouse motion event in vertical slider. ; Implements TGDoubleSlider.; Reimplemented in TGTripleVSlider.; Definition at line 379 of file TGDoubleSlider.cxx. ◆ IsA(). TClass * TGDoubleVSlider::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGDoubleSlider.; Reimplemented in TGTripleVSlider.; Definition at line 192 of file TGDoubleSlider.h. ◆ SavePrimitive(). void TGDoubleVSlider::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save an horizontal slider as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TGTripleVSlider.; Definition at line 661 of file TGDoubleSlider.cxx. ◆ Streamer(). void TGDoubleVSlider::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGDoubleSlider.; Reimplemented in TGTripleVSlider. ◆ StreamerNVirtual(). void TGDoubleVSlider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 192 of file TGDoubleSlider.h. Member Data Documentation. ◆ fYp. Int_t TGDoubleVSlider::fYp. protected . vertical slider y position in pixel coordinates ; Definition at line 173 of file TGDoubleSlider.h. Libraries for TGDoubleVSlider:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDoubleSlider.h; gui/gui/src/TGDoubleSlider.cxx. TGDoubleVSlider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleVSlider.html:36035,Guid,Guide,36035,doc/master/classTGDoubleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleVSlider.html,1,['Guid'],['Guide']
Usability,"d::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; std::string createLabel () const;  Compile a string with all the labels of the serving categories, such as {1Jet;1Lepton;2Tag}. ;  ; value_type evaluate () const override;  Calculate the current value. ;  ; void recomputeShape () override;  Inspect all the subcategories, and enumerate and name their states. ;  ;  Protected Member Functions inherited from RooAbsCategory; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach the category index and label as branches to the given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  Attach the category index and label to as branches to the given vector store. ;  ; void clearTypes ();  Delete all currently defined states. ;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValueDirty=true) override;  Copy the cached value from given source and raise dirty flag. ;  ; virtual const std::map< std::string, RooAbsCategory::value_type >::value_type & defineState (const std::string &label);  Define a new state with given label. ;  ; virtual const std::map< std::string, RooAbsCategory::value_type >::value_type & defineState (const std::string &label, value_type index);  Define new state with given name and index number. ;  ; void defineStateUnchecked (const std::string &label, value_type index);  Internal version of defineState() that does not check if type already exists. ;  ; void fillTreeBranch (TTree &t) override;  Fill tree branches associated with current object with current value. ;  ; bool isValid () const override;  WVE (08/21/01) Probably obsolete now. ;  ; value_type nextAvailableStateIndex () const;  ; RooCatType * retrieveLegacyState (value_ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiCategory.html:35670,clear,clearTypes,35670,doc/master/classRooMultiCategory.html,https://root.cern,https://root.cern/doc/master/classRooMultiCategory.html,1,['clear'],['clearTypes']
Usability,d::unique_ptr<TGLHistPainter> TGL5DDataSet::fPainter. private . Definition at line 101 of file TGL5D.h. ◆ fV1. const Double_t* TGL5DDataSet::fV1. private . Definition at line 76 of file TGL5D.h. ◆ fV1MinMax. Rgl::Range_t TGL5DDataSet::fV1MinMax. private . Definition at line 84 of file TGL5D.h. ◆ fV1Range. Double_t TGL5DDataSet::fV1Range. private . Definition at line 85 of file TGL5D.h. ◆ fV2. const Double_t* TGL5DDataSet::fV2. private . Definition at line 77 of file TGL5D.h. ◆ fV2MinMax. Rgl::Range_t TGL5DDataSet::fV2MinMax. private . Definition at line 86 of file TGL5D.h. ◆ fV2Range. Double_t TGL5DDataSet::fV2Range. private . Definition at line 87 of file TGL5D.h. ◆ fV3. const Double_t* TGL5DDataSet::fV3. private . Definition at line 78 of file TGL5D.h. ◆ fV3MinMax. Rgl::Range_t TGL5DDataSet::fV3MinMax. private . Definition at line 88 of file TGL5D.h. ◆ fV3Range. Double_t TGL5DDataSet::fV3Range. private . Definition at line 89 of file TGL5D.h. ◆ fV4. const Double_t* TGL5DDataSet::fV4. private . Definition at line 79 of file TGL5D.h. ◆ fV4IsString. Bool_t TGL5DDataSet::fV4IsString. private . Definition at line 99 of file TGL5D.h. ◆ fV4MinMax. Rgl::Range_t TGL5DDataSet::fV4MinMax. private . Definition at line 90 of file TGL5D.h. ◆ fV5. const Double_t* TGL5DDataSet::fV5. private . Definition at line 80 of file TGL5D.h. ◆ fV5MinMax. Rgl::Range_t TGL5DDataSet::fV5MinMax. private . Definition at line 91 of file TGL5D.h. ◆ fXAxis. TAxis TGL5DDataSet::fXAxis. mutableprivate . Definition at line 95 of file TGL5D.h. ◆ fYAxis. TAxis TGL5DDataSet::fYAxis. mutableprivate . Definition at line 96 of file TGL5D.h. ◆ fZAxis. TAxis TGL5DDataSet::fZAxis. mutableprivate . Definition at line 97 of file TGL5D.h. Libraries for TGL5DDataSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGL5D.h; graf3d/gl/src/TGL5D.cxx. TGL5DDataSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGL5DDataSet.html:20005,Guid,Guide,20005,doc/master/classTGL5DDataSet.html,https://root.cern,https://root.cern/doc/master/classTGL5DDataSet.html,1,['Guid'],['Guide']
Usability,"d; The array dimension is the number of bins in the histograms; including underflow and overflow (fNCells); the last value integral[fNCells] is set to the number of entries of; the histogram. void Copy(TObject& hnew) const; -*-*-*-*-*Copy this histogram structure to newth1*-*-*-*-*-*-*-*-*-*-*-*. Note that this function does not copy the list of associated functions.; Use TObject::Clone to make a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If yo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:58807,simpl,simple,58807,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,1,['simpl'],['simple']
Usability,"d<(useForTraining-availableTraining) ||; 1284 availableUndefined<(useForTesting -availableTesting ) ||; 1285 availableUndefined<(useForTraining+useForTesting-availableTraining-availableTesting ) ){; 1286 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName())<< ""More events requested than available!"" << Endl;; 1287 }; 1288 ; 1289 // select the events; 1290 if (useForTraining>availableTraining){; 1291 eventVectorTraining.insert( eventVectorTraining.end() , eventVectorUndefined.begin(), eventVectorUndefined.begin()+ useForTraining- availableTraining );; 1292 eventVectorUndefined.erase( eventVectorUndefined.begin(), eventVectorUndefined.begin() + useForTraining- availableTraining);; 1293 }; 1294 if (useForTesting>availableTesting){; 1295 eventVectorTesting.insert( eventVectorTesting.end() , eventVectorUndefined.begin(), eventVectorUndefined.begin()+ useForTesting- availableTesting );; 1296 }; 1297 }; 1298 eventVectorUndefined.clear();; 1299 ; 1300 // finally shorten the event vectors to the requested size by removing random events; 1301 if (splitMode.Contains( ""RANDOM"" )){; 1302 UInt_t sizeTraining = eventVectorTraining.size();; 1303 if( sizeTraining > UInt_t(requestedTraining) ){; 1304 std::vector<UInt_t> indicesTraining( sizeTraining );; 1305 // make indices; 1306 std::generate( indicesTraining.begin(), indicesTraining.end(), TMVA::Increment<UInt_t>(0) );; 1307 // shuffle indices; 1308 std::shuffle(indicesTraining.begin(), indicesTraining.end(), rndm);; 1309 // erase indices of not needed events; 1310 indicesTraining.erase( indicesTraining.begin()+sizeTraining-UInt_t(requestedTraining), indicesTraining.end() );; 1311 // delete all events with the given indices; 1312 for( std::vector<UInt_t>::iterator it = indicesTraining.begin(), itEnd = indicesTraining.end(); it != itEnd; ++it ){; 1313 delete eventVectorTraining.at( (*it) ); // delete event; 1314 eventVectorTraining.at( (*it) ) = NULL; // set pointer to NULL; 1315 }; 1316 // now remove and erase all events with point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:57227,clear,clear,57227,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['clear'],['clear']
Usability,"dAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1F.html:1750,Clear,Clear,1750,root/html602/TH1F.html,https://root.cern,https://root.cern/root/html602/TH1F.html,2,['Clear'],['Clear']
Usability,"dAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2F.html:1731,Clear,Clear,1731,root/html602/TH2F.html,https://root.cern,https://root.cern/root/html602/TH2F.html,2,['Clear'],['Clear']
Usability,"dAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3F.html:1731,Clear,Clear,1731,root/html602/TH3F.html,https://root.cern,https://root.cern/root/html602/TH3F.html,2,['Clear'],['Clear']
Usability,"dAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayS::Adopt(Int_t n, Short_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Short_tTArrayS::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1S.html:1751,Clear,Clear,1751,root/html602/TH1S.html,https://root.cern,https://root.cern/root/html602/TH1S.html,2,['Clear'],['Clear']
Usability,"dAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayS::Adopt(Int_t n, Short_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Short_tTArrayS::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2S.html:1738,Clear,Clear,1738,root/html602/TH2S.html,https://root.cern,https://root.cern/root/html602/TH2S.html,2,['Clear'],['Clear']
Usability,"dAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayS::Adopt(Int_t n, Short_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Short_tTArrayS::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3S.html:1738,Clear,Clear,1738,root/html602/TH3S.html,https://root.cern,https://root.cern/root/html602/TH3S.html,2,['Clear'],['Clear']
Usability,"dAdjustPosition(TGListTreeItem* item); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGContainer::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidCheckAllChildren(TGListTreeItem* item, Bool_t state); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; voidCheckItem(TGListTreeItem* item, Bool_t check = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearHighlighted(); virtual voidTGContainer::ClearViewPort(); virtual voidClicked(TGListTreeItem* entry, Int_t btn)SIGNAL ; virtual voidClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual voidClicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidCloseItem(TGListTreeItem* item); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListTree.html:2687,Clear,ClearViewPort,2687,root/html528/TGListTree.html,https://root.cern,https://root.cern/root/html528/TGListTree.html,6,['Clear'],['ClearViewPort']
Usability,"dAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTObjArray::AddAt(TObject* obj, Int_t idx); virtual voidTObjArray::AddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tTObjArray::AddAtFree(TObject* obj); virtual voidTObjArray::AddBefore(const TObject* before, TObject* obj); virtual voidTObjArray::AddFirst(TObject* obj); virtual voidTObjArray::AddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TObjArray::At(Int_t i) const; virtual TObject*TObjArray::Before(const TObject* obj) const; virtual Int_tTObjArray::BinarySearch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__TSchemaMatch.html:1473,Clear,Clear,1473,root/html530/ROOT__TSchemaMatch.html,https://root.cern,https://root.cern/root/html530/ROOT__TSchemaMatch.html,2,['Clear'],['Clear']
Usability,"dAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTObjArray::AddAt(TObject* obj, Int_t idx); virtual voidTObjArray::AddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tTObjArray::AddAtFree(TObject* obj); virtual voidTObjArray::AddBefore(const TObject* before, TObject* obj); virtual voidTObjArray::AddFirst(TObject* obj); virtual voidTObjArray::AddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TObjArray::At(Int_t i) const; virtual TObject*TObjArray::Before(const TObject* obj) const; virtual Int_tTObjArray::BinarySearch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__TSchemaMatch.html:1471,Clear,Clear,1471,root/html526/ROOT__TSchemaMatch.html,https://root.cern,https://root.cern/root/html526/ROOT__TSchemaMatch.html,2,['Clear'],['Clear']
Usability,"dBlock (const std::string &selector);  ; void Clear ();  Parse string with CSS code inside. ;  ; const RAttrMap::Value_t * Eval (const std::string &field, const RDrawable &drawable) const;  Evaluate attribute value for provided RDrawable. ;  ; const RAttrMap::Value_t * Eval (const std::string &field, const std::string &selector) const;  Evaluate attribute value for provided selector - exact match is expected. ;  ; bool ParseString (const std::string &css_code);  Parse string with CSS code inside All data will be append to existing style records. ;  . Static Public Member Functions; static std::shared_ptr< RStyle > Parse (const std::string &css_code);  Parse CSS code and returns std::shared_ptr<RStyle> when successful. ;  . Private Attributes; std::list< Block_t > fBlocks;  . #include <ROOT/RStyle.hxx>; Member Function Documentation. ◆ AddBlock(). RAttrMap & ROOT::Experimental::RStyle::AddBlock ; (; const std::string & ; selector). inline . Definition at line 50 of file RStyle.hxx. ◆ Clear(). void ROOT::Experimental::RStyle::Clear ; (; ). Parse string with CSS code inside. ; Definition at line 63 of file RStyle.cxx. ◆ Eval() [1/2]. const ROOT::Experimental::RAttrMap::Value_t * ROOT::Experimental::RStyle::Eval ; (; const std::string & ; field, . const RDrawable & ; drawable . ); const. Evaluate attribute value for provided RDrawable. ; Definition at line 22 of file RStyle.cxx. ◆ Eval() [2/2]. const ROOT::Experimental::RAttrMap::Value_t * ROOT::Experimental::RStyle::Eval ; (; const std::string & ; field, . const std::string & ; selector . ); const. Evaluate attribute value for provided selector - exact match is expected. ; Definition at line 42 of file RStyle.cxx. ◆ Parse(). std::shared_ptr< ROOT::Experimental::RStyle > ROOT::Experimental::RStyle::Parse ; (; const std::string & ; css_code). static . Parse CSS code and returns std::shared_ptr<RStyle> when successful. ; Definition at line 274 of file RStyle.cxx. ◆ ParseString(). bool ROOT::Experimental::RStyle::ParseStrin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RStyle.html:1844,Clear,Clear,1844,doc/master/classROOT_1_1Experimental_1_1RStyle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RStyle.html,1,['Clear'],['Clear']
Usability,"dByFignore()""; in addition, the number of strings which were not ""ExcludedByFignore()"" is returned in ""nGoodStrings"". ; Definition at line 685 of file TTabCom.cxx. ◆ AppendListOfFilesInDirectory(). void TTabCom::AppendListOfFilesInDirectory ; (; const char ; dirName[], . TSeqCollection * ; pList . ). static . [static utility function]///////////////////////////// ; adds a TObjString to ""*pList"" for each entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9276,clear,clears,9276,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['clear'],['clears']
Usability,"dDL.h:153; TMVA::MethodDL::ParseRecurrentLayervoid ParseRecurrentLayer(ERecurrentLayerType type, DNN::TDeepNet< Architecture_t, Layer_t > &deepNet, std::vector< DNN::TDeepNet< Architecture_t, Layer_t > > &nets, TString layerString, TString delim)Pases the layer string and creates the appropriate rnn layer.Definition MethodDL.cxx:931; TMVA::MethodDL::fTrainingSettingsstd::vector< TTrainingSettings > fTrainingSettingsThe vector defining each training strategy.Definition MethodDL.h:204; TMVA::MethodDL::GetInputWidthsize_t GetInputWidth() constDefinition MethodDL.h:257; TMVA::MethodDL::SetInputShapevoid SetInputShape(std::vector< size_t > inputShape)Definition MethodDL.h:289; TMVA::MethodDL::GetLossFunctionDNN::ELossFunction GetLossFunction() constDefinition MethodDL.h:270; TMVA::MethodDL::fBatchLayoutStringTString fBatchLayoutStringThe string defining the layout of the batch.Definition MethodDL.h:193; TMVA::MethodDL::HasAnalysisTypeBool_t HasAnalysisType(Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)Check the type of analysis the deep learning network can do.Definition MethodDL.cxx:1091; TMVA::MethodDL::ParseConvLayervoid ParseConvLayer(DNN::TDeepNet< Architecture_t, Layer_t > &deepNet, std::vector< DNN::TDeepNet< Architecture_t, Layer_t > > &nets, TString layerString, TString delim)Pases the layer string and creates the appropriate convolutional layer.Definition MethodDL.cxx:669; TMVA::MethodDL::ParseReshapeLayervoid ParseReshapeLayer(DNN::TDeepNet< Architecture_t, Layer_t > &deepNet, std::vector< DNN::TDeepNet< Architecture_t, Layer_t > > &nets, TString layerString, TString delim)Pases the layer string and creates the appropriate reshape layer.Definition MethodDL.cxx:829; TMVA::MethodDL::GetRegressionValuesvirtual const std::vector< Float_t > & GetRegressionValues(); TMVA::MethodDL::fTrainingStrategyStringTString fTrainingStrategyStringThe string defining the training strategy.Definition MethodDL.h:196; TMVA::MethodDL::CreateRankingconst Rankin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:109536,learn,learning,109536,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learning']
Usability,"dEntry.cxx. ◆ SaveEntry(). void TLegendEntry::SaveEntry ; (; std::ostream & ; out, . const char * ; name . ). virtual . Save this TLegendEntry as C++ statements on output stream out to be used with the SaveAs .C option. ; Definition at line 114 of file TLegendEntry.cxx. ◆ SetLabel(). virtual void TLegendEntry::SetLabel ; (; const char * ; label = """"). inlinevirtual . Definition at line 37 of file TLegendEntry.h. ◆ SetObject() [1/2]. void TLegendEntry::SetObject ; (; const char * ; objectName). virtual . (re)set the obj pointed to by this entry ; Definition at line 149 of file TLegendEntry.cxx. ◆ SetObject() [2/2]. void TLegendEntry::SetObject ; (; TObject * ; obj). virtual . (re)set the obj pointed to by this entry ; Definition at line 138 of file TLegendEntry.cxx. ◆ SetOption(). virtual void TLegendEntry::SetOption ; (; Option_t * ; option = ""lpf""). inlinevirtual . Definition at line 40 of file TLegendEntry.h. ◆ Streamer(). void TLegendEntry::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TLegendEntry::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TLegendEntry.h. Member Data Documentation. ◆ fLabel. TString TLegendEntry::fLabel. protected . Text associated with the entry, will become latex. ; Definition at line 44 of file TLegendEntry.h. ◆ fObject. TObject* TLegendEntry::fObject. protected . pointer to object being represented by this entry ; Definition at line 43 of file TLegendEntry.h. ◆ fOption. TString TLegendEntry::fOption. protected . Options associated with this entry. ; Definition at line 45 of file TLegendEntry.h. Libraries for TLegendEntry:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TLegendEntry.h; graf2d/graf/src/TLegendEntry.cxx. TLegendEntry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegendEntry.html:24092,Guid,Guide,24092,doc/master/classTLegendEntry.html,https://root.cern,https://root.cern/doc/master/classTLegendEntry.html,1,['Guid'],['Guide']
Usability,"dEntryvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetOption(Option_t *option=""lpf"")TLegendEntryinlinevirtual; SetTextAlign(Short_t align=11)TAttTextinlinevirtual; SetTextAngle(Float_t tangle=0)TAttTextinlinevirtual; SetTextAttributes()TAttTextvirtual; SetTextColor(Color_t tcolor=1)TAttTextinlinevirtual; SetTextColorAlpha(Color_t tcolor, Float_t talpha)TAttTextvirtual; SetTextFont(Font_t tfont=62)TAttTextinlinevirtual; SetTextSize(Float_t tsize=1)TAttTextinlinevirtual; SetTextSizePixels(Int_t npixels)TAttTextvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Streamer(TBuffer &) overrideTLegendEntryvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TLegendEntryinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TAttText()TAttText; TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize)TAttText; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TLegendEntry()TLegendEntry; TLegendEntry(const TObject *obj, const char *label=nullptr, Option_t *option=""lpf"")TLegendEntry; TLegendEntry(const TLegendEntry &entry)TLegendEntry; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TAttText()TAttTextvirtual; ~TLegendEntry() overrideTLegendEntry; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegendEntry-members.html:9877,Guid,Guide,9877,doc/master/classTLegendEntry-members.html,https://root.cern,https://root.cern/doc/master/classTLegendEntry-members.html,1,['Guid'],['Guide']
Usability,"dEnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:2031,Clear,ClearData,2031,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['Clear'],['ClearData']
Usability,"dError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Minuit2/Minuit2Minimizer.h>. Inheritance diagram for ROOT::Minuit2::Minuit2Minimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Minuit2Minimizer() [1/2]. ROOT::Minuit2::Minuit2Minimizer::Minuit2Minimizer ; (; ROOT::Minuit2::EMinimizerType ; type = ROOT::Minuit2::kMigrad). Default constructor. ; Definition at line 86 of file Minuit2Minimizer.cxx. ◆ Minuit2Minimizer() [2/2]. ROOT::Minuit2::Minuit2Minimizer::Minuit2Minimizer ; (; const char * ; type). Constructor with a char (used by PM) ; Definition at line 93 of file Minuit2Minimizer.cxx. ◆ ~Minuit2Minimizer(). ROOT::Minuit2::Minuit2Minimizer::~Minuit2Minimizer ; (; ). override . Destructor (no operations) ; Definition at line 145 of file Minuit2Minimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Minuit2::Minuit2Minimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 156 of file Minuit2Minimizer.cxx. ◆ Contour(). bool ROOT::Minuit2::Minuit2Minimizer::Contour ; (; unsigned int ; i, . unsigned int ; j, . unsigned int & ; npoints, . double * ; xi, . double * ; xj . ). overridevirtual . find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1148 of file Minuit2Minimizer.cxx. ◆ Correlation(). double ROOT::Minuit2::Minuit2Minimizer::Correlation ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return correlation coefficient between variable i and j. ; If the variable is fixed or const the return value is zero ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 815 of file Minuit2Minimizer.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:13189,Clear,Clear,13189,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['Clear'],['Clear']
Usability,"dFirst(TObject *obj) overrideTObjArrayvirtual; AddLast(TObject *obj) overrideTObjArrayvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddVector(TObject *obj1,...)TCollection; After(const TObject *obj) const overrideTObjArrayvirtual; AppendPad(Option_t *option="""")TObjectvirtual; AssertClass(TClass *cl) constTCollection; At(Int_t idx) const overrideTObjArrayinlinevirtual; Before(const TObject *obj) const overrideTObjArrayvirtual; begin() constTCollectioninline; BinarySearch(TObject *obj, Int_t upto=kMaxInt)TObjArrayvirtual; BoundsOk(const char *where, Int_t at) constTObjArrayinlineprotected; Browse(TBrowser *b) overrideTCollectionvirtual; Capacity() constTCollectioninline; Changed()TSeqCollectioninlineprotectedvirtual; CheckedHash()TObjectinline; Class()TObjArraystatic; Class_Name()TObjArraystatic; Class_Version()TObjArrayinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTObjArrayvirtual; Clone(const char *newname="""") const overrideTCollectionvirtual; Compare(const TObject *obj) const overrideTCollectionvirtual; Compress()TObjArrayvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TObjArrayinlinestatic; Delete(Option_t *option="""") overrideTObjArrayvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTCollectionvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTCollectionvirtual; EDeprecatedStatusBits enum nameTObject; EmptyGarbageCollection()TCollectionstatic; end() constTCollectioninline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTCollectionprotected; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjArray-members.html:1550,Clear,Clear,1550,doc/master/classTObjArray-members.html,https://root.cern,https://root.cern/doc/master/classTObjArray-members.html,1,['Clear'],['Clear']
Usability,"dMethod(ClassInfo_t *, const char *, const char *, Bool_t, Longptr_t *, ROOT::EFunctionMatchMode=ROOT::kConversionMatch) constTInterpreterinlinevirtual; ClassInfo_Name(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_New(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_New(ClassInfo_t *, int) constTInterpreterinlinevirtual; ClassInfo_New(ClassInfo_t *, int, void *) constTInterpreterinlinevirtual; ClassInfo_New(ClassInfo_t *, void *) constTInterpreterinlinevirtual; ClassInfo_Next(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_Property(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_Size(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_Tagnum(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_Title(ClassInfo_t *) constTInterpreterinlinevirtual; ClassInfo_TmpltName(ClassInfo_t *) constTInterpreterinlinevirtual; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearFileBusy()=0TInterpreterpure virtual; ClearStack()=0TInterpreterpure virtual; Clone(const char *newname="""") const overrideTNamedvirtual; CodeComplete(const std::string &, size_t &, std::vector< std::string > &)TInterpreterinlinevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; CreateEnum(void *VD, TClass *cl) const =0TInterpreterpure virtual; CreateListOfBaseClasses(TClass *cl) const =0TInterpreterpure virtual; CreateListOfDataMembers(TClass *cl) const =0TInterpreterpure virtual; CreateListOfMethodArgs(TFunction *m) const =0TInterpreterpure virtual; CreateListOfMethods(TClass *cl) const =0TInterpreterpure virtual; CreateTemporary() constTInterpreterinline; DataMemberInfo_ArrayDim(DataMemberInfo_t *) constTInterpreterinlinevirtual; DataMemberInfo_Delete(DataMemberInfo_t *) constTInterpreterinlinevirtual; DataMemberInfo_Factory(ClassInfo_t *, TDictionary::EMemberSelection) constTInterpreterinlinevirtual; DataMemberInfo_Factory(DeclId_t declid, ClassInfo_t *clinfo) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter-members.html:9081,Clear,ClearStack,9081,doc/master/classTInterpreter-members.html,https://root.cern,https://root.cern/doc/master/classTInterpreter-members.html,1,['Clear'],['ClearStack']
Usability,"dNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase ; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch!Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypefPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tfReadDirectionSet! read direction established; Bool_tfReverseRead! reading in reverse mode ; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:21092,learn,learning,21092,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['learn'],['learning']
Usability,"dObjectAny (const TClass *expectedClass);  To read an object (non deriving from TObject) from the file. ;  ; virtual TObject * ReadObjWithBuffer (char *bufferRead);  To read a TObject* from bufferRead. ;  ; virtual void SetBuffer ();  ; void SetMotherDir (TDirectory *dir);  ; virtual void SetParent (const TObject *parent);  Set parent in key buffer. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the key header structure. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteFile (Int_t cycle=1, TFile *f=nullptr);  Write the encoded object supported by this key. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKey.html:5990,Clear,Clear,5990,doc/master/classTKey.html,https://root.cern,https://root.cern/doc/master/classTKey.html,4,['Clear'],['Clear']
Usability,"dObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v622/namespaceROOT.html:2173,simpl,simple,2173,doc/v622/namespaceROOT.html,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html,1,['simpl'],['simple']
Usability,"dOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDesc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8cxx_source.html:78962,Clear,ClearAllPhysVisibilitybool,78962,doc/v632/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html,2,['Clear'],"['ClearAllPhysVisibility', 'ClearAllPhysVisibilitybool']"
Usability,"dOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1850; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:371; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDesc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:78963,Clear,ClearAllPhysVisibilitybool,78963,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],"['ClearAllPhysVisibility', 'ClearAllPhysVisibilitybool']"
Usability,"dPdf::setAllExtendable ; (; bool ; allExtendable). inlineprivate . Definition at line 151 of file RooAddPdf.h. ◆ setCacheAndTrackHints(). void RooAddPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooAddPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 938 of file RooAddPdf.cxx. ◆ setRecursiveFraction(). void RooAddPdf::setRecursiveFraction ; (; bool ; recursiveFraction). inlineprivate . Definition at line 150 of file RooAddPdf.h. ◆ Streamer(). void RooAddPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooAddPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file RooAddPdf.h. ◆ translate(). void RooAddPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the curre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:93591,simpl,simple,93591,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,2,['simpl'],['simple']
Usability,"dPopup ; (; ). Ungrab pointer and unmap popup window. ; Definition at line 113 of file TGComboBox.cxx. ◆ HandleButton(). Bool_t TGComboBoxPopup::HandleButton ; (; Event_t * ; event). overridevirtual . Handle mouse button event in combo box popup. ; Reimplemented from TGFrame.; Definition at line 91 of file TGComboBox.cxx. ◆ IsA(). TClass * TGComboBoxPopup::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 43 of file TGComboBox.h. ◆ KeyPressed(). void TGComboBoxPopup::KeyPressed ; (; TGFrame * ; f, . UInt_t ; keysym, . UInt_t ;  . ). Slot handling the key press events. ; Definition at line 200 of file TGComboBox.cxx. ◆ operator=(). TGComboBoxPopup & TGComboBoxPopup::operator= ; (; const TGComboBoxPopup & ; ). privatedelete . ◆ PlacePopup(). void TGComboBoxPopup::PlacePopup ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). Popup combo box popup window at the specified place. ; Definition at line 137 of file TGComboBox.cxx. ◆ SetListBox(). void TGComboBoxPopup::SetListBox ; (; TGListBox * ; lb). inline . Definition at line 39 of file TGComboBox.h. ◆ Streamer(). void TGComboBoxPopup::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGComboBoxPopup::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 43 of file TGComboBox.h. Member Data Documentation. ◆ fListBox. TGListBox* TGComboBoxPopup::fListBox. protected . Definition at line 24 of file TGComboBox.h. ◆ fSelected. TGLBEntry* TGComboBoxPopup::fSelected. protected . Definition at line 25 of file TGComboBox.h. Libraries for TGComboBoxPopup:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGComboBox.h; gui/gui/src/TGComboBox.cxx. TGComboBoxPopup. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGComboBoxPopup.html:34576,Guid,Guide,34576,doc/master/classTGComboBoxPopup.html,https://root.cern,https://root.cern/doc/master/classTGComboBoxPopup.html,1,['Guid'],['Guide']
Usability,dRange::SendToBack ; (; ). virtual . Make the selection which owns the range to be drawn under all the others. ; Definition at line 427 of file TParallelCoordRange.cxx. ◆ SetLineColor(). void TParallelCoordRange::SetLineColor ; (; Color_t ; col). overridevirtual . Set the selection line color. ; Reimplemented from TAttLine.; Definition at line 438 of file TParallelCoordRange.cxx. ◆ SetLineWidth(). void TParallelCoordRange::SetLineWidth ; (; Width_t ; wid). overridevirtual . Set the selection line width. ; Reimplemented from TAttLine.; Definition at line 447 of file TParallelCoordRange.cxx. ◆ Streamer(). void TParallelCoordRange::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TParallelCoordRange::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file TParallelCoordRange.h. Member Data Documentation. ◆ fMax. Double_t TParallelCoordRange::fMax. private . Max value for the range. ; Definition at line 34 of file TParallelCoordRange.h. ◆ fMin. Double_t TParallelCoordRange::fMin. private . Min value for the range. ; Definition at line 33 of file TParallelCoordRange.h. ◆ fSelect. TParallelCoordSelect* TParallelCoordRange::fSelect. private . Selection owning the range. ; Definition at line 37 of file TParallelCoordRange.h. ◆ fSize. const Double_t TParallelCoordRange::fSize. private . Size of the painted range. ; Definition at line 35 of file TParallelCoordRange.h. ◆ fVar. TParallelCoordVar* TParallelCoordRange::fVar. private . Variable owning the range. ; Definition at line 36 of file TParallelCoordRange.h. Libraries for TParallelCoordRange:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TParallelCoordRange.h; tree/treeviewer/src/TParallelCoordRange.cxx. TParallelCoordRange. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordRange.html:21282,Guid,Guide,21282,doc/master/classTParallelCoordRange.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordRange.html,1,['Guid'],['Guide']
Usability,"dRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetAlwaysReuseNLL(Bool_t flag). void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). void EnableDetailedOutput(bool e = true); { fDetailedOutputEnabled = e; fDetailedOutput = NULL; }. const RooArgSet* GetDetailedOutput(void); { return fDetailedOutp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html:2319,Simpl,SimpleLikelihoodRatioTestStat,2319,root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"dRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DKeysPdf.html:2968,clear,clearValueDirty,2968,root/html534/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html534/Roo2DKeysPdf.html,3,['clear'],['clearValueDirty']
Usability,"dSelectionColorBitsTEveElement::kCSCBApplyMainColorToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainColorToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveScene(const char* n = ""TEveScene"", const char* t = """"); Constructor. TEveScene(TGLScenePad* gl_scene, const char* n = ""TEveScene"", const char* t = """"); Constructor. ~TEveScene(); Destructor. void CollectSceneParents(TEveElement::List_t& scenes); Virtual from TEveElement; here we simply append this scene to; the list. void Repaint(Bool_t dropLogicals = kFALSE); Repaint the scene. void RetransHierarchically(); Entry point for hierarchical transformation update.; Calls the recursive variant on all children. void RetransHierarchicallyRecurse(TEveElement* el, const TEveTrans& tp); Set transformation matrix for physical shape of element el in; the GL-scene and recursively descend into children (if enabled). void SetName(const char* n); Set scene's name. void Paint(Option_t* option = """"); Paint the scene. Iterate over children and calls PadPaint(). void DestroyElementRenderers(TEveElement* element); Remove element from the scene.; It is not an error if the element is not found in the scene. void DestroyElementRenderers(TObject* rnrObj); Remove element represented by object rnrObj from the scene.; It is not an error if the element is not found in the scene. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return icon for scene. TEveSce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveScene.html:21606,simpl,simply,21606,root/html602/TEveScene.html,https://root.cern,https://root.cern/root/html602/TEveScene.html,2,['simpl'],['simply']
Usability,"dServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooThresholdCategory.html:2092,Clear,Clear,2092,root/html532/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html532/RooThresholdCategory.html,1,['Clear'],['Clear']
Usability,"dServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooThresholdCategory.html:2092,Clear,Clear,2092,root/html528/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html528/RooThresholdCategory.html,2,['Clear'],['Clear']
Usability,"dSetNullParameters(const RooArgSet& nullParameters); voidsetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt; RooNLLVar*fNllNull; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void setAlwaysReuseNLL(Bool_t flag); { fAlwaysReuseNll = flag ; }. void setReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: SimpleLikelihoodRatioTestStat.h 39956 2011-06-24 21:06:20Z wouter $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html:2006,Simpl,SimpleLikelihoodRatioTestStat,2006,root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"dTArrayC::AddAt(Char_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayC::Adopt(Int_t n, Char_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Char_tTArrayC::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1C.html:1976,Clear,Clear,1976,root/html534/TH1C.html,https://root.cern,https://root.cern/root/html534/TH1C.html,1,['Clear'],['Clear']
Usability,"dTArrayC::AddAt(Char_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayC::Adopt(Int_t n, Char_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Char_tTArrayC::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2C.html:2318,Clear,Clear,2318,root/html534/TH2C.html,https://root.cern,https://root.cern/root/html534/TH2C.html,1,['Clear'],['Clear']
Usability,"dTArrayC::AddAt(Char_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayC::Adopt(Int_t n, Char_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Char_tTArrayC::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH3C.html:2188,Clear,Clear,2188,root/html534/TH3C.html,https://root.cern,https://root.cern/root/html534/TH3C.html,1,['Clear'],['Clear']
Usability,"dTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*TEveWindow::CreateWindowMainFrame(TEveWindow* eve_parent = 0); voidTEveElement::CSCA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowPack.html:2160,Clear,ClearEveFrame,2160,root/html528/TEveWindowPack.html,https://root.cern,https://root.cern/root/html528/TEveWindowPack.html,2,['Clear'],['ClearEveFrame']
Usability,"dTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitParametersDialog.html:1653,Clear,Clear,1653,root/html528/TFitParametersDialog.html,https://root.cern,https://root.cern/root/html528/TFitParametersDialog.html,59,['Clear'],['Clear']
Usability,"dTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAdvancedGraphicsDialog.html:1691,Clear,Clear,1691,root/html526/TAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/root/html526/TAdvancedGraphicsDialog.html,67,['Clear'],['Clear']
Usability,"dTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidColorSelected(Pixel_t)SIGNAL ; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGColorDialog.html:2219,Clear,Clear,2219,root/html528/TGColorDialog.html,https://root.cern,https://root.cern/root/html528/TGColorDialog.html,3,['Clear'],['Clear']
Usability,"dTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; Int_tAddBin(TObject* poly); Int_tAddBin(Int_t n, const Double_t* x, const Double_t* y); Int_tAddBin(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTH1::AddBinContent(Int_t bin); virtual voidTH1::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); voidChangePartition(Int_t n, Int_t m); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearBinContents(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidTH2::Copy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2Poly.html:6707,Clear,Clear,6707,root/html528/TH2Poly.html,https://root.cern,https://root.cern/root/html528/TH2Poly.html,1,['Clear'],['Clear']
Usability,"dTObject::AbstractMethod(const char* method) const; virtual Bool_tAcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidActivateBaseClassEditors(TClass* cl); virtual voidAddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedFrame.html:1546,Clear,Clear,1546,root/html528/TGedFrame.html,https://root.cern,https://root.cern/root/html528/TGedFrame.html,6,['Clear'],['Clear']
Usability,"dTObject::MakeZombie(). private:. doubleCalculateEstimatedError(double target, bool lower = true, double xmin = 1, double xmax = 0); intFindClosestPointIndex(double target, int mode = 0, double xtarget = 0); doubleGetExpectedLimit(double nsig, bool lower, const char* opt = """") const; doubleGetGraphX(const TGraph& g, double y0, bool lowSearch = true) const; doubleGetGraphX(const TGraph& g, double y0, bool lowSearch, double& xmin, double& xmax) const; RooStats::SamplingDistribution*GetLimitDistribution(bool lower) const. Data Members; public:. enum InterpolOption_t { kLinear; kSpline; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tRooStats::SimpleInterval::fConfidenceLevelconfidence level; Double_tRooStats::SimpleInterval::fLowerLimitlower interval limit; RooArgSetRooStats::SimpleInterval::fParametersset containing the parameter of interest; Double_tRooStats::SimpleInterval::fUpperLimitupper interval limit. protected:. doublefCLsCleanupThreshold; TListfExpPValueslist of expected sampling distribution for each point; boolfFittedLowerLimit; boolfFittedUpperLimit; RooStats::HypoTestInverterResult::InterpolOption_tfInterpolOptioninterpolatation option (linear or spline); boolfInterpolateLowerLimit; boolfInterpolateUpperLimit; boolfIsTwoSidedtwo sided scan (look for lower/upper limit) ; doublefLowerLimitError; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; doublefUpperLimitError; boolfUseCLs; vector<double>fXValues; TListfYObjectslist of HypoTestResult for each point; static doublefgAsymptoticMaxSigmamax sigma value used to scan asymptotic expected p values . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestInverterResult(const char* name = 0); default constructor. HypoTestI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:9023,Simpl,SimpleInterval,9023,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,4,['Simpl'],['SimpleInterval']
Usability,"d_t id, TClass* cl); voidAddImplFile(const char* filename, int line); voidAddInstance(Bool_t heap = kFALSE); static Bool_tAddRule(const char* rule); voidAdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidAdoptReferenceProxy(TVirtualRefProxy* proxy); voidAdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidAdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Int_tAutoBrowse(TObject* obj, TBrowser* browser); virtual voidBrowse(TBrowser* b); Int_tBrowse(void* obj, TBrowser* b) const; voidBuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidBuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidCalculateStreamerOffset() const; Bool_tCallShowMembers(const void* obj, TMemberInspector& insp, Bool_t isTransient = kFALSE) const; Bool_tCanIgnoreTObjectStreamer(); Bool_tCanSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; Long_tClassProperty() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyCollectionProxy(const TVirtualCollectionProxy&); voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteArray(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(const void* obj, Bool_t noAddr = kFALSE) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); const void*DynamicCast(const TClass* base, const void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:1973,Clear,Clear,1973,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['Clear'],['Clear']
Usability,"das.DataFrame ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:144805,Simpl,Simple,144805,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['Simpl'],['Simple']
Usability,"data members; class charts. ROOT; » HIST; » HIST; » THnT<float>. class THnT<float>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<float>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_float_.html:992,Clear,Clear,992,root/html602/THnT_float_.html,https://root.cern,https://root.cern/root/html602/THnT_float_.html,2,['Clear'],['Clear']
Usability,"data members; class charts. ROOT; » HIST; » HIST; » THnT<short>. class THnT<short>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<short>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_short_.html:992,Clear,Clear,992,root/html602/THnT_short_.html,https://root.cern,https://root.cern/root/html602/THnT_short_.html,2,['Clear'],['Clear']
Usability,"data, RooStats::ModelConfig& model); RooStats::BayesianCalculatorBayesianCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& POI, RooAbsPdf& priorPOI, const RooArgSet* nuisanceParameters = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual RooStats::SimpleInterval*GetInterval() const; doubleGetMode() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooAbsReal*GetPosteriorFunction() const; RooAbsPdf*GetPosteriorPdf() const; RooPlot*GetPosteriorPlot(bool norm = false, double precision = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BayesianCalculator.html:2368,Simpl,SimpleInterval,2368,root/html528/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__BayesianCalculator.html,1,['Simpl'],['SimpleInterval']
Usability,"dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writable file. ;  ; void SetModelPersistence (Bool_t status=kTRUE);  Method enable m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:2361,learn,learning,2361,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,1,['learn'],['learning']
Usability,"dataset to be used as input ;  ; void AddTree (const TString &tr, const TString &className, Double_t weight=1.0, const TCut &cut="""", Types::ETreeType tt=Types::kMaxTreeType);  add a className tree to the dataset to be used as input ;  ; void AddTree (TTree *tree, const TString &className, Double_t weight=1.0, const TCut &cut="""", Types::ETreeType tt=Types::kMaxTreeType);  add tree of className events for tt (Training;Testing..) type as input .. ;  ; const TreeInfo & BackgroundTreeInfo (Int_t i) const;  ; std::vector< TreeInfo >::const_iterator Bbegin () const;  ; std::vector< TreeInfo >::const_iterator begin (const TString &className) const;  ; std::vector< TreeInfo >::const_iterator Bend () const;  ; void ClearBackgroundTreeList ();  ; void ClearSignalTreeList ();  ; void ClearTreeList (const TString &className);  ; std::vector< TreeInfo >::const_iterator end (const TString &className) const;  ; UInt_t GetBackgroundEntries () const;  ; std::vector< TString > * GetClassList () const;  ; UInt_t GetEntries () const;  return number of entries in tree ;  ; UInt_t GetEntries (const TString &name) const;  ; UInt_t GetNBackgroundTrees () const;  ; UInt_t GetNSignalTrees () const;  ; UInt_t GetNTrees (const TString &name) const;  ; UInt_t GetSignalEntries () const;  ; virtual TClass * IsA () const;  ; std::vector< TreeInfo >::const_iterator Sbegin () const;  ; std::vector< TreeInfo >::const_iterator Send () const;  ; const TreeInfo & SignalTreeInfo (Int_t i) const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html:2118,Clear,ClearBackgroundTreeList,2118,doc/master/classTMVA_1_1DataInputHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html,3,['Clear'],"['ClearBackgroundTreeList', 'ClearSignalTreeList', 'ClearTreeList']"
Usability,"date();; ; TCanvas *c2 = new TCanvas(""c2"",""contours"",10,10,600,800);; c2->Divide(1,2);; c2->cd(1);; /*get first contour for parameter 1 versus parameter 2*/; TGraph *gr12 = (TGraph*)gMinuit->Contour(40,1,2);; gr12->Draw(""alp"");; c2->cd(2);; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=2*/; gMinuit->SetErrorDef(4); //note 4 and not 2!; TGraph *gr2 = (TGraph*)gMinuit->Contour(80,0,2);; gr2->SetFillColor(42);; gr2->Draw(""alf"");; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=1*/; gMinuit->SetErrorDef(1);; TGraph *gr1 = (TGraph*)gMinuit->Contour(80,0,2);; gr1->SetFillColor(38);; gr1->Draw(""lf"");; }; h#define h(i)Definition RSha256.hxx:106; TCanvas.h; TGraph.h; TH1F.h; TMinuit.h; gMinuitR__EXTERN TMinuit * gMinuitDefinition TMinuit.h:271; TVirtualFitter.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TMinuit::SetErrorDefvirtual Int_t SetErrorDef(Double_t up)To get the n-sigma contour the error def parameter ""up"" has to set to n^2.Definition TMinuit.cxx:908; TMinuit::Contourvirtual TObject * Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)Creates a TGraph object describing the n-sigma contour of a TMinuit fit.Definition TMinuit.cxx:653; TVirtualFitter::SetDefaultFitterstatic void SetDefaultFitter(const char *name="""")static: set name of default fitterDefinition TVirtualFitter.cxx:245; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; AuthorRene Brun ; Definition in file fitcont.C. tutorialsfitfitcont.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitcont_8C.html:3193,Guid,Guide,3193,doc/master/fitcont_8C.html,https://root.cern,https://root.cern/doc/master/fitcont_8C.html,1,['Guid'],['Guide']
Usability,"ddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1D.html:1755,Clear,Clear,1755,root/html602/TH1D.html,https://root.cern,https://root.cern/root/html602/TH1D.html,2,['Clear'],['Clear']
Usability,"ddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2D.html:1736,Clear,Clear,1736,root/html602/TH2D.html,https://root.cern,https://root.cern/root/html602/TH2D.html,2,['Clear'],['Clear']
Usability,"ddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3D.html:1736,Clear,Clear,1736,root/html602/TH3D.html,https://root.cern,https://root.cern/root/html602/TH3D.html,2,['Clear'],['Clear']
Usability,"ddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; voidChangePartition(Int_t n, Int_t m); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearBinContents(); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidTH2::Copy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2Poly.html:6729,Clear,ClearUnderflowAndOverflow,6729,root/html602/TH2Poly.html,https://root.cern,https://root.cern/root/html602/TH2Poly.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"ddFolder. void ls(Option_t* option = """") const; List folder contents; If option contains ""dump"", the Dump function of contained objects is called.; If option contains ""print"", the Print function of contained objects is called.; By default the ls function of contained objects is called.; Indentation is used to identify the folder tree. The if option contains a <regexp> it be used to match the name of the objects. Int_t Occurence(const TObject* obj) const; Return occurence number of object in the list of objects of this folder.; The function returns the number of objects with the same name as object; found in the list of objects in this folder before object itself.; If only one object is found, return 0. void RecursiveRemove(TObject* obj); Recursively remove object from a folder. void Remove(TObject* obj); Remove object from this folder. obj must be a TObject or a TFolder. void SaveAs(const char* filename = """", Option_t* option = """") const; Save all objects in this folder in filename.; Each object in this folder will have a key in the file where the name of; the key will be the name of the object. void SetOwner(Bool_t owner = kTRUE); Set ownership.; If the folder is declared owner, when the folder is deleted, all; the objects added via TFolder::Add are deleted via TObject::Delete,; otherwise TObject::Clear is called. NOTE that folder ownership can be set:; - via TFolder::SetOwner; - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder. void operator=(const TFolder& ). void Copy(TObject& ) const; { MayNotUse(""Copy(TObject &)""); }. TCollection * GetListOfFolders() const; { return fFolders; }. Bool_t IsFolder() const; { return kTRUE; }. » Author: Rene Brun 02/09/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-13 19:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFolder.html:12789,Clear,Clear,12789,root/html534/TFolder.html,https://root.cern,https://root.cern/root/html534/TFolder.html,1,['Clear'],['Clear']
Usability,"ddFolder. void ls(Option_t* option = """") const; List folder contents; If option contains ""dump"", the Dump function of contained objects is called.; If option contains ""print"", the Print function of contained objects is called.; By default the ls function of contained objects is called.; Indentation is used to identify the folder tree. The if option contains a <regexp> it be used to match the name of the objects. Int_t Occurence(const TObject* obj) const; Return occurence number of object in the list of objects of this folder.; The function returns the number of objects with the same name as object; found in the list of objects in this folder before object itself.; If only one object is found, return 0. void RecursiveRemove(TObject* obj); Recursively remove object from a folder. void Remove(TObject* obj); Remove object from this folder. obj must be a TObject or a TFolder. void SaveAs(const char* filename = """", Option_t* option = """") const; Save all objects in this folder in filename.; Each object in this folder will have a key in the file where the name of; the key will be the name of the object. void SetOwner(Bool_t owner = kTRUE); Set ownership.; If the folder is declared owner, when the folder is deleted, all; the objects added via TFolder::Add are deleted via TObject::Delete,; otherwise TObject::Clear is called. NOTE that folder ownership can be set:; - via TFolder::SetOwner; - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder. void operator=(const TFolder& ). void Copy(TObject& ) const; { MayNotUse(""Copy(TObject &)""); }. TCollection * GetListOfFolders() const; { return fFolders; }. Bool_t IsFolder() const; { return kTRUE; }. » Author: Rene Brun 02/09/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 15:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFolder.html:13250,Clear,Clear,13250,root/html604/TFolder.html,https://root.cern,https://root.cern/root/html604/TFolder.html,1,['Clear'],['Clear']
Usability,"ddFolder. void ls(Option_t* option = """") const; List folder contents; If option contains ""dump"", the Dump function of contained objects is called.; If option contains ""print"", the Print function of contained objects is called.; By default the ls function of contained objects is called.; Indentation is used to identify the folder tree. The if option contains a <regexp> it be used to match the name of the objects. Int_t Occurence(const TObject* obj) const; Return occurence number of object in the list of objects of this folder.; The function returns the number of objects with the same name as object; found in the list of objects in this folder before object itself.; If only one object is found, return 0. void RecursiveRemove(TObject* obj); Recursively remove object from a folder. void Remove(TObject* obj); Remove object from this folder. obj must be a TObject or a TFolder. void SaveAs(const char* filename = """", Option_t* option = """") const; Save all objects in this folder in filename.; Each object in this folder will have a key in the file where the name of; the key will be the name of the object. void SetOwner(Bool_t owner = kTRUE); Set ownership.; If the folder is declared owner, when the folder is deleted, all; the objects added via TFolder::Add are deleted via TObject::Delete,; otherwise TObject::Clear is called. NOTE that folder ownership can be set:; - via TFolder::SetOwner; - or via TCollection::SetOwner on the collection specified to TFolder::AddFolder. void operator=(const TFolder& ). void Copy(TObject& ) const; { MayNotUse(""Copy(TObject &)""); }. TCollection * GetListOfFolders() const; { return fFolders; }. Bool_t IsFolder() const; { return kTRUE; }. » Author: Rene Brun 02/09/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFolder.html:13250,Clear,Clear,13250,root/html602/TFolder.html,https://root.cern,https://root.cern/root/html602/TFolder.html,1,['Clear'],['Clear']
Usability,"ddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidAfterNewEventLoaded(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearNewEventCommands(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClose(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveEventManager.html:2156,Clear,Clear,2156,root/html528/TEveEventManager.html,https://root.cern,https://root.cern/root/html528/TEveEventManager.html,1,['Clear'],['Clear']
Usability,"ddSignalHandler(TSignalHandler *sh)TSystemvirtual; AddStdExceptionHandler(TStdExceptionHandler *eh)TSystemvirtual; AddTimer(TTimer *t)TSystemvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize=-1)TSystemvirtual; AnnounceUdpService(int port, int backlog)TSystemvirtual; AnnounceUnixService(int port, int backlog)TSystemvirtual; AnnounceUnixService(const char *sockpath, int backlog)TSystemvirtual; AppendPad(Option_t *option="""")TObjectvirtual; BaseName(const char *pathname)TSystemvirtual; Beep(Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE)TSystem; Browse(TBrowser *b)TObjectvirtual; cd(const char *path)TSysteminline; ChangeDirectory(const char *path)TSystemvirtual; CheckedHash()TObjectinline; Chmod(const char *file, UInt_t mode)TSystemvirtual; Class()TSystemstatic; Class_Name()TSystemstatic; Class_Version()TSysteminlinestatic; ClassName() constTObjectvirtual; CleanCompiledMacros()TSystemvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloseConnection(int sock, Bool_t force=kFALSE)TSystemvirtual; Closelog()TSystemvirtual; ClosePipe(FILE *pipe)TSystemvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompileMacro(const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0)TSystemvirtual; ConcatFileName(const char *dir, const char *name)TSystemvirtual; ConsistentWith(const char *path, void *dirptr=nullptr)TSystemprotectedvirtual; Copy(TObject &named) const overrideTNamedvirtual; CopyFile(const char *from, const char *to, Bool_t overwrite=kFALSE)TSystemvirtual; DeclFileName()TSysteminlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirName(const char *pathname)TSystemvirtual; DispatchOneEvent(Bool_t pendingOnly=kFALSE)TSystemvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoBeep(Int_t=-1, Int_t=-1) constTSysteminlineprotectedvir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem-members.html:1613,Clear,Clear,1613,doc/master/classTSystem-members.html,https://root.cern,https://root.cern/doc/master/classTSystem-members.html,1,['Clear'],['Clear']
Usability,"ddingacolumnofstl); 51- [Add a column holding an object](\ref addingacolumnofobjs); 52- [Add a column holding a TObjectArray](\ref addingacolumnofobjs); 53- [Fill the tree](\ref fillthetree); 54- [Add a column to an already existing Tree](\ref addcoltoexistingtree); 55- [An Example](\ref fullexample); 56 ; 57\anchor creatingattree; 58## Construct a TTree; 59 ; 60~~~ {.cpp}; 61 TTree tree(name, title); 62~~~; 63Creates a Tree with name and title.; 64 ; 65Various kinds of branches can be added to a tree:; 66- Variables representing fundamental types, simple classes/structures or list of variables: for example for C or Fortran; 67structures.; 68- Any C++ object or collection, provided by the STL or ROOT.; 69 ; 70In the following, the details about the creation of different types of branches are given.; 71 ; 72\anchor addcolumnoffundamentaltypes; 73## Add a column (""branch"") holding fundamental types and arrays thereof; 74This strategy works also for lists of variables, e.g. to describe simple structures.; 75It is strongly recommended to persistify those as objects rather than lists of leaves.; 76 ; 77~~~ {.cpp}; 78 auto branch = tree.Branch(branchname, address, leaflist, bufsize); 79~~~; 80- address is the address of the first item of a structure; 81- leaflist is the concatenation of all the variable names and types; 82 separated by a colon character :; 83 The variable name and the variable type are separated by a; 84 slash (/). The variable type must be 1 character. (Characters; 85 after the first are legal and will be appended to the visible; 86 name of the leaf, but have no effect.) If no type is given, the; 87 type of the variable is assumed to be the same as the previous; 88 variable. If the first variable does not have a type, it is; 89 assumed of type F by default. The list of currently supported; 90 types is given below:; 91 - `C` : a character string terminated by the 0 character; 92 - `B` : an 8 bit signed integer (`Char_t`); Treated as a character when in an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:3761,simpl,simple,3761,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simple']
Usability,"ddobj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<const char>(const char* name, const char* classname, const char* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<void>(const char* name, void* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual voidCanDeleteRefs(Bool_t flag = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); virtual voidCreatePackets(); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TChain.html:3471,Clear,Clear,3471,root/html602/TChain.html,https://root.cern,https://root.cern/root/html602/TChain.html,2,['Clear'],['Clear']
Usability,"de ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Rule Class ReferenceTMVA. ; Implementation of a rule. ; A rule is simply a branch or a part of a branch in a tree. It fulfills the following:. First node is the root node of the originating tree; Consists of a minimum of 2 nodes; A rule returns for a given event:; 0 : if the event fails at any node; 1 : otherwise. If the rule contains <2 nodes, it returns 0 SHOULD NOT HAPPEN!. The coefficient is found by either brute force or some sort of intelligent fitting. See the RuleEnsemble class for more info. ; Definition at line 50 of file Rule.h. Public Member Functions;  Rule ();  the simple constructor ;  ;  Rule (const Rule &other);  ;  Rule (RuleEnsemble *re);  the simple constructor ;  ;  Rule (RuleEnsemble *re, const std::vector< const TMVA::Node * > &nodes);  the main constructor for a Rule ;  ; virtual ~Rule ();  destructor ;  ; void * AddXMLTo (void *parent) const;  ; void CalcImportance ();  ; Bool_t ContainsVariable (UInt_t iv) const;  check if variable in node ;  ; Bool_t Equal (const Rule &other, Bool_t useCutValue, Double_t maxdist) const;  Compare two rules. ;  ; Bool_t EvalEvent (const Event &e) const;  ; Double_t GetCoefficient () const;  ; Double_t GetImportance () const;  ; Double_t GetImportanceRef () const;  ; UInt_t GetNcuts () const;  ; Double_t GetNorm () const;  ; UInt_t GetNumVarsUsed () const;  ; Double_t GetRelImportance () const;  ; const RuleCut * GetRuleCut () const;  ; const RuleEnsemble * GetRuleEnsemble () const;  ; Double_t GetSigma () const;  ; Double_t GetSSB () const;  ; Double_t GetSSBNeve () const;  ; Double_t GetSupport () const;  ; Bool_t IsSignalRule () const;  ; Bool_t operator< (const Rule &other) const;  comparison operator < ;  ; void operator= (const Rule &other);  ; Bool_t operator== (const Rule &other) const;  comparison operator == ;  ; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Rule.html:842,simpl,simple,842,doc/master/classTMVA_1_1Rule.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Rule.html,2,['simpl'],['simple']
Usability,"de a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 372 of file RooCategory.cxx. ◆ addToRange() [2/2]. void RooCategory::addToRange ; (; const char * ; name, . RooAbsCategory::value_type ; stateIndex . ). Add the given state to the given range. ; NoteThis creates or accesses a shared map with allowed ranges. All copies of this category will share this range such that a category inside a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 348 of file RooCategory.cxx. ◆ Class(). static TClass * RooCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooCategory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 141 of file RooCategory.h. ◆ clear(). void RooCategory::clear ; (; ). inline . Clear all defined category states. ; Definition at line 69 of file RooCategory.h. ◆ clearRange(). void RooCategory::clearRange ; (; const char * ; name, . bool ; silent . ). Clear the named range. ; NoteThis affects all copies of this category, because they are sharing range definitions. This ensures that categories inside a dataset and their counterparts on the outside will both see a modification of the range. ; Definition at line 321 of file RooCategory.cxx. ◆ clone(). TObject * RooCategory::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 37 of file RooCategory.h. ◆ DeclFileName(). static const char * RooCategory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 141 of file RooCategory.h. ◆ defineType() [1/2]. bool RooCategory::defineType ; (; const std::string & ; label). Define a state with given name. ; The lowest available positi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:55052,clear,clear,55052,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['clear'],['clear']
Usability,"de for class member function SlaveTerminate; 2007 fprintf(hf,""inline void %s::SlaveTerminate()\n"",classname.Data());; 2008 fprintf(hf,""{\n"");; 2009 fprintf(hf,"" // The SlaveTerminate() function is called after all entries or objects\n""; 2010 "" // have been processed. When running with PROOF SlaveTerminate() is called\n""; 2011 "" // on each slave server."");; 2012 fprintf(hf,""\n"");; 2013 fprintf(hf,"" %s_SlaveTerminate();\n"",scriptfunc.Data());; 2014 fprintf(hf,""}\n\n"");; 2015 ; 2016 // generate code for class member function Terminate; 2017 fprintf(hf,""inline void %s::Terminate()\n"",classname.Data());; 2018 fprintf(hf,""{\n"");; 2019 fprintf(hf,"" // Function called at the end of the event loop.\n"");; 2020 fprintf(hf,"" htemp = (TH1*)fObject;\n"");; 2021 fprintf(hf,"" Int_t drawflag = (htemp && htemp->GetEntries()>0);\n"");; 2022 fprintf(hf,"" \n"");; 2023 fprintf(hf,"" if (gPad && !drawflag && !fOption.Contains(\""goff\"") && !fOption.Contains(\""same\"")) {\n"");; 2024 fprintf(hf,"" gPad->Clear();\n"");; 2025 fprintf(hf,"" } else {\n"");; 2026 fprintf(hf,"" if (fOption.Contains(\""goff\"")) drawflag = false;\n"");; 2027 fprintf(hf,"" if (drawflag) htemp->Draw(fOption);\n"");; 2028 fprintf(hf,"" }\n"");; 2029 fprintf(hf,"" %s_Terminate();\n"",scriptfunc.Data());; 2030 fprintf(hf,""}\n"");; 2031 ; 2032 fclose(hf);; 2033 ; 2034 if (updating) {; 2035 // over-write existing file only if needed.; 2036 if (AreDifferent(fHeaderFileName,tmpfilename)) {; 2037 gSystem->Unlink(fHeaderFileName);; 2038 gSystem->Rename(tmpfilename,fHeaderFileName);; 2039 } else gSystem->Unlink(tmpfilename);; 2040 }; 2041 delete [] filename;; 2042 delete [] cutfilename;; 2043 }; 2044 ; 2045} // namespace Internal; 2046} // namespace ROOT; Int_tint Int_tDefinition RtypesCore.h:45; Long_tlong Long_tDefinition RtypesCore.h:54; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TBranchElement.h; TBranchProxyClassDescriptor.h; TBranchProxyDescriptor.h; TChain.h; TClassEdit.h; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html:77774,Clear,Clear,77774,doc/master/TTreeProxyGenerator_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html,1,['Clear'],['Clear']
Usability,de string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 187 of file PiecewiseInterpolation.cxx. Member Data Documentation. ◆ _highSet. RooListProxy PiecewiseInterpolation::_highSet. protected . High-side variation. ; Definition at line 95 of file PiecewiseInterpolation.h. ◆ _interpCode. std::vector<int> PiecewiseInterpolation::_interpCode. protected . Definition at line 100 of file PiecewiseInterpolation.h. ◆ _lowSet. RooListProxy PiecewiseInterpolation::_lowSet. protected . Low-side variation. ; Definition at line 94 of file PiecewiseInterpolation.h. ◆ _nominal. RooRealProxy PiecewiseInterpolation::_nominal. protected . The nominal value. ; Definition at line 92 of file PiecewiseInterpolation.h. ◆ _normIntMgr. RooObjCacheManager PiecewiseInterpolation::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition at line 90 of file PiecewiseInterpolation.h. ◆ _normSet. RooListProxy PiecewiseInterpolation::_normSet. protected . interpolation parameters ; Definition at line 97 of file PiecewiseInterpolation.h. ◆ _ownedList. RooArgList PiecewiseInterpolation::_ownedList. protected . List of owned components. ; Definition at line 93 of file PiecewiseInterpolation.h. ◆ _paramSet. RooListProxy PiecewiseInterpolation::_paramSet. protected . interpolation parameters ; Definition at line 96 of file PiecewiseInterpolation.h. ◆ _positiveDefinite. bool PiecewiseInterpolation::_positiveDefinite = false. protected . protect against negative and 0 bins. ; Definition at line 98 of file PiecewiseInterpolation.h. Libraries for PiecewiseInterpolation:. [legend]; The documentation for this class was generated from the following files:; roofit/histfactory/inc/RooStats/HistFactory/PiecewiseInterpolation.h; roofit/histfactory/src/PiecewiseInterpolation.cxx. PiecewiseInterpolation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:71953,Guid,Guide,71953,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,1,['Guid'],['Guide']
Usability,"de this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:22685,Undo,Undo,22685,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,6,['Undo'],['Undo']
Usability,"de(TH2PolyBin,1) //2-Dim polygon bins; 59};; 60 ; 61class TList;; 62class TGraph;; 63class TMultiGraph;; 64class TPad;; 65 ; 66class TH2Poly : public TH2 {; 67 ; 68public:; 69 TH2Poly();; 70 TH2Poly(const char *name,const char *title, Double_t xlow, Double_t xup, Double_t ylow, Double_t yup);; 71 TH2Poly(const char *name,const char *title, Int_t nX, Double_t xlow, Double_t xup, Int_t nY, Double_t ylow, Double_t yup);; 72 ~TH2Poly() override;; 73 TH2Poly(const TH2Poly & rhs);; 74 TH2Poly & operator=(const TH2Poly & rhs);; 75 ; 76 virtual TH2PolyBin *CreateBin(TObject *poly);; 77 virtual Int_t AddBin(TObject *poly);; 78 Int_t AddBin(Int_t n, const Double_t *x, const Double_t *y);; 79 Int_t AddBin(Double_t x1, Double_t y1, Double_t x2, Double_t y2);; 80 Bool_t Add(const TH1 *h1, Double_t c1) override;; 81 Bool_t Add(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1) override;; 82 Bool_t Add(TF1 *h1, Double_t c1=1, Option_t *option="""") override;; 83 void ClearBinContents(); // Clears the content of all bins; 84 TObject *Clone(const char* newname = """") const override;; 85 void Copy(TObject & newth2p) const override;; 86 void ChangePartition(Int_t n, Int_t m); // Sets the number of partition cells to another value; 87 using TH2::Multiply;; 88 using TH2::Divide;; 89 using TH2::Interpolate;; 90 Bool_t Divide(TF1 *, Double_t) override;; 91 Bool_t Multiply(TF1 *, Double_t) override;; 92 Double_t ComputeIntegral(Bool_t) override;; 93 TH1 * FFT(TH1*, Option_t * ) override;; 94 virtual TH1 * GetAsymmetry(TH1* , Double_t, Double_t);; 95 virtual Double_t Interpolate(Double_t, Double_t);; 96 Int_t Fill(Double_t x,Double_t y) override;; 97 Int_t Fill(Double_t x,Double_t y, Double_t w) override;; 98 Int_t Fill(const char* name, Double_t w) override;; 99 void FillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, Int_t stride = 1) override;; 100 Int_t FindBin(Double_t x, Double_t y, Double_t z = 0) override;; 101 TList *GetBins(){return fBins;} ///< Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8h_source.html:3145,Clear,Clears,3145,doc/master/TH2Poly_8h_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8h_source.html,1,['Clear'],['Clears']
Usability,"de, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseC. Function Members (Methods); public:. THnSparseT<TArrayC>(); THnSparseT<TArrayC>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayC>(); voidTObject::AbstractMethod(const char* method) const; voidTHnSparse::Add(const THnSparse* h, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* x, Double_t v = 1.); voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnSparse::Browse(TBrowser* b); voidTHnSparse::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnSparse::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t ChunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnSparse::Divide(const THnSparse* h); voidTHnSparse::Divide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparseT_TArrayC_.html:2364,Clear,Clear,2364,root/html532/THnSparseT_TArrayC_.html,https://root.cern,https://root.cern/root/html532/THnSparseT_TArrayC_.html,1,['Clear'],['Clear']
Usability,"de, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseD. Function Members (Methods); public:. THnSparseT<TArrayD>(); THnSparseT<TArrayD>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayD>(); voidTObject::AbstractMethod(const char* method) const; voidTHnSparse::Add(const THnSparse* h, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* x, Double_t v = 1.); voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnSparse::Browse(TBrowser* b); voidTHnSparse::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnSparse::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t ChunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnSparse::Divide(const THnSparse* h); voidTHnSparse::Divide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparseT_TArrayD_.html:2364,Clear,Clear,2364,root/html532/THnSparseT_TArrayD_.html,https://root.cern,https://root.cern/root/html532/THnSparseT_TArrayD_.html,1,['Clear'],['Clear']
Usability,"de, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseF. Function Members (Methods); public:. THnSparseT<TArrayF>(); THnSparseT<TArrayF>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayF>(); voidTObject::AbstractMethod(const char* method) const; voidTHnSparse::Add(const THnSparse* h, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* x, Double_t v = 1.); voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnSparse::Browse(TBrowser* b); voidTHnSparse::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnSparse::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t ChunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnSparse::Divide(const THnSparse* h); voidTHnSparse::Divide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparseT_TArrayF_.html:2364,Clear,Clear,2364,root/html532/THnSparseT_TArrayF_.html,https://root.cern,https://root.cern/root/html532/THnSparseT_TArrayF_.html,1,['Clear'],['Clear']
Usability,"de, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseI. Function Members (Methods); public:. THnSparseT<TArrayI>(); THnSparseT<TArrayI>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayI>(); voidTObject::AbstractMethod(const char* method) const; voidTHnSparse::Add(const THnSparse* h, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* x, Double_t v = 1.); voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnSparse::Browse(TBrowser* b); voidTHnSparse::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnSparse::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t ChunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnSparse::Divide(const THnSparse* h); voidTHnSparse::Divide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparseT_TArrayI_.html:2364,Clear,Clear,2364,root/html532/THnSparseT_TArrayI_.html,https://root.cern,https://root.cern/root/html532/THnSparseT_TArrayI_.html,1,['Clear'],['Clear']
Usability,"de, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseL. Function Members (Methods); public:. THnSparseT<TArrayL>(); THnSparseT<TArrayL>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayL>(); voidTObject::AbstractMethod(const char* method) const; voidTHnSparse::Add(const THnSparse* h, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* x, Double_t v = 1.); voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnSparse::Browse(TBrowser* b); voidTHnSparse::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnSparse::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t ChunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnSparse::Divide(const THnSparse* h); voidTHnSparse::Divide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparseT_TArrayL_.html:2364,Clear,Clear,2364,root/html532/THnSparseT_TArrayL_.html,https://root.cern,https://root.cern/root/html532/THnSparseT_TArrayL_.html,1,['Clear'],['Clear']
Usability,"de, in contrast to e.g. STL. This class is also known as (typedefs to this class)THnSparseS. Function Members (Methods); public:. THnSparseT<TArrayS>(); THnSparseT<TArrayS>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayS>(); voidTObject::AbstractMethod(const char* method) const; voidTHnSparse::Add(const THnSparse* h, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* x, Double_t v = 1.); voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnSparse::Browse(TBrowser* b); voidTHnSparse::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnSparse::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t ChunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnSparse::Divide(const THnSparse* h); voidTHnSparse::Divide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparseT_TArrayS_.html:2364,Clear,Clear,2364,root/html532/THnSparseT_TArrayS_.html,https://root.cern,https://root.cern/root/html532/THnSparseT_TArrayS_.html,1,['Clear'],['Clear']
Usability,"de, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 2, Bool_t clearCacheOnServerRedirect = kTRUE, Bool_t allowOptimize = kFALSE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache eleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooObjCacheManager.html:4868,clear,clearOnRedirect,4868,root/html534/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html534/RooObjCacheManager.html,3,['clear'],['clearOnRedirect']
Usability,"de. rfio; ON; RFIO support, requires libshift from CASTOR >= 1.5.2. rpath; OFF; Set run-time library load path on executables and shared libraries (at installation area). runtime_cxxmodules; OFF; Enable runtime c++ modules. sapdb; ON; MaxDB/SapDB support, requires libsqlod and libsqlrte. shadowpw; ON; Shadow password support. shared; ON; Use shared 3rd party libraries if possible. soversion; OFF; Set version number in sonames (recommended). sqlite; ON; SQLite support, requires libsqlite3. srp; ON; SRP support, requires SRP source tree. ssl; ON; SSL encryption support, requires openssl. tbb; OFF; TBB multi-threading support, requires TBB. table; *; Build libTable contrib library. tcmalloc; OFF; Using the tcmalloc allocator. testing; OFF; Enable test suit of ROOT with CTest. thread; ON; Using thread library (cannot be disabled). tmva; ON; Build TMVA multi variate analysis library. unuran; *; UNURAN - package for generating non-uniform random numbers. vc; *; Vc adds a few new types for portable and intuitive SIMD programming. vdt; ON; VDT adds a set of fast and vectorisable mathematical functions. winrtdebug; OFF; Link against the Windows debug runtime library. xft; ON; Xft support (X11 antialiased fonts). xml; ON; XML parser interface. xrootd; ON; Build xrootd file server and its client (if supported). x11; *; X11 support. The default value for these options are platform dependent. CMake Generators; CMake can generate, in addition to standard makefiles, specific proejcts for various integrated development environments (IDEs) such as Xcode, Eclipse, Visual Studio, etc.. The available generators depend on the platform for which cmake have been build. To see the list of available generators do cmake --help .; Ninja; Generate a Ninja project with cmake -G Ninja /path/to/source/dir. Building ROOT with Ninja is faster.; Xcode; Generate the Xcode project with cmake -G Xcode /path/to/source/dir. Open the generated file with the Xcode application.; Visual Studio; Generate the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:12838,intuit,intuitive,12838,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['intuit'],['intuitive']
Usability,"de; // spectrum display mode (points, grid, contours, bars, x_lines,; // y_lines, bars_x, bars_y, needles, surface, triangles); int z_scale; // z scale (linear, log, sqrt); int nodesx; // number of nodes in x dimension of grid; int nodesy; // number of nodes in y dimension of grid; int count_reg; // width between contours, applies only for contours display mode; int alfa; // angles of display,alfa+beta must be less or equal to 90, alpha- angle; // between base line of Canvas and left lower edge of picture picture; // base plane; int beta; // angle between base line of Canvas and right lower edge of picture base plane; int view_angle; // rotation angle of the view, it can be 0, 90, 180, 270 degrees; int levels; // # of color levels for rainbowed display modes, it does not apply for; // simple display modes algorithm group; float rainbow1_step; // determines the first component step for neighbouring color; // levels, applies only for rainbowed display modes, it does not apply; // for simple display modes algorithm group; float rainbow2_step; // determines the second component step for neighbouring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; float rainbow3_step; // determines the third component step for neighbouring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; int color_alg; // applies only for rainbowed display modes (rgb smooth algorithm,; // rgb modulo color component, cmy smooth algorithm, cmy modulo; // color component, cie smooth algorithm, cie modulo color component,; // yiq smooth algorithm, yiq modulo color component, hsv smooth; // algorithm, hsv modulo color component, it does not apply for simple; // display modes algorithm group [15]; float l_h_weight; // weight between shading according to fictive light source and; // according to channels counts, applies only for; // PICTURE2_MODE_GROUP_LIGHT_HEIGH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:72223,simpl,simple,72223,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['simpl'],['simple']
Usability,"de;  Draw this function with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SaveAs (const char *="""", Option_t *="""") const override;  Save this object in the file specified by filename. ;  ; void SetNpx (Int_t n);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSpline1.html:2322,Clear,Clear,2322,doc/master/classTMVA_1_1TSpline1.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSpline1.html,2,['Clear'],['Clear']
Usability,"de;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (MethodInfo_t *info);  Update the TFunction to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFunction.html:3290,Clear,Clear,3290,doc/master/classTFunction.html,https://root.cern,https://root.cern/doc/master/classTFunction.html,1,['Clear'],['Clear']
Usability,"de;  How to browse a volume. ;  ; Double_t Capacity () const;  Computes the capacity of this [cm^3] as the capacity of its shape. ;  ; virtual void cd (Int_t inode) const;  Actualize matrix of node indexed <inode> ;  ; void CheckGeometry (Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) const;  Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""") const;  Overlap checking tool. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ;  ; void CheckShapes ();  check for negative parameters in shapes. ;  ; void CleanAll ();  Clean data of the volume. ;  ; void ClearNodes ();  ; void ClearShape ();  Clear the shape of this volume from the list held by the current manager. ;  ; virtual void ClearThreadData () const;  ; void CloneNodesAndConnect (TGeoVolume *newmother) const;  Clone the array of nodes. ;  ; virtual TGeoVolume * CloneVolume () const;  Clone this volume. ;  ; Bool_t Contains (const Double_t *point) const;  ; Int_t CountNodes (Int_t nlevels=1000, Int_t option=0);  Count total number of subnodes starting from this volume, nlevels down. ;  ; virtual void CreateThreadData (Int_t nthreads);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this volume ;  ; virtual TGeoVolume * Divide (const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""");  Division a la G3. ;  ; void Draw (Option_t *option="""") override;  draw top volume according to option ;  ; virtual void DrawOnly (Option_t *option="""");  draw only this volume ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this volume. ;  ; Int_t Export (const char *filename, const char *name="""", Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:15082,Clear,ClearThreadData,15082,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['Clear'],['ClearThreadData']
Usability,"de;  How to browse a volume. ;  ; Double_t Capacity () const;  Computes the capacity of this [cm^3] as the capacity of its shape. ;  ; virtual void cd (Int_t inode) const;  Actualize matrix of node indexed <inode> ;  ; void CheckGeometry (Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) const;  Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""") const;  Overlap checking tool. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ;  ; void CheckShapes ();  check for negative parameters in shapes. ;  ; void CleanAll ();  Clean data of the volume. ;  ; void ClearNodes ();  ; void ClearShape ();  Clear the shape of this volume from the list held by the current manager. ;  ; virtual void ClearThreadData () const;  ; void CloneNodesAndConnect (TGeoVolume *newmother) const;  Clone the array of nodes. ;  ; virtual TGeoVolume * CloneVolume () const;  Clone this volume. ;  ; Bool_t Contains (const Double_t *point) const;  ; Int_t CountNodes (Int_t nlevels=1000, Int_t option=0);  Count total number of subnodes starting from this volume, nlevels down. ;  ; virtual void CreateThreadData (Int_t nthreads);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this volume ;  ; void Draw (Option_t *option="""") override;  draw top volume according to option ;  ; virtual void DrawOnly (Option_t *option="""");  draw only this volume ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this volume. ;  ; Int_t Export (const char *filename, const char *name="""", Option_t *option="""");  Export this volume to a file. ;  ; Bool_t FindMatrixOfDaughterVolume (TGeoVolume *vol) const;  Find a daughter node having VOL as volume and fill TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeMulti.html:11939,Clear,ClearThreadData,11939,doc/master/classTGeoVolumeMulti.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeMulti.html,1,['Clear'],['ClearThreadData']
Usability,"de;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:2753,Undo,UndockWindowDestroySlot,2753,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,4,['Undo'],"['Undock', 'UndockWindowDestroySlot']"
Usability,"de;  Return a Posix Mutex. ;  ; TThreadImp * CreateThreadImp () override;  Return a Posix thread. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TThreadFactory;  TThreadFactory (const char *name=""Unknown"", const char *title=""Unknown Thread Factory"");  TThreadFactory ctor only called by derived classes. ;  ; virtual ~TThreadFactory ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPosixThreadFactory.html:1671,Clear,Clear,1671,doc/master/classTPosixThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTPosixThreadFactory.html,1,['Clear'],['Clear']
Usability,"de;  WVE note: assumes nominal and alternates have identical structure, must add explicit check. ;  ; const RooArgList & lowList () const;  ; const RooAbsReal * nominalHist () const;  Return pointer to the nominal hist function. ;  ; const RooArgList & paramList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; bool positiveDefinite () const;  ; void printAllInterpCodes ();  ; void setAllInterpCodes (int code);  ; bool setBinIntegrator (RooArgSet &allVars);  ; void setInterpCode (RooAbsReal &param, int code, bool silent=false);  ; void setPositiveDefinite (bool flag=true);  ; void Streamer (TBuffer &) override;  Stream an object of class PiecewiseInterpolation. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:3950,simpl,simple,3950,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,1,['simpl'],['simple']
Usability,"de;  destructor, class doesn't own its particles... ;  ; void AddParticle (TObject *p);  ; void Browse (TBrowser *b) override;  browse this particle class ;  ; TObjArray * GetListOfParticles ();  ; Int_t GetNParticles ();  ; TParticlePDG * GetParticle (Int_t i);  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void Print (Option_t *opt="""") const override;  Print the entire information of this kind of particle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticleClassPDG.html:1524,Clear,Clear,1524,doc/master/classTParticleClassPDG.html,https://root.cern,https://root.cern/doc/master/classTParticleClassPDG.html,1,['Clear'],['Clear']
Usability,"deSet the line style for all components.Definition TGeoVolume.cxx:2809; TGeoVolumeMulti::fAttSetBool_t fAttSetDefinition TGeoVolume.h:275; TGeoVolumeMulti::GetNvolumesInt_t GetNvolumes() constDefinition TGeoVolume.h:293; TGeoVolumeMulti::fVolumesTObjArray * fVolumesDefinition TGeoVolume.h:268; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::WeightADouble_t WeightA() constAnalytical computation of the weight.Definition TGeoVolume.cxx:2517; TGeoVolume::AddNodeOffsetvoid AddNodeOffset(TGeoVolume *vol, Int_t copy_no, Double_t offset=0, Option_t *option="""")Add a division node to the list of nodes.Definition TGeoVolume.cxx:1018; TGeoVolume::SetVisContainersvoid SetVisContainers(Bool_t flag=kTRUE) overrideSet visibility for containers.Definition TGeoVolume.cxx:2365; TGeoVolume::cdvirtual void cd(Int_t inode) constActualize matrix of node indexed <inode>Definition TGeoVolume.cxx:965; TGeoVolume::ClearThreadDatavirtual void ClearThreadData() constDefinition TGeoVolume.cxx:425; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::IsVisContainersBool_t IsVisContainers() constDefinition TGeoVolume.h:157; TGeoVolume::SetVoxelFindervoid SetVoxelFinder(TGeoVoxelFinder *finder)Definition TGeoVolume.h:243; TGeoVolume::RemoveNodevoid RemoveNode(TGeoNode *node)Remove an existing daughter.Definition TGeoVolume.cxx:2251; TGeoVolume::GetNodeIndexInt_t GetNodeIndex(const TGeoNode *node, Int_t *check_list, Int_t ncheck) constGet the index of a daughter within check_list by providing the node pointer.Definition TGeoVolume.cxx:1729; TGeoVolume::ValidBool_t Valid() constCheck if the shape of this volume is valid.Definition TGeoVolume.cxx:2409; TGeoVolume::IsAllInvisibleBool_t IsAllInvisible() constReturn TRUE if volume and all daughters are invisible.Definition TGeoVolume.cxx:781; TGeoVolume::fNtotalInt_t fNtotalDefinition TGeoVolum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:138983,Clear,ClearThreadDatavirtual,138983,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,2,['Clear'],"['ClearThreadData', 'ClearThreadDatavirtual']"
Usability,"deTGeoNode * GetNode(Int_t i) constDefinition TGeoVolume.h:182; TGeoVolume::GetUserExtensionTGeoExtension * GetUserExtension() constDefinition TGeoVolume.h:132; TGeoVolume::IsAllInvisibleBool_t IsAllInvisible() constReturn TRUE if volume and all daughters are invisible.Definition TGeoVolume.cxx:781; TGeoVolume::IsXYZVoxelsBool_t IsXYZVoxels() constDefinition TGeoVolume.h:152; TGeoVolume::fNtotalInt_t fNtotalDefinition TGeoVolume.h:56; TGeoVolume::MakeCopyNodesvoid MakeCopyNodes(const TGeoVolume *other)make a new list of nodes and copy all nodes of other volume insideDefinition TGeoVolume.cxx:1908; TGeoVolume::SetUserExtensionvoid SetUserExtension(TGeoExtension *ext)Connect user-defined extension to the volume.Definition TGeoVolume.cxx:1480; TGeoVolume::GrabFWExtensionTGeoExtension * GrabFWExtension() constGet a copy of the framework extension pointer.Definition TGeoVolume.cxx:1525; TGeoVolume::SetNumbervoid SetNumber(Int_t number)Definition TGeoVolume.h:245; TGeoVolume::ClearNodesvoid ClearNodes()Definition TGeoVolume.h:95; TGeoVolume::Raytracevoid Raytrace(Bool_t flag=kTRUE)Draw this volume with current settings and perform raytracing in the pad.Definition TGeoVolume.cxx:1427; TGeoVolume::RandomRaysvoid RandomRays(Int_t nrays=10000, Double_t startx=0, Double_t starty=0, Double_t startz=0, const char *target_vol=nullptr, Bool_t check_norm=kFALSE)Random raytracing method.Definition TGeoVolume.cxx:1409; TGeoVolume::TGeoVolumeTGeoVolume()dummy constructorDefinition TGeoVolume.cxx:453; TGeoVolume::GetMediumTGeoMedium * GetMedium() constDefinition TGeoVolume.h:175; TGeoVolume::GetObjectInfochar * GetObjectInfo(Int_t px, Int_t py) const overrideGet volume info for the browser.Definition TGeoVolume.cxx:1760; TGeoVolume::Printvoid Print(Option_t *option="""") const overridePrint volume info.Definition TGeoVolume.cxx:1257; TGeoVolume::CloneNodesAndConnectvoid CloneNodesAndConnect(TGeoVolume *newmother) constClone the array of nodes.Definition TGeoVolume.cxx:1880; TGeoVolume::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8h_source.html:31851,Clear,ClearNodesvoid,31851,doc/master/TGeoVolume_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8h_source.html,2,['Clear'],"['ClearNodes', 'ClearNodesvoid']"
Usability,"dedMiss ; (; TBranch * ; b, . size_t ; basketNumber . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SetMissed() [1/2]. virtual void TVirtualPerfStats::SetMissed ; (; size_t ; bi, . size_t ; basketNumber . ). pure virtual . Implemented in TTreePerfStats, and TPerfStats. ◆ SetMissed() [2/2]. virtual void TVirtualPerfStats::SetMissed ; (; TBranch * ; b, . size_t ; basketNumber . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SetNumEvents(). virtual void TVirtualPerfStats::SetNumEvents ; (; Long64_t ; num). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SetUsed() [1/2]. virtual void TVirtualPerfStats::SetUsed ; (; size_t ; bi, . size_t ; basketNumber . ). pure virtual . Implemented in TTreePerfStats, and TPerfStats. ◆ SetUsed() [2/2]. virtual void TVirtualPerfStats::SetUsed ; (; TBranch * ; b, . size_t ; basketNumber . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SimpleEvent(). virtual void TVirtualPerfStats::SimpleEvent ; (; EEventType ; type). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ Streamer(). void TVirtualPerfStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualPerfStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TVirtualPerfStats.h. ◆ UnzipEvent(). virtual void TVirtualPerfStats::UnzipEvent ; (; TObject * ; tree, . Long64_t ; pos, . Double_t ; start, . Int_t ; complen, . Int_t ; objlen . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ UpdateBranchIndices(). virtual void TVirtualPerfStats::UpdateBranchIndices ; (; TObjArray * ; branches). pure virtual . Implemented in TPerfStats, and TTreePerfStats. Friends And Related Symbol Documentation. ◆ TChain. friend class TChain. friend . Definition at line 35 of file TVirtualPerfStats.h. Libraries for TVirtualPerfStats:. [legend]; The docume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPerfStats.html:17320,Simpl,SimpleEvent,17320,doc/master/classTVirtualPerfStats.html,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"def std::vector<Bool_t, A> Cont_t;; 722 typedef typename Cont_t::iterator Iter_t;; 723 typedef typename Cont_t::value_type Value_t;; 724 typedef Environ<Iter_t> Env_t;; 725 typedef Env_t *PEnv_t;; 726 typedef Cont_t *PCont_t;; 727 typedef Value_t *PValue_t;; 728 ; 729 static void resize(void* obj,size_t n) {; 730 PCont_t c = PCont_t(obj);; 731 c->resize(n);; 732 }; 733 static void* feed(void* from, void *to, size_t size) {; 734 PCont_t c = PCont_t(to);; 735 PValue_t m = PValue_t(from);; 736 for (size_t i=0; i<size; ++i, ++m); 737 c->push_back(*m);; 738 return nullptr;; 739 }; 740 static int value_offset() {; 741 return 0;; 742 }; 743 };; 744 ; 745 // Need specialization for boolean references due to stupid STL std::vector<bool>; 746 template <class A> struct TCollectionProxyInfo::Address<std::vector<Bool_t, A>> {; 747 virtual ~Address() {}; 748 static void* address(typename std::vector<Bool_t, A>::const_reference) {; 749 R__ASSERT(false && ""Intentionally not implemented, should use VectorLooper or other functions specialized for ""; 750 ""vector<bool> instead"");; 751 return {};; 752 }; 753 };; 754 ; 755 template <typename Bitset_t> struct TCollectionProxyInfo::Type<Internal::TStdBitsetHelper<Bitset_t> > : public TCollectionProxyInfo::Address<const Bool_t &>; 756 {; 757 typedef Bitset_t Cont_t;; 758 typedef std::pair<size_t,Bool_t> Iter_t;; 759 typedef Bool_t Value_t;; 760 typedef Environ<Iter_t> Env_t;; 761 typedef Env_t *PEnv_t;; 762 typedef Cont_t *PCont_t;; 763 typedef Value_t *PValue_t;; 764 ; 765 virtual ~Type() {}; 766 ; 767 static inline PCont_t object(void* ptr) {; 768 return PCont_t(PEnv_t(ptr)->fObject);; 769 }; 770 static void* size(void* env) {; 771 PEnv_t e = PEnv_t(env);; 772 e->fSize = PCont_t(e->fObject)->size();; 773 return &e->fSize;; 774 }; 775 static void* clear(void* env) {; 776 object(env)->reset();; 777 return nullptr;; 778 }; 779 static void* first(void* env) {; 780 PEnv_t e = PEnv_t(env);; 781 PCont_t c = PCont_t(e->fObject);; 782 e->fIterator.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:26771,clear,clear,26771,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['clear'],['clear']
Usability,"defined states. Bool_t operator==(Int_t index); Equality operator with a integer (compares with state index number). Bool_t operator==(const char* label); Equality operator with a string (compares with state label string). Bool_t operator==(const RooAbsArg& other); Equality operator with another RooAbsArg. Only functional; is also a RooAbsCategory, will return true if index is the same. Bool_t isValidIndex(Int_t index) const; Check if state with given index is defined. Bool_t isValidLabel(const char* label) const; Check if state with given name is defined. const RooCatType* defineType(const char* label); Define a new state with given name. The lowest available; integer number is assigned as index value. const RooCatType* defineTypeUnchecked(const char* label, Int_t index); Internal version of defineType that does not check if type; already exists. const RooCatType* defineType(const char* label, Int_t index); Define new state with given name and index number. void clearTypes(); Delete all currently defined states. const RooCatType* lookupType(const RooCatType &other, Bool_t printError); Find our type that matches the specified type, or return 0 for no match. const RooCatType* lookupType(Int_t index, Bool_t printError); Find our type corresponding to the specified index, or return 0 for no match. const RooCatType* lookupType(const char* label, Bool_t printError); Find our type corresponding to the specified label, or return 0 for no match. Bool_t isValid() const; Check if current value is a valid state. Bool_t isValid(RooCatType value) const; Check if given state is defined for this object. Roo1DTable* createTable(const char* label) const; Create a table matching the shape of this category. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from stream (dummy for now). void writeToStream(ostream& os, Bool_t compact) const; Write object contents to ostream. void printValue(ostream& os) const; Print value (label name). void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCategory.html:21542,clear,clearTypes,21542,root/html526/RooAbsCategory.html,https://root.cern,https://root.cern/root/html526/RooAbsCategory.html,1,['clear'],['clearTypes']
Usability,"del encapulates the schema of an ntuple.Definition RNTupleModel.hxx:136; ROOT::Experimental::RNTupleModel::Createstatic std::unique_ptr< RNTupleModel > Create()Definition RNTupleModel.cxx:249; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; writerDefinition writer.py:1. Definition at line 161 of file RNTupleWriter.hxx. ◆ EnableMetrics(). void ROOT::Experimental::RNTupleWriter::EnableMetrics ; (; ). inline . Definition at line 137 of file RNTupleWriter.hxx. ◆ Fill() [1/2]. std::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; ). inline . The simplest user interface if the default entry that comes with the ntuple model is used. ; ReturnsThe number of uncompressed bytes written. ; Definition at line 105 of file RNTupleWriter.hxx. ◆ Fill() [2/2]. std::size_t ROOT::Experimental::RNTupleWriter::Fill ; (; REntry & ; entry). inline . Multiple entries can have been instantiated from the ntuple model. ; This method will perform a light check whether the entry comes from the ntuple's own model. ReturnsThe number of uncompressed bytes written. ; Definition at line 109 of file RNTupleWriter.hxx. ◆ FillNoFlush(). void ROOT::Experimental::RNTupleWriter::FillNoFlush ; (; REntry & ; entry, . RNTupleFillStatus & ; status . ). inline . Fill an entry into this ntuple, but don't commit the cluster. ; The calling code must pass an RNTupleFillStatus and check RNTupleFillStatus::ShouldFlushCluster. ; Definition at line 112 of file RNTupleWriter.hxx. ◆ FlushCluster(). void ROOT::Experimental::RNTupleWriter::FlushCluster ; (; ). inline . Flush so far filled entries to storage. ; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:8157,simpl,simplest,8157,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,1,['simpl'],['simplest']
Usability,"del { kFull =0; , kRules =1; , kLinear =2; };  . Public Member Functions;  RuleEnsemble ();  constructor ;  ;  RuleEnsemble (const RuleEnsemble &other);  copy constructor ;  ;  RuleEnsemble (RuleFit *rf);  constructor ;  ; virtual ~RuleEnsemble ();  destructor ;  ; void AddOffset (Double_t v);  ; void * AddXMLTo (void *parent) const;  write rules to XML ;  ; void CalcImportance ();  calculate the importance of each rule ;  ; Double_t CalcLinImportance ();  calculate the linear importance for each rule ;  ; Double_t CalcLinNorm (Double_t stdev);  ; Int_t CalcNRules (const TMVA::DecisionTree *dtree);  calculate the number of rules ;  ; Double_t CalcRuleImportance ();  calculate importance of each rule ;  ; void CalcRuleSupport ();  calculate the support for all rules ;  ; void CalcVarImportance ();  Calculates variable importance using eq (35) in RuleFit paper by Friedman et.al. ;  ; void CleanupLinear ();  cleanup linear model ;  ; void CleanupRules ();  cleanup rules ;  ; void ClearCoefficients (Double_t val=0);  ; void ClearLinCoefficients (Double_t val=0);  ; void ClearLinNorm (Double_t val=1.0);  ; void ClearRuleMap ();  ; Double_t CoefficientRadius ();  Calculates sqrt(Sum(a_i^2)), i=1..N (NOTE do not include a0) ;  ; Bool_t DoFull () const;  ; Bool_t DoLinear () const;  ; Bool_t DoOnlyLinear () const;  ; Bool_t DoOnlyRules () const;  ; Bool_t DoRules () const;  ; Double_t EvalEvent () const;  ; Double_t EvalEvent (const Event &e);  ; Double_t EvalEvent (const Event &e, Double_t ofs, const std::vector< Double_t > &coefs, const std::vector< Double_t > &lincoefs);  ; Double_t EvalEvent (Double_t ofs, const std::vector< Double_t > &coefs, const std::vector< Double_t > &lincoefs) const;  ; Double_t EvalEvent (UInt_t evtidx) const;  ; Double_t EvalEvent (UInt_t evtidx, Double_t ofs, const std::vector< Double_t > &coefs, const std::vector< Double_t > &lincoefs) const;  ; Double_t EvalLinEvent () const;  ; Double_t EvalLinEvent (const Event &e);  ; Double_t EvalLinEvent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:1385,Clear,ClearCoefficients,1385,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,3,['Clear'],"['ClearCoefficients', 'ClearLinCoefficients', 'ClearLinNorm']"
Usability,"del::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGaussModel.html:3151,clear,clearEvalErrorLog,3151,root/html526/RooGaussModel.html,https://root.cern,https://root.cern/root/html526/RooGaussModel.html,3,['clear'],['clearEvalErrorLog']
Usability,"depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:68492,clear,clearShapeDirty,68492,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,6,['clear'],"['clearShapeDirty', 'clearValueAndShapeDirty', 'clearValueDirty']"
Usability,"der, ""muons.fPt"");; // Here, too we would need the definition of the Muon class.; TTreeReaderArray<Muon> raMuons(reader, ""muons"");. Accessing Data; The TTreeReader checks whether the type you specify is the type that's stored in the branch, i.e. whether it can actually access the data through the reader object. The TTreeReaderValue gets its values like so:; // Loop through all the TTree's entries; while (reader.Next()) {; // behaves like an iterator; float missingET = *rvMissingET;; ...; }. A TTreeReaderArray allows you to get the size and access the n-th element:; while (reader.Next()) {; for (int iMuon = 0, nMuons = raMuonPt.GetSize(); iMuon < nMuons; ++iMuon) {; hist->Fill(raMuonPt[iMuon]);; }; }. Of course in C++11 you could also just do; while (reader.Next()) {; for (float pT: raMuonPt) {; hist->Fill(pT);; }; }. We will try all of this out later; you are welcome to write a little script to test this on our TTree.; . ‹ 6. Multivariate Analysis; up; 8. Efficiency Calculation ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:4707,Guid,Guides,4707,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"der.cxx. ◆ ReplayStop(). void TRecorder::ReplayStop ; (; ). Cancels replaying. ; Definition at line 263 of file TRecorder.cxx. ◆ Resume(). void TRecorder::Resume ; (; ). Resumes replaying. ; Definition at line 255 of file TRecorder.cxx. ◆ Start(). void TRecorder::Start ; (; const char * ; filename, . Option_t * ; option = ""RECREATE"", . Window_t * ; w = nullptr, . Int_t ; winCount = 0 . ). Starts recording events. ; Definition at line 221 of file TRecorder.cxx. ◆ Stop(). void TRecorder::Stop ; (; Bool_t ; guiCommand = kFALSE). Stopps recording events. ; Definition at line 230 of file TRecorder.cxx. ◆ Streamer(). void TRecorder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TRecorder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 341 of file TRecorder.h. Friends And Related Symbol Documentation. ◆ TRecorderInactive. friend class TRecorderInactive. friend . Definition at line 275 of file TRecorder.h. ◆ TRecorderPaused. friend class TRecorderPaused. friend . Definition at line 276 of file TRecorder.h. ◆ TRecorderRecording. friend class TRecorderRecording. friend . Definition at line 277 of file TRecorder.h. ◆ TRecorderReplaying. friend class TRecorderReplaying. friend . Definition at line 278 of file TRecorder.h. ◆ TRecorderState. friend class TRecorderState. friend . Definition at line 274 of file TRecorder.h. Member Data Documentation. ◆ fFilename. TString TRecorder::fFilename. protected . Definition at line 280 of file TRecorder.h. ◆ fRecorderState. TRecorderState* TRecorder::fRecorderState. private . Definition at line 268 of file TRecorder.h. Libraries for TRecorder:. [legend]; The documentation for this class was generated from the following files:; gui/recorder/inc/TRecorder.h; gui/recorder/src/TRecorder.cxx. TRecorder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:19153,Guid,Guide,19153,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Guid'],['Guide']
Usability,"der.cxx:321; TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Reader::GetMVAErrorDouble_t GetMVAError() constDefinition Reader.h:94; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; double; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::gToolsTools & gTools(). tutorialstmvaTMVAClassificationApplication.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html:26565,Guid,Guide,26565,doc/master/TMVAClassificationApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html,1,['Guid'],['Guide']
Usability,"derTDataLoader ;  CTDataLoader< AData, TReference< AReal > >;  CTDeepNetGeneric Deep Neural Network class ;  CTDenseLayerGeneric layer class ;  CTDeviceTDevice ;  CTDLGradientDescent;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTReshapeLayer;  CTSharedLayerLayer class width shared weight and bias layers ;  CTTensorBatchTTensorBatch ;  CTTensorBatchIteratorTTensorBatchIterator ;  CTTensorDataLoaderTTensorDataLoader ;  CTTensorDataLoader< AData, TReference< AReal > >;  CVGeneralLayerGeneric General Layer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to pe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:79279,simpl,simple,79279,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['simpl'],['simple']
Usability,"derinline; GetView(DescriptorId_t fieldId, std::shared_ptr< T > objPtr)ROOT::Experimental::RNTupleReaderinline; GetView(DescriptorId_t fieldId, T *rawPtr)ROOT::Experimental::RNTupleReaderinline; InitPageSource(bool enableMetrics)ROOT::Experimental::RNTupleReaderprivate; LoadEntry(NTupleSize_t index)ROOT::Experimental::RNTupleReaderinline; LoadEntry(NTupleSize_t index, REntry &entry)ROOT::Experimental::RNTupleReaderinline; Open(std::string_view ntupleName, std::string_view storage, const RNTupleReadOptions &options=RNTupleReadOptions())ROOT::Experimental::RNTupleReaderstatic; Open(const RNTuple &ntuple, const RNTupleReadOptions &options=RNTupleReadOptions())ROOT::Experimental::RNTupleReaderstatic; Open(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleReadOptions &options=RNTupleReadOptions())ROOT::Experimental::RNTupleReaderstatic; Open(std::unique_ptr< RNTupleModel > model, const RNTuple &ntuple, const RNTupleReadOptions &options=RNTupleReadOptions())ROOT::Experimental::RNTupleReaderstatic; OpenFriends(std::span< RNTupleOpenSpec > ntuples, const RNTupleReadOptions &options=RNTupleReadOptions())ROOT::Experimental::RNTupleReaderstatic; PrintInfo(const ENTupleInfo what=ENTupleInfo::kSummary, std::ostream &output=std::cout) constROOT::Experimental::RNTupleReader; RetrieveFieldId(std::string_view fieldName) constROOT::Experimental::RNTupleReaderprivate; RNTupleReader(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSource > source, const RNTupleReadOptions &options)ROOT::Experimental::RNTupleReaderprivate; RNTupleReader(std::unique_ptr< Internal::RPageSource > source, const RNTupleReadOptions &options)ROOT::Experimental::RNTupleReaderexplicitprivate; Show(NTupleSize_t index, std::ostream &output=std::cout)ROOT::Experimental::RNTupleReader; ~RNTupleReader()ROOT::Experimental::RNTupleReader. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader-members.html:3765,Guid,Guide,3765,doc/master/classROOT_1_1Experimental_1_1RNTupleReader-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader-members.html,1,['Guid'],['Guide']
Usability,"derivativesDefinition GSLMultiRootFinder.h:115; ROOT::Math::GSLMultiRootFinder::kDNewton@ kDNewtonDefinition GSLMultiRootFinder.h:118; ROOT::Math::GSLMultiRootFinder::kHybrid@ kHybridDefinition GSLMultiRootFinder.h:117; ROOT::Math::GSLMultiRootFinder::kBroyden@ kBroydenDefinition GSLMultiRootFinder.h:119; ROOT::Math::GSLMultiRootFinder::kHybridS@ kHybridSDefinition GSLMultiRootFinder.h:116; ROOT::Math::GSLMultiRootFinder::GetTypestd::pair< bool, int > GetType(const char *name)Definition GSLMultiRootFinder.cxx:207; ROOT::Math::GSLMultiRootFinder::Nameconst char * Name() constReturn the algorithm name used for solving Note the name is available only after having called solved...Definition GSLMultiRootFinder.cxx:147; ROOT::Math::GSLMultiRootFinder::fStatusint fStatusDefinition GSLMultiRootFinder.h:277; ROOT::Math::GSLMultiRootFinder::PrintStatevoid PrintState(std::ostream &os=std::cout)print iteration stateDefinition GSLMultiRootFinder.cxx:321; ROOT::Math::GSLMultiRootFinder::ClearFunctionsvoid ClearFunctions()Definition GSLMultiRootFinder.cxx:118; ROOT::Math::GSLMultiRootFinder::fSolverGSLMultiRootBaseSolver * fSolverDefinition GSLMultiRootFinder.h:286; ROOT::Math::GSLMultiRootFinder::fIterint fIterDefinition GSLMultiRootFinder.h:276; ROOT::Math::GSLMultiRootFinder::EDerivTypeEDerivTypeenumeration specifying the types of GSL multi root finders requiring the derivativesDefinition GSLMultiRootFinder.h:104; ROOT::Math::GSLMultiRootFinder::kGNewton@ kGNewtonDefinition GSLMultiRootFinder.h:108; ROOT::Math::GSLMultiRootFinder::kHybridSJ@ kHybridSJDefinition GSLMultiRootFinder.h:105; ROOT::Math::GSLMultiRootFinder::kNewton@ kNewtonDefinition GSLMultiRootFinder.h:107; ROOT::Math::GSLMultiRootFinder::kHybridJ@ kHybridJDefinition GSLMultiRootFinder.h:106; ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinderGSLMultiRootFinder(EType type)create a multi-root finder based on an algorithm not requiring function derivativeDefinition GSLMultiRootFinder.cxx:67; ROOT::Math::GSLMultiRootFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:17159,Clear,ClearFunctionsvoid,17159,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,2,['Clear'],"['ClearFunctions', 'ClearFunctionsvoid']"
Usability,"derived; 2877 if(!dynamic_cast<RooAbsRealLValue*>(var)) {; 2878 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOn: cannot plot variable \""""; 2879 << var->GetName() << ""\"" of type "" << var->ClassName() << std::endl;; 2880 return true;; 2881 }; 2882 ; 2883 // check if we actually depend on the plot variable; 2884 if(!this->dependsOn(*var)) {; 2885 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOn: WARNING: variable is not an explicit dependent: ""; 2886 << var->GetName() << std::endl;; 2887 }; 2888 ; 2889 return false ;; 2890}; 2891 ; 2892 ; 2893 ; 2894 ; 2895////////////////////////////////////////////////////////////////////////////////; 2896/// Utility function for plotOn() that constructs the set of; 2897/// observables to project when plotting ourselves as function of; 2898/// 'plotVar'. 'allVars' is the list of variables that must be; 2899/// projected, but may contain variables that we do not depend on. If; 2900/// 'silent' is cleared, warnings about inconsistent input parameters; 2901/// will be printed.; 2902 ; 2903void RooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars,; 2904 RooArgSet& projectedVars, bool silent) const; 2905{; 2906 cxcoutD(Plotting) << ""RooAbsReal::makeProjectionSet("" << GetName() << "") plotVar = "" << plotVar->GetName(); 2907 << "" allVars = "" << (allVars?(*allVars):RooArgSet()) << std::endl ;; 2908 ; 2909 projectedVars.removeAll() ;; 2910 if (!allVars) return ;; 2911 ; 2912 // Start out with suggested list of variables; 2913 projectedVars.add(*allVars) ;; 2914 ; 2915 // Take out plot variable; 2916 RooAbsArg *found= projectedVars.find(plotVar->GetName());; 2917 if(found) {; 2918 projectedVars.remove(*found);; 2919 ; 2920 // Take out eventual servers of plotVar; 2921 std::unique_ptr<RooArgSet> plotServers{plotVar->getObservables(&projectedVars)};; 2922 for(RooAbsArg * ps : *plotServers) {; 2923 RooAbsArg* tmp = projectedVars.find(ps->GetName()) ;; 2924 if (tmp) {; 2925 cxcoutD(Plotting",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:126362,clear,cleared,126362,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['clear'],['cleared']
Usability,"des in x dimension of grid; int nodesy; // number of nodes in y dimension of grid; int count_reg; // width between contours, applies only for contours display mode; int alfa; // angles of display,alfa+beta must be less or equal to 90, alpha- angle; // between base line of Canvas and left lower edge of picture picture; // base plane; int beta; // angle between base line of Canvas and right lower edge of picture base plane; int view_angle; // rotation angle of the view, it can be 0, 90, 180, 270 degrees; int levels; // # of color levels for rainbowed display modes, it does not apply for; // simple display modes algorithm group; float rainbow1_step; // determines the first component step for neighboring color; // levels, applies only for rainbowed display modes, it does not apply; // for simple display modes algorithm group; float rainbow2_step; // determines the second component step for neighboring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; float rainbow3_step; // determines the third component step for neighboring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; int color_alg; // applies only for rainbowed display modes (rgb smooth algorithm,; // rgb modulo color component, cmy smooth algorithm, cmy modulo; // color component, cie smooth algorithm, cie modulo color component,; // yiq smooth algorithm, yiq modulo color component, hsv smooth; // algorithm, hsv modulo color component, it does not apply for simple; // display modes algorithm group [15]; float l_h_weight; // weight between shading according to fictive light source and; // according to channels counts, applies only for; // PICTURE2_MODE_GROUP_LIGHT_HEIGHT modes group; int xlight; // x position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int ylight; // y position of fictive light source, applies ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:73415,simpl,simple,73415,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['simpl'],['simple']
Usability,"des; Libraries. Function documentation; RooProfileLL(const char* name, const char* title, RooAbsReal& nll, const RooArgSet& observables); Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooProfileLL(const RooProfileLL& other, const char* name = 0); Copy constructor. ~RooProfileLL(); Destructor. const RooArgSet& bestFitParams() const. const RooArgSet& bestFitObs() const. RooAbsReal* createProfile(const RooArgSet& paramsOfInterest); Optimized implementation of createProfile for profile likelihoods.; Return profile of original function in terms of stated parameters; of interest rather than profiling recursively. Double_t evaluate() const; Evaluate profile likelihood by minimizing likelihood w.r.t. all; parameters that are not considered observables of this profile; likelihood object. void validateAbsMin() const; Check that parameters and likelihood value for 'best fit' are still valid. If not,; because the best fit has never been calculated, or because constant parameters have; changed value or parameters have changed const/float status, the minimum is recalculated. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). TObject* clone(const char* newname) const; { return new RooProfileLL(*this,newname); }. void setAlwaysStartFromMin(Bool_t flag); { _startFromMin = flag ; }. Bool_t alwaysStartFromMin() const; { return _startFromMin ; }. RooMinuit* minuit(); { return _minuit ; }. RooAbsReal& nll(); { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void clearAbsMin(); { _absMinValid = kFALSE ; }. » Last changed: Tue Dec 8 17:03:18 2009 » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:35198,clear,clearAbsMin,35198,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,1,['clear'],['clearAbsMin']
Usability,"description = nullptr . ). pure virtual . ◆ AddToSet(). void TGridJDL::AddToSet ; (; const char * ; key, . const char * ; value . ). Adds a value to a key value which hosts a set of values. ; E.g. InputSandbox: {""file1"",""file2""} ; Definition at line 172 of file TGridJDL.cxx. ◆ AddToSetDescription(). void TGridJDL::AddToSetDescription ; (; const char * ; key, . const char * ; description . ). Adds a value to a key value which hosts a set of values. ; E.g. InputSandbox: {""file1"",""file2""} ; Definition at line 195 of file TGridJDL.cxx. ◆ Class(). static TClass * TGridJDL::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGridJDL::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGridJDL::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 75 of file TGridJDL.h. ◆ Clear(). void TGridJDL::Clear ; (; const Option_t * ; = """"). override . Clears the JDL information. ; Definition at line 42 of file TGridJDL.cxx. ◆ DeclFileName(). static const char * TGridJDL::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 75 of file TGridJDL.h. ◆ Generate(). TString TGridJDL::Generate ; (; ). virtual . Generates the JDL snippet. ; Definition at line 208 of file TGridJDL.cxx. ◆ GetDescription(). const char * TGridJDL::GetDescription ; (; const char * ; key). Returns the value corresponding to the provided key. ; Return 0 in case key is not found. ; Definition at line 131 of file TGridJDL.cxx. ◆ GetValue(). const char * TGridJDL::GetValue ; (; const char * ; key). Returns the value corresponding to the provided key. ; Return 0 in case key is not found. ; Definition at line 77 of file TGridJDL.cxx. ◆ IsA(). TClass * TGridJDL::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 75 of file TGridJDL.h. ◆ SetArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJDL.html:15515,Clear,Clears,15515,doc/master/classTGridJDL.html,https://root.cern,https://root.cern/doc/master/classTGridJDL.html,1,['Clear'],['Clears']
Usability,"devalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:19844,Clear,ClearFileBusy,19844,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,2,['Clear'],['ClearFileBusy']
Usability,"devirtual . Return an array of n random numbers uniformly distributed in ]0,1]. ; Reimplemented from TRandom.; Definition at line 94 of file TRandom2.cxx. ◆ RndmArray() [2/2]. void TRandom2::RndmArray ; (; Int_t ; n, . Float_t * ; array . ). overridevirtual . Return an array of n random numbers uniformly distributed in ]0,1]. ; Reimplemented from TRandom.; Definition at line 74 of file TRandom2.cxx. ◆ SetSeed(). void TRandom2::SetSeed ; (; ULong_t ; seed = 0). overridevirtual . Set the generator seed. ; If the seed given is zero, generate automatically seed values which are different every time by using TUUID. If a seed is given generate the other two needed for the generator state using a linear congruential generator The only condition, stated at the end of the 1999 L'Ecuyer paper is that the seeds must be greater than 1,7 and 15. Note that after setting the seed the generator is warmed up by calling it internally few times therefore the returned seed in TRandom2::GetSeed will be a different value. For this generator the user will have to store the provided seed externally if he wants to reproduce the random sequence ; Reimplemented from TRandom.; Definition at line 122 of file TRandom2.cxx. ◆ Streamer(). void TRandom2::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TRandom. ◆ StreamerNVirtual(). void TRandom2::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 43 of file TRandom2.h. Member Data Documentation. ◆ fSeed1. UInt_t TRandom2::fSeed1. protected . Definition at line 30 of file TRandom2.h. ◆ fSeed2. UInt_t TRandom2::fSeed2. protected . Definition at line 31 of file TRandom2.h. Libraries for TRandom2:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/TRandom2.h; math/mathcore/src/TRandom2.cxx. TRandom2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom2.html:19985,Guid,Guide,19985,doc/master/classTRandom2.html,https://root.cern,https://root.cern/doc/master/classTRandom2.html,1,['Guid'],['Guide']
Usability,devirtual . Return current estimate of the position of the minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 129 of file GSLMinimizer1D.cxx. ◆ XUpper(). double ROOT::Math::GSLMinimizer1D::XUpper ; (; ); const. overridevirtual . Return current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 139 of file GSLMinimizer1D.cxx. Member Data Documentation. ◆ fFunction. GSLFunctionWrapper* ROOT::Math::GSLMinimizer1D::fFunction. private . Definition at line 214 of file GSLMinimizer1D.h. ◆ fIsSet. bool ROOT::Math::GSLMinimizer1D::fIsSet. private . Definition at line 210 of file GSLMinimizer1D.h. ◆ fIter. int ROOT::Math::GSLMinimizer1D::fIter. private . Definition at line 208 of file GSLMinimizer1D.h. ◆ fLow. double ROOT::Math::GSLMinimizer1D::fLow. private . Definition at line 206 of file GSLMinimizer1D.h. ◆ fMin. double ROOT::Math::GSLMinimizer1D::fMin. private . Definition at line 205 of file GSLMinimizer1D.h. ◆ fMinimizer. GSL1DMinimizerWrapper* ROOT::Math::GSLMinimizer1D::fMinimizer. private . Definition at line 213 of file GSLMinimizer1D.h. ◆ fStatus. int ROOT::Math::GSLMinimizer1D::fStatus. private . Definition at line 209 of file GSLMinimizer1D.h. ◆ fUp. double ROOT::Math::GSLMinimizer1D::fUp. private . Definition at line 207 of file GSLMinimizer1D.h. ◆ fXlow. double ROOT::Math::GSLMinimizer1D::fXlow. private . Definition at line 203 of file GSLMinimizer1D.h. ◆ fXmin. double ROOT::Math::GSLMinimizer1D::fXmin. private . Definition at line 202 of file GSLMinimizer1D.h. ◆ fXup. double ROOT::Math::GSLMinimizer1D::fXup. private . Definition at line 204 of file GSLMinimizer1D.h. Libraries for ROOT::Math::GSLMinimizer1D:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLMinimizer1D.h; math/mathmore/src/GSLMinimizer1D.cxx. ROOTMathGSLMinimizer1D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:10655,Guid,Guide,10655,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,1,['Guid'],['Guide']
Usability,devirtual . Returns \(1 - CL_{b}\) : the B p-value. ; Reimplemented from RooStats::HypoTestResult.; Definition at line 117 of file HybridResult.cxx. ◆ PrintMore(). void HybridResult::PrintMore ; (; const char * ; options). Print out some information about the results. ; Definition at line 282 of file HybridResult.cxx. ◆ SetDataTestStatistics(). void HybridResult::SetDataTestStatistics ; (; double ; testStat_data_val). set the value of the test statistics on data ; Definition at line 106 of file HybridResult.cxx. ◆ Streamer(). void RooStats::HybridResult::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::HybridResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 88 of file HybridResult.h. Member Data Documentation. ◆ fComputationsAltDoneFlag. bool RooStats::HybridResult::fComputationsAltDoneFlag. mutableprivate . Definition at line 83 of file HybridResult.h. ◆ fComputationsNulDoneFlag. bool RooStats::HybridResult::fComputationsNulDoneFlag. mutableprivate . Definition at line 82 of file HybridResult.h. ◆ fSumLargerValues. bool RooStats::HybridResult::fSumLargerValues. private . Definition at line 84 of file HybridResult.h. ◆ fTestStat_b. std::vector<double> RooStats::HybridResult::fTestStat_b. private . Definition at line 78 of file HybridResult.h. ◆ fTestStat_data. double RooStats::HybridResult::fTestStat_data. private . Definition at line 80 of file HybridResult.h. ◆ fTestStat_sb. std::vector<double> RooStats::HybridResult::fTestStat_sb. private . Definition at line 79 of file HybridResult.h. Libraries for RooStats::HybridResult:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HybridResult.h; roofit/roostats/src/HybridResult.cxx. RooStatsHybridResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:23909,Guid,Guide,23909,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,1,['Guid'],['Guide']
Usability,"devirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 48 of file RooEfficiency.h. ◆ Streamer(). void RooEfficiency::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooEfficiency::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file RooEfficiency.h. ◆ translate(). void RooEfficiency::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 90 of file RooEfficiency.cxx. Member Data Documentation. ◆ _cat. RooCategoryProxy RooEfficiency::_cat. protected . Accept/reject categort. ; Definition at line 44 of file RooEfficiency.h. ◆ _effFunc. RooRealProxy RooEfficiency::_effFunc. protected . Efficiency modeling function. ; Definition at line 45 of file RooEfficiency.h. ◆ _sigCatName. TString RooEfficiency::_sigCatName. protected . Name of accept state of accept/reject category. ; Definition at line 46 of file RooEfficiency.h. Libraries for RooEfficiency:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooEfficiency.h; roofit/roofitcore/src/RooEfficiency.cxx. RooEfficiency. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:79710,Guid,Guide,79710,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,1,['Guid'],['Guide']
Usability,devirtual . Set the line width for all components. ; Reimplemented from TGeoVolume.; Definition at line 2823 of file TGeoVolume.cxx. ◆ SetMedium(). void TGeoVolumeMulti::SetMedium ; (; TGeoMedium * ; medium). overridevirtual . Set medium for a multiple volume. ; Reimplemented from TGeoVolume.; Definition at line 2837 of file TGeoVolume.cxx. ◆ SetVisibility(). void TGeoVolumeMulti::SetVisibility ; (; Bool_t ; vis = kTRUE). overridevirtual . Set visibility for all components. ; Reimplemented from TGeoVolume.; Definition at line 2851 of file TGeoVolume.cxx. ◆ Streamer(). void TGeoVolumeMulti::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TGeoVolume. ; Reimplemented from TGeoVolume. ◆ StreamerNVirtual(). void TGeoVolumeMulti::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 306 of file TGeoVolume.h. Member Data Documentation. ◆ fAttSet. Bool_t TGeoVolumeMulti::fAttSet. private . Definition at line 275 of file TGeoVolume.h. ◆ fAxis. Int_t TGeoVolumeMulti::fAxis. private . Definition at line 272 of file TGeoVolume.h. ◆ fDivision. TGeoVolumeMulti* TGeoVolumeMulti::fDivision. private . Definition at line 269 of file TGeoVolume.h. ◆ fNdiv. Int_t TGeoVolumeMulti::fNdiv. private . Definition at line 271 of file TGeoVolume.h. ◆ fNumed. Int_t TGeoVolumeMulti::fNumed. private . Definition at line 270 of file TGeoVolume.h. ◆ fStart. Double_t TGeoVolumeMulti::fStart. private . Definition at line 273 of file TGeoVolume.h. ◆ fStep. Double_t TGeoVolumeMulti::fStep. private . Definition at line 274 of file TGeoVolume.h. ◆ fVolumes. TObjArray* TGeoVolumeMulti::fVolumes. private . Definition at line 268 of file TGeoVolume.h. Libraries for TGeoVolumeMulti:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoVolume.h; geom/geom/src/TGeoVolume.cxx. TGeoVolumeMulti. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeMulti.html:44855,Guid,Guide,44855,doc/master/classTGeoVolumeMulti.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeMulti.html,1,['Guid'],['Guide']
Usability,"devirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCondition::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TCondition.h. ◆ TimedWait(). Int_t TCondition::TimedWait ; (; ULong_t ; secs, . ULong_t ; nanoSec . ). Wait to be signaled or till the timer times out. ; This method is given an absolute time since the beginning of the EPOCH (use TThread::GetTime() to get this absolute time). To wait for a relative time from now, use TCondition::TimedWaitRelative(ULong_t ms). Returns 0 if successfully signalled, 1 if time expired and -1 in case of error. ; Definition at line 95 of file TCondition.cxx. ◆ TimedWaitRelative(). Int_t TCondition::TimedWaitRelative ; (; ULong_t ; ms). Wait to be signaled or till the timer times out. ; This method is given a relative time from now. To wait for an absolute time since the beginning of the EPOCH, use TCondition::TimedWait(ULong_t secs, ULong_t nanoSec). Returns 0 if successfully signalled, 1 if time expired and -1 in case of error. ; Definition at line 114 of file TCondition.cxx. ◆ Wait(). Int_t TCondition::Wait ; (; ). Wait to be signaled. ; Definition at line 75 of file TCondition.cxx. Friends And Related Symbol Documentation. ◆ TThread. friend class TThread. friend . Definition at line 34 of file TCondition.h. Member Data Documentation. ◆ fConditionImp. TConditionImp* TCondition::fConditionImp. private . Definition at line 37 of file TCondition.h. ◆ fMutex. TMutex* TCondition::fMutex. private . Definition at line 38 of file TCondition.h. ◆ fPrivateMutex. Bool_t TCondition::fPrivateMutex. private . Definition at line 39 of file TCondition.h. Libraries for TCondition:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/TCondition.h; core/thread/src/TCondition.cxx. TCondition. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondition.html:14645,Guid,Guide,14645,doc/master/classTCondition.html,https://root.cern,https://root.cern/doc/master/classTCondition.html,1,['Guid'],['Guide']
Usability,"dex got using GetSubTreeIndex. ; If the index was created by this object it is removed from the current tree, so that it isn't deleted in its destructor. ; Definition at line 269 of file TChainIndex.cxx. ◆ SetTree(). void TChainIndex::SetTree ; (; TTree * ; T). overridevirtual . See TTreeIndex::SetTree. ; Implements TVirtualIndex.; Definition at line 424 of file TChainIndex.cxx. ◆ Streamer(). void TChainIndex::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TChainIndex::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TChainIndex.h. ◆ UpdateFormulaLeaves(). void TChainIndex::UpdateFormulaLeaves ; (; const TTree * ; parent). overridevirtual . Updates the parent formulae. ; Called by TChain::LoadTree when the parent chain changes it's tree. ; Implements TVirtualIndex.; Definition at line 406 of file TChainIndex.cxx. Member Data Documentation. ◆ fEntries. std::vector<TChainIndexEntry> TChainIndex::fEntries. protected . Pointer to minor TreeFormula in Parent tree (if any) ; Definition at line 75 of file TChainIndex.h. ◆ fMajorFormulaParent. TTreeFormula* TChainIndex::fMajorFormulaParent. protected . Definition at line 73 of file TChainIndex.h. ◆ fMajorName. TString TChainIndex::fMajorName. protected . Definition at line 71 of file TChainIndex.h. ◆ fMinorFormulaParent. TTreeFormula* TChainIndex::fMinorFormulaParent. protected . Pointer to major TreeFormula in Parent tree (if any) ; Definition at line 74 of file TChainIndex.h. ◆ fMinorName. TString TChainIndex::fMinorName. protected . Definition at line 72 of file TChainIndex.h. Libraries for TChainIndex:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TChainIndex.h; tree/treeplayer/src/TChainIndex.cxx. TChainIndex. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChainIndex.html:21780,Guid,Guide,21780,doc/master/classTChainIndex.html,https://root.cern,https://root.cern/doc/master/classTChainIndex.html,1,['Guid'],['Guide']
Usability,"dex of the last filled point; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTPolyMarker3D::fNNumber of allocated points; TStringTPolyMarker3D::fNameName of polymarker; TStringTPolyMarker3D::fOptionOptions; Bool_tfOwnIdsFlag specifying id-objects are owned by the point-set; Float_t*TPolyMarker3D::fP[3*fN] Array of X,Y,Z coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPointSet3D(const TPointSet3D& t); Copy constructor. ~TPointSet3D(); Destructor. void CopyIds(const TPointSet3D& t); Copy id objects from point-set 't'. TPointSet3D& operator=(const TPointSet3D& t); Assignement operator. void ComputeBBox(); Compute the bounding box of this points set. void SetPointId(TObject* id); Set id of last point.; Use this method if you also use TPolyMarker3D::SetNextPoint(). void SetPointId(Int_t n, TObject* id); Set id of point n. void ClearIds(); Clears the id-array. If ids are owned the TObjects are deleted. void PointSelected(Int_t n); This virtual method is called from TPointSet3DGL when a point is; selected.; At this point it just prints out n and id of the point (if it exists).; To make something useful out of this do:; a) subclass and re-implement this method;; b) extend this class to include TExec or some other kind of callback. void Streamer(TBuffer& ); Stream an object of class TPointSet3D. TPointSet3D(); { fName=""TPointSet3D""; }. TPointSet3D(Int_t n, Marker_t m = 1, Option_t* opt = """"); { fName=""TPointSet3D""; }. TPointSet3D(Int_t n, Float_t* p, Marker_t m = 1, Option_t* opt = """"); { fName=""TPointSet3D""; }. TPointSet3D(Int_t n, Double_t* p, Marker_t m = 1, Option_t* opt = """"); { fName=""TPointSet3D""; }. TObject* GetPointId(Int_t n) const; { return fIds.At(n); }. Bool_t GetOwnIds() const; { return fOwnIds; }. void SetOwnIds(Bool_t o); { fOwnIds = o; }. » Author: Matevz Tadel 7/4/2006 » Copyright (C) 1995-2006, Rene Brun a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPointSet3D.html:9662,Clear,ClearIds,9662,root/html534/TPointSet3D.html,https://root.cern,https://root.cern/root/html534/TPointSet3D.html,6,['Clear'],"['ClearIds', 'Clears']"
Usability,"dexDefinition FitResult.h:174; ROOT::Fit::FitResult::Statusint Status() constminimizer status codeDefinition FitResult.h:128; ROOT::Fit::FitResult::fParNamesstd::vector< std::string > fParNamesparameter names (only with FCN only fits, when fFitFunc=0)Definition FitResult.h:366; ROOT::Fit::FitResult::fMinosErrorsstd::map< unsigned int, std::pair< double, double > > fMinosErrorsmap contains the two Minos errorsDefinition FitResult.h:364; ROOT::Fit::FitResult::SetChi2AndNdfvoid SetChi2AndNdf(double chi2, unsigned int npoints)Set the chi2 and the ndf This function should be called when using an external FCN for fitting and on...Definition FitResult.cxx:311; ROOT::Fit::FitResult::FittedFunctionconst IModelFunction * FittedFunction() constfitting quantitiesDefinition FitResult.h:139; ROOT::Fit::FitResult::GlobalCCdouble GlobalCC(unsigned int i) constparameter global correlation coefficientDefinition FitResult.h:209; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IParametricFunctionMultiDimTempl< double >; TMatrixT< Double_t >; RooFit::MinimizerRooCmdArg Minimizer(const char *type, const char *alg=nullptr)Definition RooGlobalFunc.cxx:751; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Internal::UpdateDefinition TBranchProxyDirector.cxx:42. mathmathcoreincFitFitResult.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8h_source.html:28628,Guid,Guide,28628,doc/master/FitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html,1,['Guid'],['Guide']
Usability,"df->plotOn(frame);; ; // Draw plot on canvas; new TCanvas(""rf110_normintegration"", ""rf110_normintegration"", 600, 600);; gPad->SetLeftMargin(0.15);; frame->GetYaxis()->SetTitleOffset(1.6);; frame->Draw();; }; RooAbsReal.h; RooGaussian.h; RooPlot.h; RooRealVar.h; TAxis.h; TCanvas.h; gPad#define gPadDefinition TVirtualPad.h:308; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf110_normintegrationDefinition rf110_normintegration.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; RangeTa Range(0, 0, 1, 1); ; gx = 0.800737; gx_Norm[x] = 0.106896; gx_Int[x] = 7.49084; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'signal' created with bounds [-5,5]; gx_Int[x|signal]_Norm[x] = 0.834753; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf110_normintegration.C. tutorialsroofitrf110_normintegration.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf110__normintegration_8C.html:4296,Guid,Guide,4296,doc/master/rf110__normintegration_8C.html,https://root.cern,https://root.cern/doc/master/rf110__normintegration_8C.html,1,['Guid'],['Guide']
Usability,"df. ROOT::Math::VavilovAccurateQuantile. ROOT::Math::VavilovFast. ROOT::Math::VirtualIntegratorMultiDim←. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::GSLMCIntegrator. ROOT::Math::VirtualIntegratorOneDim←. ROOT::Math::GSLIntegrator. ROOT::Math::GaussIntegrator; ←. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::WrappedMultiTF1. ROOT::Math::WrappedTF1. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FCNBase←. ROOT::Minuit2::FCNGradientBase. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FCNGradientBase. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::Minuit2Minimizer. ROOT::Minuit2::MnFumiliMinimize. ROOT::Minuit2::MnMigrad. ROOT::Minuit2::MnMinimize. ROOT::Minuit2::MnScan. ROOT::Minuit2::MnSimplex. ROOT::Minuit2::ModularFunctionMinimizer←. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> >. ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> >. ROOT::TArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<double,0> >. ROOT::TArrayProxy<ROOT::TArrayType<float,0> >. ROOT::TArrayProxy<ROOT::TArrayType<int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<short,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> >. ROOT::TBranchProxyClassDescriptor. ROOT::TBranchProxyDescriptor. ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<ULong64_t,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TClaArrayProxy<ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassHierarchy.html:5025,Simpl,SimplexMinimizer,5025,root/html602/ClassHierarchy.html,https://root.cern,https://root.cern/root/html602/ClassHierarchy.html,2,['Simpl'],['SimplexMinimizer']
Usability,"df2;; ; r<<""df2<-data.frame(v1=c(0.1,0.2,0.3),v2=c(3,2,1))"";; r[""df2""]>>df2;; ; TVectorD v(3);; df2[""v1""]>>v;; v.Print();; ; df2[""v2""]>>v;; v.Print();; ROOT::R::TRDataFrame::Printvoid Print(const Char_t *label="""")Method to print the dataframe in stdout or a column given the label.Definition TRDataFrame.h:427; v@ vDefinition rootcling_impl.cxx:3699; Output Vector (3) is as follows; ; | 1 |; ------------------; 0 |0.1; 1 |0.2; 2 |0.3; ; Vector (3) is as follows; ; | 1 |; ------------------; 0 |3; 1 |2; 2 |1; Working with colunms between dataframes. df2[""v3""]<<df1[""strings""];; ; //updating df2 in R's environment; r[""df2""]<<df2;; r<<""print(df2)"";; Output v1 v2 v3; 1 0.1 3 v1; 2 0.2 2 v2; 3 0.3 1 v3; Working with colunms between dataframes. //passing values from colunm v3 of df2 to var1 of df1; df2[""v3""]>>df1[""var1""];; //updating df1 in R's environment; r[""df1""]<<df1;; r<<""print(df1)"";; Output var1 var2 var3 strings var4; 1 v1 0.101 1 v1 -1; 2 v2 0.202 2 v2 -2; 3 v3 0.303 3 v3 -3; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 176 of file TRDataFrame.h. Classes; class  Binding;  . Public Member Functions;  TRDataFrame ();  Default TDataFrame constructor. ;  ;  TRDataFrame (const Rcpp::DataFrame &_df);  TDataFrame constructor for Rcpp::DataFrame. ;  ;  TRDataFrame (const TRDataFrame &_df);  TDataFrame copy constructor. ;  ;  TRDataFrame (SEXP obj);  TDataFrame constructor. ;  ; template<class T > ; TMatrixT< T > AsMatrix ();  Method to get dataframe as matrix. ;  ; TVectorString GetColNames ();  Method to get labels of dataframe. ;  ; Int_t GetNcols ();  Method to get the number of columns. ;  ; Int_t GetNrows ();  Method to get the number of rows. ;  ; virtual TClass * IsA () const;  ;  operator SEXP ();  ;  operator SEXP () const;  ; TRDataFrame & operator= (SEXP obj);  ; TRDataFrame & operator= (TRDataFrame &obj);  ; TRDataFrame & operator= (TRDataFrame obj);  ; Binding operator[] (const TString &name);  ; void Print (const Char_t *labe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:4031,Guid,Guide,4031,doc/master/classROOT_1_1R_1_1TRDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html,1,['Guid'],['Guide']
Usability,"dget() [1/2]. TGLWidget::TGLWidget ; (; const TGLWidget & ; ). privatedelete . ◆ TGLWidget() [2/2]. TGLWidget::TGLWidget ; (; Window_t ; glw, . const TGWindow * ; parent, . Bool_t ; selectInput . ). protected . Creates widget with default pixel format. ; Definition at line 140 of file TGLWidget.cxx. Member Function Documentation. ◆ AddContext(). void TGLWidget::AddContext ; (; TGLContext * ; ctx). overrideprotectedvirtual . Register gl-context created for this window. ; Implements TGLPaintDevice.; Definition at line 249 of file TGLWidget.cxx. ◆ Class(). static TClass * TGLWidget::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLWidget::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLWidget::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 104 of file TGLWidget.h. ◆ ClearCurrent(). Bool_t TGLWidget::ClearCurrent ; (; ). Clear the current gl-context. ; Definition at line 209 of file TGLWidget.cxx. ◆ Create() [1/2]. TGLWidget * TGLWidget::Create ; (; const TGLFormat & ; format, . const TGWindow * ; parent, . Bool_t ; selectInput, . Bool_t ; shareDefault, . const TGLPaintDevice * ; shareDevice, . UInt_t ; width, . UInt_t ; height . ). static . Static constructor for creating widget with given pixel format. ; Definition at line 96 of file TGLWidget.cxx. ◆ Create() [2/2]. TGLWidget * TGLWidget::Create ; (; const TGWindow * ; parent, . Bool_t ; selectInput, . Bool_t ; shareDefault, . const TGLPaintDevice * ; shareDevice, . UInt_t ; width, . UInt_t ; height . ). static . Static constructor for creating widget with default pixel format. ; Definition at line 83 of file TGLWidget.cxx. ◆ CreateDummy(). TGLWidget * TGLWidget::CreateDummy ; (; ). static . Static constructor for creating widget with default pixel format. ; Definition at line 73 of file TGLWidget.cxx. ◆ CreateWindow(). Window_t TGLWidget::CreateWindow ; (; const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLWidget.html:32537,Clear,Clear,32537,doc/master/classTGLWidget.html,https://root.cern,https://root.cern/doc/master/classTGLWidget.html,1,['Clear'],['Clear']
Usability,"dgets, like TGTextEntry,; TGFileDialog, etc. It is a little wrapper around the powerful; TString class and used for single line texts. For multi line texts; use TGText. Function Members (Methods); public:. virtual~TGTextBuffer(); voidAddText(Int_t pos, const char* text); voidAddText(Int_t pos, const char* text, Int_t length); static TClass*Class(); voidClear(); UInt_tGetBufferLength() const; const char*GetString() const; UInt_tGetTextLength() const; virtual TClass*IsA() const; voidRemoveText(Int_t pos, Int_t length); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGTextBuffer(); TGTextBuffer(Int_t length). protected:. TGTextBuffer&operator=(const TGTextBuffer& tb); TGTextBuffer(const TGTextBuffer& tb). Data Members; private:. TString*fBuffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextBuffer(const TGTextBuffer& tb); { }. TGTextBuffer& operator=(const TGTextBuffer& tb); {if(this!=&tb) fBuffer=tb.fBuffer; return *this;}. TGTextBuffer(); { }. TGTextBuffer(Int_t length); { }. virtual ~TGTextBuffer(); { delete fBuffer; }. UInt_t GetTextLength() const; { return fBuffer->Length(); }. UInt_t GetBufferLength() const; { return fBuffer->Capacity(); }. const char * GetString() const; { return fBuffer->Data(); }. void AddText(Int_t pos, const char* text); { fBuffer->Insert(pos, text); }. void AddText(Int_t pos, const char* text, Int_t length); { fBuffer->Insert(pos, text, length); }. void RemoveText(Int_t pos, Int_t length); { fBuffer->Remove(pos, length); }. void Clear(); { fBuffer->Remove(0, fBuffer->Length()); }. » Author: Fons Rademakers 05/05/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 13:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextBuffer.html:1958,Clear,Clear,1958,root/html602/TGTextBuffer.html,https://root.cern,https://root.cern/root/html602/TGTextBuffer.html,1,['Clear'],['Clear']
Usability,"dgets, like TGTextEntry,; TGFileDialog, etc. It is a little wrapper around the powerful; TString class and used for single line texts. For multi line texts; use TGText. Function Members (Methods); public:. virtual~TGTextBuffer(); voidAddText(Int_t pos, const char* text); voidAddText(Int_t pos, const char* text, Int_t length); static TClass*Class(); voidClear(); UInt_tGetBufferLength() const; const char*GetString() const; UInt_tGetTextLength() const; virtual TClass*IsA() const; voidRemoveText(Int_t pos, Int_t length); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGTextBuffer(); TGTextBuffer(Int_t length). protected:. TGTextBuffer&operator=(const TGTextBuffer& tb); TGTextBuffer(const TGTextBuffer& tb). Data Members; private:. TString*fBuffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextBuffer(const TGTextBuffer& tb); { }. TGTextBuffer& operator=(const TGTextBuffer& tb); {if(this!=&tb) fBuffer=tb.fBuffer; return *this;}. TGTextBuffer(); { }. TGTextBuffer(Int_t length); { }. virtual ~TGTextBuffer(); { delete fBuffer; }. UInt_t GetTextLength() const; { return fBuffer->Length(); }. UInt_t GetBufferLength() const; { return fBuffer->Capacity(); }. const char * GetString() const; { return fBuffer->Data(); }. void AddText(Int_t pos, const char* text); { fBuffer->Insert(pos, text); }. void AddText(Int_t pos, const char* text, Int_t length); { fBuffer->Insert(pos, text, length); }. void RemoveText(Int_t pos, Int_t length); { fBuffer->Remove(pos, length); }. void Clear(); { fBuffer->Remove(0, fBuffer->Length()); }. » Author: Fons Rademakers 05/05/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextBuffer.html:1958,Clear,Clear,1958,root/html604/TGTextBuffer.html,https://root.cern,https://root.cern/root/html604/TGTextBuffer.html,1,['Clear'],['Clear']
Usability,"dient: public TColorGradient. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. virtual~TLinearGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearGradient.html:1135,Clear,Clear,1135,root/html602/TLinearGradient.html,https://root.cern,https://root.cern/root/html602/TLinearGradient.html,2,['Clear'],['Clear']
Usability,"dient: public TColorGradient. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. virtual~TRadialGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRadialGradient.html:1159,Clear,Clear,1159,root/html602/TRadialGradient.html,https://root.cern,https://root.cern/root/html602/TRadialGradient.html,2,['Clear'],['Clear']
Usability,"dients ();  ; const std::vector< Matrix_t > & GetWeightGradients () const;  ; Matrix_t & GetWeightGradientsAt (size_t i);  ; const Matrix_t & GetWeightGradientsAt (size_t i) const;  ; std::vector< Matrix_t > & GetWeights ();  ; const std::vector< Matrix_t > & GetWeights () const;  ; Matrix_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; virtual void Initialize ();  Initialize the weights and biases according to the given initialization method. ;  ; bool IsTraining () const;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; virtual void ResetTraining ();  Reset some training flags after a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html:6571,learn,learningRate,6571,doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"ding of operator[]. Objects can be directly accessed via an index. The array expands automatically when objects are added. At creation time one specifies the default array size (default = 16) and lower bound (default = 0). Resizing involves a re-allocation and a copy of the old array to the new. This can be costly if done too often. If possible, set initial size close to expected final size. Index validity is always checked (if you are 100% sure and maximum performance is needed you can use UnCheckedAt() instead of At() or operator[]). If the stored objects are sort able the array can be sorted using Sort(). Once sorted, efficient searching is possible via the BinarySearch() method. The figure shows the internal data structure of a TObjArray:. The internal data structure of a TObjArray. Iterating can be done using a TIter iterator or via a simple for loop:; for (int i = 0; i <= fArr.GetLast(); i++); if ((track = (TTrack*)fArr[i])) // or fArr.At(i); track->Draw();; Main features of TObjArray are simple, well-known array semantics. Overhead per element: none, except possible over sizing of fCont.; 16.8 TClonesArray An Array of Identical Objects; A TClonesArray is an array of identical (clone) objects. The memory for the objects stored in the array is allocated only once in the lifetime of the clones array. All objects must be of the same class. For the rest this class has the same properties as a TObjArray. The internal data structure of a TClonesArray. The figure above shows the internal data structure of a TClonesArray. The class is specially designed for repetitive data analysis tasks, where in a loop many times the same objects, are created and deleted. The only supported way to add objects to a TClonesArray is via the new with placement method. The different Add() methods of TObjArray and its base classes are not supported.; 16.8.1 The Idea Behind TClonesArray; To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:853672,simpl,simple,853672,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"directly selected PDF components: (p_h_sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model0) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model0) directly selected PDF components: (p_h_bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model0) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 50 will supersede previous event count of 1050 for normalization of PDF projections; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model1) directly selected PDF components: (p_ph_sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model1) indirectly selected PDF components: (sp_ph); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model1) directly selected PDF components: (p_ph_bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model1) indirectly selected PDF components: (sp_ph); [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 50 will supersede previous event count of 1050 for normalization of PDF projections; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model2) directly selected PDF components: (p_ph_sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model2) indirectly selected PDF components: (sp_ph); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model2) directly selected PDF components: (p_ph_bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model2) indirectly selected PDF components: (sp_ph); [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 50 will supersede previous event count of 1050 for normalization of PDF projections; Asig [normal ] = 0.8337778709310433 +/- 0.1898141852388937; Asig [BB ] = 0.8503293171898778 +/- 0.23578281150991715; Asig [BBlight] = 0.8344736023864808 +/- 0.20295518710344612; Based on a demo by Wouter Verkerke DateJune 2021 ; AuthorHarshal Shende, Stephan Hageboeck (C++ version) ; Definition in file rf709_BarlowBeeston.py. tutorialsroofitrf709_BarlowBeeston.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html:38779,Guid,Guide,38779,doc/master/rf709__BarlowBeeston_8py.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html,1,['Guid'],['Guide']
Usability,"directories. For example to delete a directory from a file, you must specify the directory cycle:; root[] f->Delete(""Wed011003;1""); Some other examples of namecycle format are:. foo:delete the object named foo from memory; foo;1: delete the cycle 1 of the object named foo from the file; foo;*: delete all cycles of foo from the file and also from memory; *;2: delete all objects with cycle number 2 from the file; *;*: delete all objects from memory and from the file; T*;*: delete all objects from memory and from the file including all subdirectories. 11.3 Streamers; To follow the discussion on Streamers, you need to know what a simple data type is. A variable is of a simple data type if it cannot be decomposed into other types. Examples of simple data types are longs, shorts, floats, and chars. In contrast, a variable is of a composite data type if it can be decomposed. For example, classes, structures, and arrays are composite types. Simple types are also called primitive types, basic types, and Cling sometimes calls them fundamental types.; When we say, “writing an object to a file”, we actually mean writing the current values of the data members. The most common way to do this is to decompose (also called the serialization of) the object into its data members and write them to disk. The decomposition is the job of the Streamer. Every class with ambitions to be stored in a file has a Streamerthat decomposes it and “streams” its members into a buffer.; The methods of the class are not written to the file, it contains only the persistent data members. To decompose the parent classes, the Streamercalls the Streamerof the parent classes. It moves up the inheritance tree until it reaches an ancestor without a parent. To serialize the object data members it calls their Streamer. They in turn move up their own inheritance tree and so forth. The simple data members are written to the buffer directly. Eventually the buffer contains all simple data members of all the classes t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:465842,Simpl,Simple,465842,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"directory)=deleteTDirectoryprotected; TDirectory()TDirectory; TDirectory(const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr)TDirectory; TDirectoryFile(const TDirectoryFile &directory)=deleteTDirectoryFileprivate; TDirectoryFile()TDirectoryFile; TDirectoryFile(const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr)TDirectoryFile; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UnregisterContext(TContext *ctxt)TDirectoryprotected; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) overrideTDirectoryFilevirtual; Write(const char *name=nullptr, Int_t opt=0, Int_t bufsize=0) const overrideTDirectoryFilevirtual; WriteDirHeader() overrideTDirectoryFilevirtual; WriteKeys() overrideTDirectoryFilevirtual; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObjectAny(const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) overrideTDirectoryFilevirtual; WriteObjectAny(const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) overrideTDirectoryFilevirtual; WriteTObject(const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) overrideTDirectoryFilevirtual; ~TDirectory()TDirectoryvirtual; ~TDirectoryFile() overrideTDirectoryFile; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile-members.html:12767,Guid,Guide,12767,doc/master/classTDirectoryFile-members.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile-members.html,1,['Guid'],['Guide']
Usability,"directory. ; Definition at line 78 of file TEventList.cxx. ◆ TEventList() [3/3]. TEventList::TEventList ; (; const TEventList & ; list). Copy constructor. ; Definition at line 94 of file TEventList.cxx. ◆ ~TEventList(). TEventList::~TEventList ; (; ). override . Default destructor for a EventList. ; Definition at line 109 of file TEventList.cxx. Member Function Documentation. ◆ Add(). void TEventList::Add ; (; const TEventList * ; alist). virtual . Merge contents of alist with this list. ; Both alist and this list are assumed to be sorted prior to this call ; Definition at line 121 of file TEventList.cxx. ◆ Class(). static TClass * TEventList::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEventList::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEventList::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 77 of file TEventList.h. ◆ Clear(). void TEventList::Clear ; (; Option_t * ; option = """"). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 47 of file TEventList.h. ◆ Contains(). bool TEventList::Contains ; (; Long64_t ; entry). virtual . Return TRUE if list contains entry. ; Definition at line 167 of file TEventList.cxx. ◆ ContainsRange(). bool TEventList::ContainsRange ; (; Long64_t ; entrymin, . Long64_t ; entrymax . ). virtual . Return TRUE if list contains entries from entrymin to entrymax included. ; Definition at line 176 of file TEventList.cxx. ◆ DeclFileName(). static const char * TEventList::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 77 of file TEventList.h. ◆ DirectoryAutoAdd(). void TEventList::DirectoryAutoAdd ; (; TDirectory * ; dir). virtual . Called by TKey and others to automatically add us to a directory when we are read from a file. ; Definition at line 188 of file TEventList.cxx. ◆ Enter(). void TEventL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:17109,Clear,Clear,17109,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,1,['Clear'],['Clear']
Usability,"disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::RequiresCleanupBool_t RequiresCleanup(TObject &obj)Definition TROOT.h:386; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::EnableThreadSafetyvoid EnableThreadSafety()Enable support for multi-threading within the ROOT code in particular, enables the global mutex to ma...Definition TROOT.cxx:501; ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472; ROOT::DisableImplicitMTvoid DisableImplicitMT()Disables the implicit multi-threading in ROOT (see EnableImplicitMT).Definition TROOT.cxx:556; v@ vDefinition rootcling_impl.cxx:3687; lTLine lDefinition textangle.C:4. corebaseincTROOT.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:53898,Guid,Guide,53898,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['Guid'],['Guide']
Usability,"distribution with errors; scaleBias: scale factor applied to the bias; Data members required:; fA, fX0, fL; Data members modified:; those documented in SetInput(); and those documented in DoUnfold(Double_t); Return value:; maximum global correlation coefficient; NOTE!!! return value >=1.0 means error, and the result is junk. Overflow bins of the input distribution are ignored!. Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0., Double_t oneOverZeroError = 0., const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; hist_vyy: if non-zero, defines the data covariance matrix; otherwise it is calculated from the data errors; hist_vyy_inv: if non-zero and if hist_vyy is set, defines the inverse of the data covariance matrix; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for the given input, the unfolding can not be done!; Data members modified:; fY, fVyy, , fBiasScale; Data members cleared; fVyyInv, fNdf; + see ClearResults. Double_t DoUnfold(Double_t tau); Unfold with given value of regularisation parameter tau; tau: new tau parameter; required data members:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fV: inverse of covariance matrix for y; fL: regularisation conditions; modified data members:; fTauSquared and those documented in DoUnfold(void). Int_t ScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); scan the L curve; nPoint: number of points on the resulting curve; tauMin: smallest tau value to study; tauMax: largest tau value to study; lCurve: the L curve as graph; logTauX: output spline of x-coordinates vs tau for the L c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfold.html:26493,clear,cleared,26493,root/html602/TUnfold.html,https://root.cern,https://root.cern/root/html602/TUnfold.html,4,"['Clear', 'clear']","['ClearResults', 'cleared']"
Usability,"dit.cxx:854; TClassEdit::kDropTrailStar@ kDropTrailStarDefinition TClassEdit.h:77; TClassEdit::kDropStlDefault@ kDropStlDefaultDefinition TClassEdit.h:82; TClassEdit::IsSTLBitsetbool IsSTLBitset(const char *type)Return true is the name is std::bitset<number> or bitset<number>Definition TClassEdit.cxx:1340; TMVA::kNN::FindUInt_t Find(std::list< std::pair< const Node< T > *, Float_t > > &nlist, const Node< T > *node, const T &event, UInt_t nfind); TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; v@ vDefinition rootcling_impl.cxx:3687; whatstatic const char * whatDefinition stlLoader.cc:5; TClassEdit::TSplitTypeDefinition TClassEdit.h:138; TClassEdit::TSplitType::IsTemplatebool IsTemplate()Check if the type is a template.Definition TClassEdit.cxx:519; TClassEdit::TSplitType::fElementsstd::vector< std::string > fElementsDefinition TClassEdit.h:141; TClass::ObjectPtrDefinition TClass.h:140; TClass::ObjectPtr::GetAllocatorTVirtualStreamerInfo * GetAllocator() constDefinition TClass.h:149; TClass::ObjectPtr::GetPtrvoid * GetPtr() constDefinition TClass.h:147; TClass__GetCallingNewRAIIDefinition TClass.cxx:273; TClass__GetCallingNewRAII::fCurrentValueTClass::ENewType & fCurrentValueDefinition TClass.cxx:274; TClass__GetCallingNewRAII::TClass__GetCallingNewRAIITClass__GetCallingNewRAII(TClass::ENewType newvalue)Definition TClass.cxx:277; TClass__GetCallingNewRAII::fOldValueTClass::ENewType fOldValueDefinition TClass.cxx:275; TClass__GetCallingNewRAII::~TClass__GetCallingNewRAII~TClass__GetCallingNewRAII()Definition TClass.cxx:284; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. coremetasrcTClass.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:379240,Guid,Guide,379240,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ditionalObservables(Args_t &&... argsOrArgSet)Create a RooCmdArg to declare conditional observables.Definition RooGlobalFunc.h:278; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; RooFit::CutRooCmdArg Cut(const char *cutSpec)Definition RooGlobalFunc.cxx:320; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf702_efficiencyfit_2DDefinition rf702_efficiencyfit_2D.py:1; ; [#0] WARNING:Generation -- RooAcceptReject::ctor(effPdf_Int[]_Norm[cut]) WARNING: performing accept/reject sampling on a p.d.f in 2 dimensions without prior knowledge on maximum value of p.d.f. Determining maximum value by taking 200000 trial samples. If p.d.f contains sharp peaks smaller than average distance between trial sampling points these may be missed and p.d.f. may be sampled incorrectly.; [#0] WARNING:Generation -- RooAcceptReject::ctor(effPdf_Int[]_Norm[cut]): WARNING: 200000 trial samples requested by p.d.f for 2-dimensional accept/reject sampling, this may take some time; [#1] INFO:Fitting -- RooAbsPdf::fitTo(effPdf_over_effPdf_Int[cut]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_effPdf_over_effPdf_Int[cut]_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf702_efficiencyfit_2D.C. tutorialsroofitrf702_efficiencyfit_2D.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf702__efficiencyfit__2D_8C.html:8886,Guid,Guide,8886,doc/master/rf702__efficiencyfit__2D_8C.html,https://root.cern,https://root.cern/doc/master/rf702__efficiencyfit__2D_8C.html,1,['Guid'],['Guide']
Usability,"ditor::fgEditorNamename of the default pad editor ""Ged""; static TGedEditor*fgFrameCreator; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TVirtualPadEditor*TVirtualPadEditor::fgPadEditorsingleton editor dialog; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedEditor* GetFrameCreator(); Returns TGedEditor that currently creates TGedFrames. void SetFrameCreator(TGedEditor* e); Set the TGedEditor that currently creates TGedFrames. TGedEditor(TCanvas* canvas = 0, UInt_t width = 175, UInt_t height = 20); Constructor of graphics editor. ~TGedEditor(); Editor destructor. void Update(TGedFrame* frame = 0); Virtual method that is called on any change in the dependent frames.; This implementation simply calls fPad Modified()/Update(). TGCompositeFrame* GetEditorTab(const char* name); Find or create tab with name. TGedTabInfo* GetEditorTabInfo(const char* name); Find or create tab with name. void CloseWindow(); Called when closed via WM close button. Calls Hide(). void ReinitWorkspace(); Clears windows in editor tab.; Unmap and withdraw currently shown frames and thus prepare for; construction of a new class layout or destruction. void SetGlobal(Bool_t global); Set editor global. void GlobalClosed(); Delete global editor if no canvas exists. void GlobalSetModel(TVirtualPad* , TObject* , Int_t ); Set canvas to global editor. void ConnectToCanvas(TCanvas* c); Connect this editor to the Selected signal of canvas 'c'. void DisconnectFromCanvas(); Disconnect this editor from the Selected signal of fCanvas. void SetCanvas(TCanvas* c); Change connection to another canvas. void SetModel(TVirtualPad* pad, TObject* obj, Int_t event); Activate object editors according to the selected object. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedEditor.html:26639,simpl,simply,26639,root/html528/TGedEditor.html,https://root.cern,https://root.cern/root/html528/TGedEditor.html,4,['simpl'],['simply']
Usability,"dl; ; Reimplemented from TGFrame.; Definition at line 214 of file TGDoubleSlider.h. ◆ HandleButton(). Bool_t TGDoubleHSlider::HandleButton ; (; Event_t * ; event). overridevirtual . Handle mouse button event in horizontal slider widget. ; Implements TGDoubleSlider.; Reimplemented in TGTripleHSlider.; Definition at line 523 of file TGDoubleSlider.cxx. ◆ HandleMotion(). Bool_t TGDoubleHSlider::HandleMotion ; (; Event_t * ; event). overridevirtual . Handle mouse motion event in horizontal slide widget. ; Implements TGDoubleSlider.; Reimplemented in TGTripleHSlider.; Definition at line 570 of file TGDoubleSlider.cxx. ◆ IsA(). TClass * TGDoubleHSlider::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGTripleHSlider.; Definition at line 218 of file TGDoubleSlider.h. ◆ SavePrimitive(). void TGDoubleHSlider::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save an horizontal slider as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TGTripleHSlider.; Definition at line 623 of file TGDoubleSlider.cxx. ◆ Streamer(). void TGDoubleHSlider::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGTripleHSlider. ◆ StreamerNVirtual(). void TGDoubleHSlider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 218 of file TGDoubleSlider.h. Member Data Documentation. ◆ fXp. Int_t TGDoubleHSlider::fXp. protected . horizontal slider x position in pixel coordinates ; Definition at line 199 of file TGDoubleSlider.h. Libraries for TGDoubleHSlider:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDoubleSlider.h; gui/gui/src/TGDoubleSlider.cxx. TGDoubleHSlider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleHSlider.html:36187,Guid,Guide,36187,doc/master/classTGDoubleHSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleHSlider.html,1,['Guid'],['Guide']
Usability,dleInput methods ;  CTMPWorkerTreeFuncTemplated derivation of TMPWorkerTree handlign generic function tree processing ;  CTMPWorkerTreeSelTemplated derivation of TMPWorkerTree handlign selector tree processing ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescription;  CTPacketizerThis class g,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:181182,simpl,simple,181182,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['simpl'],['simple']
Usability,dleInput methods ;  CTMPWorkerTreeFuncTemplated derivation of TMPWorkerTree handlign generic function tree processing ;  CTMPWorkerTreeSelTemplated derivation of TMPWorkerTree handlign selector tree processing ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStepThis class contains implementation of writing OpenCascade's geometry shapes to the STEP file reproducing the original ROOT geometry tree ;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorD,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:189749,simpl,simple,189749,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['simpl'],['simple']
Usability,"dler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TProofServ. TXHandler. ←; TXProofServ. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. TXProofServ(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXProofServ.html:19261,resume,resume,19261,root/html602/TXProofServ.html,https://root.cern,https://root.cern/root/html602/TXProofServ.html,2,['resume'],['resume']
Usability,"dles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:18004,Simpl,Simple,18004,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"dm(dt|dterr)*pdf(dterr); # ----------------------------------------------------------------------------------------------------------------------; ; # Construct production of conditional decay_dm(dt|dterr) with empirical; # pdfErr(dterr); model = ROOT.RooProdPdf(""model"", ""model"", {pdfErr}, Conditional=({decay_gm}, {dt})); ; # (Alternatively you could also use the landau shape pdfDtErr); # ROOT.RooProdPdf model(""model"", ""model"",pdfDtErr,; # ROOT.RooFit.Conditional(decay_gm,dt)); ; # Sample, fit and plot product model; # ------------------------------------------------------------------; ; # Specify external dataset with dterr values to use model_dm as; # conditional pdf; data = model.generate({dt, dterr}, 10000); ; # Fit conditional decay_dm(dt|dterr); # ---------------------------------------------------------------------; ; # Specify dterr as conditional observable; model.fitTo(data, PrintLevel=-1); ; # Plot conditional decay_dm(dt|dterr); # ---------------------------------------------------------------------; ; # Make two-dimensional plot of conditional pdf in (dt,dterr); hh_model = model.createHistogram(""hh_model"", dt, Binning=50, YVar=dict(var=dterr, Binning=50)); hh_model.SetLineColor(ROOT.kBlue); ; # Make projection of data an dt; frame = dt.frame(Title=""Projection of model(dt|dterr) on dt""); data.plotOn(frame); model.plotOn(frame); ; # Draw all frames on canvas; c = ROOT.TCanvas(""rf307_fullpereventerrors"", ""rf307_fullpereventerrors"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.20); hh_model.GetZaxis().SetTitleOffset(2.5); hh_model.Draw(""surf""); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.6); frame.Draw(); ; c.SaveAs(""rf307_fullpereventerrors.png""); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf307_fullpereventerrors.py. tutorialsroofitrf307_fullpereventerrors.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf307__fullpereventerrors_8py.html:3565,Guid,Guide,3565,doc/master/rf307__fullpereventerrors_8py.html,https://root.cern,https://root.cern/doc/master/rf307__fullpereventerrors_8py.html,1,['Guid'],['Guide']
Usability,"dm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; for i in range( 25000 ):; # Generate random values. Use ctypes to pass doubles by reference; rannor( px_ref, py_ref ); # Retrieve the generated values; px = px_ref.value; py = py_ref.value; ; pz = px*px + py*py; random = rndm(1); ; # Fill histograms.; hpx.Fill( px ); hpxpy.Fill( px, py ); hprof.Fill( px, pz ); ntuple.Fill( px, py, pz, random, i ); ; # Update display every kUPDATE events.; if i and i%kUPDATE == 0:; if i == kUPDATE:; hpx.Draw(); ; c1.Modified(); c1.Update(); ; if gSystem.ProcessEvents(): # allow user interrupt; break; ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; gBenchmark.Show( 'hsimple' ); ; # Save all objects in this file.; hpx.SetFillColor( 0 ); hfile.Write(); hpx.SetFillColor( 48 ); c1.Modified(); c1.Update(); ; # Note that the file is automatically closed when application terminates; # or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen, Enric Tejedor ; Definition in file hsimple.py. tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimple_8py.html:3361,simpl,simple,3361,doc/master/hsimple_8py.html,https://root.cern,https://root.cern/doc/master/hsimple_8py.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"dmultimap:{; 1358 if ( fKey->fCase&kIsPointer ) {; 1359 if (fKey->fProperties&kNeedDelete) {; 1360 TVirtualCollectionProxy *proxy = fKey->fType->GetCollectionProxy();; 1361 TPushPop helper(proxy,*(void**)ptr);; 1362 proxy->Clear(""force"");; 1363 }; 1364 fKey->DeleteItem(*(void**)ptr);; 1365 } else {; 1366 if (fKey->fProperties&kNeedDelete) {; 1367 TVirtualCollectionProxy *proxy = fKey->fType->GetCollectionProxy();; 1368 TPushPop helper(proxy,ptr);; 1369 proxy->Clear(""force"");; 1370 }; 1371 }; 1372 char *addr = ((char*)ptr)+fValOffset;; 1373 if ( fVal->fCase&kIsPointer ) {; 1374 if ( fVal->fProperties&kNeedDelete) {; 1375 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1376 TPushPop helper(proxy,*(void**)addr);; 1377 proxy->Clear(""force"");; 1378 }; 1379 fVal->DeleteItem(*(void**)addr);; 1380 } else {; 1381 if ( fVal->fProperties&kNeedDelete) {; 1382 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1383 TPushPop helper(proxy,addr);; 1384 proxy->Clear(""force"");; 1385 }; 1386 }; 1387 break;; 1388 }; 1389 default: {; 1390 if ( fVal->fCase&kIsPointer ) {; 1391 if (fVal->fProperties&kNeedDelete) {; 1392 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1393 TPushPop helper(proxy,*(void**)ptr);; 1394 proxy->Clear(""force"");; 1395 }; 1396 fVal->DeleteItem(*(void**)ptr);; 1397 } else {; 1398 if (fVal->fProperties&kNeedDelete) {; 1399 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1400 TPushPop helper(proxy,ptr);; 1401 proxy->Clear(""force"");; 1402 }; 1403 }; 1404 break;; 1405 }; 1406 }; 1407 }; 1408}; 1409 ; 1410////////////////////////////////////////////////////////////////////////////////; 1411 ; 1412void TGenCollectionProxy::ReadBuffer(TBuffer & /* b */, void * /* obj */, const TClass * /* onfileClass */); 1413{; 1414 MayNotUse(""TGenCollectionProxy::ReadBuffer(TBuffer &, void *, const TClass *)"");; 1415}; 1416 ; 1417///////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:44410,Clear,Clear,44410,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Clear'],['Clear']
Usability,"do(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:18433,undo,undo,18433,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,4,['undo'],['undo']
Usability,"do-inverse is calculated . Tolerances and Scaling; The tolerance parameter (which is a member of this base class) plays a crucial role in all operations of the decomposition classes . It gives the user a powerful tool to monitor and steer the operations Its default value is sqrt(epsilon) where 1+epsilon = 1; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number .; The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD which can handle singular matrices . For each decomposition this will be checked in a different way; in LU the matrix is considered singular when, at some point in the decomposition, a diagonal element < fTol . Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix . In this case the user will have to reduce the tolerance number by this factor . (For CPU time saving we decided not to make this an automatic procedure) .; Code for this could look as follows: const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; a#define a(i)Definition RSha256.hxx:99; double; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 33 of file TDecompBase.h. Public Member Functions;  TDecompBase ();  Default constructor. ;  ;  TDecompBase (const TDecompBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:3579,clear,clear,3579,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['clear'],['clear']
Usability,"doArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; void ls (Option_t *option="""") const override;  ls this command and merged commands ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void Redo (Option_t *option="""");  Execute command and then merge commands. ;  ; virtual void SetArgs (Int_t nargs,...);  Set do/redo and undo parameters. ;  ; virtual void SetName (const char *name);  Sets name of the command. ;  ; virtual void SetRedoArgs (Int_t nargs,...);  Set redo parameters. ;  ; virtual void SetTitle (const char *title);  Sets description of the command. ;  ; virtual void SetUndoArgs (Int_t nargs,...);  Set undo parameters. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Undo (Option_t *option="""");  Un-execute all me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:7169,Undo,Undo,7169,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Undo'],['Undo']
Usability,"doUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube editor. ~TGeoTubeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for rmin. void DoRmax(); Slot for rmax. void DoDz(); Slot for dz. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeEditor.html:21363,undo,undoing,21363,root/html534/TGeoTubeEditor.html,https://root.cern,https://root.cern/root/html534/TGeoTubeEditor.html,1,['undo'],['undoing']
Usability,"dobj, Int_t bufsize = 32000, Int_t splitlevel = 1); Create a new TTree BranchObject. Build a TBranchObject for an object of class classname.; addobj is the address of a pointer to an object of class classname.; IMPORTANT: classname must derive from TObject.; The class dictionary must be available (ClassDef in class header). This option requires access to the library where the corresponding class; is defined. Accessing one single data member in the object implies; reading the full object.; See the next Branch constructor for a more efficient storage; in case the entry consists of arrays of identical objects. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate; subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c. bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (e.g. 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. TBranch* BranchRef(); Build the optional branch supporting the TRefTable.; This branch will keep all the information to find the branches; containing referenced objects. At each T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:50683,simpl,simply,50683,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,4,['simpl'],['simply']
Usability,"dobj, Int_t bufsize = 32000, Int_t splitlevel = 1); Create a new TTree BranchObject. Build a TBranchObject for an object of class classname.; addobj is the address of a pointer to an object of class classname.; IMPORTANT: classname must derive from TObject.; The class dictionary must be available (ClassDef in class header). This option requires access to the library where the corresponding class; is defined. Accessing one single data member in the object implies; reading the full object.; See the next Branch constructor for a more efficient storage; in case the entry consists of arrays of identical objects. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate; subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c. bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (eg 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. TBranch* BranchRef(); Build the optional branch supporting the TRefTable.; This branch will keep all the information to find the branches; containing referenced objects. At each Tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:48346,simpl,simply,48346,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['simpl'],['simply']
Usability,"documentation ; Definition at line 81 of file SVWorkingSet.h. ◆ fB_up. Float_t TMVA::SVWorkingSet::fB_up. private . documentation ; Definition at line 82 of file SVWorkingSet.h. ◆ fdoRegression. Bool_t TMVA::SVWorkingSet::fdoRegression. private . TODO temporary, find nicer solution. ; Definition at line 72 of file SVWorkingSet.h. ◆ fExitFromTraining. bool* TMVA::SVWorkingSet::fExitFromTraining = nullptr. private . Definition at line 89 of file SVWorkingSet.h. ◆ fInputData. std::vector<TMVA::SVEvent*>* TMVA::SVWorkingSet::fInputData. private . input events ; Definition at line 73 of file SVWorkingSet.h. ◆ fIPyCurrentIter. UInt_t* TMVA::SVWorkingSet::fIPyCurrentIter = nullptr. private . Definition at line 88 of file SVWorkingSet.h. ◆ fKFunction. SVKernelFunction* TMVA::SVWorkingSet::fKFunction. private . kernel function ; Definition at line 75 of file SVWorkingSet.h. ◆ fKMatrix. SVKernelMatrix* TMVA::SVWorkingSet::fKMatrix. private . kernel matrix ; Definition at line 76 of file SVWorkingSet.h. ◆ fLogger. MsgLogger* TMVA::SVWorkingSet::fLogger. mutableprivate . ! message logger ; Definition at line 85 of file SVWorkingSet.h. ◆ fSupVec. std::vector<TMVA::SVEvent*>* TMVA::SVWorkingSet::fSupVec. private . output events - support vectors ; Definition at line 74 of file SVWorkingSet.h. ◆ fTEventLow. SVEvent* TMVA::SVWorkingSet::fTEventLow. private . last optimized event ; Definition at line 79 of file SVWorkingSet.h. ◆ fTEventUp. SVEvent* TMVA::SVWorkingSet::fTEventUp. private . last optimized event ; Definition at line 78 of file SVWorkingSet.h. ◆ fTolerance. Float_t TMVA::SVWorkingSet::fTolerance. private . documentation ; Definition at line 83 of file SVWorkingSet.h. Libraries for TMVA::SVWorkingSet:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/SVWorkingSet.h; tmva/tmva/src/SVWorkingSet.cxx. TMVASVWorkingSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVWorkingSet.html:6080,Guid,Guide,6080,doc/master/classTMVA_1_1SVWorkingSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVWorkingSet.html,1,['Guid'],['Guide']
Usability,"domGenerator<TRandom3> rng(shuffleSeed);; 1440 ; 1441 // print weights before; 1442 if (fBuildNet && debug) {; 1443 Log() << ""Initial Deep Net Weights "" << Endl;; 1444 auto & weights_tensor = deepNet.GetLayerAt(0)->GetWeights();; 1445 for (size_t l = 0; l < weights_tensor.size(); ++l); 1446 weights_tensor[l].Print();; 1447 auto & bias_tensor = deepNet.GetLayerAt(0)->GetBiases();; 1448 bias_tensor[0].Print();; 1449 }; 1450 ; 1451 Log() << "" Start epoch iteration ..."" << Endl;; 1452 bool debugFirstEpoch = false;; 1453 bool computeLossInTraining = true; // compute loss in training or at test time; 1454 size_t nTrainEpochs = 0;; 1455 while (!converged) {; 1456 nTrainEpochs++;; 1457 trainingData.Shuffle(rng);; 1458 ; 1459 // execute all epochs; 1460 //for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1461 ; 1462 Double_t trainingError = 0;; 1463 for (size_t i = 0; i < batchesInEpoch; ++i ) {; 1464 // Clean and load new batches, one batch for one slave net; 1465 //batches.clear();; 1466 //batches.reserve(nThreads);; 1467 //for (size_t j = 0; j < nThreads; j++) {; 1468 // batches.push_back(trainingData.GetTensorBatch());; 1469 //}; 1470 if (debugFirstEpoch) std::cout << ""\n\n----- batch # "" << i << ""\n\n"";; 1471 ; 1472 auto my_batch = trainingData.GetTensorBatch();; 1473 ; 1474 if (debugFirstEpoch); 1475 std::cout << ""got batch data - doing forward \n"";; 1476 ; 1477#ifdef DEBUG; 1478 ; 1479 Architecture_t::PrintTensor(my_batch.GetInput(),""input tensor"",true);; 1480 typename Architecture_t::Tensor_t tOut(my_batch.GetOutput());; 1481 typename Architecture_t::Tensor_t tW(my_batch.GetWeights());; 1482 Architecture_t::PrintTensor(tOut,""label tensor"",true) ;; 1483 Architecture_t::PrintTensor(tW,""weight tensor"",true) ;; 1484#endif; 1485 ; 1486 deepNet.Forward(my_batch.GetInput(), true);; 1487 // compute also loss; 1488 if (computeLossInTraining) {; 1489 auto outputMatrix = my_batch.GetOutput();; 1490 auto weights = my_batch.GetWeights();; 1491 trainingError += deepNet.Loss(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:58244,clear,clear,58244,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['clear'],['clear']
Usability,"domain - authentication domain; loopback - bind specified port to loopback 127.0.0.1 address; debug - enable debug mode, server always returns html page with request info. If necessary, one could bind http server to specific IP address like:; new THttpServer(""http:192.168.1.17:8080""); 1.2 Registering objects; At any time, one could register other objects with the command:; TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; One should specify sub-folder name, where objects will be registered. If sub-folder name does not starts with slash /, than top-name folder /Objects/ will be prepended. At any time one could unregister objects:; serv->Unregister(gr);; THttpServer does not take ownership over registered objects - they should be deleted by user.; If the objects content is changing in the application, one could enable monitoring flag in the browser - then objects view will be regularly updated.; 1.3 Command interface; THttpServer class provide simple interface to invoke command from web browser. One just register command like:; serv->RegisterCommand(""/DoSomething"",""SomeFunction()"");; Element with name DoSomething will appear in the web browser and can be clicked. It will result in gROOT->ProcessLineSync(""SomeFunction()"") call. When registering command, one could specify icon name which will be displayed with the command.; serv->RegisterCommand(""/DoSomething"",""SomeFunction()"", ""/rootsys/icons/ed_execute.png"");; In example usage of images from $ROOTSYS/icons directory is shown. One could prepend button; string to the icon name to let browser show command as extra button. In last case one could hide command element from elements list:; serv->Hide(""/DoSomething"");; One can find example of command interface usage in tutorials/http/httpcontrol.C macro.; 1.4 Configuring user access; By default, the http server is open for anonymous access. One could restrict the access to the server for authenticated users only. First of all, one shou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/HttpServer/HttpServer.html:3252,simpl,simple,3252,root/html534/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/html534/guides/HttpServer/HttpServer.html,1,['simpl'],['simple']
Usability,"done.; Returns -1 in case of error. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ClearData(UInt_t what = kUnregistered, const char* dsname = 0); Remove files for the data directory.; The option 'what' can take the values:; kPurge remove all files and directories under '~/data'; kUnregistered remove only files not in registered datasets (default); kDataset remove files belonging to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:59831,Clear,ClearCache,59831,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['Clear'],['ClearCache']
Usability,"dor (const char *pool="""");  Create Condor interface object. ;  ;  ~TCondor () override;  Cleanup Condor interface. ;  ; TCondorSlave * Claim (const char *vmname, const char *cmd);  Claim virtual machine with name vmname This function does not figure out the image and performance index before returning the condor slave. ;  ; TList * Claim (Int_t n, const char *cmd);  Claim n virtual machines This function figures out the image and performance index before returning the list of condor slaves. ;  ; TString GetImage (const char *host) const;  Get image of the worker. ;  ; EState GetState () const;  ; TList * GetVirtualMachines () const;  Get the names of the virtual machines in the pool. ;  ; Bool_t GetVmInfo (const char *vm, TString &image, Int_t &perfidx) const;  Get info about worker status. ;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; void Print (Option_t *option="""") const override;  Print master status. ;  ; Bool_t Release ();  Release worker. ;  ; Bool_t Resume ();  Resume worker. ;  ; Bool_t SetState (EState state);  Set the state of workers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Suspend ();  Suspend worker. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondor.html:2085,Resume,Resume,2085,doc/master/classTCondor.html,https://root.cern,https://root.cern/doc/master/classTCondor.html,2,['Resume'],['Resume']
Usability,"double &xmax, double fy, int npx=100, bool useLog=false);  Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ;  . Function Documentation. ◆ MinimBrent(). double ROOT::Math::BrentMethods::MinimBrent ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; xmiddle, . double ; fy, . bool & ; ok, . int & ; niter, . double ; epsabs = 1.E-8, . double ; epsrel = 1.E-10, . int ; maxiter = 100 . ). Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ; type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy; if ok=true the method has converged. Maxiter returns the actual number of iteration performed ; Definition at line 130 of file BrentMethods.cxx. ◆ MinimStep(). double ROOT::Math::BrentMethods::MinimStep ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; fy, . int ; npx = 100, . bool ; useLog = false . ). Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ; Definition at line 28 of file BrentMethods.cxx. ROOTMathBrentMethods. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html:2813,Guid,Guide,2813,doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,1,['Guid'],['Guide']
Usability,"double TAnnotation::GetZ ; (; ); const. inline . Definition at line 35 of file TAnnotation.h. ◆ IsA(). TClass * TAnnotation::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 37 of file TAnnotation.h. ◆ ls(). void TAnnotation::ls ; (; Option_t * ; option = """"); const. overridevirtual . List this annotation with its attributes. ; Reimplemented from TObject.; Definition at line 80 of file TAnnotation.cxx. ◆ Paint(). void TAnnotation::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint a TAnnotation. ; Reimplemented from TObject.; Definition at line 119 of file TAnnotation.cxx. ◆ PaintAnnotation(). void TAnnotation::PaintAnnotation ; (; Double_t ; x, . Double_t ; y, . Double_t ; z, . Double_t ; angle, . Double_t ; size, . const Char_t * ; text . ). Paint this annotation with new coordinates. ; Definition at line 104 of file TAnnotation.cxx. ◆ Print(). void TAnnotation::Print ; (; Option_t * ; option = """"); const. overridevirtual . Dump this annotation with its attributes. ; Reimplemented from TObject.; Definition at line 127 of file TAnnotation.cxx. ◆ SetZ(). void TAnnotation::SetZ ; (; double ; z). inline . Definition at line 34 of file TAnnotation.h. ◆ Streamer(). void TAnnotation::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TAnnotation::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 37 of file TAnnotation.h. Member Data Documentation. ◆ fZ. double TAnnotation::fZ {0}. protected . Z position of text. ; Definition at line 21 of file TAnnotation.h. Libraries for TAnnotation:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TAnnotation.h; graf2d/gpad/src/TAnnotation.cxx. TAnnotation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAnnotation.html:33293,Guid,Guide,33293,doc/master/classTAnnotation.html,https://root.cern,https://root.cern/doc/master/classTAnnotation.html,1,['Guid'],['Guide']
Usability,"double value, double lower, double upper) const override;  ; double Int2ext (double value, double lower, double upper) const override;  ;  Public Member Functions inherited from ROOT::Math::MinimizerVariableTransformation; virtual ~MinimizerVariableTransformation ();  . #include <Math/MinimizerVariableTransformation.h>. Inheritance diagram for ROOT::Math::SqrtLowVariableTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~SqrtLowVariableTransformation(). ROOT::Math::SqrtLowVariableTransformation::~SqrtLowVariableTransformation ; (; ). inlineoverride . Definition at line 61 of file MinimizerVariableTransformation.h. Member Function Documentation. ◆ DInt2Ext(). double ROOT::Math::SqrtLowVariableTransformation::DInt2Ext ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 76 of file MinimizerVariableTransformation.cxx. ◆ Ext2int(). double ROOT::Math::SqrtLowVariableTransformation::Ext2int ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 66 of file MinimizerVariableTransformation.cxx. ◆ Int2ext(). double ROOT::Math::SqrtLowVariableTransformation::Int2ext ; (; double ; value, . double ; lower, . double ; upper . ); const. overridevirtual . Implements ROOT::Math::MinimizerVariableTransformation.; Definition at line 59 of file MinimizerVariableTransformation.cxx. Libraries for ROOT::Math::SqrtLowVariableTransformation:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/MinimizerVariableTransformation.h; math/mathcore/src/MinimizerVariableTransformation.cxx. ROOTMathSqrtLowVariableTransformation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SqrtLowVariableTransformation.html:2592,Guid,Guide,2592,doc/master/classROOT_1_1Math_1_1SqrtLowVariableTransformation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SqrtLowVariableTransformation.html,1,['Guid'],['Guide']
Usability,"dow (by frame pointer). ;  ; Bool_t SetCurrent (UInt_t newcurrent);  Set current (active) MDI child window (by id). ;  ; void SetResizeMode (Int_t mode=kMdiDefaultResizeMode);  Set MDI windows resize mode (opaque or transparent). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TileHorizontal ();  ; virtual void TileVertical ();  ; void UpdateMdiButtons ();  Update the status of MDI buttons in the decor frame of all children. ;  ;  Public Member Functions inherited from TGCanvas;  TGCanvas (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame|kDoubleBorder, Pixel_t back=GetDefaultFrameBackground());  Create a canvas object. ;  ;  ~TGCanvas () override;  Delete canvas. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Adding a frame to a canvas is actually adding the frame to the viewport container. ;  ; virtual void ClearViewPort ();  Clear view port and redraw content. ;  ; void DrawBorder () override;  Draw canvas border. ;  ; TGFrame * GetContainer () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual Int_t GetHsbPosition () const;  Get position of horizontal scrollbar. ;  ; TGHScrollBar * GetHScrollbar () const;  ; Int_t GetScrolling () const;  ; TGViewPort * GetViewPort () const;  ; virtual Int_t GetVsbPosition () const;  Get position of vertical scrollbar. ;  ; TGVScrollBar * GetVScrollbar () const;  ; void MapSubwindows () override;  Map all canvas sub windows. ;  ; virtual void SetContainer (TGFrame *f);  ; virtual void SetHsbPosition (Int_t newPos);  Set position of horizontal scrollbar. ;  ; void SetScrolling (Int_t scrolling);  Set scrolling policy. ;  ; virtual void SetVsbPosition (Int_t newPos);  Set position of vertical scrollbar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiMainFrame.html:4566,Clear,ClearViewPort,4566,doc/master/classTGMdiMainFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiMainFrame.html,2,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"dow() [1/2]. TEveWindow::TEveWindow ; (; const TEveWindow & ; ). private . ◆ TEveWindow() [2/2]. TEveWindow::TEveWindow ; (; const char * ; n = ""TEveWindow"", . const char * ; t = """" . ). Definition at line 653 of file TEveWindow.cxx. ◆ ~TEveWindow(). TEveWindow::~TEveWindow ; (; ). override . Destructor. ; Definition at line 668 of file TEveWindow.cxx. Member Function Documentation. ◆ CanMakeNewSlots(). virtual Bool_t TEveWindow::CanMakeNewSlots ; (; ); const. inlinevirtual . Reimplemented in TEveWindowPack, and TEveWindowTab.; Definition at line 241 of file TEveWindow.h. ◆ Class(). static TClass * TEveWindow::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveWindow::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveWindow::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 293 of file TEveWindow.h. ◆ ClearEveFrame(). void TEveWindow::ClearEveFrame ; (; ). Clears eve-frame associated with this window. ; This is used in special case when the window is embedded in a foreign GUI container and gets deleted from this side. In particular, this happens when TRootBrowser closes a tab. ; Definition at line 889 of file TEveWindow.cxx. ◆ CreateDefaultWindowSlot(). TEveWindowSlot * TEveWindow::CreateDefaultWindowSlot ; (; ). static . Create a default window slot. ; Static helper. ; Definition at line 967 of file TEveWindow.cxx. ◆ CreateWindowInTab(). TEveWindowSlot * TEveWindow::CreateWindowInTab ; (; TGTab * ; tab, . TEveWindow * ; eve_parent = nullptr . ). static . Create a new tab in a given tab-widget and populate it with a default window-slot. ; Static helper. ; Definition at line 1002 of file TEveWindow.cxx. ◆ CreateWindowMainFrame(). TEveWindowSlot * TEveWindow::CreateWindowMainFrame ; (; TEveWindow * ; eve_parent = nullptr). static . Create a new main-frame and populate it with a default window-slot. ; The main-frame is m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:37780,Clear,ClearEveFrame,37780,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Clear'],['ClearEveFrame']
Usability,"dow* p, TGuiBldEditor* editor); virtual~TGuiBldNameFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); voidChangeSelected(TGFrame* frame); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); Bool_tCheckItems(TGCompositeFrame* main); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGuiBldNameFrame.html:1400,Clear,Clear,1400,root/html528/TGuiBldNameFrame.html,https://root.cern,https://root.cern/root/html528/TGuiBldNameFrame.html,4,['Clear'],['Clear']
Usability,"dow* p, const char* s, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); virtual~TGCheckButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); voidTGTextButton::ChangeText(const char* title)MENU ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGButton::Clicked()SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGCheckButton.html:4346,Clear,Clear,4346,root/html528/TGCheckButton.html,https://root.cern,https://root.cern/root/html528/TGCheckButton.html,4,['Clear'],['Clear']
Usability,"dow* p, const char* s, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = 0); virtual~TGRadioButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); voidTGTextButton::ChangeText(const char* title)MENU ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGButton::Clicked()SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGRadioButton.html:4346,Clear,Clear,4346,root/html528/TGRadioButton.html,https://root.cern,https://root.cern/root/html528/TGRadioButton.html,4,['Clear'],['Clear']
Usability,"down the tree, one cycles through the axes used to select the splitting planes. (For example, the root would have an x-aligned plane, the root's children would both have y-aligned planes, the root's grandchildren would all have z-aligned planes, and so on.) At each step, the point selected to create the splitting plane is the median of the points being put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption that we feed the entire set of points into the algorithm up-front.); This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root. However, balanced trees are not necessarily optimal for all applications. The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the concept):; function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;; ; // Sort point list and choose median as pivot element; select median from pointList;; ; // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; Our construction method is optimized to save memory, and differs a bit from the constraints above. In particular, the division axis is chosen as the one with the biggest spread, and the point to create the splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal node",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTree.html:2980,simpl,simple,2980,doc/master/classTKDTree.html,https://root.cern,https://root.cern/doc/master/classTKDTree.html,1,['simpl'],['simple']
Usability,"dows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoBBoxEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for volume editor. ~TGeoBBoxEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Update editor for a new selected box. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current parameters. void DoModified(); Slot for modifying current parameters. void DoUndo(); Slot for undoing last operation. void DoDx(); Slot for Dx modification. void DoDy(); Slot for Dy modification. void DoDz(); Slot for Dz modification. void DoOx(); Slot for Ox modification. void DoOy(); Slot for Oy modification. void DoOz(); Slot for Oz modification. TGeoBBoxEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoBBoxEditor.html:22304,undo,undoing,22304,root/html604/TGeoBBoxEditor.html,https://root.cern,https://root.cern/root/html604/TGeoBBoxEditor.html,1,['undo'],['undoing']
Usability,"dows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoBBoxEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for volume editor. ~TGeoBBoxEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Update editor for a new selected box. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current parameters. void DoModified(); Slot for modifying current parameters. void DoUndo(); Slot for undoing last operation. void DoDx(); Slot for Dx modification. void DoDy(); Slot for Dy modification. void DoDz(); Slot for Dz modification. void DoOx(); Slot for Ox modification. void DoOy(); Slot for Oy modification. void DoOz(); Slot for Oz modification. TGeoBBoxEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoBBoxEditor.html:22304,undo,undoing,22304,root/html602/TGeoBBoxEditor.html,https://root.cern,https://root.cern/root/html602/TGeoBBoxEditor.html,1,['undo'],['undoing']
Usability,"draw text always at the same place over a histogram, no matter what the histogram coordinates are. There are two ways to do this. You can set the NDC for one object or may convert NDC to user coordinates. Most graphical objects offer an option to be drawn in NDC. For instance, a line (TLine) may be drawn in NDC by using DrawLineNDC(). A latex formula or a text may use TText::SetNDC() to be drawn in NDC coordinates.; 9.3.3 Converting between Coordinate Systems; There are a few utility functions in TPad to convert from one system of coordinates to another. In the following table, a point is defined by (px,py) in pixel coordinates, (ux,uy) in user coordinates, (ndcx,ndcy) in normalized coordinates, (apx, apy) are in absolute pixel coordinates. Conversion; TPad’s Methods; Returns. NDC to Pixel; UtoPixel(ndcx); VtoPixel(ndcy); Int_t; Int_t. Pixel to User; PixeltoX(px); PixeltoY(py); PixeltoXY(px,py,&ux,&uy); Double_t; Double_t; Double_t ux,uy. User to Pixel; XtoPixel(ux); YtoPixel(uy); XYtoPixel(ux,uy,&px,&py); Int_t; Int_t; Int_t px,py. User to absolute pixel; XtoAbsPixel(ux); YtoAbsPixel(uy); XYtoAbsPixel(ux,uy,&apx,&apy); Int_t; Int_t; Int_t apx,apy. Absolute pixel to user; AbsPixeltoX(apx); AbsPixeltoY(apy); AbsPixeltoXY(apx,apy,&ux,&uy); Double_t; Double_t; Double_t ux,uy. Note: all the pixel conversion functions along the Y axis consider that py=0 is at the top of the pad except PixeltoY() which assume that the position py=0 is at the bottom of the pad. To make PixeltoY() converting the same way as the other conversion functions, it should be used the following way (p is a pointer to a TPad):; p->PixeltoY(py - p->GetWh());; 9.3.4 Dividing a Pad into Sub-pads; Dividing a pad into sub pads in order for instance to draw a few histograms, may be done in two ways. The first is to build pad objects and to draw them into a parent pad, which may be a canvas. The second is to automatically divide a pad into horizontal and vertical sub pads.; 9.3.4.1 Creating a Single Sub-pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:310888,ux,ux,310888,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['ux'],['ux']
Usability,"draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new TH2F(""h2stb"",""h2stb"",20,-4,4,20,-4,4);; h2stb->SetFillColor(46);; h2stb->FillRandom(""f2"",3000);; a->Add(h2sta);; a->Add(h2stb);; a->Draw();; }; a#define a(i)Definition RSha256.hxx:99; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF2A 2-Dim function with parameters.Definition TF2.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; THStackThe Histogram stack class.Definition THStack.h:40; f1TF1 * f1Definition legend1.C:11; AuthorRene Brun ; Definition in file hstack.C. tutorialshisthstack.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hstack_8C.html:2948,Guid,Guide,2948,doc/master/hstack_8C.html,https://root.cern,https://root.cern/doc/master/hstack_8C.html,1,['Guid'],['Guide']
Usability,"drawn with different graphics options in different pads. When a displayed histogram is deleted, its image is automatically removed from the pad. To create a copy of the histogram when drawing it, you can use TH1::DrawClone(). This will clone the histogram and allow you to change and delete the original one without affecting the clone. You can use TH1::DrawNormalized() to draw a normalized copy of a histogram.; TH1 *TH1::DrawNormalized(Option_t *option,Double_t norm) const; A clone of this histogram is normalized to norm and drawn with option. A pointer to the normalized histogram is returned. The contents of the histogram copy are scaled such that the new sum of weights (excluding under and overflow) is equal to norm .; Note that the returned normalized histogram is not added to the list of histograms in the current directory in memory. It is the user’s responsibility to delete this histogram. The kCanDelete bit is set for the returned object. If a pad containing this copy is cleared, the histogram will be automatically deleted. See “Draw Options” for the list of options.; 3.8.1 Setting the Style; Histograms use the current style gStyle, which is the global object of class TStyle. To change the current style for histograms, the TStyle class provides a multitude of methods ranging from setting the fill color to the axis tick marks. Here are a few examples:; void SetHistFillColor(Color_t color = 1); void SetHistFillStyle(Style_t styl = 0); void SetHistLineColor(Color_t color = 1); void SetHistLineStyle(Style_t styl = 0); void SetHistLineWidth(Width_t width = 1); When you change the current style and would like to propagate the change to a previously created histogram you can call TH1::UseCurrentStyle(). You will need to call UseCurrentStyle() on each histogram. When reading many histograms from a file and you wish to update them to the current style, you can use gROOT::ForceStyle and all histograms read after this call will be updated to use the current style. See “Gra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:83650,clear,cleared,83650,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['cleared']
Usability,"drenCount ; (; ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 235 of file RLoopManager.hxx. ◆ InitNodes(). void RLoopManager::InitNodes ; (; ). private . Initialize all nodes of the functional graph before running the event loop. ; This method is called once per event-loop and performs generic initialization operations that do not depend on the specific processing slot (i.e. operations that are common for all threads). ; Definition at line 791 of file RLoopManager.cxx. ◆ InitNodeSlots(). void RLoopManager::InitNodeSlots ; (; TTreeReader * ; r, . unsigned int ; slot . ). private . Build TTreeReaderValues for all nodes This method loops over all filters, actions and other booked objects and calls their InitSlot method, to get them ready for running a task. ; Definition at line 728 of file RLoopManager.cxx. ◆ Jit(). void RLoopManager::Jit ; (; ). Add RDF nodes that require just-in-time compilation to the computation graph. ; This method also clears the contents of GetCodeToJit(). ; Definition at line 848 of file RLoopManager.cxx. ◆ JitDeclarations(). void ROOT::Detail::RDF::RLoopManager::JitDeclarations ; (; ). ◆ operator=() [1/2]. RLoopManager & ROOT::Detail::RDF::RLoopManager::operator= ; (; const RLoopManager & ; ). delete . ◆ operator=() [2/2]. RLoopManager & ROOT::Detail::RDF::RLoopManager::operator= ; (; RLoopManager && ; ). delete . ◆ PartialReport(). void ROOT::Detail::RDF::RLoopManager::PartialReport ; (; ROOT::RDF::RCutFlowReport & ; ); const. inlinefinalvirtual . End of recursive chain of calls, does nothing. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 233 of file RLoopManager.hxx. ◆ Register() [1/5]. void RLoopManager::Register ; (; RDefineBase * ; definePtr). Definition at line 984 of file RLoopManager.cxx. ◆ Register() [2/5]. void RLoopManager::Register ; (; RDFInternal::RActionBase * ; actionPtr). Definition at line 946 of file RLoopManager.cxx. ◆ Register() [3/5]. void RLoopManager::Register ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:21903,clear,clears,21903,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,1,['clear'],['clears']
Usability,"ds for the first parameter and a lower bound for the second parameter; fitter.SetFunction( fitFunction, false);; fitter.Config().ParSettings(0).SetLimits(0,1.E6);; fitter.Config().ParSettings(2).SetLowerLimit(0);; Note that a ROOT::Fit::ParameterSettings objects exists for each fit parameter and it created by the ROOT::Fit::FitConfig class, after the model function has been set in the Fitter. Only when the function is set, the number of parameter is known and automatically the FitConfig creates the corresponding ParameterSetting objects.; When fitting, different minimizer can be used. The can be implemented in different libraries and loaded ar run time by the plug-in manager system of ROOT. Each different minimizer (e.g. Minuit, Minuit2, Fumili, etc.) consists of a different implementation of the ROOT::Math::Minimizer interface. Within the same minimizer, thus within the same class implementing the Minimizer interface, different algorithms can exist. For example in the case of Minuit, we have Migrad, Simplex or Minimize. The minimizer and its corresponding algorithm, when available, can be set by using the function FitConfig::SetMinimizer(""minimizerName"") or by using directly the ROOT:Math::MinimizerOptions class.; If the requested minimizer is not available in ROOT, the default one is used. The default minimizer type and algorithm can be specified by using the static function ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""minimizerName""); 5.7.4 Minimizer Libraries and Algorithms; The list of available minimizer libraries currently available in ROOT, with their corresponding available algorithms is the following one. Some minimizers (e.g. Minuit) contain several algorithms that the user can choose. Others are based on a single algorithm (e.g. Fumili). Minuit (library libMinuit). Old version of Minuit, based on the TMinuit class. The list of possible algorithms are:. Migrad (default one); Simplex; Minimize (it is a combination of Migrad and Simplex); MigradImprov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:201652,Simpl,Simplex,201652,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simplex']
Usability,"ds/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . #include <TPad.h>. Inheritance diagram for TPad:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkFraming Frame is requested. . kHori Pad is horizontal. . kClipFrame Clip on frame. . kPrintingPS PS Printing. . kCannotMove Fixed position. . kClearAfterCR Clear after CR. . Definition at line 153 of file TPad.h. Constructor & Destructor Documentation. ◆ TPad() [1/3]. TPad::TPad ; (; const TPad & ; pad). privatedelete . ◆ TPad() [2/3]. TPad::TPad ; (; ). Pad default constructor. ; Definition at line 132 of file TPad.cxx. ◆ TPad() [3/3]. TPad::TPad ; (; const char * ; name, . const char * ; title, . Double_t ; xlow, . Double_t ; ylow, . Double_t ; xup, . Double_t ; yup, . Color_t ; color = -1, . Short_t ; bordersize = -1, . Short_t ; bordermode = -2 . ). Pad constructor. ; A pad is a linked list of primitives. A pad is contained in a canvas. It may contain other pads. A pad has attributes. When a pad is created, the attributes defined in the current style are copied to the pad attributes.; Parameters. [in]namepad name ; [in]titlepad title ; [in]xlow[0,1] is the position of the bottom left point of the pad expressed in the mother pad reference system ; [in]ylow[0,1] is the Y position of this point. ; [in]xup[0,1] is the x position of the to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:52378,Clear,Clear,52378,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Clear'],['Clear']
Usability,"ds/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TGContainerScrollTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGContainerScrollTimer(). TGContainerScrollTimer::TGContainerScrollTimer ; (; TGContainer * ; t). inline . Definition at line 118 of file TGCanvas.cxx. Member Function Documentation. ◆ Notify(). Bool_t TGContainerScrollTimer::Notify ; (; ). overridevirtual . on-timeout ; Implements TSysEvtHandler.; Definition at line 125 of file TGCanvas.cxx. Member Data Documentation. ◆ fContainer. TGContainer* TGContainerScrollTimer::fContainer. private . Definition at line 116 of file TGCanvas.cxx. gui/gui/src/TGCanvas.cxx. TGContainerScrollTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainerScrollTimer.html:17836,Guid,Guide,17836,doc/master/classTGContainerScrollTimer.html,https://root.cern,https://root.cern/doc/master/classTGContainerScrollTimer.html,1,['Guid'],['Guide']
Usability,"dth; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). virtual ~TGProgressBar(); { }. Float_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGProgressBar.html:19118,progress bar,progress bar,19118,root/html528/TGProgressBar.html,https://root.cern,https://root.cern/root/html528/TGProgressBar.html,4,['progress bar'],['progress bar']
Usability,"dths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleTab(); Creates ""Style"" tab. void CreateGuidesTab(); Create ""Guides"" tab. void CreateClippingTab(); Create GUI controls - clip type (none/plane/box) and plane/box properties. void CreateExtrasTab(); Create Extra Tab controls - camera rotator and stereo. void UpdateReferencePosState(); Enable/disable reference position (x/y/z) number edits based on; reference check box. void SetGuides(); Configuration of guides GUI called from SetModel(). void SetRotatorMode(). void UpdateRotator(); Update rotator related variables. void DoRotatorStart(); Start auto-rotator. void DoRotatorStop(); Stop auto-rotator. void DoASavImageGUIBaseName(const char* t); Update base-name. void DoASavImageGUIOutMode(Int_t m); Update output mode. void DoASavImageStart(); Start auto-rotator image auto-save. void DoASavImageStop(); Stop auto-rotator image auto-save. void UpdateStereo(); Update stereo related variables. TGLViewerEditor(const TGLViewerEditor& ). void DetachFromPad(); {fIsInPad = kFALSE;}. » Author: Alja Mrak-Tadel, Matevz Tadel, Timur Pocheptsov 08/03/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-05-01 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLViewerEditor.html:24162,guid,guides,24162,root/html534/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html534/TGLViewerEditor.html,1,['guid'],['guides']
Usability,"dths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleTab(); Creates ""Style"" tab. void CreateGuidesTab(); Create ""Guides"" tab. void CreateClippingTab(); Create GUI controls - clip type (none/plane/box) and plane/box properties. void CreateExtrasTab(); Create Extra Tab controls - camera rotator and stereo. void UpdateReferencePosState(); Enable/disable reference position (x/y/z) number edits based on; reference check box. void SetGuides(); Configuration of guides GUI called from SetModel(). void SetRotatorMode(). void UpdateRotator(); Update rotator related variables. void DoRotatorStart(); Start auto-rotator. void DoRotatorStop(); Stop auto-rotator. void DoASavImageGUIBaseName(const char* t); Update base-name. void DoASavImageGUIOutMode(Int_t m); Update output mode. void DoASavImageStart(); Start auto-rotator image auto-save. void DoASavImageStop(); Stop auto-rotator image auto-save. void UpdateStereo(); Update stereo related variables. TGLViewerEditor(const TGLViewerEditor& ). void DetachFromPad(); {fIsInPad = kFALSE;}. » Author: Alja Mrak-Tadel, Matevz Tadel, Timur Pocheptsov 08/03/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLViewerEditor.html:24984,guid,guides,24984,root/html604/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html604/TGLViewerEditor.html,1,['guid'],['guides']
Usability,"dths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleTab(); Creates ""Style"" tab. void CreateGuidesTab(); Create ""Guides"" tab. void CreateClippingTab(); Create GUI controls - clip type (none/plane/box) and plane/box properties. void CreateExtrasTab(); Create Extra Tab controls - camera rotator and stereo. void UpdateReferencePosState(); Enable/disable reference position (x/y/z) number edits based on; reference check box. void SetGuides(); Configuration of guides GUI called from SetModel(). void SetRotatorMode(). void UpdateRotator(); Update rotator related variables. void DoRotatorStart(); Start auto-rotator. void DoRotatorStop(); Stop auto-rotator. void DoASavImageGUIBaseName(const char* t); Update base-name. void DoASavImageGUIOutMode(Int_t m); Update output mode. void DoASavImageStart(); Start auto-rotator image auto-save. void DoASavImageStop(); Stop auto-rotator image auto-save. void UpdateStereo(); Update stereo related variables. TGLViewerEditor(const TGLViewerEditor& ). void DetachFromPad(); {fIsInPad = kFALSE;}. » Author: Alja Mrak-Tadel, Matevz Tadel, Timur Pocheptsov 08/03/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLViewerEditor.html:24984,guid,guides,24984,root/html602/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html602/TGLViewerEditor.html,1,['guid'],['guides']
Usability,"dual axis but it does not give any hints about the correlations between the axes.; Avery simple technique allows to make the clusters appearing: Instead of painting solid lines we paint dotted lines. The cluttering of each individual line is reduced and the clusters show clearly as we can see on the next figure. The spacing between the dots is a parameter which can be adjusted in order to get the best results. Using dotted lines is a very simple method to reduce the cluttering. Interactivity is a very important aspect of the Parallel Coordinates plots. To really explore the data set it is essential to act directly with the events and the axes. For instance, changing the axes order may show clusters which were not visible in a different order. On the next figure the axes order has been changed interactively. We can see that many more clusters appear and all the “random spheres” we put in the data set are now clearly visible. Having moved the variables u,v,w after the variables x,y,z the correlation between these two sets of variables is clear also. Axis order is very important to show clusters. To pursue further data sets exploration we have implemented the possibility to define selections interactively. A selection is a set of ranges combined together. Within a selection, ranges along the same axis are combined with logical OR, and ranges on different axes with logical AND. A selection is displayed on top of the complete data set using its own color. Only the events fulfilling the selection criteria (ranges) are displayed. Ranges are defined interactively using cursors, like on the first axis on the figure. Several selections can be defined at the same time, each selection having its own color. Selections are set of ranges which can be defined interactively. Several selections can been defined. Each cluster is now clearly visible and the zone with crossing clusters is now understandable whereas, without any selection or with only a single one, it was not easy to und",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:614561,clear,clear,614561,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clear']
Usability,duct. RooProfileLL. RooProjectedPdf. RooProofDriverSelector. RooPullVar. RooRandomizeParamMCSModule. RooRangeBinning. RooRealAnalytic. RooRealBinding←. RooDataProjBinding. RooRealAnalytic. RooRealIntegral. RooRealMPFE. RooRealProxy. RooRealSumPdf. RooRealVar. RooRealVarSharedProperties. RooRecursiveFraction. RooRefCountList. RooResolutionModel←. RooAddModel. RooGExpModel. RooGaussModel. RooTruthModel. RooScaledFunc. RooSegmentedIntegrator1D←. RooSegmentedIntegrator2D. RooSegmentedIntegrator2D. RooSetPair. RooSetProxy. RooSharedProperties←. RooCategorySharedProperties. RooRealVarSharedProperties. RooSharedPropertiesList. RooSimGenContext. RooSimPdfBuilder. RooSimWSTool. RooSimWSTool::MultiBuildConfig. RooSimWSTool::SplitRule. RooSimultaneous. RooStats::AcceptanceRegion. RooStats::BayesianCalculator. RooStats::CombinedCalculator←. RooStats::ProfileLikelihoodCalculator. RooStats::ConfInterval←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::DebuggingSampler. RooStats::DebuggingTestStat. RooStats::FeldmanCousins. RooStats::HLFactory. RooStats::Heavyside. RooStats::HybridCalculator. RooStats::HybridPlot. RooStats::HybridResult. RooStats::HypoTestInverter. RooStats::HypoTestInverterPlot. RooStats::HypoTestInverterResult. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCInterval. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::MetropolisHastings. RooStats::ModelConfig. RooStats::NeymanConstruction. RooStats::NumEventsTestStat. RooStats::PdfProposal. RooStats::PointSetInterval. RooStats::ProfileLikelihoodCalculator. RooStats::ProfileLikelihoodTestStat. RooStats::ProposalFunction←. RooStats::PdfProposal. RooStats::UniformProposal. RooStats::ProposalHelper. RooStats::SPlot. RooStats::SamplingDistPlot. RooStats::SamplingDistribut,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassHierarchy.html:22413,Simpl,SimpleInterval,22413,root/html526/ClassHierarchy.html,https://root.cern,https://root.cern/root/html526/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,"duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization choice is only fixed for those; RooAddPdf components that have the default 'automatic' interpretation of; coefficients (i.e. the interpretation is defined by the observables passed; to getVal()). If force is true, also RooAddPdf that already have a fixed; interpretation are changed to a new fixed interpretation. void fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization range choice is only fixed for those; RooAddPdf components that currently use the de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:63138,clear,clearing,63138,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['clear'],['clearing']
Usability,"dx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Bool_t IsAscending ();  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * LastLink () const;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; TObject * Remove (const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:9682,Clear,Clear,9682,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,2,['Clear'],['Clear']
Usability,"dx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Bool_t IsAscending ();  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * LastLink () const;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordSelect.html:4165,Clear,Clear,4165,doc/master/classTParallelCoordSelect.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordSelect.html,2,['Clear'],['Clear']
Usability,"dx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * LastLink () const;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; TObject * Remove (const TObjLinkPtr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserHistory.html:2089,Clear,Clear,2089,doc/master/classTRootBrowserHistory.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserHistory.html,1,['Clear'],['Clear']
Usability,"dx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * LastLink () const;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTList.html:5510,Clear,Clear,5510,doc/master/classTList.html,https://root.cern,https://root.cern/doc/master/classTList.html,6,['Clear'],['Clear']
Usability,"dx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TFunction object files. ;  ; TFunction * Find (DeclId_t id) const;  Return the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search for the a function just by name or create it if its not already in the list. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; TObjLink * FirstLink () const override;  ; TFunction * Get (DeclId_t id);  Return (after creating it if necessary) the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; Int_t GetLast () const override;  Returns index of last object in collection. ;  ; virtual TList * GetListForObject (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctions.html:2795,Clear,Clear,2795,doc/master/classTListOfFunctions.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html,1,['Clear'],['Clear']
Usability,"dx, . Double_t ; dy, . Double_t ; dz, . Double_t ; sx, . Double_t ; sy, . Double_t ; sz, . TGeoRotation * ; rot . ). constructor ; Definition at line 2256 of file TGeoMatrix.cxx. ◆ TGeoGenTrans() [4/4]. TGeoGenTrans::TGeoGenTrans ; (; const char * ; name, . Double_t ; dx, . Double_t ; dy, . Double_t ; dz, . Double_t ; sx, . Double_t ; sy, . Double_t ; sz, . TGeoRotation * ; rot . ). constructor ; Definition at line 2269 of file TGeoMatrix.cxx. ◆ ~TGeoGenTrans(). TGeoGenTrans::~TGeoGenTrans ; (; ). override . destructor ; Definition at line 2282 of file TGeoMatrix.cxx. Member Function Documentation. ◆ Class(). static TClass * TGeoGenTrans::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoGenTrans::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoGenTrans::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 395 of file TGeoMatrix.h. ◆ Clear(). void TGeoGenTrans::Clear ; (; Option_t * ; option = """"). overridevirtual . clear the fields of this transformation ; Reimplemented from TGeoCombiTrans.; Definition at line 2287 of file TGeoMatrix.cxx. ◆ DeclFileName(). static const char * TGeoGenTrans::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 395 of file TGeoMatrix.h. ◆ GetScale(). const Double_t * TGeoGenTrans::GetScale ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoCombiTrans.; Definition at line 393 of file TGeoMatrix.h. ◆ Inverse(). TGeoHMatrix TGeoGenTrans::Inverse ; (; ); const. overridevirtual . Return a temporary inverse of this. ; Reimplemented from TGeoCombiTrans.; Definition at line 2312 of file TGeoMatrix.cxx. ◆ IsA(). TClass * TGeoGenTrans::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoCombiTrans.; Definition at line 395 of file TGeoMatrix.h. ◆ MakeClone(). TGeoMatrix *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGenTrans.html:20024,Clear,Clear,20024,doc/master/classTGeoGenTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html,1,['Clear'],['Clear']
Usability,"dx. Returns 0 if idx is out of range. ; Implements TSeqCollection.; Reimplemented in TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 355 of file TList.cxx. ◆ Before(). TObject * TList::Before ; (; const TObject * ; obj); const. overridevirtual . Returns the object before object obj. ; Obj is found using the object's IsEqual() method. Returns 0 if obj is first in list. ; Implements TSeqCollection.; Reimplemented in TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 369 of file TList.cxx. ◆ Class(). static TClass * TList::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TList::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TList::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 112 of file TList.h. ◆ Clear(). void TList::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the list. ; Does not delete the objects unless the TList is the owner (set via SetOwner()) and option ""nodelete"" is not set. If option=""nodelete"" then don't delete any heap objects that were marked with the kCanDelete bit, otherwise these objects will be deleted (this option is used by THashTable::Clear()). ; Implements TCollection.; Reimplemented in TListOfEnums, TListOfEnumsWithLock, TListOfDataMembers, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 400 of file TList.cxx. ◆ DeclFileName(). static const char * TList::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 112 of file TList.h. ◆ Delete(). void TList::Delete ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the list AND delete all heap based objects. ; If option=""slow"" then keep list consistent during delete. Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTList.html:29383,Clear,Clear,29383,doc/master/classTList.html,https://root.cern,https://root.cern/doc/master/classTList.html,1,['Clear'],['Clear']
Usability,"dz, . Double_t ; sx, . Double_t ; sy, . Double_t ; sz, . TGeoRotation * ; rot . ). constructor ; Definition at line 2256 of file TGeoMatrix.cxx. ◆ TGeoGenTrans() [4/4]. TGeoGenTrans::TGeoGenTrans ; (; const char * ; name, . Double_t ; dx, . Double_t ; dy, . Double_t ; dz, . Double_t ; sx, . Double_t ; sy, . Double_t ; sz, . TGeoRotation * ; rot . ). constructor ; Definition at line 2269 of file TGeoMatrix.cxx. ◆ ~TGeoGenTrans(). TGeoGenTrans::~TGeoGenTrans ; (; ). override . destructor ; Definition at line 2282 of file TGeoMatrix.cxx. Member Function Documentation. ◆ Class(). static TClass * TGeoGenTrans::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoGenTrans::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoGenTrans::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 395 of file TGeoMatrix.h. ◆ Clear(). void TGeoGenTrans::Clear ; (; Option_t * ; option = """"). overridevirtual . clear the fields of this transformation ; Reimplemented from TGeoCombiTrans.; Definition at line 2287 of file TGeoMatrix.cxx. ◆ DeclFileName(). static const char * TGeoGenTrans::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 395 of file TGeoMatrix.h. ◆ GetScale(). const Double_t * TGeoGenTrans::GetScale ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoCombiTrans.; Definition at line 393 of file TGeoMatrix.h. ◆ Inverse(). TGeoHMatrix TGeoGenTrans::Inverse ; (; ); const. overridevirtual . Return a temporary inverse of this. ; Reimplemented from TGeoCombiTrans.; Definition at line 2312 of file TGeoMatrix.cxx. ◆ IsA(). TClass * TGeoGenTrans::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoCombiTrans.; Definition at line 395 of file TGeoMatrix.h. ◆ MakeClone(). TGeoMatrix * TGeoGenTrans::MakeClone ; (; ); c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGenTrans.html:20052,Clear,Clear,20052,doc/master/classTGeoGenTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html,1,['Clear'],['Clear']
Usability,"d ; ). Set default style options (also called in the constructor that takes a HypoTestResult). ; Definition at line 76 of file HypoTestPlot.cxx. ◆ ApplyResult(). void HypoTestPlot::ApplyResult ; (; HypoTestResult & ; result, . Option_t * ; opt = ""NORMALIZE HIST"" . ). Applies a HypoTestResult. ; Definition at line 44 of file HypoTestPlot.cxx. ◆ Class(). static TClass * RooStats::HypoTestPlot::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::HypoTestPlot::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::HypoTestPlot::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 38 of file HypoTestPlot.h. ◆ DeclFileName(). static const char * RooStats::HypoTestPlot::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 38 of file HypoTestPlot.h. ◆ IsA(). TClass * RooStats::HypoTestPlot::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 38 of file HypoTestPlot.h. ◆ Streamer(). void RooStats::HypoTestPlot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::HypoTestPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 38 of file HypoTestPlot.h. Member Data Documentation. ◆ fHypoTestResult. HypoTestResult* RooStats::HypoTestPlot::fHypoTestResult = nullptr. private . Definition at line 35 of file HypoTestPlot.h. Libraries for RooStats::HypoTestPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HypoTestPlot.h; roofit/roostats/src/HypoTestPlot.cxx. RooStatsHypoTestPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestPlot.html:21413,Guid,Guide,21413,doc/master/classRooStats_1_1HypoTestPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestPlot.html,1,['Guid'],['Guide']
Usability,"d AddAt (TObject *, Int_t) override;  ; void AddAtAndExpand (TObject *, Int_t) override;  Add object at position idx. ;  ; Int_t AddAtFree (TObject *) override;  Return the position of the new object. ;  ; void AddBefore (const TObject *, TObject *) override;  ; void AddFirst (TObject *) override;  ; void AddLast (TObject *) override;  ; TObject * AddrAt (Int_t idx);  ; void BypassStreamer (Bool_t bypass=kTRUE);  When the kBypassStreamer bit is set, the automatically generated Streamer can call directly TClass::WriteBuffer. ;  ; Bool_t CanBypassStreamer () const;  ; void Clear (Option_t *option="""") override;  Clear the clones array. ;  ; void Compress () override;  Remove empty slots from array. ;  ; TObject * ConstructedAt (Int_t idx);  Get an object at index 'idx' that is guaranteed to have been constructed. ;  ; TObject * ConstructedAt (Int_t idx, Option_t *clear_options);  Get an object at index 'idx' that is guaranteed to have been constructed. ;  ; void Delete (Option_t *option="""") override;  Clear the clones array. ;  ; void Expand (Int_t newSize) override;  Expand or shrink the array to newSize elements. ;  ; virtual void ExpandCreate (Int_t n);  Expand or shrink the array to n elements and create the clone objects by calling their default ctor. ;  ; virtual void ExpandCreateFast (Int_t n);  Expand or shrink the array to n elements and create the clone objects by calling their default ctor. ;  ; TClass * GetClass () const;  ; TClass * IsA () const override;  ; void MultiSort (Int_t nTCs, TClonesArray **tcs, Int_t upto=kMaxInt);  Sort multiple TClonesArrays simultaneously with this array. ;  ; TObject * New (Int_t idx);  Create an object of type fClass with the default ctor at the specified index. ;  ; TClonesArray & operator= (const TClonesArray &tc);  Assignment operator. ;  ; TObject * operator[] (Int_t idx) const override;  Return the object at position idx. Returns 0 if idx is out of bounds. ;  ; TObject *& operator[] (Int_t idx) override;  Return pointe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:7784,Clear,Clear,7784,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"d SetHeader (const char *s, Int_t hmode, Int_t cmode, Int_t idx);  ; void SetHeaders (Int_t ncolumns);  ; virtual void SetListView (TGListView *lv);  ; void SetMultipleSelection (Bool_t multi=kTRUE);  ; virtual void SetViewMode (EListViewMode viewMode);  Set list view mode for container. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGContainer;  TGContainer (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a canvas container. ;  ;  TGContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a canvas container. ;  ;  ~TGContainer () override;  Delete canvas container. ;  ; virtual void AdjustPosition ();  Move content to position of highlighted/activated frame. ;  ; virtual void Associate (const TGWindow *w);  ; virtual void ClearViewPort ();  Clear view port and redraw full content. ;  ; virtual void Clicked (TGFrame *f, Int_t btn);  Emit Clicked() signal. ;  ; virtual void Clicked (TGFrame *f, Int_t btn, Int_t x, Int_t y);  Emit Clicked() signal. ;  ; virtual void CurrentChanged (Int_t x, Int_t y);  Emit signal when current position changed. ;  ; virtual void CurrentChanged (TGFrame *f);  Emit signal when current selected frame changed. ;  ; virtual void DoubleClicked (TGFrame *f, Int_t btn);  Emit DoubleClicked() signal. ;  ; virtual void DoubleClicked (TGFrame *f, Int_t btn, Int_t x, Int_t y);  Emit DoubleClicked() signal. ;  ; virtual void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw a region of container in viewport. ;  ; virtual void End (Bool_t select=kFALSE);  Move to the bottom-right corner of container. ;  ; virtual TGFrameElement * FindFrame (Int_t x, Int_t y, Bool_t exclude=kTRUE);  Find frame located int container at position x,y. ;  ; virtual TGFrame * FindFrameByName (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileContainer.html:5890,Clear,ClearViewPort,5890,doc/master/classTGFileContainer.html,https://root.cern,https://root.cern/doc/master/classTGFileContainer.html,4,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"d SetPosition (Double_t x=0, Double_t y=0, Double_t z=0);  ; virtual void SetVisibility (Int_t vis=1);  Set visibility for this node and its sons. ;  ; void Sizeof3D () const override;  Return total size of this 3-D Node with its attributes. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateMatrix ();  Update global rotation matrix/translation vector for this node this function must be called before invoking Local2Master. ;  ; virtual void UpdateTempMatrix (const Double_t *dx1, const Double_t *rmat1, Double_t x, Double_t y, Double_t z, Double_t *matrix, Double_t *dxnew, Double_t *rmatnew);  Compute new translation vector and global matrix. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNodeDiv.html:5055,Clear,Clear,5055,doc/master/classTNodeDiv.html,https://root.cern,https://root.cern/doc/master/classTNodeDiv.html,1,['Clear'],['Clear']
Usability,"d SetWRatio (Float_t r);  ; void SplitHor ();  Horizontally split the frame, and if it contains a child frame, ask the user where to keep it (top or bottom). ;  ; void SplitHorizontal (const char *side=""top"");  Horizontally split the frame, and if it contains a child frame, ask the user where to keep it (top or bottom). ;  ; void SplitVer ();  Vertically split the frame, and if it contains a child frame, ask the user where to keep it (left or right). ;  ; void SplitVertical (const char *side=""left"");  Vertically split the frame, and if it contains a child frame, ask the user where to keep it (left or right). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwallowBack ();  Swallow back the child frame previously extracted, and close its parent (transient frame). ;  ; void SwitchToMain ();  Switch the actual embedded frame to the main (first) split frame. ;  ; void Undocked (TGFrame *frame);  Emit Undocked() signal. ;  ; void UnSplit (const char *which);  Close (unmap and remove from the list of frames) the frame contained in this split frame. ;  ; virtual void VSplit (UInt_t w=0);  Vertically split the frame. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitFrame.html:3198,Undo,Undocked,3198,doc/master/classTGSplitFrame.html,https://root.cern,https://root.cern/doc/master/classTGSplitFrame.html,2,['Undo'],['Undocked']
Usability,"d SlaveTerminate ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual int Version () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:5173,Clear,Clear,5173,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,3,['Clear'],['Clear']
Usability,"d StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxSet.html:24781,Clear,Clear,24781,doc/master/classTEveBoxSet.html,https://root.cern,https://root.cern/doc/master/classTEveBoxSet.html,6,['Clear'],['Clear']
Usability,"d StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleLight (ELight light);  Toggle light on/off. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLLightSet.html:2993,Clear,Clear,2993,doc/master/classTGLLightSet.html,https://root.cern,https://root.cern/doc/master/classTGLLightSet.html,1,['Clear'],['Clear']
Usability,"d StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEvePointSelectorConsumer;  TEvePointSelectorConsumer (ETreeVarType_e cs=kTVT_XYZ);  ; virtual ~TEvePointSelectorConsumer ();  ; ETreeVarType_e GetSourceCS () const;  ; void SetSourceCS (ETreeVarType_e cs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:33813,Clear,ClearProjectedList,33813,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,6,['Clear'],['ClearProjectedList']
Usability,"d selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:74523,clear,clearShapeDirty,74523,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,3,['clear'],"['clearShapeDirty', 'clearValueAndShapeDirty', 'clearValueDirty']"
Usability,"e & ; ). privatedelete . ◆ TGUndockedFrame() [2/2]. TGUndockedFrame::TGUndockedFrame ; (; const TGWindow * ; p = nullptr, . TGDockableFrame * ; dockable = nullptr . ). Create the undocked (transient) frame. ; Definition at line 176 of file TGDockableFrame.cxx. ◆ ~TGUndockedFrame(). TGUndockedFrame::~TGUndockedFrame ; (; ). override . Delete undocked frame. Puts back dockable frame in its original container. ; Definition at line 193 of file TGDockableFrame.cxx. Member Function Documentation. ◆ Class(). static TClass * TGUndockedFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGUndockedFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGUndockedFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGDockableFrame.h. ◆ CloseWindow(). void TGUndockedFrame::CloseWindow ; (; ). overridevirtual . Close undocked frame (called via WM close button). ; Reimplemented from TGMainFrame.; Definition at line 213 of file TGDockableFrame.cxx. ◆ DeclFileName(). static const char * TGUndockedFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGDockableFrame.h. ◆ FixSize(). void TGUndockedFrame::FixSize ; (; ). Fix the size of the undocked frame so it cannot be changed via the WM. ; Definition at line 203 of file TGDockableFrame.cxx. ◆ IsA(). TClass * TGUndockedFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGTransientFrame.; Definition at line 78 of file TGDockableFrame.h. ◆ operator=(). TGUndockedFrame & TGUndockedFrame::operator= ; (; const TGUndockedFrame & ; ). privatedelete . ◆ Streamer(). void TGUndockedFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGTransientFrame. ◆ StreamerNVirtual(). void TGUndoc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUndockedFrame.html:37491,undo,undocked,37491,doc/master/classTGUndockedFrame.html,https://root.cern,https://root.cern/doc/master/classTGUndockedFrame.html,1,['undo'],['undocked']
Usability,"e 'optStr' can contain a comma-separated list of servers for which the information is wanted. If ':lite:' (case insensitive) is specified in 'optStr' only the global information in the TFileCollection is retrieved; useful to only get the list of available datasets. ; Reimplemented in TProofLite.; Definition at line 10809 of file TProof.cxx. ◆ GetDataSetSrvMaps(). static TList * TProof::GetDataSetSrvMaps ; (; const TString & ; srvmaps). staticprivate . ◆ GetEnabledPackages(). TList * TProof::GetEnabledPackages ; (; ); const. inlineprotected . Definition at line 735 of file TProof.h. ◆ Getenv(). TString TProof::Getenv ; (; const char * ; env, . const char * ; ord = ""0"" . ). Get value of environment variable 'env' on node 'ord'. ; Definition at line 6644 of file TProof.cxx. ◆ GetEnvVars(). const TList * TProof::GetEnvVars ; (; ). static . Get environemnt variables. ; Definition at line 11751 of file TProof.cxx. ◆ GetFeedbackList(). TList * TProof::GetFeedbackList ; (; ); const. Return feedback list. ; Definition at line 10033 of file TProof.cxx. ◆ GetFileInCmd(). Bool_t TProof::GetFileInCmd ; (; const char * ; cmd, . TString & ; fn . ). staticprotected . Static method to extract the filename (if any) form a CINT command. ; Returns kTRUE and the filename in 'fn'; returns kFALSE if not found or not appliable. ; Definition at line 6495 of file TProof.cxx. ◆ GetGroup(). const char * TProof::GetGroup ; (; ); const. inline . Definition at line 907 of file TProof.h. ◆ GetImage(). const char * TProof::GetImage ; (; ); const. inline . Definition at line 910 of file TProof.h. ◆ GetInputData(). Int_t TProof::GetInputData ; (; TList * ; input, . const char * ; cachedir, . TString & ; emsg . ). staticprotected . Get the input data from the file defined in the input list. ; Definition at line 12413 of file TProof.cxx. ◆ GetInputList(). TList * TProof::GetInputList ; (; ). Get input list. ; Definition at line 9753 of file TProof.cxx. ◆ GetLastLog(). TMacro * TProof::GetLastLog ; (; )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:94682,feedback,feedback,94682,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"e () const;  Returns the name of undo command. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; void ls (Option_t *option="""") const override;  ls this command and merged commands ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void Redo (Option_t *option="""");  Execute command and then merge commands. ;  ; virtual void SetArgs (Int_t nargs,...);  Set do/redo and undo parameters. ;  ; virtual void SetName (const char *name);  Sets name of the command. ;  ; virtual void SetRedoArgs (Int_t nargs,...);  Set redo parameters. ;  ; virtual void SetTitle (const char *title);  Sets description of the command. ;  ; virtual void SetUndoArgs (Int_t nargs,...);  Set undo parameters. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Undo (Option_t *option="""");  Un-execute all merged commands and the command. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddAfter (TObjLink *after, TObject *obj);  Insert object after the specified",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:7617,undo,undo,7617,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"e ();  Return pointer to TFile containing this friend TTree. ;  ; virtual TTree * GetParentTree () const;  ; virtual TTree * GetTree ();  Return pointer to friend TTree. ;  ; virtual const char * GetTreeName () const;  Get the actual TTree name of the friend. ;  ; TClass * IsA () const override;  ; bool IsUpdated () const;  ; void ls (Option_t *option="""") const override;  List this friend element. ;  ; void MarkUpdated ();  ; void RecursiveRemove (TObject *obj) override;  Forget deleted elements. ;  ; void Reset ();  ; void ResetUpdated ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFriendElement.html:3090,Clear,Clear,3090,doc/master/classTFriendElement.html,https://root.cern,https://root.cern/doc/master/classTFriendElement.html,1,['Clear'],['Clear']
Usability,"e ()=0;  ; virtual void ZoomOut ()=0;  ; virtual void ZoomView (TVirtualPad *pad=nullptr, Double_t zoomFactor=1.25)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTView.html:6249,Clear,Clear,6249,doc/master/classTView.html,https://root.cern,https://root.cern/doc/master/classTView.html,1,['Clear'],['Clear']
Usability,"e (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::unique_ptr< RooRatio > makeRatio (const char *name, const char *title, RooArgList &nr, RooArgList &dr);  Return the RooRatio form of products and denominators of morphing functions. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:56012,clear,clearEvalErrorLog,56012,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"e (e.g. either A or B or C) \n \; 1546 \n \; 1547 \""WeightInitialization\"" \n \; 1548 - XAVIER \n \; 1549 [recommended] \n \; 1550 \""Xavier Glorot & Yoshua Bengio\""-style of initializing the weights. The weights are chosen randomly \n \; 1551 such that the variance of the values of the nodes is preserved for each layer. \n \; 1552 - XAVIERUNIFORM \n \; 1553 The same as XAVIER, but with uniformly distributed weights instead of gaussian weights \n \; 1554 - LAYERSIZE \n \; 1555 Random values scaled by the layer size \n \; 1556 \n \; 1557 \""TrainingStrategy\"" \n \; 1558 - example: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5|LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFraction=0.0,DropRepetitions=5\"" \n \; 1559 - explanation: two stacked training settings separated by \""|\"" \n \; 1560 . first training setting: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5\"" \n \; 1561 . second training setting : \""LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFractions=0.0,DropRepetitions=5\"" \n \; 1562 . LearningRate : \n \; 1563 - recommended for classification: 0.1 initially, 1e-4 later \n \; 1564 - recommended for regression: 1e-4 and less \n \; 1565 . Momentum : \n \; 1566 preserve a fraction of the momentum for the next training batch [fraction = 0.0 - 1.0] \n \; 1567 . Repetitions : \n \; 1568 train \""Repetitions\"" repetitions with the same minibatch before switching to the next one \n \; 1569 . ConvergenceSteps : \n \; 1570 Assume that convergence is reached after \""ConvergenceSteps\"" cycles where no improvement \n \; 1571 of the error on the test samples has been found. (Mind that only at each \""TestRepetitions\"" \n \; 1572 cycle ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:58127,Learn,LearningRate,58127,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Learn'],['LearningRate']
Usability,"e *)=0;  ; virtual Long64_t GetEntryNumberWithBestIndex (Long64_t major, Long64_t minor) const =0;  ; virtual Long64_t GetEntryNumberWithIndex (Long64_t major, Long64_t minor) const =0;  ; virtual const char * GetMajorName () const =0;  ; virtual const char * GetMinorName () const =0;  ; virtual Long64_t GetN () const =0;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; virtual bool IsValidFor (const TTree *parent)=0;  ; virtual void SetTree (TTree *T)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateFormulaLeaves (const TTree *parent)=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualIndex.html:1572,Clear,Clear,1572,doc/master/classTVirtualIndex.html,https://root.cern,https://root.cern/doc/master/classTVirtualIndex.html,1,['Clear'],['Clear']
Usability,"e *tree)TBranchinlinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetupAddresses()TBranchvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTBranchvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TBranchinline; SupportsBulkRead() constTBranch; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TBranch(const TBranch &)=deleteTBranchprivate; TBranch()TBranch; TBranch(TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit)TBranch; TBranch(TBranch *parent, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit)TBranch; TBranchElementTBranchfriend; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TIOFeatures typedefTBranchprivate; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TTreeTBranchfriend; TTreeCacheTBranchfriend; TTreeClonerTBranchfriend; UpdateAddress()TBranchinlinevirtual; UpdateFile()TBranchvirtual; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; WriteBasket(TBasket *basket, Int_t where)TBranchinlineprotected; WriteBasketImpl(TBasket *basket, Int_t where, ROOT::Internal::TBranchIMTHelper *)TBranchprivate; ~TAttFill()TAttFillvirtual; ~TBranch() overrideTBranch; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch-members.html:13738,Guid,Guide,13738,doc/master/classTBranch-members.html,https://root.cern,https://root.cern/doc/master/classTBranch-members.html,1,['Guid'],['Guide']
Usability,"e - responds dynamically and presents the user interface according to the selected object in the canvas. 2.3.1 Main Menus and Toolbar; At the top of the canvas window are File, Edit, View, Options, Inspect, Classes and Help menus.; 2.3.1.1 File Menu. New Canvas: creates a new canvas window in the current ROOT session.; Open…: popup a dialog to open a file.; Close Canvas: close the canvas window.; Save: save the drawing of the current canvas in a format selectable from the submenu. The current canvas name is used as a file name for various formats such as PostScript, GIF, JPEG, C macro file, root file.; Save As…: popup a dialog for saving the current canvas drawing in a new filename.; Print: popup a dialog to print the current canvas drawing; Quit ROOT: exit the ROOT session. 2.3.1.2 Edit Menu; There is only one active menu entry in the Edit menu. The others menu entries will be implemented and will become active in the near future. Clear: delete all objects in the canvas or in the selected pad according to the selected entry in the submenu. 2.3.1.3 View Menu. Editor: toggles the view of the editor. If it is selected activates and shows up the editor on the left side of the canvas window. According to the selected object, the editor loads the corresponding user interface for easy change of the object’s attributes.; Toolbar: toggles the view of the toolbar. If it is selected activates and shows up the toolbar. It contains buttons for easy and fast access to most frequently used commands and for graphics primitive drawing. Tool tips are provided for helping users.; Status Bar: toggles the view of the status bar. If it is selected, the status bar below the canvas window shows up. There the identification of the objects is displayed when moving the mouse (such as the object’s name, the object’s type, its coordinates, etc.).; Colors: creates a new canvas showing the color palette.; Markers: creates a new canvas showing the various marker styles.; Iconify: create the canvas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:37956,Clear,Clear,37956,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Clear'],['Clear']
Usability,"e . ! Number of processes to use for fold evaluation. (Default, no parallel evaluation) ; Definition at line 159 of file CrossValidation.h. ◆ fOutputEnsembling. TString TMVA::CrossValidation::fOutputEnsembling. private . ! How to combine output of individual folds ; Definition at line 161 of file CrossValidation.h. ◆ fOutputFactoryOptions. TString TMVA::CrossValidation::fOutputFactoryOptions. private . Definition at line 160 of file CrossValidation.h. ◆ fOutputFile. TFile* TMVA::CrossValidation::fOutputFile. private . Definition at line 162 of file CrossValidation.h. ◆ fResults. std::vector<CrossValidationResult> TMVA::CrossValidation::fResults. private . ! ; Definition at line 165 of file CrossValidation.h. ◆ fROC. Bool_t TMVA::CrossValidation::fROC. private . Definition at line 166 of file CrossValidation.h. ◆ fSilent. Bool_t TMVA::CrossValidation::fSilent. private . Definition at line 163 of file CrossValidation.h. ◆ fSplit. std::unique_ptr<CvSplitKFolds> TMVA::CrossValidation::fSplit. private . Definition at line 173 of file CrossValidation.h. ◆ fSplitExprString. TString TMVA::CrossValidation::fSplitExprString. private . Definition at line 164 of file CrossValidation.h. ◆ fSplitTypeStr. TString TMVA::CrossValidation::fSplitTypeStr. private . Definition at line 151 of file CrossValidation.h. ◆ fTransformations. TString TMVA::CrossValidation::fTransformations. private . Definition at line 167 of file CrossValidation.h. ◆ fVerbose. Bool_t TMVA::CrossValidation::fVerbose. private . Definition at line 168 of file CrossValidation.h. ◆ fVerboseLevel. TString TMVA::CrossValidation::fVerboseLevel. private . Definition at line 169 of file CrossValidation.h. Libraries for TMVA::CrossValidation:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CrossValidation.h; tmva/tmva/src/CrossValidation.cxx. TMVACrossValidation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:26688,Guid,Guide,26688,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,1,['Guid'],['Guide']
Usability,"e . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anything to the ROOT repository is mandatory.; The ROOT continuous integration infrastructure allows to automatically check the PR also on a battery of platform, for example including macos and linux boxes.; In order to be able to run all tests, the simple steps below need to be followed; Prepare your development area and build ROOT; mkdir RootDevelopment; cd RootDevelopment; git clone https://github.com/root-project/root; git clone https://github.com/root-project/roottest; mkdir build; cd build; echo Note the cmake options; cmake -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON ../root. Inspect and run the tests; From within the build directory. List all tests: ctest -N; List all test matching a regex: ctest -N -R myregex; Run all tests on N cores: ctest -j N. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:2246,simpl,simple,2246,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,1,['simpl'],['simple']
Usability,"e . Assignment operator, increases reference count to original class object. ; This routines assumes that the copy actually need to be done. ; Definition at line 69 of file TClassRef.cxx. ◆ GetClass(). TClass * TClassRef::GetClass ; (; ); const. inline . Definition at line 66 of file TClassRef.h. ◆ GetClassName(). const char * TClassRef::GetClassName ; (; ). inline . Definition at line 65 of file TClassRef.h. ◆ InternalGetClass(). TClass * TClassRef::InternalGetClass ; (; ); const. private . Return the current TClass object corresponding to fClassName. ; Definition at line 83 of file TClassRef.cxx. ◆ operator TClass *(). TClassRef::operator TClass * ; (; ); const. inline . Definition at line 70 of file TClassRef.h. ◆ operator->(). TClass * TClassRef::operator-> ; (; ); const. inline . Definition at line 69 of file TClassRef.h. ◆ operator=() [1/2]. TClassRef & TClassRef::operator= ; (; const TClassRef & ; rhs). inline . Definition at line 44 of file TClassRef.h. ◆ operator=() [2/2]. TClassRef & TClassRef::operator= ; (; TClass * ; rhs). inline . Definition at line 51 of file TClassRef.h. ◆ Reset(). void TClassRef::Reset ; (; ). inline . Definition at line 67 of file TClassRef.h. ◆ SetName(). void TClassRef::SetName ; (; const char * ; new_name). inline . Definition at line 61 of file TClassRef.h. Friends And Related Symbol Documentation. ◆ TClass. friend class TClass. friend . Ptr to the permanent TClass ptr/reference. ; Definition at line 34 of file TClassRef.h. Member Data Documentation. ◆ fClassName. std::string TClassRef::fClassName. private . Definition at line 31 of file TClassRef.h. ◆ fClassPtr. TClass* const* TClassRef::fClassPtr. private . Definition at line 32 of file TClassRef.h. Libraries for TClassRef:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TClassRef.h; core/meta/src/TClassRef.cxx. TClassRef. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassRef.html:5085,Guid,Guide,5085,doc/master/classTClassRef.html,https://root.cern,https://root.cern/doc/master/classTClassRef.html,1,['Guid'],['Guide']
Usability,e . CONS shape default destructor. ; Definition at line 74 of file TCONS.cxx. Member Function Documentation. ◆ Class(). static TClass * TCONS::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCONS::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCONS::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 45 of file TCONS.h. ◆ DeclFileName(). static const char * TCONS::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 45 of file TCONS.h. ◆ GetRmax2(). virtual Float_t TCONS::GetRmax2 ; (; ); const. inlinevirtual . Definition at line 43 of file TCONS.h. ◆ GetRmin2(). virtual Float_t TCONS::GetRmin2 ; (; ); const. inlinevirtual . Definition at line 42 of file TCONS.h. ◆ IsA(). TClass * TCONS::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 45 of file TCONS.h. ◆ SetPoints(). void TCONS::SetPoints ; (; Double_t * ; points); const. overrideprotectedvirtual . Create CONS points. ; Reimplemented from TShape.; Definition at line 81 of file TCONS.cxx. ◆ Streamer(). void TCONS::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCONS::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TCONS.h. Member Data Documentation. ◆ fRmax2. Float_t TCONS::fRmax2. protected . Definition at line 31 of file TCONS.h. ◆ fRmin2. Float_t TCONS::fRmin2. protected . Definition at line 30 of file TCONS.h. Libraries for TCONS:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TCONS.h; graf3d/g3d/src/TCONS.cxx. TCONS. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONS.html:23242,Guid,Guide,23242,doc/master/classTCONS.html,https://root.cern,https://root.cern/doc/master/classTCONS.html,1,['Guid'],['Guide']
Usability,e . Definition at line 104 of file Roo2DKeysPdf.h. ◆ _n16. double Roo2DKeysPdf::_n16. private . Definition at line 105 of file Roo2DKeysPdf.h. ◆ _nEvents. Int_t Roo2DKeysPdf::_nEvents. private . Definition at line 114 of file Roo2DKeysPdf.h. ◆ _norm. double Roo2DKeysPdf::_norm. private . Definition at line 99 of file Roo2DKeysPdf.h. ◆ _sqrt2pi. double Roo2DKeysPdf::_sqrt2pi. private . Definition at line 106 of file Roo2DKeysPdf.h. ◆ _verbosedebug. Int_t Roo2DKeysPdf::_verbosedebug. private . Definition at line 118 of file Roo2DKeysPdf.h. ◆ _vverbosedebug. Int_t Roo2DKeysPdf::_vverbosedebug. private . Definition at line 119 of file Roo2DKeysPdf.h. ◆ _widthScaleFactor. double Roo2DKeysPdf::_widthScaleFactor. private . Definition at line 112 of file Roo2DKeysPdf.h. ◆ _x. double* Roo2DKeysPdf::_x. private . Definition at line 95 of file Roo2DKeysPdf.h. ◆ _xMean. double Roo2DKeysPdf::_xMean. private . Definition at line 100 of file Roo2DKeysPdf.h. ◆ _xoffset. double Roo2DKeysPdf::_xoffset. private . Definition at line 110 of file Roo2DKeysPdf.h. ◆ _xSigma. double Roo2DKeysPdf::_xSigma. private . Definition at line 101 of file Roo2DKeysPdf.h. ◆ _y. double* Roo2DKeysPdf::_y. private . Definition at line 97 of file Roo2DKeysPdf.h. ◆ _yMean. double Roo2DKeysPdf::_yMean. private . Definition at line 102 of file Roo2DKeysPdf.h. ◆ _yoffset. double Roo2DKeysPdf::_yoffset. private . Definition at line 111 of file Roo2DKeysPdf.h. ◆ _ySigma. double Roo2DKeysPdf::_ySigma. private . Definition at line 103 of file Roo2DKeysPdf.h. ◆ x. RooRealProxy Roo2DKeysPdf::x. Definition at line 78 of file Roo2DKeysPdf.h. ◆ y. RooRealProxy Roo2DKeysPdf::y. Definition at line 79 of file Roo2DKeysPdf.h. Libraries for Roo2DKeysPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/Roo2DKeysPdf.h; roofit/roofit/src/Roo2DKeysPdf.cxx. Roo2DKeysPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo2DKeysPdf.html:85742,Guid,Guide,85742,doc/master/classRoo2DKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRoo2DKeysPdf.html,1,['Guid'],['Guide']
Usability,e . Definition at line 111 of file TPacketizer.cxx. ◆ IncMySlaveCnt(). void TPacketizer::TFileNode::IncMySlaveCnt ; (; ). inline . Definition at line 108 of file TPacketizer.cxx. ◆ IncSlaveCnt(). void TPacketizer::TFileNode::IncSlaveCnt ; (; const char * ; slave). inline . Definition at line 109 of file TPacketizer.cxx. ◆ IsSortable(). Bool_t TPacketizer::TFileNode::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 113 of file TPacketizer.cxx. ◆ Print(). void TPacketizer::TFileNode::Print ; (; Option_t * ; option); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 180 of file TPacketizer.cxx. ◆ RemoveActive(). void TPacketizer::TFileNode::RemoveActive ; (; TFileStat * ; file). inline . Definition at line 152 of file TPacketizer.cxx. ◆ Reset(). void TPacketizer::TFileNode::Reset ; (; ). inline . Definition at line 187 of file TPacketizer.cxx. Member Data Documentation. ◆ fActFileNext. TObject* TPacketizer::TFileNode::fActFileNext. private . Definition at line 100 of file TPacketizer.cxx. ◆ fActFiles. TList* TPacketizer::TFileNode::fActFiles. private . Definition at line 99 of file TPacketizer.cxx. ◆ fFiles. TList* TPacketizer::TFileNode::fFiles. private . Definition at line 97 of file TPacketizer.cxx. ◆ fMySlaveCnt. Int_t TPacketizer::TFileNode::fMySlaveCnt. private . Definition at line 101 of file TPacketizer.cxx. ◆ fNodeName. TString TPacketizer::TFileNode::fNodeName. private . Definition at line 96 of file TPacketizer.cxx. ◆ fSlaveCnt. Int_t TPacketizer::TFileNode::fSlaveCnt. private . Definition at line 102 of file TPacketizer.cxx. ◆ fUnAllocFileNext. TObject* TPacketizer::TFileNode::fUnAllocFileNext. private . Definition at line 98 of file TPacketizer.cxx. proof/proofplayer/src/TPacketizer.cxx. TPacketizerTFileNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html:13934,Guid,Guide,13934,doc/master/classTPacketizer_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html,1,['Guid'],['Guide']
Usability,e . Definition at line 45 of file TNeuronInputSum.h. ◆ ~TNeuronInputSum(). virtual TMVA::TNeuronInputSum::~TNeuronInputSum ; (; ). inlinevirtual . Definition at line 46 of file TNeuronInputSum.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInputSum::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TNeuronInputSum::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::TNeuronInputSum::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 62 of file TNeuronInputSum.h. ◆ DeclFileName(). static const char * TMVA::TNeuronInputSum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 62 of file TNeuronInputSum.h. ◆ GetInput(). Double_t TMVA::TNeuronInputSum::GetInput ; (; const TNeuron * ; neuron); const. inlinevirtual . Implements TMVA::TNeuronInput.; Definition at line 49 of file TNeuronInputSum.h. ◆ GetName(). TString TMVA::TNeuronInputSum::GetName ; (; ). inlinevirtual . Implements TMVA::TNeuronInput.; Definition at line 60 of file TNeuronInputSum.h. ◆ IsA(). virtual TClass * TMVA::TNeuronInputSum::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::TNeuronInput.; Definition at line 62 of file TNeuronInputSum.h. ◆ Streamer(). virtual void TMVA::TNeuronInputSum::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::TNeuronInput. ◆ StreamerNVirtual(). void TMVA::TNeuronInputSum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file TNeuronInputSum.h. Libraries for TMVA::TNeuronInputSum:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/TNeuronInputSum.h. TMVATNeuronInputSum. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInputSum.html:3485,Guid,Guide,3485,doc/master/classTMVA_1_1TNeuronInputSum.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInputSum.html,1,['Guid'],['Guide']
Usability,e . Definition at line 50 of file TNeuronInputAbs.h. ◆ ~TNeuronInputAbs(). virtual TMVA::TNeuronInputAbs::~TNeuronInputAbs ; (; ). inlinevirtual . Definition at line 51 of file TNeuronInputAbs.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInputAbs::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TNeuronInputAbs::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::TNeuronInputAbs::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 65 of file TNeuronInputAbs.h. ◆ DeclFileName(). static const char * TMVA::TNeuronInputAbs::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 65 of file TNeuronInputAbs.h. ◆ GetInput(). Double_t TMVA::TNeuronInputAbs::GetInput ; (; const TNeuron * ; neuron); const. inlinevirtual . Implements TMVA::TNeuronInput.; Definition at line 54 of file TNeuronInputAbs.h. ◆ GetName(). TString TMVA::TNeuronInputAbs::GetName ; (; ). inlinevirtual . Implements TMVA::TNeuronInput.; Definition at line 63 of file TNeuronInputAbs.h. ◆ IsA(). virtual TClass * TMVA::TNeuronInputAbs::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::TNeuronInput.; Definition at line 65 of file TNeuronInputAbs.h. ◆ Streamer(). virtual void TMVA::TNeuronInputAbs::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::TNeuronInput. ◆ StreamerNVirtual(). void TMVA::TNeuronInputAbs::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file TNeuronInputAbs.h. Libraries for TMVA::TNeuronInputAbs:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/TNeuronInputAbs.h. TMVATNeuronInputAbs. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInputAbs.html:3512,Guid,Guide,3512,doc/master/classTMVA_1_1TNeuronInputAbs.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInputAbs.html,1,['Guid'],['Guide']
Usability,"e . Definition at line 50 of file TParticleClassPDG.h. ◆ GetNParticles(). Int_t TParticleClassPDG::GetNParticles ; (; ). inline . Definition at line 42 of file TParticleClassPDG.h. ◆ GetParticle(). TParticlePDG * TParticleClassPDG::GetParticle ; (; Int_t ; i). inline . Definition at line 46 of file TParticleClassPDG.h. ◆ IsA(). TClass * TParticleClassPDG::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 63 of file TParticleClassPDG.h. ◆ IsFolder(). Bool_t TParticleClassPDG::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 60 of file TParticleClassPDG.h. ◆ operator=(). TParticleClassPDG & TParticleClassPDG::operator= ; (; const TParticleClassPDG & ; pcp). inlineprotected . Definition at line 28 of file TParticleClassPDG.h. ◆ Print(). void TParticleClassPDG::Print ; (; Option_t * ; opt = """"); const. overridevirtual . Print the entire information of this kind of particle. ; Reimplemented from TNamed.; Definition at line 46 of file TParticleClassPDG.cxx. ◆ Streamer(). void TParticleClassPDG::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TParticleClassPDG::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file TParticleClassPDG.h. Member Data Documentation. ◆ fListOfParticles. TObjArray* TParticleClassPDG::fListOfParticles. protected . Definition at line 25 of file TParticleClassPDG.h. Libraries for TParticleClassPDG:. [legend]; The documentation for this class was generated from the following files:; montecarlo/eg/inc/TParticleClassPDG.h; montecarlo/eg/src/TParticleClassPDG.cxx. TParticleClassPDG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticleClassPDG.html:15206,Guid,Guide,15206,doc/master/classTParticleClassPDG.html,https://root.cern,https://root.cern/doc/master/classTParticleClassPDG.html,1,['Guid'],['Guide']
Usability,e . Definition at line 90 of file TSecContext.h. ◆ SetOffSet(). void TSecContext::SetOffSet ; (; Int_t ; offset). inline . Definition at line 91 of file TSecContext.h. ◆ SetUser(). void TSecContext::SetUser ; (; const char * ; user). inline . Definition at line 92 of file TSecContext.h. ◆ Streamer(). void TSecContext::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSecContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 94 of file TSecContext.h. Friends And Related Symbol Documentation. ◆ TRootSecContext. friend class TRootSecContext. friend . Definition at line 38 of file TSecContext.h. Member Data Documentation. ◆ fCleanup. TList* TSecContext::fCleanup. private . Definition at line 42 of file TSecContext.h. ◆ fContext. void* TSecContext::fContext. private . Definition at line 41 of file TSecContext.h. ◆ fExpDate. TDatime TSecContext::fExpDate. private . Definition at line 43 of file TSecContext.h. ◆ fHost. TString TSecContext::fHost. private . Definition at line 44 of file TSecContext.h. ◆ fID. TString TSecContext::fID. private . Definition at line 45 of file TSecContext.h. ◆ fMethod. Int_t TSecContext::fMethod. private . Definition at line 46 of file TSecContext.h. ◆ fMethodName. TString TSecContext::fMethodName. private . Definition at line 47 of file TSecContext.h. ◆ fOffSet. Int_t TSecContext::fOffSet. private . Definition at line 48 of file TSecContext.h. ◆ fToken. TString TSecContext::fToken. private . Definition at line 49 of file TSecContext.h. ◆ fUser. TString TSecContext::fUser. private . Definition at line 50 of file TSecContext.h. Libraries for TSecContext:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TSecContext.h; net/net/src/TSecContext.cxx. TSecContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSecContext.html:19585,Guid,Guide,19585,doc/master/classTSecContext.html,https://root.cern,https://root.cern/doc/master/classTSecContext.html,1,['Guid'],['Guide']
Usability,"e . Find best visual, i.e. ; the one with the most planes and TrueColor or DirectColor. Sets fVisual, fDepth, fRootWin, fColormap, fBlackPixel and fWhitePixel. ; Definition at line 780 of file TGX11.cxx. ◆ FindColor(). Int_t TGX11::FindColor ; (; ULong_t ; pixel, . ULong_t * ; orgcolors, . Int_t ; ncolors . ). private . Returns index in orgcolors (and fNewColors) for pixel. ; Definition at line 3019 of file TGX11.cxx. ◆ FindRWindow(). Window_t TGX11::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). overridevirtual . Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ; Possibility to exclude dragwin and input. ; Reimplemented from TVirtualX.; Definition at line 2802 of file GX11Gui.cxx. ◆ FindUsableVisual(). void TGX11::FindUsableVisual ; (; RXVisualInfo * ; vlist, . Int_t ; nitems . ). private . Check if visual is usable, if so set fVisual, fDepth, fColormap, fBlackPixel and fWhitePixel. ; Definition at line 848 of file TGX11.cxx. ◆ FreeColor(). void TGX11::FreeColor ; (; Colormap_t ; cmap, . ULong_t ; pixel . ). overridevirtual . Free color cell with specified pixel value. ; Reimplemented from TVirtualX.; Definition at line 1391 of file GX11Gui.cxx. ◆ FreeFontNames(). void TGX11::FreeFontNames ; (; char ** ; fontlist). overridevirtual . Free list of font names. ; Reimplemented from TVirtualX.; Definition at line 2605 of file GX11Gui.cxx. ◆ FreeFontStruct(). void TGX11::FreeFontStruct ; (; FontStruct_t ; fs). overridevirtual . Free font structure returned by GetFontStruct(). ; Reimplemented from TVirtualX.; Definition at line 2123 of file GX11Gui.cxx. ◆ GetCharacterUp(). void TGX11::GetCharacterUp ; (; Float_t & ; chupx, . Float_t & ; chupy . ). overridevirtual . Return character up vector. ; Reimplemented from TVirtualX.; Definition at line 899 of file TGX11.cxx. ◆ GetColor(). XColor_t & TGX11::GetColor ; (; Int_t ; cid)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:74633,usab,usable,74633,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['usab'],['usable']
Usability,e . Interrupt current command (not yet) ; Definition at line 159 of file TTreeViewer.h. ◆ fStopMapping. bool TTreeViewer::fStopMapping. private . True if branch don't need remapping. ; Definition at line 100 of file TTreeViewer.h. ◆ fTimer. TTimer* TTreeViewer::fTimer. private . Tree viewer timer. ; Definition at line 98 of file TTreeViewer.h. ◆ fToolBar. TGToolBar* TTreeViewer::fToolBar. private . Definition at line 123 of file TTreeViewer.h. ◆ fTree. TTree* TTreeViewer::fTree. private . Selected tree. ; Definition at line 76 of file TTreeViewer.h. ◆ fTreeHdr. TGCompositeFrame* TTreeViewer::fTreeHdr. private . Header for list tree. ; Definition at line 146 of file TTreeViewer.h. ◆ fTreeIndex. Int_t TTreeViewer::fTreeIndex. private . Index of current tree in list. ; Definition at line 89 of file TTreeViewer.h. ◆ fTreeList. TList* TTreeViewer::fTreeList. private . List of mapped trees. ; Definition at line 88 of file TTreeViewer.h. ◆ fTreeView. TGCanvas* TTreeViewer::fTreeView. private . ListTree canvas container. ; Definition at line 173 of file TTreeViewer.h. ◆ fV1. TGVerticalFrame* TTreeViewer::fV1. private . List tree mother. ; Definition at line 144 of file TTreeViewer.h. ◆ fV2. TGVerticalFrame* TTreeViewer::fV2. private . List view mother. ; Definition at line 145 of file TTreeViewer.h. ◆ fVarDraw. bool TTreeViewer::fVarDraw. private . True if an item is double-clicked. ; Definition at line 84 of file TTreeViewer.h. ◆ fWatchCursor. Cursor_t TTreeViewer::fWatchCursor. private . Watch cursor. ; Definition at line 97 of file TTreeViewer.h. ◆ fWidgets. TList* TTreeViewer::fWidgets. private . List of widgets to be deleted. ; Definition at line 182 of file TTreeViewer.h. Libraries for TTreeViewer:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TTreeViewer.h; tree/treeviewer/src/TTreeViewer.cxx. TTreeViewer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:40 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer.html:67650,Guid,Guide,67650,doc/master/classTTreeViewer.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html,1,['Guid'],['Guide']
Usability,"e . ◆ Randomize(). void TMultiLayerPerceptron::Randomize ; (; ); const. Randomize the weights. ; Definition at line 1239 of file TMultiLayerPerceptron.cxx. ◆ Result(). Double_t TMultiLayerPerceptron::Result ; (; Int_t ; event, . Int_t ; index = 0 . ); const. Computes the output for a given event. ; Look at the output neuron designed by index. ; Definition at line 1033 of file TMultiLayerPerceptron.cxx. ◆ SetData(). void TMultiLayerPerceptron::SetData ; (; TTree * ; data). Set the data source. ; Definition at line 590 of file TMultiLayerPerceptron.cxx. ◆ SetDelta(). void TMultiLayerPerceptron::SetDelta ; (; Double_t ; delta). Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 720 of file TMultiLayerPerceptron.cxx. ◆ SetEpsilon(). void TMultiLayerPerceptron::SetEpsilon ; (; Double_t ; eps). Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 710 of file TMultiLayerPerceptron.cxx. ◆ SetEta(). void TMultiLayerPerceptron::SetEta ; (; Double_t ; eta). Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 700 of file TMultiLayerPerceptron.cxx. ◆ SetEtaDecay(). void TMultiLayerPerceptron::SetEtaDecay ; (; Double_t ; ed). Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch). Set the event weight. ; Definition at line 606 of file TMultiLayerPerceptron.cxx. ◆ SetGammaDelta(). void TMultiLayerPerceptron::SetGammaDelta ; (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:44963,learn,learning,44963,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['learn'],['learning']
Usability,e 113 of file TFile.h. ◆ fOption. TString TFile::fOption. protected . File options. ; Definition at line 91 of file TFile.h. ◆ fProcessIDs. TObjArray* TFile::fProcessIDs {nullptr}. protected . !Array of pointers to TProcessIDs ; Definition at line 95 of file TFile.h. ◆ fReadCalls. Int_t TFile::fReadCalls {0}. protected . Number of read calls ( not counting the cache calls ) ; Definition at line 89 of file TFile.h. ◆ fRealName. TString TFile::fRealName. protected . Effective real file name (not original url) ; Definition at line 90 of file TFile.h. ◆ fSeekFree. Long64_t TFile::fSeekFree {0}. protected . Location on disk of free segments structure. ; Definition at line 80 of file TFile.h. ◆ fSeekInfo. Long64_t TFile::fSeekInfo {0}. protected . Location on disk of StreamerInfo record. ; Definition at line 81 of file TFile.h. ◆ fSum2Buffer. Double_t TFile::fSum2Buffer {0}. protected . Sum of squares of buffer sizes of objects written so far. ; Definition at line 74 of file TFile.h. ◆ fSumBuffer. Double_t TFile::fSumBuffer {0}. protected . Sum of buffer sizes of objects written so far. ; Definition at line 73 of file TFile.h. ◆ fUnits. Char_t TFile::fUnits {0}. protected . Number of bytes for file pointers. ; Definition at line 92 of file TFile.h. ◆ fUrl. TUrl TFile::fUrl. protected . !URL of file ; Definition at line 110 of file TFile.h. ◆ fVersion. Int_t TFile::fVersion {0}. protected . File format version. ; Definition at line 83 of file TFile.h. ◆ fWriteMutex. std::mutex TFile::fWriteMutex. protected . !Lock for writing baskets / keys into the file. ; Definition at line 118 of file TFile.h. ◆ fWritten. Int_t TFile::fWritten {0}. protected . Number of objects written so far. ; Definition at line 87 of file TFile.h. Libraries for TFile:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TFile.h; io/io/src/TFile.cxx. TFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:110881,Guid,Guide,110881,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['Guid'],['Guide']
Usability,e 114 of file TWebSnapshot.h. ◆ GetScripts(). const std::string & TCanvasWebSnapshot::GetScripts ; (; ); const. inline . Definition at line 111 of file TWebSnapshot.h. ◆ IsA(). TClass * TCanvasWebSnapshot::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 119 of file TWebSnapshot.h. ◆ IsFixedSize(). bool TCanvasWebSnapshot::IsFixedSize ; (; ); const. inline . Definition at line 117 of file TWebSnapshot.h. ◆ SetFixedSize(). void TCanvasWebSnapshot::SetFixedSize ; (; bool ; on = true). inline . Definition at line 116 of file TWebSnapshot.h. ◆ SetHighlightConnect(). void TCanvasWebSnapshot::SetHighlightConnect ; (; bool ; on = true). inline . Definition at line 113 of file TWebSnapshot.h. ◆ SetScripts(). void TCanvasWebSnapshot::SetScripts ; (; const std::string & ; src). inline . Definition at line 110 of file TWebSnapshot.h. ◆ Streamer(). void TCanvasWebSnapshot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCanvasWebSnapshot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 119 of file TWebSnapshot.h. Member Data Documentation. ◆ fFixedSize. bool TCanvasWebSnapshot::fFixedSize {false}. protected . if canvas draw size is fixed ; Definition at line 106 of file TWebSnapshot.h. ◆ fHighlightConnect. bool TCanvasWebSnapshot::fHighlightConnect {false}. protected . does HighlightConnect has connection ; Definition at line 105 of file TWebSnapshot.h. ◆ fScripts. std::string TCanvasWebSnapshot::fScripts. protected . custom scripts to load ; Definition at line 104 of file TWebSnapshot.h. Libraries for TCanvasWebSnapshot:. [legend]; The documentation for this class was generated from the following file:; gui/webgui6/inc/TWebSnapshot.h. TCanvasWebSnapshot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvasWebSnapshot.html:16498,Guid,Guide,16498,doc/master/classTCanvasWebSnapshot.html,https://root.cern,https://root.cern/doc/master/classTCanvasWebSnapshot.html,1,['Guid'],['Guide']
Usability,"e 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ Result(). double ROOT::Math::Derivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 152 of file Derivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::Derivator::SetFunction ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 88 of file Derivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::Derivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 84 of file Derivator.cxx. ◆ Status(). int ROOT::Math::Derivator::Status ; (; ); const. return the error status of the last derivative calculation ; Definition at line 156 of file Derivator.cxx. Member Data Documentation. ◆ fDerivator. GSLDerivator* ROOT::Math::Derivator::fDerivator. mutableprivate . Definition at line 232 of file Derivator.h. Libraries for ROOT::Math::Derivator:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/Derivator.h; math/mathmore/src/Derivator.cxx. ROOTMathDerivator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:11107,Guid,Guide,11107,doc/master/classROOT_1_1Math_1_1Derivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html,1,['Guid'],['Guide']
Usability,e 121 of file TInetAddress.cxx. ◆ Streamer(). void TInetAddress::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TInetAddress. ; Reimplemented from TObject.; Definition at line 166 of file TInetAddress.cxx. ◆ StreamerNVirtual(). void TInetAddress::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TInetAddress.h. Friends And Related Symbol Documentation. ◆ TServerSocket. friend class TServerSocket. friend . Definition at line 44 of file TInetAddress.h. ◆ TSocket. friend class TSocket. friend . Definition at line 42 of file TInetAddress.h. ◆ TSystem. friend class TSystem. friend . Definition at line 38 of file TInetAddress.h. ◆ TUDPSocket. friend class TUDPSocket. friend . Definition at line 43 of file TInetAddress.h. ◆ TUnixSystem. friend class TUnixSystem. friend . Definition at line 39 of file TInetAddress.h. ◆ TUUID. friend class TUUID. friend . Definition at line 41 of file TInetAddress.h. ◆ TWinNTSystem. friend class TWinNTSystem. friend . Definition at line 40 of file TInetAddress.h. ◆ TXSocket. friend class TXSocket. friend . Definition at line 45 of file TInetAddress.h. Member Data Documentation. ◆ fAddresses. AddressList_t TInetAddress::fAddresses. private . Definition at line 55 of file TInetAddress.h. ◆ fAliases. AliasList_t TInetAddress::fAliases. private . Definition at line 56 of file TInetAddress.h. ◆ fFamily. Int_t TInetAddress::fFamily. private . Definition at line 53 of file TInetAddress.h. ◆ fHostname. TString TInetAddress::fHostname. private . Definition at line 52 of file TInetAddress.h. ◆ fPort. Int_t TInetAddress::fPort. private . Definition at line 54 of file TInetAddress.h. Libraries for TInetAddress:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TInetAddress.h; core/base/src/TInetAddress.cxx. TInetAddress. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInetAddress.html:17905,Guid,Guide,17905,doc/master/classTInetAddress.html,https://root.cern,https://root.cern/doc/master/classTInetAddress.html,1,['Guid'],['Guide']
Usability,"e 124 of file MethodDT.h. ◆ fPruneMethodS. TString TMVA::MethodDT::fPruneMethodS. private . prune method option String ; Definition at line 125 of file MethodDT.h. ◆ fPruneStrength. Double_t TMVA::MethodDT::fPruneStrength. private . a parameter to set the ""amount"" of pruning..needs to be adjusted ; Definition at line 123 of file MethodDT.h. ◆ fRandomisedTrees. Bool_t TMVA::MethodDT::fRandomisedTrees. private . choose a random subset of possible cut variables at each node during training ; Definition at line 127 of file MethodDT.h. ◆ fSepType. SeparationBase* TMVA::MethodDT::fSepType. private . the separation used in node splitting ; Definition at line 110 of file MethodDT.h. ◆ fSepTypeS. TString TMVA::MethodDT::fSepTypeS. private . the separation (option string) used in node splitting ; Definition at line 111 of file MethodDT.h. ◆ fTree. DecisionTree* TMVA::MethodDT::fTree. private . the decision tree ; Definition at line 108 of file MethodDT.h. ◆ fUseNvars. Int_t TMVA::MethodDT::fUseNvars. private . the number of variables used in the randomised tree splitting ; Definition at line 128 of file MethodDT.h. ◆ fUsePoissonNvars. Bool_t TMVA::MethodDT::fUsePoissonNvars. private . fUseNvars is used as a poisson mean, and the actual value of useNvars is at each step drawn form that distribution ; Definition at line 129 of file MethodDT.h. ◆ fUseYesNoLeaf. Bool_t TMVA::MethodDT::fUseYesNoLeaf. private . use sig or bkg classification in leave nodes or sig/bkg ; Definition at line 117 of file MethodDT.h. ◆ fVariableImportance. std::vector<Double_t> TMVA::MethodDT::fVariableImportance. private . the relative importance of the different variables ; Definition at line 130 of file MethodDT.h. Libraries for TMVA::MethodDT:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodDT.h; tmva/tmva/src/MethodDT.cxx. TMVAMethodDT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:43543,Guid,Guide,43543,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['Guid'],['Guide']
Usability,e 134 of file Cartesian3D.h. ◆ SetZ(). template<class T = double> . void ROOT::Math::Cartesian3D< T >::SetZ ; (; Scalar ; zz). inline . set the z coordinate value keeping x and y constant ; Definition at line 139 of file Cartesian3D.h. ◆ Theta(). template<class T = double> . Scalar ROOT::Math::Cartesian3D< T >::Theta ; (; ); const. inline . Definition at line 118 of file Cartesian3D.h. ◆ X(). template<class T = double> . Scalar ROOT::Math::Cartesian3D< T >::X ; (; ); const. inline . Definition at line 111 of file Cartesian3D.h. ◆ x(). template<class T = double> . T ROOT::Math::Cartesian3D< T >::x ; (; ); const. inline . Definition at line 190 of file Cartesian3D.h. ◆ Y(). template<class T = double> . Scalar ROOT::Math::Cartesian3D< T >::Y ; (; ); const. inline . Definition at line 112 of file Cartesian3D.h. ◆ y(). template<class T = double> . T ROOT::Math::Cartesian3D< T >::y ; (; ); const. inline . Definition at line 191 of file Cartesian3D.h. ◆ Z(). template<class T = double> . Scalar ROOT::Math::Cartesian3D< T >::Z ; (; ); const. inline . Definition at line 113 of file Cartesian3D.h. ◆ z(). template<class T = double> . T ROOT::Math::Cartesian3D< T >::z ; (; ); const. inline . Definition at line 192 of file Cartesian3D.h. Member Data Documentation. ◆ Dimension. template<class T = double> . constexpr unsigned int ROOT::Math::Cartesian3D< T >::Dimension = 3U. staticconstexpr . Definition at line 52 of file Cartesian3D.h. ◆ fX. template<class T = double> . T ROOT::Math::Cartesian3D< T >::fX. private . Definition at line 243 of file Cartesian3D.h. ◆ fY. template<class T = double> . T ROOT::Math::Cartesian3D< T >::fY. private . Definition at line 244 of file Cartesian3D.h. ◆ fZ. template<class T = double> . T ROOT::Math::Cartesian3D< T >::fZ. private . Definition at line 245 of file Cartesian3D.h. math/genvector/inc/Math/GenVector/Cartesian3D.h. ROOTMathCartesian3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Cartesian3D.html:10236,Guid,Guide,10236,doc/master/classROOT_1_1Math_1_1Cartesian3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Cartesian3D.html,1,['Guid'],['Guide']
Usability,"e 158 of file TViewPubDataMembers.cxx. ◆ After(). TObject * TViewPubDataMembers::After ; (; const TObject * ; obj); const. overrideprotectedvirtual . After is not allowed in this class. ; See TList::After for the intended behavior. ; Reimplemented from TList.; Definition at line 231 of file TViewPubDataMembers.cxx. ◆ At(). TObject * TViewPubDataMembers::At ; (; Int_t ; idx); const. overridevirtual . Returns the object at position idx. Returns 0 if idx is out of range. ; Reimplemented from TList.; Definition at line 211 of file TViewPubDataMembers.cxx. ◆ Before(). TObject * TViewPubDataMembers::Before ; (; const TObject * ; obj); const. overrideprotectedvirtual . Before is not allowed in this class. ; See TList::Before for the intended behavior. ; Reimplemented from TList.; Definition at line 241 of file TViewPubDataMembers.cxx. ◆ Clear(). void TViewPubDataMembers::Clear ; (; Option_t * ; option = """"). overrideprotectedvirtual . Clear is not allowed in this class. ; See TList::Clear for the intended behavior. ; Reimplemented from TList.; Definition at line 69 of file TViewPubDataMembers.cxx. ◆ Delete(). void TViewPubDataMembers::Delete ; (; Option_t * ; option = """"). overrideprotectedvirtual . Delete is not allowed in this class. ; See TList::Delete for the intended behavior. ; Reimplemented from TList.; Definition at line 78 of file TViewPubDataMembers.cxx. ◆ FindObject() [1/2]. TObject * TViewPubDataMembers::FindObject ; (; const char * ; name); const. overridevirtual . Find an object in this list using its name. ; Requires a sequential scan till the object has been found. Returns 0 if object with specified name is not found. ; Reimplemented from TList.; Definition at line 88 of file TViewPubDataMembers.cxx. ◆ FindObject() [2/2]. TObject * TViewPubDataMembers::FindObject ; (; const TObject * ; obj); const. overridevirtual . Find an object in this list using the object's IsEqual() member function. ; Requires a sequential scan till the object has been found. Returns ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubDataMembers.html:24393,Clear,Clear,24393,doc/master/classTViewPubDataMembers.html,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html,1,['Clear'],['Clear']
Usability,"e 1613 of file TVirtualX.cxx. ◆ Class(). static TClass * TVirtualX::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualX::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualX::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 334 of file TVirtualX.h. ◆ ClearArea(). void TVirtualX::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). virtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1603 of file TVirtualX.cxx. ◆ ClearWindow() [1/2]. void TVirtualX::ClearWindow ; (; ). virtual . Clears the entire area of the current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 177 of file TVirtualX.cxx. ◆ ClearWindow() [2/2]. void TVirtualX::ClearWindow ; (; Window_t ; id). virtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1872 of file TVirtualX.cxx. ◆ CloseDisplay(). void TVirtualX::CloseDisplay ; (; ). virtual . Closes connection to display server and destroys all windows. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1207 of file TVirtualX.cxx. ◆ ClosePixmap(). void TVirtualX::ClosePixmap ; (; ). virtual . Deletes current pixmap. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 191 of file TVirtualX.cxx. ◆ CloseWindow(). void TVirtualX::CloseWindow ; (; ). virtual .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:55250,Clear,ClearWindow,55250,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['Clear'],['ClearWindow']
Usability,e 176 of file TGWin32VirtualXProxy.cxx. ◆ xpos. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void xpos. Definition at line 132 of file TGWin32VirtualXProxy.cxx. ◆ xy. Option_t Option_t TPoint TPoint xy. Definition at line 62 of file TGWin32VirtualXProxy.cxx. ◆ y. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h y. Definition at line 68 of file TGWin32VirtualXProxy.cxx. ◆ y1. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t y1. Definition at line 70 of file TGWin32VirtualXProxy.cxx. ◆ y2. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t y2. Definition at line 70 of file TGWin32VirtualXProxy.cxx. ◆ ypos. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void ypos. Definition at line 132 of file TGWin32VirtualXProxy.cxx. graf2dwin32gdksrcTGWin32VirtualXProxy.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:48 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TGWin32VirtualXProxy_8cxx.html:239685,Guid,Guide,239685,doc/v632/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/v632/TGWin32VirtualXProxy_8cxx.html,1,['Guid'],['Guide']
Usability,e 246 of file TUnuran.cxx. ◆ SetLogLevel(). bool TUnuran::SetLogLevel ; (; unsigned int ; iflag = 1). set log level ; Definition at line 433 of file TUnuran.cxx. ◆ SetLogStream(). bool TUnuran::SetLogStream ; (; ). inline . set stream for log and error (not yet implemented) ; Definition at line 276 of file TUnuran.h. ◆ SetMethodAndInit(). bool TUnuran::SetMethodAndInit ; (; ). protected . change the method and initialize Unuran with the previously given distribution ; Definition at line 332 of file TUnuran.cxx. ◆ SetMultiDistribution(). bool TUnuran::SetMultiDistribution ; (; const TUnuranMultiContDist & ; dist). protected . Definition at line 202 of file TUnuran.cxx. ◆ SetRandom(). void TUnuran::SetRandom ; (; TRandom * ; r). inline . Set the random engine. ; Must be called before init to have effect ; Definition at line 216 of file TUnuran.h. ◆ SetRandomGenerator(). bool TUnuran::SetRandomGenerator ; (; ). protected . Definition at line 139 of file TUnuran.cxx. ◆ SetSeed(). void TUnuran::SetSeed ; (; unsigned int ; seed). set the seed for the random number generator ; Definition at line 429 of file TUnuran.cxx. Member Data Documentation. ◆ fDist. std::unique_ptr<TUnuranBaseDist> TUnuran::fDist. protected . Definition at line 308 of file TUnuran.h. ◆ fGen. UNUR_GEN* TUnuran::fGen. protected . Definition at line 305 of file TUnuran.h. ◆ fMethod. std::string TUnuran::fMethod. protected . Definition at line 310 of file TUnuran.h. ◆ fRng. TRandom* TUnuran::fRng. protected . Definition at line 309 of file TUnuran.h. ◆ fUdistr. UNUR_DISTR* TUnuran::fUdistr. protected . Definition at line 306 of file TUnuran.h. ◆ fUrng. UNUR_URNG* TUnuran::fUrng. protected . Definition at line 307 of file TUnuran.h. Libraries for TUnuran:. [legend]; The documentation for this class was generated from the following files:; math/unuran/inc/TUnuran.h; math/unuran/src/TUnuran.cxx. TUnuran. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuran.html:15529,Guid,Guide,15529,doc/master/classTUnuran.html,https://root.cern,https://root.cern/doc/master/classTUnuran.html,1,['Guid'],['Guide']
Usability,"e 29 of file TWebSnapshot.h. ◆ SetObjectID(). void TWebSnapshot::SetObjectID ; (; const std::string & ; id). inline . Definition at line 46 of file TWebSnapshot.h. ◆ SetObjectIDAsPtr(). void TWebSnapshot::SetObjectIDAsPtr ; (; void * ; ptr, . const std::string & ; suffix = """" . ). Use pointer to assign object id - TString::Hash. ; Definition at line 46 of file TWebSnapshot.cxx. ◆ SetOption(). void TWebSnapshot::SetOption ; (; const std::string & ; opt). inline . Definition at line 49 of file TWebSnapshot.h. ◆ SetSnapshot(). void TWebSnapshot::SetSnapshot ; (; Int_t ; kind, . TObject * ; snapshot, . Bool_t ; owner = kFALSE . ). SetUse pointer to assign object id - TString::Hash. ; Definition at line 35 of file TWebSnapshot.cxx. ◆ Streamer(). void TWebSnapshot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TWebSnapshot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TWebSnapshot.h. Member Data Documentation. ◆ fKind. Int_t TWebSnapshot::fKind {0}. protected . kind of snapshots ; Definition at line 25 of file TWebSnapshot.h. ◆ fObjectID. std::string TWebSnapshot::fObjectID. protected . object identifier ; Definition at line 23 of file TWebSnapshot.h. ◆ fOption. std::string TWebSnapshot::fOption. protected . object draw option ; Definition at line 24 of file TWebSnapshot.h. ◆ fOwner. Bool_t TWebSnapshot::fOwner {kFALSE}. protected . ! if objected owned ; Definition at line 27 of file TWebSnapshot.h. ◆ fSnapshot. TObject* TWebSnapshot::fSnapshot {nullptr}. protected . snapshot data ; Definition at line 26 of file TWebSnapshot.h. Libraries for TWebSnapshot:. [legend]; The documentation for this class was generated from the following files:; gui/webgui6/inc/TWebSnapshot.h; gui/webgui6/src/TWebSnapshot.cxx. TWebSnapshot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebSnapshot.html:14623,Guid,Guide,14623,doc/master/classTWebSnapshot.html,https://root.cern,https://root.cern/doc/master/classTWebSnapshot.html,1,['Guid'],['Guide']
Usability,"e 3115 of file TChain.cxx. Member Data Documentation. ◆ fCanDeleteRefs. bool TChain::fCanDeleteRefs. protected . ! If true, TProcessIDs are deleted when closing a file ; Definition at line 40 of file TChain.h. ◆ fFile. TFile* TChain::fFile. protected . ! Pointer to current file (We own the file). ; Definition at line 42 of file TChain.h. ◆ fFiles. TObjArray* TChain::fFiles. protected . -> List of file names containing the trees (TChainElement, owned) ; Definition at line 43 of file TChain.h. ◆ fGlobalRegistration. bool TChain::fGlobalRegistration. protected . ! if true, bypass use of global lists ; Definition at line 46 of file TChain.h. ◆ fNtrees. Int_t TChain::fNtrees. protected . Number of trees. ; Definition at line 37 of file TChain.h. ◆ fProofChain. TChain* TChain::fProofChain. protected . ! chain proxy when going to be processed by PROOF ; Definition at line 45 of file TChain.h. ◆ fStatus. TList* TChain::fStatus. protected . -> List of active/inactive branches (TChainElement, owned) ; Definition at line 44 of file TChain.h. ◆ fTree. TTree* TChain::fTree. protected . ! Pointer to current tree (Note: We do not own this tree.) ; Definition at line 41 of file TChain.h. ◆ fTreeNumber. Int_t TChain::fTreeNumber. protected . ! Current Tree number in fTreeOffset table ; Definition at line 38 of file TChain.h. ◆ fTreeOffset. Long64_t* TChain::fTreeOffset. protected . [fTreeOffsetLen] Array of variables ; Definition at line 39 of file TChain.h. ◆ fTreeOffsetLen. Int_t TChain::fTreeOffsetLen. protected . Current size of fTreeOffset array. ; Definition at line 36 of file TChain.h. ◆ kBigNumber. constexpr auto TChain::kBigNumber = TTree::kMaxEntries. staticconstexpr . Definition at line 68 of file TChain.h. Libraries for TChain:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TChain.h; tree/tree/src/TChain.cxx. TChain. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:106255,Guid,Guide,106255,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['Guid'],['Guide']
Usability,e 39 of file TObjString.h. ◆ IsA(). TClass * TObjString::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 50 of file TObjString.h. ◆ IsEqual(). Bool_t TObjString::IsEqual ; (; const TObject * ; obj); const. overridevirtual . Return kTRUE if the argument has the same content as this object. ; Reimplemented from TObject.; Definition at line 45 of file TObjString.cxx. ◆ IsSortable(). Bool_t TObjString::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 42 of file TObjString.h. ◆ Print(). void TObjString::Print ; (; Option_t * ; option); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 41 of file TObjString.h. ◆ ReadBuffer(). void TObjString::ReadBuffer ; (; char *& ; buffer). inline . Definition at line 44 of file TObjString.h. ◆ SetString(). void TObjString::SetString ; (; const char * ; s). inline . Definition at line 45 of file TObjString.h. ◆ Sizeof(). Int_t TObjString::Sizeof ; (; ); const. inline . Definition at line 47 of file TObjString.h. ◆ Streamer(). void TObjString::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TObjString::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TObjString.h. ◆ String(). TString & TObjString::String ; (; ). inline . Definition at line 48 of file TObjString.h. Member Data Documentation. ◆ fString. TString TObjString::fString. private . Definition at line 31 of file TObjString.h. Libraries for TObjString:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TObjString.h; core/base/src/TObjString.cxx. TObjString. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:04 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjString.html:15421,Guid,Guide,15421,doc/master/classTObjString.html,https://root.cern,https://root.cern/doc/master/classTObjString.html,1,['Guid'],['Guide']
Usability,"e 396 of file TTreeProcessorMP.hxx. ◆ Process() [19/20]. TList * ROOT::TTreeProcessorMP::Process ; (; TTree & ; tree, . TSelector & ; selector, . TEntryList & ; entries, . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ). TSelector-based tree processing: memory resident tree. ; Definition at line 97 of file TTreeProcessorMP.cxx. ◆ Process() [20/20]. TList * ROOT::TTreeProcessorMP::Process ; (; TTree & ; tree, . TSelector & ; selector, . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ). Definition at line 317 of file TTreeProcessorMP.cxx. ◆ ReplyToIdle(). void ROOT::TTreeProcessorMP::ReplyToIdle ; (; TSocket * ; s). private . Reply to a worker who is idle. ; If still events to process, tell the worker. Otherwise ask for a result ; Definition at line 351 of file TTreeProcessorMP.cxx. ◆ Reset(). void ROOT::TTreeProcessorMP::Reset ; (; ). private . Reset TTreeProcessorMP's state. ; Definition at line 340 of file TTreeProcessorMP.cxx. ◆ SetNWorkers(). void ROOT::TTreeProcessorMP::SetNWorkers ; (; unsigned ; n). inline . Definition at line 165 of file TTreeProcessorMP.hxx. Member Data Documentation. ◆ fNProcessed. unsigned ROOT::TTreeProcessorMP::fNProcessed. private . number of arguments already passed to the workers ; Definition at line 176 of file TTreeProcessorMP.hxx. ◆ fNToProcess. unsigned ROOT::TTreeProcessorMP::fNToProcess. private . total number of arguments to pass to the workers ; Definition at line 177 of file TTreeProcessorMP.hxx. ◆ fTaskType. ETask ROOT::TTreeProcessorMP::fTaskType = ETask::kNoTask. private . the kind of task that is being executed, if any ; Definition at line 188 of file TTreeProcessorMP.hxx. Libraries for ROOT::TTreeProcessorMP:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/ROOT/TTreeProcessorMP.hxx; tree/treeplayer/src/TTreeProcessorMP.cxx. ROOTTTreeProcessorMP. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMP.html:24557,Guid,Guide,24557,doc/master/classROOT_1_1TTreeProcessorMP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TTreeProcessorMP.html,1,['Guid'],['Guide']
Usability,e 44 of file TGLEmbeddedViewer.h. ◆ GetOrthoXOYCamera(). TGLOrthoCamera * TGLEmbeddedViewer::GetOrthoXOYCamera ; (; ). inline . Definition at line 48 of file TGLEmbeddedViewer.h. ◆ GetOrthoXOZCamera(). TGLOrthoCamera * TGLEmbeddedViewer::GetOrthoXOZCamera ; (; ). inline . Definition at line 49 of file TGLEmbeddedViewer.h. ◆ GetOrthoZOXCamera(). TGLOrthoCamera * TGLEmbeddedViewer::GetOrthoZOXCamera ; (; ). inline . Definition at line 51 of file TGLEmbeddedViewer.h. ◆ GetOrthoZOYCamera(). TGLOrthoCamera * TGLEmbeddedViewer::GetOrthoZOYCamera ; (; ). inline . Definition at line 50 of file TGLEmbeddedViewer.h. ◆ Init(). void TGLEmbeddedViewer::Init ; (; const TGWindow * ; parent). private . Common initialization from all constructors. ; Definition at line 70 of file TGLEmbeddedViewer.cxx. ◆ IsA(). TClass * TGLEmbeddedViewer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 53 of file TGLEmbeddedViewer.h. ◆ operator=(). TGLEmbeddedViewer & TGLEmbeddedViewer::operator= ; (; const TGLEmbeddedViewer & ; ). privatedelete . ◆ Streamer(). void TGLEmbeddedViewer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGLEmbeddedViewer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file TGLEmbeddedViewer.h. Member Data Documentation. ◆ fBorder. Int_t TGLEmbeddedViewer::fBorder. private . Definition at line 28 of file TGLEmbeddedViewer.h. ◆ fFrame. TGCompositeFrame* TGLEmbeddedViewer::fFrame. private . Definition at line 27 of file TGLEmbeddedViewer.h. Libraries for TGLEmbeddedViewer:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLEmbeddedViewer.h; graf3d/gl/src/TGLEmbeddedViewer.cxx. TGLEmbeddedViewer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:43288,Guid,Guide,43288,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,1,['Guid'],['Guide']
Usability,"e 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; virtual void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr);  ; virtual Bool_t cd ();  Change current directory to ""this"" directory. ;  ; virtual Bool_t cd (const char *path);  Change current directory to ""this"" directory or to the directory described by the path if given one. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE);  Clone an object. ;  ; virtual void Close (Option_t *option="""");  Delete all objects from memory and directory structure itself. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; void Delete (const char *namecycle="""") override;  Delete Objects or/and keys in a directory. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual TKey * FindKey (const char *) const;  ; virtual TKey * FindKeyAny (const char *) const;  ; TObject * FindObject (const char *name) const override;  Find object by name in the list of memory objects. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in the list of memory objects. ;  ; virtual TObject * FindObjectAny (const char *name) const;  Find object by name in the list of m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:2372,Clear,Clear,2372,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,2,['Clear'],['Clear']
Usability,"e 532 of file TCollectionProxyInfo.h. ◆ fDestructFunc. void(* ROOT::Detail::TCollectionProxyInfo::fDestructFunc) (void *, size_t). Definition at line 509 of file TCollectionProxyInfo.h. ◆ fFeedFunc. void *(* ROOT::Detail::TCollectionProxyInfo::fFeedFunc) (void *, void *, size_t). Definition at line 510 of file TCollectionProxyInfo.h. ◆ fFirstFunc. void *(* ROOT::Detail::TCollectionProxyInfo::fFirstFunc) (void *). Definition at line 506 of file TCollectionProxyInfo.h. ◆ fgIteratorArenaSize. const UInt_t ROOT::Detail::TCollectionProxyInfo::fgIteratorArenaSize = 16. static . Definition at line 65 of file TCollectionProxyInfo.h. ◆ fInfo. const std::type_info& ROOT::Detail::TCollectionProxyInfo::fInfo. Definition at line 499 of file TCollectionProxyInfo.h. ◆ fIterSize. size_t ROOT::Detail::TCollectionProxyInfo::fIterSize. Definition at line 500 of file TCollectionProxyInfo.h. ◆ fNext. void *(* ROOT::Detail::TCollectionProxyInfo::fNext) (void *iter, const void *end). Definition at line 525 of file TCollectionProxyInfo.h. ◆ fNextFunc. void *(* ROOT::Detail::TCollectionProxyInfo::fNextFunc) (void *). Definition at line 507 of file TCollectionProxyInfo.h. ◆ fResizeFunc. void(* ROOT::Detail::TCollectionProxyInfo::fResizeFunc) (void *, size_t). Definition at line 504 of file TCollectionProxyInfo.h. ◆ fSizeFunc. void *(* ROOT::Detail::TCollectionProxyInfo::fSizeFunc) (void *). Definition at line 503 of file TCollectionProxyInfo.h. ◆ fValueDiff. size_t ROOT::Detail::TCollectionProxyInfo::fValueDiff. Definition at line 501 of file TCollectionProxyInfo.h. ◆ fValueOffset. int ROOT::Detail::TCollectionProxyInfo::fValueOffset. Definition at line 502 of file TCollectionProxyInfo.h. Libraries for ROOT::Detail::TCollectionProxyInfo:. [legend]; The documentation for this class was generated from the following file:; core/cont/inc/TCollectionProxyInfo.h. ROOTDetailTCollectionProxyInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html:8519,Guid,Guide,8519,doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,1,['Guid'],['Guide']
Usability,e 58 of file TFileMergeInfo.h. Member Function Documentation. ◆ Class(). static TClass * TFileMergeInfo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFileMergeInfo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFileMergeInfo::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 62 of file TFileMergeInfo.h. ◆ DeclFileName(). static const char * TFileMergeInfo::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 62 of file TFileMergeInfo.h. ◆ IsA(). virtual TClass * TFileMergeInfo::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 62 of file TFileMergeInfo.h. ◆ operator=(). TFileMergeInfo & TFileMergeInfo::operator= ; (; const TFileMergeInfo & ; ). privatedelete . ◆ Reset(). void TFileMergeInfo::Reset ; (; ). inline . Definition at line 60 of file TFileMergeInfo.h. ◆ Streamer(). virtual void TFileMergeInfo::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TFileMergeInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file TFileMergeInfo.h. Member Data Documentation. ◆ fIOFeatures. TIOFeatures* TFileMergeInfo::fIOFeatures {nullptr}. Definition at line 55 of file TFileMergeInfo.h. ◆ fIsFirst. Bool_t TFileMergeInfo::fIsFirst {kTRUE}. Definition at line 52 of file TFileMergeInfo.h. ◆ fOptions. TString TFileMergeInfo::fOptions. Definition at line 53 of file TFileMergeInfo.h. ◆ fOutputDirectory. TDirectory* TFileMergeInfo::fOutputDirectory {nullptr}. Definition at line 51 of file TFileMergeInfo.h. ◆ fUserData. TObject* TFileMergeInfo::fUserData {nullptr}. Definition at line 54 of file TFileMergeInfo.h. core/meta/inc/TFileMergeInfo.h. TFileMergeInfo. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:11:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFileMergeInfo.html:3814,Guid,Guide,3814,doc/v632/classTFileMergeInfo.html,https://root.cern,https://root.cern/doc/v632/classTFileMergeInfo.html,1,['Guid'],['Guide']
Usability,"e 688 of file RWebDisplayHandle.cxx. ◆ ProduceImage(). bool RWebDisplayHandle::ProduceImage ; (; const std::string & ; fname, . const std::string & ; json, . int ; width = 800, . int ; height = 600, . const char * ; batch_file = nullptr . ). static . Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ; Definition at line 904 of file RWebDisplayHandle.cxx. ◆ ProduceImages(). bool RWebDisplayHandle::ProduceImages ; (; const std::string & ; fname, . const std::vector< std::string > & ; jsons, . const std::vector< int > & ; widths, . const std::vector< int > & ; heights, . const char * ; batch_file = nullptr . ). static . Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ; Definition at line 912 of file RWebDisplayHandle.cxx. ◆ Resize(). virtual bool ROOT::RWebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlinevirtual . resize web window - if possible ; Reimplemented in ROOT::RQt5WebDisplayHandle, ROOT::RQt6WebDisplayHandle, and RCefWebDisplayHandle.; Definition at line 105 of file RWebDisplayHandle.hxx. ◆ SetContent(). void ROOT::RWebDisplayHandle::SetContent ; (; const std::string & ; cont). inline . set content ; Definition at line 100 of file RWebDisplayHandle.hxx. Member Data Documentation. ◆ fContent. std::string ROOT::RWebDisplayHandle::fContent. private . !< URL used to launch display ; Definition at line 29 of file RWebDisplayHandle.hxx. ◆ fUrl. std::string ROOT::RWebDisplayHandle::fUrl. private . Definition at line 27 of file RWebDisplayHandle.hxx. Libraries for ROOT::RWebDisplayHandle:. [legend]; The documentation for this class was generated from the following files:; gui/webdisplay/inc/ROOT/RWebDisplayHandle.hxx; gui/webdisplay/src/RWebDisplayHandle.cxx. ROOTRWebDisplayHandle. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html:8911,Guid,Guide,8911,doc/v632/classROOT_1_1RWebDisplayHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayHandle.html,1,['Guid'],['Guide']
Usability,"e 88 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorBoolProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorBoolProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; CopyIterator_t GetFunctionCopyIterator (Bool_t read=kTRUE) override;  See typedef void (*CopyIterator_t)(void *&dest, const void *source); Copy the iterator source, into dest. ;  ; CreateIterators_t GetFunctionCreateIterators (Bool_t read=kTRUE) override;  See typedef void (*CreateIterators_t)(void *collection, void *&begin_ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenVectorBoolProxy.html:1448,Clear,Clear,1448,doc/master/classTGenVectorBoolProxy.html,https://root.cern,https://root.cern/doc/master/classTGenVectorBoolProxy.html,2,['Clear'],['Clear']
Usability,"e : Separation; : -------------------------------; : 1 : m_bb : 9.511e-02; : 2 : m_wbb : 4.268e-02; : 3 : m_wwbb : 4.178e-02; : 4 : m_jjj : 2.825e-02; : 5 : m_jlv : 1.999e-02; : 6 : m_jj : 3.834e-03; : 7 : m_lv : 3.699e-03; : -------------------------------; Factory : Train method: Likelihood for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ Likelihood ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The maximum-likelihood classifier models the data with probability ; : density functions (PDF) reproducing the signal and background; : distributions of the input variables. Correlations among the ; : variables are ignored.; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Required for good performance are decorrelated input variables; : (PCA transformation via the option ""VarTransform=Decorrelate""; : may be tried). Irreducible non-linear correlations may be reduced; : by precombining strongly correlated input variables, or by simply; : removing one of the variables.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : High fidelity PDF estimates are mandatory, i.e., sufficient training ; : statistics is required to populate the tails of the distributions; : It would be a surprise if the default Spline or KDE kernel parameters; : provide a satisfying fit to the data. The user is advised to properly; : tune the events per bin and smooth options in the spline cases; : individually per variable. If the KDE kernel is used, the adaptive; : Gaussian kernel may lead to artefacts, so please always also try; : the non-adaptive one.; : ; : All tuning parameters must be adjusted individually for each input; : variable!; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; : Filling reference histograms; : Building PDF out of reference histograms; : Elapsed time for t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:16976,simpl,simply,16976,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,2,['simpl'],['simply']
Usability,"e ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 48 of file TEveBox.h. ◆ GetVertex(). const Float_t * TEveBox::GetVertex ; (; Int_t ; i); const. inline . Definition at line 40 of file TEveBox.h. ◆ IsA(). TClass * TEveBox::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElement.; Definition at line 48 of file TEveBox.h. ◆ operator=(). TEveBox & TEveBox::operator= ; (; const TEveBox & ; ). private . ◆ ProjectedClass(). TClass * TEveBox::ProjectedClass ; (; const TEveProjection * ; p); const. overridevirtual . Virtual from TEveProjectable, return TEveBoxProjected class. ; Implements TEveProjectable.; Definition at line 94 of file TEveBox.cxx. ◆ SetVertex() [1/2]. void TEveBox::SetVertex ; (; Int_t ; i, . const Float_t * ; v . ). Set vertex 'i'. ; Definition at line 59 of file TEveBox.cxx. ◆ SetVertex() [2/2]. void TEveBox::SetVertex ; (; Int_t ; i, . Float_t ; x, . Float_t ; y, . Float_t ; z . ). Set vertex 'i'. ; Definition at line 48 of file TEveBox.cxx. ◆ SetVertices(). void TEveBox::SetVertices ; (; const Float_t * ; vs). Set vertices. ; Definition at line 70 of file TEveBox.cxx. ◆ Streamer(). void TEveBox::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement. ◆ StreamerNVirtual(). void TEveBox::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TEveBox.h. Friends And Related Symbol Documentation. ◆ TEveBoxGL. friend class TEveBoxGL. friend . Definition at line 23 of file TEveBox.h. Member Data Documentation. ◆ fVertices. Float_t TEveBox::fVertices[8][3]. protected . Definition at line 30 of file TEveBox.h. Libraries for TEveBox:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveBox.h; graf3d/eve/src/TEveBox.cxx. TEveBox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBox.html:40802,Guid,Guide,40802,doc/master/classTEveBox.html,https://root.cern,https://root.cern/doc/master/classTEveBox.html,1,['Guid'],['Guide']
Usability,"e ; (; TGeoShape * ; shape, . Int_t ; testNo, . Int_t ; nsamples, . Option_t * ; option . ). Test for shape navigation methods. ; Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Definition at line 3783 of file TGeoManager.cxx. ◆ Class(). static TClass * TGeoManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 605 of file TGeoManager.h. ◆ CleanGarbage(). void TGeoManager::CleanGarbage ; (; ). Clean temporary volumes and shapes from garbage collection. ; Definition at line 1627 of file TGeoManager.cxx. ◆ ClearAttributes(). void TGeoManager::ClearAttributes ; (; ). Reset all attributes to default ones. ; Default attributes for visualization are those defined before closing the geometry. ; Definition at line 1455 of file TGeoManager.cxx. ◆ ClearNavigators(). void TGeoManager::ClearNavigators ; (; ). Clear all navigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:77584,Clear,ClearAttributes,77584,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['ClearAttributes']
Usability,"e ;  ► graphics;  analyze.C This macro produces the flowchart of TFormula::Analyze ;  anim.CMacro illustrating how to animate a picture using a Timer ;  archi.C This macro displays the ROOT architecture ;  arrows.C Draw arrowss ;  AtlasExample.C Show how ATLAS Style looks like ;  basic3d.C Show 3-D polylines and markers ;  canvas.C Example of primitives in a canvas ;  canvas2.C Example of canvas partitioning ;  compile.C This macro produces the flowchart of TFormula::Compile ;  crown.C Draw crowns ;  diamond.C Draw a diamond ;  earth.C This tutorial illustrates the special contour options ;  ellipse.C Draw ellipses ;  eval.C This macro produces the flowchart of TFormula::Eval ;  event.C Illustrate some basic primitives ;  feynman.C Draw Feynman diagrams ;  first.C Show some basic primitives ;  formula1.C Display interpreted functions ;  framework.C An example with basic graphics illustrating the Object Oriented User Interface of ROOT ;  gaxis.C Simple example illustrating how to draw TGaxis objects in various formats ;  gaxis2.C Example illustrating how to draw TGaxis with labels defined by a function ;  gaxis3.C Example illustrating how to modify individual labels of a TGaxis ;  graph_edit_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations ;  greyscale.C Create grey scale of 200 x 200 boxes ;  gtime.CExample of a graph of data moving in time ;  latex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:114140,Simpl,Simple,114140,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['Simpl'],['Simple']
Usability,"e = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TGeoPatternFinder&operator=(const TGeoPatternFinder&). Data Members; public:. enum EGeoPatternFlags { kPatternReflected; kPatternSpacedOut; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfDivIndexindex of first div. node; Double_tfEndending point; Int_tfNdivisionsnumber of divisions; Double_tfStartstarting point on divided axis; Double_tfStepdivision step length; vector<ThreadData_t*>fThreadData! Vector of thread private transient data; Int_tfThreadSize! Size of the thread vector; TGeoVolume*fVolumevolume to which applies. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. TGeoPatternFinder& operator=(const TGeoPatternFinder& ); assignment operator. ~TGeoPatternFinder(); Destructor. Int_t GetCurrent(); Return current index. TGeoMatrix* GetMatrix(); Return current matrix. Int_t GetNext() const; Get index of next division. void SetNext(Int_t index); Set index of next division. TGeoNode * CdNext(); Make next node (if any) current. void SetRange(Double_t start, Double_t step, Int_t ndivisions); Set division range. Use this method only when dividing an assembly. ThreadData_t& GetThreadData() const. TGeoMatrix* CreateMatrix() const; methods. void cd(Int_t ); {}. TGeoNode * FindNode(Double_t* , const Double_t* = 0); {return 0;}. Int_t GetByteCount() const; {return 36;}. Int_t GetDivIndex(); {return fDivIndex;}. Int_t GetDivAxis(); {return 1;}. Int_t GetNdiv() const; {return fNdivisions;}. TGeoNode * GetNodeOffset(Int_t idiv); {return fVolume->GetNode(fDivIndex+idiv);}. Double_t GetStart() const; {return fStart;}. Double_t GetStep() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternFinder.html:7640,Clear,ClearThreadData,7640,root/html532/TGeoPatternFinder.html,https://root.cern,https://root.cern/root/html532/TGeoPatternFinder.html,1,['Clear'],['ClearThreadData']
Usability,"e = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TGeoPatternFinder&operator=(const TGeoPatternFinder&). Data Members; public:. enum EGeoPatternFlags { kPatternReflected; kPatternSpacedOut; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfDivIndexindex of first div. node; Double_tfEndending point; Int_tfNdivisionsnumber of divisions; Double_tfStartstarting point on divided axis; Double_tfStepdivision step length; vector<ThreadData_t*>fThreadData! Vector of thread private transient data; Int_tfThreadSize! Size of the thread vector; TGeoVolume*fVolumevolume to which applies. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. void CreateThreadData(Int_t nthreads); Create thread data for n threads max. TGeoPatternFinder& operator=(const TGeoPatternFinder& ); assignment operator. ~TGeoPatternFinder(); Destructor. Int_t GetCurrent(); Return current index. TGeoMatrix* GetMatrix(); Return current matrix. Int_t GetNext() const; Get index of next division. void SetNext(Int_t index); Set index of next division. TGeoNode * CdNext(); Make next node (if any) current. void SetRange(Double_t start, Double_t step, Int_t ndivisions); Set division range. Use this method only when dividing an assembly. ThreadData_t& GetThreadData() const. TGeoMatrix* CreateMatrix() const; methods. void cd(Int_t ); {}. TGeoNode * FindNode(Double_t* , const Double_t* = 0); {return 0;}. Int_t GetByteCount() const; {return 36;}. Int_t GetDivIndex(); {return fDivIndex;}. Int_t GetDivAxis(); {return 1;}. Int_t GetNdiv() const; {return fNdivisions;}. TGeoNode * GetNodeOffset(Int_t idiv); {return fVolume->GetNode(fDivInd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPatternFinder.html:7697,Clear,ClearThreadData,7697,root/html534/TGeoPatternFinder.html,https://root.cern,https://root.cern/root/html534/TGeoPatternFinder.html,1,['Clear'],['ClearThreadData']
Usability,"e = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Bool_tTFormula::CheckOperands(Int_t operation, Int_t& err); virtual Bool_tTFormula::CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); voidTFormula::ClearFormula(Option_t* option = """"); virtual voidTFormula::Convert(UInt_t fromVersion); voidTF1::CreateFromFunctor(const char* name, Int_t npar); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTFormula::EvalParFast(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive0(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive1(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive2(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive3(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive4(const Double_t* x, const Double_t* params); Short_tTFormula::GetAction(Int_t code) const; Short_tTFormula::GetActionOptimized(Int_t code) const; Int_tTFormula::GetActionParam(Int_t code) const; Int_tTFormula::GetActionParamOptimized(Int_t code) const; virtual Double_tTF1::GetMinMaxNDim(Double_t* x, Bool_t findmax, Double_t epsilon = 0, Int_t maxiter = 0) const; Int_t*TFormula::GetOper() const; Int_t*TFormula::GetOperOptimized() const; virtual voidTF1::GetRange(Double_t* xmin, Double_t* xmax) const; virtual Bool_tTFormula::IsString(Int_t oper) const; voidTFormula::MakePrimitive(const char* expr, Int_t pos); voidTObject::MakeZombie(); Int_tTFormula::PreCompile(); voidTFormula::SetAction(Int_t code, Int_t value, Int_t param = 0); voidTFormula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tTFormula::StringToNumber(Int_t code). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF12.html:16065,Clear,ClearFormula,16065,root/html602/TF12.html,https://root.cern,https://root.cern/root/html602/TF12.html,1,['Clear'],['ClearFormula']
Usability,"e = 0, Bool_t useAxisBinning = kTRUE); TH1*GetDeltaSysTau(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTUnfold::GetEmatrix(TH2* ematrix, const Int_t* binMap = 0) const; TH2*GetEmatrixInput(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE); voidTUnfoldSys::GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); TH2*GetEmatrixSysBackgroundUncorr(const char* bgrSource, const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE); voidTUnfoldSys::GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidTUnfoldSys::GetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); TH2*GetEmatrixSysUncorr(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE); TH2*GetEmatrixTotal(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE); Double_tTUnfold::GetEpsMatrix() const; TH1*GetFoldedOutput(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE, Bool_t addBgr = kFALSE) const; virtual const char*TObject::GetIconName() const; TH1*GetInput(const char* histogramName, const char* histogramTitle = 0, const char* distributionName = 0, const char* projectionMode = 0, Bool_t useAxisBinning = kTRUE) const; const TUnfoldBinning*GetInputBinning(const char* distribu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldDensity.html:8680,clear,clearEmat,8680,root/html534/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html534/TUnfoldDensity.html,3,['clear'],['clearEmat']
Usability,"e = new TLine(0.86,0.24,0.86,0.26);; 286 line->Draw();; 287 line = new TLine(0.96,0.24,0.96,0.26);; 288 line->Draw();; 289}; c#define c(i)Definition RSha256.hxx:101; kWhite@ kWhiteDefinition Rtypes.h:65; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TPave::SetBorderSizevirtual void SetBorderSize(Int_t bordersize=4)Sets the border size of the TPave box and shadow.Definition TPave.h:77; TTextBase class for several text objects.Definition TText.h:22; lineTLine * lineDefinition entrylistblock_figure1.C:235; ptTPaveText * ptDefinition entrylistblock_figure1.C:7; textTText * textDefinition entrylistblock_figure1.C:9; arrowDefinition RArrowDS.hxx:17. treetreedocmacrosentrylistblock_figure1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/entrylistblock__figure1_8C_source.html:10905,Guid,Guide,10905,doc/master/entrylistblock__figure1_8C_source.html,https://root.cern,https://root.cern/doc/master/entrylistblock__figure1_8C_source.html,1,['Guid'],['Guide']
Usability,e = nullptr. staticprivate . Definition at line 345 of file VavilovAccurate.h. ◆ fH. double ROOT::Math::VavilovAccurate::fH[8]. private . Definition at line 333 of file VavilovAccurate.h. ◆ fKappa. double ROOT::Math::VavilovAccurate::fKappa. private . Definition at line 334 of file VavilovAccurate.h. ◆ fLambda. double ROOT::Math::VavilovAccurate::fLambda[kNquantMax]. mutableprivate . Definition at line 341 of file VavilovAccurate.h. ◆ fNQuant. int ROOT::Math::VavilovAccurate::fNQuant. mutableprivate . Definition at line 338 of file VavilovAccurate.h. ◆ fOmega. double ROOT::Math::VavilovAccurate::fOmega. private . Definition at line 333 of file VavilovAccurate.h. ◆ fQuant. double ROOT::Math::VavilovAccurate::fQuant[kNquantMax]. mutableprivate . Definition at line 340 of file VavilovAccurate.h. ◆ fQuantileInit. bool ROOT::Math::VavilovAccurate::fQuantileInit. mutableprivate . Definition at line 337 of file VavilovAccurate.h. ◆ fT. double ROOT::Math::VavilovAccurate::fT. private . Definition at line 333 of file VavilovAccurate.h. ◆ fT0. double ROOT::Math::VavilovAccurate::fT0. private . Definition at line 333 of file VavilovAccurate.h. ◆ fT1. double ROOT::Math::VavilovAccurate::fT1. private . Definition at line 333 of file VavilovAccurate.h. ◆ fX0. double ROOT::Math::VavilovAccurate::fX0. private . Definition at line 333 of file VavilovAccurate.h. ◆ kNquantMax. constexpr int ROOT::Math::VavilovAccurate::kNquantMax {32}. staticconstexprprivate . Definition at line 339 of file VavilovAccurate.h. ◆ MAXTERMS. constexpr int ROOT::Math::VavilovAccurate::MAXTERMS {500}. staticconstexprprivate . Definition at line 332 of file VavilovAccurate.h. Libraries for ROOT::Math::VavilovAccurate:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/VavilovAccurate.h; math/mathmore/src/VavilovAccurate.cxx. ROOTMathVavilovAccurate. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurate.html:23369,Guid,Guide,23369,doc/master/classROOT_1_1Math_1_1VavilovAccurate.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurate.html,1,['Guid'],['Guide']
Usability,e > xlo ; Implements RooAbsBinning.; Definition at line 216 of file RooBinning.cxx. ◆ Streamer(). void RooBinning::Streamer ; (; TBuffer & ; R__b). overridevirtual . Custom streamer that provides backward compatibility to read v1 data. ; Reimplemented from RooAbsBinning.; Definition at line 311 of file RooBinning.cxx. ◆ StreamerNVirtual(). void RooBinning::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 87 of file RooBinning.h. ◆ updateBinCount(). void RooBinning::updateBinCount ; (; ). protected . Update the internal bin counter. ; Definition at line 236 of file RooBinning.cxx. Member Data Documentation. ◆ _array. double* RooBinning::_array = nullptr. mutableprotected . ! Array of boundaries ; Definition at line 84 of file RooBinning.h. ◆ _blo. Int_t RooBinning::_blo = 0.0. mutableprotected . ! bin number for _xlo ; Definition at line 85 of file RooBinning.h. ◆ _boundaries. std::vector<double> RooBinning::_boundaries. protected . Boundaries. ; Definition at line 83 of file RooBinning.h. ◆ _nbins. Int_t RooBinning::_nbins. protected . Number of bins. ; Definition at line 81 of file RooBinning.h. ◆ _ownBoundHi. bool RooBinning::_ownBoundHi = true. protected . Does the upper bound coincide with a bin boundary. ; Definition at line 80 of file RooBinning.h. ◆ _ownBoundLo. bool RooBinning::_ownBoundLo = true. protected . Does the lower bound coincide with a bin boundary. ; Definition at line 79 of file RooBinning.h. ◆ _xhi. double RooBinning::_xhi = 0.0. protected . Upper bound. ; Definition at line 78 of file RooBinning.h. ◆ _xlo. double RooBinning::_xlo = 0.0. protected . Lower bound. ; Definition at line 77 of file RooBinning.h. Libraries for RooBinning:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooBinning.h; roofit/roofitcore/src/RooBinning.cxx. RooBinning. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinning.html:26507,Guid,Guide,26507,doc/master/classRooBinning.html,https://root.cern,https://root.cern/doc/master/classRooBinning.html,1,['Guid'],['Guide']
Usability,"e >.; Definition at line 134 of file LogLikelihoodFCN.h. ◆ UseSumOfWeightSquare(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . void ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::UseSumOfWeightSquare ; (; bool ; on = true). inline . Definition at line 139 of file LogLikelihoodFCN.h. Member Data Documentation. ◆ fExecutionPolicy. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ::ROOT::EExecutionPolicy ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fExecutionPolicy. private . Execution policy. ; Definition at line 176 of file LogLikelihoodFCN.h. ◆ fGrad. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . std::vector<double> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fGrad. mutableprivate . for derivatives ; Definition at line 174 of file LogLikelihoodFCN.h. ◆ fIsExtended. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . bool ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fIsExtended. private . flag for indicating if likelihood is extended ; Definition at line 168 of file LogLikelihoodFCN.h. ◆ fNEffPoints. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . unsigned int ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fNEffPoints. mutableprivate . number of effective points used in the fit ; Definition at line 172 of file LogLikelihoodFCN.h. ◆ fWeight. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . int ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::fWeight. private . flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ; Definition at line 169 of file LogLikelihoodFCN.h. math/mathcore/inc/Fit/LogLikelihoodFCN.h. ROOTFitLogLikelihoodFCN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:14290,Guid,Guide,14290,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Guid'],['Guide']
Usability,"e AFloat > . std::vector< int > TMVA::DNN::TCudaTensor< AFloat >::fInstances. staticprivate . For each GPU device keep the CUDA streams in which tensors are used. ; Instances belonging to the same stream on the same deviceshare a cudnn library handel to keep cudnn contexts seperated ; Definition at line 111 of file CudaTensor.h. ◆ fMemoryLayout. template<typename AFloat > . MemoryLayout TMVA::DNN::TCudaTensor< AFloat >::fMemoryLayout. private . Definition at line 126 of file CudaTensor.h. ◆ fNDim. template<typename AFloat > . size_t TMVA::DNN::TCudaTensor< AFloat >::fNDim. private . Dimension of the tensor (first dimension is the batch size, second is the no. channels) ; Definition at line 118 of file CudaTensor.h. ◆ fShape. template<typename AFloat > . Shape_t TMVA::DNN::TCudaTensor< AFloat >::fShape. private . The shape vector (size of dimensions) needs to be ordered as no. ; channels, image dimensions. spatial subdimensions ; Definition at line 116 of file CudaTensor.h. ◆ fSize. template<typename AFloat > . size_t TMVA::DNN::TCudaTensor< AFloat >::fSize. private . No. of elements. ; Definition at line 119 of file CudaTensor.h. ◆ fStreamIndx. template<typename AFloat > . int TMVA::DNN::TCudaTensor< AFloat >::fStreamIndx. private . Cuda stream associated with current instance. ; Definition at line 121 of file CudaTensor.h. ◆ fStrides. template<typename AFloat > . Shape_t TMVA::DNN::TCudaTensor< AFloat >::fStrides. private . Strides between tensor dimensions (always assume dense, non overlapping tensor) ; Definition at line 117 of file CudaTensor.h. ◆ fTensorDescriptor. template<typename AFloat > . std::shared_ptr<TensorDescriptor> TMVA::DNN::TCudaTensor< AFloat >::fTensorDescriptor. private . Definition at line 123 of file CudaTensor.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h; tmva/tmva/src/DNN/Architectures/Cuda/CudaTensor.cu. TMVADNNTCudaTensor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html:19966,Guid,Guide,19966,doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html,1,['Guid'],['Guide']
Usability,"e ASCII data file. ;  ; template Long64_t FillNtupleFromStream< Double_t, TNtupleD > (std::istream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets you to have newline-characters inside a tuple's row (as it worked in ROOT prior to v5.3xxx). ; Definition at line 80 of file TreeUtils.cxx. ◆ FillNtupleFromStream< Double_t, TNtupleD >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Double_t, TNtupleD > ; (; std::istream & ; , . TNtupleD & ; , . char ; , . bool ;  . ). ◆ FillNtupleFromStream< Float_t, TNtuple >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Float_t, TNtuple > ; (; std::istream & ; , . TNtuple & ; , . char ; , . bool ;  . ). ◆ NextCharacterIsEOL(). bool ROOT::TreeUtils::NextCharacterIsEOL ; (; std::istream & ; input). Either",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html:1636,simpl,simple,1636,doc/master/namespaceROOT_1_1TreeUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html,2,['simpl'],['simple']
Usability,"e Attributes |; List of all members ; TObjOptLink Class Reference. . Definition at line 166 of file TList.h. Public Member Functions;  TObjOptLink (TObject *obj, Option_t *opt);  ;  ~TObjOptLink ();  ; Option_t * GetAddOption () const override;  ; Option_t * GetOption () const override;  ; void SetOption (Option_t *option) override;  ;  Public Member Functions inherited from TObjLink;  TObjLink (TObject *obj);  ; virtual ~TObjLink ();  ; TObject * GetObject () const;  ; TObject ** GetObjectRef ();  ; TObjLink * Next ();  ; TObjLinkPtr_t NextSP ();  ; TObjLink * Prev ();  ; TObjLinkPtr_t PrevSP ();  ; void SetObject (TObject *obj);  . Private Attributes; TString fOption;  . #include <TList.h>. Inheritance diagram for TObjOptLink:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TObjOptLink(). TObjOptLink::TObjOptLink ; (; TObject * ; obj, . Option_t * ; opt . ). inline . Definition at line 172 of file TList.h. ◆ ~TObjOptLink(). TObjOptLink::~TObjOptLink ; (; ). inline . Definition at line 173 of file TList.h. Member Function Documentation. ◆ GetAddOption(). Option_t * TObjOptLink::GetAddOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObjLink.; Definition at line 174 of file TList.h. ◆ GetOption(). Option_t * TObjOptLink::GetOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObjLink.; Definition at line 175 of file TList.h. ◆ SetOption(). void TObjOptLink::SetOption ; (; Option_t * ; option). inlineoverridevirtual . Reimplemented from TObjLink.; Definition at line 176 of file TList.h. Member Data Documentation. ◆ fOption. TString TObjOptLink::fOption. private . Definition at line 169 of file TList.h. Libraries for TObjOptLink:. [legend]; The documentation for this class was generated from the following file:; core/cont/inc/TList.h. TObjOptLink. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjOptLink.html:2094,Guid,Guide,2094,doc/master/classTObjOptLink.html,https://root.cern,https://root.cern/doc/master/classTObjOptLink.html,1,['Guid'],['Guide']
Usability,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:861,Clear,Clear,861,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"e CrossValidation.cxx. Friends And Related Symbol Documentation. ◆ CrossValidation. friend class CrossValidation. friend . Definition at line 79 of file CrossValidation.h. Member Data Documentation. ◆ fEff01s. std::vector<Double_t> TMVA::CrossValidationResult::fEff01s. private . Definition at line 87 of file CrossValidation.h. ◆ fEff10s. std::vector<Double_t> TMVA::CrossValidationResult::fEff10s. private . Definition at line 88 of file CrossValidation.h. ◆ fEff30s. std::vector<Double_t> TMVA::CrossValidationResult::fEff30s. private . Definition at line 89 of file CrossValidation.h. ◆ fEffAreas. std::vector<Double_t> TMVA::CrossValidationResult::fEffAreas. private . Definition at line 90 of file CrossValidation.h. ◆ fROCCurves. std::shared_ptr<TMultiGraph> TMVA::CrossValidationResult::fROCCurves. private . Definition at line 83 of file CrossValidation.h. ◆ fROCs. std::map<UInt_t, Float_t> TMVA::CrossValidationResult::fROCs. private . Definition at line 82 of file CrossValidation.h. ◆ fSeps. std::vector<Double_t> TMVA::CrossValidationResult::fSeps. private . Definition at line 86 of file CrossValidation.h. ◆ fSigs. std::vector<Double_t> TMVA::CrossValidationResult::fSigs. private . Definition at line 85 of file CrossValidation.h. ◆ fTrainEff01s. std::vector<Double_t> TMVA::CrossValidationResult::fTrainEff01s. private . Definition at line 91 of file CrossValidation.h. ◆ fTrainEff10s. std::vector<Double_t> TMVA::CrossValidationResult::fTrainEff10s. private . Definition at line 92 of file CrossValidation.h. ◆ fTrainEff30s. std::vector<Double_t> TMVA::CrossValidationResult::fTrainEff30s. private . Definition at line 93 of file CrossValidation.h. Libraries for TMVA::CrossValidationResult:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CrossValidation.h; tmva/tmva/src/CrossValidation.cxx. TMVACrossValidationResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidationResult.html:7859,Guid,Guide,7859,doc/master/classTMVA_1_1CrossValidationResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidationResult.html,1,['Guid'],['Guide']
Usability,"e Event.cxx. ◆ Event() [5/6]. TMVA::Event::Event ; (; const std::vector< Float_t > & ; ev, . UInt_t ; theClass, . Double_t ; weight = 1.0, . Double_t ; boostweight = 1.0 . ). explicit . constructor ; Definition at line 108 of file Event.cxx. ◆ Event() [6/6]. TMVA::Event::Event ; (; const std::vector< Float_t * > *& ; evdyn, . UInt_t ; nvar . ). explicit . constructor for single events ; Definition at line 128 of file Event.cxx. ◆ ~Event(). TMVA::Event::~Event ; (; ). Event destructor. ; Definition at line 184 of file Event.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Event::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Event::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Event::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 153 of file Event.h. ◆ ClearDynamicVariables(). static void TMVA::Event::ClearDynamicVariables ; (; ). inlinestatic . Definition at line 122 of file Event.h. ◆ CopyVarValues(). void TMVA::Event::CopyVarValues ; (; const Event & ; other). copies only the variable values ; Definition at line 203 of file Event.cxx. ◆ DeclFileName(). static const char * TMVA::Event::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file Event.h. ◆ GetBoostWeight(). Double_t TMVA::Event::GetBoostWeight ; (; ); const. inline . Definition at line 85 of file Event.h. ◆ GetClass(). UInt_t TMVA::Event::GetClass ; (; ); const. inline . Definition at line 86 of file Event.h. ◆ GetNSpectators(). UInt_t TMVA::Event::GetNSpectators ; (; ); const. accessor to the number of spectators ; Definition at line 335 of file Event.cxx. ◆ GetNTargets(). UInt_t TMVA::Event::GetNTargets ; (; ); const. accessor to the number of targets ; Definition at line 327 of file Event.cxx. ◆ GetNVariables(). UInt_t TMVA::Event::GetNVariables ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Event.html:16158,Clear,ClearDynamicVariables,16158,doc/master/classTMVA_1_1Event.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html,1,['Clear'],['ClearDynamicVariables']
Usability,"e Graph Example . i 0 0.000000 1.986693 ; i 1 0.100000 2.955202 ; i 2 0.200000 3.894183 ; i 3 0.300000 4.794255 ; i 4 0.400000 5.646425 ; i 5 0.500000 6.442177 ; i 6 0.600000 7.173561 ; i 7 0.700000 7.833269 ; i 8 0.800000 8.414710 ; i 9 0.900000 8.912074 ; i 10 1.000000 9.320391 ; i 11 1.100000 9.635582 ; i 12 1.200000 9.854497 ; i 13 1.300000 9.974950 ; i 14 1.400000 9.995736 ; i 15 1.500000 9.916648 ; i 16 1.600000 9.738476 ; i 17 1.700000 9.463001 ; i 18 1.800000 9.092974 ; i 19 1.900000 8.632094 ; ; from __future__ import print_function; from ROOT import TCanvas, TGraph; from ROOT import gROOT; from math import sin; from array import array; ; ; c1 = TCanvas( 'c1', 'A Simple Graph Example', 200, 10, 700, 500 ); ; c1.SetFillColor( 42 ); c1.SetGrid(); ; n = 20; x, y = array( 'd' ), array( 'd' ); ; for i in range( n ):; x.append( 0.1*i ); y.append( 10*sin( x[i]+0.2 ) ); print(' i %i %f %f ' % (i,x[i],y[i])); ; gr = TGraph( n, x, y ); gr.SetLineColor( 2 ); gr.SetLineWidth( 4 ); gr.SetMarkerColor( 4 ); gr.SetMarkerStyle( 21 ); gr.SetTitle( 'a simple graph' ); gr.GetXaxis().SetTitle( 'X title' ); gr.GetYaxis().SetTitle( 'Y title' ); gr.Draw( 'ACP' ); ; # TCanvas.Update() draws the frame, after which one can change it; c1.Update(); c1.GetFrame().SetFillColor( 21 ); c1.GetFrame().SetBorderSize( 12 ); c1.Modified(); c1.Update(); # If the graph does not appear, try using the ""i"" flag, e.g. ""python3 -i graph.py""; # This will access the interactive mode after executing the script, and thereby persist; # long enough for the graph to appear.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen ; Definition in file graph.py. tutorialspyrootgraph.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph_8py.html:1284,simpl,simple,1284,doc/master/graph_8py.html,https://root.cern,https://root.cern/doc/master/graph_8py.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,e LCGEngine.h. ◆ GetState(). void ROOT::Math::LCGEngine::GetState ; (; std::vector< uint32_t > & ; state). inlineprotected . Definition at line 74 of file LCGEngine.h. ◆ IntRndm(). uint32_t ROOT::Math::LCGEngine::IntRndm ; (; ). inline . Definition at line 54 of file LCGEngine.h. ◆ MaxInt(). static unsigned int ROOT::Math::LCGEngine::MaxInt ; (; ). inlinestatic . maximum integer that can be generated ; Definition at line 62 of file LCGEngine.h. ◆ MinInt(). static unsigned int ROOT::Math::LCGEngine::MinInt ; (; ). inlinestatic . minimum integer that can be generated ; Definition at line 60 of file LCGEngine.h. ◆ Name(). static std::string ROOT::Math::LCGEngine::Name ; (; ). inlinestatic . Name of the generator. ; Definition at line 66 of file LCGEngine.h. ◆ operator()(). double ROOT::Math::LCGEngine::operator() ; (; ). inline . Definition at line 52 of file LCGEngine.h. ◆ Rndm(). double ROOT::Math::LCGEngine::Rndm ; (; ). inlineoverridevirtual . Implements ROOT::Math::TRandomEngine.; Definition at line 48 of file LCGEngine.h. ◆ Rndm_impl(). double ROOT::Math::LCGEngine::Rndm_impl ; (; ). inlineprivate . Definition at line 81 of file LCGEngine.h. ◆ SetSeed(). void ROOT::Math::LCGEngine::SetSeed ; (; uint32_t ; seed). inline . Definition at line 46 of file LCGEngine.h. ◆ SetState(). void ROOT::Math::LCGEngine::SetState ; (; const std::vector< uint32_t > & ; state). inlineprotected . Definition at line 69 of file LCGEngine.h. ◆ Size(). static int ROOT::Math::LCGEngine::Size ; (; ). inlinestatic . Size of the generator state. ; Definition at line 64 of file LCGEngine.h. Member Data Documentation. ◆ fSeed. uint32_t ROOT::Math::LCGEngine::fSeed. private . Definition at line 88 of file LCGEngine.h. Libraries for ROOT::Math::LCGEngine:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/LCGEngine.h. ROOTMathLCGEngine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LCGEngine.html:4200,Guid,Guide,4200,doc/master/classROOT_1_1Math_1_1LCGEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LCGEngine.html,1,['Guid'],['Guide']
Usability,"e MinimizerOptions class. For the list of the available option parameter one must look at the documentation of the corresponding derived class.; The interface to retrieve the result of minimization ( minimum X values, function value, gradient, error on the minimum, etc...); The interface to perform a Scan, Hesse or a Contour plot (for the minimizers that support this, i.e. Minuit and Minuit2). An example on how to use this interface is the tutorial NumericalMinimization.C in the tutorials/fit directory. ; Definition at line 119 of file Minimizer.h. Public Member Functions;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:4214,Clear,Clear,4214,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['Clear'],['Clear']
Usability,"e Notes; 2022-09-29. Introduction; General; Deprecation and Removal; Header Dependency Reduction. Core Libraries; Dynamic Path: ROOT_LIBRARY_PATH; Interpreter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:1011,Guid,Guide,1011,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['Guid'],['Guide']
Usability,"e ROOT pythonizations were moved from C++ functions to pure Python bindings using the public cppyy API. This helps in the integration with the tool but also improves code efficiency and memory usage.; Class Reference Guide. Define missing doxygen groups.; Fix a few typos in the THStack documentation.; Small fixes in the THistPainter documentation.; Improve the TColor documentation: use modern C++ in the examples.; Make sure the python examples do not generate wrong namespaces in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#1540",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:24062,Simpl,Simplify,24062,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['Simpl'],['Simplify']
Usability,"e ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O.Definition TFitResult.h:34; TFitResult::~TFitResult~TFitResult() overrideDefinition TFitResult.h:53; TFitResult::TFitResultTFitResult(int status=0)Definition TFitResult.h:39; TFitResult::Errordouble Error(unsigned int i) constDefinition TFitResult.h:74; TFitResult::GetCorrelationMatrixTMatrixDSym GetCorrelationMatrix() constReturn the correlation matrix from fit.Definition TFitResult.cxx:77; TFitResult::Contourbool Contour(unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683)Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or...Definition TFitResult.cxx:119; TFitResult::GetCovarianceMatrixTMatrixDSym GetCovarianceMatrix() constReturn the covariance matrix from fit.Definition TFitResult.cxx:59; TFitResult::Printvoid Print(Option_t *option="""") const overridePrint result of the fit, by default chi2, parameter values and errors.Definition TFitResult.cxx:44; TFitResult::TFitResultTFitResult(const char *name, const char *title)Definition TFitResult.h:45; TFitResult::Scanbool Scan(unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0)Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return fill...Definition TFitResult.cxx:93; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TMatrixTSym< Double_t >; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; grTGraphErrors * grDefinition legend1.C:25; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. histhistincTFitResult.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResult_8h_source.html:6000,Guid,Guide,6000,doc/master/TFitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/TFitResult_8h_source.html,1,['Guid'],['Guide']
Usability,"e RWebWindow.cxx. Friends And Related Symbol Documentation. ◆ RFileDialog. friend class RFileDialog. friend . Definition at line 57 of file RWebWindow.hxx. ◆ RWebDisplayHandle. friend class RWebDisplayHandle. friend . Definition at line 56 of file RWebWindow.hxx. ◆ RWebWindowsManager. friend class RWebWindowsManager. friend . Definition at line 54 of file RWebWindow.hxx. ◆ RWebWindowWSHandler. friend class RWebWindowWSHandler. friend . Definition at line 55 of file RWebWindow.hxx. Member Data Documentation. ◆ fCallbacksThrdId. std::thread::id ROOT::RWebWindow::fCallbacksThrdId. private . ! thread id where callbacks should be invoked ; Definition at line 160 of file RWebWindow.hxx. ◆ fCallbacksThrdIdSet. bool ROOT::RWebWindow::fCallbacksThrdIdSet {false}. private . ! flag indicating that thread id is assigned ; Definition at line 161 of file RWebWindow.hxx. ◆ fClearOnClose. std::shared_ptr<void> ROOT::RWebWindow::fClearOnClose. private . ! entry which is cleared when last connection is closed ; Definition at line 176 of file RWebWindow.hxx. ◆ fClientVersion. std::string ROOT::RWebWindow::fClientVersion. private . ! configured client version, used as prefix in scripts URL ; Definition at line 169 of file RWebWindow.hxx. ◆ fConn. ConnectionsList_t ROOT::RWebWindow::fConn. private . ! list of all accepted connections ; Definition at line 150 of file RWebWindow.hxx. ◆ fConnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fConnCallback. private . ! callback for connect event ; Definition at line 157 of file RWebWindow.hxx. ◆ fConnCnt. unsigned ROOT::RWebWindow::fConnCnt {0}. private . ! counter of new connections to assign ids ; Definition at line 148 of file RWebWindow.hxx. ◆ fConnLimit. unsigned ROOT::RWebWindow::fConnLimit {1}. private . ! number of allowed active connections ; Definition at line 152 of file RWebWindow.hxx. ◆ fConnMutex. std::mutex ROOT::RWebWindow::fConnMutex. mutableprivate . ! mutex used to protect connection list ; Definition at line 151 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:53709,clear,cleared,53709,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['clear'],['cleared']
Usability,"e RWebWindow.cxx. Friends And Related Symbol Documentation. ◆ RFileDialog. friend class RFileDialog. friend . Definition at line 59 of file RWebWindow.hxx. ◆ RWebDisplayHandle. friend class RWebDisplayHandle. friend . Definition at line 58 of file RWebWindow.hxx. ◆ RWebWindowsManager. friend class RWebWindowsManager. friend . Definition at line 56 of file RWebWindow.hxx. ◆ RWebWindowWSHandler. friend class RWebWindowWSHandler. friend . Definition at line 57 of file RWebWindow.hxx. Member Data Documentation. ◆ fCallbacksThrdId. std::thread::id ROOT::RWebWindow::fCallbacksThrdId. private . ! thread id where callbacks should be invoked ; Definition at line 163 of file RWebWindow.hxx. ◆ fCallbacksThrdIdSet. bool ROOT::RWebWindow::fCallbacksThrdIdSet {false}. private . ! flag indicating that thread id is assigned ; Definition at line 164 of file RWebWindow.hxx. ◆ fClearOnClose. std::shared_ptr<void> ROOT::RWebWindow::fClearOnClose. private . ! entry which is cleared when last connection is closed ; Definition at line 179 of file RWebWindow.hxx. ◆ fClientVersion. std::string ROOT::RWebWindow::fClientVersion. private . ! configured client version, used as prefix in scripts URL ; Definition at line 172 of file RWebWindow.hxx. ◆ fConn. ConnectionsList_t ROOT::RWebWindow::fConn. private . ! list of all accepted connections ; Definition at line 153 of file RWebWindow.hxx. ◆ fConnCallback. WebWindowConnectCallback_t ROOT::RWebWindow::fConnCallback. private . ! callback for connect event ; Definition at line 160 of file RWebWindow.hxx. ◆ fConnCnt. unsigned ROOT::RWebWindow::fConnCnt {0}. private . ! counter of new connections to assign ids ; Definition at line 151 of file RWebWindow.hxx. ◆ fConnLimit. unsigned ROOT::RWebWindow::fConnLimit {1}. private . ! number of allowed active connections ; Definition at line 155 of file RWebWindow.hxx. ◆ fConnMutex. std::mutex ROOT::RWebWindow::fConnMutex. mutableprivate . ! mutex used to protect connection list ; Definition at line 154 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:52593,clear,cleared,52593,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['clear'],['cleared']
Usability,"e ReadLeaves implementation to use.; TRefTable*fRefTablepointer to the TRefTable; Bool_tTBranch::fSkipZip! After being read, the buffer will not be unziped.; Int_tTBranch::fSplitLevelBranch split level; TStringTNamed::fTitleobject title; Long64_tTBranch::fTotBytesTotal number of bytes in all leaves before compression; TTree*TBranch::fTree! Pointer to Tree header; Int_tTBranch::fWriteBasketLast basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter; static TBranch::EStatusBitsTBranch::kAutoDelete; static TBranch::EStatusBitsTBranch::kDoNotUseBufferMap. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBranchRef.html:14775,Clear,Clear,14775,root/html602/TBranchRef.html,https://root.cern,https://root.cern/root/html602/TBranchRef.html,4,['Clear'],['Clear']
Usability,"e RooIntegralMorph.cxx. ◆ selfNormalized(). bool RooIntegralMorph::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsCachedPdf.; Definition at line 37 of file RooIntegralMorph.h. ◆ setCacheAlpha(). void RooIntegralMorph::setCacheAlpha ; (; bool ; flag). inline . Definition at line 41 of file RooIntegralMorph.h. ◆ Streamer(). void RooIntegralMorph::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCachedPdf. ◆ StreamerNVirtual(). void RooIntegralMorph::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 110 of file RooIntegralMorph.h. Friends And Related Symbol Documentation. ◆ MorphCacheElem. friend class MorphCacheElem. friend . Definition at line 91 of file RooIntegralMorph.h. Member Data Documentation. ◆ _cache. MorphCacheElem* RooIntegralMorph::_cache = nullptr. mutableprotected . Definition at line 103 of file RooIntegralMorph.h. ◆ _cacheAlpha. bool RooIntegralMorph::_cacheAlpha. protected . Definition at line 102 of file RooIntegralMorph.h. ◆ alpha. RooRealProxy RooIntegralMorph::alpha. protected . Definition at line 101 of file RooIntegralMorph.h. ◆ pdf1. RooRealProxy RooIntegralMorph::pdf1. protected . Definition at line 98 of file RooIntegralMorph.h. ◆ pdf2. RooRealProxy RooIntegralMorph::pdf2. protected . Definition at line 99 of file RooIntegralMorph.h. ◆ x. RooRealProxy RooIntegralMorph::x. protected . Definition at line 100 of file RooIntegralMorph.h. Libraries for RooIntegralMorph:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooIntegralMorph.h; roofit/roofit/src/RooIntegralMorph.cxx. RooIntegralMorph. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:87077,Guid,Guide,87077,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['Guid'],['Guide']
Usability,"e RuleEnsemble.cxx. ◆ CalcRuleSupport(). void TMVA::RuleEnsemble::CalcRuleSupport ; (; ). calculate the support for all rules ; Definition at line 367 of file RuleEnsemble.cxx. ◆ CalcVarImportance(). void TMVA::RuleEnsemble::CalcVarImportance ; (; ). Calculates variable importance using eq (35) in RuleFit paper by Friedman et.al. ; Definition at line 481 of file RuleEnsemble.cxx. ◆ CleanupLinear(). void TMVA::RuleEnsemble::CleanupLinear ; (; ). cleanup linear model ; Definition at line 352 of file RuleEnsemble.cxx. ◆ CleanupRules(). void TMVA::RuleEnsemble::CleanupRules ; (; ). cleanup rules ; Definition at line 325 of file RuleEnsemble.cxx. ◆ ClearCoefficients(). void TMVA::RuleEnsemble::ClearCoefficients ; (; Double_t ; val = 0). inline . Definition at line 119 of file RuleEnsemble.h. ◆ ClearLinCoefficients(). void TMVA::RuleEnsemble::ClearLinCoefficients ; (; Double_t ; val = 0). inline . Definition at line 120 of file RuleEnsemble.h. ◆ ClearLinNorm(). void TMVA::RuleEnsemble::ClearLinNorm ; (; Double_t ; val = 1.0). inline . Definition at line 121 of file RuleEnsemble.h. ◆ ClearRuleMap(). void TMVA::RuleEnsemble::ClearRuleMap ; (; ). inline . Definition at line 150 of file RuleEnsemble.h. ◆ CoefficientRadius(). Double_t TMVA::RuleEnsemble::CoefficientRadius ; (; ). Calculates sqrt(Sum(a_i^2)), i=1..N (NOTE do not include a0) ; Definition at line 198 of file RuleEnsemble.cxx. ◆ Copy(). void TMVA::RuleEnsemble::Copy ; (; RuleEnsemble const & ; other). private . copy function ; Definition at line 1226 of file RuleEnsemble.cxx. ◆ DeleteRules(). void TMVA::RuleEnsemble::DeleteRules ; (; ). inlineprivate . Definition at line 319 of file RuleEnsemble.h. ◆ DoFull(). Bool_t TMVA::RuleEnsemble::DoFull ; (; ); const. inline . Definition at line 257 of file RuleEnsemble.h. ◆ DoLinear(). Bool_t TMVA::RuleEnsemble::DoLinear ; (; ); const. inline . Definition at line 253 of file RuleEnsemble.h. ◆ DoOnlyLinear(). Bool_t TMVA::RuleEnsemble::DoOnlyLinear ; (; ); const. inline . De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:14060,Clear,ClearLinNorm,14060,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['Clear'],['ClearLinNorm']
Usability,"e RuleEnsemble.h. ◆ CalcNRules(). Int_t TMVA::RuleEnsemble::CalcNRules ; (; const TMVA::DecisionTree * ; dtree). calculate the number of rules ; Definition at line 1253 of file RuleEnsemble.cxx. ◆ CalcRuleImportance(). Double_t TMVA::RuleEnsemble::CalcRuleImportance ; (; ). calculate importance of each rule ; Definition at line 435 of file RuleEnsemble.cxx. ◆ CalcRuleSupport(). void TMVA::RuleEnsemble::CalcRuleSupport ; (; ). calculate the support for all rules ; Definition at line 367 of file RuleEnsemble.cxx. ◆ CalcVarImportance(). void TMVA::RuleEnsemble::CalcVarImportance ; (; ). Calculates variable importance using eq (35) in RuleFit paper by Friedman et.al. ; Definition at line 481 of file RuleEnsemble.cxx. ◆ CleanupLinear(). void TMVA::RuleEnsemble::CleanupLinear ; (; ). cleanup linear model ; Definition at line 352 of file RuleEnsemble.cxx. ◆ CleanupRules(). void TMVA::RuleEnsemble::CleanupRules ; (; ). cleanup rules ; Definition at line 325 of file RuleEnsemble.cxx. ◆ ClearCoefficients(). void TMVA::RuleEnsemble::ClearCoefficients ; (; Double_t ; val = 0). inline . Definition at line 119 of file RuleEnsemble.h. ◆ ClearLinCoefficients(). void TMVA::RuleEnsemble::ClearLinCoefficients ; (; Double_t ; val = 0). inline . Definition at line 120 of file RuleEnsemble.h. ◆ ClearLinNorm(). void TMVA::RuleEnsemble::ClearLinNorm ; (; Double_t ; val = 1.0). inline . Definition at line 121 of file RuleEnsemble.h. ◆ ClearRuleMap(). void TMVA::RuleEnsemble::ClearRuleMap ; (; ). inline . Definition at line 150 of file RuleEnsemble.h. ◆ CoefficientRadius(). Double_t TMVA::RuleEnsemble::CoefficientRadius ; (; ). Calculates sqrt(Sum(a_i^2)), i=1..N (NOTE do not include a0) ; Definition at line 198 of file RuleEnsemble.cxx. ◆ Copy(). void TMVA::RuleEnsemble::Copy ; (; RuleEnsemble const & ; other). private . copy function ; Definition at line 1226 of file RuleEnsemble.cxx. ◆ DeleteRules(). void TMVA::RuleEnsemble::DeleteRules ; (; ). inlineprivate . Definition at line 319 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:13717,Clear,ClearCoefficients,13717,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['Clear'],['ClearCoefficients']
Usability,e TDSet.h. ◆ Streamer(). void TDSetElement::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TDSetElement. ; Reimplemented from TObject.; Definition at line 1722 of file TDSet.cxx. ◆ StreamerNVirtual(). void TDSetElement::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 149 of file TDSet.h. ◆ Validate() [1/2]. void TDSetElement::Validate ; (; Bool_t ; isTree). Validate by opening the file. ; Definition at line 275 of file TDSet.cxx. ◆ Validate() [2/2]. void TDSetElement::Validate ; (; TDSetElement * ; elem). Validate by checking against another element. ; Definition at line 301 of file TDSet.cxx. Member Data Documentation. ◆ fAssocObjList. TList* TDSetElement::fAssocObjList. private . Definition at line 92 of file TDSet.h. ◆ fDataSet. TString TDSetElement::fDataSet. private . Definition at line 91 of file TDSet.h. ◆ fDirectory. TString TDSetElement::fDirectory. private . Definition at line 80 of file TDSet.h. ◆ fEntries. Long64_t TDSetElement::fEntries. private . Definition at line 88 of file TDSet.h. ◆ fEntryList. TObject* TDSetElement::fEntryList. private . Definition at line 86 of file TDSet.h. ◆ fFirst. Long64_t TDSetElement::fFirst. private . Definition at line 81 of file TDSet.h. ◆ fFriends. TList* TDSetElement::fFriends. private . Definition at line 89 of file TDSet.h. ◆ fMaxProcTime. Float_t TDSetElement::fMaxProcTime. private . Definition at line 94 of file TDSet.h. ◆ fMsd. TString TDSetElement::fMsd. private . Definition at line 83 of file TDSet.h. ◆ fNum. Long64_t TDSetElement::fNum. private . Definition at line 82 of file TDSet.h. ◆ fTDSetOffset. Long64_t TDSetElement::fTDSetOffset. private . Definition at line 84 of file TDSet.h. ◆ fValid. Bool_t TDSetElement::fValid. private . Definition at line 87 of file TDSet.h. proof/proof/inc/TDSet.h; proof/proof/src/TDSet.cxx. TDSetElement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSetElement.html:24437,Guid,Guide,24437,doc/master/classTDSetElement.html,https://root.cern,https://root.cern/doc/master/classTDSetElement.html,1,['Guid'],['Guide']
Usability,"e TEmulatedCollectionProxy.cxx. Member Function Documentation. ◆ Allocate(). void * TEmulatedCollectionProxy::Allocate ; (; UInt_t ; n, . Bool_t ; forceDelete . ). overridevirtual . Allocates space for storing at least n elements. ; This function returns a pointer to the actual object on which insertions should take place. For associative collections, this function returns a pointer to a temporary buffer known as the staging area. If the insertion happened in a staging area (i.e. the returned pointer != proxied object), Commit() should be called on the value returned by this function. ; Implements TVirtualCollectionProxy.; Definition at line 486 of file TEmulatedCollectionProxy.cxx. ◆ At(). void * TEmulatedCollectionProxy::At ; (; UInt_t ; idx). overridevirtual . Return the address of the value at index idx ; Implements TVirtualCollectionProxy.; Reimplemented in TEmulatedMapProxy.; Definition at line 471 of file TEmulatedCollectionProxy.cxx. ◆ Clear(). void TEmulatedCollectionProxy::Clear ; (; const char * ; opt = """"). overridevirtual . Clear the container. ; Implements TVirtualCollectionProxy.; Definition at line 260 of file TEmulatedCollectionProxy.cxx. ◆ Commit(). void TEmulatedCollectionProxy::Commit ; (; void * ; ). overridevirtual . Commits pending elements in a staging area (see Allocate() for more information). ; Implements TVirtualCollectionProxy.; Definition at line 503 of file TEmulatedCollectionProxy.cxx. ◆ DeleteArray(). void TEmulatedCollectionProxy::DeleteArray ; (; void * ; p, . Bool_t ; dtorOnly = kFALSE . ); const. overridevirtual . Execute the container array destructor. ; Reimplemented from TVirtualCollectionProxy.; Definition at line 97 of file TEmulatedCollectionProxy.cxx. ◆ Destructor(). void TEmulatedCollectionProxy::Destructor ; (; void * ; p, . Bool_t ; dtorOnly = kFALSE . ); const. overridevirtual . Execute the container destructor. ; Reimplemented from TVirtualCollectionProxy.; Definition at line 78 of file TEmulatedCollectionProxy.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:15413,Clear,Clear,15413,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,1,['Clear'],['Clear']
Usability,"e TGButton.cxx. ◆ SetDisabledAndSelected(). void TGRadioButton::SetDisabledAndSelected ; (; Bool_t ; enable). virtual . Set the state of a radio button to disabled and either on or off. ; Definition at line 1626 of file TGButton.cxx. ◆ SetState(). void TGRadioButton::SetState ; (; EButtonState ; state, . Bool_t ; emit = kFALSE . ). overridevirtual . Set radio button state. ; Reimplemented from TGButton.; Definition at line 1613 of file TGButton.cxx. ◆ Streamer(). void TGRadioButton::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGButton. ◆ StreamerNVirtual(). void TGRadioButton::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 374 of file TGButton.h. Member Data Documentation. ◆ fDisOff. const TGPicture* TGRadioButton::fDisOff. protected . button disabled and was OFF picture ; Definition at line 332 of file TGButton.h. ◆ fDisOn. const TGPicture* TGRadioButton::fDisOn. protected . button disabled and was ON picture ; Definition at line 331 of file TGButton.h. ◆ fgDefaultFont. const TGFont * TGRadioButton::fgDefaultFont = nullptr. staticprotected . Definition at line 339 of file TGButton.h. ◆ fgDefaultGC. const TGGC * TGRadioButton::fgDefaultGC = nullptr. staticprotected . Definition at line 340 of file TGButton.h. ◆ fOff. const TGPicture* TGRadioButton::fOff. protected . button OFF picture ; Definition at line 330 of file TGButton.h. ◆ fOn. const TGPicture* TGRadioButton::fOn. protected . button ON picture ; Definition at line 329 of file TGButton.h. ◆ fPrevState. EButtonState TGRadioButton::fPrevState. protected . previous radio button state ; Definition at line 328 of file TGButton.h. Libraries for TGRadioButton:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGButton.h; gui/gui/src/TGButton.cxx. TGRadioButton. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRadioButton.html:44348,Guid,Guide,44348,doc/master/classTGRadioButton.html,https://root.cern,https://root.cern/doc/master/classTGRadioButton.html,1,['Guid'],['Guide']
Usability,"e TGHtmlUri.cxx. Member Function Documentation. ◆ BuildUri(). char * TGHtmlUri::BuildUri ; (; ). Create a string to hold the given URI. ; Memory to hold the string is allocated with new[] and must be freed by the calling function. ; Definition at line 204 of file TGHtmlUri.cxx. ◆ ComponentLength(). int TGHtmlUri::ComponentLength ; (; const char * ; z, . const char * ; zInit, . const char * ; zTerm . ). Return the length of the next component of the URL in z[] given that the component starts at z[0]. ; The initial sequence of the component must be zInit[]. The component is terminated by any character in zTerm[]. The length returned is 0 if the component doesn't exist. The length includes the zInit[] string, but not the termination character. Component zInit zTerm; ---------- ------- -------; scheme """" "":/?#""; authority ""//"" ""/?#""; path ""/"" ""?#""; query ""?"" ""#""; fragment ""#"" """" . Definition at line 183 of file TGHtmlUri.cxx. ◆ EqualsUri(). int TGHtmlUri::EqualsUri ; (; const TGHtmlUri * ; uri, . int ; field_mask = ( (1<<0)  |  (1<<1)  |    (1<<2)  |  (1<<3)  |    (1<<4) ) . ). Compare another uri with given field mask. ; Definition at line 120 of file TGHtmlUri.cxx. ◆ operator=(). TGHtmlUri & TGHtmlUri::operator= ; (; const TGHtmlUri & ; ). privatedelete . Member Data Documentation. ◆ fZAuthority. char* TGHtmlUri::fZAuthority. Definition at line 72 of file TGHtmlUri.h. ◆ fZFragment. char* TGHtmlUri::fZFragment. Definition at line 75 of file TGHtmlUri.h. ◆ fZPath. char* TGHtmlUri::fZPath. Definition at line 73 of file TGHtmlUri.h. ◆ fZQuery. char* TGHtmlUri::fZQuery. Definition at line 74 of file TGHtmlUri.h. ◆ fZScheme. char* TGHtmlUri::fZScheme. Definition at line 71 of file TGHtmlUri.h. Libraries for TGHtmlUri:. [legend]; The documentation for this class was generated from the following files:; gui/guihtml/inc/TGHtmlUri.h; gui/guihtml/src/TGHtmlUri.cxx. TGHtmlUri. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlUri.html:12950,Guid,Guide,12950,doc/master/classTGHtmlUri.html,https://root.cern,https://root.cern/doc/master/classTGHtmlUri.html,1,['Guid'],['Guide']
Usability,e TGMdiDecorFrame.cxx. Member Function Documentation. ◆ Class(). static TClass * TGMdiVerticalWinResizer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGMdiVerticalWinResizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGMdiVerticalWinResizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file TGMdiDecorFrame.h. ◆ DeclFileName(). static const char * TGMdiVerticalWinResizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TGMdiDecorFrame.h. ◆ DrawBorder(). void TGMdiVerticalWinResizer::DrawBorder ; (; ). overridevirtual . Draw vertical resizer frame border. ; Reimplemented from TGFrame.; Definition at line 930 of file TGMdiDecorFrame.cxx. ◆ HandleMotion(). Bool_t TGMdiVerticalWinResizer::HandleMotion ; (; Event_t * ; event). overridevirtual . Handle motion events in resizer (resize associated MDI window). ; Reimplemented from TGFrame.; Definition at line 895 of file TGMdiDecorFrame.cxx. ◆ IsA(). TClass * TGMdiVerticalWinResizer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Definition at line 93 of file TGMdiDecorFrame.h. ◆ Streamer(). void TGMdiVerticalWinResizer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGMdiVerticalWinResizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TGMdiDecorFrame.h. Libraries for TGMdiVerticalWinResizer:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMdiDecorFrame.h; gui/gui/src/TGMdiDecorFrame.cxx. TGMdiVerticalWinResizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiVerticalWinResizer.html:32521,Guid,Guide,32521,doc/master/classTGMdiVerticalWinResizer.html,https://root.cern,https://root.cern/doc/master/classTGMdiVerticalWinResizer.html,1,['Guid'],['Guide']
Usability,"e TGWin32.h. ◆ fMaxNumberOfWindows. Int_t TGWin32::fMaxNumberOfWindows. private . Maximum number of windows. ; Definition at line 79 of file TGWin32.h. ◆ fPenModified. Bool_t TGWin32::fPenModified. protected . line syle || width modified ; Definition at line 132 of file TGWin32.h. ◆ fRedDiv. Int_t TGWin32::fRedDiv. protected . Red value divider, -1 if no TrueColor visual. ; Definition at line 120 of file TGWin32.h. ◆ fRedShift. Int_t TGWin32::fRedShift. protected . Bits to left shift red, -1 if no TrueColor visual. ; Definition at line 123 of file TGWin32.h. ◆ fRefreshTimer. TObject* TGWin32::fRefreshTimer. protected . TGWin32RefreshTimer for GUI thread message handler. ; Definition at line 127 of file TGWin32.h. ◆ fScreenNumber. Int_t TGWin32::fScreenNumber. protected . Screen number. ; Definition at line 110 of file TGWin32.h. ◆ fTextAlign. Int_t TGWin32::fTextAlign. protected . Text alignment (set in SetTextAlign) ; Definition at line 115 of file TGWin32.h. ◆ fTextAlignH. Int_t TGWin32::fTextAlignH. protected . Text Alignment Horizontal. ; Definition at line 113 of file TGWin32.h. ◆ fTextAlignV. Int_t TGWin32::fTextAlignV. protected . Text Alignment Vertical. ; Definition at line 114 of file TGWin32.h. ◆ fTextMagnitude. Float_t TGWin32::fTextMagnitude. protected . Text Magnitude. ; Definition at line 118 of file TGWin32.h. ◆ fUseSysPointers. Bool_t TGWin32::fUseSysPointers. protected . True when using system mouse pointers. ; Definition at line 112 of file TGWin32.h. ◆ fVisual. GdkVisual* TGWin32::fVisual. protected . Definition at line 108 of file TGWin32.h. ◆ fWindows. XWindow_t* TGWin32::fWindows. private . List of windows. ; Definition at line 80 of file TGWin32.h. ◆ fXEvent. Handle_t TGWin32::fXEvent. protected . Current native (GDK) event. ; Definition at line 126 of file TGWin32.h. graf2d/win32gdk/inc/TGWin32.h; graf2d/win32gdk/src/TGWin32.cxx. TGWin32. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:126304,Guid,Guide,126304,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Guid'],['Guide']
Usability,e TNeuronInputChooser.h. ◆ CreateNeuronInput() [1/2]. TNeuronInput * TMVA::TNeuronInputChooser::CreateNeuronInput ; (; const TString ; type); const. inline . Definition at line 94 of file TNeuronInputChooser.h. ◆ CreateNeuronInput() [2/2]. TNeuronInput * TMVA::TNeuronInputChooser::CreateNeuronInput ; (; ENeuronInputType ; type); const. inline . Definition at line 83 of file TNeuronInputChooser.h. ◆ DeclFileName(). static const char * TMVA::TNeuronInputChooser::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TNeuronInputChooser.h. ◆ GetAllNeuronInputNames(). std::vector< TString > * TMVA::TNeuronInputChooser::GetAllNeuronInputNames ; (; ); const. inline . Definition at line 102 of file TNeuronInputChooser.h. ◆ IsA(). virtual TClass * TMVA::TNeuronInputChooser::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 117 of file TNeuronInputChooser.h. ◆ Streamer(). virtual void TMVA::TNeuronInputChooser::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::TNeuronInputChooser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 117 of file TNeuronInputChooser.h. Member Data Documentation. ◆ fABSSUM. TString TMVA::TNeuronInputChooser::fABSSUM. private . neuron input type name ; Definition at line 115 of file TNeuronInputChooser.h. ◆ fSQSUM. TString TMVA::TNeuronInputChooser::fSQSUM. private . neuron input type name ; Definition at line 114 of file TNeuronInputChooser.h. ◆ fSUM. TString TMVA::TNeuronInputChooser::fSUM. private . neuron input type name ; Definition at line 113 of file TNeuronInputChooser.h. Libraries for TMVA::TNeuronInputChooser:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/TNeuronInputChooser.h. TMVATNeuronInputChooser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInputChooser.html:4202,Guid,Guide,4202,doc/master/classTMVA_1_1TNeuronInputChooser.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInputChooser.html,1,['Guid'],['Guide']
Usability,"e TProofPlayer.h. ◆ DeleteDrawFeedback(). void TProofPlayer::DeleteDrawFeedback ; (; TDrawFeedback * ; f). overridevirtual . Delete draw feedback object. ; Implements TVirtualProofPlayer.; Definition at line 750 of file TProofPlayer.cxx. ◆ DrawCanvas(). Int_t TProofPlayer::DrawCanvas ; (; TObject * ; obj). protectedvirtual . Draw the object if it is a canvas. ; Return 0 in case of success, 1 if it is not a canvas or libProofDraw is not available. ; Definition at line 1696 of file TProofPlayer.cxx. ◆ DrawSelect(). Long64_t TProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 1658 of file TProofPlayer.cxx. ◆ Feedback(). void TProofPlayer::Feedback ; (; TList * ; objs). overridevirtual . Set feedback list (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 724 of file TProofPlayer.cxx. ◆ FeedBackCanvas(). void TProofPlayer::FeedBackCanvas ; (; const char * ; name, . Bool_t ; create . ). Create/destroy a named canvas for feedback. ; Definition at line 1765 of file TProofPlayer.cxx. ◆ Finalize() [1/2]. Long64_t TProofPlayer::Finalize ; (; Bool_t ; force = kFALSE, . Bool_t ; sync = kFALSE . ). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 1571 of file TProofPlayer.cxx. ◆ Finalize() [2/2]. Long64_t TProofPlayer::Finalize ; (; TQueryResult * ; qr). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 1580 of file TProofPlayer.cxx. ◆ GetCacheSize(). Long64_t TProofPlayer:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:28421,feedback,feedback,28421,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"e TTreeReader | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 7. Using the TTreeReader. Accessing Value from a TTree; Up to now we have used TTree's ability to parse TTree::Draw() expressio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:1014,Guid,Guides,1014,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['Guid'],['Guides']
Usability,"e [lo,hi] ; Definition at line 124 of file RooRandomizeParamMCSModule.cxx. ◆ sampleUniform(). void RooRandomizeParamMCSModule::sampleUniform ; (; RooRealVar & ; param, . double ; lo, . double ; hi . ). Request uniform smearing of param in range [lo,hi] in RooMCStudy generation cycle. ; Definition at line 78 of file RooRandomizeParamMCSModule.cxx. ◆ Streamer(). void RooRandomizeParamMCSModule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsMCStudyModule. ◆ StreamerNVirtual(). void RooRandomizeParamMCSModule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 94 of file RooRandomizeParamMCSModule.h. Member Data Documentation. ◆ _data. std::unique_ptr<RooDataSet> RooRandomizeParamMCSModule::_data. private . Definition at line 92 of file RooRandomizeParamMCSModule.h. ◆ _gausParams. std::list<GausParam> RooRandomizeParamMCSModule::_gausParams. private . ! ; Definition at line 88 of file RooRandomizeParamMCSModule.h. ◆ _gausParamSets. std::list<GausParamSet> RooRandomizeParamMCSModule::_gausParamSets. private . ! ; Definition at line 89 of file RooRandomizeParamMCSModule.h. ◆ _genParSet. RooArgSet RooRandomizeParamMCSModule::_genParSet. private . Definition at line 91 of file RooRandomizeParamMCSModule.h. ◆ _unifParams. std::list<UniParam> RooRandomizeParamMCSModule::_unifParams. private . ! ; Definition at line 86 of file RooRandomizeParamMCSModule.h. ◆ _unifParamSets. std::list<UniParamSet> RooRandomizeParamMCSModule::_unifParamSets. private . ! ; Definition at line 87 of file RooRandomizeParamMCSModule.h. Libraries for RooRandomizeParamMCSModule:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRandomizeParamMCSModule.h; roofit/roofitcore/src/RooRandomizeParamMCSModule.cxx. RooRandomizeParamMCSModule. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html:21971,Guid,Guide,21971,doc/master/classRooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html,1,['Guid'],['Guide']
Usability,"e a ROOTbook? | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome How to create a ROOTbook?. ROOT 6.07 Onwards; The minimal version of Jupyter required in this case is 4.0.; Note that the sudo command might not be necess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how/how-create-rootbook.html:1015,Guid,Guides,1015,d/how/how-create-rootbook.html,https://root.cern,https://root.cern/d/how/how-create-rootbook.html,1,['Guid'],['Guides']
Usability,"e a different time format than the one chosen by default; // The time format is the same as the one of the C strftime() function; // It's a string containing the following formats :; //; // for date :; // %a abbreviated weekday name; // %b abbreviated month name; // %d day of the month (01-31); // %m month (01-12); // %y year without century; // %Y year with century; //; // for time :; // %H hour (24-hour clock); // %I hour (12-hour clock); // %p local equivalent of AM or PM; // %M minute (00-59); // %S seconds (00-61); // %% %; // The other characters are output as is.; ; gt2->GetXaxis()->SetTimeFormat(""%d/%m/%Y %F2000-01-01 00:00:00"");; }; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TStyle::SetTimeOffsetvoid SetTimeOffset(Double_t toffset)Change the time offset for time plotting.Definition TStyle.cxx:1913; TStyle::SetTitleHvoid SetTitleH(Float_t h=0)Definition TStyle.h:416; double; int; ROOT::VecOps::expRVec< PromoteType< T > > exp(const RVec< T > &v)Definition RVec.hxx:1837; ROOT::VecOps::sinRVec< PromoteType< T > > sin(const RVec< T > &v)Definition RVec.hxx:1851; xDouble_t x[n]Definition legend1.C:17; AuthorDamir Buskulic ; Definition in file timeonaxis.C. tutorialsgraphstimeonaxis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeonaxis_8C.html:5015,Guid,Guide,5015,doc/master/timeonaxis_8C.html,https://root.cern,https://root.cern/doc/master/timeonaxis_8C.html,1,['Guid'],['Guide']
Usability,"e a form ""(TVirtualPad*,TObject*,Int_t,Int_t)"" root [0] .x $ROOTSYS/tutorials/hsimple.C; root [1] hpx->SetHighlight(kTRUE); root [2] .x hlprint.C; file hlprint.C void PrintInfo(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y); {; auto h = (TH1F *)obj;; if (!h->IsHighlight()) // after highlight disabled; h->SetTitle(""highlight disable"");; else; h->SetTitle(TString::Format(""bin[%03d] (%5.2f) content %g"", x,; h->GetBinCenter(x), h->GetBinContent(x)));; pad->Update();; }; ; void hlprint(); {; if (!gPad) return;; gPad->GetCanvas()->HighlightConnect(""PrintInfo(TVirtualPad*,TObject*,Int_t,Int_t)"");; }; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::Updatevirtual void Update()=0. Highlight mode and simple user function; For more complex demo please see for example $ROOTSYS/tutorials/tree/temperature.C file. ; Definition at line 50 of file THistPainter.h. Public Member Functions;  THistPainter ();  Default constructor. ;  ;  ~THistPainter () override;  destructor. ;  ; virtual std::vector< THistRenderingRegion > ComputeRenderingRegions (TAxis *pAxis, Int_t nPixels, bool isLog);  Returns the rendering regions for an axis to use in the COL2 option. ;  ; virtual void DefineColorLevels (Int_t ndivz);  Define the color levels used to paint legos, surfaces etc.. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute the distance from the point px,py to a line. ;  ; void DrawPanel () override;  Display a panel with all histogram drawing options. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute the actions corresponding to event. ;  ; TList * GetContourList (Double_t contour) const override;  Get a contour (as a list of TGraphs) using the Delaunay triangulation. ;  ; char * GetObjectInfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:131866,simpl,simple,131866,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['simpl'],['simple']
Usability,"e a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawTextNDC(Double_t u, Double_t v, const char* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Save the image displayed in the canvas pointed by ""pad"" into a; binary file. TPadPainter(); Final overriders for TVirtualPadPainter pure virtual functions.; 1. Part, which simply delegates to TVirtualX.; Line attributes. » Last changed: Mon Jul 4 15:35:39 2011 » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPadPainter.html:6456,simpl,simply,6456,root/html530/TPadPainter.html,https://root.cern,https://root.cern/root/html530/TPadPainter.html,1,['simpl'],['simply']
Usability,"e a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawTextNDC(Double_t u, Double_t v, const char* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Save the image displayed in the canvas pointed by ""pad"" into a; binary file. TPadPainter(); Final overriders for TVirtualPadPainter pure virtual functions.; 1. Part, which simply delegates to TVirtualX.; Line attributes. » Last changed: Thu Nov 3 20:21:02 2011 » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPadPainter.html:6456,simpl,simply,6456,root/html532/TPadPainter.html,https://root.cern,https://root.cern/root/html532/TPadPainter.html,1,['simpl'],['simply']
Usability,"e a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candledecay.C Candle Decay, illustrate a time development of a certain ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:121265,simpl,simple,121265,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,4,['simpl'],['simple']
Usability,"e a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:120498,simpl,simple,120498,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"e a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMark pad modified Will be repainted when TCanvas::Update() will be called next time.Definition TPad.cxx:7369; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPave::SetY1NDCvirtual void SetY1NDC(Double_t y1)Definition TPave.h:84; TPave::SetY2NDCvirtual void SetY2NDC(Double_t y2)Definition TPave.h:85; TPave::SetX1NDCvirtual void SetX1NDC(Double_t x1)Definition TPave.h:82; TPave::SetX2NDCvirtual void SetX2NDC(Double_t x2)Definition TPave.h:83; TPavesTextA PaveText (see TPaveText) with several stacked paves.Definition TPavesText.h:18; TPavesText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavestext with its current attributes.Definition TPavesText.cxx:80; TTextBase class for several text objects.Definition TText.h:22; c1return c1Definition legend1.C:41; t1auto * t1Definition textangle.C:20; AuthorRene Brun ; Definition in file canvas.C. tutorialsgraphicscanvas.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/canvas_8C.html:6493,Guid,Guide,6493,doc/master/canvas_8C.html,https://root.cern,https://root.cern/doc/master/canvas_8C.html,1,['Guid'],['Guide']
Usability,"e about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with indirect file; [#14902] - compilation error; [#14863] - [hist] TH1::SaveAs missing default option argument causes compilation errors; [#14855] - TRatioPlot crashes if loaded from the file; [#14842] - TRatioplot gives “different” results with Web Graphics; [#14838] - Problems with Confidence Band of TRatioPlot; [#14801] - TEfficiency drawing to .C is broken; [#14793] - 6.26 cannot read file written with 6.30.4; [#14772] - [cling] Undocumented behaviour of root macro_C.so; [#14767] - rootn.exe instant crash on startup; [#14765] - TGenPhaseSpace weight normalization; [#14748] - [ntuple] Show and PrintInfo does not work for friend RNTuples; [#14601] - std::source_location not found when running with c++20 enabled; [#14599] - The example th2polyUSA.C needs re-labelling; [#14598] - A “printf” change the behaviour of a macro …; [#14595] - Problem when creating dictionary in Osx 12.7, Xcode 14.2; [#14594] - Provide file.root request in THttpServer; [#14593] - Build fails with CLING_DEBUG=1 set; [#14586] - [ROOT-6317] using namespace statement does not provoke autoload; [#14576] - [ROOT-7155] Angular units used in HTML doc of TGLViewer::SetPerspectiveCamera are wrong; [#14575] - [ROOT-10196] boundary check in TH1::AddBinContent is missing; [#14569] - [ROOT-8348] Segmentation Fault in TMVA::DecisionTreeNode::Print; [#14562] - [ROOT-5009] TClass::SetDeclFile: second parameter wrong type; [#14553] - [ROOT-10909] Add TMVA python de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:27095,Undo,Undocumented,27095,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['Undo'],['Undocumented']
Usability,"e address space and can not be used by the; consumer process(es)). Consumer processes can map the memory region; from this file and access the objects stored in it via the Get(); method (which returns a copy of the object stored in the shared; memory with correct vtbl ptr set). Only objects of classes with a; Streamer() member function defined can be shared. I know the current implementation is not ideal (you need to copy to; and from the shared memory file) but the main problem is with the; class' virtual_table pointer. This pointer points to a table unique; for every process. Therefore, different options are:; 1) One could allocate an object directly in shared memory in the; producer, but the consumer still has to copy the object from; shared memory into a local object which has the correct vtbl; pointer for that process (copy ctor's can be used for creating; the local copy).; 2) Another possibility is to only allow objects without virtual; functions in shared memory (like simple C structs), or to; forbid (how?) the consumer from calling any virtual functions; of the objects in shared memory.; 3) A last option is to copy the object internals to shared memory; and copy them again from there. This is what is done in the; TMapFile (using the object Streamer() to make a deep copy).; Option 1) saves one copy, but requires solid copy ctor's (along the; full inheritance chain) to rebuild the object in the consumer. Most; classes don't provide these copy ctor's, especially not when objects; contain collections, etc. 2) is too limiting or dangerous (calling; accidentally a virtual function will segv). So since we have a; robust Streamer mechanism I opted for 3). Function Members (Methods); public:. virtual~TMapFile(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TObject* obj, const char* name = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); Bool_tcd(const char* path = 0); static TClass*Class(); virtual co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMapFile.html:1762,simpl,simple,1762,root/html528/TMapFile.html,https://root.cern,https://root.cern/root/html528/TMapFile.html,6,['simpl'],['simple']
Usability,"e address space and can not be used by the; consumer process(es)). Consumer processes can map the memory region; from this file and access the objects stored in it via the Get(); method (which returns a copy of the object stored in the shared; memory with correct vtbl ptr set). Only objects of classes with a; Streamer() member function defined can be shared. I know the current implementation is not ideal (you need to copy to; and from the shared memory file) but the main problem is with the; class' virtual_table pointer. This pointer points to a table unique; for every process. Therefore, different options are:; 1) One could allocate an object directly in shared memory in the; producer, but the consumer still has to copy the object from; shared memory into a local object which has the correct vtbl; pointer for that process (copy ctor's can be used for creating; the local copy).; 2) Another possibility is to only allow objects without virtual; functions in shared memory (like simple C structs), or to; forbid (how?) the consumer from calling any virtual functions; of the objects in shared memory.; 3) A last option is to copy the object internals to shared memory; and copy them again from there. This is what is done in the; TMapFile (using the object Streamer() to make a deep copy).; Option 1) saves one copy, but requires solid copy ctor's (along the; full inheritance chain) to rebuild the object in the consumer. Most; classes don't provide these copy ctor's, especially not when objects; contain collections, etc. 2) is too limiting or dangerous (calling; accidentally a virtual function will segv). So since we have a; robust Streamer mechanism I opted for 3). Function Members (Methods); public:. ~TMapRec(); void*GetBuffer(Long_t offset = 0) const; Int_tGetBufSize() const; const char*GetClassName(Long_t offset = 0) const; const char*GetName(Long_t offset = 0) const; TMapRec*GetNext(Long_t offset = 0) const; TObject*GetObject() const; TMapRec(const char* name, const TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMapRec.html:1743,simpl,simple,1743,root/html602/TMapRec.html,https://root.cern,https://root.cern/root/html602/TMapRec.html,2,['simpl'],['simple']
Usability,"e all painting, owned by TWebPS object . EnumeratorattrLine ; attrFill ; attrMarker ; attrText ; attrAll . Definition at line 34 of file TWebPadPainter.h. Constructor & Destructor Documentation. ◆ TWebPadPainter() [1/3]. TWebPadPainter::TWebPadPainter ; (; ). inline . Definition at line 40 of file TWebPadPainter.h. ◆ TWebPadPainter() [2/3]. TWebPadPainter::TWebPadPainter ; (; const TWebPadPainter & ; rhs). privatedelete . ◆ TWebPadPainter() [3/3]. TWebPadPainter::TWebPadPainter ; (; TWebPadPainter && ; rhs). privatedelete . Member Function Documentation. ◆ Class(). static TClass * TWebPadPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TWebPadPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TWebPadPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 122 of file TWebPadPainter.h. ◆ ClearDrawable(). void TWebPadPainter::ClearDrawable ; (; ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 81 of file TWebPadPainter.h. ◆ CopyDrawable(). void TWebPadPainter::CopyDrawable ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 82 of file TWebPadPainter.h. ◆ CreateDrawable(). Int_t TWebPadPainter::CreateDrawable ; (; UInt_t ; , . UInt_t ;  . ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 80 of file TWebPadPainter.h. ◆ DeclFileName(). static const char * TWebPadPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 122 of file TWebPadPainter.h. ◆ DestroyDrawable(). void TWebPadPainter::DestroyDrawable ; (; Int_t ; ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 83 of file TWebPadPainter.h. ◆ DrawBox(). void TWebPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:13522,Clear,ClearDrawable,13522,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['Clear'],['ClearDrawable']
Usability,"e an extra day is added to February to make the year; 366 days long. If the year is the last year of a century, eg. 1700, 1800,; 1900, 2000, then it is only a leap year if it is exactly divisible by; 400. Therefore, 1900 wasn't a leap year but 2000 was. The reason for; these rules is to bring the average length of the calendar year into; line with the length of the Earth's orbit around the Sun, so that the; seasons always occur during the same months each year. Int_t GetZoneOffset(); Static method returning local (current) time zone offset from UTC.; This is the value in seconds one must add to the local time to arrive at; Coordinated Universal Time, so it is negative east of the Prime Meridian. void Add(const TTimeStamp& offset); Add ""offset"" as a delta time. void Print(Option_t* option = """") const; Print date and time. void Set(); Set Date/Time to current time as reported by the system.; No accounting for nanoseconds with std ANSI functions,; ns part faked so that subsequent calls simply add 1 to it; this ensures that calls within the same second come back; distinct (and sortable). Time is since Jan 1, 1970. void Set(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec, Int_t nsec, Bool_t isUTC, Int_t secOffset); Set Date/Time from components. Month & day both use normal 1..12 and 1..31 counting,; hours, min, sec run from 0 to 23, 59, 59 respectively,; secOffset provides method for adjusting for alternative timezones. ""year"" | 0 1 ... 37 | 38...69 | 70 .. 100 101 .. 137; true | 2000 2001 2037 | undefined | 1970 2000 2001 .. 2037. ""year"" | 138...1969 | 1970 .. 2037 | ...; true | undefined | 1970 .. 2037 | undefined. void Set(Int_t date, Int_t time, Int_t nsec, Bool_t isUTC, Int_t secOffset); Set date/time from integers of the form [yy]YYMMDD and HHMMSS,; assume UTC (UTC) components:. MM: 01=January .. 12=December; DD: 01 .. 31. HH: 00=midnight .. 23; MM: 00 .. 59; SS: 00 .. 69. Date must be in format 980418 or 19980418; 1001127 or 20001127 (i.e. year",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTimeStamp.html:8468,simpl,simply,8468,root/html528/TTimeStamp.html,https://root.cern,https://root.cern/root/html528/TTimeStamp.html,4,['simpl'],['simply']
Usability,"e and number of steps, the; : evolution of the path is defined by a cut-off parameter, tau.; : This parameter is unknown and depends on the training data.; : A large value will tend to give large weights to a few rules.; : Similarly, a small value will lead to a large set of rules; : with similar weights.; : ; : A final point is the model used; rules and/or linear terms.; : For a given training sample, the result may improve by adding; : linear terms. If best performance is obtained using only linear; : terms, it is very likely that the Fisher discriminant would be; : a better choice. Ideally the fitting procedure should be able to; : make this choice by giving appropriate weights for either terms.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : I. TUNING OF RULE ENSEMBLE:; : ; : ␛[1mForestType ␛[0m: Recommended is to use the default ""AdaBoost"".; : ␛[1mnTrees ␛[0m: More trees leads to more rules but also slow; : performance. With too few trees the risk is; : that the rule ensemble becomes too simple.; : ␛[1mfEventsMin ␛[0m; : ␛[1mfEventsMax ␛[0m: With a lower min, more large trees will be generated; : leading to more complex rules.; : With a higher max, more small trees will be; : generated leading to more simple rules.; : By changing this range, the average complexity; : of the rule ensemble can be controlled.; : ␛[1mRuleMinDist ␛[0m: By increasing the minimum distance between; : rules, fewer and more diverse rules will remain.; : Initially it is a good idea to keep this small; : or zero and let the fitting do the selection of; : rules. In order to reduce the ensemble size,; : the value can then be increased.; : ; : II. TUNING OF THE FITTING:; : ; : ␛[1mGDPathEveFrac ␛[0m: fraction of events in path evaluation; : Increasing this fraction will improve the path; : finding. However, a too high value will give few; : unique events available for error estimation.; : It is recommended to use the default = 0.5.; : ␛[1mGDTau ␛[0m: cutoff parameter ta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:54427,simpl,simple,54427,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['simpl'],['simple']
Usability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Fri Dec 2 14:26:59 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProjectedPdf.html:44782,intuit,intuitively,44782,root/html532/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html532/RooProjectedPdf.html,1,['intuit'],['intuitively']
Usability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Mon Dec 7 13:48:46 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProjectedPdf.html:42489,intuit,intuitively,42489,root/html526/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html526/RooProjectedPdf.html,1,['intuit'],['intuitively']
Usability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Mon Jul 4 15:23:45 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProjectedPdf.html:43525,intuit,intuitively,43525,root/html530/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html530/RooProjectedPdf.html,1,['intuit'],['intuitively']
Usability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Sat Oct 9 20:48:34 2010 » Last generated: 2010-10-09 20:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProjectedPdf.html:42965,intuit,intuitively,42965,root/html528/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html528/RooProjectedPdf.html,1,['intuit'],['intuitively']
Usability,"e argument returned by reference is the unique code; defining this particular projection configuration. RooAbsPdf* createProjection(const RooArgSet& iset); Special version of RooAbsReal::createProjection that deals with; projections of projections. Instead of integrating twice, a new; RooProjectedPdf is returned that is configured to perform the; complete integration in one step. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to relegate integration of all observables to internal logic. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Mark all requested variables as internally integrated. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral represent by appropriate element of projection cache. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; No internal generator is implemented. void generateEvent(Int_t code); No internal generator is implemented. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t , Bool_t , Bool_t ); Intercept a server redirection all and update list of dependents if necessary; Specifically update the set proxy 'deps' which introduces the dependency; on server value dirty flags of ourselves. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. TObject* clone(const char* newname) const; { return new RooProjectedPdf(*this,newname); }. virtual ~RooProjectedPdf(); { }. void initGenerator(Int_t ); {}. Bool_t selfNormalized() const; { return kTRUE ; }. » Last changed: Tue Jun 2 15:33:10 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooProjectedPdf.html:47951,intuit,intuitively,47951,root/html604/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html604/RooProjectedPdf.html,1,['intuit'],['intuitively']
Usability,"e arguments are always synchronized without checking if they have the same name. . Definition at line 305 of file RooAbsCollection.cxx. ◆ begin(). const_iterator RooAbsCollection::begin ; (; ); const. inline . Definition at line 253 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 432 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 282 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 392 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:35997,Clear,Clear,35997,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['Clear'],['Clear']
Usability,"e array to newSize elements.Definition TObjArray.cxx:387; TObjArray::GetEntriesUnsafeInt_t GetEntriesUnsafe() constReturn the number of objects in array (i.e.Definition TObjArray.cxx:565; TObjArray::operator[]virtual TObject *& operator[](Int_t i)Return the object at position i.Definition TObjArray.cxx:131; TObjArray::GetObjectRefTObject ** GetObjectRef() constDefinition TObjArray.h:63; TObjArray::~TObjArrayvirtual ~TObjArray()Delete an array.Definition TObjArray.cxx:94; TObjArray::AddAtvoid AddAt(TObject *obj, Int_t idx) overrideAdd object at position ids.Definition TObjArray.cxx:254; TObjArray::LastTObject * Last() const overrideReturn the object in the last filled slot. Returns 0 if no entries.Definition TObjArray.cxx:506; TObjArray::Initvoid Init(Int_t s, Int_t lowerBound)Initialize a TObjArray.Definition TObjArray.cxx:627; TObjArray::Sortvirtual void Sort(Int_t upto=kMaxInt)If objects in array are sortable (i.e.Definition TObjArray.cxx:818; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::AddAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::AddAftervoid AddAfter(const TObject *after, TObject *obj) overrideAdd object in the slot after object after.Definition TObjArray.cxx:215; TObjArray::MakeIteratorTIterator * MakeIterator(Bool_t dir=kIterForward) const overrideReturns an array iterator.Definition TObjArray.cxx:649; TObjArray::Compressvirtual void Compress()Remove empty slots from array.Definition TObjArray.cxx:334; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::BoundsOkBool_t BoundsOk(const char *where, Int_t at) constDefinition TObjArray.h:157; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::Ou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8h_source.html:10567,Clear,Clearvoid,10567,doc/master/TObjArray_8h_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"e array to newSize elements.Definition TObjArray.cxx:387; TObjArray::GetEntriesUnsafeInt_t GetEntriesUnsafe() constReturn the number of objects in array (i.e.Definition TObjArray.cxx:565; TObjArray::operator[]virtual TObject *& operator[](Int_t i)Return the object at position i.Definition TObjArray.cxx:131; TObjArray::GetObjectRefTObject ** GetObjectRef() constDefinition TObjArray.h:63; TObjArray::~TObjArrayvirtual ~TObjArray()Delete an array.Definition TObjArray.cxx:94; TObjArray::AddAtvoid AddAt(TObject *obj, Int_t idx) overrideAdd object at position ids.Definition TObjArray.cxx:254; TObjArray::LastTObject * Last() const overrideReturn the object in the last filled slot. Returns 0 if no entries.Definition TObjArray.cxx:506; TObjArray::Initvoid Init(Int_t s, Int_t lowerBound)Initialize a TObjArray.Definition TObjArray.cxx:627; TObjArray::Sortvirtual void Sort(Int_t upto=kMaxInt)If objects in array are sortable (i.e.Definition TObjArray.cxx:818; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::AddAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::AddAftervoid AddAfter(const TObject *after, TObject *obj) overrideAdd object in the slot after object after.Definition TObjArray.cxx:215; TObjArray::Streamervoid Streamer(TBuffer &) overrideStream all objects in the array to or from the I/O buffer.Definition TObjArray.cxx:449; TObjArray::MakeIteratorTIterator * MakeIterator(Bool_t dir=kIterForward) const overrideReturns an array iterator.Definition TObjArray.cxx:649; TObjArray::Compressvirtual void Compress()Remove empty slots from array.Definition TObjArray.cxx:334; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::BoundsOkBool_t BoundsOk(const char *where, Int_t at) constDefinition TObjArray.h:157; TObjArray::Deletevoid Delete(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:36777,Clear,Clearvoid,36777,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"e as described in the metadata of TFileInfo. By default the first one is taken. ; Definition at line 1185 of file TDSet.cxx. ◆ AddFriend(). void TDSet::AddFriend ; (; TDSet * ; friendset, . const char * ; alias . ). virtual . Add friend dataset to this set. ; Only possible if the TDSet type is a TTree or derived class. The friendset will be owned by this class and deleted in its destructor. ; Definition at line 1335 of file TDSet.cxx. ◆ AddInput(). void TDSet::AddInput ; (; TObject * ; obj). Add objects that might be needed during the processing of the selector (see Process()). ; Definition at line 966 of file TDSet.cxx. ◆ Class(). static TClass * TDSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 262 of file TDSet.h. ◆ ClearInput(). void TDSet::ClearInput ; (; ). Clear input object list. ; Definition at line 978 of file TDSet.cxx. ◆ Current(). TDSetElement * TDSet::Current ; (; ); const. inline . Definition at line 238 of file TDSet.h. ◆ DeclFileName(). static const char * TDSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 262 of file TDSet.h. ◆ Draw() [1/3]. Long64_t TDSet::Draw ; (; const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). virtual . Draw expression varexp for specified entries. ; Returns -1 in case of error or number of selected events in case of success. For more see TTree::Draw(). ; Definition at line 1501 of file TDSet.cxx. ◆ Draw() [2/3]. Long64_t TDSet::Draw ; (; const char * ; varexp, . const TCut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). virtual . Draw expression varexp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:21689,Clear,ClearInput,21689,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['Clear'],['ClearInput']
Usability,"e assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:5817,intuit,intuitively,5817,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,2,['intuit'],['intuitively']
Usability,"e automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:22758,Guid,Guide,22758,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,2,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"e background source ; [in]binMap(default=nullptr) remapping of histogram bins. returns true if the background source was found. ; This method returns the shifts of the unfolding result induced by varying the normalisation of the identified background by one sigma. ; the array binMap is explained with the method GetOutput(). ; Definition at line 1086 of file TUnfoldSys.cxx. ◆ GetEmatrixFromVyy(). void TUnfoldSys::GetEmatrixFromVyy ; (; const TMatrixDSparse * ; vyy, . TH2 * ; ematrix, . const Int_t * ; binMap, . Bool_t ; clearEmat . ). protected . propagate an error matrix on the input vector to the unfolding result ; Parameters. [in]vyyinput error matrix ; [in,out]ematrixhistogram to be updated ; [in]binMapmapping of histogram bins ; [in]clearEmatif set, clear histogram before adding this covariance contribution . Definition at line 1250 of file TUnfoldSys.cxx. ◆ GetEmatrixInput(). void TUnfoldSys::GetEmatrixInput ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from input measurement uncertainties ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the uncertainties or covariance of the input data. In many cases, these are the ""statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1207 of file TUnfoldSys.cxx. ◆ GetEmatrixSysBackgroundScale(). void TUnfoldSys::GetEmatrixSysBackgroundScale ; (; TH2 * ; ematrix, . const char * ; name, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance contribution from background normalisation uncertainty ; Parameters. [in,out]ematrixoutput histogram ; [in]sourceidentifier of the background source ; [in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:37630,clear,clearEmat,37630,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"e box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version working with wchar_t and required by TMathText (who uses utf-8(?)). void DrawTextNDC(Double_t u, Double_t v, const char* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Save the image displayed in the canvas pointed by ""pad"" into a; binary file.; assert(pad != nullptr && ""SaveImage, parameter 'pad' is null"");; assert(fileName != nullptr && ""SaveImage, parameter 'fileName' is null"");. void DrawTextNDC(Double_t u, Double_t v, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. TPadPainter(); Final overriders for TVirtualPadPainter pure virtual functions.; 1. Part, which simply delegates to TVirtualX.; Line attributes. TPadPainter(const TPadPainter& rhs); Let's make this clear:. » Author: Olivier Couet, Timur Pocheptsov 06/05/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id$ » Last generated: 2015-06-30 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadPainter.html:7698,simpl,simply,7698,root/html602/TPadPainter.html,https://root.cern,https://root.cern/root/html602/TPadPainter.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"e button to see the title of the demo"");; hdemo->AddText(""- Click on 'Close Bar' to exit from the demo menu"");; hdemo->AddText(""- Select 'File/Print' to print a Postscript view of the canvas"");; hdemo->AddText(""- You can execute a demo with the mouse or type commands"");; hdemo->AddText(""- During the demo (try on this canvas) you can :"");; hdemo->AddText("" .... Use left button to move/grow/etc objects"");; hdemo->AddText("" .... Use middle button to pop overlapping objects"");; hdemo->AddText("" .... Use right button to get an object sensitive pop-up"");; hdemo->AddText("" "");; hdemo->SetAllWith(""...."",""color"",2);; hdemo->SetAllWith(""...."",""font"",72);; hdemo->SetAllWith(""...."",""size"",0.04);; ; hdemo->Draw();; }; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::SetAllWithvirtual void SetAllWith(const char *text, Option_t *option, Double_t value)Set attribute option for all lines containing string text.Definition TPaveText.cxx:827; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; demoshelpDefinition demoshelp.py:1; AuthorRene Brun ; Definition in file demoshelp.C. tutorialsdemoshelp.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/demoshelp_8C.html:2707,Guid,Guide,2707,doc/master/demoshelp_8C.html,https://root.cern,https://root.cern/doc/master/demoshelp_8C.html,1,['Guid'],['Guide']
Usability,"e cache the binaries associated with the file TProof::kCpBin must be set in cpopt; the default is copy everything. Returns kTRUE in case file needs to be send, returns kFALSE in case file is already on remote node. . Definition at line 6799 of file TProof.cxx. ◆ Class(). static TClass * TProof::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProof::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProof::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 1073 of file TProof.h. ◆ CleanGDirectory(). void TProof::CleanGDirectory ; (; TList * ; ol). private . Remove links to objects in list 'ol' from gDirectory. ; Definition at line 3046 of file TProof.cxx. ◆ CleanupSession(). Int_t TProof::CleanupSession ; (; const char * ; sessiontag). Send cleanup request for the session specified by tag. ; Definition at line 6092 of file TProof.cxx. ◆ ClearCache(). void TProof::ClearCache ; (; const char * ; file = 0). virtual . Remove file from all file caches. ; If file is 0 or """" or ""*"", remove all the files ; Reimplemented in TProofLite.; Definition at line 7714 of file TProof.cxx. ◆ ClearData(). void TProof::ClearData ; (; UInt_t ; what = kUnregistered, . const char * ; dsname = 0 . ). Remove files for the data directory. ; The option 'what' can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:74302,Clear,ClearCache,74302,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearCache']
Usability,"e camera, Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Set a perspective camera to supplied configuration - note this; does not need to be the current camera - though you will not see; the effect if it is not. 'camera' defines the persp camera - one of kCameraPerspXOZ, kCameraPerspYOZ, kCameraPerspXOY; 'fov' - field of view (lens angle) in degrees (clamped to 0.1 - 170.0); 'dolly' - distance from 'center'; 'center' - world position from which dolly/hRotate/vRotate are measured; camera rotates round this, always facing in (in center of viewport); 'hRotate' - horizontal rotation from initial configuration in degrees; 'hRotate' - vertical rotation from initial configuration in degrees. TGLAutoRotator* GetAutoRotator(); Get the auto-rotator for this viewer. void SetAutoRotator(TGLAutoRotator* ar); Set the auto-rotator for this viewer. The old rotator is deleted. void GetGuideState(Int_t& axesType, Bool_t& axesDepthTest, Bool_t& referenceOn, Double_t* referencePos) const; Fetch the state of guides (axes & reference markers) into arguments. void SetGuideState(Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t* referencePos); Set the state of guides (axes & reference markers) from arguments. void SetDrawCameraCenter(Bool_t x); Draw camera look at and rotation point. const TGLPhysicalShape * GetSelected() const; Return selected physical shape. void MouseOver(TGLPhysicalShape* ); Emit MouseOver signal. void MouseOver(TGLPhysicalShape* , UInt_t state); Emit MouseOver signal. void MouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void ReMouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void UnMouseOver(TObject* obj, UInt_t state); Emit UnMouseOver signal. void Clicked(TObject* obj); Emit Clicked signal. void Clicked(TObject* obj, UInt_t button, UInt_t state); Emit Clicked signal with button id and modifier state. void ReClicked(TObject* obj, UInt_t button, UInt_t state); Emit ReClicked signal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewer.html:32035,guid,guides,32035,root/html528/TGLViewer.html,https://root.cern,https://root.cern/root/html528/TGLViewer.html,3,['guid'],['guides']
Usability,"e class declaration ; Definition at line 42 of file TGShapedFrame.h. ◆ DoRedraw(). void TGShapedFrame::DoRedraw ; (; ). inlineoverrideprotectedvirtual . Redraw the frame. ; Reimplemented from TGFrame.; Definition at line 31 of file TGShapedFrame.h. ◆ GetImage(). TImage TGShapedFrame::GetImage ; (; ); const. inline . Definition at line 38 of file TGShapedFrame.h. ◆ GetPicture(). const TGPicture TGShapedFrame::GetPicture ; (; ); const. inline . Definition at line 37 of file TGShapedFrame.h. ◆ IsA(). TClass * TGShapedFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 42 of file TGShapedFrame.h. ◆ operator=(). TGShapedFrame & TGShapedFrame::operator= ; (; const TGShapedFrame & ; ). privatedelete . ◆ SavePrimitive(). void TGShapedFrame::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a shaped frame as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 78 of file TGShapedFrame.cxx. ◆ Streamer(). void TGShapedFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGShapedFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file TGShapedFrame.h. Member Data Documentation. ◆ fBgnd. const TGPicture* TGShapedFrame::fBgnd. protected . picture used as background/shape ; Definition at line 28 of file TGShapedFrame.h. ◆ fImage. TImage* TGShapedFrame::fImage. protected . image used as background/shape ; Definition at line 29 of file TGShapedFrame.h. Libraries for TGShapedFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGShapedFrame.h; gui/gui/src/TGShapedFrame.cxx. TGShapedFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGShapedFrame.html:33899,Guid,Guide,33899,doc/master/classTGShapedFrame.html,https://root.cern,https://root.cern/doc/master/classTGShapedFrame.html,1,['Guid'],['Guide']
Usability,"e composite shape described by this union. ; Implements TGeoBoolNode.; Definition at line 778 of file TGeoBoolNode.cxx. ◆ IsA(). TClass * TGeoUnion::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBoolNode.; Definition at line 128 of file TGeoBoolNode.h. ◆ MakeClone(). TGeoBoolNode * TGeoUnion::MakeClone ; (; ); const. overridevirtual . Make a clone of this. Pointers are preserved. ; Implements TGeoBoolNode.; Definition at line 432 of file TGeoBoolNode.cxx. ◆ Paint(). void TGeoUnion::Paint ; (; Option_t * ; option). overridevirtual . Paint method. ; Reimplemented from TGeoBoolNode.; Definition at line 440 of file TGeoBoolNode.cxx. ◆ Safety(). Double_t TGeoUnion::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Compute safety distance for a union node;. ; Implements TGeoBoolNode.; Definition at line 822 of file TGeoBoolNode.cxx. ◆ SavePrimitive(). void TGeoUnion::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBoolNode.; Definition at line 846 of file TGeoBoolNode.cxx. ◆ Sizeof3D(). void TGeoUnion::Sizeof3D ; (; ); const. overridevirtual . Register 3D size of this shape. ; Reimplemented from TGeoBoolNode.; Definition at line 865 of file TGeoBoolNode.cxx. ◆ Streamer(). void TGeoUnion::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBoolNode. ◆ StreamerNVirtual(). void TGeoUnion::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 128 of file TGeoBoolNode.h. Libraries for TGeoUnion:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoBoolNode.h; geom/geom/src/TGeoBoolNode.cxx. TGeoUnion. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoUnion.html:19271,Guid,Guide,19271,doc/master/classTGeoUnion.html,https://root.cern,https://root.cern/doc/master/classTGeoUnion.html,1,['Guid'],['Guide']
Usability,"e constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TArray(); TArray(Int_t n); TArray(const TArray& a); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray(); { }. TArray(Int_t n); { }. TArray(const TArray& a); { }. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-02 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TArray.html:1587,Simpl,Simplified,1587,root/html604/TArray.html,https://root.cern,https://root.cern/root/html604/TArray.html,2,['Simpl'],['Simplified']
Usability,"e constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TArray(); TArray(Int_t n); TArray(const TArray& a); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray(); { }. TArray(Int_t n); { }. TArray(const TArray& a); { }. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TArray.html:1587,Simpl,Simplified,1587,root/html602/TArray.html,https://root.cern,https://root.cern/root/html602/TArray.html,2,['Simpl'],['Simplified']
Usability,e containing the class declaration ; Definition at line 32 of file TVirtualGeoConverter.h. ◆ Instance(). TVirtualGeoConverter * TVirtualGeoConverter::Instance ; (; TGeoManager * ; geom = nullptr). static . Static function returning a pointer to the current geometry converter. ; The converter implements the ConvertGeometry function. If the geometry converter does not exist a default converter is created. ; Definition at line 47 of file TVirtualGeoConverter.cxx. ◆ IsA(). TClass * TVirtualGeoConverter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 32 of file TVirtualGeoConverter.h. ◆ SetConverter(). void TVirtualGeoConverter::SetConverter ; (; const TVirtualGeoConverter * ; conv). static . Static function to set an alternative converter. ; Definition at line 76 of file TVirtualGeoConverter.cxx. ◆ SetGeometry(). void TVirtualGeoConverter::SetGeometry ; (; TGeoManager * ; geom). inline . Definition at line 30 of file TVirtualGeoConverter.h. ◆ Streamer(). void TVirtualGeoConverter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualGeoConverter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 32 of file TVirtualGeoConverter.h. Member Data Documentation. ◆ fGeom. TGeoManager* TVirtualGeoConverter::fGeom. protected . Definition at line 22 of file TVirtualGeoConverter.h. ◆ fgGeoConverter. TVirtualGeoConverter * TVirtualGeoConverter::fgGeoConverter = nullptr. staticprotected . Definition at line 21 of file TVirtualGeoConverter.h. Libraries for TVirtualGeoConverter:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TVirtualGeoConverter.h; geom/geom/src/TVirtualGeoConverter.cxx. TVirtualGeoConverter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGeoConverter.html:13808,Guid,Guide,13808,doc/master/classTVirtualGeoConverter.html,https://root.cern,https://root.cern/doc/master/classTVirtualGeoConverter.html,1,['Guid'],['Guide']
Usability,"e correlation matrix from fit. ;  ; TMatrixDSym GetCovarianceMatrix () const;  Return the covariance matrix from fit. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print result of the fit, by default chi2, parameter values and errors. ;  ; bool Scan (unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0);  Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResult.html:2201,Clear,Clear,2201,doc/master/classTFitResult.html,https://root.cern,https://root.cern/doc/master/classTFitResult.html,1,['Clear'],['Clear']
Usability,"e define now C as an assembly containing A and B, positioning the assembly into D,E and F will actually position only A and Bdirectly into these volumes, taking into account their combined transformations A/B to C and C to D/E/F. This looks much nicer, is it? In fact, it is and it is not. Of course, we managed to get rid of the ‘unnecessary’ volume C in our geometry, but we end-up with a more flat structure for D,E and F (more daughters inside). This can get much worse when extensively used, as in the case: assemblies of assemblies.; For deciding what to choose between using virtual containers or assemblies for a specific case, one can use for both cases, after the geometry was closed:; gGeoManager->SetTopVolume(ptr_D);; gGeoManager->Test();; gGeoManager->RestoreMasterVolume();; The ptr_D is a pointer to volume D containing the interesting structure. The test will provide the timing for classifying 1 million random points inside D.; 18.4.2.5 Examples of Volume Positioning; Now let us make a simple volume representing a copper wire. We suppose that a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm and a half-length dZ=1cm:; TGeoTube *tube = new TGeoTube(""wire_tube"",0,0.01,1);; One may omit the name for the shape wire_tube, if no retrieving by name is further needed during geometry building. Different volumes having different names and materials can share the same shape.; Now let’s make the volume for our wire:; TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"",tube,; ptrCOPPER); //(*); (*) Do not bother to delete the media, shapes or volumes that you have created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look inside TGeoManager::MakeTube() method, we would have been able to create our wire with a single line:; TGeoVolume *wire_co = gGeoManager->MakeTube(""WIRE_CO"",ptrCOPPER,; 0,0.01,1); //(*); (*) The same applies for all p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:943759,simpl,simple,943759,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"e defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void TGWin32VirtualXProxy::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reimplemented from TVirtualX. ◆ ClearWindow() [2/2]. void TGWin32VirtualXProxy::ClearWindow ; (; Window_t ; id). overridevirtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented from TVirtualX. ◆ CloseDisplay(). void TGWin32VirtualXProxy::CloseDisplay ; (; ). overridevirtual . Closes connection to display server and destroys all windows. ; Reimplemented from TVirtualX.; Definition at line 265 of file TGWin32VirtualXProxy.cxx. ◆ ClosePixmap(). void TGWin32VirtualXProxy::ClosePixmap ; (; ). overridevirtual . Deletes current pixmap. ; Reimplemented from TVirtualX. ◆ CloseWindow(). void TGWin32VirtualXProxy::CloseWindow ; (; ). overridevirtual . Deletes current window. ; Reimplemented from TVirtualX. ◆ ConvertPrimarySelection(). void TGWin32VirtualXProxy::ConvertPrimarySelection ; (; Window_t ; id, . Atom_t ; clipboard, . Time_t ; when ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:56598,Clear,ClearWindow,56598,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['Clear'],['ClearWindow']
Usability,"e distance to next daughter of the current volume.Definition TGeoManager.cxx:2766; TGeoManager::GetUIDInt_t GetUID(const char *volname) constRetrieve unique id for a volume name. Return -1 if name not found.Definition TGeoManager.cxx:2978; TGeoManager::fClippingShapeTGeoShape * fClippingShapeDefinition TGeoManager.h:130; TGeoManager::GetCurrentNavigatorTGeoNavigator * GetCurrentNavigator() constReturns current navigator for the calling thread.Definition TGeoManager.cxx:815; TGeoManager::fHashVolumesTHashList * fHashVolumesDefinition TGeoManager.h:136; TGeoManager::fMatricesTObjArray * fMatricescurrent painterDefinition TGeoManager.h:93; TGeoManager::GetNumThreadsstatic Int_t GetNumThreads()Returns number of threads that were set to use geometry.Definition TGeoManager.cxx:2131; TGeoManager::MakeVolumeMultiTGeoVolumeMulti * MakeVolumeMulti(const char *name, TGeoMedium *medium)Make a TGeoVolumeMulti handling a list of volumes.Definition TGeoManager.cxx:3561; TGeoManager::ClearNavigatorsvoid ClearNavigators()Clear all navigators.Definition TGeoManager.cxx:881; TGeoManager::AddTransformationInt_t AddTransformation(const TGeoMatrix *matrix)Add a matrix to the list. Returns index of the matrix in list.Definition TGeoManager.cxx:695; TGeoManager::fOpticalSurfacesTObjArray * fOpticalSurfacesDefinition TGeoManager.h:102; TGeoManager::GetParentTrackOfIdTVirtualGeoTrack * GetParentTrackOfId(Int_t id) constGet parent track with a given ID.Definition TGeoManager.cxx:2215; TGeoManager::CdNodevoid CdNode(Int_t nodeid)Change current path to point to the node having this id.Definition TGeoManager.cxx:1655; TGeoManager::fBitsUChar_t * fBitsDefinition TGeoManager.h:110; TGeoManager::GetMaxLevelsstatic Int_t GetMaxLevels()Return maximum number of levels used in the geometry.Definition TGeoManager.cxx:2115; TGeoManager::fTminDouble_t fTminhighest range for phi cutDefinition TGeoManager.h:64; TGeoManager::IsLockedstatic Bool_t IsLocked()Check lock state.Definition TGeoManager.cxx:4056; TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:187650,Clear,ClearNavigatorsvoid,187650,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,3,['Clear'],"['Clear', 'ClearNavigators', 'ClearNavigatorsvoid']"
Usability,"e distance to next daughter of the current volume.Definition TGeoManager.cxx:2766; TGeoManager::GetUIDInt_t GetUID(const char *volname) constRetrieve unique id for a volume name. Return -1 if name not found.Definition TGeoManager.cxx:2978; TGeoManager::fClippingShapeTGeoShape * fClippingShapeDefinition TGeoManager.h:130; TGeoManager::GetCurrentNavigatorTGeoNavigator * GetCurrentNavigator() constReturns current navigator for the calling thread.Definition TGeoManager.cxx:815; TGeoManager::fHashVolumesTHashList * fHashVolumesDefinition TGeoManager.h:136; TGeoManager::fMatricesTObjArray * fMatricescurrent painterDefinition TGeoManager.h:93; TGeoManager::GetNumThreadsstatic Int_t GetNumThreads()Returns number of threads that were set to use geometry.Definition TGeoManager.cxx:2131; TGeoManager::MakeVolumeMultiTGeoVolumeMulti * MakeVolumeMulti(const char *name, TGeoMedium *medium)Make a TGeoVolumeMulti handling a list of volumes.Definition TGeoManager.cxx:3561; TGeoManager::ClearNavigatorsvoid ClearNavigators()Clear all navigators.Definition TGeoManager.cxx:881; TGeoManager::GetRTmodeInt_t GetRTmode() constDefinition TGeoManager.h:440; TGeoManager::GetMasterVolumeTGeoVolume * GetMasterVolume() constDefinition TGeoManager.h:511; TGeoManager::AddTransformationInt_t AddTransformation(const TGeoMatrix *matrix)Add a matrix to the list. Returns index of the matrix in list.Definition TGeoManager.cxx:695; TGeoManager::fOpticalSurfacesTObjArray * fOpticalSurfacesDefinition TGeoManager.h:102; TGeoManager::GetParentTrackOfIdTVirtualGeoTrack * GetParentTrackOfId(Int_t id) constGet parent track with a given ID.Definition TGeoManager.cxx:2215; TGeoManager::SetCurrentTrackvoid SetCurrentTrack(TVirtualGeoTrack *track)Definition TGeoManager.h:365; TGeoManager::CdNodevoid CdNode(Int_t nodeid)Change current path to point to the node having this id.Definition TGeoManager.cxx:1655; TGeoManager::fBitsUChar_t * fBitsDefinition TGeoManager.h:110; TGeoManager::IsClosedBool_t IsClosed() constDefini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:53538,Clear,ClearNavigatorsvoid,53538,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,3,['Clear'],"['Clear', 'ClearNavigators', 'ClearNavigatorsvoid']"
Usability,"e eventList; TFile*TEventIter::fFileCurrent file; TStringTEventIter::fFilenameName of the current file; Long64_tTEventIter::fFirstfirst entry to process; Long64_tTEventIter::fNumnumber of entries to process; Long64_tTEventIter::fOldBytesReadlast reported number of bytes read; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile); Load a tree from s TDSetElement. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TEventIter.h 38810 2011-04-12 16:22:59Z ganis $ » Last generated: 2011-07-04 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEventIterTree.html:7688,learn,learning,7688,root/html530/TEventIterTree.html,https://root.cern,https://root.cern/root/html530/TEventIterTree.html,1,['learn'],['learning']
Usability,"e eventList; TFile*TEventIter::fFileCurrent file; TStringTEventIter::fFilenameName of the current file; Long64_tTEventIter::fFirstfirst entry to process; Long64_tTEventIter::fNumnumber of entries to process; Long64_tTEventIter::fOldBytesReadlast reported number of bytes read; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile); Load a tree from s TDSetElement. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TEventIter.h 38810 2011-04-12 16:22:59Z ganis $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEventIterTree.html:7688,learn,learning,7688,root/html532/TEventIterTree.html,https://root.cern,https://root.cern/root/html532/TEventIterTree.html,1,['learn'],['learning']
Usability,"e example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""Numba::myFilter(x)"").Sum(""y""); print(sum.GetValue()); It also works with collections: RVec objects of fundamental types can be transparently converted to/from numpy arrays:; @ROOT.Numba.Declare(['RVec<float>', 'int'], 'RVec<float>'); def pypowarray(numpyvec, pow):; return numpyvec**pow; ; df.Define('array', 'ROOT::RVecF{1.,2.,3.}')\; .Define('arraySquared', 'Numba::pypowarray(array, 2)'); Note that this functionality requires the Python packages numba and cffi to be installed. Interoperability with NumPy; Conversion to NumPy arrays; Eventually, you probably would like to inspect the content of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example below or a full tutorial here.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); cols = df.Filter(""x > 10"").AsNumpy([""x"", ""y""]) # retrieve columns ""x"" and ""y"" as NumPy arrays; print(cols[""x""], cols[""y""]) # the values of the cols dictionary are NumPy arrays; Processing data stored in NumPy arrays; In case you have data in NumPy arrays in Python and you want to process the data with ROOT, you can easily create an RDataFrame using ROOT.RDF.FromNumpy. The factory function accepts a dictionary where the keys are the column names and the values are NumPy arrays, and returns a new RDataFrame with the provided columns.; Only arrays of fundamental types (integers and floating point values) are supported and the arrays must have the same length. Data is read directly from the arrays: no copies are performed.; # Read data from NumPy arrays; # The column names in the RDataFrame are taken from the dictionary keys; x, y = numpy.array([1, 2, 3]), numpy.array([4, 5, 6]); df = ROOT.RDF.FromNumpy({""x"": x, ""y""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:82724,simpl,simple,82724,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simple']
Usability,e examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate the main features of RooFit. Their names are related to the aspect which is treated in the code ;  RooStats TutorialsThese tutorials illustrate the main features of RooStats ;  Spectrum tutorialsExamples showing the TSpectrum and TSpectrumPainter usage ;  TSPlot tutorialsThis tutorial illustrates the use of class TSPlot ;  SQL tutorialsExamples showing the SQL classes ;  Thread tutorialsThread examples ;  TMVA tutorialsExample code which illustrates how to use the TMVA toolkit ;  Tree tutorialsExample code which illustrates how to use ROOT trees and ntuples ;  TUnfold tutorialsTest programs for the classes TUnfold and related ;  Unuran tutorialsExamples showing unuran capabilities ;  ROOT 7 tutorialsVarious examples showing the ROOT 7 interface ;  XML tutorialsXML examples ;  R Interface for Statistical Computing. ROOT 6.12/07 - Reference Guide Generated on Sat Sep 29 2018 23:44:44 (GVA Time) using Doxygen 1.8.13. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/modules.html:12816,Guid,Guide,12816,doc/v612/modules.html,https://root.cern,https://root.cern/doc/v612/modules.html,1,['Guid'],['Guide']
Usability,"e file containing the class declaration ; Definition at line 44 of file RooChiSquarePdf.h. ◆ doEval(). void RooChiSquarePdf::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprivatevirtual . Compute multiple values of ChiSquare distribution. ; Reimplemented from RooAbsReal.; Definition at line 66 of file RooChiSquarePdf.cxx. ◆ evaluate(). double RooChiSquarePdf::evaluate ; (; ); const. overrideprivatevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 56 of file RooChiSquarePdf.cxx. ◆ getAnalyticalIntegral(). Int_t RooChiSquarePdf::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . No analytical calculation available (yet) of integrals over subranges. ; Reimplemented from RooAbsReal.; Definition at line 75 of file RooChiSquarePdf.cxx. ◆ IsA(). TClass * RooChiSquarePdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 44 of file RooChiSquarePdf.h. ◆ Streamer(). void RooChiSquarePdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooChiSquarePdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file RooChiSquarePdf.h. Member Data Documentation. ◆ _ndof. RooRealProxy RooChiSquarePdf::_ndof. private . Definition at line 38 of file RooChiSquarePdf.h. ◆ _x. RooRealProxy RooChiSquarePdf::_x. private . Definition at line 37 of file RooChiSquarePdf.h. Libraries for RooChiSquarePdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooChiSquarePdf.h; roofit/roofit/src/RooChiSquarePdf.cxx. RooChiSquarePdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChiSquarePdf.html:77214,Guid,Guide,77214,doc/master/classRooChiSquarePdf.html,https://root.cern,https://root.cern/doc/master/classRooChiSquarePdf.html,1,['Guid'],['Guide']
Usability,"e file, insert a “!” as the first character after the comment marks. It tells ROOT not to save that data member in a root file when saving the class. For example, in this version of Event, the fPt and fTransient data members are not persistent.; class Event : public TObject {; private:; TDirectory *fTransient; //! current directory; Float_t fPt; //! transient value; ...; 11.3.3 The Pointer to Objects (//->); The string “->” in the comment field of the members *fH and *fTracks instruct the automatic Streamer to assume these will point to valid objects and the Streamerof the objects can be called rather than the more expensive R__b << fH. It is important to note that no check is done on the validity of the pointer value. In particular if the pointer points, directly or indirectly, back to the current object, this will result in an infinite recursion and the abrupt end of the process.; TClonesArray *fTracks; //->; TH1F *fH; //->; 11.3.4 Variable Length Array; When the Streamercomes across a pointer to a simple type, it assumes it is an array. Somehow, it has to know how many elements are in the array to reserve enough space in the buffer and write out the appropriate number of elements. This is done in the class definition. For example:; class Event : public TObject {; private:; char fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; ...; Float_t *fClosestDistance; //[fNvertex]; The array fClosestDistance is defined as a pointer of floating point numbers. A comment mark (//), and the number in square brackets tell the Streamerthe length of the array for this object. In general the syntax is:; <simple type> *<name>//[<length>]; The length cannot be an expression. If a variable is used, it needs to be an integer data member of the class. It must be defined ahead of its use, or in a base class.; The same notation also applies to variable length array of object and variable length array of pointer to objects.; MyObject *obj; //[fNojbs]; MyObject **objs; //[fDatas]; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:470115,simpl,simple,470115,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"e file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooArgSet. class RooArgSet: public RooAbsCollection. RooArgSet is a container object that can hold multiple RooAbsArg objects.; The container has set semantics which means that:. - Every object it contains must have a unique name returned by GetName(). - Contained objects are not ordered, although the set can be traversed; using an iterator returned by createIterator(). The iterator does not; necessarily follow the object insertion order. - Objects can be retrieved by name only, and not by index. Ownership of contents. Unowned objects are inserted with the add() method. Owned objects; are added with addOwned() or addClone(). A RooArgSet either owns all; of it contents, or none, which is determined by the first <add>; call. Once an ownership status is selected, inappropriate <add> calls; will return error status. Clearing the list via removeAll() resets the; ownership status. Arguments supplied in the constructor are always added; as unowned elements. Function Members (Methods); public:. RooArgSet(); RooArgSet(const RooArgList& list); RooArgSet(const char* name); RooArgSet(const RooArgList& list, const RooAbsArg* var1); RooArgSet(const TCollection& tcoll, const char* name = """"); RooArgSet(const RooAbsArg& var1, const char* name = """"); RooArgSet(const RooArgSet& other, const char* name = """"); RooArgSet(const RooArgSet& set1, const RooArgSet& set2, const char* name = """"); RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const char* name = """"); RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const char* name = """"); RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const char* name = """"); RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const RooAbsArg& var5, const char* name = """"); RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:1076,Clear,Clearing,1076,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,5,['Clear'],['Clearing']
Usability,"e file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooArgSet. class RooArgSet: public RooAbsCollection. RooArgSet is a container object that can hold multiple RooAbsArg objects.; The container has set semantics which means that:. - Every object it contains must have a unique name returned by GetName(). - Contained objects are not ordered, although the set can be traversed; using an iterator returned by createIterator(). The iterator does not; necessarily follow the object insertion order. - Objects can be retrieved by name only, and not by index. Ownership of contents. Unowned objects are inserted with the add() method. Owned objects; are added with addOwned() or addClone(). A RooArgSet either owns all; of it contents, or none, which is determined by the first <add>; call. Once an ownership status is selected, inappropriate <add> calls; will return error status. Clearing the list via removeAll() resets the; ownership status. Arguments supplied in the constructor are always added; as unowned elements. Function Members (Methods); public:. virtual~RooArgSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tadd(const RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tadd(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual RooAbsArg*addClone(const RooAbsArg& var, Bool_t silent = kFALSE); virtual voidaddClone(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_taddOwned(RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_taddOwned(const RooAbsCollection& list, Bool_t silent = kFALSE); Bool_tRooAbsCollection::allInRange(const char* rangeSpec) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsCollection::assignFast(const RooAbsCollection& other, Bool_t setValDirty = kTRUE); RooAbsCollection&RooAbsCollection::assignValueOnly(const RooAbsCollection& other, Bool_t oneSafe = kFALSE); virtual voidTObject::Brows",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgSet.html:1076,Clear,Clearing,1076,root/html602/RooArgSet.html,https://root.cern,https://root.cern/root/html602/RooArgSet.html,2,['Clear'],['Clearing']
Usability,"e filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. TGraph2D(const TGraph2D& ); Graph2D copy constructor.; copy everything apart from the list of contained functions. ~TGraph2D(); TGraph2D destructor. TGraph2D& operator=(const TGraph2D& ); Graph2D operator ""="". void Build(Int_t n); Creates the 2D graph basic data structure. void Browse(TBrowser* ); Browse. void Clear(Option_t* option = """"); Free all memory allocated by this object. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the graph to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); Computes distance from point px,py to a graph. void Draw(Option_t* option = """"); Specific drawing options can be used to paint a TGraph2D:. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph2D.html:19800,Clear,Clear,19800,root/html534/TGraph2D.html,https://root.cern,https://root.cern/root/html534/TGraph2D.html,3,['Clear'],['Clear']
Usability,"e for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. TTeXDump(); TTeXDump(const char* filename, Int_t type = -113); virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); Int_tCMtoTeX(Double_t u); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidDefineMarkers(); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTeXDump.html:1490,simpl,simple,1490,root/html534/TTeXDump.html,https://root.cern,https://root.cern/root/html534/TTeXDump.html,1,['simpl'],['simple']
Usability,"e for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); Int_tCMtoTeX(Double_t u); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidDefineMarkers(); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTeXDump.html:1514,simpl,simple,1514,root/html602/TTeXDump.html,https://root.cern,https://root.cern/root/html602/TTeXDump.html,2,['simpl'],['simple']
Usability,"e frame, and if it contains a child frame, ask; the user where to keep it (top or bottom). This method is the actual; implementation. void SplitVer(); Vertically split the frame, and if it contains a child frame, ask; the user where to keep it (left or right). This is the method used; via the context menu. void SplitVertical(const char* side = ""left""); Vertically split the frame, and if it contains a child frame, ask; the user where to keep it (left or right). This method is the actual; implementation. void SwallowBack(); Swallow back the child frame previously extracted, and close its; parent (transient frame). void SwitchFrames(TGFrame* frame, TGCompositeFrame* dest, TGFrame* prev); Switch (exchange) two frames.; frame is the source, dest is the destination (the new parent); prev is the frame that has to be exchanged with the source; (the one actually in the destination). void SwitchToMain(); Switch the actual embedded frame to the main (first) split frame. void Undocked(TGFrame* frame); Emit Undocked() signal. void UnSplit(const char* which); Close (unmap and remove from the list of frames) the frame contained in; this split frame. void SavePrimitive(ostream& out, Option_t* option = """"); Save a splittable frame as a C++ statement(s) on output stream out. TGRectMap& operator=(const TGSplitFrame& ). TGSplitFrame(const TGSplitFrame& ). TGSplitFrame * GetFirst() const; { return fFirst; }. TGFrame * GetFrame() const; { return fFrame; }. TGSplitFrame * GetSecond() const; { return fSecond; }. TGSplitter * GetSplitter() const; { return fSplitter; }. TGSplitTool * GetSplitTool() const; { return fSplitTool; }. TGFrame * GetUndocked() const; { return fUndocked; }. Float_t GetHRatio() const; { return fHRatio; }. Float_t GetWRatio() const; { return fWRatio; }. void SetHRatio(Float_t r); { fHRatio = r; }. void SetWRatio(Float_t r); { fWRatio = r; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGSplitFrame.html:22534,Undo,Undocked,22534,root/html534/TGSplitFrame.html,https://root.cern,https://root.cern/root/html534/TGSplitFrame.html,6,['Undo'],['Undocked']
Usability,"e frame, and if it contains a child frame, ask; the user where to keep it (top or bottom). This method is the actual; implementation. void SplitVer(); Vertically split the frame, and if it contains a child frame, ask; the user where to keep it (left or right). This is the method used; via the context menu. void SplitVertical(const char* side = ""left""); Vertically split the frame, and if it contains a child frame, ask; the user where to keep it (left or right). This method is the actual; implementation. void SwallowBack(); Swallow back the child frame previously extracted, and close its; parent (transient frame). void SwitchFrames(TGFrame* frame, TGCompositeFrame* dest, TGFrame* prev); Switch (exchange) two frames.; frame is the source, dest is the destination (the new parent); prev is the frame that has to be exchanged with the source; (the one actually in the destination). void SwitchToMain(); Switch the actual embedded frame to the main (first) split frame. void Undocked(TGFrame* frame); Emit Undocked() signal. void UnSplit(const char* which); Close (unmap and remove from the list of frames) the frame contained in; this split frame. void SavePrimitive(ostream& out, Option_t* option = """"); Save a splittable frame as a C++ statement(s) on output stream out. TGRectMap& operator=(const TGSplitFrame& ). TGSplitFrame(const TGSplitFrame& ). TGSplitFrame * GetFirst() const; { return fFirst; }. TGFrame * GetFrame() const; { return fFrame; }. TGSplitFrame * GetSecond() const; { return fSecond; }. TGSplitter * GetSplitter() const; { return fSplitter; }. TGSplitTool * GetSplitTool() const; { return fSplitTool; }. TGFrame * GetUndocked() const; { return fUndocked; }. Float_t GetHRatio() const; { return fHRatio; }. Float_t GetWRatio() const; { return fWRatio; }. void SetHRatio(Float_t r); { fHRatio = r; }. void SetWRatio(Float_t r); { fWRatio = r; }. » Author: Bertrand Bellenot 23/01/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSplitFrame.html:22415,Undo,Undocked,22415,root/html528/TGSplitFrame.html,https://root.cern,https://root.cern/root/html528/TGSplitFrame.html,6,['Undo'],['Undocked']
Usability,"e geometry, representing a path of positioned ...Definition TGeoPhysicalNode.h:35; TGeoRegionRegions are groups of volumes having a common set of user tracking cuts.Definition TGeoRegion.h:36; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoShape::Bigstatic Double_t Big()Definition TGeoShape.h:87; TGeoSkinSurfaceDefinition TGeoOpticalSurface.h:177; TGeoVolumeAssemblyVolume assemblies.Definition TGeoVolume.h:316; TGeoVolumeMultiVolume families.Definition TGeoVolume.h:266; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TVirtualGeoPainterAbstract class for geometry painters.Definition TVirtualGeoPainter.h:32; TVirtualGeoTrackBase class for user-defined tracks attached to a geometry.Definition TVirtualGeoTrack.h:23; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5. geomgeomincTGeoManager.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:102417,Guid,Guide,102417,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['Guid'],['Guide']
Usability,"e given FCN function representing a multi-dimensional gradient function; interface (ROOT::Math::IMultiGradFunction). In this case the minimizer will use the; gradient information provided by the function.; For the options same consideration as in the previous method. bool FitFCN(const ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0). Fit using a FitMethodGradFunction interface. Same as method above, but now extra information; can be taken from the function class. bool SetFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Set the FCN function represented by a multi-dimensional gradient function interface; (ROOT::Math::IMultiGenFunction) and optionally the initial parameters; See also note above for the initial parameters for FitFCN. bool FitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool EvalFCN(). Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN. bool LinearFit(const ROOT::Fit::BinData& data). do a linear fit on a set of bin-data. { return DoLinearFit(data); }. void SetFunction(const IModelFunction & func). Set the fitted function (model function) from a parametric function interface. void SetFunction(const IModel1DFunction & func). Set the fitted function from a parametric 1D function interface. bool CalculateHessErrors(). perform an error analysis on the result using the Hessian; Errors are obtaied from the inverse of the Hessian matrix; To be called only after fitting and when a minimizer supporting the Hessian calculations is used; otherwise an error (false) is returned.; A new FitResult with the Hessian result will be produced. bool CalculateMinosErrors(). perform an error analysis on the result using MINOS; To be called only after fitting and when a minimizer supporting MINOS is used; otherwise an error (false) is returned.; The result will be a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__Fitter.html:9815,simpl,simple,9815,root/html530/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__Fitter.html,1,['simpl'],['simple']
Usability,"e given FCN function representing a multi-dimensional gradient function; interface (ROOT::Math::IMultiGradFunction). In this case the minimizer will use the; gradient information provided by the function.; For the options same consideration as in the previous method. bool FitFCN(const ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0). Fit using a FitMethodGradFunction interface. Same as method above, but now extra information; can be taken from the function class. bool SetFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Set the FCN function represented by a multi-dimensional gradient function interface; (ROOT::Math::IMultiGenFunction) and optionally the initial parameters; See also note above for the initial parameters for FitFCN. bool FitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool EvalFCN(). Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN. bool LinearFit(const ROOT::Fit::BinData& data). do a linear fit on a set of bin-data. { return DoLinearFit(data); }. void SetFunction(const IModelFunction & func, bool useGradient = false). Set the fitted function (model function) from a parametric function interface. void SetFunction(const IModel1DFunction & func, bool useGradient = false). Set the fitted function from a parametric 1D function interface. bool CalculateHessErrors(). perform an error analysis on the result using the Hessian; Errors are obtaied from the inverse of the Hessian matrix; To be called only after fitting and when a minimizer supporting the Hessian calculations is used; otherwise an error (false) is returned.; A new FitResult with the Hessian result will be produced. bool CalculateMinosErrors(). perform an error analysis on the result using MINOS; To be called only after fitting and when a minimizer supporting MINOS is used; otherwise",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__Fitter.html:11178,simpl,simple,11178,root/html532/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__Fitter.html,3,['simpl'],['simple']
Usability,"e given FCN function representing a multi-dimensional gradient function; interface (ROOT::Math::IMultiGradFunction). In this case the minimizer will use the; gradient information provided by the function.; For the options same consideration as in the previous method. bool FitFCN(const ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0). Fit using a FitMethodGradFunction interface. Same as method above, but now extra information; can be taken from the function class. bool SetFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Set the FCN function represented by a multi-dimensional gradient function interface; (ROOT::Math::IMultiGenFunction) and optionally the initial parameters; See also note above for the initial parameters for FitFCN. bool FitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool EvalFCN(). Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN. void SetFunction(const IModelFunction & func, bool useGradient = false). Set the fitted function (model function) from a parametric function interface. void SetFunction(const IModel1DFunction & func, bool useGradient = false). Set the fitted function from a parametric 1D function interface. bool CalculateHessErrors(). perform an error analysis on the result using the Hessian; Errors are obtaied from the inverse of the Hessian matrix; To be called only after fitting and when a minimizer supporting the Hessian calculations is used; otherwise an error (false) is returned.; A new FitResult with the Hessian result will be produced. bool CalculateMinosErrors(). perform an error analysis on the result using MINOS; To be called only after fitting and when a minimizer supporting MINOS is used; otherwise an error (false) is returned.; The result will be appended in the fit result class; Optionally a vector of parameter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__Fitter.html:10746,simpl,simple,10746,root/html604/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__Fitter.html,1,['simpl'],['simple']
Usability,"e given initialization method. */; 106 virtual void Initialize();; 107 ; 108 /*! Computes activation of the layer for the given input. The input; 109 * must be in 3D tensor form with the different matrices corresponding to; 110 * different events in the batch. */; 111 virtual void Forward(Tensor_t &input, bool applyDropout = false) = 0;; 112 ; 113 /*! Backpropagates the error. Must only be called directly at the corresponding; 114 * call to Forward(...). */; 115 virtual void Backward(Tensor_t &gradients_backward, const Tensor_t &activations_backward ) = 0;; 116 ///// std::vector<Matrix_t> &inp1, std::vector<Matrix_t> &inp2) = 0;; 117 ; 118 /*! Reset some training flags after a loop on all batches; 119 Some layer (e.g. batchnormalization) might need to implement the function in case some operations; 120 are needed after looping an all batches */; 121 virtual void ResetTraining() {}; 122 ; 123 /*! Updates the weights and biases, given the learning rate */; 124 void Update(const Scalar_t learningRate);; 125 ; 126 /*! Updates the weights, given the gradients and the learning rate, */; 127 void UpdateWeights(const std::vector<Matrix_t> &weightGradients, const Scalar_t learningRate);; 128 ; 129 /*! Updates the biases, given the gradients and the learning rate. */; 130 void UpdateBiases(const std::vector<Matrix_t> &biasGradients, const Scalar_t learningRate);; 131 ; 132 /*! Updates the weight gradients, given some other weight gradients and learning rate. */; 133 void UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients, const Scalar_t learningRate);; 134 ; 135 /*! Updates the bias gradients, given some other weight gradients and learning rate. */; 136 void UpdateBiasGradients(const std::vector<Matrix_t> &biasGradients, const Scalar_t learningRate);; 137 ; 138 /*! Copies the weights provided as an input. */; 139 void CopyWeights(const std::vector<Matrix_t> &otherWeights);; 140 ; 141 /*! Copies the biases provided as an input. */; 142 void CopyBiases(const std:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:5087,learn,learning,5087,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,5,['learn'],"['learning', 'learningRate']"
Usability,"e graph to be drawn in high resolution mode.; By default, the graph is drawn in low resolution; in case the number of points is greater than the number of; pixels in the current pad.; ; ""][""; ""Cutoff"" style. When this option is selected together with; H option, the first and last vertical lines of the histogram; are not drawn.; . . void PaintGraphAsymmErrors(TGraph* theGraph, Option_t* option). Paint this TGraphAsymmErrors with its current attributes.; . void PaintGraphBentErrors(TGraph* theGraph, Option_t* option). Paint this TGraphBentErrors with its current attributes.; . void PaintGraphErrors(TGraph* theGraph, Option_t* option). Paint this TGraphErrors with its current attributes.; . void PaintGraphPolar(TGraph* theGraph, Option_t* option). Paint this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code come from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)); the curve is approximated by a pol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:22740,simpl,simple,22740,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,2,['simpl'],['simple']
Usability,"e hessian computation routine with respect to the parameters.Definition TFormula.cxx:3256; double; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::Internal::DerivPrecisiondouble DerivPrecision(double eps)Definition WrappedTF1.cxx:25; ROOT::Math::Internal::CopyTF1PtrTF1 * CopyTF1Ptr(const TF1 *funcToCopy)Definition WrappedTF1.cxx:33; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::SignalingNaNDouble_t SignalingNaN()Returns a signaling NaN as defined by IEEE 754](http://en.wikipedia.org/wiki/NaN#Signaling_NaN).Definition TMath.h:910; ROOT::Math::GeneralHessianCalc< double >::IsAvailablestatic bool IsAvailable(TF1 *func)Definition WrappedMultiTF1.h:337; ROOT::Math::GeneralHessianCalc< double >::Hessianstatic bool Hessian(TF1 *func, const double *x, const double *par, double *h)Definition WrappedMultiTF1.h:319; ROOT::Math::GeneralHessianCalcDefinition WrappedMultiTF1.h:308; ROOT::Math::GeneralHessianCalc::Hessianstatic bool Hessian(TF1 *, const T *, const double *, T *)Definition WrappedMultiTF1.h:309; ROOT::Math::GeneralHessianCalc::IsAvailablestatic bool IsAvailable(TF1 *)Definition WrappedMultiTF1.h:314; ROOT::Math::GeneralLinearFunctionDerivation< double >::DoParameterDerivativestatic double DoParameterDerivative(const WrappedMultiTF1Templ< double > *wrappedFunc, const double *x, unsigned int ipar)Definition WrappedMultiTF1.h:216; ROOT::Math::GeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar.Definition WrappedMultiTF1.h:203; ROOT::Math::GeneralLinearFunctionDerivation::DoParameterDerivativestatic T DoParameterDerivative(const WrappedMultiTF1Templ< T > *, const T *, unsigned int)Definition WrappedMultiTF1.h:204. histhistincMathWrappedMultiTF1.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html:23326,Guid,Guide,23326,doc/master/WrappedMultiTF1_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html,1,['Guid'],['Guide']
Usability,"e histogram from the ROOT File; TH1 *hpx = nullptr; // pointer to base class TH1 is enough; example->GetObject(""hpx"", hpx);; ; TCanvas *c1 = new TCanvas(""c1"",""Histogram Drawing Options"",200,10,700,900);; TPad *pad1 = new TPad(""pad1"",; ""The pad with the function"",0.03,0.62,0.50,0.92);; TPad *pad2 = new TPad(""pad2"",; ""The pad with the histogram"",0.51,0.62,0.98,0.92);; TPad *pad3 = new TPad(""pad3"",; ""The pad with the histogram"",0.03,0.02,0.97,0.57);; pad1->Draw();; pad2->Draw();; pad3->Draw();; ; // Draw a global picture title; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98,; ""Drawing options for one dimensional histograms"");; title->SetTextFont(52);; title->Draw();; ; // Draw histogram hpx in first pad with the default option.; pad1->cd();; pad1->GetFrame()->SetFillColor(18);; hpx->SetFillColor(45);; hpx->DrawCopy();; TPaveLabel *label1 = new TPaveLabel(-3.5,700,-1,800,""Default option"");; label1->Draw();; ; // Draw hpx as a lego. Clicking on the lego area will show; // a ""transparent cube"" to guide you rotating the lego in real time.; pad2->cd();; hpx->DrawCopy(""lego1"");; TPaveLabel *label2 = new TPaveLabel(-0.72,0.74,-0.22,0.88,""option Lego1"");; label2->Draw();; TPaveLabel *label2a = new TPaveLabel(-0.93,-1.08,0.25,-0.92,; ""Click on lego to rotate"");; label2a->Draw();; ; // Draw hpx with its errors and a marker.; pad3->cd();; pad3->SetGridx();; pad3->SetGridy();; hpx->SetMarkerStyle(21);; hpx->Draw(""e1p"");; TPaveLabel *label3 = new TPaveLabel(2,600,3.5,650,""option e1p"");; label3->Draw();; ; // The following illustrates how to add comments using a PaveText.; // Attributes of text/lines/boxes added to a PaveText can be modified.; // The AddText function returns a pointer to the added object.; TPaveText *pave = new TPaveText(-3.78,500,-1.2,750);; TText *t1=pave->AddText(""You can move"");; t1->SetTextColor(4);; t1->SetTextSize(0.05);; pave->AddText(""Title and Stats pads"");; pave->AddText(""X and Y axis"");; pave->AddText(""You can modify bin contents"");; pave->Draw();;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1ReadAndDraw_8C.html:1872,guid,guide,1872,doc/master/h1ReadAndDraw_8C.html,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8C.html,1,['guid'],['guide']
Usability,"e individual graphs or; histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number subpads.; Returns the new current pad, or 0 in case of failure.; For example:; c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do; c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; points to the current pad. One can use gPad to set attributes; of the current pad.; Note3: One can get a pointer to one of the sub-pads of pad with:; TPad *subpad = (TPad*)pad->GetPad(subpadnumber);. void Clear(Option_t* option = """"); Delete all pad primitives. If the bit kClearAfterCR has been set for this pad, the Clear function; will execute only after having pressed a CarriageReturn; Set the bit with mypad->SetBit(TPad::kClearAfterCR). Int_t Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); Clipping routine: Cohen Sutherland algorithm. If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. _Input parameters:. x[2], y[2] : Segment coordinates; xclipl, yclipb, xclipr, yclipt : Clipping boundary. _Output parameters:. x[2], y[2] : New segment coordinates. Int_t Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); Clipping routine: Cohen Sutherland algorithm. If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. _Input parameters:. x[2], y[2] : Segment coordinates; xclipl, yclipb, xclipr, yclipt : Clipping boundary. _Output parameters:. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:32227,Clear,Clear,32227,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,3,['Clear'],['Clear']
Usability,"e individual; graphs or histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number subpads.; Returns the new current pad, or 0 in case of failure.; For example:; c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do; c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; points to the current pad. One can use gPad to set attributes; of the current pad.; Note3: One can get a pointer to one of the sub-pads of pad with:; TPad *subpad = (TPad*)pad->GetPad(subpadnumber);. void Clear(Option_t* option = """"); Delete all pad primitives. If the bit kClearAfterCR has been set for this pad, the Clear function; will execute only after having pressed a CarriageReturn; Set the bit with mypad->SetBit(TPad::kClearAfterCR). Int_t Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); Clipping routine: Cohen Sutherland algorithm. If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. _Input parameters:. x[2], y[2] : Segment coordinates; xclipl, yclipb, xclipr, yclipt : Clipping boundary. _Output parameters:. x[2], y[2] : New segment coordinates. Int_t Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); Clipping routine: Cohen Sutherland algorithm. If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. _Input parameters:. x[2], y[2] : Segment coordinates; xclipl, yclipb, xclipr, yclipt : Clipping boundary. _Output parameters:. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:33635,Clear,Clear,33635,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,3,['Clear'],['Clear']
Usability,"e interval in the fit residual case. ; Definition at line 207 of file TRatioPlot.h. ◆ GetConfidenceInterval2(). TGraphErrors * TRatioPlot::GetConfidenceInterval2 ; (; ); const. inline . Returns the graph for the 2 sigma confidence interval in the fit residual case. ; Definition at line 212 of file TRatioPlot.h. ◆ GetLowerPad(). TPad * TRatioPlot::GetLowerPad ; (; ); const. inline . Definition at line 215 of file TRatioPlot.h. ◆ GetLowerRefGraph(). TGraph * TRatioPlot::GetLowerRefGraph ; (; ); const. virtual . Returns the reference graph for the lower pad, which means the graph that is responsible for setting the coordinate system. ; It is the first graph added to the primitive list of the lower pad. This reference can be used to set the minimum and maximum of the lower pad. Note that TRatioPlot::Draw needs to have been called first, since the graphs are only created then.; ; void ratioplot3() {; gStyle->SetOptStat(0);; auto c1 = new TCanvas(""c1"", ""fit residual simple"");; c1->SetLogy();; auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);; h1->FillRandom(""gaus"", 2000);; h1->Fit(""gaus"", ""0"");; h1->SetMinimum(0.001);; h1->GetXaxis()->SetTitle(""x"");; h1->GetYaxis()->SetTitle(""y"");; auto rp1 = new TRatioPlot(h1);; rp1->Draw();; rp1->GetLowerRefGraph()->SetMinimum(-2);; rp1->GetLowerRefGraph()->SetMaximum(2);; }; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Definition TH1.h:405; ratioplot3Definition ratioplot3.py:1; . Definition at line 705 of file TRatioPlot.cxx. ◆ GetLowerRefXaxis(). TAxis * TRatioPlot::GetLowerRefXaxis ; (; ); const. Gets the x axis of the lower ref graph. ; Shortcut for:; rp->GetLowerRefGraph()->GetXaxis();. Definition at line 798 of file TRatioPlot.cxx. ◆ GetLowerRefYaxis(). TAxis * TRatioPlot::GetLowerRefYaxis ; (; ); const. Gets the y axis of the lower ref graph. ; Shortcut for:; rp->GetLowerRefGraph()->GetYaxis();. Definition at line 812 of file TRatioPlot.cxx. ◆ GetLowYaxis(). TAxis * TR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:33046,simpl,simple,33046,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['simpl'],['simple']
Usability,"e is a predefined number of color levels (256). Color in every level is calculated by adding the increments of the r, g, b components to the previous level. Using this function one can change the color increments between two neighbouring color levels. The function does not apply dor the Simple Display Modes Group. The default values are: (1,1,1).; ca(color_algorithm) allows to choose the Color Algorithm. To define the colors one can employ one of the following color algorithms (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches the limit value one can choose either smooth transition (by decreasing the limit value) or a sharp modulo transition (continuing with 0 value). This makes possible to realize various visual effects. One can choose from the following set of the algorithms:. 0 = RGB Smooth; 1 = RGB Modulo; 2 = CMY Smooth; 3 = CMY Modulo; 4 = CIE Smooth; 5 = CIE Modulo; 6 = YIQ Smooth; 7 = YIQ Modulo; 8 = HVS Smooth; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default value is 0. Example: h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");; choose CMY Modulo to paint the ""h2"" histogram.; lp(x,y,z) set the light position. In Light and LightHeight display modes groups the color palette is calculated according to the fictive light source position in 3-d space. Using this function one can change the position of the source and thus to achieve various graphical effects. This function does not apply for Simple and Height display modes groups. Default is: lp(1000,1000,100).; s(shading,shadow) allows to set the shading. The picture's surface is composed of triangles. If desired the edges of the neighbouring triangles can be smoothed (shaded). If desired the display of the shadow can be painted as well. The function does not apply for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are painted. Default value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:48527,Simpl,Simple,48527,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"e is over the area associated with this slice. ;  ; Double_t GetRadiusOffset () const;  return the value of the offset in radial direction for this slice. ;  ; Double_t GetValue () const;  Return the value of this slice. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *opts="""") override;  Save as C++ macro, used directly from TPie. ;  ; void SetIsActive (Bool_t is);  ; void SetRadiusOffset (Double_t);  Set the radial offset of this slice. ;  ; void SetValue (Double_t);  Set the value for this slice. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPieSlice.html:1843,Clear,Clear,1843,doc/master/classTPieSlice.html,https://root.cern,https://root.cern/doc/master/classTPieSlice.html,1,['Clear'],['Clear']
Usability,"e itself. More...;  ; class  ROOT::Experimental::Internal::RIOSharedBase;  ; class  ROOT::Experimental::Detail::RMenuArgument;  Argument description for menu item which should invoke class method. More...;  ; class  ROOT::Experimental::Detail::RMenuItem;  Base class for menu items, shown on JS side. More...;  ; class  ROOT::Experimental::RMenuItems;  List of items for object context menu. More...;  ; class  ROOT::Experimental::ROnFrameDrawable;  Base class for drawable which can be drawn on frame or on pad. More...;  ; class  ROOT::Experimental::RPad;  Graphic container for RDrawable-s. More...;  ; class  ROOT::Experimental::RPadBase;  Base class for graphic containers for RDrawable-s. More...;  ; class  ROOT::Experimental::RPadBaseDisplayItem;  class RPadBaseDisplayItem More...;  ; class  ROOT::Experimental::RPadDisplayItem;  class RPadDisplayItem More...;  ; class  ROOT::Experimental::RPadExtent;  An extent / size (horizontal and vertical) in a RPad. More...;  ; class  ROOT::Experimental::RPadPos;  A position (horizontal and vertical) in a RPad. More...;  ; class  ROOT::Experimental::RPalette;  A set of colors. More...;  ; class  ROOT::Experimental::RStyle;  A set of defaults for graphics attributes, e.g. More...;  ; class  ROOT::Experimental::Internal::RVirtualCanvasPainter;  Abstract interface for painting a canvas. More...;  ; struct  ROOT::Experimental::RPadExtent::ScaleFactor;  A scale factor (separate factors for horizontal and vertical) for scaling a RPadLength. More...;  ; class  ROOT::Experimental::RPadPos::ScaleFactor;  A scale factor (separate factors for horizontal and vertical) for scaling a RPadLength. More...;  ; class  ROOT::Experimental::TObjectDisplayItem;  Display item for TObject with drawing options. More...;  ; class  ROOT::Experimental::TObjectDrawable;  Provides v7 drawing facilities for TObject types (TGraph, TH1, TH2, etc). More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__GpadROOT7.html:5189,Guid,Guide,5189,doc/master/group__GpadROOT7.html,https://root.cern,https://root.cern/doc/master/group__GpadROOT7.html,1,['Guid'],['Guide']
Usability,e length. ; Definition at line 470 of file TCurlyArc.cxx. ◆ SetPhimax(). void TCurlyArc::SetPhimax ; (; Double_t ; phimax). virtual . Set Curly Arc maximum Phi. ; Definition at line 461 of file TCurlyArc.cxx. ◆ SetPhimin(). void TCurlyArc::SetPhimin ; (; Double_t ; phimin). virtual . Set Curly Arc minimum Phi. ; Definition at line 452 of file TCurlyArc.cxx. ◆ SetRadius(). void TCurlyArc::SetRadius ; (; Double_t ; radius). virtual . Set Curly Arc radius. ; Definition at line 443 of file TCurlyArc.cxx. ◆ Streamer(). void TCurlyArc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCurlyArc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file TCurlyArc.h. Member Data Documentation. ◆ fgDefaultAmplitude. Double_t TCurlyArc::fgDefaultAmplitude = 0.01. staticprivate . default amplitude ; Definition at line 25 of file TCurlyArc.h. ◆ fgDefaultIsCurly. Bool_t TCurlyArc::fgDefaultIsCurly = kTRUE. staticprivate . default curly type ; Definition at line 26 of file TCurlyArc.h. ◆ fgDefaultWaveLength. Double_t TCurlyArc::fgDefaultWaveLength = 0.02. staticprivate . default wavelength ; Definition at line 24 of file TCurlyArc.h. ◆ fPhimax. Double_t TCurlyArc::fPhimax. private . end phi (degrees) ; Definition at line 21 of file TCurlyArc.h. ◆ fPhimin. Double_t TCurlyArc::fPhimin. private . start phi (degrees) ; Definition at line 20 of file TCurlyArc.h. ◆ fR1. Double_t TCurlyArc::fR1. private . Radius of arc. ; Definition at line 19 of file TCurlyArc.h. ◆ fTheta. Double_t TCurlyArc::fTheta. private . used internally ; Definition at line 22 of file TCurlyArc.h. Libraries for TCurlyArc:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TCurlyArc.h; graf2d/graf/src/TCurlyArc.cxx. TCurlyArc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyArc.html:34732,Guid,Guide,34732,doc/master/classTCurlyArc.html,https://root.cern,https://root.cern/doc/master/classTCurlyArc.html,1,['Guid'],['Guide']
Usability,"e lifetime of the clones array. All objects must be of the same class. For the rest this class has the same properties as TObjArray.; To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) times new/delete): TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete();; }; a#define a(i)Definition RSha256.hxx:99; TObjArrayAn array of TObjects.Definition TObjArray.h:31; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; One better uses a TClonesArray which reduces the number of new/delete calls to only O(10000): TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; To reduce the number of call to the constructor (especially useful if the user class requires memory allocation), the object can be added (and constructed when needed) using ConstructedAt which only calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; Note: the only supported way to add objects to a TClonesArray is via the new with placement method or the ConstructedAt method. The other Add() methods ofTObjArray and its base classes are not allowed.; Considering that a new/delete costs about 70 mus on a 300 MHz HP, O(10^9) new/deletes will save about 19 hours. NOTE 1; C/C++ offers the possibility of allocating and deleting memory. Forgetting to delete allocated memor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:1407,Clear,Clear,1407,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"e line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepes descent.; Conjugate gradients with the; Fletcher-Reeves updating formula: Weights are set to the; minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepes descent.; Broyden, Fletcher, Goldfarb, Shanno; (BFGS) method: Implies the computation of a NxN matrix; computation, but seems more powerful at least for less than 300; weights. Parameters are Tau and Reset, which defines the epochs where; the direction is reset to the steepes descent. How; to use it... TMLP is build from 3 classes: TNeuron, TSynapse and; TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used; explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree; given in the constructor. The network is described by a simple; string: The input/output layers are defined by giving the expression for; each neuron, separated by comas. Hidden layers are just described; by the number of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This can only be done for fixed-size arrays.; If the formula ends with ""!"", softmax functions are used for the output layer.; One defines the training and test datasets by TEventLists. Example:; TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; Both the TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitly, or via; a string containing the formula to be used to define them, exactly as; for a TCu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:6305,simpl,simple,6305,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['simpl'],['simple']
Usability,"e list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUnd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:21492,Undo,Undo,21492,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,6,['Undo'],['Undo']
Usability,"e list of predefined color names is the following:; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; kTeal@ kTealDefinition Rtypes.h:67; kGray@ kGrayDefinition Rtypes.h:65; kPink@ kPinkDefinition Rtypes.h:67; kOrange@ kOrangeDefinition Rtypes.h:67; kBlack@ kBlackDefinition Rtypes.h:65; kGreen@ kGreenDefinition Rtypes.h:66; kWhite@ kWhiteDefinition Rtypes.h:65; kCyan@ kCyanDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kAzure@ kAzureDefinition Rtypes.h:67; kViolet@ kVioletDefinition Rtypes.h:67; kSpring@ kSpringDefinition Rtypes.h:67; Note the special role of color kWhite (color number 0). It is the default background color also. For instance in a PDF or PS files (as paper is usually white) it is simply not painted. To have a white color behaving like the other color the simplest is to define an other white color not attached to the color index 0:; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);. Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots.; Two static functions are available that return the bright or dark color number corresponding to a given color index. If these variants don't already exist, they are created as needed: Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; TColor::GetColorBrightstatic Int_t GetColorBright(Int_t color)Static function: Returns the bright color number corresponding to n If the TColor object does not exi...Definition TColor.cxx:2087; TColor::GetColorDarkstatic Int_t GetColorDark(Int_t color)Static function: Returns the dark color number corresponding to n If the TColor object does not exist...Definition TColor.cxx:2130. Accessible Color Schemes; Choosing an appro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:5104,simpl,simplest,5104,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['simpl'],['simplest']
Usability,"e mode-output-value (direct, probabilities) ; Definition at line 682 of file NeuralNet.h. ◆ modeOutputValues() [2/2]. void TMVA::DNN::Layer::modeOutputValues ; (; ModeOutputValues ; eModeOutputValues). inline . set the mode-output-value ; Definition at line 683 of file NeuralNet.h. ◆ numNodes(). size_t TMVA::DNN::Layer::numNodes ; (; ); const. inline . return the number of nodes of this layer ; Definition at line 685 of file NeuralNet.h. ◆ numWeights(). size_t TMVA::DNN::Layer::numWeights ; (; size_t ; numInputNodes); const. inline . return the number of weights for this layer (fully connected) ; Definition at line 686 of file NeuralNet.h. Friends And Related Symbol Documentation. ◆ Net. friend class Net. friend . Definition at line 705 of file NeuralNet.h. Member Data Documentation. ◆ m_activationFunction. std::shared_ptr<std::function<double(double)> > TMVA::DNN::Layer::m_activationFunction. private . stores the activation function ; Definition at line 696 of file NeuralNet.h. ◆ m_activationFunctionType. EnumFunction TMVA::DNN::Layer::m_activationFunctionType. private . Definition at line 703 of file NeuralNet.h. ◆ m_eModeOutputValues. ModeOutputValues TMVA::DNN::Layer::m_eModeOutputValues. private . do the output values of this layer have to be transformed somehow (e.g. to probabilities) or returned as such ; Definition at line 702 of file NeuralNet.h. ◆ m_inverseActivationFunction. std::shared_ptr<std::function<double(double)> > TMVA::DNN::Layer::m_inverseActivationFunction. private . stores the inverse activation function ; Definition at line 697 of file NeuralNet.h. ◆ m_numNodes. size_t TMVA::DNN::Layer::m_numNodes. private . Definition at line 700 of file NeuralNet.h. Libraries for TMVA::DNN::Layer:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/NeuralNet.h; tmva/tmva/src/NeuralNet.cxx. TMVADNNLayer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Layer.html:4958,Guid,Guide,4958,doc/master/classTMVA_1_1DNN_1_1Layer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Layer.html,1,['Guid'],['Guide']
Usability,"e most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3687; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::SortRVec< T > Sort(const RVec< T > &v)Return copy of RVec with elements sorted in ascending order.Definition RVec.hxx:2502. Manipulation of indices; It is also possible to manipulated the RVecs acting on their indices. For example, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:4999,simpl,simply,4999,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['simpl'],['simply']
Usability,"e most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3699; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::SortRVec< T > Sort(const RVec< T > &v)Return copy of RVec with elements sorted in ascending order.Definition RVec.hxx:2502. Manipulation of indices; It is also possible to manipulated the RVecs acting on their indices. For example, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:5000,simpl,simply,5000,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['simpl'],['simply']
Usability,"e name.Definition TTreeReaderValue.cxx:693; TBranchElementA Branch for the case of an object.Definition TBranchElement.h:39; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TDictionaryThis class defines an abstract interface that must be implemented by all classes that contain diction...Definition TDictionary.h:168; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TStringBasic string class.Definition TString.h:139; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderValue::operator->T * operator->()Return a pointer to the value of the current entry.Definition TTreeReaderValue.h:201; TTreeReaderValue::TTreeReaderValueTTreeReaderValue()=delete; TTreeReaderValue::GetT * Get()Return a pointer to the value of the current entry.Definition TTreeReaderValue.h:189; TTreeReaderValue::TTreeReaderValueTTreeReaderValue(TTreeReader &tr, const char *branchname)Definition TTreeReaderValue.h:180; TTreeReaderValue::operator*T & operator*()Return a reference to the value of the current entry.Definition TTreeReaderValue.h:206; TTreeReaderValue::NonConstT_ttypename std::remove_const< T >::type NonConstT_tDefinition TTreeReaderValue.h:178; TTreeReaderValue::GetDerivedTypeNameconst char * GetDerivedTypeName() const overrideGet the template argument as a string.Definition TTreeReaderValue.h:211; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; bool; int; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. treetreeplayerincTTreeReaderValue.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReaderValue_8h_source.html:20255,simpl,simple,20255,doc/master/TTreeReaderValue_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReaderValue_8h_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"e names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt5WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::RQt5WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 252 of file rootqt5.cpp. ◆ ~RQt5WebDisplayHandle(). ROOT::RQt5WebDisplayHandle::~RQt5WebDisplayHandle ; (; ). inlineoverride . Definition at line 254 of file rootqt5.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt5WebDisplayHandle::AddCreator ; (; ). inlinestatic . Definition at line 275 of file rootqt5.cpp. ◆ Resize(). bool ROOT::RQt5WebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlineoverridevirtual . resize web window - if possible ; Reimplemented from ROOT::RWebDisplayHandle.; Definition at line 267 of file rootqt5.cpp. Member Data Documentation. ◆ fView. RootWebView* ROOT::RQt5WebDisplayHandle::fView {nullptr}. protected . pointer on widget, need to release when handle is destroyed ; Definition at line 95 of file rootqt5.cpp. gui/qt5webdisplay/rootqt5.cpp. ROOTRQt5WebDisplayHandle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html:5047,Guid,Guide,5047,doc/master/classROOT_1_1RQt5WebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt5WebDisplayHandle.html,1,['Guid'],['Guide']
Usability,"e names for specified file pattern Depending from supported file forma. ;  . Protected Attributes; RootWebView * fView {nullptr};  pointer on widget, need to release when handle is destroyed ;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RQt6WebDisplayHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::RQt6WebDisplayHandle ; (; const std::string & ; url). inline . Definition at line 215 of file rootqt6.cpp. ◆ ~RQt6WebDisplayHandle(). ROOT::RQt6WebDisplayHandle::~RQt6WebDisplayHandle ; (; ). inlineoverride . Definition at line 217 of file rootqt6.cpp. Member Function Documentation. ◆ AddCreator(). static void ROOT::RQt6WebDisplayHandle::AddCreator ; (; ). inlinestatic . Definition at line 234 of file rootqt6.cpp. ◆ Resize(). bool ROOT::RQt6WebDisplayHandle::Resize ; (; int ; , . int ;  . ). inlineoverridevirtual . resize web window - if possible ; Reimplemented from ROOT::RWebDisplayHandle.; Definition at line 226 of file rootqt6.cpp. Member Data Documentation. ◆ fView. RootWebView* ROOT::RQt6WebDisplayHandle::fView {nullptr}. protected . pointer on widget, need to release when handle is destroyed ; Definition at line 71 of file rootqt6.cpp. gui/qt6webdisplay/rootqt6.cpp. ROOTRQt6WebDisplayHandle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html:5047,Guid,Guide,5047,doc/master/classROOT_1_1RQt6WebDisplayHandle.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RQt6WebDisplayHandle.html,1,['Guid'],['Guide']
Usability,"e normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:2513,clear,clear,2513,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['clear'],['clear']
Usability,"e object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 377 of file TClonesArray.cxx. ◆ ConstructedAt() [2/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx, . Option_t * ; clear_options . ). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, the function Clear will be called and passed the value of 'clear_options'; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 399 of file TClonesArray.cxx. ◆ DeclFileName(). static const char * TClonesArray::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 83 of file TClonesArray.h. ◆ Delete(). void TClonesArray::Delete ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Use this routine when your objects allocate memory (e.g. objects inheriting from TNamed or containing TStrings allocate memory). If not you better use Clear() since if is faster. ; Implements TCollection.; Definition at line 452 of file TClonesArray.cxx. ◆ Expand(). void TClonesArray::Expand ; (; Int_t ; newSize). overridevirtual . Expand or shrink the array to newSize elements. ; Reimplemented from TObjArray.; Definition at line 480 of file TClonesArray.cxx. ◆ ExpandCreate(). void TClonesArray::ExpandCreate ; (; Int_t ; n). virtual . Expand or shrink the array to n ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:35522,Clear,Clear,35522,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"e object id.Definition TObject.cxx:797; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Resizevoid Resize(Ssiz_t n)Resize the string. Truncate or add blanks as necessary.Definition TString.cxx:1152; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::FillBuffervirtual void FillBuffer(char *&buffer) constCopy string into I/O buffer.Definition TString.cxx:1310; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::Sizeofvirtual Int_t Sizeof() constReturns size string will occupy on I/O buffer.Definition TString.cxx:1401; TString::ReadBuffervirtual void ReadBuffer(char *&buffer)Read string from I/O buffer.Definition TString.cxx:1331; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; bool; int; unsigned int; f1TF1 * f1Definition legend1.C:11; ROOT::DirAutoAdd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:119; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; ROOT::RCompressionSetting::EAlgorithm::EValuesEValuesNote: this is only temporarily a struct and will become a enum class hence the name convention used.Definition Compression.h:88. ioiosrcTKey.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:73407,Guid,Guide,73407,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['Guid'],['Guide']
Usability,e of fBuffer; Long64_tTFileCacheRead::fBytesReadNumber of bytes read for this cache; Long64_tTFileCacheRead::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Bool_tTFileCacheRead::fEnablePrefetchingreading by prefetching asynchronously; Bool_tfEnabled! cache enabled for cached reading; Long64_tfEntryCurrent! current lowest entry number in the cache; Long64_tfEntryMax! last entry in the cache; Long64_tfEntryMin! first entry in the cache; Long64_tfEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Int_tfFillTimes! how many times we can fill the current buffer; Bool_tfFirstBuffer! true if first buffer is used for prefetching; Long64_tfFirstEntry! save the value of the first entry; Bool_tfFirstTime! save the fact that we processes the first entry; Bool_tfIsLearning! true if cache is in learning mode; Bool_tfIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; Int_tfNReadMissNumber of blocks read and not found in the chache; Int_tfNReadOkNumber of blocks read and found in the cache; Int_tfNReadPrefNumber of blocks that were prefetched; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tfNbranches! Number of branches in the cache; Long64_tTFileCacheRead::fNoCacheBytesReadNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch! Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:20523,learn,learning,20523,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,2,['learn'],['learning']
Usability,e of instances of classes that are not derived from TObject. The method redirects to TDirectory::WriteObjectAny. ; Reimplemented in TDirectoryFile.; Definition at line 1400 of file TDirectory.cxx. Friends And Related Symbol Documentation. ◆ ROOT::Internal::TDirectoryAtomicAdapter. friend struct ROOT::Internal::TDirectoryAtomicAdapter. friend . Definition at line 169 of file TDirectory.h. ◆ TContext. friend class TContext. friend . Definition at line 168 of file TDirectory.h. Member Data Documentation. ◆ fContext. TContext* TDirectory::fContext {nullptr}. protected . Buffer for GetPath() function. ; Definition at line 145 of file TDirectory.h. ◆ fContextPeg. std::atomic<size_t> TDirectory::fContextPeg {0}. protected . thread local gDirectory pointing to this object. ; Definition at line 153 of file TDirectory.h. ◆ fgAddDirectory. Bool_t TDirectory::fgAddDirectory = kTRUE. staticprotected . MSVC doesn't support = ATOMIC_FLAG_INIT;. ; Definition at line 156 of file TDirectory.h. ◆ fGDirectories. std::vector<SharedGDirectory_t> TDirectory::fGDirectories. protected . Definition at line 151 of file TDirectory.h. ◆ fList. TList* TDirectory::fList {nullptr}. protected . Definition at line 142 of file TDirectory.h. ◆ fMother. TObject* TDirectory::fMother {nullptr}. protected . Definition at line 141 of file TDirectory.h. ◆ fPathBuffer. TString TDirectory::fPathBuffer. mutableprotected . Definition at line 144 of file TDirectory.h. ◆ fSpinLock. std::atomic_flag TDirectory::fSpinLock. mutableprotected . Counter delaying the TDirectory destructor from finishing. ; Definition at line 154 of file TDirectory.h. ◆ fUUID. TUUID TDirectory::fUUID. protected . Definition at line 143 of file TDirectory.h. Libraries for TDirectory:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TDirectory.h; core/base/src/TDirectory.cxx. TDirectory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectory.html:58311,Guid,Guide,58311,doc/master/classTDirectory.html,https://root.cern,https://root.cern/doc/master/classTDirectory.html,1,['Guid'],['Guide']
Usability,"e of the fit. Only in cases where such a modification of fit behaviour is intentional,; this function should be used. RooArgSet* addColumns(const RooArgList& varList); Utility function to add multiple columns in one call; See addColumn() for details. RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge columns of supplied data set(s) with this data set. All; data sets must have equal number of entries. In case of; duplicate columns the column of the last dataset in the list; prevails. void reserve(Int_t nEvt). void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kTRUE); Cache given RooAbsArgs with this tree: The tree is; given direct write access of the args internal cache; the args values is pre-calculated for all data points; in this data collection. Upon a get() call, the; internal cache of 'newVar' will be loaded with the; precalculated value and it's dirty flag will be cleared. void forceCacheUpdate(). void recalculateCache(const RooArgSet* , Int_t firstEvent, Int_t lastEvent, Int_t stepSize, Bool_t skipZeroWeights). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Initialize cache of dataset: attach variables of cache ArgSet; to the corresponding TTree branches. void resetCache(). void setArgStatus(const RooArgSet& set, Bool_t active); Disabling of branches is (intentionally) not implemented in vector; data stores (as the doesn't result in a net saving of time). void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void dump(). void Streamer(TBuffer& ); Stream an object of class RooVectorDataStore. RooAbsDataStore* clone(const char* newname = 0) const; { return new RooVectorDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooVectorDataStore(*this,vars,newname) ; }. Bool_t isWeighted() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooVectorDataStore.html:15983,clear,cleared,15983,root/html534/RooVectorDataStore.html,https://root.cern,https://root.cern/root/html534/RooVectorDataStore.html,3,['clear'],['cleared']
Usability,"e operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used for; clearing TClonesArray. When option ""C"" is specified, ROOT automatically; executes the Clear() method (by default it is empty contained in TObject).; This method must be overridden in the relevant TClonesArray object class,; implementing the reset procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the TClonesArrays; are not destroyed and created on every event.; They must only be constructed/destructed at the beginning/end of the run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClonesArray.html:3162,Clear,Clear,3162,root/html530/TClonesArray.html,https://root.cern,https://root.cern/root/html530/TClonesArray.html,2,['Clear'],['Clear']
Usability,"e operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used for; clearing TClonesArray. When option ""C"" is specified, ROOT automatically; executes the Clear() method (by default it is empty contained in TObject).; This method must be overridden in the relevant TClonesArray object class,; implementing the reset procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the TClonesArrays; are not destroyed and created on every event.; They must only be constructed/destructed at the beginning/end of the run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:3162,Clear,Clear,3162,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['Clear'],['Clear']
Usability,"e ore more container; limits. Suppose we want to position the same box inside 2 different volumes; and we want the Z size to match the one of each container:. TGeoVolume *container1 = gGeoManager->MakeBox(""C1"", imed, 10,10,30);; TGeoVolume *container2 = gGeoManager->MakeBox(""C2"", imed, 10,10,20);; TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"", jmed, 3,3,-1);; container1->AddNode(pvol, 1);; container2->AddNode(pvol, 1);. Note that the third parameter of PVOL is negative, which does not make sense; as half-length on Z. This is interpreted as: when positioned, create a box; replacing all invalid parameters with the corresponding dimensions of the; container. This is also internally handled by the TGeoVolumeMulti class, which; does not need to be instantiated by users. Dividing volumes. Volumes can be divided according a pattern. The most simple division can; be done along one axis, that can be: X, Y, Z, Phi, Rxy or Rxyz. Let's take; the most simple case: we would like to divide a box in N equal slices along X; coordinate, representing a new volume family. Supposing we already have created; the initial box, this can be done like:. TGeoVolume *slicex = box->Divide(""SLICEX"", 1, N);. where SLICE is the name of the new family representing all slices and 1 is the; slicing axis. The meaning of the axis index is the following: for all volumes; having shapes like box, trd1, trd2, trap, gtra or para - 1,2,3 means X,Y,Z; for; tube, tubs, cone, cons - 1 means Rxy, 2 means phi and 3 means Z; for pcon and; pgon - 2 means phi and 3 means Z; for spheres 1 means R and 2 means phi.; In fact, the division operation has the same effect as positioning volumes; in a given order inside the divided container - the advantage being that the; navigation in such a structure is much faster. When a volume is divided, a; volume family corresponding to the slices is created. In case all slices can; be represented by a single shape, only one volume is added to the family and; positioned N times inside",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:13135,simpl,simple,13135,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,9,['simpl'],['simple']
Usability,"e pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Float_tTAttPad::fTopMarginTopMargin; Float_tTAttPad::fXfileX position where to draw the file name; Float_tTAttPad::fXstatX position where to draw the statistics; Float_tTAttPad::fYfileX position where to draw the file name; Float_tTAttPad::fYstatX position where to draw the statistics; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualPad *& Pad(); Return the current pad for the current thread. ~TVirtualPad(); VirtualPad destructor. void Streamer(TBuffer& b); Stream an object of class TVirtualPad. void * GetSender(); { return this; }. void AbsCoordinates(Bool_t set). Double_t AbsPixeltoX(Int_t px). Double_t AbsPixeltoY(Int_t py). void AddExec(const char* name, const char* command). TVirtualPad* cd(Int_t subpadnumber = 0). void Clear(Option_t* option = """"). void Close(Option_t* option = """"). void CopyPixmap(). void CopyPixmaps(). void DeleteExec(const char* name). void Divide(Int_t nx = 1, Int_t ny = 1, Float_t xmargin = 0.01, Float_t ymargin = 0.01, Int_t color = 0). void Draw(Option_t* option = """"). void DrawClassObject(const TObject* obj, Option_t* option = """"). TH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char* title = """"). void ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis). Short_t GetBorderMode() const. Short_t GetBorderSize() const. Int_t GetCanvasID() const. TCanvasImp * GetCanvasImp() const. TCanvas * GetCanvas() const. TVirtualPad * GetVirtCanvas() const. Int_t GetEvent() const. Int_t GetEventX() const. Int_t GetEventY() const. TFrame * GetFrame(). Color_t GetHighLightColor() const. Int_t GetNumber() const. void GetRange(Double_t& x1, Double_t& y1, Double_t& x2, Double_t& y2). void GetRangeAxis(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualPad.html:21065,Clear,Clear,21065,root/html528/TVirtualPad.html,https://root.cern,https://root.cern/root/html528/TVirtualPad.html,1,['Clear'],['Clear']
Usability,"e pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Float_tTAttPad::fTopMarginTopMargin; Float_tTAttPad::fXfileX position where to draw the file name; Float_tTAttPad::fXstatX position where to draw the statistics; Float_tTAttPad::fYfileY position where to draw the file name; Float_tTAttPad::fYstatY position where to draw the statistics; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualPad *& Pad(); Return the current pad for the current thread. ~TVirtualPad(); VirtualPad destructor. void Streamer(TBuffer& b); Stream an object of class TVirtualPad. void * GetSender(); { return this; }. void AbsCoordinates(Bool_t set). Double_t AbsPixeltoX(Int_t px). Double_t AbsPixeltoY(Int_t py). void AddExec(const char* name, const char* command). TVirtualPad* cd(Int_t subpadnumber = 0). void Clear(Option_t* option = """"). void Close(Option_t* option = """"). void CopyPixmap(). void CopyPixmaps(). void DeleteExec(const char* name). void Divide(Int_t nx = 1, Int_t ny = 1, Float_t xmargin = 0.01, Float_t ymargin = 0.01, Int_t color = 0). void Draw(Option_t* option = """"). void DrawClassObject(const TObject* obj, Option_t* option = """"). TH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char* title = """"). void ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis). Short_t GetBorderMode() const. Short_t GetBorderSize() const. Int_t GetCanvasID() const. TCanvasImp * GetCanvasImp() const. TCanvas * GetCanvas() const. TVirtualPad * GetVirtCanvas() const. Int_t GetEvent() const. Int_t GetEventX() const. Int_t GetEventY() const. TFrame * GetFrame(). Color_t GetHighLightColor() const. Int_t GetNumber() const. void GetRange(Double_t& x1, Double_t& y1, Double_t& x2, Double_t& y2). void GetRangeAxis(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualPad.html:21134,Clear,Clear,21134,root/html530/TVirtualPad.html,https://root.cern,https://root.cern/root/html530/TVirtualPad.html,1,['Clear'],['Clear']
Usability,"e parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit machine. The cycle is only ~10**9, so use with care! Note especially that VAL must not be undefined on input.; Set Default Starting Seed ; Definition at line 6619 of file TMinuit.cxx. ◆ mnrset(). void TMinuit::mnrset ; (; Int_t ; iopt). virtual . Resets function value and errors to UNDEFINED. . If IOPT=1,; If IOPT=0, sets only MINOS errors to undefined Called from MNCLER and whenever problem changes, for example after SET LIMITS, SET PARAM, CALL FCN 6 . Definition at line 6661 of file TMinuit.cxx. ◆ mnsave(). void TMinuit::mnsave ; (; ). virtual . Writes current parameter values and step sizes onto file ISYSSA. ; in format which can be reread by Minuit for restarting. The covariance matrix is also output if it exists.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:61971,simpl,simplex,61971,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['simpl'],['simplex']
Usability,"e paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveIncludePath(const char* incpath, Bool_t onClient = kFALSE); Remove 'incpath' from the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. void HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Handle lib, inc search paths modification request. TList * GetListOfPackages(); Get from the master the list of names of the packages available. TList * GetListOfEnabledPackages(); Get from the master the list of names of the packages enabled. void PrintProgress(Long64_t total, Long64_t processed, Float_t procTime = -1., Long64_t bytesread = -1); Print a progress bar on stderr. Used in batch mode. void Progress(Long64_t total, Long64_t processed); Get query progress information. Connect a slot to this signal; to track progress. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Get query progress information. Connect a slot to this signal; to track progress. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Get query progress information. Connect a slot to this signal; to track progress. void Feedback(TList* objs); Get list of feedback objects. Connect a slot to this signal; to monitor the feedback object. void CloseProgressDialog(); Close progress dialog. void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset progress dialog. void StartupMessage(const char* msg, Bool_t status, Int_t done,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:69784,progress bar,progress bar,69784,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['progress bar'],['progress bar']
Usability,"e population to the predefined size ; Definition at line 299 of file GeneticPopulation.cxx. ◆ VariableDistribution() [1/2]. vector< Double_t > TMVA::GeneticPopulation::VariableDistribution ; (; Int_t ; varNumber). gives back all the values of coefficient ""varNumber"" of the current generation ; Definition at line 268 of file GeneticPopulation.cxx. ◆ VariableDistribution() [2/2]. TH1F * TMVA::GeneticPopulation::VariableDistribution ; (; Int_t ; varNumber, . Int_t ; bins, . Int_t ; min, . Int_t ; max . ). give back a histogram with the distribution of the coefficients. ; Parameters:. int bins : number of bins of the histogram; int min : histogram minimum; int max : maximum value of the histogram . Definition at line 251 of file GeneticPopulation.cxx. Member Data Documentation. ◆ fGenePool. std::vector<TMVA::GeneticGenes> TMVA::GeneticPopulation::fGenePool. private . the ""genePool"" where the individuals of the current generation are stored ; Definition at line 94 of file GeneticPopulation.h. ◆ fLogger. MsgLogger* TMVA::GeneticPopulation::fLogger. mutableprivate . ! message logger ; Definition at line 99 of file GeneticPopulation.h. ◆ fPopulationSizeLimit. Int_t TMVA::GeneticPopulation::fPopulationSizeLimit. private . Definition at line 102 of file GeneticPopulation.h. ◆ fRandomGenerator. TRandom3* TMVA::GeneticPopulation::fRandomGenerator. private . random Generator for this population ; Definition at line 97 of file GeneticPopulation.h. ◆ fRanges. std::vector<TMVA::GeneticRange*> TMVA::GeneticPopulation::fRanges. private . contains the ranges in between the values of the coefficients have to be ; Definition at line 95 of file GeneticPopulation.h. Libraries for TMVA::GeneticPopulation:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/GeneticPopulation.h; tmva/tmva/src/GeneticPopulation.cxx. TMVAGeneticPopulation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:12455,Guid,Guide,12455,doc/master/classTMVA_1_1GeneticPopulation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html,1,['Guid'],['Guide']
Usability,"e problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a interpolation, rahter then a extrapolation; [5].; ; Also, the independent variables need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables to a set of linear independent variables; , using a Principal Components Analysis; (see TPrincipal), and; then use the transformed variable as input to this class [5]; [6].; ; H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):; . Define ; are the 5 dependent; quantities that define a track.; ; Compute, for different values of ; , the tracks; through the magnetic field, and determine the corresponding; ; .; ; Use the simulated observations to determine, with a simple; approximation, the values of ; . We call these values; ; .; ; Determine from ; a set of at least five relevant; coordinates ; , using contrains, or; alternative:. Perform a Principal Component Analysis (using; TPrincipal), and use; to get a linear transformation; ; , so that; ; are constrained and linear independent.; ; Perform a Principal Component Analysis on; ; , to get linear; indenpendent (among themselves, but not independent of; ; ) quantities . For each component ; make a mutlidimensional fit,; using ; as the variables, thus determing a set of; coefficents ; .; . To process data, using this parameterisation, do; ; Test wether the observation ; within the domain of; the parameterization, using the result from the Principal Component; Analysis.; ; Determine ; as before.; ; Detetmine ; as before.; ; Use the result of the fit to determind ; .; ; Transform back to ; from ; , using; the result from the Principal Component Analysis.; . Testing the parameterization; . T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:10875,simpl,simple,10875,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['simpl'],['simple']
Usability,"e recorder. ;  ;  TRecorder (const char *filename, Option_t *option=""READ"");  Creates a recorder with filename to replay or to record, depending on option (NEW or RECREATE will start recording, READ will start replaying) ;  ;  ~TRecorder () override;  Destructor. ;  ; void Browse (TBrowser *) override;  Browse the recorder from a ROOT file. ;  ; virtual TRecorder::ERecorderState GetState () const;  Get current state of recorder. ;  ; TClass * IsA () const override;  ; void ListCmd (const char *filename);  Prints out recorded commandline events. ;  ; void ListGui (const char *filename);  Prints out recorded GUI events. ;  ; void Pause ();  Pauses replaying. ;  ; void PrevCanvases (const char *filename, Option_t *option);  Save previous canvases in a .root file. ;  ; void Replay ();  ; Bool_t Replay (const char *filename, Bool_t showMouseCursor=kTRUE, TRecorder::EReplayModes mode=kRealtime);  Replays events from 'filename'. ;  ; void ReplayStop ();  Cancels replaying. ;  ; void Resume ();  Resumes replaying. ;  ; void Start (const char *filename, Option_t *option=""RECREATE"", Window_t *w=nullptr, Int_t winCount=0);  Starts recording events. ;  ; void Stop (Bool_t guiCommand=kFALSE);  Stopps recording events. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:4089,Resume,Resume,4089,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,2,['Resume'],"['Resume', 'Resumes']"
Usability,"e registered; to the analysis manager but have to be cleaned-up by the user via ClearTracks(). Int_t AddTrack(TVirtualGeoTrack* track); Add a track to the list of tracks. TVirtualGeoTrack * MakeTrack(Int_t id, Int_t pdgcode, TObject* particle); Makes a primary track but do not attach it to the list of tracks. The track; can be attached as daughter to another one with TVirtualGeoTrack::AddTrack. Int_t AddVolume(TGeoVolume* volume); Add a volume to the list. Returns index of the volume in list. TGeoNavigator * AddNavigator(); Add a navigator in the list of navigators. If it is the first one make it; current navigator. TGeoNavigator * GetCurrentNavigator() const; Returns current navigator for the calling thread. TGeoNavigatorArray * GetListOfNavigators() const; Get list of navigators for the calling thread. Bool_t SetCurrentNavigator(Int_t index); Switch to another existing navigator for the calling thread. void ClearNavigators(); Clear all navigators. void RemoveNavigator(const TGeoNavigator* nav); Clear a single navigator. void ClearThreadsMap(); Clear the current map of threads. This will be filled again by the calling; threads via ThreadId calls. Int_t ThreadId(); Translates the current thread id to an ordinal number. This can be used to; manage data which is pspecific for a given thread. void Browse(TBrowser* b); Describe how to browse this object. void Edit(Option_t* option = """"); Append a pad for this geometry. void SetVisibility(TObject* obj, Bool_t vis); Set visibility for a volume. void BombTranslation(const Double_t* tr, Double_t* bombtr); Get the new 'bombed' translation vector according current exploded view mode. void UnbombTranslation(const Double_t* tr, Double_t* bombtr); Get the new 'unbombed' translation vector according current exploded view mode. void DoBackupState(); Backup the current state without affecting the cache stack. void DoRestoreState(); Restore a backed-up state without affecting the cache stack. void RegisterMatrix(const TGeoMatrix* ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:38237,Clear,Clear,38237,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,1,['Clear'],['Clear']
Usability,"e remote object. ;  ; const char * GetClassName () const;  ; Bool_t GetFileStat (FileStat_t *sbuf);  Get remote file status. ;  ; const char * GetKeyClassName () const;  ; const char * GetKeyObjectName () const;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void SetFolder (Bool_t isFolder);  ; void SetKeyClassName (const char *name);  ; void SetKeyObjectName (const char *name);  ; void SetRemoteAddress (Longptr_t addr);  ; void Streamer (TBuffer &) override;  Remote object streamer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRemoteObject.html:2036,Clear,Clear,2036,doc/master/classTRemoteObject.html,https://root.cern,https://root.cern/doc/master/classTRemoteObject.html,1,['Clear'],['Clear']
Usability,"e replacement of a using declaration. ; Definition at line 153 of file THn.h. ◆ Rebin() [1/2]. THn * THn::Rebin ; (; const Int_t * ; group); const. inline . Definition at line 173 of file THn.h. ◆ Rebin() [2/2]. THn * THn::Rebin ; (; Int_t ; group); const. inline . Definition at line 170 of file THn.h. ◆ Reset(). void THn::Reset ; (; Option_t * ; option = """"). overridevirtual . Reset the contents of a THn. ; Implements THnBase.; Definition at line 250 of file THn.cxx. ◆ SetBinContent() [1/2]. void THn::SetBinContent ; (; const Int_t * ; idx, . Double_t ; v . ). inline . Forwards to THnBase::SetBinContent(). ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 97 of file THn.h. ◆ SetBinContent() [2/2]. void THn::SetBinContent ; (; Long64_t ; bin, . Double_t ; v . ). inlineoverridevirtual . Implements THnBase.; Definition at line 100 of file THn.h. ◆ SetBinError2(). void THn::SetBinError2 ; (; Long64_t ; bin, . Double_t ; e2 . ). inlineoverridevirtual . Implements THnBase.; Definition at line 103 of file THn.h. ◆ Streamer(). void THn::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in THnT< T >. ◆ StreamerNVirtual(). void THn::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 183 of file THn.h. ◆ Sumw2(). void THn::Sumw2 ; (; ). overridevirtual . Enable calculation of errors. ; Implements THnBase.; Definition at line 216 of file THn.cxx. Member Data Documentation. ◆ fCoordBuf. std::vector<Int_t> THn::fCoordBuf. mutableprotected . Definition at line 181 of file THn.h. ◆ fSumw2. TNDArrayT<Double_t> THn::fSumw2. protected . Definition at line 180 of file THn.h. Libraries for THn:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THn.h; hist/hist/src/THn.cxx. THn. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:33131,Guid,Guide,33131,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['Guid'],['Guide']
Usability,"e results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. To produce the varied results, RDataFrame will automatically execute the Filter and Define calls for each variation and fill the histogram with values and cuts that depend on the variation.; There is no limitation to the complexity of a Vary() expression. Just like for the Define() and Filter() calls, users are not limited to string expressions but they can also pass any valid C++ callable, including lambda functions and complex functors. The callable can be applied to zero or more existing columns and it will always receive their nominal value in input.; Varying multiple columns in lockstep; In the following Python snippet we use the Vary() signature that allows varying multiple columns simultaneously or ""in lockstep"":; df.Vary([""pt"", ""eta""],; ""RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}"",; variationTags=[""down"", ""up""],; variationName=""ptAndEta""); The expression returns an RVec of two RVecs: each inner vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:54857,simpl,simply,54857,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simply']
Usability,"e retrieved as string by any function that triggers the `__str__`; # special method of the object, e.g., `str` or `format`.; print(str(obj)); print(""{}"".format(obj)); ; # Note that the interactive Python prompt does not call `__str__`, it calls; # `__repr__`, which implements a formal and unique string representation of; # the object.; print(repr(obj)); obj; ; # The print output behaves similar to the ROOT prompt, e.g., here for a ROOT histogram.; hist = ROOT.TH1F(""name"", ""title"", 10, 0, 1); print(hist); ; # If cling cannot produce any nice representation for the class, we fall back to a; # ""<ClassName at address>"" format, which is what `__repr__` returns; ROOT.gInterpreter.Declare('class MyClass {};'); m = ROOT.MyClass(); print(m); print(str(m) == repr(m)); ; formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; { 0, 1, 2 }; { 0, 1, 2 }; { 0, 1, 2 }; vector<int>{ 0, 1, 2 }; Name: name Title: title NbinsX: 10; <cppyy.gbl.MyClass object at 0x8a637a0>; True; DateJune 2018 ; AuthorStefan Wunsch, Enric Tejedor ; Definition in file pyroot003_prettyPrinting.py. tutorialspyrootpyroot003_prettyPrinting.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot003__prettyPrinting_8py.html:2734,Guid,Guide,2734,doc/master/pyroot003__prettyPrinting_8py.html,https://root.cern,https://root.cern/doc/master/pyroot003__prettyPrinting_8py.html,1,['Guid'],['Guide']
Usability,"e same Postscript file: case 1; The following macro is an example illustrating how to open a Postscript; file and draw several pictures. The generation of a new Postscript page; is automatic when TCanvas::Clear is called by; object->Draw().; ; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);; // select postscript output type; // type = 111 portrait ps; // type = 112 landscape ps; // type = 113 eps; Int_t type = 111;; // create a postscript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page; // draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a macro; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }; ; Making several pictures in the same Postscript file: case 2; This example shows 2 pages. The canvas is divided.; TPostScript::NewPage must be called before starting a new; picture.object->Draw does not clear the canvas in this case; because we clear only the pads and not the main canvas.; Note that c1->Update must be called at the end of the first; picture.; ; {; TFile *f1 = new TFile(""hsimple.root"");; TCanvas *c1 = new TCanvas(""c1"");; TPostScript *ps = new TPostScript(""file.ps"",112);; c1->Divide(2,1);; // picture 1; ps->NewPage();; c1->cd(1);; hpx->Draw();; c1->cd(2);; hprof->Draw();; c1->Update();; // picture 2; ps->NewPage();; c1->cd(1);; hpxpy->Draw();; c1->cd(2);; ntuple->Draw(""px"");; c1->Update();; ps->Close();; // invoke Postscript viewer; gSystem->Exec(""gs file.ps"");; }; ; Making several pictures in the same Postscript file: case 3; This is the recommended way. If the Postscript file name finishes with; ""("", the file remains opened (it is not closed). If the Postscript file name; finishes with "")"" and the file has been opened with ""("", the file is closed.; Example:; ; {; TCanvas c1(""c1"");; h1.Draw();; c1.Print(""c1.ps(""); // write canvas and keep the ps file open; h2.Draw();; c1.Print(""c1.ps""); // canvas is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPostScript.html:4517,clear,clear,4517,root/html534/TPostScript.html,https://root.cern,https://root.cern/root/html534/TPostScript.html,6,['clear'],['clear']
Usability,"e same fMaxLevel. ;  ; void UpdateNavigator (TGeoNavigator *nav) const;  Update the navigator to reflect the branch. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBranchArray.html:4988,Clear,Clear,4988,doc/master/classTGeoBranchArray.html,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html,1,['Clear'],['Clear']
Usability,"e same library or in two libraries loaded by the same application if the original source files have the same name. This loose limitation is imposed by the registration mechanism ROOT has in place to keep track of dynamically loaded libraries.; In the following example, we walk through the steps necessary to generate a dictionary, I/O, and inspect member functions. Let’s start with a TEvent class, which contains a collection of TTracks.; The TEvent.h header is:; #ifndef __TEvent__; #define __TEvent__; #include ""TObject.h""; #include ""TCollection.h"". class TTrack;. class TEvent : public TObject {; private:; Int_t fId; // event sequential id; Float_t fTotalMom; // total momentum; TCollection *fTracks; // collection of tracks; public:; TEvent() { fId = 0; fTotalMom = 0; fTracks = nullptr; }; TEvent(Int_t id);; ~TEvent();; void AddTrack(TTrack *t);; Int_t GetId() const { return fId; }; Int_t GetNoTracks() const;; void Print(Option_t *opt="""");; Float_t TotalMomentum();. ClassDef(TEvent,1); //Simple event class; };. #endif; The things to notice in these header files are:. The usage of the ClassDef macro; The default constructors of the TEvent and TTrack classes; Comments to describe the data members and the comment after the ClassDef macro to describe the class. These classes are intended for you to create an event object with a certain id, and then add tracks to it. The track objects have a pointer to their event. This shows that the I/O system correctly handles circular references.; The TTrack.h header is:; #ifndef __TTrack__; #define __TTrack__; #include ""TObject.h"". class TEvent;. class TTrack : public TObject {; private:; Int_t fId; //track sequential id; TEvent *fEvent; //event to which track belongs; Float_t fPx; //x part of track momentum; Float_t fPy; //y part of track momentum; Float_t fPz; //z part of track momentum; public:; TTrack() { fId = 0; fEvent = nullptr; fPx = fPy = fPz = 0; }; TTrack(Int_t id, TEvent *ev, Float_t px,Float_t py,Float_t pz);; Float_t Mome",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:818719,Simpl,Simple,818719,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"e second argument s indicates an approximate number of objects that will be entered in the array. If more than s objects are entered, the array will be automatically expanded.; NB: This function should not be called in the TClonesArray is already initialized with a class. ; Definition at line 665 of file TClonesArray.cxx. ◆ SetOwner(). void TClonesArray::SetOwner ; (; Bool_t ; enable = kTRUE). overridevirtual . A TClonesArray is always the owner of the object it contains. ; However the collection its inherits from (TObjArray) does not. Hence this member function needs to be a nop for TClonesArray. ; Reimplemented from TCollection.; Definition at line 713 of file TClonesArray.cxx. ◆ Sort(). void TClonesArray::Sort ; (; Int_t ; upto = kMaxInt). overridevirtual . If objects in array are sortable (i.e. ; IsSortable() returns true for all objects) then sort array. ; Reimplemented from TObjArray.; Definition at line 722 of file TClonesArray.cxx. ◆ Streamer(). void TClonesArray::Streamer ; (; TBuffer & ; b). overridevirtual . Write all objects in array to the I/O buffer. ; ATTENTION: empty slots are also stored (using one byte per slot). If you don't want this use a TOrdCollection or TList. ; Reimplemented from TObject.; Definition at line 745 of file TClonesArray.cxx. ◆ StreamerNVirtual(). void TClonesArray::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 83 of file TClonesArray.h. Member Data Documentation. ◆ fClass. TClass* TClonesArray::fClass. protected . Definition at line 32 of file TClonesArray.h. ◆ fKeep. TObjArray* TClonesArray::fKeep. protected . Pointer to the class of the elements. ; Definition at line 33 of file TClonesArray.h. Libraries for TClonesArray:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TClonesArray.h; core/cont/src/TClonesArray.cxx. TClonesArray. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:42249,Guid,Guide,42249,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Guid'],['Guide']
Usability,"e separate classes called iterator. For each collection class there is an associated iterator class that knows how to sequentially retrieve each member in turn. The relationship between a collection and its iterator is very close and may require that the iterator has full access to the collection (i.e. it is a friend class). In general iterator will be used via the TIter wrapper class. For example:. TList TListIter; TMap TMapIter. 16.3 Foundation Classes; All collections are based on the fundamental classes: TCollection and TIterator. They are so generic that it is not possible to create objects from them; they are only used as base classes for other classes (i.e. they are abstract base classes).; The TCollection class provides the basic protocol (i.e. the minimum set of member functions) that all collection classes have to implement. These include:. Add Adds another object to the collection.; GetSize Returns the number of objects in the collection.; Clear Clears out the collection, but does not delete the removed objects.; Delete Clears out the collection and deletes the removed objects. This should only be used if the collection owns its objects (which are not normally the case).; FindObject Finds an object given either its name or address.; MakeIterator Returns an iterator associated with the collection.; Remove Removes an object from the collection. The code example below shows a class containing three lists, where the fTracks list is the owning collection and the other two lists are used to store a sub-set of the track objects. In the destructor of the class, the method Delete is called for the owning collection to delete correctly its entire track objects. To delete the objects in the container use fTrack->Delete(). To delete the container itself, do ’delete fTracks'.; class TEvent : public TObject {; private:; TList *fTracks; //list of all tracks; TList *fVertex1; //subset of tracks part of vertex1; TList *fVertex2; //subset of tracks part of vertex2; };; TEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:845413,Clear,Clear,845413,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Clear'],"['Clear', 'Clears']"
Usability,"e set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|16|16"" [The Layout of the input]; : Layout: ""CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:6704,Learn,LearningRate,6704,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"e spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default constructor.Definition TSpider.cxx:76; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; c1return c1Definition legend1.C:41. Definition at line 40 of file TSpider.h. Public Member Functions;  TSpider ();  Default constructor. ;  ;  TSpider (TTree *tree, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=0, Long64_t firstentry=0);  Normal constructor. ;  ;  ~TSpider () override;  Destructor. ;  ; void AddSuperposed (TSpider *sp);  Allow to superpose several spider views. ;  ; void AddVariable (const char *varexp);  Add a variable to the plot from its expression. ;  ; void DeleteVariable (const char *varexp);  Delete a variable from its expression. ;  ; Int_t D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpider.html:1741,simpl,simple,1741,doc/master/classTSpider.html,https://root.cern,https://root.cern/doc/master/classTSpider.html,1,['simpl'],['simple']
Usability,"e step)=0set a new free variable; ROOT::Math::Minimizer::FixVariablevirtual bool FixVariable(unsigned int ivar)fix an existing variableDefinition Minimizer.cxx:87; ROOT::Math::Minimizer::SetFixedVariablevirtual bool SetFixedVariable(unsigned int ivar, const std::string &name, double val)set a new fixed variable (override if minimizer supports them )Definition Minimizer.cxx:44; ROOT::Math::Minimizer::GetMinosErrorvirtual bool GetMinosError(unsigned int ivar, double &errLow, double &errUp, int option=0)minos error for variable i, return false if Minos failed or not supported and the lower and upper err...Definition Minimizer.cxx:172; ROOT::Math::Minimizer::SetVariableLowerLimitvirtual bool SetVariableLowerLimit(unsigned int ivar, double lower)set the lower-limit of an already existing variableDefinition Minimizer.cxx:70; ROOT::Math::Minimizer::IsFixedVariablevirtual bool IsFixedVariable(unsigned int ivar) constquery if an existing variable is fixed (i.e.Definition Minimizer.cxx:102; ROOT::Math::Minimizer::ReleaseVariablevirtual bool ReleaseVariable(unsigned int ivar)release an existing variableDefinition Minimizer.cxx:94; ROOT::Math::Minimizer::Hessevirtual bool Hesse()perform a full calculation of the Hessian matrix for error calculationDefinition Minimizer.cxx:185; ROOT::Math::Minimizer::Contourvirtual bool Contour(unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj)find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The c...Definition Minimizer.cxx:211; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcMinimizer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:14331,Guid,Guide,14331,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,1,['Guid'],['Guide']
Usability,"e text alignment. ; Reimplemented from TAttText.; Definition at line 668 of file TGQuartz.mm. ◆ SetTextColor(). void TGQuartz::SetTextColor ; (; Color_t ; tcolor). overridevirtual . Set the text color. ; Reimplemented from TAttText.; Definition at line 679 of file TGQuartz.mm. ◆ SetTextFont() [1/2]. Int_t TGQuartz::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Sets text font to specified name ""fontname"".This function returns 0 if the specified font is found, 1 if it is not. ; Parameters. [in]fontnamefont name ; [in]modeloading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad) . Reimplemented from TVirtualX.; Definition at line 703 of file TGQuartz.mm. ◆ SetTextFont() [2/2]. void TGQuartz::SetTextFont ; (; Font_t ; tfont). overridevirtual . Set the text font. ; Reimplemented from TAttText.; Definition at line 688 of file TGQuartz.mm. ◆ SetTextSize(). void TGQuartz::SetTextSize ; (; Float_t ; tsize). overridevirtual . Set the text size. ; Reimplemented from TAttText.; Definition at line 716 of file TGQuartz.mm. ◆ Streamer(). void TGQuartz::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCocoa. ◆ StreamerNVirtual(). void TGQuartz::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 108 of file TGQuartz.h. Member Data Documentation. ◆ fAlign. FT_Vector TGQuartz::fAlign. private . Definition at line 33 of file TGQuartz.h. ◆ fConvertedPoints. std::vector<TPoint> TGQuartz::fConvertedPoints. private . Definition at line 85 of file TGQuartz.h. ◆ fUseAA. bool TGQuartz::fUseAA. private . Definition at line 93 of file TGQuartz.h. ◆ fUseFAAA. bool TGQuartz::fUseFAAA. private . Definition at line 94 of file TGQuartz.h. graf2d/cocoa/inc/TGQuartz.h; graf2d/cocoa/src/TGQuartz.mm. TGQuartz. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGQuartz.html:65183,Guid,Guide,65183,doc/master/classTGQuartz.html,https://root.cern,https://root.cern/doc/master/classTGQuartz.html,1,['Guid'],['Guide']
Usability,"e the allocated memory, the recovered space may not be efficiently reused. The process knows that there are portions of free memory, but when you allocate it again, a fresh piece of memory is grabbed. Your program is free from semantic errors, but the total memory of your process still grows, because your program's memory is full of ""holes"" which reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in terms of CPU time.; Without entering into technical details, TClonesArray allows you to ""reuse"" the same portion of memory for new/delete avoiding memory fragmentation and memory growth and improving the performance by orders of magnitude. Every time the memory of the TClonesArray has to be reused, the Clear() method is used. To provide its benefits, each TClonesArray must be allocated once per process and disposed of (deleted) only when not needed any more.; So a job should see only one deletion for each TClonesArray, which should be Clear()ed during the job several times. Deleting a TClonesArray is a double waste. Not only you do not avoid memory fragmentation, but you worsen it because the TClonesArray itself is a rather heavy structure, and there is quite some code in the destructor, so you have more memory fragmentation and slower code. NOTE 2; When investigating misuse of TClonesArray, please make sure of the following:. Use Clear() or Clear(""C"") instead of Delete(). This will improve program execution time.; TClonesArray object classes containing pointers allocate memory. To avoid causing memory leaks, special Clear(""C"") must be used for clearing TClonesArray. When option ""C"" is specified, ROOT automatically executes the Clear() method (by default it is empty contained in TObject). This method must be overridden in the relevant TClonesArray object class, implementing the reset procedure for pointer objects.; If the objects are added using the placement new then the Clear must deallocate th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:3608,Clear,Clear,3608,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,e the bin volume; 629 const double* xlow = Coords( fNPoints-1 );; 630 ; 631 double binVolume = 1.0;; 632 for ( unsigned int j = 0; j < fDim; j++ ); 633 {; 634 binVolume *= ( xup[j] - xlow[j] );; 635 }; 636 ; 637 // store the minimum bin volume found as reference for future normalizations; 638 if ( fNPoints == 1 ); 639 fRefVolume = binVolume;; 640 else if ( binVolume < fRefVolume ); 641 fRefVolume = binVolume;; 642 }; 643 ; 644 ; 645 void BinData::InitDataVector (); 646 {; 647 fData.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 648 fDataPtr = fData.empty() ? nullptr : &fData.front();; 649 }; 650 ; 651 void BinData::InitializeErrors(); 652 {; 653 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 654 kAsymError == fErrorType || kNoError == fErrorType );; 655 ; 656 if ( fpTmpCoordErrorVector ); 657 {; 658 delete[] fpTmpCoordErrorVector;; 659 fpTmpCoordErrorVector = nullptr;; 660 }; 661 ; 662 if ( kNoError == fErrorType ); 663 {; 664 fCoordErrors.clear();; 665 fCoordErrorsPtr.clear();; 666 ; 667 fDataErrorHigh.clear();; 668 fDataErrorHighPtr = nullptr;; 669 ; 670 fDataErrorLow.clear();; 671 fDataErrorLowPtr = nullptr;; 672 ; 673 fDataError.clear();; 674 fDataErrorPtr = nullptr;; 675 ; 676 return;; 677 }; 678 ; 679 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 680 {; 681 fCoordErrorsPtr.resize( fDim );; 682 fCoordErrors.resize( fDim );; 683 for( unsigned int i=0; i < fDim; i++ ); 684 {; 685 fCoordErrors[i].resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 686 ; 687 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 688 }; 689 ; 690 fpTmpCoordErrorVector = new double[fDim];; 691 }; 692 else; 693 {; 694 fCoordErrors.clear();; 695 fCoordErrorsPtr.clear();; 696 }; 697 ; 698 if ( kValueError == fErrorType || kCoordError == fErrorType ); 699 {; 700 fDataError.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 701 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 702 ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:20431,clear,clear,20431,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"e the container constructor. void * NewArray(Int_t nElements) const; Return a new container object. void * NewArray(Int_t nElements, void* arena) const; Execute the container constructor. void Destructor(void* p, Bool_t dtorOnly = kFALSE); Execute the container destructor. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE); Execute the container array destructor. UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objectstart); Set the address of the container being proxied and keep track of the previous one. void PopProxy(); Reset the address of the container being proxied to the previous container. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass(); Return a pointer to the TClass representing the content. EDataType GetType(); If the content is a simple numerical value, return its type (see TDataType). void * At(UInt_t idx); Return the address of the value at index 'idx'. void Clear(const char* opt = """"); Clear the container. UInt_t Size() const; Return the current size of the container. void* Allocate(UInt_t n, Bool_t forceDelete). void Commit(void* ). char * operator[](UInt_t idx) const; { return (char*)(const_cast<TVirtualCollectionProxy*>(this))->At(idx); }. TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); MemberWise actions. TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version). TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(). CreateIterators_t GetFunctionCreateIterators(Bool_t read = kTRUE); begin_arena and end_arena should contain the location of a memory arena of size fgIteratorSize.; If the collection iterator are of that size or less, the iterators will be constructed in place in those location (new with placement); Otherwise the iterators will be allocated via a regular new and their address returned by modifying the value of begin_arena and end_arena. CopyIterator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualCollectionProxy.html:4513,Clear,Clear,4513,root/html528/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TVirtualCollectionProxy.html,6,['Clear'],['Clear']
Usability,"e the current camera - though you will not see; the effect if it is not. 'camera' defines the persp camera - one of kCameraPerspXOZ, kCameraPerspYOZ, kCameraPerspXOY; 'fov' - field of view (lens angle) in degrees (clamped to 0.1 - 170.0); 'dolly' - distance from 'center'; 'center' - world position from which dolly/hRotate/vRotate are measured; camera rotates round this, always facing in (in center of viewport); 'hRotate' - horizontal rotation from initial configuration in degrees; 'hRotate' - vertical rotation from initial configuration in degrees. TGLAutoRotator* GetAutoRotator(); Get the auto-rotator for this viewer. void SetAutoRotator(TGLAutoRotator* ar); Set the auto-rotator for this viewer. The old rotator is deleted. void GetGuideState(Int_t& axesType, Bool_t& axesDepthTest, Bool_t& referenceOn, Double_t* referencePos) const; Fetch the state of guides (axes & reference markers) into arguments. void SetGuideState(Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t* referencePos); Set the state of guides (axes & reference markers) from arguments. void SetDrawCameraCenter(Bool_t x); Draw camera look at and rotation point. const TGLPhysicalShape * GetSelected() const; Return selected physical shape. void MouseOver(TGLPhysicalShape* ); Emit MouseOver signal. void MouseOver(TGLPhysicalShape* , UInt_t state); Emit MouseOver signal. void MouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void ReMouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void UnMouseOver(TObject* obj, UInt_t state); Emit UnMouseOver signal. void Clicked(TObject* obj); Emit Clicked signal. void Clicked(TObject* obj, UInt_t button, UInt_t state); Emit Clicked signal with button id and modifier state. void ReClicked(TObject* obj, UInt_t button, UInt_t state); Emit ReClicked signal with button id and modifier state. void UnClicked(TObject* obj, UInt_t button, UInt_t state); Emit UnClicked signal with button id and modifier state. void MouseIdle(TGLPhysical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewer.html:32210,guid,guides,32210,root/html528/TGLViewer.html,https://root.cern,https://root.cern/root/html528/TGLViewer.html,3,['guid'],['guides']
Usability,"e title on window. void FitCanvas(); Fit canvas container to current window size. void PrintCanvas(); Print the canvas. void EventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); Display a tooltip with infos about the primitive below the cursor. void ShowMenuBar(Bool_t show = kTRUE); Show or hide menubar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void ShowEditor(Bool_t show = kTRUE); Show or hide side frame. void CreateEditor(); Create embedded editor. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowToolTips(Bool_t show = kTRUE); Enable or disable tooltip info. Bool_t HasEditor() const; Returns kTRUE if the editor is shown. Bool_t HasMenuBar() const; Returns kTRUE if the menu bar is shown. Bool_t HasStatusBar() const; Returns kTRUE if the status bar is shown. Bool_t HasToolBar() const; Returns kTRUE if the tool bar is shown. Bool_t HasToolTips() const; Returns kTRUE if the tooltips are enabled. void AdjustSize(); Keep the same canvas size while docking/undocking toolbar. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. TRootCanvas(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootCanvas.html:27732,undo,undocking,27732,root/html528/TRootCanvas.html,https://root.cern,https://root.cern/root/html528/TRootCanvas.html,3,['undo'],['undocking']
Usability,"e title on window. void FitCanvas(); Fit canvas container to current window size. void PrintCanvas(); Print the canvas. void EventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); Display a tooltip with infos about the primitive below the cursor. void ShowMenuBar(Bool_t show = kTRUE); Show or hide menubar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void ShowEditor(Bool_t show = kTRUE); Show or hide side frame. void CreateEditor(); Create embedded editor. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowToolTips(Bool_t show = kTRUE); Enable or disable tooltip info. Bool_t HasEditor() const; Returns kTRUE if the editor is shown. Bool_t HasMenuBar() const; Returns kTRUE if the menu bar is shown. Bool_t HasStatusBar() const; Returns kTRUE if the status bar is shown. Bool_t HasToolBar() const; Returns kTRUE if the tool bar is shown. Bool_t HasToolTips() const; Returns kTRUE if the tooltips are enabled. void AdjustSize(); Keep the same canvas size while docking/undocking toolbar. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. void Activated(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRootCanvas.html:28003,undo,undocking,28003,root/html534/TRootCanvas.html,https://root.cern,https://root.cern/root/html534/TRootCanvas.html,3,['undo'],['undocking']
Usability,"e to be called instead of directly calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; (*) The setup is consistent when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 324 of file TObject.h. ◆ Class(). static TClass * TObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 243 of file TObject.h. ◆ ClassName(). const char * TObject::ClassName ; (; ); const. virtual . Returns name of class to which the object belongs. ; Definition at line 207 of file TObject.cxx. ◆ Clear(). virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, TMrbSubevent_Caen, TNotifyLinkBase, TRefTable, ROOT::TSchemaRule, TGTextEdit, TGTextView, TGView, TGHtml, TStreamerInfo, TMatrixT< Element >, TMatrixT< AReal >, TMatrixT< Double_t >, TMatrixTSparse< Element >, TMatrixTSparse< Double_t >, TMatrixTSym< Element >, TMatrixTSym< Double_t >, TVectorT< Element >, TVectorT< Double_t >, TVirtualStreamerInfo, TMVA::MinuitWrapper, TProofProgressLog, TProofProgressMemoryPlot, RooLinkedList, TUsrHitBuffer, TFumili, TListOfEnums, TListOfEnumsWithLock, TDirectory, TFolder, TNamed, TProcessID, TTask, TBits, TBtree, TClonesArray, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TDictAttributeMap, TListOfDataMembers, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, TViewPubFunctions, TGeoRotation, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:22599,Clear,Clear,22599,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['Clear'],['Clear']
Usability,"e to be called instead of directly calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; (*) The setup is consistent when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 324 of file TObject.h. ◆ Class(). static TClass * TObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 243 of file TObject.h. ◆ ClassName(). const char * TObject::ClassName ; (; ); const. virtual . Returns name of class to which the object belongs. ; Definition at line 213 of file TObject.cxx. ◆ Clear(). virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, TMrbSubevent_Caen, TNotifyLinkBase, TRefTable, ROOT::TSchemaRule, TGTextEdit, TGTextView, TGView, TGHtml, TStreamerInfo, TMatrixT< Element >, TMatrixT< AReal >, TMatrixT< Double_t >, TMatrixTSparse< Element >, TMatrixTSparse< Double_t >, TMatrixTSym< Element >, TMatrixTSym< Double_t >, TVectorT< Element >, TVectorT< Double_t >, TVirtualStreamerInfo, TMVA::MinuitWrapper, TProofProgressLog, TProofProgressMemoryPlot, RooLinkedList, TUsrHitBuffer, TFumili, TListOfEnums, TListOfEnumsWithLock, TDirectory, TFolder, TNamed, TProcessID, TTask, TBits, TBtree, TClonesArray, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TDictAttributeMap, TListOfDataMembers, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, TViewPubFunctions, TGeoRotation, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:22600,Clear,Clear,22600,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['Clear'],['Clear']
Usability,"e to shape rendering data. ; Definition at line 145 of file RGeomData.hxx. Public Member Functions;  RGeomVisible ()=default;  ;  RGeomVisible (int _nodeid, int _seqid, const std::vector< int > &_stack);  . Public Attributes; std::string color;  color in rgb format ;  ; int nodeid {0};  selected node id, ;  ; double opacity {1};  opacity ;  ; RGeomRenderInfo * ri {nullptr};  render information for the shape, can be same for different nodes ;  ; int seqid {0};  sequence id, used for merging later ;  ; std::vector< int > stack;  path to the node, index in list of childs ;  . #include <ROOT/RGeomData.hxx>; Constructor & Destructor Documentation. ◆ RGeomVisible() [1/2]. ROOT::RGeomVisible::RGeomVisible ; (; ). default . ◆ RGeomVisible() [2/2]. ROOT::RGeomVisible::RGeomVisible ; (; int ; _nodeid, . int ; _seqid, . const std::vector< int > & ; _stack . ). inline . Definition at line 155 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeomVisible::color. color in rgb format ; Definition at line 150 of file RGeomData.hxx. ◆ nodeid. int ROOT::RGeomVisible::nodeid {0}. selected node id, ; Definition at line 147 of file RGeomData.hxx. ◆ opacity. double ROOT::RGeomVisible::opacity {1}. opacity ; Definition at line 151 of file RGeomData.hxx. ◆ ri. RGeomRenderInfo* ROOT::RGeomVisible::ri {nullptr}. render information for the shape, can be same for different nodes ; Definition at line 152 of file RGeomData.hxx. ◆ seqid. int ROOT::RGeomVisible::seqid {0}. sequence id, used for merging later ; Definition at line 148 of file RGeomData.hxx. ◆ stack. std::vector<int> ROOT::RGeomVisible::stack. path to the node, index in list of childs ; Definition at line 149 of file RGeomData.hxx. Libraries for ROOT::RGeomVisible:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomVisible. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomVisible.html:2262,Guid,Guide,2262,doc/master/classROOT_1_1RGeomVisible.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomVisible.html,1,['Guid'],['Guide']
Usability,"e top elements composi...Definition TGeoMaterial.cxx:1312; TGeoMixture::Printvoid Print(const Option_t *option="""") const overrideprint characteristics of this materialDefinition TGeoMaterial.cxx:1190; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPad::SetLogyvoid SetLogy(Int_t value=1) overrideSet Lin/Log scale for Y.Definition TPad.cxx:6100; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TPad::SetLogxvoid SetLogx(Int_t value=1) overrideSet Lin/Log scale for X.Definition TPad.cxx:6086; TPad::GetNameconst char * GetName() const overrideReturns name of object.Definition TPad.h:260; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; ptTPaveText * ptDefinition entrylist_figure1.C:7; c1return c1Definition legend1.C:41; nconst Int_t nDefinition legend1.C:16; c2return c2Definition legend2.C:14; arrowDefinition RArrowDS.hxx:17; AuthorMihaela Gheata ; Definition in file RadioNuclides.C. tutorialsgeomRadioNuclides.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RadioNuclides_8C.html:15386,Guid,Guide,15386,doc/master/RadioNuclides_8C.html,https://root.cern,https://root.cern/doc/master/RadioNuclides_8C.html,1,['Guid'],['Guide']
Usability,"e traversed backwards and upwards performing undo and redo operations. To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);; TQCommand::TQUndoManagerfriend class TQUndoManagerDefinition TQCommand.h:29; TQUndoManagerRecorder of operations for undo and redo.Definition TQCommand.h:103; TQUndoManager::Addvoid Add(TObject *obj, Option_t *opt) overrideAdd command to the stack of commands.Definition TQCommand.cxx:959; TQUndoManager::Add automatically invokes execution of command's Redo method. Use TQUndoManager::Undo to undo commands in history list. Redo is Undo for undo action. Use TQUndoManager::Redo method for that ; Definition at line 27 of file TQCommand.h. Public Member Functions;  TQCommand (const char *cl=nullptr, void *object=nullptr, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ;  TQCommand (const TQCommand &com);  Copy constructor. ;  ;  TQCommand (TObject *obj, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ; virtual ~TQCommand ();  dtor. ;  ; void Add (TObject *obj) override;  ; void Add (TObject *obj, Option_t *opt) override;  Add command to the list of merged commands. ;  ; virtual Bool_t CanCompress (TQCommand *c) const;  By default, commands can be compressed if they are: ;  ; virtual Bool_t CanMerge (TQCommand *c) const;  Two commands can be merged if they can be composed into a single command (Macro command). ;  ; virtual Bool_t CanRedo () const;  Returns kTRUE if Redo action is possible, kFALSE if it's not. ;  ; virtual Bool_t CanUndo () const;  Returns kTRUE if Undo action is possible, kFALSE if it's not. ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:4959,undo,undo,4959,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"e two ways to do this. You can set the NDC for one object or may convert NDC to user coordinates. Most graphical objects offer an option to be drawn in NDC. For instance, a line (TLine) may be drawn in NDC by using DrawLineNDC(). A latex formula or a text may use TText::SetNDC() to be drawn in NDC coordinates.; 9.3.3 Converting between Coordinate Systems; There are a few utility functions in TPad to convert from one system of coordinates to another. In the following table, a point is defined by (px,py) in pixel coordinates, (ux,uy) in user coordinates, (ndcx,ndcy) in normalized coordinates, (apx, apy) are in absolute pixel coordinates. Conversion; TPad’s Methods; Returns. NDC to Pixel; UtoPixel(ndcx); VtoPixel(ndcy); Int_t; Int_t. Pixel to User; PixeltoX(px); PixeltoY(py); PixeltoXY(px,py,&ux,&uy); Double_t; Double_t; Double_t ux,uy. User to Pixel; XtoPixel(ux); YtoPixel(uy); XYtoPixel(ux,uy,&px,&py); Int_t; Int_t; Int_t px,py. User to absolute pixel; XtoAbsPixel(ux); YtoAbsPixel(uy); XYtoAbsPixel(ux,uy,&apx,&apy); Int_t; Int_t; Int_t apx,apy. Absolute pixel to user; AbsPixeltoX(apx); AbsPixeltoY(apy); AbsPixeltoXY(apx,apy,&ux,&uy); Double_t; Double_t; Double_t ux,uy. Note: all the pixel conversion functions along the Y axis consider that py=0 is at the top of the pad except PixeltoY() which assume that the position py=0 is at the bottom of the pad. To make PixeltoY() converting the same way as the other conversion functions, it should be used the following way (p is a pointer to a TPad):; p->PixeltoY(py - p->GetWh());; 9.3.4 Dividing a Pad into Sub-pads; Dividing a pad into sub pads in order for instance to draw a few histograms, may be done in two ways. The first is to build pad objects and to draw them into a parent pad, which may be a canvas. The second is to automatically divide a pad into horizontal and vertical sub pads.; 9.3.4.1 Creating a Single Sub-pad; The simplest way to divide a pad is to build sub-pads in it. However, this forces the user to explicitly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:310996,ux,ux,310996,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['ux'],['ux']
Usability,"e type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. TGeoVolume * Volume(const char* name, const char* shape, Int_t nmed, Double_t* upar, Int_t npar = 0); Create a volume in GEANT3 style.; NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. void SetAllIndex(); Assigns uid's for all materials,media and matrices. void ClearAttributes(); Reset all attributes to default ones. Default attributes for visualization; are those defined before closing the geometry. void CloseGeometry(Option_t* option = ""d""); Closing geometry implies checking the geometry validity, fixing shapes; with negative parameters (run-time shapes)building the cache manager,; voxelizing all volumes, counting the total number of physical nodes and; registring the manager class to the browser. void ClearOverlaps(); Clear the list of overlaps. void ClearShape(const TGeoShape* shape); Remove a shape from the list of shapes. void CleanGarbage(); Clean temporary volumes and shapes from garbage collection. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). Int_t GetCurrentNodeId() const; Get the unique ID of the current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:43857,Clear,ClearShape,43857,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,6,['Clear'],['ClearShape']
Usability,"e usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrating the use of TMath::Permute can be run with: ;  ; file  principal.C;   Principal Components Analysis (PCA) example ;  ; file  principal.py;   Principal Components Analysis (PCA) example ;  ; file  quantiles.C;   Demo for quantiles ;  ; file  quasirandom.C;   Example of generating quasi-random numbers ;  ; file  Rolke.C;   Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  ; file  testrandom.C;   Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2. ;  ; file  tStudent.C;   Example macro describing the student t distribution ;  ; file  tStudent.py;   Example macro describing the student t distribution ;  ; file  TSVDUnfoldExample.C;   Data unfolding using Singular Value Decomposition ;  ; file  vavilov.C;   Test of the TMath::Vavilov distribution ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__math.html:5869,Guid,Guide,5869,doc/master/group__tutorial__math.html,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html,1,['Guid'],['Guide']
Usability,"e user is trying to set types only of existing columns; 363 ValidateColTypes(columns);; 364 ; 365 // Infer types of columns with first record; 366 InferColTypes(columns);; 367 ; 368 // rewind; 369 fCsvFile->Seek(fDataPos);; 370 } else {; 371 std::string msg = ""Could not infer column types of CSV file "";; 372 msg += fileName;; 373 throw std::runtime_error(msg);; 374 }; 375}; 376 ; 377void RCsvDS::FreeRecords(); 378{; 379 for (auto &record : fRecords) {; 380 for (size_t i = 0; i < record.size(); ++i) {; 381 void *p = record[i];; 382 const auto colType = fColTypes[fHeaders[i]];; 383 switch (colType) {; 384 case 'D': {; 385 delete static_cast<double *>(p);; 386 break;; 387 }; 388 case 'L': {; 389 delete static_cast<Long64_t *>(p);; 390 break;; 391 }; 392 case 'O': {; 393 delete static_cast<bool *>(p);; 394 break;; 395 }; 396 case 'T': {; 397 delete static_cast<std::string *>(p);; 398 break;; 399 }; 400 }; 401 }; 402 }; 403 fRecords.clear();; 404}; 405 ; 406////////////////////////////////////////////////////////////////////////; 407/// Destructor.; 408RCsvDS::~RCsvDS(); 409{; 410 FreeRecords();; 411}; 412 ; 413void RCsvDS::Finalize(); 414{; 415 fCsvFile->Seek(fDataPos);; 416 fProcessedLines = 0ULL;; 417 fEntryRangesRequested = 0ULL;; 418 FreeRecords();; 419}; 420 ; 421const std::vector<std::string> &RCsvDS::GetColumnNames() const; 422{; 423 return fHeaders;; 424}; 425 ; 426std::vector<std::pair<ULong64_t, ULong64_t>> RCsvDS::GetEntryRanges(); 427{; 428 // Read records and store them in memory; 429 auto linesToRead = fLinesChunkSize;; 430 FreeRecords();; 431 ; 432 std::string line;; 433 while ((-1LL == fLinesChunkSize || 0 != linesToRead) && fCsvFile->Readln(line)) {; 434 if (line.empty()) continue; // skip empty lines; 435 fRecords.emplace_back();; 436 FillRecord(line, fRecords.back());; 437 --linesToRead;; 438 }; 439 ; 440 if (!fColContainingEmpty.empty()) {; 441 std::string msg = """";; 442 for (const auto &col : fColContainingEmpty) {; 443 const auto colT = GetTypeName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCsvDS_8cxx_source.html:13952,clear,clear,13952,doc/master/RCsvDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCsvDS_8cxx_source.html,1,['clear'],['clear']
Usability,"e virtual . Reset the address of the container being proxied to the previous container. ; Implemented in TGenCollectionProxy. ◆ PushProxy(). virtual void TVirtualCollectionProxy::PushProxy ; (; void * ; objectstart). pure virtual . Set the address of the container being proxied and keep track of the previous one. ; Implemented in TGenCollectionProxy. ◆ Reset(). virtual Bool_t TVirtualCollectionProxy::Reset ; (; ). inlinevirtual . Reset the information gathered from StreamerInfos and value's TClass. ; Reimplemented in TGenCollectionProxy.; Definition at line 95 of file TVirtualCollectionProxy.h. ◆ Size(). virtual UInt_t TVirtualCollectionProxy::Size ; (; ); const. pure virtual . Return the current number of elements in the container. ; Implemented in TEmulatedCollectionProxy, TEmulatedMapProxy, and TGenCollectionProxy. ◆ Sizeof(). virtual UInt_t TVirtualCollectionProxy::Sizeof ; (; ); const. pure virtual . Return the sizeof() of the collection object. ; Implemented in TEmulatedCollectionProxy, and TGenCollectionProxy. Friends And Related Symbol Documentation. ◆ TClass. friend class TClass. friend . Definition at line 60 of file TVirtualCollectionProxy.h. Member Data Documentation. ◆ fClass. TClassRef TVirtualCollectionProxy::fClass. protected . Definition at line 58 of file TVirtualCollectionProxy.h. ◆ fgIteratorArenaSize. const Int_t TVirtualCollectionProxy::fgIteratorArenaSize = 16. static . The size of a small buffer that can be allocated on the stack to store iterator-specific information. ; Definition at line 207 of file TVirtualCollectionProxy.h. ◆ fProperties. UInt_t TVirtualCollectionProxy::fProperties. protected . Definition at line 59 of file TVirtualCollectionProxy.h. Libraries for TVirtualCollectionProxy:. [legend]; The documentation for this class was generated from the following file:; core/cont/inc/TVirtualCollectionProxy.h. TVirtualCollectionProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionProxy.html:22629,Guid,Guide,22629,doc/master/classTVirtualCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html,1,['Guid'],['Guide']
Usability,"e virtual . ◆ Class(). static TClass * TGridJob::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGridJob::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGridJob::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 47 of file TGridJob.h. ◆ DeclFileName(). static const char * TGridJob::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 47 of file TGridJob.h. ◆ GetJobID(). virtual TString TGridJob::GetJobID ; (; ). inlinevirtual . Definition at line 40 of file TGridJob.h. ◆ GetJobStatus(). virtual TGridJobStatus * TGridJob::GetJobStatus ; (; ); const. pure virtual . ◆ GetOutputSandbox(). Int_t TGridJob::GetOutputSandbox ; (; const char * ; localpath, . Option_t * ; opt = nullptr . ). virtual . Must be implemented by actual GRID job implementation. ; Returns -1 in case of error, 0 otherwise. ; Definition at line 31 of file TGridJob.cxx. ◆ IsA(). TClass * TGridJob::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 47 of file TGridJob.h. ◆ Resubmit(). virtual Bool_t TGridJob::Resubmit ; (; ). pure virtual . ◆ Streamer(). void TGridJob::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGridJob::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file TGridJob.h. Member Data Documentation. ◆ fJobID. TString TGridJob::fJobID. protected . Definition at line 34 of file TGridJob.h. Libraries for TGridJob:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TGridJob.h; net/net/src/TGridJob.cxx. TGridJob. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJob.html:12551,Guid,Guide,12551,doc/master/classTGridJob.html,https://root.cern,https://root.cern/doc/master/classTGridJob.html,1,['Guid'],['Guide']
Usability,"e width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TTreeInput.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeInput.html:22077,simpl,simple,22077,root/html528/TTreeInput.html,https://root.cern,https://root.cern/root/html528/TTreeInput.html,1,['simpl'],['simple']
Usability,"e width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TTreeInput.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeInput.html:22230,simpl,simple,22230,root/html530/TTreeInput.html,https://root.cern,https://root.cern/root/html530/TTreeInput.html,1,['simpl'],['simple']
Usability,"e width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TTreeInput.h 26245 2008-11-17 16:32:49Z moneta $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeInput.html:22230,simpl,simple,22230,root/html532/TTreeInput.html,https://root.cern,https://root.cern/root/html532/TTreeInput.html,1,['simpl'],['simple']
Usability,"e window. The objects/widgets receive the events and react to them according to the application functionality. The signals/slot communication mechanism is an advanced object communication concept; it largely replaces the concept of callback functions to handle actions in GUI’s. Signals and slots are just like any object-oriented methods implemented in C++. The objects are the instances of classes that don’t know anything about each other. They interact and allow method calls of other object’s methods. The idea is simple: any object can send out (emit) a signal in certain situations saying that something happened. This is all it does to communicate and it does not know whether anything is interested in this information. On the other side there might be an object waiting for that signal and ready to react to it. This object disposes of special instruments to listen to the sent out signals. To have a communication we need a message transmission between the objects. In this simple example we use signals and slots. The code of the method TGButton::Clicked() is:; virtual void Clicked() { Emit(""Clicked()""); } // *SIGNAL*; I.e. any button emits the signal Clicked() any time someone clicks on it. As you can see this method is virtual and could be overridden if you need to. In our simple example we call the Connect() method to connect the Clicked() signal of Draw button with MyMainFrame::DoDraw():; draw->Connect(""Clicked()"",""MyMainFrame"",this,""DoDraw()"");; In the same way we can connect to the signal Clicked() of the Exit button with the system call gApplication->Terminate(0). We declare a new slot DoExit(), implement it to invoke the termination call and associate this slot with the signal Clicked() of the Exit button.; The code of example.C can be changed as follows:; public:; ...; void DoExit(); // a new slot is added; }; void MyMainFrame::DoExit() {; gApplication->Terminate(0);; }; MyMainFrame::MyMainFrame(const TGWindow *p,UInt_t w,UInt_t h) {; ...; TGTextButton *exit = n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1164071,simpl,simple,1164071,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"e y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTranslationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for translation editor. ~TGeoTranslationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the new matrix. void DoName(); Slot for name. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying changes. void DoCancel(); Slot for cancelling last modifications non-applied. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last operation. void DoDx(); Slot for dx. void DoDy(); Slot for dx. void DoDz(); Slot for dx. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTranslationEditor.html:21285,undo,undoing,21285,root/html528/TGeoTranslationEditor.html,https://root.cern,https://root.cern/root/html528/TGeoTranslationEditor.html,1,['undo'],['undoing']
Usability,"e y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTranslationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for translation editor. ~TGeoTranslationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the new matrix. void DoName(); Slot for name. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying changes. void DoCancel(); Slot for cancelling last modifications non-applied. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last operation. void DoDx(); Slot for dx. void DoDy(); Slot for dx. void DoDz(); Slot for dx. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoTranslationEditor.html:21385,undo,undoing,21385,root/html530/TGeoTranslationEditor.html,https://root.cern,https://root.cern/root/html530/TGeoTranslationEditor.html,1,['undo'],['undoing']
Usability,"e y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTranslationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for translation editor. ~TGeoTranslationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the new matrix. void DoName(); Slot for name. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying changes. void DoCancel(); Slot for cancelling last modifications non-applied. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last operation. void DoDx(); Slot for dx. void DoDy(); Slot for dx. void DoDz(); Slot for dx. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoMatrixEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTranslationEditor.html:21385,undo,undoing,21385,root/html532/TGeoTranslationEditor.html,https://root.cern,https://root.cern/root/html532/TGeoTranslationEditor.html,1,['undo'],['undoing']
Usability,"e {; 2589 arr[jel++] = element;; 2590 }; 2591 }; 2592 for (kel = 0; jel < narr;) {; 2593 arr[jel++] = tai[kel++];; 2594 }; 2595 }; 2596 ; 2597 // Now add artificial TStreamerElement (i.e. rules that creates new members or set transient members).; 2598 if (!wasCompiled) InsertArtificialElements(rules);; 2599 ; 2600 if (!wasCompiled && allocClass) {; 2601 ; 2602 TStreamerElement *el = new TStreamerArtificial(""@@alloc"","""", 0, TStreamerInfo::kCacheNew, allocClass->GetName());; 2603 R__TObjArray_InsertAt( fElements, el, 0 );; 2604 ; 2605 el = new TStreamerArtificial(""@@dealloc"","""", 0, TStreamerInfo::kCacheDelete, allocClass->GetName());; 2606 fElements->Add( el );; 2607 }; 2608 ; 2609 Compile();; 2610}; 2611 ; 2612////////////////////////////////////////////////////////////////////////////////; 2613/// If opt contains 'built', reset this StreamerInfo as if Build or BuildOld; 2614/// was never called on it (useful to force their re-running).; 2615 ; 2616void TStreamerInfo::Clear(Option_t *option); 2617{; 2618 TString opt = option;; 2619 opt.ToLower();; 2620 ; 2621 if (opt.Contains(""build"")) {; 2622 R__LOCKGUARD(gInterpreterMutex);; 2623 ; 2624 delete [] fComp; fComp = 0;; 2625 delete [] fCompFull; fCompFull= 0;; 2626 delete [] fCompOpt; fCompOpt = 0;; 2627 ; 2628 fNdata = 0;; 2629 fNfulldata = 0;; 2630 fNslots= 0;; 2631 fSize = 0;; 2632 ; 2633 ResetIsCompiled();; 2634 ResetBit(kBuildOldUsed);; 2635 ; 2636 TIter next(fElements);; 2637 while (auto element = (TStreamerElement*)next()) {; 2638 element->SetOffset(0);; 2639 }; 2640 ; 2641 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 2642 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 2643 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 2644 if (fReadText) fReadText->fActions.clear();; 2645 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 2646 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 2647 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:104803,Clear,Clear,104803,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Clear'],['Clear']
Usability,"e(). static const char * TMethodArg::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMethodArg::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 64 of file TMethodArg.h. ◆ DeclFileName(). static const char * TMethodArg::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 64 of file TMethodArg.h. ◆ GetDataMember(). TDataMember * TMethodArg::GetDataMember ; (; ); const. Returns TDataMember pointed by this methodarg. ; If you want to specify list of options or current value for your MethodArg (i.e. it is used as initial values in argument-asking dialogs popped up from context-meny),you can get this value from one of data members of the class.; The only restriction is, that this DataMember object must have its Getter/Setter methods set-up correctly - for details look at TDataMember. To learn how to specify the data member to which the argument should ""point"", look at TMethod. This is TMethod which sets up fDataMember, so it could work correctly. ; Definition at line 128 of file TMethodArg.cxx. ◆ GetDefault(). const char * TMethodArg::GetDefault ; (; ); const. Get default value of method argument. ; Definition at line 57 of file TMethodArg.cxx. ◆ GetFullTypeName(). const char * TMethodArg::GetFullTypeName ; (; ); const. Get full type description of method argument, e.g.: ""class TDirectory*"". ; Definition at line 74 of file TMethodArg.cxx. ◆ GetMethod(). TFunction * TMethodArg::GetMethod ; (; ); const. inline . Definition at line 52 of file TMethodArg.h. ◆ GetOptions(). TList * TMethodArg::GetOptions ; (; ); const. Returns list of possible options - according to pointed datamember. ; If there is no datamember field assigned to this methodarg - returns 0. ; Definition at line 110 of file TMethodArg.cxx. ◆ GetTypeInfo(). TypeInfo_t * TMethodArg::GetTypeInfo ; (; ); const. Get the TypeInfo of the method argument. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodArg.html:16379,learn,learn,16379,doc/master/classTMethodArg.html,https://root.cern,https://root.cern/doc/master/classTMethodArg.html,1,['learn'],['learn']
Usability,"e(). void TProof::SetActive ; (; Bool_t ; = kTRUE). inline . Definition at line 988 of file TProof.h. ◆ SetAlias(). void TProof::SetAlias ; (; const char * ; alias = """"). virtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 10583 of file TProof.cxx. ◆ SetDataPoolUrl(). void TProof::SetDataPoolUrl ; (; const char * ; url). inline . Definition at line 1044 of file TProof.h. ◆ SetDataSetTreeName(). Int_t TProof::SetDataSetTreeName ; (; const char * ; dataset, . const char * ; treename . ). virtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented in TProofLite.; Definition at line 10766 of file TProof.cxx. ◆ SetDrawFeedbackOption(). void TProof::SetDrawFeedbackOption ; (; TDrawFeedback * ; f, . Option_t * ; opt . ). Set draw feedback option. ; Definition at line 10102 of file TProof.cxx. ◆ SetDSet(). void TProof::SetDSet ; (; TDSet * ; dset). inlineprotected . Definition at line 737 of file TProof.h. ◆ SetFeedback(). void TProof::SetFeedback ; (; TString & ; opt, . TString & ; optfb, . Int_t ; action . ). protected . Extract from opt in optfb information about wanted feedback settings. ; Feedback are removed from the input string opt. If action == 0, set up feedback accordingly, if action == 1 clean related feedback settings (using info in optfb, if available, or reparsing opt).; Feedback requirements are in the form <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>; The special name 'stats' triggers feedback about events and packets. The separator from the next option is either a ' ' or a ';'. Called interanally by TProof::Process. ; Definition at line 5232 of file TProof.cxx. ◆ SetInputDataFile(). void TProof::SetInputDataFile ; (; const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:142371,feedback,feedback,142371,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"e(); TFile(const char* fname, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual~TFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject&) const; static Bool_tCp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidDelete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:3347,Clear,Clear,3347,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,2,['Clear'],['Clear']
Usability,"e(); TFile(const char* fname, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual~TFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject&) const; virtual Bool_tCp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tCp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidDelete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """")",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFile.html:3357,Clear,Clear,3357,root/html532/TFile.html,https://root.cern,https://root.cern/root/html532/TFile.html,1,['Clear'],['Clear']
Usability,"e(); TFile(const char* fname, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual~TFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject&) const; virtual Bool_tCp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tCp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidDelete(const char* namecycle = """"); virtual voidTDirectory::Delet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFile.html:3357,Clear,Clear,3357,root/html534/TFile.html,https://root.cern,https://root.cern/root/html534/TFile.html,1,['Clear'],['Clear']
Usability,"e(); Update gui builder. Bool_t IsSelectMode() const; Return the status of the selected mode. Bool_t IsGrabButtonDown() const; Return the status of the grab mode. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t NewProject(TString type = """"); Create a new project. Bool_t OpenProject(Event_t* event = 0); Open new gui builder project. Bool_t SaveProject(Event_t* event = 0); Save selected project. void AddMacro(const char* macro, TImage* img); Add macro to ""User's Macros"" section; Input img must be static - do not delete it. TGMdiFrame * FindEditableMdiFrame(const TGWindow* win); Find the editable frame. void SwitchToolbarButton(); Switch image of toolbar edit button according to the current state. void HandleMenu(Int_t id); Handle menu items. void MaybeCloseWindow(); Handler before closing MDI frame. void HandleWindowClosed(Int_t id); Handler for closed MDI frame. void UpdateStatusBar(const char* text = 0); Update information shown on the status bar. void EraseStatusBar(); Clear information shown in the status bar. void BindKeys(); Keyborad key binding. TGFrame * VSplitter(); Create new vertical splitter (TGVSplitter). TGFrame * HSplitter(); Creates new horizontal splitter (TGHSplitter). void Hide(); Hide builder. ULong_t GetBgnd(); Return default background color. void PropagateBgndColor(TGFrame* frame, Pixel_t color); Set a background color to frame and all its subframes. ULong_t GetPopupBgnd(); Return background color for popup menus. ULong_t GetPopupHlght(); Return highlighted color for popup menu entry. TGPopupMenu * CreatePopup(); Return style popup menu. TGFrame * BuildListTree(); Helper method used in guibuilding. TGFrame * BuildCanvas(); Helper method used in guibuilding to create TGCanvas widget. TGFrame * BuildShutter(); Helper method used in guibuilding to create TGShutter widget. TGFrame * BuildTextEdit(); Helper method to create TGTextEdit widget. TGFrame * BuildTab(); Helper method to create TGTab widget. TGFrame * BuildListBox(); Helper method to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootGuiBuilder.html:28601,Clear,Clear,28601,root/html528/TRootGuiBuilder.html,https://root.cern,https://root.cern/root/html528/TRootGuiBuilder.html,6,['Clear'],['Clear']
Usability,"e()Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start a...Definition TStopwatch.cxx:110; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::fTotalRealTimeDouble_t fTotalRealTimeDefinition TStopwatch.h:38; TStopwatch::CounterInt_t Counter() constDefinition TStopwatch.h:50; TStopwatch::GetRealTimestatic Double_t GetRealTime()Private static method returning system realtime.Definition TStopwatch.cxx:139; TStopwatch::fStartRealTimeDouble_t fStartRealTimeDefinition TStopwatch.h:33; TStopwatch::fStopRealTimeDouble_t fStopRealTimeDefinition TStopwatch.h:34; TStopwatch::fStartCpuTimeDouble_t fStartCpuTimeDefinition TStopwatch.h:35; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::fCounterInt_t fCounterDefinition TStopwatch.h:40; TStopwatch::Continuevoid Continue()Resume a stopped stopwatch.Definition TStopwatch.cxx:93; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::fTotalCpuTimeDouble_t fTotalCpuTimeDefinition TStopwatch.h:37; TStopwatch::TStopwatchTStopwatch()Create a stopwatch and start it.Definition TStopwatch.cxx:39; TStopwatch::GetCPUTimestatic Double_t GetCPUTime()Private static method returning system CPU time.Definition TStopwatch.cxx:158; TStopwatch::fStopCpuTimeDouble_t fStopCpuTimeDefinition TStopwatch.h:36; TStopwatch::kRunning@ kRunningDefinition TStopwatch.h:31; TStopwatch::kStopped@ kStoppedDefinition TStopwatch.h:31; TStopwatch::kUndefined@ kUndefinedDefinition TStopwatch.h:31; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TTimeStampThe TTimeStamp encapsulates seconds and ns since EPOCH.Definition TTimeStamp.h:45; bool; double; int; TRUE#define TRUEDefinition mesh.c:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStopwatch_8cxx_source.html:9732,Resume,Resume,9732,doc/master/TStopwatch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStopwatch_8cxx_source.html,1,['Resume'],['Resume']
Usability,"e(2,line3);; 11105 gVirtualX->DrawPolyLine(2,line4);; 11106 gVirtualX->DrawPolyLine(5,endface1);; 11107 gVirtualX->DrawPolyLine(5,endface2);; 11108 }; 11109 xx[0] = xaxis->GetXmin();; 11110 xx[2] = zaxis->GetBinCenter(binz);; 11111 xx[1] = yaxis->GetBinCenter(biny);; 11112 view->WCtoNDC(xx,u);; 11113 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11114 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11115 xx[0] = xaxis->GetXmax();; 11116 view->WCtoNDC(xx,u);; 11117 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11118 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11119 gVirtualX->DrawPolyLine(2,line1);; 11120 if (nbins>1) {; 11121 xx[0] = xaxis->GetXmin();; 11122 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11123 xx[1] = yaxis->GetBinCenter(biny);; 11124 view->WCtoNDC(xx,u);; 11125 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11126 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11127 xx[0] = xaxis->GetXmax();; 11128 view->WCtoNDC(xx,u);; 11129 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11130 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11131 ; 11132 xx[0] = xaxis->GetXmin();; 11133 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11134 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11135 view->WCtoNDC(xx,u);; 11136 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11137 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11138 xx[0] = xaxis->GetXmax();; 11139 view->WCtoNDC(xx,u);; 11140 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11141 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11142 ; 11143 xx[0] = xaxis->GetXmin();; 11144 xx[2] = zaxis->GetBinCenter(binz);; 11145 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11146 view->WCtoNDC(xx,u);; 11147 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11148 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11149 xx[0] = xaxis->GetXmax();; 11150 view->WCtoNDC(xx,u);; 11151 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11152 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11153 ; 11154 endface1[0].SetX(line1[0].GetX());; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:402690,ux,uxmin,402690,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"e(2,line3);; 11334 gVirtualX->DrawPolyLine(2,line4);; 11335 gVirtualX->DrawPolyLine(5,endface1);; 11336 gVirtualX->DrawPolyLine(5,endface2);; 11337 }; 11338 xx[0] = xaxis->GetBinCenter(binx);; 11339 xx[1] = yaxis->GetBinCenter(biny);; 11340 xx[2] = zaxis->GetXmin();; 11341 view->WCtoNDC(xx,u);; 11342 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11343 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11344 xx[2] = zaxis->GetXmax();; 11345 view->WCtoNDC(xx,u);; 11346 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11347 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11348 gVirtualX->DrawPolyLine(2,line1);; 11349 if (nbins>1) {; 11350 xx[2] = zaxis->GetXmin();; 11351 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11352 xx[0] = xaxis->GetBinCenter(binx);; 11353 view->WCtoNDC(xx,u);; 11354 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11355 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11356 xx[2] = zaxis->GetXmax();; 11357 view->WCtoNDC(xx,u);; 11358 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11359 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11360 ; 11361 xx[2] = zaxis->GetXmin();; 11362 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11363 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11364 view->WCtoNDC(xx,u);; 11365 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11366 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11367 xx[2] = zaxis->GetXmax();; 11368 view->WCtoNDC(xx,u);; 11369 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11370 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11371 ; 11372 xx[2] = zaxis->GetXmin();; 11373 xx[1] = yaxis->GetBinCenter(biny);; 11374 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11375 view->WCtoNDC(xx,u);; 11376 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11377 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11378 xx[2] = zaxis->GetXmax();; 11379 view->WCtoNDC(xx,u);; 11380 line4[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11381 line4[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11382 ; 11383 endface1[0].SetX(line1[0].GetX());; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:411999,ux,uxmin,411999,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"e(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf703_effpdfprodDefinition rf703_effpdfprod.py:1; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Fitting -- RooAbsPdf::fitTo(modelEff_over_modelEff_Int[t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_modelEff_over_modelEff_Int[t]_modelEffData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf703_effpdfprod.C. tutorialsroofitrf703_effpdfprod.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf703__effpdfprod_8C.html:5629,Guid,Guide,5629,doc/master/rf703__effpdfprod_8C.html,https://root.cern,https://root.cern/doc/master/rf703__effpdfprod_8C.html,1,['Guid'],['Guide']
Usability,"e(const TStreamerInfoActions::TActionSequence& sequence, void* object); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidAutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*Buffer() const; Int_tBufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tCheckObject(const TObject* obj); virtual Bool_tCheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExpand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const char* method, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBuffer.html:1658,Clear,Clear,1658,root/html532/TBuffer.html,https://root.cern,https://root.cern/root/html532/TBuffer.html,4,['Clear'],['Clear']
Usability,"e(const char* url, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual~TRFIOFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRFIOFile.html:2499,Clear,Clear,2499,root/html530/TRFIOFile.html,https://root.cern,https://root.cern/root/html530/TRFIOFile.html,1,['Clear'],['Clear']
Usability,"e(const char* url, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual~TRFIOFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRFIOFile.html:2499,Clear,Clear,2499,root/html532/TRFIOFile.html,https://root.cern,https://root.cern/root/html532/TRFIOFile.html,1,['Clear'],['Clear']
Usability,"e(file, ""MyTree"");. Compiling; You can also have your code compiled into a shared library, simply by adding a ""+"" behind the file name:; .x printTree.C+(file, ""MyTree"");. In the above example this will fail: we need to add the #includes for he compiler to be able to understand the code, while the interpreter has a lot of contextual knowledge and can automatically include headers and load libraries.; Expressions; You saw that with "".x"", ROOT prints the result of running the function while when using "".L"" and calling th function it does not. The way to trigger the printing of expression results is by omitting the trailing semicolon:; TMath::Gaus(1., 1., 1.). will print; (Double_t) 1.000000e+00. Help!; For TMath::Gaus() as well as for any other ROOT class or function, please check ROOT's reference guide.; Try to find the documentation for TTree::Print()!; We have now covered the basics - let's look at the tree's data!; . ‹ 1. Extracting an object from a TFile; up; 4. Histogramming ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/2-running-code-root.html:3906,Guid,Guides,3906,d/2-running-code-root.html,https://root.cern,https://root.cern/d/2-running-code-root.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"e({x}, 10000); ; # Change sigma to 3.15; sigma.setVal(3.15); ; # Plot data and slightly distorted model; # ---------------------------------------------------------------------------; ; # Overlay projection of gauss with sigma=3.15 on data with sigma=3.0; frame1 = x.frame(Title=""Data with distorted Gaussian pdf"", Bins=40); data.plotOn(frame1, DataError=""SumW2""); gauss.plotOn(frame1); ; # Calculate chi^2; # ------------------------------; ; # Show the chi^2 of the curve w.r.t. the histogram; # If multiple curves or datasets live in the frame you can specify; # the name of the relevant curve and/or dataset in chiSquare(); print(""chi^2 = "", frame1.chiSquare()); ; # Show residual and pull dists; # -------------------------------------------------------; ; # Construct a histogram with the residuals of the data w.r.t. the curve; hresid = frame1.residHist(); ; # Construct a histogram with the pulls of the data w.r.t the curve; hpull = frame1.pullHist(); ; # Create a frame to draw the residual distribution and add the; # distribution to the frame; frame2 = x.frame(Title=""Residual Distribution""); frame2.addPlotable(hresid, ""P""); ; # Create a frame to draw the pull distribution and add the distribution to; # the frame; frame3 = x.frame(Title=""Pull Distribution""); frame3.addPlotable(hpull, ""P""); ; c = ROOT.TCanvas(""rf109_chi2residpull"", ""rf109_chi2residpull"", 900, 300); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.6); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.6); frame2.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.6); frame3.Draw(); ; c.SaveAs(""rf109_chi2residpull.png""); chi^2 = 2.63197794362232; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf109_chi2residpull.py. tutorialsroofitrf109_chi2residpull.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf109__chi2residpull_8py.html:2753,Guid,Guide,2753,doc/master/rf109__chi2residpull_8py.html,https://root.cern,https://root.cern/doc/master/rf109__chi2residpull_8py.html,1,['Guid'],['Guide']
Usability,"e); Set an input list parameter. void SetParameter(const char* par, Long_t value); Set an input list parameter. void SetParameter(const char* par, Long64_t value); Set an input list parameter. void SetParameter(const char* par, Double_t value); Set an input list parameter. TObject * GetParameter(const char* par) const; Get specified parameter. A parameter set via SetParameter() is either; a TParameter or a TNamed or 0 in case par is not defined. void DeleteParameters(const char* wildcard); Delete the input list parameters specified by a wildcard (e.g. PROOF_*); or exact name (e.g. PROOF_MaxSlavesPerNode). void ShowParameters(const char* wildcard = ""PROOF_*"") const; Show the input list parameters specified by the wildcard.; Default is the special PROOF control parameters (PROOF_*). void AddFeedback(const char* name); Add object to feedback list. void RemoveFeedback(const char* name); Remove object from feedback list. void ClearFeedback(); Clear feedback list. void ShowFeedback() const; Show items in feedback list. TList * GetFeedbackList() const; Return feedback list. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. TDrawFeedback * CreateDrawFeedback(); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. TList * GetOutputNames(); FIXME: to be written. void Browse(TBrowser* b); Build the PROOF's structure in the browser. void SetPlayer(TVirtualProofPlayer* player); Set a new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:74743,feedback,feedback,74743,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['feedback'],['feedback']
Usability,e); const. inline . Definition at line 111 of file DataInputHandler.h. ◆ Bend(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::Bend ; (; ); const. inline . Definition at line 116 of file DataInputHandler.h. ◆ Class(). static TClass * TMVA::DataInputHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::DataInputHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::DataInputHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 134 of file DataInputHandler.h. ◆ ClearBackgroundTreeList(). void TMVA::DataInputHandler::ClearBackgroundTreeList ; (; ). inline . Definition at line 120 of file DataInputHandler.h. ◆ ClearSignalTreeList(). void TMVA::DataInputHandler::ClearSignalTreeList ; (; ). inline . Definition at line 119 of file DataInputHandler.h. ◆ ClearTreeList(). void TMVA::DataInputHandler::ClearTreeList ; (; const TString & ; className). Definition at line 182 of file DataInputHandler.cxx. ◆ DeclFileName(). static const char * TMVA::DataInputHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 134 of file DataInputHandler.h. ◆ end(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::end ; (; const TString & ; className); const. inline . Definition at line 112 of file DataInputHandler.h. ◆ GetBackgroundEntries(). UInt_t TMVA::DataInputHandler::GetBackgroundEntries ; (; ); const. inline . Definition at line 106 of file DataInputHandler.h. ◆ GetClassList(). std::vector< TString > * TMVA::DataInputHandler::GetClassList ; (; ); const. Definition at line 194 of file DataInputHandler.cxx. ◆ GetEntries() [1/3]. UInt_t TMVA::DataInputHandler::GetEntries ; (; ); const. return number of entries in tree ; Definition at line 217 of file DataInputHandler.cxx. ◆ GetEntries() [2/3]. UInt_t TMVA::DataInputHandler:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html:16969,Clear,ClearTreeList,16969,doc/master/classTMVA_1_1DataInputHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html,1,['Clear'],['ClearTreeList']
Usability,"e); result = fitter.Result(); result.Print(ROOT.std.cout); ; c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); c1.Divide(1, 2); c1.cd(1); ROOT.gStyle.SetOptFit(1111); ; fB.SetFitResult(result, iparB); fB.SetRange(rangeB().first, rangeB().second); fB.SetLineColor(ROOT.kBlue); hB.GetListOfFunctions().Add(fB); hB.Draw(); ; c1.cd(2); fSB.SetFitResult(result, iparSB); fSB.SetRange(rangeSB().first, rangeSB().second); fSB.SetLineColor(ROOT.kRed); hSB.GetListOfFunctions().Add(fSB); hSB.Draw(); ; c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; object; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; AuthorJonas Rembser, Lorenzo Moneta (C++ version) ; Definition in file combinedFit.py. tutorialsfitcombinedFit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/combinedFit_8py.html:5022,simpl,simple,5022,doc/master/combinedFit_8py.html,https://root.cern,https://root.cern/doc/master/combinedFit_8py.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"e);  Add object to feedback list. ;  ; Int_t AddIncludePath (const char *incpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'incpath' to the inc path search. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool_t push=kFALSE);  Add data objects that might be needed during the processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:7251,Clear,ClearData,7251,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['Clear'],['ClearData']
Usability,"e);; 1000 setup.Append('\n');; 1001 }; 1002 setup.Chop(); // trim final `\n`; 1003 return setup;; 1004}; 1005 ; 1006////////////////////////////////////////////////////////////////////////////////; 1007/// It opens a Forum topic in a web browser with prefilled ROOT version; 1008///; 1009/// \param[in] type the issue type (only bug supported right now); 1010 ; 1011void TApplication::OpenForumTopic(const TString &type); 1012{; 1013 // https://meta.discourse.org/t/how-to-create-a-post-clicking-a-link/96197; 1014 ; 1015 if (type == ""bug"") {; 1016 //OpenInBrowser(""\""https://root-forum.cern.ch/new-topic?title=topic%20title&body=topic%20body&category=category/subcategory&tags=email,planned\"""");; 1017 TString report_template =; 1018R""(___; 1019_Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_; 1020 ; 1021### Describe the bug; 1022<!--; 1023A clear and concise description of what the wrong behavior is.; 1024-->; 1025### Expected behavior; 1026<!--; 1027A clear and concise description of what you expected to happen.; 1028-->; 1029 ; 1030### To Reproduce; 1031<!--; 1032Steps to reproduce the behavior:; 10331. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 10342. Don't forget to attach the required input files!; 10353. How to run your code and / or build it, e.g. `root myMacro.C`, ...; 1036-->; 1037 ; 1038### Setup; 1039)""+GetSetup()+; 1040R""(; 1041<!--; 1042Please specify also how you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; 1043-->; 1044 ; 1045### Additional context; 1046<!--; 1047Add any other context about the problem here.; 1048-->)"";; 1049 report_template = FormatHttpUrl(report_template);; 1050 ; 1051 OpenInBrowser(""\""https://root-forum.cern.ch/new-topic?category=ROOT&tags=bug&body=""+report_template+""&\"""");; 1052 } else ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:39109,clear,clear,39109,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['clear'],['clear']
Usability,"e, . Bool_t ; isTransient . ). inline . Definition at line 63 of file TMemberInspector.h. ◆ InspectMember() [3/4]. void TMemberInspector::InspectMember ; (; const TObject & ; obj, . const char * ; name, . Bool_t ; isTransient . ). Definition at line 132 of file TMemberInspector.cxx. ◆ InspectMember() [4/4]. void TMemberInspector::InspectMember ; (; TClass * ; cl, . const void * ; pobj, . const char * ; name, . Bool_t ; isTransient . ). Definition at line 150 of file TMemberInspector.cxx. ◆ IsA(). virtual TClass * TMemberInspector::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 79 of file TMemberInspector.h. ◆ IsTreatingNonAccessibleTypes(). virtual Bool_t TMemberInspector::IsTreatingNonAccessibleTypes ; (; ). inlinevirtual . Reimplemented in TAutoInspector.; Definition at line 60 of file TMemberInspector.h. ◆ operator=(). TMemberInspector & TMemberInspector::operator= ; (; const TMemberInspector & ; ). privatedelete . ◆ RemoveFromParent(). void TMemberInspector::RemoveFromParent ; (; Ssiz_t ; startingAt). Definition at line 93 of file TMemberInspector.cxx. ◆ SetObjectValidity(). void TMemberInspector::SetObjectValidity ; (; EObjectPointerState ; val). inline . Definition at line 51 of file TMemberInspector.h. ◆ Streamer(). virtual void TMemberInspector::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMemberInspector::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TMemberInspector.h. Member Data Documentation. ◆ fObjectPointerState. EObjectPointerState TMemberInspector::fObjectPointerState. private . Definition at line 41 of file TMemberInspector.h. ◆ fParent. TParentBuf* TMemberInspector::fParent. private . Definition at line 40 of file TMemberInspector.h. core/base/inc/TMemberInspector.h; core/base/src/TMemberInspector.cxx. TMemberInspector. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:12:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTMemberInspector.html:7463,Guid,Guide,7463,doc/v632/classTMemberInspector.html,https://root.cern,https://root.cern/doc/v632/classTMemberInspector.html,1,['Guid'],['Guide']
Usability,"e, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 129 of file RWebBrowserImp.cxx. ◆ NewBrowser() [2/2]. TBrowserImp * RWebBrowserImp::NewBrowser ; (; TBrowser * ; b = nullptr, . const char * ; title = ""ROOT Browser"", . UInt_t ; width = 800, . UInt_t ; height = 500, . Option_t * ; opt = """" . ). static . Factory method to create RWebBrowserImp via plugin. ; Definition at line 121 of file RWebBrowserImp.cxx. ◆ Refresh(). void RWebBrowserImp::Refresh ; (; Bool_t ; = kFALSE). finalvirtual . Refresh browser. ; Reimplemented from TBrowserImp.; Definition at line 94 of file RWebBrowserImp.cxx. ◆ Show(). void RWebBrowserImp::Show ; (; ). finalvirtual . Show browser. ; Reimplemented from TBrowserImp.; Definition at line 101 of file RWebBrowserImp.cxx. ◆ ShowWarning(). void RWebBrowserImp::ShowWarning ; (; ). private . Show warning that RBrowser will be shown. ; Definition at line 71 of file RWebBrowserImp.cxx. Member Data Documentation. ◆ fHeight. Int_t ROOT::RWebBrowserImp::fHeight {0}. private . window coordinates ; Definition at line 25 of file RWebBrowserImp.hxx. ◆ fWebBrowser. std::shared_ptr<RBrowser> ROOT::RWebBrowserImp::fWebBrowser. private . actual browser used ; Definition at line 24 of file RWebBrowserImp.hxx. ◆ fWidth. Int_t ROOT::RWebBrowserImp::fWidth {0}. private . Definition at line 25 of file RWebBrowserImp.hxx. ◆ fX. Int_t ROOT::RWebBrowserImp::fX {-1}. private . Definition at line 25 of file RWebBrowserImp.hxx. ◆ fY. Int_t ROOT::RWebBrowserImp::fY {-1}. private . Definition at line 25 of file RWebBrowserImp.hxx. Libraries for ROOT::RWebBrowserImp:. [legend]; The documentation for this class was generated from the following files:; gui/browserv7/inc/ROOT/RWebBrowserImp.hxx; gui/browserv7/src/RWebBrowserImp.cxx. ROOTRWebBrowserImp. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html:7355,Guid,Guide,7355,doc/v632/classROOT_1_1RWebBrowserImp.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserImp.html,1,['Guid'],['Guide']
Usability,"e, 1.0);; dataloader->AddBackgroundTree(background, 1.0);; ; // check given input; auto &datainfo = dataloader->GetDataSetInfo();; auto vars = datainfo.GetListOfVariables();; std::cout << ""number of variables is "" << vars.size() << std::endl;; for (auto &v : vars); std::cout << v << "","";; std::cout << std::endl;; ; int nTrainSig = 0.8 * nTotEvts;; int nTrainBkg = 0.8 * nTotEvts;; ; // build the string options for DataLoader::PrepareTrainingAndTestTree; TString prepareOptions = TString::Format(""nTrain_Signal=%d:nTrain_Background=%d:SplitMode=Random:SplitSeed=100:NormMode=NumEvents:!V:!CalcCorrelations"", nTrainSig, nTrainBkg);; ; // Apply additional cuts on the signal and background samples (can be different); TCut mycuts = """"; // for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; TCut mycutb = """";; ; dataloader->PrepareTrainingAndTestTree(mycuts, mycutb, prepareOptions);; ; std::cout << ""prepared DATA LOADER "" << std::endl;; ; /**; ## Book TMVA recurrent models; ; Book the different types of recurrent models in TMVA (SimpleRNN, LSTM or GRU); ; **/; ; if (useTMVA_RNN) {; ; for (int i = 0; i < 3; ++i) {; ; if (!use_rnn_type[i]); continue;; ; const char *rnn_type = rnn_types[i].c_str();; ; /// define the inputlayout string for RNN; /// the input data should be organize as following:; //// input layout for RNN: time x ndim; ; TString inputLayoutString = TString::Format(""InputLayout=%d|%d"", ntime, ninput);; ; /// Define RNN layer layout; /// it should be LayerType (RNN or LSTM or GRU) | number of units | number of inputs | time steps | remember output (typically no=0 | return full sequence; TString rnnLayout = TString::Format(""%s|10|%d|%d|0|1"", rnn_type, ninput, ntime);; ; /// add after RNN a reshape layer (needed top flatten the output) and a dense layer with 64 units and a last one; /// Note the last layer is linear because when using Crossentropy a Sigmoid is applied already; TString layoutString = TString(""Layout="") + rnnLayout + TString("",RESHAPE|FLAT,DEN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:64687,Simpl,SimpleRNN,64687,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Simpl'],['SimpleRNN']
Usability,"e, const TObjArray *axes, Bool_t keepTargetAxis, Int_t chunkSize=1024 *16);  Initialize axes and name. ;  ; virtual void InitStorage (Int_t *nbins, Int_t chunkSize)=0;  ; THnBase & operator= (const THnBase &other);  ; THnBase & operator= (THnBase &&other);  ; Bool_t PrintBin (Long64_t idx, Int_t *coord, Option_t *options) const;  Print one bin. ;  ; TObject * ProjectionAny (Int_t ndim, const Int_t *dim, Bool_t wantNDim, Option_t *option="""") const;  Project all bins into a ndim-dimensional THn / THnSparse (whatever *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram, keeping only axes in dim (specifying ndim dimensions). ;  ; THnBase * RebinBase (const Int_t *group) const;  Combine the content of ""group"" neighboring bins for each dimension into a new bin and return the resulting THnBase. ;  ; THnBase * RebinBase (Int_t group) const;  Combine the content of ""group"" neighboring bins into a new bin and return the resulting THnBase. ;  ; virtual void Reserve (Long64_t);  ; void ResetBase (Option_t *option="""");  Clear the histogram. ;  ; virtual void SetFilledBins (Long64_t);  ; void UpdateXStat (const Double_t *x, Double_t w=1.);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static THnBase * CreateHnAny (const char *name, const char *title, const TH1 *h1, Bool_t sparse, Int_t chunkSize=1024 *16);  Create a THn / THnSparse object from a histogram deriving from TH1. ;  ; static THnBase * CreateHnAny (const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16);  Create a THnSparse (if ""sparse"") or THn from ""hn"", possibly converting THn <-> THnSparse. ;  . Protected Attributes; TObjArray fAxes;  Axes of the histogram. ;  ; TObjArray fBrowsables;  ! Browser-helpers for each axis ;  ; Double_t fEntries;  Number of entries, spread ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnBase.html:18373,Clear,Clear,18373,doc/master/classTHnBase.html,https://root.cern,https://root.cern/doc/master/classTHnBase.html,1,['Clear'],['Clear']
Usability,"e, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=1);  Create a new TTree BranchObject. ;  ; virtual TBranch * BranchRef ();  Build the optional branch supporting the TRefTable. ;  ; virtual TBranch * Bronch (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99);  Create a new TTree BranchElement. ;  ; void Browse (TBrowser *) override;  Browse content of the TTree. ;  ; virtual Int_t BuildIndex (const char *majorname, const char *minorname=""0"");  Build a Tree Index (default is TTreeIndex). ;  ; TStreamerInfo * BuildStreamerInfo (TClass *cl, void *pointer=nullptr, bool canOptimize=true);  Build StreamerInfo for class cl. ;  ; virtual TFile * ChangeFile (TFile *file);  Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize. ;  ; virtual TTree * CloneTree (Long64_t nentries=-1, Option_t *option="""");  Create a clone of this tree and copy nentries. ;  ; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; virtual TBasket * CreateBasket (TBranch *);  Create a basket for this tree and given branch. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Called by TKey and TObject::Clone to automatically add us to a directory when we are read from a file. ;  ; virtual Long64_t Draw (const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Draw expression varexp for entries and objects that pass a (optional) selection. ;  ; virtual Long6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:6557,undo,undo,6557,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,4,['undo'],['undo']
Usability,"e, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=1);  Create a new TTree BranchObject. ;  ; virtual TBranch * BranchRef ();  Build the optional branch supporting the TRefTable. ;  ; virtual TBranch * Bronch (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99);  Create a new TTree BranchElement. ;  ; void Browse (TBrowser *) override;  Browse content of the TTree. ;  ; virtual Int_t BuildIndex (const char *majorname, const char *minorname=""0"");  Build a Tree Index (default is TTreeIndex). ;  ; TStreamerInfo * BuildStreamerInfo (TClass *cl, void *pointer=nullptr, bool canOptimize=true);  Build StreamerInfo for class cl. ;  ; virtual TFile * ChangeFile (TFile *file);  Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize. ;  ; virtual TTree * CloneTree (Long64_t nentries=-1, Option_t *option="""");  Create a clone of this tree and copy nentries. ;  ; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; virtual TBasket * CreateBasket (TBranch *);  Create a basket for this tree and given branch. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; void Draw (Option_t *opt) override;  Default Draw method for all objects. ;  ; virtual void DropBaskets ();  Remove some baskets from memory. ;  ; virtual Int_t DropBranchFromCache (const char *bname, bool subbranches=false);  Remove the branch with name 'bname' from the Tree cache. ;  ; virtual Int_t DropBranchFromCache (TBranch *branch, bool subbranches=false);  Remove the branch b from the T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:17311,undo,undo,17311,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,3,['undo'],['undo']
Usability,"e, int address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser* b); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual voidTChain::CanDeleteRefs(Bool_t flag = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConnectProof(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); virtual voidTChain::CreatePackets(); Int_tDebug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTChain::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofChain.html:3191,Clear,Clear,3191,root/html528/TProofChain.html,https://root.cern,https://root.cern/root/html528/TProofChain.html,1,['Clear'],['Clear']
Usability,"e, size_t rows, size_t cols);  ;  TGDMLMatrix (const TGDMLMatrix &rhs);  ;  ~TGDMLMatrix () override;  ; Double_t Get (size_t r, size_t c) const;  ; size_t GetCols () const;  ; const char * GetMatrixAsString () const;  ; size_t GetRows () const;  ; TClass * IsA () const override;  ; TGDMLMatrix & operator= (const TGDMLMatrix &rhs);  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; void Set (size_t r, size_t c, Double_t a);  ; void SetMatrixAsString (const char *mat);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLMatrix.html:1583,Clear,Clear,1583,doc/master/classTGDMLMatrix.html,https://root.cern,https://root.cern/doc/master/classTGDMLMatrix.html,1,['Clear'],['Clear']
Usability,e-01 +/- 9.71e-02 <none>; sigma1 5.0000e-01 5.2318e-01 +/- 4.55e-02 <none>; sigma2 1.0000e+00 1.7671e+00 +/- 1.18e+00 <none>; ; EDM = 0.000381082; -log(L) at minimum = 1885.34; final value of floating parameters; 1) RooRealVar:: a0 = 0.72873 +/- 0.112573; 2) RooRealVar:: bkgfrac = 0.43445 +/- 0.085744; 3) RooRealVar:: mean = 5.03451 +/- 0.0336279; 4) RooRealVar:: sig1frac = 0.777578 +/- 0.0971233; 5) RooRealVar:: sigma1 = 0.523178 +/- 0.0455077; 6) RooRealVar:: sigma2 = 1.76714 +/- 1.18159; correlation between sig1frac and a0 is -0.383713; correlation between bkgfrac and mean is -0.0516125; correlation matrix; ; 6x6 matrix is as follows; ; | 0 | 1 | 2 | 3 | 4 |; ----------------------------------------------------------------------; 0 | 1 -0.8038 -0.02304 -0.3837 0.4249 ; 1 | -0.8038 1 -0.05161 0.6011 -0.4042 ; 2 | -0.02304 -0.05161 1 -0.08752 -0.04055 ; 3 | -0.3837 0.6011 -0.08752 1 0.2836 ; 4 | 0.4249 -0.4042 -0.04055 0.2836 1 ; 5 | 0.8347 -0.8794 0.0146 -0.2731 0.5878 ; ; ; | 5 |; ----------------------------------------------------------------------; 0 | 0.8347 ; 1 | -0.8794 ; 2 | 0.0146 ; 3 | -0.2731 ; 4 | 0.5878 ; 5 | 1 ; ; covariance matrix; ; 6x6 matrix is as follows; ; | 0 | 1 | 2 | 3 | 4 |; ----------------------------------------------------------------------; 0 | 0.01295 -0.007884 -8.818e-05 -0.004281 0.002201 ; 1 | -0.007884 0.007427 -0.0001496 0.005078 -0.001585 ; 2 | -8.818e-05 -0.0001496 0.001131 -0.0002885 -6.206e-05 ; 3 | -0.004281 0.005078 -0.0002885 0.00961 0.001265 ; 4 | 0.002201 -0.001585 -6.206e-05 0.001265 0.002071 ; 5 | 0.1142 -0.09113 0.0005905 -0.0322 0.03217 ; ; ; | 5 |; ----------------------------------------------------------------------; 0 | 0.1142 ; 1 | -0.09113 ; 2 | 0.0005905 ; 3 | -0.0322 ; 4 | 0.03217 ; 5 | 1.446 ; ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf607_fitresult.C. tutorialsroofitrf607_fitresult.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf607__fitresult_8C.html:10842,Guid,Guide,10842,doc/master/rf607__fitresult_8C.html,https://root.cern,https://root.cern/doc/master/rf607__fitresult_8C.html,1,['Guid'],['Guide']
Usability,"e->GetMatrix();; 1626 fGeoManager->SetMatrixReflection(matrix->IsReflection());; 1627 fGeoManager->SetPaintVolume(vcrt);; 1628 if (!node->IsVolAttributes() && !strstr(option, ""range"")) {; 1629 col = vcrt->GetLineColor();; 1630 wid = vcrt->GetLineWidth();; 1631 sty = vcrt->GetLineStyle();; 1632 vcrt->SetLineColor(node->GetLineColor());; 1633 vcrt->SetLineWidth(node->GetLineWidth());; 1634 vcrt->SetLineStyle(node->GetLineStyle());; 1635 ((TAttLine *)vcrt)->Modify();; 1636 PaintShape(*shape, option);; 1637 vcrt->SetLineColor(col);; 1638 vcrt->SetLineWidth(wid);; 1639 vcrt->SetLineStyle(sty);; 1640 } else {; 1641 PaintShape(*shape, option);; 1642 }; 1643 } else {; 1644 // Paint full branch, except top node; 1645 for (i = 1; i <= level; i++) {; 1646 vcrt = node->GetVolume(i);; 1647 if (!strstr(option, ""range"")); 1648 ((TAttLine *)vcrt)->Modify();; 1649 shape = vcrt->GetShape();; 1650 *matrix = node->GetMatrix(i);; 1651 fGeoManager->SetMatrixReflection(matrix->IsReflection());; 1652 fGeoManager->SetPaintVolume(vcrt);; 1653 if (!node->IsVolAttributes() && !strstr(option, ""range"")) {; 1654 col = vcrt->GetLineColor();; 1655 wid = vcrt->GetLineWidth();; 1656 sty = vcrt->GetLineStyle();; 1657 vcrt->SetLineColor(node->GetLineColor());; 1658 vcrt->SetLineWidth(node->GetLineWidth());; 1659 vcrt->SetLineStyle(node->GetLineStyle());; 1660 ((TAttLine *)vcrt)->Modify();; 1661 PaintShape(*shape, option);; 1662 vcrt->SetLineColor(col);; 1663 vcrt->SetLineWidth(wid);; 1664 vcrt->SetLineStyle(sty);; 1665 } else {; 1666 PaintShape(*shape, option);; 1667 }; 1668 }; 1669 }; 1670 fGeoManager->SetMatrixReflection(kFALSE);; 1671}; 1672 ; 1673////////////////////////////////////////////////////////////////////////////////; 1674/// Print overlaps (see TGeoChecker::PrintOverlaps()); 1675 ; 1676void TGeoPainter::PrintOverlaps() const; 1677{; 1678 fChecker->PrintOverlaps();; 1679}; 1680 ; 1681////////////////////////////////////////////////////////////////////////////////; 1682/// Text progress bar.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:54736,progress bar,progress bar,54736,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"e-WM"" - does server run on MacOS X;; ""XINERAMA"" - does server support Xinerama.; See also the output of xdpyinfo. void PutImage(Int_t offset, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t* image, Drawable_t id). void MapGCValues(GCValues_t& gval, ULong_t& xmask, RXGCValues& xgval, Bool_t tox = kTRUE); Private methods used for GUI. void MapSetWindowAttributes(SetWindowAttributes_t* attr, ULong_t& xmask, RXSetWindowAttributes& xattr). void MapColorStruct(ColorStruct_t* color, RXColor& xcolor). void MapPictureAttributes(PictureAttributes_t& attr, RXpmAttributes& xpmattr, Bool_t toxpm = kTRUE). void MapEvent(Event_t& ev, void* xev, Bool_t tox = kTRUE); void MapEvent(Event_t &ev, XEvent &xev, Bool_t tox = kTRUE);. void MapEventMask(UInt_t& emask, UInt_t& xemask, Bool_t tox = kTRUE). void MapKeySym(UInt_t& keysym, UInt_t& xkeysym, Bool_t tox = kTRUE). Bool_t AllocColor(Colormap cmap, RXColor* color); needed by TGX11TTF. void ClearWindow(). void DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2). void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode). Handle_t GetNativeEvent() const; { return (Handle_t) fXEvent; }. void GetTextExtent(UInt_t& w, UInt_t& h, char* mess). Float_t GetTextMagnitude(); { return fTextMagnitude; }. Bool_t HasTTFonts() const; { return fHasTTFonts; }. void MoveWindow(Int_t wid, Int_t x, Int_t y). Int_t OpenDisplay(void* display). void QueryPointer(Int_t& ix, Int_t& iy). void ResizeWindow(Int_t wid). void SetCursor(Int_t win, ECursor cursor). void SetTextMagnitude(Float_t mgn = 1); { fTextMagnitude = mgn;}. void GetWindowAttributes(Window_t id, WindowAttributes_t& attr); Methods used for GUI. void MapWindow(Window_t id). void MapSubwindows(Window_t id). void MapRaised(Window_t id). void UnmapWindow(Window_t id). void DestroyWindow(Window_t id). void DestroySubwindows(Window_t id). void RaiseWindow(Window_t id). void LowerWindow(Window_t id). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11.html:41428,Clear,ClearWindow,41428,root/html602/TGX11.html,https://root.cern,https://root.cern/root/html602/TGX11.html,2,['Clear'],['ClearWindow']
Usability,"e. #include ""TTreeProxyGenerator.h""; #include ""TFriendProxyDescriptor.h""; #include ""TBranchProxyDescriptor.h""; #include ""TBranchProxyClassDescriptor.h""; #include ""TList.h""; #include ""Varargs.h""; #include <cstdio>; #include ""TClass.h""; #include ""TClassEdit.h""; #include ""TClonesArray.h""; #include ""TError.h""; #include ""TROOT.h""; #include ""TObjString.h""; #include ""TTreeFormula.h""; #include ""TFormLeafInfo.h""; #include ""TBranchElement.h""; #include ""TChain.h""; #include ""TFile.h""; #include ""TFriendElement.h""; #include ""TLeaf.h""; #include ""TLeafC.h""; #include ""TTree.h""; #include ""TVirtualStreamerInfo.h""; #include ""TStreamerElement.h""; #include ""TSystem.h""; #include ""TLeafObject.h""; #include ""TVirtualCollectionProxy.h"". Include dependency graph for TTreeProxyGenerator.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Functions; void Debug (Int_t level, const char *fmt,...);  ; TString ROOT::Internal::GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; static bool ROOT::Internal::R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool ROOT::Internal::R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  . Function Documentation. ◆ Debug(). void Debug ; (; Int_t ; level, . const char * ; fmt, .  ; ... . ). Definition at line 79 of file TTreeProxyGenerator.cxx. treetreeplayersrcTTreeProxyGenerator.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeProxyGenerator_8cxx.html:2132,Guid,Guide,2132,doc/master/TTreeProxyGenerator_8cxx.html,https://root.cern,https://root.cern/doc/master/TTreeProxyGenerator_8cxx.html,1,['Guid'],['Guide']
Usability,"e. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >Adadelta Optimizer class. ; This class represents the Adadelta Optimizer. ; Definition at line 45 of file Adadelta.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdadelta (DeepNet_t &deepNet, Scalar_t learningRate=1.0, Scalar_t rho=0.95, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdadelta ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredBiasUpdatesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredWeightUpdatesAt (size_t i);  ; Scalar_t GetRho () const;  Getters. ;  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html:1116,learn,learningRate,1116,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,1,['learn'],['learningRate']
Usability,"e. ; Reimplemented from RooAbsReal.; Definition at line 32 of file RooConstVar.h. ◆ IsA(). TClass * RooConstVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 59 of file RooConstVar.h. ◆ isDerived(). bool RooConstVar::isDerived ; (; ); const. inlineoverridevirtual . Returns false, as the value of the constant doesn't depend on other objects. ; Reimplemented from RooAbsArg.; Definition at line 39 of file RooConstVar.h. ◆ Streamer(). void RooConstVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooConstVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file RooConstVar.h. ◆ translate(). void RooConstVar::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 61 of file RooConstVar.cxx. ◆ writeToStream(). void RooConstVar::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream. ; Reimplemented from RooAbsReal.; Definition at line 54 of file RooConstVar.cxx. Libraries for RooConstVar:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooConstVar.h; roofit/roofitco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:62822,simpl,simple,62822,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,1,['simpl'],['simple']
Usability,e. ;  ; bool Set (Experimental::EIOFeatures bits);  Set a specific IO feature. ;  ; bool Test (EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOUnsupportedFeatures bits) const;  . Static Public Attributes; static constexpr int kIOFeatureCount = 1;  . Private Member Functions;  TIOFeatures (UChar_t IOBits);  ; UChar_t GetFeatures () const;  ; void Set (UChar_t newBits);  . Private Attributes; UChar_t fIOBits {0};  . Friends; class ::TBasket;  ; class ::TBranch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documentation. ◆ TIOFeatures() [1/2]. ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:3175,Clear,Clear,3175,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Clear'],['Clear']
Usability,"e. ;  ; virtual void CurrentChanged (TQCommand *c);  emit signal ;  ; TQCommand * GetCurrent () const;  Returns the last executed command. ;  ; TQCommand * GetCursor () const;  Returns a command correspondent to the current cursor position in stack. ;  ; UInt_t GetLimit () const;  Returns a maximum number of commands which could be located in stack. ;  ; TClass * IsA () const override;  ; Bool_t IsLogging () const;  Returns kTRUE if logging is ON. ;  ; void ls (Option_t *option="""") const override;  Lists all commands in stack. ;  ; void Redo (Option_t *option="""") override;  Performs redo action. Move cursor position forward in history stack. ;  ; virtual void SetLimit (UInt_t limit);  Returns a maximum number of commands which could be located in stack. ;  ; virtual void SetLogging (Bool_t on=kTRUE);  Start logging. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Undo (Option_t *option="""") override;  Performs undo action. Move cursor position backward in history stack. ;  ;  Public Member Functions inherited from TQCommand;  TQCommand (const char *cl=nullptr, void *object=nullptr, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ;  TQCommand (const TQCommand &com);  Copy constructor. ;  ;  TQCommand (TObject *obj, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ; virtual ~TQCommand ();  dtor. ;  ; virtual Bool_t CanCompress (TQCommand *c) const;  By default, commands can be compressed if they are: ;  ; virtual Bool_t CanMerge (TQCommand *c) const;  Two commands can be merged if they can be composed into a single command (Macro command). ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the comm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:1804,Undo,Undo,1804,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"e. By default it is "" "". The caller; program owns the returned TLegend. If the pad contains some TMultiGraph or THStack the individual; graphs or histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number subpads.; Returns the new current pad, or 0 in case of failure.; For example:; c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do; c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; points to the current pad. One can use gPad to set attributes; of the current pad.; Note3: One can get a pointer to one of the sub-pads of pad with:; TPad *subpad = (TPad*)pad->GetPad(subpadnumber);. void Clear(Option_t* option = """"); Delete all pad primitives. If the bit kClearAfterCR has been set for this pad, the Clear function; will execute only after having pressed a CarriageReturn; Set the bit with mypad->SetBit(TPad::kClearAfterCR). Int_t Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); Clipping routine: Cohen Sutherland algorithm. If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. _Input parameters:. x[2], y[2] : Segment coordinates; xclipl, yclipb, xclipr, yclipt : Clipping boundary. _Output parameters:. x[2], y[2] : New segment coordinates. Int_t Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); Clipping routine: Cohen Sutherland algorithm. If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. _Inpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:33522,Clear,Clear,33522,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,3,['Clear'],['Clear']
Usability,"e. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const THnSparse* h, Double_t c = 1.); voidAddBinContent(const Int_t* x, Double_t v = 1.); voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THnSparse*CreateSparse(const char* name, const char* title, const TH1* h1, Int_t ChunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidDivide(const THnSparse* h); voidDivide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:5454,Clear,Clear,5454,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,2,['Clear'],['Clear']
Usability,"e. OperMode RooAbsArg::_operMode = Auto. mutableprotected . Definition at line 688 of file RooAbsArg.h. ◆ _ownedComponents. RooArgSet* RooAbsArg::_ownedComponents = nullptr. protected . Definition at line 692 of file RooAbsArg.h. ◆ _prohibitServerRedirect. bool RooAbsArg::_prohibitServerRedirect = false. mutableprotected . Set of owned component. ; Definition at line 694 of file RooAbsArg.h. ◆ _proxyList. RooRefArray RooAbsArg::_proxyList. protected . Definition at line 611 of file RooAbsArg.h. ◆ _proxyListCache. ProxyListCache RooAbsArg::_proxyListCache. protected . Definition at line 664 of file RooAbsArg.h. ◆ _serverList. RefCountList_t RooAbsArg::_serverList. protected . Definition at line 606 of file RooAbsArg.h. ◆ _shapeDirty. bool RooAbsArg::_shapeDirty = true. mutableprotected . Definition at line 686 of file RooAbsArg.h. ◆ _stringAttrib. std::map<std::string,std::string> RooAbsArg::_stringAttrib. protected . Definition at line 632 of file RooAbsArg.h. ◆ _valueDirty. bool RooAbsArg::_valueDirty = true. mutableprotected . Definition at line 685 of file RooAbsArg.h. ◆ _verboseDirty. bool RooAbsArg::_verboseDirty. staticprotected . cache of the list of proxies. Avoids type casting. ; Definition at line 667 of file RooAbsArg.h. ◆ const [1/2]. R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg& testArg RooAbsArg::const { return observableOverlaps(dset,testArg). Definition at line 145 of file RooAbsArg.h. ◆ const [2/2]. const RooAbsArg& testArg RooAbsArg::const { return observableOverlaps(depList, testArg). Definition at line 148 of file RooAbsArg.h. Libraries for RooAbsArg:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsArg.h; roofit/roofitcore/src/RooAbsArg.cxx. RooAbsArg. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:111744,Guid,Guide,111744,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['Guid'],['Guide']
Usability,"e. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TBuffer3D. class TBuffer3D: public TObject. TBuffer3D. Generic 3D primitive description class - see TBuffer3DTypes for; producer classes. ; Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; Some; need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). . The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use; TBuffer3D.; Complete the mandatory Core section.; Complete the ShapeSpecific section; if applicable.; Complete the BoundingBox if you can.; Pass this buffer to the viewer using; one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:1114,Clear,ClearSectionsValid,1114,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,14,"['Clear', 'clear']","['ClearSectionsValid', 'clear']"
Usability,"e. Such a range is called ""bin"". Let's look at an example: draw the histogram of the momentum (""fPt"") of all electrons with an energy (""fE"") > 80 and fTriggered being true.; Binning; You can tell TTree::Draw() what the binning should be:; tree->Draw(""electrons.fE >> htemp(15, 0., 30.)"",...). will use 15 bins, where the lower bin border of the first bin is at 0. and the upper bin border of the highest is at 30.; Style; ROOT displays a few properties for the histogram in the box in the upper right. You can move things around in the graphical display (""canvas"") of the histogram. You can modify graphical properties of the canvas by showing the editor: in the menu, select ""View"", then ""Editor"". Click on the histogram to select it, then change its visual appearance to magenta line, 5 pixels width, with pink fill. Eeew. This is likely the only time in your life that you are allowed to use this color combination - enjoy! :-); . ‹ 2. Running code in ROOT; up; 3. Examining a TTree's data ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:3509,Guid,Guides,3509,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"e. TGTextEntry * TGColorDialog::fLte. protected . Definition at line 155 of file TGColorDialog.h. ◆ fPalette. TGColorPalette* TGColorDialog::fPalette. protected . color palette ; Definition at line 150 of file TGColorDialog.h. ◆ fPreview. TGTextButton* TGColorDialog::fPreview. protected . preview button; ; Definition at line 163 of file TGColorDialog.h. ◆ fRetc. Int_t* TGColorDialog::fRetc. protected . return code (kMBOk, kMBCancel) ; Definition at line 146 of file TGColorDialog.h. ◆ fRetColor. Pixel_t* TGColorDialog::fRetColor. protected . return color ; Definition at line 147 of file TGColorDialog.h. ◆ fRetTColor. TColor* TGColorDialog::fRetTColor. protected . return TColor, needed for changed alpha ; Definition at line 148 of file TGColorDialog.h. ◆ fRtb. TGTextBuffer* TGColorDialog::fRtb. protected . Definition at line 156 of file TGColorDialog.h. ◆ fRte. TGTextEntry* TGColorDialog::fRte. protected . Definition at line 155 of file TGColorDialog.h. ◆ fSample. TGFrame* TGColorDialog::fSample. protected . color sample frame ; Definition at line 153 of file TGColorDialog.h. ◆ fSampleOld. TGFrame* TGColorDialog::fSampleOld. protected . color sample frame ; Definition at line 154 of file TGColorDialog.h. ◆ fStb. TGTextBuffer * TGColorDialog::fStb. protected . Definition at line 156 of file TGColorDialog.h. ◆ fSte. TGTextEntry * TGColorDialog::fSte. protected . Definition at line 155 of file TGColorDialog.h. ◆ fTab. TGTab* TGColorDialog::fTab. protected . tab widget holding the color selectors ; Definition at line 159 of file TGColorDialog.h. ◆ fWaitFor. Bool_t TGColorDialog::fWaitFor. protected . call WaitFor method in constructor ; Definition at line 157 of file TGColorDialog.h. Libraries for TGColorDialog:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGColorDialog.h; gui/gui/src/TGColorDialog.cxx. TGColorDialog. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorDialog.html:46764,Guid,Guide,46764,doc/master/classTGColorDialog.html,https://root.cern,https://root.cern/doc/master/classTGColorDialog.html,1,['Guid'],['Guide']
Usability,"e. These projections are useful for measurement or checking alignments, as the sizes and angles between objects are preserved. You can select the active camera from the viewer’s Camera menu on the top menu bar. There are three perspective camera choices:. Perspective (Floor XOZ) Default; Perspective (Floor YOZ); Perspective (Floor XOY). In each case the perspective camera is constrained to keep the chosen floor plane, defined by a pair of world axes, appearing level at all times - i.e. there is no banking of the ‘horizon’ that you experience when a plane rolls. There are also three orthographic camera choices:. Orthographic (XOY); Orthographic (XOZ); Orthographic (ZOY). Orthographic projections are generally constrained to look down one of the global axes of the world, with the other two axes lying horizontal/vertical on the viewer window. Therefore, XOY has the X-axis horizontal, the Y-axis vertical. You can always confirm the orientation and constraints of the camera in the world by enabling axis drawing in the “Guides” tab - see sections “Guides” and “Clipping” below. For orthographic camera a ruler-depicting current scene units is also available.; You can also pick the current camera by obtaining a handle to the GL Viewer object behind the interface:; TGLViewer * v = (TGLViewer *)gPad->GetViewer3D();; calling the method TGLViewer::SetCurrentCamera with one of the TGLViewer::ECameraType types:; v->SetCurrentCamera(TGLViewer::kCameraPerspXOZ);; See also $ROOTSYS/tutorials/gl/glViewerExercise.C.; 9.13.2.2 Adjusting Cameras; The interactions with the camera are summarized above. In each case the interaction is listed, along with description and user actions required to achieve it. For all cameras you can reset the original default view, framing the entire scene, by double clicking any mouse button. GL Viewer camera interactions. For the Zoom interaction you can use the following modifiers combinations to adjust the sensitivity:. Shiftx 10; Ctrlx 0.1; Shift + Ctrlx 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:389822,Guid,Guides,389822,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Guid'],['Guides']
Usability,"e. Values of up to 10 indicate increasing smoothness. ; [in]isPeriodicif TRUE, the x values are assumed to be in [0, 1] and of period 1. ; [in]wcase weights. Details:; supsmu is a running lines smoother which chooses between three spans for the lines. The running lines smoothers are symmetric, with k/2 data points each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and 0.05 * n, where n is the number of data points. If span is specified, a single smoother with span span * n is used.; The best of the three smoothers is chosen by cross-validation for each prediction. The best spans are then smoothed by a running lines smoother and the final prediction chosen by linear interpolation.; The FORTRAN code says: `‘For small samples (n < 40) or if there are substantial serial correlations between observations close in x - value, then a prespecified fixed span smoother (span > 0) should be used. Reasonable span values are 0.2 to 0.4.’'; References:; Friedman, J. H. (1984) SMART User's Guide. Laboratory for Computational Statistics, Stanford University Technical Report No. 1.; Friedman, J. H. (1984) A variable span scatterplot smoother. Laboratory for Computational Statistics, Stanford University Technical Report No. 5. . Definition at line 479 of file TGraphSmooth.cxx. ◆ Streamer(). void TGraphSmooth::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphSmooth::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file TGraphSmooth.h. Member Data Documentation. ◆ fGin. TGraph* TGraphSmooth::fGin. protected . Input graph. ; Definition at line 43 of file TGraphSmooth.h. ◆ fGout. TGraph* TGraphSmooth::fGout. protected . Output graph. ; Definition at line 44 of file TGraphSmooth.h. ◆ fMaxX. Double_t TGraphSmooth::fMaxX. protected . Maximum value of array X. ; Definition at line 46 of file TGraphSmooth.h. ◆ fMinX. Double_t TGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphSmooth.html:26804,Guid,Guide,26804,doc/master/classTGraphSmooth.html,https://root.cern,https://root.cern/doc/master/classTGraphSmooth.html,1,['Guid'],['Guide']
Usability,e. protected . Definition at line 123 of file SamplingDistPlot.h. ◆ fLogYaxis. bool RooStats::SamplingDistPlot::fLogYaxis = false. protected . Definition at line 124 of file SamplingDistPlot.h. ◆ fMarkerType. Int_t RooStats::SamplingDistPlot::fMarkerType = 20. private . Definition at line 110 of file SamplingDistPlot.h. ◆ fOtherItems. TList RooStats::SamplingDistPlot::fOtherItems. protected . other objects to be drawn like TLine etc. ; Definition at line 121 of file SamplingDistPlot.h. ◆ fRooPlot. RooPlot* RooStats::SamplingDistPlot::fRooPlot = nullptr. protected . Definition at line 122 of file SamplingDistPlot.h. ◆ fSampleWeights. std::vector<double> RooStats::SamplingDistPlot::fSampleWeights. private . Definition at line 105 of file SamplingDistPlot.h. ◆ fSamplingDistr. std::vector<double> RooStats::SamplingDistPlot::fSamplingDistr. private . Definition at line 104 of file SamplingDistPlot.h. ◆ fVarName. TString RooStats::SamplingDistPlot::fVarName. private . Definition at line 113 of file SamplingDistPlot.h. ◆ fXMax. double RooStats::SamplingDistPlot::fXMax = std::numeric_limits<float>::quiet_NaN(). protected . Definition at line 127 of file SamplingDistPlot.h. ◆ fXMin. double RooStats::SamplingDistPlot::fXMin = std::numeric_limits<float>::quiet_NaN(). protected . Definition at line 126 of file SamplingDistPlot.h. ◆ fYMax. double RooStats::SamplingDistPlot::fYMax = std::numeric_limits<float>::quiet_NaN(). protected . Definition at line 129 of file SamplingDistPlot.h. ◆ fYMin. double RooStats::SamplingDistPlot::fYMin = std::numeric_limits<float>::quiet_NaN(). protected . Definition at line 128 of file SamplingDistPlot.h. Libraries for RooStats::SamplingDistPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/SamplingDistPlot.h; roofit/roostats/src/SamplingDistPlot.cxx. RooStatsSamplingDistPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistPlot.html:29965,Guid,Guide,29965,doc/master/classRooStats_1_1SamplingDistPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistPlot.html,1,['Guid'],['Guide']
Usability,"e. protected:. TStringTNamed::fNameobject identifier; TGeoRotation*fRotationrotation matrix; TStringTNamed::fTitleobject title; Double_tfTranslation[3]translation vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTrans(); dummy ctor. TGeoCombiTrans(const TGeoCombiTrans& other); Copy ctor. TGeoCombiTrans(const TGeoMatrix& other); Copy ctor. TGeoCombiTrans(const TGeoTranslation& tr, const TGeoRotation& rot); Constructor from a translation and a rotation. TGeoCombiTrans(const char* name); Named ctor. TGeoCombiTrans(Double_t dx, Double_t dy, Double_t dz, TGeoRotation* rot); Constructor from a translation specified by X,Y,Z and a pointer to a rotation. The rotation will not be owned by this. TGeoCombiTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation* rot); Named ctor. TGeoCombiTrans & operator=(const TGeoMatrix& matrix); Assignment operator. ~TGeoCombiTrans(); destructor. void Clear(Option_t* option = """"); Reset translation/rotation to identity. TGeoMatrix& Inverse() const; Return a temporary inverse of this. TGeoMatrix * MakeClone() const; Make a clone of this matrix. void RegisterYourself(); Register the matrix in the current manager, which will become the owner. void RotateX(Double_t angle); Rotate about X axis with angle expressed in degrees. void RotateY(Double_t angle); Rotate about Y axis with angle expressed in degrees. void RotateZ(Double_t angle); Rotate about Z axis with angle expressed in degrees. void ReflectX(Bool_t leftside, Bool_t rotonly = kFALSE); Multiply by a reflection respect to YZ. void ReflectY(Bool_t leftside, Bool_t rotonly = kFALSE); Multiply by a reflection respect to ZX. void ReflectZ(Bool_t leftside, Bool_t rotonly = kFALSE); Multiply by a reflection respect to XY. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetRotation(const TGeoRotation* rot); Assign a foreign rotation to the co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoCombiTrans.html:16760,Clear,Clear,16760,root/html602/TGeoCombiTrans.html,https://root.cern,https://root.cern/root/html602/TGeoCombiTrans.html,2,['Clear'],['Clear']
Usability,"e.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TASPluginGS::HashULong_t Hash() const overrideReturn hash value for this object.Definition TASPluginGS.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TASImagePlugin.; Definition at line 34 of file TASPluginGS.h. ◆ IsA(). TClass * TASPluginGS::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TASImagePlugin.; Definition at line 38 of file TASPluginGS.h. ◆ Streamer(). void TASPluginGS::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TASImagePlugin. ◆ StreamerNVirtual(). void TASPluginGS::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 38 of file TASPluginGS.h. Member Data Documentation. ◆ fInterpreter. char* TASPluginGS::fInterpreter. private . path to GhostScript interpreter ; Definition at line 28 of file TASPluginGS.h. Libraries for TASPluginGS:. [legend]; The documentation for this class was generated from the following files:; graf2d/asimage/inc/TASPluginGS.h; graf2d/asimage/src/TASPluginGS.cxx. TASPluginGS. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPluginGS.html:15011,Guid,Guide,15011,doc/master/classTASPluginGS.html,https://root.cern,https://root.cern/doc/master/classTASPluginGS.html,1,['Guid'],['Guide']
Usability,"e.Definition TText.cxx:823; TText::GetControlBoxvirtual void GetControlBox(Int_t x, Int_t y, Double_t theta, Int_t cBoxX[4], Int_t cBoxY[4])Return the text control box.Definition TText.cxx:424; TVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG.Definition TVirtualPS.h:30; TVirtualPS::Textvirtual void Text(Double_t x, Double_t y, const char *string)=0; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TLatex::TextSpec_tTLatex helper struct holding the attributes of a piece of text.Definition TLatex.h:24; TLatex::TextSpec_t::fFontInt_t fFontDefinition TLatex.h:26; TLatex::TextSpec_t::fSizeDouble_t fSizeDefinition TLatex.h:25; TLatex::TextSpec_t::fAngleDouble_t fAngleDefinition TLatex.h:25; TLatex::TextSpec_t::fColorInt_t fColorDefinition TLatex.h:26; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. graf2dgrafsrcTLatex.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:116183,Guid,Guide,116183,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['Guid'],['Guide']
Usability,e.cxx. ◆ GetResults(). const VariableImportanceResult & TMVA::VariableImportance::GetResults ; (; ); const. inline . Definition at line 58 of file VariableImportance.h. ◆ GetType(). VIType TMVA::VariableImportance::GetType ; (; ). inline . Definition at line 56 of file VariableImportance.h. ◆ IsA(). virtual TClass * TMVA::VariableImportance::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Envelope.; Definition at line 75 of file VariableImportance.h. ◆ SetType(). void TMVA::VariableImportance::SetType ; (; VIType ; type). inline . Definition at line 55 of file VariableImportance.h. ◆ Streamer(). virtual void TMVA::VariableImportance::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Envelope. ◆ StreamerNVirtual(). void TMVA::VariableImportance::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file VariableImportance.h. ◆ Sum(). ULong_t TMVA::VariableImportance::Sum ; (; ULong_t ; i). protected . Definition at line 131 of file VariableImportance.cxx. Member Data Documentation. ◆ fClassifier. std::unique_ptr<Factory> TMVA::VariableImportance::fClassifier. private . Definition at line 74 of file VariableImportance.h. ◆ fNumFolds. UInt_t TMVA::VariableImportance::fNumFolds = 0. private . Definition at line 46 of file VariableImportance.h. ◆ fResults. VariableImportanceResult TMVA::VariableImportance::fResults. private . Definition at line 47 of file VariableImportance.h. ◆ fType. VIType TMVA::VariableImportance::fType {kShort}. private . Definition at line 48 of file VariableImportance.h. Libraries for TMVA::VariableImportance:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VariableImportance.h; tmva/tmva/src/VariableImportance.cxx. TMVAVariableImportance. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html:21656,Guid,Guide,21656,doc/master/classTMVA_1_1VariableImportance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html,1,['Guid'],['Guide']
Usability,"e.h:23; TCurlyLine::fWaveLengthDouble_t fWaveLengthwavelength of sinusoid in percent of pad heightDefinition TCurlyLine.h:26; TCurlyLine::fAmplitudeDouble_t fAmplitudeamplitude of sinusoid in percent of pad heightDefinition TCurlyLine.h:27; TCurlyLine::SetStartPointvirtual void SetStartPoint(Double_t x1, Double_t y1)Set start point.Definition TCurlyLine.cxx:396; TCurlyLine::fNstepsInt_t fNstepsused internally (controls precision)Definition TCurlyLine.h:28; TCurlyLine::Buildvirtual void Build()Create a curly (Gluon) or wavy (Gamma) line.Definition TCurlyLine.cxx:77; TCurlyLine::fY2Double_t fY2end yDefinition TCurlyLine.h:25; TCurlyLine::fX1Double_t fX1start x, center for arcDefinition TCurlyLine.h:22; TCurlyLine::fX2Double_t fX2end xDefinition TCurlyLine.h:24; TCurlyLine::fIsCurlyBool_t fIsCurlytrue: Gluon, false: GammaDefinition TCurlyLine.h:29; TPointDefinition TPoint.h:31; TPolyLine::GetXDouble_t * GetX() constDefinition TPolyLine.h:54; TPolyLine::GetYDouble_t * GetY() constDefinition TPolyLine.h:55; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; R2#define R2(v, w, x, y, z, i)Definition sha1.inl:137; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361. graf2dgrafsrcTCurlyArc.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCurlyArc_8cxx_source.html:29586,Guid,Guide,29586,doc/master/TCurlyArc_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCurlyArc_8cxx_source.html,1,['Guid'],['Guide']
Usability,"e0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:158064,simpl,simple,158064,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"e2D %s has extra following bins without labels. Sorting will work only for first label bins"",; 1074 axis->GetName(), GetName());; 1075 }; 1076 ; 1077 std::vector<Int_t> a(n);; 1078 Int_t i, j, k, ibin, bin;; 1079 std::vector<Double_t> sumw(fNcells);; 1080 std::vector<Double_t> errors(fNcells);; 1081 std::vector<Double_t> ent(fNcells);; 1082 std::vector<Double_t> binsw2;; 1083 if (fBinSumw2.fN); 1084 binsw2.resize(fNcells);; 1085 ; 1086 // delete buffer if it is there since bins will be reordered.; 1087 if (fBuffer); 1088 BufferEmpty(1);; 1089 ; 1090 // number of bins to loop; 1091 Int_t nx = (axis == GetXaxis()) ? n + 1 : fXaxis.GetNbins() + 2;; 1092 Int_t ny = (axis == GetYaxis()) ? n + 1 : fYaxis.GetNbins() + 2;; 1093 ; 1094 // make a labelold list but ordered with bins; 1095 // (re-ordered original label list); 1096 std::vector<TObject *> labold(n);; 1097 for (i = 0; i < n; i++); 1098 labold[i] = nullptr;; 1099 TIter nextold(labels);; 1100 TObject *obj;; 1101 while ((obj = nextold())) {; 1102 bin = obj->GetUniqueID();; 1103 if (bin>=1 && bin<=n); 1104 labold[bin-1] = obj;; 1105 }; 1106 // order now labold according to bin content; 1107 ; 1108 labels->Clear();; 1109 ; 1110 std::vector<Double_t> pcont;; 1111 std::vector<Double_t> econt;; 1112 if (sort > 0) {; 1113 pcont.resize(n);; 1114 econt.resize(n);; 1115 }; 1116 ; 1117 for (i = 0; i < nx; i++) {; 1118 for (j = 0; j < ny; j++) {; 1119 bin = GetBin(i, j);; 1120 sumw[bin] = fArray[bin];; 1121 errors[bin] = fSumw2.fArray[bin];; 1122 ent[bin] = fBinEntries.fArray[bin];; 1123 if (fBinSumw2.fN); 1124 binsw2[bin] = fBinSumw2.fArray[bin];; 1125 if (axis == GetXaxis()); 1126 k = i - 1;; 1127 else; 1128 k = j - 1;; 1129 //---when sorting by values of bins; 1130 if (sort > 0 && fBinEntries.fArray[bin] != 0 && k > 0 && k < n) {; 1131 pcont[k] += fArray[bin];; 1132 econt[k] += fBinEntries.fArray[bin];; 1133 }; 1134 }; 1135 }; 1136 // compute average of slize for ordering; 1137 if (sort > 0) {; 1138 for (k = 0; k < n; ++k) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:39101,Clear,Clear,39101,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['Clear'],['Clear']
Usability,"e4); virtual~TAttParticle(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Int_tConvertISAtoPDG(Int_t isaNumber); virtual voidTNamed::Copy(TObject& named) const; static voidDefinePDG(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttParticle.html:968,Clear,Clear,968,root/html526/TAttParticle.html,https://root.cern,https://root.cern/root/html526/TAttParticle.html,5,['Clear'],['Clear']
Usability,"e::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCondorSlave::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCondorSlave::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 46 of file TCondor.h. ◆ DeclFileName(). static const char * TCondorSlave::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 46 of file TCondor.h. ◆ IsA(). TClass * TCondorSlave::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 46 of file TCondor.h. ◆ Print(). void TCondorSlave::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print worker status. ; Reimplemented from TObject.; Definition at line 479 of file TCondor.cxx. ◆ Streamer(). void TCondorSlave::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCondorSlave::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 46 of file TCondor.h. Member Data Documentation. ◆ fClaimID. TString TCondorSlave::fClaimID. Definition at line 40 of file TCondor.h. ◆ fHostname. TString TCondorSlave::fHostname. Definition at line 36 of file TCondor.h. ◆ fImage. TString TCondorSlave::fImage. Definition at line 39 of file TCondor.h. ◆ fOrdinal. TString TCondorSlave::fOrdinal. Definition at line 41 of file TCondor.h. ◆ fPerfIdx. Int_t TCondorSlave::fPerfIdx. Definition at line 38 of file TCondor.h. ◆ fPort. Int_t TCondorSlave::fPort. Definition at line 37 of file TCondor.h. ◆ fWorkDir. TString TCondorSlave::fWorkDir. Definition at line 42 of file TCondor.h. proof/proof/inc/TCondor.h; proof/proof/src/TCondor.cxx. TCondorSlave. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondorSlave.html:12004,Guid,Guide,12004,doc/master/classTCondorSlave.html,https://root.cern,https://root.cern/doc/master/classTCondorSlave.html,1,['Guid'],['Guide']
Usability,"e::GetBBoxCenterTPoint GetBBoxCenter() overrideReturn the center of the BoundingBox as TPoint in pixels.Definition TLine.cxx:569; TLine::SetX1virtual void SetX1(Double_t x1)Definition TLine.h:65; TLine::operator=TLine & operator=(const TLine &src)Assignment operator.Definition TLine.cxx:67; TLine::fY2Double_t fY2Y of 2nd point.Definition TLine.h:28; TLine::PaintLineNDCvirtual void PaintLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2)Draw this line with new coordinates in NDC.Definition TLine.cxx:409; TLine::SetBBoxCenterXvoid SetBBoxCenterX(const Int_t x) overrideSet X coordinate of the center of the BoundingBox.Definition TLine.cxx:607; TLine::SetY1virtual void SetY1(Double_t y1)Definition TLine.h:67; TLine::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mode on if isNDC = kTRUE, off otherwise.Definition TLine.cxx:467; TLine::SetBBoxCentervoid SetBBoxCenter(const TPoint &p) overrideSet center of the BoundingBox.Definition TLine.cxx:581; TLine::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TLine.cxx:132; TLine::GetX1Double_t GetX1() constDefinition TLine.h:50; TLine::GetBBoxRectangle_t GetBBox() overrideReturn the bounding Box of the Line.Definition TLine.cxx:544; TLine::SetHorizontalvoid SetHorizontal(Bool_t set=kTRUE)Force the line to be drawn horizontally.Definition TLine.cxx:478; TLine::GetY2Double_t GetY2() constDefinition TLine.h:53; TObjectMother of all ROOT objects.Definition TObject.h:41; TPointDefinition TPoint.h:31; double; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; v2@ v2Definition rootcling_impl.cxx:3702; v1@ v1Definition rootcling_impl.cxx:3701; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361. graf2dgrafincTLine.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLine_8h_source.html:9484,Guid,Guide,9484,doc/master/TLine_8h_source.html,https://root.cern,https://root.cern/doc/master/TLine_8h_source.html,1,['Guid'],['Guide']
Usability,"e::RElement::GetTitlevirtual std::string GetTitle() constTitle of browsable (optional)Definition RElement.hxx:71; ROOT::Browsable::RElement::ComparePathsstatic int ComparePaths(const RElementPath_t &path1, const RElementPath_t &path2)Compare two paths, Returns number of elements matches in both paths.Definition RElement.cxx:145; ROOT::Browsable::RElement::GetPathAsStringstatic std::string GetPathAsString(const RElementPath_t &path)Converts element path back to string.Definition RElement.cxx:160; ROOT::Browsable::RElement::GetSubElementstatic std::shared_ptr< RElement > GetSubElement(std::shared_ptr< RElement > &elem, const RElementPath_t &path)Returns sub element.Definition RElement.cxx:69; ROOT::Browsable::RElement::CreateItemvirtual std::unique_ptr< RItem > CreateItem() constReturns item with element description.Definition RElement.cxx:105; ROOT::Browsable::RElement::ParsePathstatic RElementPath_t ParsePath(const std::string &str)Parse string path to produce RElementPath_t One should avoid to use string pathes as much as possible...Definition RElement.cxx:116; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; TBufferJSON::ConvertToJSONstatic TString ConvertToJSON(const TObject *obj, Int_t compact=0, const char *member_name=nullptr)Converts object, inherited from TObject class, to JSON string Lower digit of compact parameter define...Definition TBufferJSON.cxx:522; TString::Dataconst char * Data() constDefinition TString.h:376; nconst Int_t nDefinition legend1.C:16; ROOT::BrowsableDefinition RAnyObjectHolder.hxx:15; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOT::BrowsableLogROOT::Experimental::RLogChannel & BrowsableLog()Log channel for Browsable diagnostics.Definition RElement.cxx:20; slashTCanvas * slash()Definition slash.C:1. guibrowsablesrcRElement.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RElement_8cxx_source.html:9891,Guid,Guide,9891,doc/master/RElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RElement_8cxx_source.html,1,['Guid'],['Guide']
Usability,"e::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:139847,Simpl,Simple,139847,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['Simpl'],['Simple']
Usability,"e::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:18719,undo,undo,18719,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"e::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 1000000. You can use the option ""goff"" to turn off the graphics output; of TTree::Draw in the above example. Automatic interface to TTree::Draw via the TTreeViewer. A complete graphical interface to this function is implemented; in the class TTreeViewer.; To start the TTreeViewer, three possibilities:; - select TTree context menu item ""StartViewer""; - type the command ""TTreeViewer TV(treeName)""; - execute statement ""tree->StartViewer();"". void DropBaskets(); Remove some baskets from memory. void DropBuffers(Int_t nbytes); Drop branch buffers to accomodate nbytes below MaxVirtualsize. Int_t Fill(); Fill all branches. This function loops on all the branches of this tree. For; each branch, it copies to the branch buffer (basket) the current; values of the leaves data types. If a leaf is a simple data type,; a simple conversion to a machine independent format has to be done. This machine independent version of the data is copied into a; basket (each branch has its own basket). When a basket is full; (32k worth of data by default), it is then optionally compressed; and written to disk (this operation is also called comitting or; 'flushing' the basket). The committed baskets are then; immediately removed from memory. The function returns the number of bytes committed to the; individual branches. If a write error occurs, the number of bytes returned is -1. If no data are written, because, e.g., the branch is disabled,; the number of bytes returned is 0. The baskets are flushed and the Tree header saved at regular intervals. At regular intervals, when the amount of data written so far is; greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk.; This makes future reading faster as it guarantees that baskets belonging to nearby; entries will be on the same disk region.; When the first ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:82453,simpl,simple,82453,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['simpl'],['simple']
Usability,"e::SetTitle ; (; TGString * ; title). virtual . Set or change title of the group frame. ; Title TGString is adopted by the TGGroupFrame. ; Reimplemented in TGButtonGroup.; Definition at line 2308 of file TGFrame.cxx. ◆ SetTitlePos(). virtual void TGGroupFrame::SetTitlePos ; (; ETitlePos ; pos = kLeft). inlinevirtual . Definition at line 564 of file TGFrame.h. ◆ Streamer(). void TGGroupFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame.; Reimplemented in TGVButtonGroup, and TGHButtonGroup. ◆ StreamerNVirtual(). void TGGroupFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 576 of file TGFrame.h. Member Data Documentation. ◆ fFontStruct. FontStruct_t TGGroupFrame::fFontStruct. protected . title fontstruct ; Definition at line 526 of file TGFrame.h. ◆ fgDefaultFont. const TGFont * TGGroupFrame::fgDefaultFont = nullptr. staticprotected . Definition at line 533 of file TGFrame.h. ◆ fgDefaultGC. const TGGC * TGGroupFrame::fgDefaultGC = nullptr. staticprotected . Definition at line 534 of file TGFrame.h. ◆ fHasOwnFont. Bool_t TGGroupFrame::fHasOwnFont. protected . kTRUE - font defined locally, kFALSE - globally ; Definition at line 529 of file TGFrame.h. ◆ fNormGC. GContext_t TGGroupFrame::fNormGC. protected . title graphics context ; Definition at line 527 of file TGFrame.h. ◆ fText. TGString* TGGroupFrame::fText. protected . title text ; Definition at line 525 of file TGFrame.h. ◆ fTitlePos. Int_t TGGroupFrame::fTitlePos. protected . OPTION={GetMethod=""GetTitlePos"";SetMethod=""SetTitlePos"";Items=(-1=""Left"",0=""Center"",1=""Right"")} ; Definition at line 528 of file TGFrame.h. Libraries for TGGroupFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFrame.h; gui/gui/src/TGFrame.cxx. TGGroupFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGroupFrame.html:40190,Guid,Guide,40190,doc/master/classTGGroupFrame.html,https://root.cern,https://root.cern/doc/master/classTGGroupFrame.html,1,['Guid'],['Guide']
Usability,e::SetToggledVariable ; (; Int_t & ; var). virtual . Initializes object for use with a variable - you pass it via reference so it will be modified by Toggle. ; Definition at line 59 of file TToggle.cxx. ◆ SetValue(). void TToggle::SetValue ; (; Long_t ; val). virtual . Sets the value of toggle and modifies its state according to whether the value is equal to fOnValue. ; Definition at line 98 of file TToggle.cxx. ◆ Streamer(). void TToggle::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TToggle::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TToggle.h. ◆ Toggle(). void TToggle::Toggle ; (; ). virtual . Toggles the Values and State of this object and connected data! ; Definition at line 112 of file TToggle.cxx. Member Data Documentation. ◆ fGetter. TMethodCall* TToggle::fGetter. protected . Definition at line 58 of file TToggle.h. ◆ fInitialized. Bool_t TToggle::fInitialized. protected . Definition at line 56 of file TToggle.h. ◆ fObject. TObject* TToggle::fObject. protected . Definition at line 57 of file TToggle.h. ◆ fOffValue. Long_t TToggle::fOffValue. private . Definition at line 52 of file TToggle.h. ◆ fOnValue. Long_t TToggle::fOnValue. private . Definition at line 51 of file TToggle.h. ◆ fSetter. TMethodCall* TToggle::fSetter. protected . Definition at line 59 of file TToggle.h. ◆ fState. Bool_t TToggle::fState. private . Definition at line 50 of file TToggle.h. ◆ fTglVariable. Int_t* TToggle::fTglVariable. protected . Definition at line 61 of file TToggle.h. ◆ fValue. Longptr_t TToggle::fValue. private . Definition at line 53 of file TToggle.h. Libraries for TToggle:. [legend]; The documentation for this class was generated from the following files:; core/gui/inc/TToggle.h; core/gui/src/TToggle.cxx. TToggle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTToggle.html:17787,Guid,Guide,17787,doc/master/classTToggle.html,https://root.cern,https://root.cern/doc/master/classTToggle.html,1,['Guid'],['Guide']
Usability,"e::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; TGButtonGroup*fgrGroup the Radiobuttons:. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of graph editor. ~TPieEditor(); Destructor of pie editor. void ConnectSignals2Slots(); Connect signals to slots. void ActivateBaseClassEditors(TClass* ); Exclude TAttTextEditor from this interface. void SetModel(TObject* ); Pick up the used values of graph attributes. void DoTitle(const char* text); Slot for setting the graph title. void DoShape(); Slot connected to the draw options. void DoMarkerOnOff(Bool_t on); Slot for setting markers as visible/invisible. void DoChange3DAngle(); Slot for setting the 3D angle. void DoGraphLineWidth(); Slot connected to the graph line width. void DoTextChange(); Change text. TGComboBox* BuildFontSizeComboBox(TGFrame* , Int_t ); Create text size combo box. » Author: Guido Volpi 04/10/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPieEditor.html:21678,Guid,Guido,21678,root/html534/TPieEditor.html,https://root.cern,https://root.cern/root/html534/TPieEditor.html,1,['Guid'],['Guido']
Usability,"e::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoHypeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for Hype editor. ~TGeoHypeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoRin(); Slot for Rin. void DoRout(); Slot for Rout. void DoDz(); Slot for Z. void DoStIn(); Slot for StIn. void DoStOut(); Slot for StOut. TGeoHypeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoHypeEditor.html:22325,undo,undoing,22325,root/html604/TGeoHypeEditor.html,https://root.cern,https://root.cern/root/html604/TGeoHypeEditor.html,1,['undo'],['undoing']
Usability,"e::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoHypeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for Hype editor. ~TGeoHypeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoRin(); Slot for Rin. void DoRout(); Slot for Rout. void DoDz(); Slot for Z. void DoStIn(); Slot for StIn. void DoStOut(); Slot for StOut. TGeoHypeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHypeEditor.html:22325,undo,undoing,22325,root/html602/TGeoHypeEditor.html,https://root.cern,https://root.cern/root/html602/TGeoHypeEditor.html,1,['undo'],['undoing']
Usability,"e::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; TGButtonGroup*fgrGroup the Radiobuttons:; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of graph editor. ~TPieEditor(); Destructor of pie editor. void ConnectSignals2Slots(); Connect signals to slots. void ActivateBaseClassEditors(TClass* ); Exclude TAttTextEditor from this interface. void SetModel(TObject* ); Pick up the used values of graph attributes. void DoTitle(const char* text); Slot for setting the graph title. void DoShape(); Slot connected to the draw options. void DoMarkerOnOff(Bool_t on); Slot for setting markers as visible/invisible. void DoChange3DAngle(); Slot for setting the 3D angle. void DoGraphLineWidth(); Slot connected to the graph line width. void DoTextChange(); Change text. TGComboBox* BuildFontSizeComboBox(TGFrame* , Int_t ); Create text size combo box. TPieEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Guido Volpi 04/10/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-02 16:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPieEditor.html:22668,Guid,Guido,22668,root/html604/TPieEditor.html,https://root.cern,https://root.cern/root/html604/TPieEditor.html,1,['Guid'],['Guido']
Usability,"e::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; TGButtonGroup*fgrGroup the Radiobuttons:; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of graph editor. ~TPieEditor(); Destructor of pie editor. void ConnectSignals2Slots(); Connect signals to slots. void ActivateBaseClassEditors(TClass* ); Exclude TAttTextEditor from this interface. void SetModel(TObject* ); Pick up the used values of graph attributes. void DoTitle(const char* text); Slot for setting the graph title. void DoShape(); Slot connected to the draw options. void DoMarkerOnOff(Bool_t on); Slot for setting markers as visible/invisible. void DoChange3DAngle(); Slot for setting the 3D angle. void DoGraphLineWidth(); Slot connected to the graph line width. void DoTextChange(); Change text. TGComboBox* BuildFontSizeComboBox(TGFrame* , Int_t ); Create text size combo box. TPieEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Guido Volpi 04/10/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id$ » Last generated: 2015-06-30 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPieEditor.html:22668,Guid,Guido,22668,root/html602/TPieEditor.html,https://root.cern,https://root.cern/root/html602/TPieEditor.html,1,['Guid'],['Guido']
Usability,"e::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGView(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t xMargin = 0, UInt_t yMargin = 0, UInt_t options = kSunkenFrame | kDoubleBorder, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create an editor view, containing an TGEditorFrame and (optionally); a horizontal and vertical scrollbar. ~TGView(); Delete view. void Clear(Option_t* = """"); Clear view. void SetVisibleStart(Int_t newTop, Int_t direction); Scroll view in specified direction to make newTop the visible location. void DrawRegion(Int_t x, Int_t y, UInt_t width, UInt_t height); Draw region. void UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); update a part of view. void UpdateBackgroundStart(); set some gc values. Bool_t HandleButton(Event_t* event); handle button. void DoRedraw(); redraw. Bool_t HandleExpose(Event_t* event); Handle expose events. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process scrollbar messages. void Layout(); layout view. void DrawBorder(); Draw the border of the text edit widget. void ScrollToPosition(TGLongPosition newPos); Scroll the canvas to pos. void ScrollCanvas(Int_t newTop, Int_t direction); Scroll the canvas to new_top in the kVertical or kHorizontal direction. void ChangeBackground(Pixel_t ); Change background color of the canvas frame. void SetBackgroundColor(Pixel_t ); Set background color of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGView.html:22463,Clear,Clear,22463,root/html602/TGView.html,https://root.cern,https://root.cern/root/html602/TGView.html,4,['Clear'],['Clear']
Usability,"e::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofProgressMemoryPlot.html:25165,clear,clear,25165,root/html604/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html,1,['clear'],['clear']
Usability,"e::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressMemoryPlot.html:25165,clear,clear,25165,root/html602/TProofProgressMemoryPlot.html,https://root.cern,https://root.cern/root/html602/TProofProgressMemoryPlot.html,1,['clear'],['clear']
Usability,"e::kJpeg@ kJpegDefinition TImage.h:41; TImage::kXpm@ kXpmDefinition TImage.h:37; TImage::kAnimGif@ kAnimGifDefinition TImage.h:55; TImage::kUnknown@ kUnknownDefinition TImage.h:54; TImage::kTiff@ kTiffDefinition TImage.h:49; TImage::kGif@ kGifDefinition TImage.h:48; TImage::Classstatic TClass * Class(); TIterDefinition TCollection.h:235; TIter::GetOptionOption_t * GetOption() constDefinition TCollection.h:253; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TListIterIterator of linked list.Definition TList.h:193; TListIter::GetOptionOption_t * GetOption() const overrideReturns the object option stored in the list.Definition TList.cxx:1140; TListA doubly linked list.Definition TList.h:38; TList::AfterTObject * After(const TObject *obj) const overrideReturns the object after object obj.Definition TList.cxx:328; TList::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the list.Definition TList.cxx:400; TList::LastLinkvirtual TObjLink * LastLink() constDefinition TList.h:107; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRemove object from this collection and recursively remove the object from all other objects (and coll...Definition TList.cxx:762; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::AddLastvoid AddLast(TObject *obj) overrideAdd object at the end of the list.Definition TList.cxx:150; TList::LastTObject * Last() const overrideReturn the last object in the list. Returns 0 when list is empty.Definition TList.cxx:691; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is emp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:282259,Clear,Clearvoid,282259,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"e; 2564 return h;; 2565}; 2566 ; 2567////////////////////////////////////////////////////////////////////////////////; 2568/// Return size of the formula along X in pad coordinates when the text precision; 2569/// is smaller than 3.; 2570 ; 2571Double_t TLatex::GetXsize(); 2572{; 2573 if (!gPad) return 0.;; 2574 TString newText = GetTitle();; 2575 if( newText.Length() == 0) return 0;; 2576 ; 2577 // The text is a TMathText.; 2578 if ( newText.Contains(""\\"") ) {; 2579 TMathText tm(0., 0., newText.Data());; 2580 return tm.GetXsize();; 2581 }; 2582 ; 2583 fError = nullptr;; 2584 if (CheckLatexSyntax(newText)) {; 2585 std::cout<<""\n*ERROR<TLatex>: ""<<fError<<std::endl;; 2586 std::cout<<""==> ""<<GetTitle()<<std::endl;; 2587 return 0;; 2588 }; 2589 fError = nullptr;; 2590 ; 2591 const Char_t *text = newText.Data() ;; 2592 Double_t angle_old = GetTextAngle();; 2593 TLatexFormSize fs = FirstParse(0,GetTextSize(),text);; 2594 SetTextAngle(angle_old);; 2595 fTabSize.clear();; 2596 return TMath::Abs(gPad->AbsPixeltoX(Int_t(fs.Width())) - gPad->AbsPixeltoX(0));; 2597}; 2598 ; 2599////////////////////////////////////////////////////////////////////////////////; 2600/// Return text size in pixels; 2601 ; 2602void TLatex::GetBoundingBox(UInt_t &w, UInt_t &h, Bool_t angle); 2603{; 2604 if (!gPad) return;; 2605 TString newText = GetTitle();; 2606 if( newText.Length() == 0) return;; 2607 ; 2608 // The text is a TMathText.; 2609 if ( newText.Contains(""\\"") ) {; 2610 TMathText tm(0., 0., newText.Data());; 2611 tm.GetBoundingBox(w, h);; 2612 return;; 2613 }; 2614 ; 2615 fError = nullptr;; 2616 if (CheckLatexSyntax(newText)) {; 2617 std::cout<<""\n*ERROR<TLatex>: ""<<fError<<std::endl;; 2618 std::cout<<""==> ""<<GetTitle()<<std::endl;; 2619 return;; 2620 }; 2621 fError = nullptr;; 2622 ; 2623 if (angle) {; 2624 Int_t cBoxX[4], cBoxY[4];; 2625 Int_t ptx, pty;; 2626 if (TestBit(kTextNDC)) {; 2627 ptx = gPad->UtoPixel(fX);; 2628 pty = gPad->VtoPixel(fY);; 2629 } else {; 2630 ptx = gPad->XtoAbsPi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:92160,clear,clear,92160,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['clear'],['clear']
Usability,"e; 5 = X; 6 = Diamond; 7 = Triangle. cg(enable,color) channel grid. In addition to the surface drawn using any above given algorithm one can display grid using the color parameter. The parameter enable can be set to:. 0 = Grid not drawn; 1 = Grid drawn. See example spectrumpainter.C. Definition at line 7674 of file TSpectrum2Painter.cxx. ◆ SetAngles(). void TSpectrum2Painter::SetAngles ; (; Int_t ; alpha, . Int_t ; beta, . Int_t ; view . ). Sets angles of the view: . alpha - angles of display,alpha+beta must be less or equal to 90, alpha- angle between base line of Canvas and right lower edge of picture base plane; beta - angle between base line of Canvas and left lower edge of picture base plane; view - rotation angle of the view, it can be 0, 90, 180, 270 degrees . Definition at line 7117 of file TSpectrum2Painter.cxx. ◆ SetBezier(). void TSpectrum2Painter::SetBezier ; (; Int_t ; bezier). Sets on/off Bezier smoothing: . bezier - determines Bezier interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes) . Definition at line 7205 of file TSpectrum2Painter.cxx. ◆ SetChanGrid(). void TSpectrum2Painter::SetChanGrid ; (; Int_t ; enable, . Int_t ; color . ). This function sets enables/disables drawing of channel grid and sets its color: -enable - decides whether the channel grid is shown or not -color - color of channel grid. ; Definition at line 7271 of file TSpectrum2Painter.cxx. ◆ SetChanMarks(). void TSpectrum2Painter::SetChanMarks ; (; Int_t ; enable, . Int_t ; color, . Int_t ; width, . Int_t ; height, . Int_t ; style . ). Sets enables/disables drawing of channel marks and sets their attributes: . enable - decides whether the channel marks are shown or not; color - color of channel marks; width - width of channel marks in pixels; height - height of channel marks in pixels; style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle) . Definition at line 7244 of file TSpectrum2Painter.cxx. ◆ SetColorAl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:51731,simpl,simple,51731,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"e; 5.14 MnUserParameters; 5.15 MnUserParameterState; 5.16 MnPrint.h. 6 How to get the right answer from M; 6.1 Which minimizer to use; 6.2 Floating point precision; 6.3 Parameter limits; 6.4 Fixing and releasing parameters; 6.5 Interpretation of parameter errors; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; 6.7 Additional trouble–shooting. 7 A complete example; 7.1 The user’s \(\mbox{FCN}\); 7.2 The user’s main program. Minuit 2; *** Fred JAMES and Matthias WINKLER CERN, Geneva ***; 1 Foreword; 1.1 What M is intended to do; M is conceived as a tool to find the minimum value of a multi-parameter function (the “\(\mbox{FCN}\)”) and analyze the shape of the function around the minimum. The principal application is foreseen for statistical analysis, working on chisquare or log-likelihood functions, to compute the best-fit parameter values and uncertainties, including correlations between the parameters. It is especially suited to handle difficult problems, including those which may require guidance in order to find the correct solution.; 1.2 What M is not intended to do; Although M will of course solve easy problems faster than complicated ones, it is not intended for the repeated solution of identically parametrized problems (such as track fitting in a detector) where a specialized program will in general be much more efficient.; 1.3 Further remarks; M was initially written in Fortran around 1975-1980 at CERN by Fred James @bib-MINUIT. Its main field of usage is statistical data analysis of experimental data recorded at CERN, but it is also used by people doing data analysis outside CERN or outside high energy physics (HEP). In 2002 Fred James started a project aiming to re-implement M in an object-oriented way using .; More information about recent developments, releases and installation can be obtained from the M homepage @bib-C++MINUIT.; The names of M applications are written in capital letters (e.g. \(\mbox{MIGRAD}\), \(\mbox{MINOS}\), \(\mbox{",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:2045,guid,guidance,2045,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['guid'],['guidance']
Usability,"e; 60 ; 61////////////////////////////////////////////////////////////////////////////; 62/// Releases the resources associated to a file opened with davix; 63int VfsRdOnlyClose(sqlite3_file *pFile); 64{; 65 VfsRootFile *p = reinterpret_cast<VfsRootFile *>(pFile);; 66 // We can't use delete because the storage for p is managed by sqlite; 67 p->~VfsRootFile();; 68 return SQLITE_OK;; 69}; 70 ; 71////////////////////////////////////////////////////////////////////////////; 72/// Issues a byte range request for a chunk to the raw file; 73int VfsRdOnlyRead(sqlite3_file *pFile, void *zBuf, int count, sqlite_int64 offset); 74{; 75 VfsRootFile *p = reinterpret_cast<VfsRootFile *>(pFile);; 76 auto nbytes = p->fRawFile->ReadAt(zBuf, count, offset);; 77 return (nbytes != static_cast<unsigned int>(count)) ? SQLITE_IOERR : SQLITE_OK;; 78}; 79 ; 80////////////////////////////////////////////////////////////////////////////; 81/// We do not write to a database in the RDataSource and therefore can simply return an error for this callback; 82int VfsRdOnlyWrite(sqlite3_file * /*pFile*/, const void * /*zBuf*/, int /*iAmt*/, sqlite_int64 /*iOfst*/); 83{; 84 return SQLITE_OPEN_READONLY;; 85}; 86 ; 87////////////////////////////////////////////////////////////////////////////; 88/// We do not write to a database in the RDataSource and therefore can simply return an error for this callback; 89int VfsRdOnlyTruncate(sqlite3_file * /*pFile*/, sqlite_int64 /*size*/); 90{; 91 return SQLITE_OPEN_READONLY;; 92}; 93 ; 94////////////////////////////////////////////////////////////////////////////; 95/// As the database is read-only, syncing data to disc is a no-op and always succeeds; 96int VfsRdOnlySync(sqlite3_file * /*pFile*/, int /*flags*/); 97{; 98 return SQLITE_OK;; 99}; 100 ; 101////////////////////////////////////////////////////////////////////////////; 102/// Returns the cached file size; 103int VfsRdOnlyFileSize(sqlite3_file *pFile, sqlite_int64 *pSize); 104{; 105 VfsRootFile *p = reinte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSqliteDS_8cxx_source.html:3953,simpl,simply,3953,doc/master/RSqliteDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RSqliteDS_8cxx_source.html,1,['simpl'],['simply']
Usability,"e; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » RECORDER; » TRecorderRecording. class TRecorderRecording: public TRecorderState. Represents state of TRecorder when recording events. Function Members (Methods); public:. TRecorderRecording(const TRecorderRecording&); static TClass*Class(); voidFilterEventPave(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderRecording&operator=(const TRecorderRecording&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); voidRecordCmdEvent(const char* line); voidRecordExtraEvent(TString line, TTime extTime); voidRecordGuiBldEvent(Event_t* e); voidRecordGuiCNEvent(Event_t* e); voidRecordGuiEvent(Event_t* e, Window_t wid); voidRecordMousePosition(); voidRecordPave(const TObject* obj); voidRecordText(const TObject* obj); voidRegisterWindow(Window_t w); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidTRecorderState::ReplayStop(TRecorder*); virtual voidTRecorderState::Resume(TRecorder*); virtual voidShowMembers(TMemberInspector&); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); voidStartEditing(); virtual voidStop(TRecorder* r, Bool_t guiCommand); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TRecorderRecording(TRecorder* r, const char* filename, Option_t* option, Window_t* w, Int_t winCount); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState); Bool_tStartRecording(). private:. (unknown)(); voidCopyEvent(Event_t* e, Window_t wid); Bool_tIsFiltered(Window_t id); voidSetTypeOfConfigureNotify(Event_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorderRecording.html:772,Pause,Pause,772,root/html534/TRecorderRecording.html,https://root.cern,https://root.cern/root/html534/TRecorderRecording.html,2,"['Pause', 'Resume']","['Pause', 'Resume']"
Usability,"e; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface). It is copied inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the defa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:4966,simpl,simple,4966,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,6,['simpl'],['simple']
Usability,"e; TPad(const TPad &pad)=deleteTPadprivate; TPad()TPad; TPad(const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=-1, Short_t bordersize=-1, Short_t bordermode=-2)TPad; TQObject(const TQObject &)=deleteTQObjectprivate; TQObject()TQObject; TVirtualPad()TVirtualPad; TVirtualPad(const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=19, Short_t bordersize=4, Short_t bordermode=1)TVirtualPad; TWebCanvasTPadfriend; UnZoomed()TVirtualPadinlinevirtual; Update() overrideTPadvirtual; UpdateAsync() overrideTPadvirtual; UseCurrentStyle() overrideTPadvirtual; UtoAbsPixel(Double_t u) const overrideTPadvirtual; UtoPixel(Double_t u) const overrideTPadvirtual; VtoAbsPixel(Double_t v) const overrideTPadvirtual; VtoPixel(Double_t v) const overrideTPadvirtual; WaitPrimitive(const char *pname="""", const char *emode="""") overrideTPadvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; x3d(Option_t *type="""")TPadvirtual; XtoAbsPixel(Double_t x) const overrideTPadvirtual; XtoPad(Double_t x) const overrideTPadvirtual; XtoPixel(Double_t x) const overrideTPadvirtual; XYtoAbsPixel(Double_t x, Double_t y, Int_t &xpixel, Int_t &ypixel) constTPadvirtual; XYtoPixel(Double_t x, Double_t y, Int_t &xpixel, Int_t &ypixel) constTPadvirtual; YtoAbsPixel(Double_t y) const overrideTPadvirtual; YtoPad(Double_t y) const overrideTPadvirtual; YtoPixel(Double_t y) const overrideTPadvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttPad()TAttPadvirtual; ~TObject()TObjectvirtual; ~TPad() overrideTPad; ~TQObject()TQObjectvirtual; ~TVirtualPad()TVirtualPadvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad-members.html:27861,Guid,Guide,27861,doc/master/classTPad-members.html,https://root.cern,https://root.cern/doc/master/classTPad-members.html,1,['Guid'],['Guide']
Usability,"e; static TObject::(anonymous)TObject::kZombie. protected:. TStringfFilenameEvents file name. private:. TRecorderState*fRecorderState! Current state of recorder. Class Charts. Inheritance Chart:. TObject. ←; TRecorder. Function documentation; TRecorder(); Creates initial INACTIVE state for the recorder. TRecorder(const char* filename, Option_t* option = ""READ""); Creates a recorder with filename to replay or to record,; depending on option (NEW or RECREATE will start recording,; READ will start replaying). ~TRecorder(); Destructor. void Browse(TBrowser* ); Browse the recorder from a ROOT file. This allows to replay a; session from the browser. void Start(const char* filename, Option_t* option = ""RECREATE"", Window_t* w = 0, Int_t winCount = 0); Starts recording events. void Stop(Bool_t guiCommand = kFALSE); Stopps recording events. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays events from 'filename'. void Pause(); Pauses replaying. void Resume(); Resumes replaying. void ReplayStop(); Cancells replaying. void ListCmd(const char* filename); Prints out recorded commandline events. void ListGui(const char* filename); Prints out recorded GUI events. void ChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); Changes state from the current to the passed one (newstate); Deletes the old state if delPreviousState = KTRUE. void PrevCanvases(const char* filename, Option_t* option); Save previous canvases in a .root file. TRecorder(const TRecorder& ). TRecorder & operator=(const TRecorder& ). Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays recorded events from given file. TRecorder::ERecorderState GetState() const; Gets current state of recorder. » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 16:32; This pag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TRecorder.html:9690,Pause,Pause,9690,root/html604/TRecorder.html,https://root.cern,https://root.cern/root/html604/TRecorder.html,2,['Pause'],"['Pause', 'Pauses']"
Usability,"e; static TObject::(anonymous)TObject::kZombie. protected:. TStringfFilenameEvents file name. private:. TRecorderState*fRecorderState! Current state of recorder. Class Charts. Inheritance Chart:. TObject. ←; TRecorder. Function documentation; TRecorder(); Creates initial INACTIVE state for the recorder. TRecorder(const char* filename, Option_t* option = ""READ""); Creates a recorder with filename to replay or to record,; depending on option (NEW or RECREATE will start recording,; READ will start replaying). ~TRecorder(); Destructor. void Browse(TBrowser* ); Browse the recorder from a ROOT file. This allows to replay a; session from the browser. void Start(const char* filename, Option_t* option = ""RECREATE"", Window_t* w = 0, Int_t winCount = 0); Starts recording events. void Stop(Bool_t guiCommand = kFALSE); Stopps recording events. Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays events from 'filename'. void Pause(); Pauses replaying. void Resume(); Resumes replaying. void ReplayStop(); Cancells replaying. void ListCmd(const char* filename); Prints out recorded commandline events. void ListGui(const char* filename); Prints out recorded GUI events. void ChangeState(TRecorderState* newstate, Bool_t deletePreviousState = kTRUE); Changes state from the current to the passed one (newstate); Deletes the old state if delPreviousState = KTRUE. void PrevCanvases(const char* filename, Option_t* option); Save previous canvases in a .root file. TRecorder(const TRecorder& ). TRecorder & operator=(const TRecorder& ). Bool_t Replay(const char* filename, Bool_t showMouseCursor = kTRUE, TRecorder::EReplayModes mode = kRealtime); Replays recorded events from given file. TRecorder::ERecorderState GetState() const; Gets current state of recorder. » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This pag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorder.html:9690,Pause,Pause,9690,root/html602/TRecorder.html,https://root.cern,https://root.cern/root/html602/TRecorder.html,2,['Pause'],"['Pause', 'Pauses']"
Usability,"e;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const override;  ; TObject * GetOutput (const char *name) const override;  Get output object by name. ;  ; TList * GetOutputList () const override;  Get output list. ;  ; TProofProgressStatus * GetProgressStatus () const override;  ; TQueryResult * GetQueryResult (const char *ref) override;  Get query result instances referenced 'ref' from the list of results. ;  ; void HandleGetTreeHeader (TMessage *mess) override;  Handle tree header request. ;  ; void HandleRecvHisto (TMessage *mess) override;  Receive histo from slave. ;  ; Int_t ReinitSelector (TQueryResult *qr) override;  Reinitialize fSelector using the selector files in the query result. ;  ; void RemoveQueryResult (const char *ref) override;  Remove all query result instances referenced 'ref' from the list of results. ;  ; void RestorePreviousQuery () override;  ; Int_t SavePart",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:6123,learn,learning,6123,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,3,['learn'],['learning']
Usability,"e;  Paint the list of histograms. ;  ; void Print (Option_t *chopt="""") const override;  Print the list of histograms. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove the object obj from the list of histograms. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetHistogram (TH1 *h);  ; virtual void SetMaximum (Double_t maximum=-1111);  Set maximum. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set minimum. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:12233,Clear,Clear,12233,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,1,['Clear'],['Clear']
Usability,"e;  Print binning arguments (the RooAbsReal objects represening the variable bin boundaries for parameterized binning implementations. ;  ; void printClassName (std::ostream &os) const override;  Print binning class name. ;  ; void printName (std::ostream &os) const override;  Print binning name. ;  ; void printTitle (std::ostream &os) const override;  Print binning title. ;  ; void printValue (std::ostream &os) const override;  Print binning value, i.e the bin boundary positions. ;  ; virtual void removeHook (RooAbsRealLValue &) const;  Hook interface function to execute code upon removal from a RooAbsRealLValue. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinTransBinning.html:4352,Clear,Clear,4352,doc/master/classRooLinTransBinning.html,https://root.cern,https://root.cern/doc/master/classRooLinTransBinning.html,2,['Clear'],['Clear']
Usability,"e;  Print this list. ;  ; virtual Int_t RelocatePaths (const char *newloc, const char *oldloc=nullptr);  Relocate the file paths. ;  ; virtual Int_t ScanPaths (TList *roots, bool notify=true);  Scan the paths to find the common roots. ;  ; virtual void SetDirectory (TDirectory *dir);  Add reference to directory dir. dir can be 0. ;  ; virtual void SetEntriesToProcess (Long64_t nen);  ; virtual void SetFileName (const char *filename);  ; virtual void SetReapplyCut (bool apply=false);  ; virtual void SetShift (bool shift);  ; virtual void SetTreeName (const char *treename);  ; virtual void SetTreeNumber (Int_t index);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListArray.html:9024,Clear,Clear,9024,doc/master/classTEntryListArray.html,https://root.cern,https://root.cern/doc/master/classTEntryListArray.html,1,['Clear'],['Clear']
Usability,"e;  Stream an object of class ROOT::TSchemaRuleSet. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:4333,Clear,Clear,4333,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,1,['Clear'],['Clear']
Usability,"e;; 1038 if ((hype->GetStIn() == 0) && (hype->GetStOut() == 0)); 1039 return countTubeFaces({hype->GetRmax(), hype->GetRmax()}, {hype->GetRmin(), hype->GetRmin()});; 1040 int radiusSegments = GetUsedNSegments(4), heightSegments = 30;; 1041 return radiusSegments * (heightSegments + 1) * ((hype->GetRmin() > 0.) ? 4 : 2);; 1042 } else if (shape->IsA() == TGeoTessellated::Class()) {; 1043 auto tess = (TGeoTessellated *)shape;; 1044 int numfaces = 0;; 1045 for (int i = 0; i < tess->GetNfacets(); ++i) {; 1046 if (tess->GetFacet(i).GetNvert() == 4); 1047 numfaces += 2;; 1048 else; 1049 numfaces += 1;; 1050 }; 1051 return numfaces;; 1052 } else if (shape->IsA() == TGeoScaledShape::Class()) {; 1053 auto scaled = (TGeoScaledShape *)shape;; 1054 return CountShapeFaces(scaled->GetShape());; 1055 } else if (shape->IsA() == TGeoCompositeShape::Class()) {; 1056 auto comp = (TGeoCompositeShape *)shape;; 1057 if (!comp->GetBoolNode()); 1058 return 0;; 1059 return CountShapeFaces(comp->GetBoolNode()->GetLeftShape()) +; 1060 CountShapeFaces(comp->GetBoolNode()->GetRightShape());; 1061 }; 1062 ; 1063 // many of simple shapes have 12 faces; 1064 return 12;; 1065}; 1066 ; 1067/////////////////////////////////////////////////////////////////////; 1068/// Find description object and create render information; 1069 ; 1070RGeomDescription::ShapeDescr &RGeomDescription::MakeShapeDescr(TGeoShape *shape); 1071{; 1072 auto &elem = FindShapeDescr(shape);; 1073 ; 1074 if (elem.nfaces == 0) {; 1075 ; 1076 int boundary = 3; //; 1077 if (shape->IsComposite()) {; 1078 // composite is most complex for client, therefore by default build on server; 1079 boundary = 1;; 1080 } else if (!shape->IsCylType()) {; 1081 // simple box geometry is compact and can be delivered as raw; 1082 boundary = 2;; 1083 }; 1084 ; 1085 if (IsBuildShapes() < boundary) {; 1086 elem.nfaces = 1;; 1087 elem.fShapeInfo.shape = shape;; 1088 } else {; 1089 ; 1090 int old_nsegm = -1;; 1091 if (fCfg.nsegm > 0 && gGeoManager) {; 1092 old_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:31718,simpl,simple,31718,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['simpl'],['simple']
Usability,"e< Element >::Sum. virtual . Compute sum of elements. ; Definition at line 579 of file TMatrixTBase.cxx. ◆ UnitMatrix(). template<class Element > . TMatrixTBase< Element > & TMatrixTBase< Element >::UnitMatrix. virtual . Make a unit matrix (matrix need not be a square one). ; Reimplemented in TMatrixTSparse< Element >, and TMatrixTSparse< Double_t >.; Definition at line 417 of file TMatrixTBase.cxx. ◆ Zero(). template<class Element > . TMatrixTBase< Element > & TMatrixTBase< Element >::Zero. virtual . Set matrix elements to zero. ; Reimplemented in TMatrixTSparse< Element >, and TMatrixTSparse< Double_t >.; Definition at line 351 of file TMatrixTBase.cxx. Member Data Documentation. ◆ fColLwb. template<class Element > . Int_t TMatrixTBase< Element >::fColLwb. protected . Definition at line 93 of file TMatrixTBase.h. ◆ fIsOwner. template<class Element > . Bool_t TMatrixTBase< Element >::fIsOwner. protected . Definition at line 100 of file TMatrixTBase.h. ◆ fNcols. template<class Element > . Int_t TMatrixTBase< Element >::fNcols. protected . Definition at line 91 of file TMatrixTBase.h. ◆ fNelems. template<class Element > . Int_t TMatrixTBase< Element >::fNelems. protected . Definition at line 94 of file TMatrixTBase.h. ◆ fNrowIndex. template<class Element > . Int_t TMatrixTBase< Element >::fNrowIndex. protected . Definition at line 95 of file TMatrixTBase.h. ◆ fNrows. template<class Element > . Int_t TMatrixTBase< Element >::fNrows. protected . Definition at line 90 of file TMatrixTBase.h. ◆ fRowLwb. template<class Element > . Int_t TMatrixTBase< Element >::fRowLwb. protected . Definition at line 92 of file TMatrixTBase.h. ◆ fTol. template<class Element > . Element TMatrixTBase< Element >::fTol. protected . Definition at line 97 of file TMatrixTBase.h. math/matrix/inc/TMatrixDBasefwd.h; math/matrix/inc/TMatrixTBase.h; math/matrix/src/TMatrixTBase.cxx. TMatrixTBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTBase.html:37606,Guid,Guide,37606,doc/master/classTMatrixTBase.html,https://root.cern,https://root.cern/doc/master/classTMatrixTBase.html,1,['Guid'],['Guide']
Usability,"e< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:59; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:171412,simpl,simple,171412,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['simpl'],['simple']
Usability,"e< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:60; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:171588,simpl,simple,171588,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['simpl'],['simple']
Usability,e<class Element > . TClass * TMatrixTLazy< Element >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 74 of file TMatrixTLazy.h. ◆ operator=(). template<class Element > . void TMatrixTLazy< Element >::operator= ; (; const TMatrixTLazy< Element > & ; ). inlineprotected . Definition at line 56 of file TMatrixTLazy.h. ◆ Streamer(). template<class Element > . void TMatrixTLazy< Element >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). template<class Element > . void TMatrixTLazy< Element >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file TMatrixTLazy.h. Friends And Related Symbol Documentation. ◆ TMatrixT< Element >. template<class Element > . friend class TMatrixT< Element >. friend . Definition at line 1 of file TMatrixTLazy.h. ◆ TMatrixTBase< Element >. template<class Element > . friend class TMatrixTBase< Element >. friend . Definition at line 1 of file TMatrixTLazy.h. ◆ TVectorT< Element >. template<class Element > . friend class TVectorT< Element >. friend . Definition at line 1 of file TMatrixTLazy.h. Member Data Documentation. ◆ fColLwb. template<class Element > . Int_t TMatrixTLazy< Element >::fColLwb. protected . Definition at line 53 of file TMatrixTLazy.h. ◆ fColUpb. template<class Element > . Int_t TMatrixTLazy< Element >::fColUpb. protected . Definition at line 52 of file TMatrixTLazy.h. ◆ fRowLwb. template<class Element > . Int_t TMatrixTLazy< Element >::fRowLwb. protected . Definition at line 51 of file TMatrixTLazy.h. ◆ fRowUpb. template<class Element > . Int_t TMatrixTLazy< Element >::fRowUpb. protected . Definition at line 50 of file TMatrixTLazy.h. math/matrix/inc/TMatrixT.h; math/matrix/inc/TMatrixTLazy.h. TMatrixTLazy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTLazy.html:15695,Guid,Guide,15695,doc/master/classTMatrixTLazy.html,https://root.cern,https://root.cern/doc/master/classTMatrixTLazy.html,1,['Guid'],['Guide']
Usability,"e=10""); // full output every; // 10 epochs; network.Train(100,""text,+""); // 100 more epochs; //starts with existing weights; The weights can be saved to a file (DumpWeights) and then reloaded (LoadWeights) to a new compatible network. The output can also be evaluated (Evaluate) for a given output neuron and an array of double input parameters or the network can be exported (Export) as a standalone code. Up to now, this is only as a C++ or PYTHON class, but other languages could be implemented.; 5.12.5 Examples; An example of how to use TMultiLayerPerceptron is the macro mlpHiggs.C in $ROOTSYS/tutorials. Using some standard simulated information that could have been obtained at LEP, a neural network is build, which can make the difference between WW events and events containing a Higgs boson. Starting with a TFile containing two TTrees: one for the signal, the other for the background, a simple script is used:; void mlpHiggs(Int_t ntrain=100) {; if (!gROOT->GetClass(""TMultiLayerPerceptron"")); gSystem->Load(""libMLP"");; // prepare inputs - the 2 trees are merged into one, and a; // ""type"" branch, equal to 1 for the signal and 0 for the; // background is added; TFile input(""mlpHiggs.root"");; TTree *signal = (TTree *)input.Get(""sig_filtered"");; TTree *background = (TTree *)input.Get(""bg_filtered"");; TTree *simu = new TTree(""MonteCarlo"",; ""Filtered Monte Carlo Events"");; ...; Since the input is a TTree and we are starting from two different TTrees (with different names), they are first merged into one, and a “type” branch is added, that says whether there is a signal or a background event. Those irrelevant details are skipped here.; ...; TMultiLayerPerceptron *mlp = new TMultiLayerPerceptron(; ""msumf,ptsumf, acolin, acopl:8:type"",""ptsumf"",simu,; ""Entry$%2"",""Entry$/2"");; mlp->Train(ntrain, ""text,graph,update=10"");; The neural network is instantiated and trained. “ptsumf” is used as a weight, and the standard event lists are explicit. The network that is then build has four",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:238200,simpl,simple,238200,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"e> Template of Lazy Symmeytric class; TMatrixTSymLazy<float> Template of Lazy Symmeytric class; TMehrotraSolver Mehrotra Qp Solver class; TMemStat a user interface class of MemStat; TMemberInspector ABC for inspecting class data members; TMemberStreamer ; TMergerInfo Basic info on merger, i.e. worker serving as merger; TMessage Message buffer class; TMessageHandler Generic message handler; TMethod Dictionary for a class member function (method); TMethodArg Dictionary for a method argument; TMethodBrowsable Helper object to browse methods; TMethodCall Method calling interface; TMinuit The MINUIT minimisation package; TMinuitMinimizer Implementation of Minimizer interface using TMinuit ; TMixture Mixtures used in the Geometry Shapes; TModuleDocInfo documentation for a group of classes; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetSystem Directory handler for NetSystem; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:109063,simpl,simple,109063,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['simpl'],['simple']
Usability,"e? ROOT is not a particularly good framework that is written in a language that isn't quite C++. If you are going to break away and make/use/write cling, then fix the poor design decisions: cling will probably break compatibility anyways despite your best efforts, so you might as well take the time and effort to refactor and clean up the code base. A simple example, taken from this website: """""" TFFTComplex One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it: 1) Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified) 2) Run the Init() function with the desired flags and settings ... """""" This is simply poor design. This should look like: root::Fft, removing the T, using a namespace, using templates instead of inheritence, etc. But also, notice that you have to run an Init function. Why? That is specifically what the constructor is for. Why does everything in ROOT know how to draw itself? Why does everything in ROOT have 100 methods, for ""quick access"" to other objects that do the actual work of those methods? These are questions that should be asked. But most of all, if you aren't going to fix these problems, why bother migrating at all? You fail to treat this migration as what it actually is. You are migrating to a new language, not a new version of a language. ROOT isn't written in C++. It's written in CINT. I am just frustrated to see this happen, because I know this community can do better. Maybe I'll make a draft of some smaller changes that need to be made and submit them to the mailing list. But honestly, I'm not very hopeful about this migration. Submitted by Anonymous (n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:11371,simpl,simply,11371,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['simpl'],['simply']
Usability,"eActions(Int_t version)=0TVirtualCollectionProxypure virtual; GetType() const =0TVirtualCollectionProxypure virtual; GetValueClass() const =0TVirtualCollectionProxypure virtual; GetWriteMemberWiseActions()=0TVirtualCollectionProxypure virtual; HasPointers() const =0TVirtualCollectionProxypure virtual; Insert(const void *data, void *container, size_t size)=0TVirtualCollectionProxypure virtual; kCustomAlloc enum valueTVirtualCollectionProxy; kIsAssociative enum valueTVirtualCollectionProxy; kIsEmulated enum valueTVirtualCollectionProxy; kNeedDelete enum valueTVirtualCollectionProxy; New() constTVirtualCollectionProxyinlinevirtual; New(void *arena) constTVirtualCollectionProxyinlinevirtual; NewArray(Int_t nElements) constTVirtualCollectionProxyinlinevirtual; NewArray(Int_t nElements, void *arena) constTVirtualCollectionProxyinlinevirtual; NewObject() constTVirtualCollectionProxyinlinevirtual; NewObject(void *arena) constTVirtualCollectionProxyinlinevirtual; NewObjectArray(Int_t nElements) constTVirtualCollectionProxyinlinevirtual; NewObjectArray(Int_t nElements, void *arena) constTVirtualCollectionProxyinlinevirtual; Next_t typedefTVirtualCollectionProxy; operator=(const TVirtualCollectionProxy &)=deleteTVirtualCollectionProxyprivate; operator[](UInt_t idx) constTVirtualCollectionProxyinline; PopProxy()=0TVirtualCollectionProxypure virtual; PushProxy(void *objectstart)=0TVirtualCollectionProxypure virtual; Reset()TVirtualCollectionProxyinlinevirtual; Size() const =0TVirtualCollectionProxypure virtual; Sizeof() const =0TVirtualCollectionProxypure virtual; TClassTVirtualCollectionProxyfriend; TVirtualCollectionProxy(const TVirtualCollectionProxy &)=deleteTVirtualCollectionProxyprivate; TVirtualCollectionProxy()TVirtualCollectionProxyinline; TVirtualCollectionProxy(TClass *cl)TVirtualCollectionProxyinline; ~TVirtualCollectionProxy()TVirtualCollectionProxyinlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionProxy-members.html:3792,Guid,Guide,3792,doc/master/classTVirtualCollectionProxy-members.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy-members.html,1,['Guid'],['Guide']
Usability,"eAdd a signal handler to list of system signal handlers.Definition TUnixSystem.cxx:837; TUnixSystem::UnixOpendirstatic void * UnixOpendir(const char *name)Open a directory.Definition TUnixSystem.cxx:3984; TUnixSystem::SendRawint SendRaw(int sock, const void *buffer, int length, int flag) overrideSend exactly length bytes from buffer.Definition TUnixSystem.cxx:3405; TUnixSystem::WorkingDirectoryconst char * WorkingDirectory() overrideReturn working directory.Definition TUnixSystem.cxx:1445; TUnixSystem::GetSockOptint GetSockOpt(int sock, int option, int *val) overrideGet socket option.Definition TUnixSystem.cxx:3507; TUnixSystem::FindDynamicLibraryconst char * FindDynamicLibrary(TString &lib, Bool_t quiet=kFALSE) overrideReturns the path of a shared library (searches for library in the shared library search path).Definition TUnixSystem.cxx:4761; TUnixSystem::SetPrognamevoid SetProgname(const char *name) overrideSet the application name (from command line, argv[0]) and copy it in gProgName.Definition TUnixSystem.cxx:641; TUnixSystem::GetDirEntryconst char * GetDirEntry(void *dirp) overrideGet next Unix file system directory entry. Returns 0 if no more entries.Definition TUnixSystem.cxx:1419; TUnixSystem::MakeDirectoryint MakeDirectory(const char *name) overrideMake a Unix file system directory.Definition TUnixSystem.cxx:1380; TUnixSystem::GetFsInfoint GetFsInfo(const char *path, Long_t *id, Long_t *bsize, Long_t *blocks, Long_t *bfree) overrideGet info about a file system: id, bsize, bfree, blocks.Definition TUnixSystem.cxx:1676; bool; int; unsigned int; CpuInfo_tDefinition TSystem.h:163; FileStat_tDefinition TSystem.h:122; MemInfo_tDefinition TSystem.h:177; ProcInfo_tDefinition TSystem.h:196; RedirectHandle_tDefinition TSystem.h:207; SysInfo_tDefinition TSystem.h:148; UserGroup_tDefinition TSystem.h:136; groupDefinition TWinNTSystem.h:50. coreunixincTUnixSystem.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8h_source.html:35216,Guid,Guide,35216,doc/master/TUnixSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8h_source.html,1,['Guid'],['Guide']
Usability,"eAll(""**"",""^"");; 1774 formula.ReplaceAll(""++"",""@""); // for linear functions; 1775 formula.ReplaceAll("" "","""");; 1776 HandlePolN(formula);; 1777 HandleParametrizedFunctions(formula);; 1778 HandleParamRanges(formula);; 1779 HandleFunctionArguments(formula);; 1780 HandleExponentiation(formula);; 1781 // ""++"" wil be dealt with Handle Linear; 1782 HandleLinear(formula);; 1783 // special case for ""--"" and ""++""; 1784 // (""++"" needs to be written with whitespace that is removed before but then we re-add it again; 1785 formula.ReplaceAll(""--"",""- -"");; 1786 formula.ReplaceAll(""++"",""+ +"");; 1787}; 1788 ; 1789////////////////////////////////////////////////////////////////////////////////; 1790/// prepare the formula to be executed; 1791/// normally is called with fFormula; 1792 ; 1793Bool_t TFormula::PrepareFormula(TString &formula); 1794{; 1795 fFuncs.clear();; 1796 fReadyToExecute = false;; 1797 ExtractFunctors(formula);; 1798 ; 1799 // update the expression with the new formula; 1800 fFormula = formula;; 1801 // save formula to parse variable and parameters for Cling; 1802 fClingInput = formula;; 1803 // replace all { and }; 1804 fFormula.ReplaceAll(""{"","""");; 1805 fFormula.ReplaceAll(""}"","""");; 1806 ; 1807 // std::cout << ""functors are extracted formula is "" << std::endl;; 1808 // std::cout << fFormula << std::endl << std::endl;; 1809 ; 1810 fFuncs.sort();; 1811 fFuncs.unique();; 1812 ; 1813 // use inputFormula for Cling; 1814 ProcessFormula(fClingInput);; 1815 ; 1816 // for pre-defined functions (need after processing); 1817 if (fNumber != 0) SetPredefinedParamNames();; 1818 ; 1819 return fReadyToExecute && fClingInitialized;; 1820}; 1821 ; 1822////////////////////////////////////////////////////////////////////////////////; 1823/// Extracts functors from formula, and put them in fFuncs.; 1824/// Simple grammar:; 1825/// - `<function>` := name(arg1,arg2...); 1826/// - `<variable>` := name; 1827/// - `<parameter>` := [number]; 1828/// - `<name>` := String containing lower and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:68024,clear,clear,68024,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['clear'],['clear']
Usability,"eAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCLsCleanupThreshold(Double_t th); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterpolationOption(RooStats::HypoTestInverterResult::InterpolOption_t opt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name = 0); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalRooStats::SimpleInterval::SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); Double_tUpperLimitEstimatedError(); voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:7287,Simpl,SimpleInterval,7287,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,18,['Simpl'],"['SimpleInterval', 'SimpleIntervalRooStats']"
Usability,eCacheRead::fBufferLenCurrent buffer length (<= fBufferSize); Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Long64_tfEntryCurrent! current lowest entry number in the cache; Long64_tfEntryMax! last entry in the cache; Long64_tfEntryMin! first entry in the cache; Long64_tfEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Bool_tfIsLearning! true if cache is in learning mode; Bool_tfIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; Int_tfNReadMissNumber of blocks read and not found in the chache; Int_tfNReadOkNumber of blocks read and found in the cache; Int_tfNReadPrefNumber of blocks that were prefetched; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tfNbranches! Number of branches in the cache; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; TTree*fOwner! pointer to the owner Tree/chain; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; Long64_tfZipBytes! Total compressed size of branches in cache; static Int_tfgLearnEntriesNumber of entries used for learning mode.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:17103,learn,learning,17103,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,1,['learn'],['learning']
Usability,"eCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); Long64_tfTotalUnzipBytes! The total sum of the currently unzipped blks; TTree*TTreeCache::fTree! pointer to the current Tree; Long64_tfUnzipBufferSize! Max Size for the ready unzipped blocks (default is 2*fBufferSize); char**fUnzipChunks! [fNseek] Individual unzipped chunks. Their summed size is kept under control.; TCondition*fUnzipDoneConditionUsed to wait for an unzip tour to finish. Gives the Async feel.; Int_t*fUnzipLen! [fNseek] Length of the unzipped buffers; TCondition*fUnzipStartConditionUsed to signal the threads to start.; unsigned char*fUnzipStatus! [fNSeek] For each blk, tells us if it's unzipped or pending; TThread*fUnzipThread[10]; Long64_tTTreeCache::fZipBytes! Total compressed size of branches in cache; static Int_tTTreeCache::fgLearnEntriesnumber of entries used for learning mode; static TTreeCacheUnzip::EParUnzipModefgParallelIndicate if we want to activate the parallelism; static Double_tfgRelBuffSizeThis is the percentage of the TTreeCacheUnzip that will be used. private:. char*fCompBuffer; Int_tfCompBufferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCacheUnzip(); Default Constructor. TTreeCacheUnzip(TTree* tree, Int_t buffersize = 0); Constructor. void Init(); Initialization procedure common to all the constructors. ~TTreeCacheUnzip(); destructor. (in general called by the TFile destructor; destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCacheUnzip.html:13662,learn,learning,13662,root/html530/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html530/TTreeCacheUnzip.html,1,['learn'],['learning']
Usability,"eCoefficient ; (; ); const. inline . Definition at line 39 of file RooExponential.h. ◆ Streamer(). void RooExponential::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooExponential::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file RooExponential.h. ◆ translate(). void RooExponential::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 116 of file RooExponential.cxx. ◆ variable(). RooAbsReal const & RooExponential::variable ; (; ); const. inline . Get the x variable. ; Definition at line 34 of file RooExponential.h. Member Data Documentation. ◆ _negateCoefficient. bool RooExponential::_negateCoefficient = false. protected . Definition at line 48 of file RooExponential.h. ◆ c. RooRealProxy RooExponential::c. protected . Definition at line 47 of file RooExponential.h. ◆ x. RooRealProxy RooExponential::x. protected . Definition at line 46 of file RooExponential.h. Libraries for RooExponential:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooExponential.h; roofit/roofit/src/RooExponential.cxx. RooExponential. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:79855,Guid,Guide,79855,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['Guid'],['Guide']
Usability,"eCounter ; (; ). staticprotected . The renaming counter has to be incremented every time a RooAbsArg is renamed. ; This is a protected function, and only the friend class RooAbsArg should call it when it gets renamed. ; Definition at line 98 of file RooNameReg.cxx. ◆ instance(). RooNameReg & RooNameReg::instance ; (; ). static . Return reference to singleton instance. ; Definition at line 42 of file RooNameReg.cxx. ◆ known(). const TNamed * RooNameReg::known ; (; const char * ; stringPtr). static . If the name is already known, return its TNamed pointer. Otherwise return 0 (don't register the name). ; Definition at line 83 of file RooNameReg.cxx. ◆ ptr(). const TNamed * RooNameReg::ptr ; (; const char * ; stringPtr). static . Return a unique TNamed pointer for given C++ string. ; Definition at line 73 of file RooNameReg.cxx. ◆ renameCounter(). const std::size_t & RooNameReg::renameCounter ; (; ). static . renamed in this RooFit process. ; Definition at line 107 of file RooNameReg.cxx. ◆ str(). static const char * RooNameReg::str ; (; const TNamed * ; ptr). inlinestatic . Return C++ string corresponding to given TNamed pointer. ; Definition at line 39 of file RooNameReg.h. Friends And Related Symbol Documentation. ◆ RooAbsArg. friend class RooAbsArg. friend . Definition at line 52 of file RooNameReg.h. ◆ RooAbsData. friend class RooAbsData. friend . Definition at line 53 of file RooNameReg.h. Member Data Documentation. ◆ _map. std::unordered_map<std::string,std::unique_ptr<TNamed> > RooNameReg::_map. protected . Definition at line 56 of file RooNameReg.h. ◆ _renameCounter. std::size_t RooNameReg::_renameCounter = 0. protected . Definition at line 57 of file RooNameReg.h. Libraries for RooNameReg:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooNameReg.h; roofit/roofitcore/src/RooNameReg.cxx. RooNameReg. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNameReg.html:15264,Guid,Guide,15264,doc/master/classRooNameReg.html,https://root.cern,https://root.cern/doc/master/classRooNameReg.html,1,['Guid'],['Guide']
Usability,"eCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTGDoubleSlider::ChangeCursor(Event_t* event); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static voidTGDoubleSlider::FixBounds(Float_t& min, Float_t& max); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringTGDoubleSlider::GetSString() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidSetPointerPos(Int_t z, Int_t opt = 0); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEdit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTripleHSlider.html:16243,Clear,ClearFlags,16243,root/html602/TGTripleHSlider.html,https://root.cern,https://root.cern/root/html602/TGTripleHSlider.html,4,['Clear'],['ClearFlags']
Usability,"eCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSeqCollection::Changed(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTList::DeleteLink(TObjLink* lnk); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TObjLink**TList::DoSort(TObjLink** head, Int_t n); TObjLink*TList::FindLink(const TObject* obj, Int_t& idx) const; virtual const char*TCollection::GetCollectionEntryName(TObject* entry) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInit(const char* cl, void* object, const char* redo, const char* undo); TObjLink*TList::LinkAt(Int_t idx) const; Bool_tTList::LnkCompare(TObjLink* l1, TObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = NULL); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = NULL); virtual voidTCollection::PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. Data Members; public:. enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:15507,undo,undo,15507,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,3,['undo'],['undo']
Usability,"eCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSeqCollection::Changed(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTList::DeleteLink(TObjLink* lnk); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TObjLink**TList::DoSort(TObjLink** head, Int_t n); TObjLink*TList::FindLink(const TObject* obj, Int_t& idx) const; virtual const char*TCollection::GetCollectionEntryName(TObject* entry) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInit(const char* cl, void* object, const char* redo, const char* undo); TObjLink*TList::LinkAt(Int_t idx) const; Bool_tTList::LnkCompare(TObjLink* l1, TObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = NULL); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = NULL); virtual voidTCollection::PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. private:. TQCommand&operator=(const TQCommand&). Data Members; public:. enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQCommand.html:15651,undo,undo,15651,root/html534/TQCommand.html,https://root.cern,https://root.cern/root/html534/TQCommand.html,1,['undo'],['undo']
Usability,"eDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Sat Jun 20 17:29:22 2015 » Last generated: 2015-06-20 17:29; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsArg.html:45984,clear,clearShapeDirty,45984,root/html604/RooAbsArg.html,https://root.cern,https://root.cern/root/html604/RooAbsArg.html,1,['clear'],['clearShapeDirty']
Usability,"eDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Sun Jun 28 16:37:40 2015 » Last generated: 2015-06-28 16:37; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:44288,clear,clearShapeDirty,44288,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,1,['clear'],['clearShapeDirty']
Usability,"eDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Tue Jun 30 14:29:52 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsArg.html:45984,clear,clearShapeDirty,45984,root/html602/RooAbsArg.html,https://root.cern,https://root.cern/root/html602/RooAbsArg.html,1,['clear'],['clearShapeDirty']
Usability,"eElement * ; el). protectedvirtual . Activate item. ; Reimplemented in TGLBContainer, and TGLVContainer.; Definition at line 701 of file TGCanvas.cxx. ◆ AdjustPosition(). void TGContainer::AdjustPosition ; (; ). virtual . Move content to position of highlighted/activated frame. ; Reimplemented in TGListTree.; Definition at line 1793 of file TGCanvas.cxx. ◆ Associate(). virtual void TGContainer::Associate ; (; const TGWindow * ; w). inlinevirtual . Reimplemented in TGLBContainer.; Definition at line 89 of file TGCanvas.h. ◆ Class(). static TClass * TGContainer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGContainer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGContainer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 154 of file TGCanvas.h. ◆ ClearViewPort(). void TGContainer::ClearViewPort ; (; ). virtual . Clear view port and redraw full content. ; Definition at line 891 of file TGCanvas.cxx. ◆ Clicked() [1/2]. void TGContainer::Clicked ; (; TGFrame * ; f, . Int_t ; btn . ). virtual . Emit Clicked() signal. ; Reimplemented in TGListTree.; Definition at line 510 of file TGCanvas.cxx. ◆ Clicked() [2/2]. void TGContainer::Clicked ; (; TGFrame * ; f, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). virtual . Emit Clicked() signal. ; Reimplemented in TGListTree.; Definition at line 523 of file TGCanvas.cxx. ◆ CurrentChanged() [1/2]. void TGContainer::CurrentChanged ; (; Int_t ; x, . Int_t ; y . ). virtual . Emit signal when current position changed. ; Reimplemented in TGListTree.; Definition at line 434 of file TGCanvas.cxx. ◆ CurrentChanged() [2/2]. void TGContainer::CurrentChanged ; (; TGFrame * ; f). virtual . Emit signal when current selected frame changed. ; Reimplemented in TGListTree.; Definition at line 447 of file TGCanvas.cxx. ◆ DeActivateItem(). void TGContainer::DeActivateItem ; (; TGFrameElement * ; el)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:40427,Clear,Clear,40427,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,1,['Clear'],['Clear']
Usability,"eElement>::_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache eleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:4783,clear,clearOnRedirect,4783,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,1,['clear'],['clearOnRedirect']
Usability,"eForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t p[][3], Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t p[][3]) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t p[][3]) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveBoxSetGL.html:5733,clear,cleare,5733,root/html534/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html534/TEveBoxSetGL.html,1,['clear'],['cleare']
Usability,eFrame.h. Member Data Documentation. ◆ fButtons. TGCompositeFrame* TGDockableFrame::fButtons. protected . container containing dock and hide buttons ; Definition at line 97 of file TGDockableFrame.h. ◆ fContainer. TGCompositeFrame* TGDockableFrame::fContainer. protected . container containing dockable frame ; Definition at line 96 of file TGDockableFrame.h. ◆ fDeleted. Bool_t TGDockableFrame::fDeleted. protected . kTRUE if it is being deleted ; Definition at line 93 of file TGDockableFrame.h. ◆ fDockButton. TGDockButton* TGDockableFrame::fDockButton. protected . dock button ; Definition at line 98 of file TGDockableFrame.h. ◆ fDockName. TString TGDockableFrame::fDockName. protected . name of frame ; Definition at line 95 of file TGDockableFrame.h. ◆ fEnableHide. Bool_t TGDockableFrame::fEnableHide. protected . if frame can be hidden ; Definition at line 91 of file TGDockableFrame.h. ◆ fEnableUndock. Bool_t TGDockableFrame::fEnableUndock. protected . if frame can be undocked ; Definition at line 92 of file TGDockableFrame.h. ◆ fFixedSize. Bool_t TGDockableFrame::fFixedSize. protected . kTRUE if fixed size when undocked ; Definition at line 94 of file TGDockableFrame.h. ◆ fFrame. TGUndockedFrame* TGDockableFrame::fFrame. protected . undocked frame ; Definition at line 100 of file TGDockableFrame.h. ◆ fHidden. Bool_t TGDockableFrame::fHidden. protected . if frame is hidden ; Definition at line 90 of file TGDockableFrame.h. ◆ fHideButton. TGDockHideButton* TGDockableFrame::fHideButton. protected . hide button ; Definition at line 99 of file TGDockableFrame.h. ◆ fHints. TGLayoutHints* TGDockableFrame::fHints. protected . layout hints ; Definition at line 101 of file TGDockableFrame.h. ◆ fLb. TGLayoutHints* TGDockableFrame::fLb. protected . Definition at line 102 of file TGDockableFrame.h. ◆ fLc. TGLayoutHints * TGDockableFrame::fLc. protected . layout hints ; Definition at line 102 of file TGDockableFrame.h. Libraries for TGDockableFrame:. [legend]; The documentation for,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:40124,undo,undocked,40124,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['undo'],['undocked']
Usability,eIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GaussLegendreIntegrator::SetAbsTolerance ; (; double ; ). overridevirtual . This method is not implemented. ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 93 of file GaussLegendreIntegrator.cxx. ◆ SetNumberPoints(). void ROOT::Math::GaussLegendreIntegrator::SetNumberPoints ; (; int ; num). Set the number of points used in the calculation of the integral. ; Definition at line 43 of file GaussLegendreIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GaussLegendreIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 167 of file GaussLegendreIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussLegendreIntegrator::SetRelTolerance ; (; double ; eps). overridevirtual . Set the desired relative Error. ; Reimplemented from ROOT::Math::GaussIntegrator.; Definition at line 86 of file GaussLegendreIntegrator.cxx. Member Data Documentation. ◆ fNum. int ROOT::Math::GaussLegendreIntegrator::fNum. protected . Number of points used in the estimation of the integral. ; Definition at line 113 of file GaussLegendreIntegrator.h. ◆ fW. double* ROOT::Math::GaussLegendreIntegrator::fW. protected . Weights of the points used. ; Definition at line 115 of file GaussLegendreIntegrator.h. ◆ fX. double* ROOT::Math::GaussLegendreIntegrator::fX. protected . Abscisa of the points used. ; Definition at line 114 of file GaussLegendreIntegrator.h. Libraries for ROOT::Math::GaussLegendreIntegrator:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/GaussLegendreIntegrator.h; math/mathcore/src/GaussLegendreIntegrator.cxx. ROOTMathGaussLegendreIntegrator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:9446,Guid,Guide,9446,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,1,['Guid'],['Guide']
Usability,"eItem * ; item, . Bool_t ; state . ). Check all child items of 'item' and 'item' itself according to the state value: kTRUE means check all, kFALSE - uncheck all. ; Definition at line 2882 of file TGListTree.cxx. ◆ Checked(). void TGListTree::Checked ; (; TObject * ; obj, . Bool_t ; check . ). virtual . Emit Checked() signal. ; Definition at line 1106 of file TGListTree.cxx. ◆ CheckItem(). void TGListTree::CheckItem ; (; TGListTreeItem * ; item, . Bool_t ; check = kTRUE . ). Set check button state for the node 'item'. ; Definition at line 2756 of file TGListTree.cxx. ◆ Class(). static TClass * TGListTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGListTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGListTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 441 of file TGListTree.h. ◆ ClearHighlighted(). void TGListTree::ClearHighlighted ; (; ). Un highlight items. ; Definition at line 2386 of file TGListTree.cxx. ◆ Clicked() [1/5]. void TGListTree::Clicked ; (; TGFrame * ; f, . Int_t ; btn . ). inlineoverrideprotectedvirtual . Emit Clicked() signal. ; Reimplemented from TGContainer.; Definition at line 296 of file TGListTree.h. ◆ Clicked() [2/5]. void TGListTree::Clicked ; (; TGFrame * ; f, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). inlineoverrideprotectedvirtual . Emit Clicked() signal. ; Reimplemented from TGContainer.; Definition at line 297 of file TGListTree.h. ◆ Clicked() [3/5]. void TGListTree::Clicked ; (; TGListTreeItem * ; entry, . Int_t ; btn . ). virtual . Emit Clicked() signal. ; Definition at line 1119 of file TGListTree.cxx. ◆ Clicked() [4/5]. void TGListTree::Clicked ; (; TGListTreeItem * ; entry, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). virtual . Emit Clicked() signal. ; Definition at line 1132 of file TGListTree.cxx. ◆ Clicked() [5/5]. void TGListTree::Clicked ; (; TGListTreeItem ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:53691,Clear,ClearHighlighted,53691,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['Clear'],['ClearHighlighted']
Usability,"eKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 15:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TCollectionPropertyBrowsable.html:10129,simpl,simply,10129,root/html604/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html604/TCollectionPropertyBrowsable.html,1,['simpl'],['simply']
Usability,"eKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 14:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollectionPropertyBrowsable.html:10129,simpl,simply,10129,root/html602/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html602/TCollectionPropertyBrowsable.html,1,['simpl'],['simply']
Usability,eLayout.cxx. ◆ SetRowColSizesInit(). void TGTableLayout::SetRowColSizesInit ; (; ). protected . Initialize rows/cols. ; By default they do not expand and they do shrink. What the children want determine what the rows/cols do. ; Definition at line 360 of file TGTableLayout.cxx. ◆ Streamer(). void TGTableLayout::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLayoutManager. ◆ StreamerNVirtual(). void TGTableLayout::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 112 of file TGTableLayout.h. Member Data Documentation. ◆ fCol. TableData_t* TGTableLayout::fCol. protected . info about each column ; Definition at line 78 of file TGTableLayout.h. ◆ fHints. Int_t TGTableLayout::fHints. layout hints (currently not used) ; Definition at line 100 of file TGTableLayout.h. ◆ fHomogeneous. Bool_t TGTableLayout::fHomogeneous. protected . all cols/rows same size ; Definition at line 81 of file TGTableLayout.h. ◆ fList. TList* TGTableLayout::fList. protected . list of frames to arrange ; Definition at line 80 of file TGTableLayout.h. ◆ fMain. TGCompositeFrame* TGTableLayout::fMain. protected . container frame ; Definition at line 79 of file TGTableLayout.h. ◆ fNcols. UInt_t TGTableLayout::fNcols. number of columns ; Definition at line 102 of file TGTableLayout.h. ◆ fNrows. UInt_t TGTableLayout::fNrows. number of rows ; Definition at line 101 of file TGTableLayout.h. ◆ fRow. TableData_t* TGTableLayout::fRow. protected . info about each row ; Definition at line 77 of file TGTableLayout.h. ◆ fSep. Int_t TGTableLayout::fSep. interval between frames ; Definition at line 99 of file TGTableLayout.h. Libraries for TGTableLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTableLayout.h; gui/gui/src/TGTableLayout.cxx. TGTableLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableLayout.html:19694,Guid,Guide,19694,doc/master/classTGTableLayout.html,https://root.cern,https://root.cern/doc/master/classTGTableLayout.html,1,['Guid'],['Guide']
Usability,"eManager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildList(TStyle* style = 0); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyleManager.html:5515,Clear,Clear,5515,root/html528/TStyleManager.html,https://root.cern,https://root.cern/root/html528/TStyleManager.html,6,['Clear'],['Clear']
Usability,"eManager.; Definition at line 49 of file RooAbsCache.h. ◆ printCompactTreeHook(). virtual void RooAbsCache::printCompactTreeHook ; (; std::ostream & ; , . const char * ;  . ). inlinevirtual . Interface for printing of cache guts in tree mode printing. ; Reimplemented in RooCacheManager< T >, RooCacheManager< RooAbsCacheElement >, and RooObjCacheManager.; Definition at line 55 of file RooAbsCache.h. ◆ redirectServersHook(). virtual bool RooAbsCache::redirectServersHook ; (; const RooAbsCollection & ; , . bool ; , . bool ; , . bool ;  . ). inlinevirtual . Interface for server redirect calls. ; Reimplemented in RooCacheManager< T >, RooCacheManager< RooAbsCacheElement >, RooObjCacheManager, and RooMappedCategoryCache.; Definition at line 40 of file RooAbsCache.h. ◆ setOwner(). void RooAbsCache::setOwner ; (; RooAbsArg * ; owner). Reset the owner, triggering the owner to register this cache in its list of caches. ; Definition at line 71 of file RooAbsCache.cxx. ◆ Streamer(). virtual void RooAbsCache::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in RooCacheManager< T >, RooCacheManager< RooAbsCacheElement >, and RooObjCacheManager. ◆ StreamerNVirtual(). void RooAbsCache::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file RooAbsCache.h. ◆ wireCache(). virtual void RooAbsCache::wireCache ; (; ). inlinevirtual . Reimplemented in RooCacheManager< T >, RooCacheManager< RooAbsCacheElement >, and RooMappedCategoryCache.; Definition at line 57 of file RooAbsCache.h. Member Data Documentation. ◆ _owner. RooAbsArg* RooAbsCache::_owner. protected . Pointer to owning RooAbsArg. ; Definition at line 61 of file RooAbsCache.h. Libraries for RooAbsCache:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCache.h; roofit/roofitcore/src/RooAbsCache.cxx. RooAbsCache. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCache.html:6570,Guid,Guide,6570,doc/master/classRooAbsCache.html,https://root.cern,https://root.cern/doc/master/classRooAbsCache.html,1,['Guid'],['Guide']
Usability,"eMap ; (; ). Default constructor. ; Definition at line 30 of file TDictAttributeMap.cxx. ◆ ~TDictAttributeMap(). TDictAttributeMap::~TDictAttributeMap ; (; ). virtual . Default destructor. ; Definition at line 38 of file TDictAttributeMap.cxx. Member Function Documentation. ◆ AddProperty(). void TDictAttributeMap::AddProperty ; (; const char * ; key, . const char * ; value . ). Add a property with a String value to the TDictAttributeMap. ; Parameters: key and char* value of the property. ; Definition at line 46 of file TDictAttributeMap.cxx. ◆ Class(). static TClass * TDictAttributeMap::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDictAttributeMap::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDictAttributeMap::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 48 of file TDictAttributeMap.h. ◆ Clear(). void TDictAttributeMap::Clear ; (; Option_t * ; option = """"). overridevirtual . Deletes all the properties of the class. ; Reimplemented from TObject.; Definition at line 109 of file TDictAttributeMap.cxx. ◆ DeclFileName(). static const char * TDictAttributeMap::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 48 of file TDictAttributeMap.h. ◆ GetPropertyAsString(). const char * TDictAttributeMap::GetPropertyAsString ; (; const char * ; key); const. Access the value of a String property using the key. ; Definition at line 66 of file TDictAttributeMap.cxx. ◆ GetPropertySize(). Int_t TDictAttributeMap::GetPropertySize ; (; ); const. inline . Definition at line 39 of file TDictAttributeMap.h. ◆ HasKey(). Bool_t TDictAttributeMap::HasKey ; (; const char * ; key); const. Definition at line 54 of file TDictAttributeMap.cxx. ◆ IsA(). TClass * TDictAttributeMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDictAttributeMap.html:11893,Clear,Clear,11893,doc/master/classTDictAttributeMap.html,https://root.cern,https://root.cern/doc/master/classTDictAttributeMap.html,1,['Clear'],['Clear']
Usability,"eMap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidvector<long>::assign(initializer_list<vector<long>::value_type> __l); voidvector<long>::assign(vector<bool>::size_type __n, const vector<long>::value_type& __val); vector<long>::referencevector<long>::at(vector<bool>::size_type __n); vector<long>::const_referencevector<long>::at(vector<bool>::size_type __n) const; vector<long>::referencevector<long>::back(); vector<long>::const_referencevector<long>::back() const; TTable::iteratorBegin(); TTable::iteratorBegin() const; vector<long>::iteratorvector<long>::begin(); vector<long>::const_iteratorvector<long>::begin() const; virtual voidTObject::Browse(TBrowser* b); vector<bool>::size_typevector<long>::capacity() const; vector<long>::const_iteratorvector<long>::cbegin() const; vector<long>::const_iteratorvector<long>::cend() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidvector<long>::clear(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; vector<long>::const_reverse_iteratorvector<long>::crbegin() const; vector<long>::const_reverse_iteratorvector<long>::crend() const; long*vector<long>::data(); const long*vector<long>::data() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; boolvector<long>::empty() const; TTable::iteratorEnd(); TTable::iteratorEnd() const; vector<long>::iteratorvector<long>::end(); vector<long>::const_iteratorvector<long>::end() const; vector<long>::iteratorvector<long>::erase(vector<long>::iterator __positi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableMap.html:2442,clear,clear,2442,root/html602/TTableMap.html,https://root.cern,https://root.cern/root/html602/TTableMap.html,1,['clear'],['clear']
Usability,"eMap_tstd::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_tDefinition RConversionRuleParser.h:27; ROOT::WriteReadRuleFuncvoid WriteReadRuleFunc(SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output)Write the conversion function for Read rule, the function name is being written to rule[""funcname""].Definition RConversionRuleParser.cxx:655; ROOT::gReadRulesR__EXTERN SchemaRuleClassMap_t gReadRulesDefinition RConversionRuleParser.h:24; ROOT::SchemaRuleMap_tstd::map< std::string, std::string > SchemaRuleMap_tDefinition RConversionRuleParser.h:22; ROOT::HasValidDataMembersbool HasValidDataMembers(SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string)Check if given rule contains references to valid data members.Definition RConversionRuleParser.cxx:461; ROOT::GetRuleIncludesvoid GetRuleIncludes(std::list< std::string > &result)Get the list of includes specified in the shema rules.Definition RConversionRuleParser.cxx:855; ROOT::WriteReadRawRuleFuncvoid WriteReadRawRuleFunc(SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output)Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""...Definition RConversionRuleParser.cxx:708; ROOT::ProcessReadRawPragmavoid ProcessReadRawPragma(const char *args, std::string &error_string)I am being called then a readraw pragma is encountered.Definition RConversionRuleParser.cxx:935; ROOT::gReadRawRulesR__EXTERN SchemaRuleClassMap_t gReadRawRulesDefinition RConversionRuleParser.h:25; ROOT::ParseRulebool ParseRule(std::string rule, ROOT::Internal::MembersMap_t &result, std::string &error_string)Parse the schema rule as specified in the LinkDef file.Definition RConversionRuleParser.cxx:103; outputstatic void output(). corefoundationresRConversionRuleParser.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RConversionRuleParser_8h_source.html:7318,Guid,Guide,7318,doc/v632/RConversionRuleParser_8h_source.html,https://root.cern,https://root.cern/doc/v632/RConversionRuleParser_8h_source.html,1,['Guid'],['Guide']
Usability,"eMode (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  Intercept calls to perform automatic optimization of cache mode operation. ;  ; void printCompactTreeHook (std::ostream &, const char *) override;  Add details on cache contents when printing in tree mode. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Intercept server redirect calls. ;  ; void setClearOnRedirect (bool flag);  ; void sterilize () override;  Clear the cache payload but retain slot mapping w.r.t to normalization and integration sets. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >;  RooCacheManager (const RooCacheManager &other, RooAbsArg *owner=nullptr);  Copy constructor. ;  ;  RooCacheManager (Int_t maxSize=2);  Constructor for simple caches without RooAbsArg payload. ;  ;  RooCacheManager (RooAbsArg *owner, Int_t maxSize=2);  Constructor for simple caches with RooAbsArg derived payload. ;  ;  ~RooCacheManager () override;  Destructor. ;  ; Int_t cacheSize () const;  Return size of cache. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIdx, const char *isetRangeName);  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Retrieve payload object indexed on nset,uset amd isetRangeName If sterileIdx is not null, it is set to the index of the sterile slot in cacse such a slot is recycled. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Getter function without integration set. ;  ; RooAbsCacheElement * getObjByIndex (Int_t index) const;  Retrieve payload object by slot index. ;  ; Int_t lastIndex () const;  Return index of slot used in last get or set operation. ;  ; void reset ();  Clear the cache. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:2741,simpl,simple,2741,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['simpl'],['simple']
Usability,"eName=nullptr) const override;  Return analytical integral represent by appropriate element of projection cache. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsPdf * createProjection (const RooArgSet &iset) override;  Special version of RooAbsReal::createProjection that deals with projections of projections. ;  ; bool forceAnalyticalInt (const RooAbsArg &dep) const override;  Force RooRealIntegral to relegate integration of all observables to internal logic. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Mark all requested variables as internally integrated. ;  ; void initGenerator (Int_t) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the integration operation. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:2488,intuit,intuitively,2488,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,1,['intuit'],['intuitively']
Usability,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:52966,clear,clearShapeDirty,52966,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,399,['clear'],"['clearShapeDirty', 'clearValueAndShapeDirty', 'clearValueDirty']"
Usability,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedReal.html:55360,clear,clearShapeDirty,55360,doc/master/classRooCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooCachedReal.html,3,['clear'],"['clearShapeDirty', 'clearValueAndShapeDirty', 'clearValueDirty']"
Usability,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:54663,clear,clearShapeDirty,54663,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,6,['clear'],"['clearShapeDirty', 'clearValueAndShapeDirty', 'clearValueDirty']"
Usability,eOutputindicates a potential tranformation of the output values before further computation DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each output value (to create a probability); SOFTMAX applies a softmax transformation to all output values (mutually exclusive probability) . Definition at line 122 of file NeuralNet.cxx. ◆ LayerData() [5/6]. TMVA::DNN::LayerData::LayerData ; (; const LayerData & ; other). inline . copy c'tor of LayerData ; Definition at line 515 of file NeuralNet.h. ◆ LayerData() [6/6]. TMVA::DNN::LayerData::LayerData ; (; LayerData && ; other). inline . move c'tor of LayerData ; Definition at line 538 of file NeuralNet.h. Member Function Documentation. ◆ activationFunction(). std::shared_ptr< std::function< double(double)> > TMVA::DNN::LayerData::activationFunction ; (; ); const. inline . Definition at line 607 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::LayerData::clear ; (; ). inline . clear the values and the deltas ; Definition at line 576 of file NeuralNet.h. ◆ clearDropOut(). void TMVA::DNN::LayerData::clearDropOut ; (; ). inline . clear the drop-out-data for this layer ; Definition at line 620 of file NeuralNet.h. ◆ computeProbabilities(). LayerData::container_type TMVA::DNN::LayerData::computeProbabilities ; (; ); const. private . compute the probabilities from the node values ; Definition at line 140 of file NeuralNet.cxx. ◆ deltasBegin() [1/2]. iterator_type TMVA::DNN::LayerData::deltasBegin ; (; ). inline . returns iterator to the begin of the deltas (back-propagation) ; Definition at line 591 of file NeuralNet.h. ◆ deltasBegin() [2/2]. const_iterator_type TMVA::DNN::LayerData::deltasBegin ; (; ); const. inline . returns const iterator to the begin of the deltas (back-propagation) ; Definition at line 594 of file NeuralNet.h. ◆ deltasEnd() [1/2]. iterator_type TMVA::DNN::LayerData::deltasEnd ; (; ). inline . returns iterator to the end of the deltas (back-propagation) ; Definition at line 592 o,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:10954,clear,clear,10954,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['clear'],['clear']
Usability,"ePad(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddCompositeOp(UInt_t operation); voidAddHistoPhysical(TGLLogicalShape* log, const Float_t* histColor = 0); virtual Int_tAddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); virtual Int_tAddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_t* addChildren = 0); voidTGLSceneBase::AddViewer(TGLViewerBase* viewer); virtual voidTGLScene::AdoptLogical(TGLLogicalShape& shape); virtual voidTGLScene::AdoptPhysical(TGLPhysicalShape& shape); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginScene(); UInt_tTGLScene::BeginSmartRefresh(); virtual Bool_tTGLScene::BeginUpdate(); const TGLBoundingBox&TGLSceneBase::BoundingBox() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tBuildingScene() const; virtual voidTGLScene::CalcBoundingBox() const; virtual Bool_tCanLoopOnPrimitives() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); TGLClip*TGLSceneBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseComposite(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGLScene::TSceneInfo*TGLScene::CreateSceneInfo(TGLViewerBase* view); TGLLockable::ELockTGLLockable::CurrentLock() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Bool_tTGLScene::DestroyLogical(TObject* logid, Bool_t mustFind = kTRUE); virtual Int_tTGLScene::DestroyLogicals(); virtual Bool_tTGLScene::DestroyPhysical(UInt_t phid); virtual Int_tTGLScene::DestroyPhysicals(); virtual Int_tDistancetoPrimitive(Int_t, Int_t); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTVirtualViewer3D::DrawViewer(); virtual voidTObject::Dump() constMENU ; voidTGLScene::DumpMapSizes() const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLScenePad.html:1520,Clear,Clear,1520,root/html530/TGLScenePad.html,https://root.cern,https://root.cern/root/html530/TGLScenePad.html,5,['Clear'],['Clear']
Usability,"ePoint(Float_t& x, Float_t& y); Pre-scale point (x, y) in projected coordinates for 2D projections:; RhoZ ~ (rho, z); RPhi ~ (r, phi), scaling phi doesn't make much sense. void PreScalePoint(Float_t& x, Float_t& y, Float_t& z); Pre-scale point (x, y, z) in projected coordinates for 3D projection. void AddPreScaleEntry(Int_t coord, Float_t max_val, Float_t scale); Add new scaling range for given coordinate.; Arguments:; coord 0 ~ x, 1 ~ y, 2 ~ z; value value of input coordinate from which to apply this scale;; scale the scale to apply from value onwards. NOTE: If pre-scaling is combined with center-displaced then; the scale of the central region should be 1. This limitation; can be removed but will cost CPU. void ChangePreScaleEntry(Int_t coord, Int_t entry, Float_t new_scale); Change scale for given entry and coordinate. NOTE: If the first entry you created used other value than 0,; one entry (covering range from 0 to this value) was created; automatically. void ClearPreScales(); Clear all pre-scaling information. void SetDistortion(Float_t d); Set distortion. void SetFixR(Float_t x); Set fixed radius. void SetFixZ(Float_t x); Set fixed radius. void SetPastFixRFac(Float_t x); Set 2's-exponent for relative scaling beyond FixR. Float_t* GetProjectedCenter(); Get projected center. void SetDisplaceOrigin(bool ); Set flag to displace for center.; This options is useful if want to have projected center; at (0, 0) position in projected coordinates and want to dismiss; gap around projected center in RhoZ projection. void SetPastFixZFac(Float_t x); Set 2's-exponent for relative scaling beyond FixZ. void BisectBreakPoint(TEveVector& vL, TEveVector& vR, Float_t eps_sqr); Find break-point on both sides of the discontinuity.; They still need to be projected after the call.; This is an obsolete version of the method that required manual; specification of precision -- this lead to (infrequent) infinite loops. void BisectBreakPoint(TEveVector& vL, TEveVector& vR, Bool_t project_res",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveProjection.html:6641,Clear,ClearPreScales,6641,root/html530/TEveProjection.html,https://root.cern,https://root.cern/root/html530/TEveProjection.html,10,['Clear'],"['Clear', 'ClearPreScales']"
Usability,"ePoint(Float_t& x, Float_t& y); Pre-scale point (x, y) in projected coordinates for 2D projections:; RhoZ ~ (rho, z); RPhi ~ (r, phi), scaling phi doesn't make much sense. void PreScalePoint(Float_t& x, Float_t& y, Float_t& z); Pre-scale point (x, y, z) in projected coordinates for 3D projection. void AddPreScaleEntry(Int_t coord, Float_t max_val, Float_t scale); Add new scaling range for given coordinate.; Arguments:; coord 0 ~ x, 1 ~ y, 2 ~ z; value value of input coordinate from which to apply this scale;; scale the scale to apply from value onwards. NOTE: If pre-scaling is combined with center-displaced then; the scale of the central region should be 1. This limitation; can be removed but will cost CPU. void ChangePreScaleEntry(Int_t coord, Int_t entry, Float_t new_scale); Change scale for given entry and coordinate. NOTE: If the first entry you created used other value than 0,; one entry (covering range from 0 to this value) was created; automatically. void ClearPreScales(); Clear all pre-scaling information. void UpdateLimit(); Update convergence in +inf and -inf. void SetDistortion(Float_t d); Set distortion. void SetFixR(Float_t x); Set fixed radius. void SetFixZ(Float_t x); Set fixed radius. void SetPastFixRFac(Float_t x); Set 2's-exponent for relative scaling beyond FixR. void SetPastFixZFac(Float_t x); Set 2's-exponent for relative scaling beyond FixZ. void BisectBreakPoint(TEveVector& vL, TEveVector& vR, Float_t eps_sqr = 1e-10f); Find break-point on both sides of the discontinuity.; They still need to be projected. void SetDirectionalVector(Int_t screenAxis, TEveVector& vec); Get vector for axis in a projected space. Float_t GetValForScreenPos(Int_t ax, Float_t value); Inverse projection. Float_t GetScreenVal(Int_t ax, Float_t value); Project point on given axis and return projected value. virtual ~TEveProjection(); {}. Bool_t Is2D() const. Bool_t Is3D() const. void ProjectPoint(Float_t& x, Float_t& y, Float_t& z, Float_t d, TEveProjection::EPProc_e p =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveProjection.html:6452,Clear,ClearPreScales,6452,root/html528/TEveProjection.html,https://root.cern,https://root.cern/root/html528/TEveProjection.html,2,['Clear'],"['Clear', 'ClearPreScales']"
Usability,"ePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ setAutomaticChunking(). unsigned ROOT::Fit::FitUtil::setAutomaticChunking ; (; unsigned ; nEvents). Definition at line 1841 of file FitUtil.cxx. ROOTFitFitUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:11553,Guid,Guide,11553,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['Guid'],['Guide']
Usability,"ePrimitive(). void TGeoRotation::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 1221 of file TGeoMatrix.cxx. ◆ SetAngles() [1/2]. void TGeoRotation::SetAngles ; (; Double_t ; phi, . Double_t ; theta, . Double_t ; psi . ). Set matrix elements according to Euler angles. ; Phi is the rotation angle about Z axis and is done first, theta is the rotation about new X and is done second, psi is the rotation angle about new Z and is done third. All angles are in degrees. ; Definition at line 1251 of file TGeoMatrix.cxx. ◆ SetAngles() [2/2]. void TGeoRotation::SetAngles ; (; Double_t ; theta1, . Double_t ; phi1, . Double_t ; theta2, . Double_t ; phi2, . Double_t ; theta3, . Double_t ; phi3 . ). Set matrix elements in the GEANT3 way. ; Definition at line 1279 of file TGeoMatrix.cxx. ◆ SetMatrix(). void TGeoRotation::SetMatrix ; (; const Double_t * ; rot). inline . Definition at line 230 of file TGeoMatrix.h. ◆ SetRotation(). void TGeoRotation::SetRotation ; (; const TGeoMatrix & ; other). Copy rotation elements from other rotation matrix. ; Definition at line 1239 of file TGeoMatrix.cxx. ◆ Streamer(). void TGeoRotation::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoMatrix. ◆ StreamerNVirtual(). void TGeoRotation::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 242 of file TGeoMatrix.h. Member Data Documentation. ◆ fRotationMatrix. Double_t TGeoRotation::fRotationMatrix[3 *3]. protected . Definition at line 170 of file TGeoMatrix.h. Libraries for TGeoRotation:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoMatrix.h; geom/geom/src/TGeoMatrix.cxx. TGeoRotation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRotation.html:30227,Guid,Guide,30227,doc/master/classTGeoRotation.html,https://root.cern,https://root.cern/doc/master/classTGeoRotation.html,1,['Guid'],['Guide']
Usability,"eProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*TEveWindow::CreateWindowMainFrame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveWindowPack.html:2299,Clear,ClearEveFrame,2299,root/html530/TEveWindowPack.html,https://root.cern,https://root.cern/root/html530/TEveWindowPack.html,10,['Clear'],['ClearEveFrame']
Usability,"eProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategoryLValue.html:2330,clear,clearValueDirty,2330,root/html532/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html532/RooAbsCategoryLValue.html,1,['clear'],['clearValueDirty']
Usability,"eProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsString.html:2089,clear,clearValueDirty,2089,root/html532/RooAbsString.html,https://root.cern,https://root.cern/root/html532/RooAbsString.html,1,['clear'],['clearValueDirty']
Usability,"eProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategory.html:2261,clear,clearValueDirty,2261,root/html532/RooAbsCategory.html,https://root.cern,https://root.cern/root/html532/RooAbsCategory.html,1,['clear'],['clearValueDirty']
Usability,"eProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinningCategory.html:2100,clear,clearValueDirty,2100,root/html532/RooBinningCategory.html,https://root.cern,https://root.cern/root/html532/RooBinningCategory.html,5,['clear'],['clearValueDirty']
Usability,"eProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStringVar.html:1984,clear,clearValueDirty,1984,root/html532/RooStringVar.html,https://root.cern,https://root.cern/root/html532/RooStringVar.html,1,['clear'],['clearValueDirty']
Usability,"eProp)RooAbsArg; CheckedHash()TObjectinline; checkObservables(const RooArgSet *nset) constRooAbsArgvirtual; chi2FitTo(RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})RooAbsRealvirtual; chi2FitTo(RooDataHist &data, const RooLinkedList &cmdList)RooAbsRealvirtual; chi2FitTo(RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={})RooAbsRealvirtual; chi2FitTo(RooDataSet &xydata, const RooLinkedList &cmdList)RooAbsRealvirtual; Class()RooAbsPdfstatic; Class_Name()RooAbsPdfstatic; Class_Version()RooAbsPdfinlinestatic; ClassName() constTObjectvirtual; cleanBranchName() constRooAbsArgprotected; Clear(Option_t *option="""") overrideTNamedvirtual; clearEvalErrorLog()RooAbsRealstatic; clearShapeDirty() constRooAbsArginlineprotected; clearValueAndShapeDirty() constRooAbsArginlineprotected; clearValueDirty() constRooAbsArginlineprotected; clients() constRooAbsArginline; Clone(const char *newname=nullptr) const overrideRooAbsArginlinevirtual; clone(const char *newname=nullptr) const =0RooAbsArgpure virtual; cloneTree(const char *newname=nullptr) constRooAbsArgvirtual; CollectErrors enum valueRooAbsReal; Compare(const TObject *other) const overrideRooAbsArgvirtual; compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const overrideRooAbsPdfvirtual; ConfigChange enum valueRooAbsArg; constRooAbsArg; constRooAbsArg; ConstOpCode enum nameRooAbsArg; constOptimizeTestStatistic(ConstOpCode opcode, bool doAlsoTrackingOpt=true)RooAbsArgvirtual; ContentsOption enum nameRooPrintable; Copy(TObject &named) const overrideTNamedvirtual; copyCache(const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) overrideRooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf-members.html:5978,clear,clearEvalErrorLog,5978,doc/master/classRooAbsPdf-members.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf-members.html,1,['clear'],['clearEvalErrorLog']
Usability,"ePtr;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CBalancerInfo;  Cbasic_string_view;  CBasicRNNLayerGeneric implementation ;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  Cfuncptr_and_voidptr_t;  CGcCache_t;  CGCValues_t;  CGraphCreatorHelperHelper class that provides the operation graph nodes ;  CGraphNodeClass used to create the operation graph to be printed in the dot representation ;  Cgroup;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CMemInfo_t;  ►CMemPoolForRooSetsMemory pool for RooArgSet an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:95241,simpl,simple,95241,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['simpl'],['simple']
Usability,"eQuantile. ROOT::Math::VavilovFast. ROOT::Math::VirtualIntegratorMultiDim←. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::GSLMCIntegrator. ROOT::Math::VirtualIntegratorOneDim←. ROOT::Math::GSLIntegrator. ROOT::Math::GaussIntegrator; ←. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::WrappedMultiTF1. ROOT::Math::WrappedTF1. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FCNBase←. ROOT::Minuit2::FCNGradientBase; ←. TFcnAdapter. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FCNGradientBase←. TFcnAdapter. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::Minuit2Minimizer. ROOT::Minuit2::MnFumiliMinimize. ROOT::Minuit2::MnMigrad. ROOT::Minuit2::MnMinimize. ROOT::Minuit2::MnScan. ROOT::Minuit2::MnSimplex. ROOT::Minuit2::ModularFunctionMinimizer←. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> >. ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> >. ROOT::TArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<double,0> >. ROOT::TArrayProxy<ROOT::TArrayType<float,0> >. ROOT::TArrayProxy<ROOT::TArrayType<int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<short,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> >. ROOT::TBranchProxyClassDescriptor. ROOT::TBranchProxyDescriptor. ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<ULong64_t,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TClaArrayProxy<ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassHierarchy.html:4750,Simpl,SimplexMinimizer,4750,root/html528/ClassHierarchy.html,https://root.cern,https://root.cern/root/html528/ClassHierarchy.html,4,['Simpl'],['SimplexMinimizer']
Usability,"eQuantile::DoEvalPar ; (; double ; x, . const double * ; p . ); const. overridevirtual . Evaluate the function, using parameters p. ; Parameters. xThe Quantile \(z\), \(0 \le z \le 1\) ; pvector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). . Implements ROOT::Math::IParametricFunctionOneDim.; Definition at line 94 of file VavilovAccurateQuantile.cxx. ◆ NPar(). unsigned int ROOT::Math::VavilovAccurateQuantile::NPar ; (; ); const. overridevirtual . Return the number of Parameters. ; Implements ROOT::Math::IBaseParam.; Definition at line 74 of file VavilovAccurateQuantile.cxx. ◆ ParameterName(). std::string ROOT::Math::VavilovAccurateQuantile::ParameterName ; (; unsigned int ; i); const. overridevirtual . Return the name of the i-th parameter (starting from zero) ; Reimplemented from ROOT::Math::IBaseParam.; Definition at line 78 of file VavilovAccurateQuantile.cxx. ◆ Parameters(). const double * ROOT::Math::VavilovAccurateQuantile::Parameters ; (; ); const. overridevirtual . Access the parameter values. ; Implements ROOT::Math::IBaseParam.; Definition at line 64 of file VavilovAccurateQuantile.cxx. ◆ SetParameters(). void ROOT::Math::VavilovAccurateQuantile::SetParameters ; (; const double * ; p). overridevirtual . Set the parameter values. ; Parameters. pvector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). . Implements ROOT::Math::IBaseParam.; Definition at line 68 of file VavilovAccurateQuantile.cxx. Member Data Documentation. ◆ fP. double ROOT::Math::VavilovAccurateQuantile::fP[5]. private . Definition at line 134 of file VavilovAccurateQuantile.h. Libraries for ROOT::Math::VavilovAccurateQuantile:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/VavilovAccurateQuantile.h; math/mathmore/src/VavilovAccurateQuantile.cxx. ROOTMathVavilovAccurateQuantile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateQuantile.html:6544,Guid,Guide,6544,doc/master/classROOT_1_1Math_1_1VavilovAccurateQuantile.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateQuantile.html,1,['Guid'],['Guide']
Usability,"eRead.h. ◆ GetUnzipBuffer(). virtual Int_t TFileCacheRead::GetUnzipBuffer ; (; char ** ; , . Long64_t ; , . Int_t ; , . Bool_t * ;  . ). inlinevirtual . Reimplemented in TTreeCacheUnzip.; Definition at line 97 of file TFileCacheRead.h. ◆ IsA(). TClass * TFileCacheRead::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TTreeCache, and TTreeCacheUnzip.; Definition at line 119 of file TFileCacheRead.h. ◆ IsAsyncReading(). virtual Bool_t TFileCacheRead::IsAsyncReading ; (; ); const. inlinevirtual . Definition at line 99 of file TFileCacheRead.h. ◆ IsEnablePrefetching(). virtual Bool_t TFileCacheRead::IsEnablePrefetching ; (; ); const. inlinevirtual . Definition at line 101 of file TFileCacheRead.h. ◆ IsLearning(). virtual Bool_t TFileCacheRead::IsLearning ; (; ); const. inlinevirtual . Reimplemented in TTreeCache.; Definition at line 102 of file TFileCacheRead.h. ◆ LearnBranch(). virtual Int_t TFileCacheRead::LearnBranch ; (; TBranch * ; , . Bool_t ; = kFALSE . ). inlinevirtual . Reimplemented in TTreeCache.; Definition at line 103 of file TFileCacheRead.h. ◆ operator=(). TFileCacheRead & TFileCacheRead::operator= ; (; const TFileCacheRead & ; ). privatedelete . ◆ Prefetch(). void TFileCacheRead::Prefetch ; (; Long64_t ; pos, . Int_t ; len . ). virtual . Add block of length len at position pos in the list of blocks to be prefetched. ; If pos <= 0 the current blocks (if any) are reset. ; Definition at line 202 of file TFileCacheRead.cxx. ◆ Print(). void TFileCacheRead::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; The format is: ******TreeCache statistics for file: cms2.root ****** Reading............................: 72761843 bytes in 7 transactions Readahead..........................: 256000 bytes with overhead = 0 bytes Average transaction................: 10394.549000 Kbytes Number of blocks in current cache..: 210, total size: 6280352; If option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheRead.html:20377,Learn,LearnBranch,20377,doc/master/classTFileCacheRead.html,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html,1,['Learn'],['LearnBranch']
Usability,eRead.h. ◆ fPos. Long64_t* TFileCacheRead::fPos. protected . [fNb] start of long buffers ; Definition at line 46 of file TFileCacheRead.h. ◆ fPrefetch. TFilePrefetch* TFileCacheRead::fPrefetch. protected . ! Object that does the asynchronous reading in another thread ; Definition at line 25 of file TFileCacheRead.h. ◆ fPrefetchedBlocks. Long64_t TFileCacheRead::fPrefetchedBlocks. protected . Number of blocks prefetched. ; Definition at line 55 of file TFileCacheRead.h. ◆ fReadCalls. Int_t TFileCacheRead::fReadCalls. protected . Number of read calls for this cache. ; Definition at line 32 of file TFileCacheRead.h. ◆ fSeek. Long64_t* TFileCacheRead::fSeek. protected . [fNseek] Position on file of buffers to be prefetched ; Definition at line 43 of file TFileCacheRead.h. ◆ fSeekIndex. Int_t* TFileCacheRead::fSeekIndex. protected . [fNseek] sorted index table of fSeek ; Definition at line 45 of file TFileCacheRead.h. ◆ fSeekLen. Int_t* TFileCacheRead::fSeekLen. protected . [fNseek] Length of buffers to be prefetched ; Definition at line 47 of file TFileCacheRead.h. ◆ fSeekPos. Int_t* TFileCacheRead::fSeekPos. protected . [fNseek] Position of sorted blocks in fBuffer ; Definition at line 49 of file TFileCacheRead.h. ◆ fSeekSize. Int_t TFileCacheRead::fSeekSize. protected . Allocated size of fSeek. ; Definition at line 42 of file TFileCacheRead.h. ◆ fSeekSort. Long64_t* TFileCacheRead::fSeekSort. protected . [fNseek] Position on file of buffers to be prefetched (sorted) ; Definition at line 44 of file TFileCacheRead.h. ◆ fSeekSortLen. Int_t* TFileCacheRead::fSeekSortLen. protected . [fNseek] Length of buffers to be prefetched (sorted) ; Definition at line 48 of file TFileCacheRead.h. Libraries for TFileCacheRead:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TFileCacheRead.h; io/io/src/TFileCacheRead.cxx. TFileCacheRead. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheRead.html:31864,Guid,Guide,31864,doc/master/classTFileCacheRead.html,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html,1,['Guid'],['Guide']
Usability,"eReadCalls;  Number of read calls by basket to fill cached tree. ;  ; Int_t fNseek;  Number of blocks to be prefetched. ;  ; Int_t fNtot;  Total size of prefetched blocks. ;  ; Long64_t * fPos;  [fNb] start of long buffers ;  ; TFilePrefetch * fPrefetch;  ! Object that does the asynchronous reading in another thread ;  ; Long64_t fPrefetchedBlocks;  Number of blocks prefetched. ;  ; Int_t fReadCalls;  Number of read calls for this cache. ;  ; Long64_t * fSeek;  [fNseek] Position on file of buffers to be prefetched ;  ; Int_t * fSeekIndex;  [fNseek] sorted index table of fSeek ;  ; Int_t * fSeekLen;  [fNseek] Length of buffers to be prefetched ;  ; Int_t * fSeekPos;  [fNseek] Position of sorted blocks in fBuffer ;  ; Int_t fSeekSize;  Allocated size of fSeek. ;  ; Long64_t * fSeekSort;  [fNseek] Position on file of buffers to be prefetched (sorted) ;  ; Int_t * fSeekSortLen;  [fNseek] Length of buffers to be prefetched (sorted) ;  . Static Protected Attributes; static Int_t fgLearnEntries = 100;  number of entries used for learning mode ;  . Private Member Functions;  TTreeCache (const TTreeCache &)=delete;  this class cannot be copied ;  ; bool CalculateMissCache ();  Calculate the appropriate miss cache to fetch; helper function for FillMissCache. ;  ; TBranch * CalculateMissEntries (Long64_t, int, bool);  Given an file read, try to determine the corresponding branch. ;  ; bool CheckMissCache (char *buf, Long64_t pos, int len);  Check the miss cache for a particular buffer, fetching if deemed necessary. ;  ; bool FillMissCache ();  Fill the miss cache from the current set of active branches. ;  ; IOPos FindBranchBasketPos (TBranch &, Long64_t entry);  Given a branch and an entry, determine the file location (offset / size) of the corresponding basket. ;  ; TTreeCache & operator= (const TTreeCache &)=delete;  ; bool ProcessMiss (Long64_t pos, int len);  ! Given a file read not in the miss cache, handle (possibly) loading the data. ;  . Additional Inherited Members;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:32169,learn,learning,32169,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"eReturns name of object.Definition TNamed.h:47; TNamed::Streamervoid Streamer(TBuffer &) overrideStream an object of class TObject.; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::fTitleTString fTitleDefinition TNamed.h:33; TNamed::TNamedTNamed()Definition TNamed.h:36; TNamed::fNameTString fNameDefinition TNamed.h:32; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TNotifyLinkBaseSee TNotifyLink.Definition TNotifyLink.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::GetEntriesUnsafeInt_t GetEntriesUnsafe() constReturn the number of objects in array (i.e.Definition TObjArray.cxx:565; TObjArray::LastTObject * Last() const overrideReturn the object in the last filled slot. Returns 0 if no entries.Definition TObjArray.cxx:506; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::Streamervoid Streamer(TBuffer &) overrideStream all objects in the array to or from the I/O buffer.Definition TObjArray.cxx:449; TObjArray::MakeIteratorTIterator * MakeIterator(Bool_t dir=kIterForward) const overrideReturns an array iterator.Definition TObjArray.cxx:649; TObjArray::Compressvirtual void Compress()Remove empty slots from array.Definition TObjArray.cxx:334; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::RemoveAtTObject * RemoveAt(Int_t idx) overrideRemove object at index idx.Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:419999,Clear,Clearvoid,419999,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"eSpace.cxx. ◆ PDK(). Double_t TGenPhaseSpace::PDK ; (; Double_t ; a, . Double_t ; b, . Double_t ; c . ). private . The PDK function. ; Definition at line 35 of file TGenPhaseSpace.cxx. ◆ SetDecay(). Bool_t TGenPhaseSpace::SetDecay ; (; TLorentzVector & ; P, . Int_t ; nt, . const Double_t * ; mass, . Option_t * ; opt = """" . ). Input: . TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section ""Fermi"" -> Fermi energy dependence Return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics . Definition at line 193 of file TGenPhaseSpace.cxx. ◆ Streamer(). void TGenPhaseSpace::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGenPhaseSpace::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file TGenPhaseSpace.h. Member Data Documentation. ◆ fBeta. Double_t TGenPhaseSpace::fBeta[3]. private . Definition at line 19 of file TGenPhaseSpace.h. ◆ fDecPro. TLorentzVector TGenPhaseSpace::fDecPro[18]. private . Definition at line 22 of file TGenPhaseSpace.h. ◆ fMass. Double_t TGenPhaseSpace::fMass[18]. private . Definition at line 18 of file TGenPhaseSpace.h. ◆ fNt. Int_t TGenPhaseSpace::fNt. private . Definition at line 17 of file TGenPhaseSpace.h. ◆ fTeCmTm. Double_t TGenPhaseSpace::fTeCmTm. private . Definition at line 20 of file TGenPhaseSpace.h. ◆ fWtMax. Double_t TGenPhaseSpace::fWtMax. private . Definition at line 21 of file TGenPhaseSpace.h. Libraries for TGenPhaseSpace:. [legend]; The documentation for this class was generated from the following files:; math/physics/inc/TGenPhaseSpace.h; math/physics/src/TGenPhaseSpace.cxx. TGenPhaseSpace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenPhaseSpace.html:15646,Guid,Guide,15646,doc/master/classTGenPhaseSpace.html,https://root.cern,https://root.cern/doc/master/classTGenPhaseSpace.html,1,['Guid'],['Guide']
Usability,eStdString() [3/3]. virtual void TBuffer::WriteStdString ; (; std::string & ; s). inlinevirtual . Reimplemented from TBufferFile.; Definition at line 312 of file TBuffer.h. ◆ WriteTString(). void TBufferSQL::WriteTString ; (; const TString & ; s). finalvirtual . Write a TString. ; Reimplemented from TBufferFile.; Definition at line 308 of file TBufferSQL.cxx. ◆ WriteUChar(). void TBufferSQL::WriteUChar ; (; UChar_t ; c). finalvirtual . Operator<<. ; Reimplemented from TBufferFile.; Definition at line 355 of file TBufferSQL.cxx. ◆ WriteUInt(). void TBufferSQL::WriteUInt ; (; UInt_t ; i). finalvirtual . Operator<<. ; Reimplemented from TBufferFile.; Definition at line 375 of file TBufferSQL.cxx. ◆ WriteULong(). void TBufferSQL::WriteULong ; (; ULong_t ; l). finalvirtual . Operator<<. ; Reimplemented from TBufferFile.; Definition at line 385 of file TBufferSQL.cxx. ◆ WriteULong64(). void TBufferSQL::WriteULong64 ; (; ULong64_t ; l). finalvirtual . Operator<<. ; Reimplemented from TBufferFile.; Definition at line 405 of file TBufferSQL.cxx. ◆ WriteUShort(). void TBufferSQL::WriteUShort ; (; UShort_t ; s). finalvirtual . Operator<<. ; Reimplemented from TBufferFile.; Definition at line 365 of file TBufferSQL.cxx. Member Data Documentation. ◆ fColumnVec. std::vector<Int_t>* TBufferSQL::fColumnVec {nullptr}. private . Definition at line 35 of file TBufferSQL.h. ◆ fInsertQuery. TString* TBufferSQL::fInsertQuery {nullptr}. private . Definition at line 36 of file TBufferSQL.h. ◆ fIter. std::vector<Int_t>::const_iterator TBufferSQL::fIter. private . Definition at line 33 of file TBufferSQL.h. ◆ fRowPtr. TSQLRow** TBufferSQL::fRowPtr {nullptr}. private . Definition at line 37 of file TBufferSQL.h. Libraries for TBufferSQL:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBufferSQL.h; tree/tree/src/TBufferSQL.cxx. TBufferSQL. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:60448,Guid,Guide,60448,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,1,['Guid'],['Guide']
Usability,"eSystemTag > Polar3DPointF3D Point based on the polar coordinates rho, theta, phi in single precision.Definition Point3Dfwd.h:63; ROOT::Math::RhoZPhiPointFPositionVector3D< Cylindrical3D< float >, DefaultCoordinateSystemTag > RhoZPhiPointF3D Point based on the cylindrical coordinates rho, z, phi in single precision.Definition Point3Dfwd.h:73; ROOT::Math::RhoEtaPhiPointDRhoEtaPhiPoint RhoEtaPhiPointDDefinition Point3Dfwd.h:54; ROOT::Math::XYZPointFPositionVector3D< Cartesian3D< float >, DefaultCoordinateSystemTag > XYZPointF3D Point based on the cartesian coordinates x,y,z in single precisionDefinition Point3Dfwd.h:43; ROOT::Math::Polar3DPointDPolar3DPoint Polar3DPointDDefinition Point3Dfwd.h:64; ROOT::Math::RhoEtaPhiPointFPositionVector3D< CylindricalEta3D< float >, DefaultCoordinateSystemTag > RhoEtaPhiPointF3D Point based on the eta based cylindrical coordinates rho, eta, phi in single precision.Definition Point3Dfwd.h:53; ROOT::Math::RhoZPhiPointDRhoZPhiPoint RhoZPhiPointDDefinition Point3Dfwd.h:74; ROOT::Math::XYZPointDXYZPoint XYZPointDDefinition Point3Dfwd.h:44; ROOT::Math::RhoEtaPhiPointPositionVector3D< CylindricalEta3D< double >, DefaultCoordinateSystemTag > RhoEtaPhiPoint3D Point based on the eta based cylindrical coordinates rho, eta, phi in double precision.Definition Point3Dfwd.h:49; ROOT::Math::XYZPointPositionVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZPoint3D Point based on the cartesian coordinates x,y,z in double precisionDefinition Point3Dfwd.h:38; ROOT::Math::Polar3DPointPositionVector3D< Polar3D< double >, DefaultCoordinateSystemTag > Polar3DPoint3D Point based on the polar coordinates rho, theta, phi in double precision.Definition Point3Dfwd.h:59; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathgenvectorincMathPoint3Dfwd.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Point3Dfwd_8h_source.html:5539,Guid,Guide,5539,doc/master/Point3Dfwd_8h_source.html,https://root.cern,https://root.cern/doc/master/Point3Dfwd_8h_source.html,1,['Guid'],['Guide']
Usability,"eTFree()Default constructor.Definition TFree.cxx:40; TFree::SizeofInt_t Sizeof() constreturn number of bytes occupied by this TFree on permanent storageDefinition TFree.cxx:184; TFree::ReadBuffervirtual void ReadBuffer(char *&buffer)Decode one free structure from input buffer.Definition TFree.cxx:167; TFree::SetLastvoid SetLast(Long64_t last)Definition TFree.h:45; TFree::lsvoid ls(Option_t *="""") const overrideList free segment contents.Definition TFree.cxx:159; TFree::GetFirstLong64_t GetFirst() constDefinition TFree.h:40; TFree::~TFree~TFree() overrideDestructor.Definition TFree.cxx:102; TFree::fLastLong64_t fLastLast free word of segment.Definition TFree.h:31; TFree::Class_Versionstatic constexpr Version_t Class_Version()Definition TFree.h:48; TFree::FillBuffervirtual void FillBuffer(char *&buffer)Encode fre structure into output buffer.Definition TFree.cxx:109; TFree::fFirstLong64_t fFirstFirst free word of segment.Definition TFree.h:30; TFree::AddFreeTFree * AddFree(TList *lfree, Long64_t first, Long64_t last)Add a new free segment to the list of free segments.Definition TFree.cxx:67; TFree::GetBestFreeTFree * GetBestFree(TList *lfree, Int_t nbytes)Return the best free segment where to store nbytes.Definition TFree.cxx:127; TListA doubly linked list.Definition TList.h:38; TList::AfterTObject * After(const TObject *obj) const overrideReturns the object after object obj.Definition TList.cxx:328; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::LastTObject * Last() const overrideReturn the last object in the list. Returns 0 when list is empty.Definition TList.cxx:691; TList::AddBeforevoid AddBefore(const TObject *before, TObject *obj) overrideInsert object before object before in the list.Definition TList.cxx:194; int. ioiosrcTFree.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFree_8cxx_source.html:8625,Guid,Guide,8625,doc/master/TFree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFree_8cxx_source.html,1,['Guid'],['Guide']
Usability,"eText, TEveTrack, TEveTrackProjected, TEveTriangleSet, TEveMCTrack, TBRIK, TCONE, TCONS, TCTUB, TELTU, TGTRA, THelix, THYPE, TMarker3DBox, TNode, TNodeDiv, TPARA, TPCON, TPGON, TPointSet3D, TPolyLine3D, TPolyMarker3D, TShape, TSPHE, TTRAP, TTRD1, TTRD2, TTUBE, TTUBS, TXTRU, TGLTH3Composition, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile3D, TParticle, and TPrimary.; Definition at line 27 of file TAtt3D.h. ◆ Sizeof3D(). void TAtt3D::Sizeof3D ; (; ); const. virtual . Set total size of this 3D object (used by X3D interface). ; Reimplemented in TGeoOverlap, TBRIK, TNode, TPCON, TSPHE, TTUBE, TTUBS, TXTRU, TParticle, and TPrimary.; Definition at line 27 of file TAtt3D.cxx. ◆ Streamer(). virtual void TAtt3D::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in Jet, TGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly, TGeoOverlap, TEveArrow, TEveBox, TEveBoxProjected, TEveBoxSet, TEveCaloViz, TEveCalo3D, TEveCalo2D, TEveCaloLego, TEveDigitSet, TEveGeoShape, TEveGeoShapeProjected, TEveJetCone, TEveJetConeProjected, TEveLine, TEveLineProjected, TEvePointSet, TEvePointSetProjected, TEvePolygonSetProjected, TEveProjectionAxes, TEveQuadSet, TEveScalableStraightLineSet, TEveShape, TEveStraightLineSet, TEveStraightLineSetProjected, TEveText, TEveTrack, TEveTrackProjected, TEveTriangleSet, TEveMCTrack, TBRIK, TCONE, TCONS, TCTUB, TELTU, TGTRA, THelix, THYPE, TMarker3DBox, TNode, TNodeDiv, TPARA, TPCON, TPGON, TPointSet3D, TPolyLine3D, TPolyMarker3D, TShape, TSPHE, TTRAP, TTRD1, TTRD2, TTUBE, TTUBS, TXTRU, TGLTH3Composition, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile3D, TParticle, and TPrimary. ◆ StreamerNVirtual(). void TAtt3D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 27 of file TAtt3D.h. The documentation for this class was generated from the following files:; core/base/inc/TAtt3D.h; core/base/src/TAtt3D.cxx. TAtt3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAtt3D.html:4383,Guid,Guide,4383,doc/master/classTAtt3D.html,https://root.cern,https://root.cern/doc/master/classTAtt3D.html,1,['Guid'],['Guide']
Usability,"eText, including all inherited members. AbstractMethod(const char *method) constTObject; AddBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TPaveTextvirtual; AddLine(Double_t x1=0, Double_t y1=0, Double_t x2=0, Double_t y2=0)TPaveTextvirtual; AddText(Double_t x1, Double_t y1, const char *label)TPaveTextvirtual; AddText(const char *label)TPaveTextvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TPaveTextstatic; Class_Name()TPaveTextstatic; Class_Version()TPaveTextinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTPaveTextvirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; ConvertNDCtoPad()TPavevirtual; TPave::Copy(TObject &pave) const overrideTPavevirtual; TPave::TBox::TAttLine::Copy(TAttLine &attline) constTAttLine; TPave::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TPaveTextinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeleteText()TPaveTextvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTPavevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTPaveTextvirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawFile(const char *filename, Option_t *option="""")TPaveTextvirtual; DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPavevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditText()TPaveTextvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveText-members.html:817,Clear,Clear,817,doc/master/classTPaveText-members.html,https://root.cern,https://root.cern/doc/master/classTPaveText-members.html,1,['Clear'],['Clear']
Usability,"eTracker Class ReferenceRooFit » RooFit Core. ; Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. ; The change tracker can perform an additional validation step where it also compares the numeric values of the tracked arguments with reference values to ensure that values have actually changed. This may be useful in case some of the tracked observables are in binned datasets where each observable propagates a valueDirty flag when an event is loaded even though usually only one observable actually changes. ; Definition at line 23 of file RooChangeTracker.h. Public Member Functions;  RooChangeTracker ()=default;  ;  RooChangeTracker (const char *name, const char *title, const RooArgSet &trackSet, bool checkValues=false);  Constructor. ;  ;  RooChangeTracker (const RooChangeTracker &other, const char *name=nullptr);  Copy constructor. ;  ; TObject * clone (const char *newname) const override;  ; bool hasChanged (bool clearState);  Returns true if state has changed since last call with clearState=true. ;  ; TClass * IsA () const override;  ; RooArgSet parameters () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChangeTracker.html:1291,clear,clearState,1291,doc/master/classRooChangeTracker.html,https://root.cern,https://root.cern/doc/master/classRooChangeTracker.html,2,['clear'],['clearState']
Usability,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and value's TClass. ;  ; virtual void Resize (UInt_t n, Bool_t force_delete);  Resize the container. ;  ; virtual void SetOnFileClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionStreamer.html:4202,simpl,simple,4202,doc/master/classTGenCollectionStreamer.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html,1,['simpl'],['simple']
Usability,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and value's TClass. ;  ; virtual void SetOnFileClass (TClass *cl);  ; UInt_t Size () const override;  Return the current size of the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:7984,simpl,simple,7984,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,2,['simpl'],['simple']
Usability,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; virtual void ReadBuffer (TBuffer &b, void *obj);  ; virtual void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass);  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenBitsetProxy.html:3771,simpl,simple,3771,doc/master/classTGenBitsetProxy.html,https://root.cern,https://root.cern/doc/master/classTGenBitsetProxy.html,7,['simpl'],['simple']
Usability,"eUser(0, 1); g.GetXaxis().SetTitle(""False-positive rate""); g.GetYaxis().SetTitle(""True-positive rate""); c.Draw(); lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; DateAugust 2019 ; AuthorStefan Wunsch ; Definition in file tmva102_Testing.py. tutorialstmvatmva102_Testing.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva102__Testing_8py.html:3281,Guid,Guide,3281,doc/master/tmva102__Testing_8py.html,https://root.cern,https://root.cern/doc/master/tmva102__Testing_8py.html,1,['Guid'],['Guide']
Usability,"eWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialisation. void DeclareOptions(); define the options (their key words) that can be set in the option string. format of function string:; ""x0*(0)+((1)/x1)**(2)...""; where ""[i]"" are the parameters, and ""xi"" the input variables. format of parameter string:; ""(-1.2,3.4);(-2.3,4.55);...""; where the numbers in ""(a,b)"" correspond to the a=min, b=max parameter ranges;; each parameter defined in the function string must have a corresponding range. void CreateFormula(); translate formula string into TFormula, and parameter string into par ranges. void ProcessOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". ~MethodFDA( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void ClearAll( void ); delete and clear all class members. void Train( void ); FDA training. void PrintResults(const TString& , vector<Double_t>& , const Double_t ) const; display fit parameters; check maximum length of variable name. Double_t EstimatorFunction(vector<Double_t>& ); compute estimator for given parameter set (to be minimised); const Double_t sumOfWeights[] = { fSumOfWeightsSig, fSumOfWeightsBkg, fSumOfWeights };. Double_t InterpretFormula(const TMVA::Event* , vector<double>::iterator begin, vector<double>::iterator end); formula interpretation. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). const std::vector<Float_t>& GetMulticlassValues(). void CalculateMulticlassValues(const TMVA::Event*& evt, vector<Double_t>& parameters, vector<Float_t>& values); calculate the values for multiclass. void ReadWeightsFromStream(istream& i); read back the training results from a file (stream). void AddWeightsXMLT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodFDA.html:20211,Clear,ClearAll,20211,root/html602/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodFDA.html,4,"['Clear', 'clear']","['ClearAll', 'clear']"
Usability,"eWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TGraph2D.h; TH1.h; TMath.h; TRandom.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TF2A 2-Dim function with parameters.Definition TF2.h:29; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetHistTopMarginvoid SetHistTopMargin(Double_t hmax=0.05)Definition TStyle.h:385; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMVA_SOFIE_GNN_Parser.h3h3Definition TMVA_SOFIE_GNN_Parser.py:189. tutorialsfitgraph2dfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph2dfit_8C_source.html:5508,Guid,Guide,5508,doc/master/graph2dfit_8C_source.html,https://root.cern,https://root.cern/doc/master/graph2dfit_8C_source.html,1,['Guid'],['Guide']
Usability,"eWrapper::CheckEvent ; (; const TMVA::Event & ; e, . Bool_t ; useYesNoLeaf = false . ). return the decision tree output for an event ; Definition at line 226 of file CCTreeWrapper.cxx. ◆ GetRoot(). CCTreeNode * TMVA::CCTreeWrapper::GetRoot ; (; ). inline . Definition at line 148 of file CCTreeWrapper.h. ◆ InitTree(). void TMVA::CCTreeWrapper::InitTree ; (; CCTreeNode * ; t). initialize the node t and all its descendants ; Definition at line 123 of file CCTreeWrapper.cxx. ◆ PruneNode(). void TMVA::CCTreeWrapper::PruneNode ; (; CCTreeNode * ; t). remove the branch rooted at node t ; Definition at line 160 of file CCTreeWrapper.cxx. ◆ TestTreeQuality() [1/2]. Double_t TMVA::CCTreeWrapper::TestTreeQuality ; (; const DataSet * ; validationSample). return the misclassification rate of a pruned tree for a validation event sample using the DataSet ; Definition at line 203 of file CCTreeWrapper.cxx. ◆ TestTreeQuality() [2/2]. Double_t TMVA::CCTreeWrapper::TestTreeQuality ; (; const EventList * ; validationSample). return the misclassification rate of a pruned tree for a validation event sample using an EventList ; Definition at line 183 of file CCTreeWrapper.cxx. Member Data Documentation. ◆ fDTParent. DecisionTree* TMVA::CCTreeWrapper::fDTParent. private . ! pointer to underlying DecisionTree ; Definition at line 151 of file CCTreeWrapper.h. ◆ fQualityIndex. SeparationBase* TMVA::CCTreeWrapper::fQualityIndex. private . ! pointer to the used quality index calculator ; Definition at line 150 of file CCTreeWrapper.h. ◆ fRoot. CCTreeNode* TMVA::CCTreeWrapper::fRoot. private . ! the root node of the (wrapped) decision Tree ; Definition at line 152 of file CCTreeWrapper.h. Libraries for TMVA::CCTreeWrapper:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CCTreeWrapper.h; tmva/tmva/src/CCTreeWrapper.cxx. TMVACCTreeWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html:3976,Guid,Guide,3976,doc/master/classTMVA_1_1CCTreeWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html,1,['Guid'],['Guide']
Usability,"eWrite memory objects to this file.Definition TFile.cxx:2436; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::FillInt_t Fill(const Double_t *v)Definition TProfile.h:55; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStringBasic string class.Definition TString.h:139; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; c1return c1Definition legend1.C:41; hsimpleDefinition hsimple.py:1; AuthorRene Brun ; Definition in file hsimple.C. tutorialshsimple.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimple_8C.html:7561,Guid,Guide,7561,doc/master/hsimple_8C.html,https://root.cern,https://root.cern/doc/master/hsimple_8C.html,1,['Guid'],['Guide']
Usability,"e_shared<std::function<double(double)>> ([](double value){ const double margin = 0.0; return value > margin ? value-margin : 0; }). Definition at line 25 of file NeuralNet.cxx. ◆ Sigmoid. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Sigmoid = std::make_shared<std::function<double(double)>> ([](double value){ value = std::max (-100.0, std::min (100.0,value)); return 1.0/(1.0 + std::exp (-value)); }). Definition at line 26 of file NeuralNet.cxx. ◆ SoftPlus. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftPlus = std::make_shared<std::function<double(double)>> ([](double value){ return std::log (1.0+ std::exp (value)); }). Definition at line 27 of file NeuralNet.cxx. ◆ SoftSign. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SoftSign = std::make_shared<std::function<double(double)>> ([](double value){ return value / (1.0 + fabs (value)); }). Definition at line 32 of file NeuralNet.cxx. ◆ SymmReLU. std::shared_ptr< std::function< double(double)> > TMVA::DNN::SymmReLU = std::make_shared<std::function<double(double)>> ([](double value){ const double margin = 0.3; return value > margin ? value-margin : value < -margin ? value+margin : 0; }). Definition at line 30 of file NeuralNet.cxx. ◆ Tanh. std::shared_ptr< std::function< double(double)> > TMVA::DNN::Tanh = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value); }). Definition at line 29 of file NeuralNet.cxx. ◆ TanhShift. std::shared_ptr< std::function< double(double)> > TMVA::DNN::TanhShift = std::make_shared<std::function<double(double)>> ([](double value){ return tanh (value-0.3); }). Definition at line 31 of file NeuralNet.cxx. ◆ ZeroFnc. std::shared_ptr< std::function< double(double)> > TMVA::DNN::ZeroFnc = std::make_shared<std::function<double(double)>> ([](double ){ return 0; }). Definition at line 28 of file NeuralNet.cxx. TMVADNN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:41188,Guid,Guide,41188,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,1,['Guid'],['Guide']
Usability,"e_t &xmax, Double_t &ymin, Double_t &ymax, Double_t &zmin, Double_t &zmax)=0;  ; virtual void UpdateProgressInfo ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualProofPlayer.html:6043,Clear,Clear,6043,doc/master/classTVirtualProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html,1,['Clear'],['Clear']
Usability,"e_t etheta[8];; Double_t eradius[8];; ; for (int i=0; i<8; i++) {; theta[i] = (i+1)*(TMath::Pi()/4.);; radius[i] = (i+1)*0.05;; etheta[i] = TMath::Pi()/8.;; eradius[i] = 0.05;; }; ; TGraphPolar * grP1 = new TGraphPolar(8, theta, radius, etheta, eradius);; grP1->SetTitle("""");; ; grP1->SetMarkerStyle(20);; grP1->SetMarkerSize(2.);; grP1->SetMarkerColor(4);; grP1->SetLineColor(2);; grP1->SetLineWidth(3);; grP1->Draw(""PE"");; ; CPol->Update();; ; if (grP1->GetPolargram()); grP1->GetPolargram()->SetToRadian();; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TGraphPolar::GetPolargramTGraphPolargram * GetPolargram()Definition TGraphPolar.h:39; TGraphPolar::Drawvoid Draw(Option_t *options="""") overrideDraw TGraphPolar.Definition TGraphPolar.cxx:100; TGraphPolargram::SetToRadianvoid SetToRadian()The Polar circle is labelled using radian.Definition TGraphPolargram.cxx:936; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; AuthorOlivier Couet ; Definition in file graphpolar2.C. tutorialsgraphsgraphpolar2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphpolar2_8C.html:2323,Guid,Guide,2323,doc/master/graphpolar2_8C.html,https://root.cern,https://root.cern/doc/master/graphpolar2_8C.html,1,['Guid'],['Guide']
Usability,"e_t fstyle)TAttFillinlinevirtual; SetHorizontal(Bool_t set=kTRUE)TLine; SetLineAttributes()TAttLinevirtual; SetLineColor(Color_t lcolor)TAttLineinlinevirtual; SetLineColorAlpha(Color_t lcolor, Float_t lalpha)TAttLinevirtual; SetLineStyle(Style_t lstyle)TAttLineinlinevirtual; SetLineWidth(Width_t lwidth)TAttLineinlinevirtual; SetNDC(Bool_t isNDC=kTRUE)TLinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetOption(Option_t *option="">"")TArrowinlinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVertical(Bool_t set=kTRUE)TLine; SetX1(Double_t x1)TLineinlinevirtual; SetX2(Double_t x2)TLineinlinevirtual; SetY1(Double_t y1)TLineinlinevirtual; SetY2(Double_t y2)TLineinlinevirtual; Streamer(TBuffer &) overrideTArrowvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TArrowinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TArrow()TArrow; TArrow(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Float_t arrowsize=0.05, Option_t *option="">"")TArrow; TArrow(const TArrow &arrow)TArrow; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TLine()TLineinline; TLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TLine; TLine(const TLine &line)TLine; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TArrow() overrideTArrow; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TLine() override=defaultTLine; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow-members.html:9567,Guid,Guide,9567,doc/master/classTArrow-members.html,https://root.cern,https://root.cern/doc/master/classTArrow-members.html,1,['Guid'],['Guide']
Usability,"e_t value); Set an input list parameter. TObject * GetParameter(const char* par) const; Get specified parameter. A parameter set via SetParameter() is either; a TParameter or a TNamed or 0 in case par is not defined. void DeleteParameters(const char* wildcard); Delete the input list parameters specified by a wildcard (e.g. PROOF_*); or exact name (e.g. PROOF_MaxSlavesPerNode). void ShowParameters(const char* wildcard = ""PROOF_*"") const; Show the input list parameters specified by the wildcard.; Default is the special PROOF control parameters (PROOF_*). void AddFeedback(const char* name); Add object to feedback list. void RemoveFeedback(const char* name); Remove object from feedback list. void ClearFeedback(); Clear feedback list. void ShowFeedback() const; Show items in feedback list. TList * GetFeedbackList() const; Return feedback list. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. TDrawFeedback * CreateDrawFeedback(); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. TList * GetOutputNames(); FIXME: to be written. void Browse(TBrowser* b); Build the PROOF's structure in the browser. void SetPlayer(TVirtualProofPlayer* player); Set a new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent bac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:74972,feedback,feedback,74972,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['feedback'],['feedback']
Usability,"e_t* working_space, Int_t num, Int_t hartley, Int_t direction, Int_t zt_clear). AUXILIARY FUNCION. This function calculates Fourier based transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -hartley-1 if it is Hartley transform, 0 othewise; -direction-forward or inverse transform. void BitReverseHaar(Double_t* working_space, Int_t shift, Int_t num, Int_t start). AUXILIARY FUNCION. This function carries out bir-reverse reordering for Haar transform; Function parameters:; -working_space-pointer to vector of processed data; -shift-shift of position of processing; -start-initial position of processed data; -num-length of processed data. int GeneralExe(Double_t* working_space, Int_t zt_clear, Int_t num, Int_t degree, Int_t type). AUXILIARY FUNCION. This function calculates generalized (mixed) transforms of different degrees; Function parameters:; -working_space-pointer to vector of transformed data; -zt_clear-flag to clear imaginary data before staring; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). int GeneralInv(Double_t* working_space, Int_t num, Int_t degree, Int_t type). AUXILIARY FUNCION. This function calculates inverse generalized (mixed) transforms; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). void Transform(const Double_t* source, Double_t* destVector). ONE-DIMENSIONAL TRANSFORM FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters.; Transformed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; des",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumTransform.html:11664,clear,clear,11664,root/html602/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html602/TSpectrumTransform.html,2,['clear'],['clear']
Usability,"e_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegralMorph.html:6615,clear,clearEvalErrorLog,6615,root/html534/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html534/RooIntegralMorph.html,3,['clear'],['clearEvalErrorLog']
Usability,"e_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:6613,clear,clearValueDirty,6613,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['clear'],['clearValueDirty']
Usability,"e_t, Double_t, Bool_t). protected . ! Pointer to a method calculating the boundaries of confidence intervals ; Definition at line 51 of file TEfficiency.h. ◆ fConfLevel. Double_t TEfficiency::fConfLevel. protected . Confidence level (default = 0.683, 1 sigma) ; Definition at line 52 of file TEfficiency.h. ◆ fDirectory. TDirectory* TEfficiency::fDirectory. protected . ! Pointer to directory holding this TEfficiency object ; Definition at line 53 of file TEfficiency.h. ◆ fFunctions. TList* TEfficiency::fFunctions. protected . ->Pointer to list of functions ; Definition at line 54 of file TEfficiency.h. ◆ fPaintGraph. TGraphAsymmErrors* TEfficiency::fPaintGraph =nullptr. protected . ! Temporary graph for painting ; Definition at line 55 of file TEfficiency.h. ◆ fPaintGraph2D. TGraph2DAsymmErrors* TEfficiency::fPaintGraph2D =nullptr. protected . ! Temporary graph for painting ; Definition at line 56 of file TEfficiency.h. ◆ fPaintHisto. TH2* TEfficiency::fPaintHisto =nullptr. protected . ! Temporary histogram for painting ; Definition at line 57 of file TEfficiency.h. ◆ fPassedHistogram. TH1* TEfficiency::fPassedHistogram. protected . Histogram for events which passed certain criteria. ; Definition at line 58 of file TEfficiency.h. ◆ fStatisticOption. EStatOption TEfficiency::fStatisticOption. protected . Defines how the confidence intervals are determined. ; Definition at line 59 of file TEfficiency.h. ◆ fTotalHistogram. TH1* TEfficiency::fTotalHistogram. protected . Histogram for total number of events. ; Definition at line 60 of file TEfficiency.h. ◆ fWeight. Double_t TEfficiency::fWeight. protected . Weight for all events (default = 1) ; Definition at line 61 of file TEfficiency.h. Libraries for TEfficiency:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TEfficiency.h; hist/hist/src/TEfficiency.cxx. TEfficiency. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:117700,Guid,Guide,117700,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['Guid'],['Guide']
Usability,"e_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsAnaConvPdf.html:4256,clear,clearShapeDirty,4256,root/html532/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsAnaConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"e_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:3356,clear,clearShapeDirty,3356,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,1,['clear'],['clearShapeDirty']
Usability,"e_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEffProd.html:2957,clear,clearShapeDirty,2957,root/html532/RooEffProd.html,https://root.cern,https://root.cern/root/html532/RooEffProd.html,3,['clear'],['clearShapeDirty']
Usability,"e_type = 3 build 3 different networks with RNN, LSTM and GRU; ; ; use_type = 1; ninput = 30; ntime = 10; batchSize = 100; maxepochs = 10; ; nTotEvts = 2000 # total events to be generated for signal or background; ; useKeras = True; ; useTMVA_RNN = True; useTMVA_DNN = True; useTMVA_BDT = False; ; tf_spec = importlib.util.find_spec(""tensorflow""); if tf_spec is None:; useKeras = False; ROOT.Warning(""TMVA_RNN_Classificaton"",""Skip using Keras since tensorflow is not installed""); ; ; rnn_types = [""RNN"", ""LSTM"", ""GRU""]; use_rnn_type = [1, 1, 1]; ; if 0 <= use_type < 3:; use_rnn_type = [0, 0, 0]; use_rnn_type[use_type] = 1; ; useGPU = True # use GPU for TMVA if available; ; useGPU = ""tmva-gpu"" in ROOT.gROOT.GetConfigFeatures(); useTMVA_RNN = (""tmva-cpu"" in ROOT.gROOT.GetConfigFeatures()) or useGPU; ; if useTMVA_RNN:; ROOT.Warning(; ""TMVA_RNN_Classification"",; ""TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for RNN"",; ); ; archString = ""GPU"" if useGPU else ""CPU""; ; writeOutputFile = True; ; rnn_type = ""RNN""; ; if ""tmva-pymva"" in ROOT.gROOT.GetConfigFeatures():; TMVA.PyMethodBase.PyInitialize(); else:; useKeras = False; ; ; ; inputFileName = ""time_data_t10_d30.root""; ; fileDoesNotExist = ROOT.gSystem.AccessPathName(inputFileName); ; # if file does not exists create it; if fileDoesNotExist:; MakeTimeData(nTotEvts, ntime, ninput); ; ; inputFile = TFile.Open(inputFileName); if inputFile is None:; raise ROOT.Error(""Error opening input file %s - exit"", inputFileName.Data()); ; ; print(""--- RNNClassification : Using input file: {}"".format(inputFile.GetName())); ; # Create a ROOT output file where TMVA will store ntuples, histograms, etc.; outfileName = ""data_RNN_"" + archString + "".root""; outputFile = None; ; ; if writeOutputFile:; outputFile = TFile.Open(outfileName, ""RECREATE""); ; ; ## Declare Factory; ; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; ; # The factory is the major T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:53264,Learn,Learning,53264,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Learn'],['Learning']
Usability,"e_t ; beta, . TVectorD & ; y, . Double_t ; alpha, . const TVectorD & ; x . ). pure virtual . Implemented in TQpDataDens, and TQpDataSparse. ◆ RandomlyChooseBoundedVariables(). void TQpDataBase::RandomlyChooseBoundedVariables ; (; TVectorD & ; x, . TVectorD & ; dualx, . TVectorD & ; blx, . TVectorD & ; ixlow, . TVectorD & ; bux, . TVectorD & ; ixupp, . Double_t & ; ix, . Double_t ; percentLowerOnly, . Double_t ; percentUpperOnly, . Double_t ; percentBound . ). staticprotected . Randomly choose x and its boundaries. ; Definition at line 111 of file TQpDataBase.cxx. Member Data Documentation. ◆ fBa. TVectorD TQpDataBase::fBa. Definition at line 78 of file TQpDataBase.h. ◆ fCloBound. TVectorD TQpDataBase::fCloBound. Definition at line 85 of file TQpDataBase.h. ◆ fCloIndex. TVectorD TQpDataBase::fCloIndex. Definition at line 86 of file TQpDataBase.h. ◆ fCupBound. TVectorD TQpDataBase::fCupBound. Definition at line 83 of file TQpDataBase.h. ◆ fCupIndex. TVectorD TQpDataBase::fCupIndex. Definition at line 84 of file TQpDataBase.h. ◆ fG. TVectorD TQpDataBase::fG. Definition at line 77 of file TQpDataBase.h. ◆ fMy. Int_t TQpDataBase::fMy. Definition at line 74 of file TQpDataBase.h. ◆ fMz. Int_t TQpDataBase::fMz. Definition at line 75 of file TQpDataBase.h. ◆ fNx. Int_t TQpDataBase::fNx. Definition at line 73 of file TQpDataBase.h. ◆ fXloBound. TVectorD TQpDataBase::fXloBound. Definition at line 81 of file TQpDataBase.h. ◆ fXloIndex. TVectorD TQpDataBase::fXloIndex. Definition at line 82 of file TQpDataBase.h. ◆ fXupBound. TVectorD TQpDataBase::fXupBound. Definition at line 79 of file TQpDataBase.h. ◆ fXupIndex. TVectorD TQpDataBase::fXupIndex. Definition at line 80 of file TQpDataBase.h. Libraries for TQpDataBase:. [legend]; The documentation for this class was generated from the following files:; math/quadp/inc/TQpDataBase.h; math/quadp/src/TQpDataBase.cxx. TQpDataBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataBase.html:18309,Guid,Guide,18309,doc/master/classTQpDataBase.html,https://root.cern,https://root.cern/doc/master/classTQpDataBase.html,1,['Guid'],['Guide']
Usability,"e_t ; startz = 0, . const char * ; target_vol = nullptr, . Bool_t ; check_norm = kFALSE . ). Randomly shoot nrays and plot intersections with surfaces for current top node. ; Definition at line 3077 of file TGeoManager.cxx. ◆ RefreshPhysicalNodes(). void TGeoManager::RefreshPhysicalNodes ; (; Bool_t ; lock = kTRUE). Refresh physical nodes to reflect the actual geometry paths after alignment was applied. ; Optionally locks physical nodes (default). ; Definition at line 3526 of file TGeoManager.cxx. ◆ RegisterMatrix(). void TGeoManager::RegisterMatrix ; (; const TGeoMatrix * ; matrix). Register a matrix to the list of matrices. ; It will be cleaned-up at the destruction TGeoManager. ; Definition at line 1115 of file TGeoManager.cxx. ◆ RemoveMaterial(). void TGeoManager::RemoveMaterial ; (; Int_t ; index). Remove material at given index. ; Definition at line 3086 of file TGeoManager.cxx. ◆ RemoveNavigator(). void TGeoManager::RemoveNavigator ; (; const TGeoNavigator * ; nav). Clear a single navigator. ; Definition at line 899 of file TGeoManager.cxx. ◆ ReplaceVolume(). Int_t TGeoManager::ReplaceVolume ; (; TGeoVolume * ; vorig, . TGeoVolume * ; vnew . ). Replaces all occurrences of VORIG with VNEW in the geometry tree. ; The volume VORIG is not replaced from the list of volumes, but all node referencing it will reference VNEW instead. Returns number of occurrences changed. ; Definition at line 1125 of file TGeoManager.cxx. ◆ ResetState(). void TGeoManager::ResetState ; (; ). Reset current state flags. ; Definition at line 2774 of file TGeoManager.cxx. ◆ ResetUserData(). void TGeoManager::ResetUserData ; (; ). Sets all pointers TGeoVolume::fField to NULL. ; User data becomes decoupled from geometry. Deletion has to be managed by users. ; Definition at line 3097 of file TGeoManager.cxx. ◆ RestoreMasterVolume(). void TGeoManager::RestoreMasterVolume ; (; ). Restore the master volume of the geometry. ; Definition at line 3118 of file TGeoManager.cxx. ◆ Safety(). Double_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:129794,Clear,Clear,129794,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['Clear']
Usability,"e_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoConeSeg.html:5913,Clear,ClearThreadData,5913,doc/master/classTGeoConeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html,1,['Clear'],['ClearThreadData']
Usability,"e_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCtub.html:8851,Clear,ClearThreadData,8851,doc/master/classTGeoCtub.html,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html,2,['Clear'],['ClearThreadData']
Usability,"e_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual void GetKnot (Int_t i, Double_t &x, Double_t &y) const =0;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SaveAs (const char *="""", Option_t *="""") const override;  Save this object in the file specified by filename. ;  ; void SetNpx (Int_t n);  ; void Streamer (TBuffer &) override;  Stream an object of class TSpline. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline.html:1969,Clear,Clear,1969,doc/master/classTSpline.html,https://root.cern,https://root.cern/doc/master/classTSpline.html,1,['Clear'],['Clear']
Usability,"e`) or not (`false`). It should perform ""read-only"" operations on the; 501columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 502when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 503names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 504certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 505loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 506 ; 507RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 508in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 509entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 510each entry: after the first access it simply serves a cached result.; 511 ; 512\anchor named-filters-and-cutflow-reports; 513#### Named filters and cutflow reports; 514An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 515work as usual, but also keep track of how many entries they accept and reject.; 516 ; 517Statistics are retrieved through a call to the Report() method:; 518 ; 519- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 520named filters declared up to that point; 521- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 522relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 523 ; 524Stats are stored in the same order as named filters have been added to the graph, and *refer to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:31191,simpl,simply,31191,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['simpl'],['simply']
Usability,"e`) or not (`false`). It should perform ""read-only"" operations on the; 541columns, and should not have side-effects (e.g. modification of an external or static variable) to ensure correctness; 542when implicit multi-threading is active. The second overload takes a string with a valid C++ expression in which column; 543names are used as variable names (e.g. `Filter(""x[0] + x[1] > 0"")`). This is a convenience feature that comes with a; 544certain runtime overhead: C++ code has to be generated on the fly from this expression before using it in the event; 545loop. See the paragraph about ""Just-in-time compilation"" below for more information.; 546 ; 547RDataFrame only evaluates filters when necessary: if multiple filters are chained one after another, they are executed; 548in order and the first one returning `false` causes the event to be discarded and triggers the processing of the next; 549entry. If multiple actions or transformations depend on the same filter, that filter is not executed multiple times for; 550each entry: after the first access it simply serves a cached result.; 551 ; 552\anchor named-filters-and-cutflow-reports; 553#### Named filters and cutflow reports; 554An optional string parameter `name` can be passed to the Filter() method to create a **named filter**. Named filters; 555work as usual, but also keep track of how many entries they accept and reject.; 556 ; 557Statistics are retrieved through a call to the Report() method:; 558 ; 559- when Report() is called on the main RDataFrame object, it returns a ROOT::RDF::RResultPtr<RCutFlowReport> relative to all; 560named filters declared up to that point; 561- when called on a specific node (e.g. the result of a Define() or Filter()), it returns a ROOT::RDF::RResultPtr<RCutFlowReport>; 562relative all named filters in the section of the chain between the main RDataFrame and that node (included).; 563 ; 564Stats are stored in the same order as named filters have been added to the graph, and *refer to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:32831,simpl,simply,32831,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['simpl'],['simply']
Usability,"each with no cache will imply 10s penalty where a local read of the 10 MBytes would take about 1 second.; The TreeCache tries to prefetch all the buffers for the selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the next request comes. Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all entries such that not all branch buffers are read. General Description; This class acts as a file cache, registering automatically the baskets from the branches being processed via direct manipulation of TTrees or with tools such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame when in the learning phase. The learning phase is by default 100 entries. It can be changed via TTreeCache::SetLearnEntries.; The usage of a TTreeCache can considerably improve the runtime performance at the price of a modest investment in memory, in particular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30 Megabytes). This feature can be controlled with the environment variable ROOT_TTREECACHE_SIZE or the TTreeCache.Size option. The entry range for which the cache is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:2496,learn,learning,2496,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"ead Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2072 of file TTreeCache.cxx. ◆ SetEntryRange(). void TTreeCache::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2105 of file TTreeCache.cxx. ◆ SetFile(). void TTreeCache::SetFile ; (; TFile * ; file, . TFile::ECacheAction ; action = TFile::kDisconnect . ). overridevirtual . Change the file that is being cached. ; Reimplemented from TFileCacheRead.; Definition at line 2127 of file TTreeCache.cxx. ◆ SetLearnEntries(). void TTreeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function to set the number of entries to be used in learning mode The default value for n is 10. ; n must be >= 1 ; Definition at line 2144 of file TTreeCache.cxx. ◆ SetLearnPrefill(). void TTreeCache::SetLearnPrefill ; (; TTreeCache::EPrefillType ; type = kNoPrefill). virtual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2159 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:49429,learn,learning,49429,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['learn'],['learning']
Usability,"ead and found in the cache; Int_tfNReadPrefNumber of blocks that were prefetched; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tfNbranches! Number of branches in the cache; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase ; TTree*fOwner! pointer to the owner Tree/chain; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch!Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; Bool_tfReadDirectionSet! read direction established; Bool_tfReverseRead! reading in reverse mode ; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the bra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCache.html:19094,learn,learning,19094,root/html532/TTreeCache.html,https://root.cern,https://root.cern/root/html532/TTreeCache.html,1,['learn'],['learning']
Usability,"eadBasketExport(). void TLeafD::ReadBasketExport ; (; TBuffer & ; b, . TClonesArray * ; list, . Int_t ; n . ). overridevirtual . Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ; Reimplemented from TLeaf.; Definition at line 142 of file TLeafD.cxx. ◆ ReadBasketFast(). bool TLeafD::ReadBasketFast ; (; TBuffer & ; input_buf, . Long64_t ; N . ). overridevirtual . Reimplemented from TLeaf.; Definition at line 133 of file TLeafD.cxx. ◆ ReadValue(). void TLeafD::ReadValue ; (; std::istream & ; s, . Char_t ; delim = ' ' . ). overridevirtual . Read a double from std::istream s and store it into the branch buffer. ; Reimplemented from TLeaf.; Definition at line 156 of file TLeafD.cxx. ◆ SetAddress(). void TLeafD::SetAddress ; (; void * ; add = nullptr). overridevirtual . Set leaf buffer data address. ; Reimplemented from TLeaf.; Definition at line 165 of file TLeafD.cxx. ◆ Streamer(). void TLeafD::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TLeaf. ◆ StreamerNVirtual(). void TLeafD::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file TLeafD.h. Member Data Documentation. ◆ fMaximum. Double_t TLeafD::fMaximum. protected . Maximum value if leaf range is specified. ; Definition at line 30 of file TLeafD.h. ◆ fMinimum. Double_t TLeafD::fMinimum. protected . Minimum value if leaf range is specified. ; Definition at line 29 of file TLeafD.h. ◆ fPointer. Double_t** TLeafD::fPointer. protected . ! Address of pointer to data buffer ; Definition at line 32 of file TLeafD.h. ◆ fValue. Double_t* TLeafD::fValue. protected . ! Pointer to data buffer ; Definition at line 31 of file TLeafD.h. Libraries for TLeafD:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TLeafD.h; tree/tree/src/TLeafD.cxx. TLeafD. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafD.html:21492,Guid,Guide,21492,doc/master/classTLeafD.html,https://root.cern,https://root.cern/doc/master/classTLeafD.html,1,['Guid'],['Guide']
Usability,"eadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:156050,simpl,simple,156050,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['simpl'],['simple']
Usability,"eadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodTMlpANN::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . rebuild temporary textfile from xml weightfile and load this file into MLP ; Implements TMVA::MethodBase.; Definition at line 379 of file MethodTMlpANN.cxx. ◆ SetHiddenLayer(). void TMVA::MethodTMlpANN::SetHiddenLayer ; (; TString ; hiddenlayer = """"). inline . Definition at line 81 of file MethodTMlpANN.h. ◆ Streamer(). virtual void TMVA::MethodTMlpANN::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodTMlpANN::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 121 of file MethodTMlpANN.h. ◆ Train(). void TMVA::MethodTMlpANN::Train ; (; void ; ). virtual . performs TMlpANN training available learning methods: . TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once so merge the training and testing trees from the MVA factory first: ; Implements TMVA::MethodBase.; Definition at line 260 of file MethodTMlpANN.cxx. Member Data Documentation. ◆ fHiddenLayer. TString TMVA::MethodTMlpANN::fHiddenLayer. private . string containing the hidden layer structure ; Definition at line 111 of file MethodTMlpANN.h. ◆ fLayerSpec. TString TMVA::MethodTMlpANN::fLayerSpec. private . Layer specification option. ; Definition at line 106 of file MethodTMlpANN.h. ◆ fLearningMethod. TString TMVA::MethodTMlpANN::fLearningMethod. private . the learning method (given via option string) ; Definition at line 116 of file MethodTMlpANN.h. ◆ fLocalTrainingTree. TTree* TMVA::Method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:35435,learn,learning,35435,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['learn'],['learning']
Usability,"eaflist, Int_t bufsize = 32000); virtual TBranch*Branch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*Branch<const char>(const char* name, const char* classname, const char* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*Branch<void>(const char* name, void* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tBuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tCopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*CreateBasket(TBranch*); Int_tDebug() const; virtual voidDelete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTree.html:14228,Clear,Clear,14228,root/html602/TTree.html,https://root.cern,https://root.cern/root/html602/TTree.html,2,['Clear'],['Clear']
Usability,"eal.h. ◆ isHidden(). bool RooAbsHiddenReal::isHidden ; (; ); const. inline . Definition at line 42 of file RooAbsHiddenReal.h. ◆ printValue(). void RooAbsHiddenReal::printValue ; (; std::ostream & ; stream); const. overridevirtual . Special version of printValue that doesn't reveal the objects value. ; Reimplemented from RooPrintable.; Definition at line 78 of file RooAbsHiddenReal.cxx. ◆ readFromStream(). bool RooAbsHiddenReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Special version of readFromStream that disallows reading from stream. ; Implements RooAbsArg.; Definition at line 88 of file RooAbsHiddenReal.cxx. ◆ Streamer(). void RooAbsHiddenReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooUnblindCPAsymVar, RooUnblindOffset, RooUnblindPrecision, and RooUnblindUniform. ◆ StreamerNVirtual(). void RooAbsHiddenReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file RooAbsHiddenReal.h. ◆ writeToStream(). void RooAbsHiddenReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Special version of writeToStream that disallows reading from stream. ; Implements RooAbsArg.; Definition at line 104 of file RooAbsHiddenReal.cxx. Member Data Documentation. ◆ _dummyBlindState. RooCategory * RooAbsHiddenReal::_dummyBlindState = nullptr. staticprotected . Definition at line 62 of file RooAbsHiddenReal.h. ◆ _state. RooCategoryProxy RooAbsHiddenReal::_state. protected . Definition at line 65 of file RooAbsHiddenReal.h. Libraries for RooAbsHiddenReal:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsHiddenReal.h; roofit/roofitcore/src/RooAbsHiddenReal.cxx. RooAbsHiddenReal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsHiddenReal.html:65441,Guid,Guide,65441,doc/master/classRooAbsHiddenReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsHiddenReal.html,1,['Guid'],['Guide']
Usability,"eal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegralMorph.html:6574,clear,clearEvalError,6574,root/html534/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html534/RooIntegralMorph.html,3,['clear'],['clearEvalError']
Usability,"eal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:3786,clear,clearShapeDirty,3786,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,3,['clear'],['clearShapeDirty']
Usability,"ealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:3157,Clear,Clear,3157,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,32,['Clear'],['Clear']
Usability,"ealNorm(). virtual void TTreePerfStats::SetRealNorm ; (; Double_t ; rnorm). inlinevirtual . Definition at line 139 of file TTreePerfStats.h. ◆ SetRealTime(). virtual void TTreePerfStats::SetRealTime ; (; Double_t ; rtime). inlinevirtual . Definition at line 140 of file TTreePerfStats.h. ◆ SetTreeCacheSize(). virtual void TTreePerfStats::SetTreeCacheSize ; (; Int_t ; nbytes). inlinevirtual . Definition at line 141 of file TTreePerfStats.h. ◆ SetUnzipTime(). virtual void TTreePerfStats::SetUnzipTime ; (; Double_t ; uztime). inlinevirtual . Definition at line 142 of file TTreePerfStats.h. ◆ SetUsed() [1/2]. void TTreePerfStats::SetUsed ; (; size_t ; bi, . size_t ; basketNumber . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 152 of file TTreePerfStats.h. ◆ SetUsed() [2/2]. void TTreePerfStats::SetUsed ; (; TBranch * ; b, . size_t ; basketNumber . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 151 of file TTreePerfStats.h. ◆ SimpleEvent(). void TTreePerfStats::SimpleEvent ; (; EEventType ; ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 115 of file TTreePerfStats.h. ◆ Streamer(). void TTreePerfStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TTreePerfStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 157 of file TTreePerfStats.h. ◆ UnzipEvent(). void TTreePerfStats::UnzipEvent ; (; TObject * ; tree, . Long64_t ; pos, . Double_t ; start, . Int_t ; complen, . Int_t ; objlen . ). overridevirtual . Record TTree unzip event. . start is the TimeStamp before unzip; pos is where in the file the compressed buffer came from; complen is the length of the compressed buffer; objlen is the length of the de-compressed buffer . Implements TVirtualPerfStats.; Definition at line 312 of file TTreePerfStats.cxx. ◆ UpdateBranchIndices(). void TTreePerfStats:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats.html:32458,Simpl,SimpleEvent,32458,doc/master/classTTreePerfStats.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"eamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTreeBinning.html:6574,Clear,Clear,6574,doc/master/classTKDTreeBinning.html,https://root.cern,https://root.cern/doc/master/classTKDTreeBinning.html,1,['Clear'],['Clear']
Usability,"eamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPolyLine.html:6136,Clear,Clear,6136,doc/master/classTPolyLine.html,https://root.cern,https://root.cern/doc/master/classTPolyLine.html,4,['Clear'],['Clear']
Usability,"eamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList.; Reimplemented in TEveTrackListProjected. ◆ StreamerNVirtual(). void TEveTrackList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 227 of file TEveTrack.h. ◆ WriteVizParams(). void TEveTrackList::WriteVizParams ; (; std::ostream & ; out, . const TString & ; var . ). overridevirtual . Write visualization parameters. ; Reimplemented from TEveElement.; Definition at line 1153 of file TEveTrack.cxx. Friends And Related Symbol Documentation. ◆ TEveTrackListEditor. friend class TEveTrackListEditor. friend . Definition at line 141 of file TEveTrack.h. Member Data Documentation. ◆ fLimP. Double_t TEveTrackList::fLimP. protected . Definition at line 160 of file TEveTrack.h. ◆ fLimPt. Double_t TEveTrackList::fLimPt. protected . Definition at line 157 of file TEveTrack.h. ◆ fMaxP. Double_t TEveTrackList::fMaxP. protected . Definition at line 159 of file TEveTrack.h. ◆ fMaxPt. Double_t TEveTrackList::fMaxPt. protected . Definition at line 156 of file TEveTrack.h. ◆ fMinP. Double_t TEveTrackList::fMinP. protected . Definition at line 158 of file TEveTrack.h. ◆ fMinPt. Double_t TEveTrackList::fMinPt. protected . Definition at line 155 of file TEveTrack.h. ◆ fPropagator. TEveTrackPropagator* TEveTrackList::fPropagator. protected . Definition at line 148 of file TEveTrack.h. ◆ fRecurse. Bool_t TEveTrackList::fRecurse. protected . Definition at line 150 of file TEveTrack.h. ◆ fRnrLine. Bool_t TEveTrackList::fRnrLine. protected . Definition at line 152 of file TEveTrack.h. ◆ fRnrPoints. Bool_t TEveTrackList::fRnrPoints. protected . Definition at line 153 of file TEveTrack.h. Libraries for TEveTrackList:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveTrack.h; graf3d/eve/src/TEveTrack.cxx. TEveTrackList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackList.html:52191,Guid,Guide,52191,doc/master/classTEveTrackList.html,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html,1,['Guid'],['Guide']
Usability,eamer(). void TDSet::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TDSet. ; Reimplemented from TObject.; Reimplemented in TDSetProxy.; Definition at line 1813 of file TDSet.cxx. ◆ StreamerNVirtual(). void TDSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 262 of file TDSet.h. ◆ Validate() [1/2]. void TDSet::Validate ; (; ). Validate the TDSet by opening files. ; Definition at line 1589 of file TDSet.cxx. ◆ Validate() [2/2]. void TDSet::Validate ; (; TDSet * ; dset). Validate the TDSet against another TDSet. ; Only validates elements in common from input TDSet. ; Definition at line 1668 of file TDSet.cxx. Member Data Documentation. ◆ fCurrent. TDSetElement* TDSet::fCurrent. protected . iterator on fElements ; Definition at line 182 of file TDSet.h. ◆ fDir. TString TDSet::fDir. protected . Definition at line 177 of file TDSet.h. ◆ fElements. THashList* TDSet::fElements. protected . Definition at line 180 of file TDSet.h. ◆ fEntryList. TObject* TDSet::fEntryList. private . Definition at line 168 of file TDSet.h. ◆ fIsTree. Bool_t TDSet::fIsTree. private . Definition at line 167 of file TDSet.h. ◆ fIterator. TIter* TDSet::fIterator. protected . Definition at line 181 of file TDSet.h. ◆ fObjName. TString TDSet::fObjName. protected . Definition at line 179 of file TDSet.h. ◆ fProofChain. TProofChain* TDSet::fProofChain. private . entry (or event) list for processing ; Definition at line 169 of file TDSet.h. ◆ fSrvMaps. TList* TDSet::fSrvMaps. protected . current element ; Definition at line 183 of file TDSet.h. ◆ fSrvMapsIter. TIter* TDSet::fSrvMapsIter. protected . list for mapping server coordinates for files ; Definition at line 184 of file TDSet.h. ◆ fType. TString TDSet::fType. protected . Definition at line 178 of file TDSet.h. proof/proof/inc/TDSet.h; proof/proof/src/TDSet.cxx. TDSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:31268,Guid,Guide,31268,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['Guid'],['Guide']
Usability,"ean and sigma parameters; the algorithm works on the same principle as in multivariate case -; it finds a subset of size hh with smallest sigma, and then returns mean and; sigma of this subset. Int_t GetBDPoint(); returns the breakdown point of the algorithm. Double_t GetChiQuant(Int_t i) const; returns the chi2 quantiles. void GetCovariance(TMatrixDSym& matr); returns the covariance matrix. void GetCorrelation(TMatrixDSym& matr); returns the correlation matrix. const TVectorD* GetHyperplane() const; if the points are on a hyperplane, returns this hyperplane. void GetHyperplane(TVectorD& vec); if the points are on a hyperplane, returns this hyperplane. void GetMean(TVectorD& means); return the estimate of the mean. void GetRDistances(TVectorD& rdist); returns the robust distances (helps to find outliers). Int_t GetNOut(); returns the number of outliers. void AddToSscp(TMatrixD& sscp, TVectorD& vec); update the sscp matrix with vector vec. void ClearSscp(TMatrixD& sscp); clear the sscp matrix, used for covariance and mean calculation. void Classic(); called when h=n. Returns classic covariance matrix; and mean. void Covar(TMatrixD& sscp, TVectorD& m, TMatrixDSym& cov, TVectorD& sd, Int_t nvec); calculates mean and covariance. void Correl(); transforms covariance matrix into correlation matrix. void CreateSubset(Int_t ntotal, Int_t htotal, Int_t p, Int_t* index, TMatrixD& data, TMatrixD& sscp, Double_t* ndist); creates a subset of htotal elements from ntotal elements; first, p+1 elements are drawn randomly(without repetitions); if their covariance matrix is singular, more elements are; added one by one, until their covariance matrix becomes regular; or it becomes clear that htotal observations lie on a hyperplane; If covariance matrix determinant!=0, distances of all ntotal elements; are calculated, using formula d_i=Sqrt((x_i-M)*S_inv*(x_i-M)), where; M is mean and S_inv is the inverse of the covariance matrix; htotal points with smallest distances are included in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRobustEstimator.html:13799,Clear,ClearSscp,13799,root/html528/TRobustEstimator.html,https://root.cern,https://root.cern/root/html528/TRobustEstimator.html,12,"['Clear', 'clear']","['ClearSscp', 'clear']"
Usability,eanVariance;  CNetNeural net ;  CSettingsSettings for the training of the neural net ;  CSteepestSteepest Gradient Descent algorithm (SGD) ;  CTBatchTBatch ;  CTBatchIteratorTBatchIterator ;  CTCpuThe TCpu architecture class ;  ►CTCpuBufferTCpuBuffer ;  CTDestructor;  CTCpuMatrixThe TCpuMatrix class ;  CTCudaThe TCuda architecture class ;  ►CTCudaDeviceBufferTCudaDeviceBuffer ;  CTDestructor;  CTCudaDeviceReferenceTCudaDeviceReference ;  ►CTCudaHostBufferTCudaHostBuffer ;  CTDestructor;  CTCudaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NkNN;  CEvent;  CModulekNN;  CNode;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidation;  CCrossValidationResult;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:69305,simpl,simple,69305,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['simpl'],['simple']
Usability,"eanup request for the session specified by tag. ; Definition at line 6092 of file TProof.cxx. ◆ ClearCache(). void TProof::ClearCache ; (; const char * ; file = 0). virtual . Remove file from all file caches. ; If file is 0 or """" or ""*"", remove all the files ; Reimplemented in TProofLite.; Definition at line 7714 of file TProof.cxx. ◆ ClearData(). void TProof::ClearData ; (; UInt_t ; what = kUnregistered, . const char * ; dsname = 0 . ). Remove files for the data directory. ; The option 'what' can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75198,Clear,ClearDataSetCache,75198,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearDataSetCache']
Usability,eanupNotifier::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Internal::TreeUtils::RNoCleanupNotifier::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Internal::TreeUtils::RNoCleanupNotifier::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file InternalTreeUtils.hxx. ◆ DeclFileName(). static const char * ROOT::Internal::TreeUtils::RNoCleanupNotifier::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file InternalTreeUtils.hxx. ◆ IsA(). TClass * ROOT::Internal::TreeUtils::RNoCleanupNotifier::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 76 of file InternalTreeUtils.hxx. ◆ RegisterChain(). void ROOT::Internal::TreeUtils::RNoCleanupNotifier::RegisterChain ; (; TChain & ; c). inline . Definition at line 70 of file InternalTreeUtils.hxx. ◆ Streamer(). void ROOT::Internal::TreeUtils::RNoCleanupNotifier::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::Internal::TreeUtils::RNoCleanupNotifier::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file InternalTreeUtils.hxx. Member Data Documentation. ◆ fNoCleanupNotifierHelper. RNoCleanupNotifierHelper ROOT::Internal::TreeUtils::RNoCleanupNotifier::fNoCleanupNotifierHelper. private . Definition at line 65 of file InternalTreeUtils.hxx. Libraries for ROOT::Internal::TreeUtils::RNoCleanupNotifier:. [legend]; The documentation for this class was generated from the following file:; tree/tree/inc/ROOT/InternalTreeUtils.hxx. ROOTInternalTreeUtilsRNoCleanupNotifier. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:18 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:14019,Guid,Guide,14019,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,1,['Guid'],['Guide']
Usability,"ean} \\; 51 \end{align}; 52 \f]; 53 The bin content is always the mean of the Y values, but errors change depending on options:; 54 \f[; 55 \begin{align}; 56 \text{GetBinContent}(j) &= h(j) \\; 57 \text{GetBinError}(j) &=; 58 \begin{cases}; 59 e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; 60 s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; 61 \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 62 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; 63 \end{cases}; 64 \end{align}; 65 \f]; 66 In the special case where s(j) is zero (eg, case of 1 entry only in one bin); 67 the bin error e(j) is computed from the average of the s(j) for all bins if; 68 the static function TProfile::Approximate() has been called.; 69 This simple/crude approximation was suggested in order to keep the bin; 70 during a fit operation. But note that this approximation is not the default behaviour.; 71 See also TProfile::BuildOptions for more on error options.; 72 ; 73 ### Creating and drawing a profile histogram; 74~~~{.cpp}; 75{; 76 auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; 77 auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; 78 Float_t px, py, pz;; 79 for ( Int_t i=0; i<25000; i++) {; 80 gRandom->Rannor(px,py);; 81 pz = px*px + py*py;; 82 hprof->Fill(px,pz,1);; 83 }; 84 hprof->Draw();; 85}; 86~~~; 87*/; 88 ; 89////////////////////////////////////////////////////////////////////////////////; 90/// Default constructor for Profile histograms; 91 ; 92TProfile::TProfile(); 93{; 94 BuildOptions(0,0,"""");; 95}; 96 ; 97////////////////////////////////////////////////////////////////////////////////; 98/// Default destructor for Profile histograms; 99 ; 100TProfile::~TProfile(); 101{; 102}; 103 ; 104/////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:3182,simpl,simple,3182,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['simpl'],['simple']
Usability,"earArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX.; Definition at line 2292 of file TGCocoa.mm. ◆ ClearAreaAux(). void TGCocoa::ClearAreaAux ; (; Window_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). Definition at line 2252 of file TGCocoa.mm. ◆ ClearWindow() [1/2]. void TGCocoa::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reimplemented from TVirtualX.; Definition at line 681 of file TGCocoa.mm. ◆ ClearWindow() [2/2]. void TGCocoa::ClearWindow ; (; Window_t ; id). overridevirtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented from TVirtualX.; Definition at line 2317 of file TGCocoa.mm. ◆ CloseDisplay(). void TGCocoa::CloseDisplay ; (; ). overridevirtual . Closes connection to display server and destroys all windows. ; Reimplemented from TVirtualX.; Definition at line 524 of file TGCocoa.mm. ◆ ClosePixmap(). void TGCocoa::ClosePixmap ; (; ). overridevirtual . Deletes current pixmap. ; Reimplemented from TVirtualX.; Definition at line 2413 of file TGCocoa.mm. ◆ CloseWindow(). void TGCocoa::CloseWindow ; (; ). overridevirtual . Deletes current window. ; Reimplemented from TVirtualX.; Definition at line 840 of file TGCocoa.mm. ◆ CocoaDrawOFF(). void TGCocoa::CocoaDrawOFF ; (; ). Definition at line 4412 of file TGCocoa.mm. ◆ CocoaDrawON(). void TGCocoa::CocoaDrawON ; (; ). Definition at line 4406 of file TGCocoa.mm. ◆ ConvertPrimarySelection(). void TGCocoa::ConvertPrimarySelection ; (; Window_t ; id, . Atom_t ; clipboard, . Time_t ; when . ). overridevirtual . Ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:58176,Clear,Clears,58176,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,2,['Clear'],"['ClearArea', 'Clears']"
Usability,"earch. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt! transient copy of the alt NLL; RooNLLVar*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html:535,Simpl,SimpleLikelihoodRatioTestStat,535,root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,8,['Simpl'],"['SimpleLikelihoodRatioTestStat', 'SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat']"
Usability,"earch. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidsetAlwaysReuseNLL(Bool_t flag); voidSetNullParameters(const RooArgSet& nullParameters); voidsetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt; RooNLLVar*fNllNull; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html:535,Simpl,SimpleLikelihoodRatioTestStat,535,root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,8,['Simpl'],"['SimpleLikelihoodRatioTestStat', 'SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat']"
Usability,"earningRate). Updates the weights and biases, given the learning rate. ; Definition at line 410 of file GeneralLayer.h. ◆ UpdateBiases(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiases ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the biases, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; name, . const Matrix_t & ; matrix . ). Definition at line 521 of file GeneralLayer.h. ◆ WriteTensorToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteTensorToXML ; (; void * ; node, . const char * ; name, . const std::vector< Matrix_t > & ; tensor . ). helper functions for XML ; Definition at line 496 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:26281,learn,learningRate,26281,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,1,['learn'],['learningRate']
Usability,ease 5.12/00d - 2006-09-02. Release 5.12/00 - 2006-07-14. Release 5.11/06 - 2006-06-07. Release 5.11/04 - 2006-05-31. Release 5.11/02 - 2006-05-08. Release 5.10/00 - 2006-03-02. Release 5.08/00 - 2005-12-15. Release 5.06/00 - 2005-10-31. Release 5.04/00 - 2005-09-20. Release 5.02/00 - 2005-07-05. Version 4 ; ; Release 4.04/02 - 2005-05-14. Release 4.03/04 - 2005-04-06. Release 4.03/02 - 2005-02-10. Release 4.02/00 - 2004-12-17. Release 4.01/04 - 2004-11-20. Release 4.01/02 - 2004-09-24. Release 4.00/08 - 2004-07-11. Release 4.00/06a - 2004-07-11. Release 4.00/06 - 2004-07-11. Release 4.00/04 - 2004-05-04. Release 4.00/03 - 2004-03-25. Release 4.00/02 - 2004-02-20. Release 4.00/01 - 2004-02-02. Version 3 ; ; Release 3.10/02 - 2004-01-23. Release 3.10/01a - 2004-01-23. Release 3.10/01 - 2004-01-23. Release 3.05/07a - 2003-08-06. Release 3.05/07 - 2003-07-27. Release 3.05/06 - 2003-07-18. Release 3.05/05 - 2003-05-08. Release 3.05/04 - 2003-04-21. Release 3.05/03 - 2003-03-11. Release 3.05/02 - 2003-02-12. Release 3.04/02 - 2002-12-18. Release 3.04/01 - 2002-12-11. Release 3.03/09b - 2002-11-05. Release 3.03/09a - 2002-10-31. Release 3.03/09 - 2002-09-18. Release 3.02/07 - 2002-02-06. . Release notes can be found on the respective release page; release notes for old releases can be found here. ; . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/releases.html:8173,Guid,Guides,8173,d/releases.html,https://root.cern,https://root.cern/d/releases.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
